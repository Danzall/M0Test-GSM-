
M0_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08009000  08009000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006560  080090c0  080090c0  000090c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800f620  0800f620  0000f620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fab8  0800fab8  000101d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800fab8  0800fab8  000101d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fab8  0800fab8  000101d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fab8  0800fab8  0000fab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fabc  0800fabc  0000fabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  200000c0  0800fac0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002354  200001d0  0800fbd0  000101d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002524  0800fbd0  00012524  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000101d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169f9  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354b  00000000  00000000  00026bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0002a140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  0002b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000042ae  00000000  00000000  0002c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014050  00000000  00000000  0003033e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb75  00000000  00000000  0004438e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0f03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c3c  00000000  00000000  000e0f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080090c0 <__do_global_dtors_aux>:
 80090c0:	b510      	push	{r4, lr}
 80090c2:	4c06      	ldr	r4, [pc, #24]	; (80090dc <__do_global_dtors_aux+0x1c>)
 80090c4:	7823      	ldrb	r3, [r4, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d107      	bne.n	80090da <__do_global_dtors_aux+0x1a>
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <__do_global_dtors_aux+0x20>)
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <__do_global_dtors_aux+0x16>
 80090d0:	4804      	ldr	r0, [pc, #16]	; (80090e4 <__do_global_dtors_aux+0x24>)
 80090d2:	e000      	b.n	80090d6 <__do_global_dtors_aux+0x16>
 80090d4:	bf00      	nop
 80090d6:	2301      	movs	r3, #1
 80090d8:	7023      	strb	r3, [r4, #0]
 80090da:	bd10      	pop	{r4, pc}
 80090dc:	200001d0 	.word	0x200001d0
 80090e0:	00000000 	.word	0x00000000
 80090e4:	0800f608 	.word	0x0800f608

080090e8 <frame_dummy>:
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <frame_dummy+0x14>)
 80090ea:	b510      	push	{r4, lr}
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <frame_dummy+0x10>
 80090f0:	4903      	ldr	r1, [pc, #12]	; (8009100 <frame_dummy+0x18>)
 80090f2:	4804      	ldr	r0, [pc, #16]	; (8009104 <frame_dummy+0x1c>)
 80090f4:	e000      	b.n	80090f8 <frame_dummy+0x10>
 80090f6:	bf00      	nop
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	00000000 	.word	0x00000000
 8009100:	200001d4 	.word	0x200001d4
 8009104:	0800f608 	.word	0x0800f608

08009108 <strlen>:
 8009108:	2300      	movs	r3, #0
 800910a:	5cc2      	ldrb	r2, [r0, r3]
 800910c:	3301      	adds	r3, #1
 800910e:	2a00      	cmp	r2, #0
 8009110:	d1fb      	bne.n	800910a <strlen+0x2>
 8009112:	1e58      	subs	r0, r3, #1
 8009114:	4770      	bx	lr
	...

08009118 <__gnu_thumb1_case_shi>:
 8009118:	b403      	push	{r0, r1}
 800911a:	4671      	mov	r1, lr
 800911c:	0849      	lsrs	r1, r1, #1
 800911e:	0040      	lsls	r0, r0, #1
 8009120:	0049      	lsls	r1, r1, #1
 8009122:	5e09      	ldrsh	r1, [r1, r0]
 8009124:	0049      	lsls	r1, r1, #1
 8009126:	448e      	add	lr, r1
 8009128:	bc03      	pop	{r0, r1}
 800912a:	4770      	bx	lr

0800912c <__udivsi3>:
 800912c:	2200      	movs	r2, #0
 800912e:	0843      	lsrs	r3, r0, #1
 8009130:	428b      	cmp	r3, r1
 8009132:	d374      	bcc.n	800921e <__udivsi3+0xf2>
 8009134:	0903      	lsrs	r3, r0, #4
 8009136:	428b      	cmp	r3, r1
 8009138:	d35f      	bcc.n	80091fa <__udivsi3+0xce>
 800913a:	0a03      	lsrs	r3, r0, #8
 800913c:	428b      	cmp	r3, r1
 800913e:	d344      	bcc.n	80091ca <__udivsi3+0x9e>
 8009140:	0b03      	lsrs	r3, r0, #12
 8009142:	428b      	cmp	r3, r1
 8009144:	d328      	bcc.n	8009198 <__udivsi3+0x6c>
 8009146:	0c03      	lsrs	r3, r0, #16
 8009148:	428b      	cmp	r3, r1
 800914a:	d30d      	bcc.n	8009168 <__udivsi3+0x3c>
 800914c:	22ff      	movs	r2, #255	; 0xff
 800914e:	0209      	lsls	r1, r1, #8
 8009150:	ba12      	rev	r2, r2
 8009152:	0c03      	lsrs	r3, r0, #16
 8009154:	428b      	cmp	r3, r1
 8009156:	d302      	bcc.n	800915e <__udivsi3+0x32>
 8009158:	1212      	asrs	r2, r2, #8
 800915a:	0209      	lsls	r1, r1, #8
 800915c:	d065      	beq.n	800922a <__udivsi3+0xfe>
 800915e:	0b03      	lsrs	r3, r0, #12
 8009160:	428b      	cmp	r3, r1
 8009162:	d319      	bcc.n	8009198 <__udivsi3+0x6c>
 8009164:	e000      	b.n	8009168 <__udivsi3+0x3c>
 8009166:	0a09      	lsrs	r1, r1, #8
 8009168:	0bc3      	lsrs	r3, r0, #15
 800916a:	428b      	cmp	r3, r1
 800916c:	d301      	bcc.n	8009172 <__udivsi3+0x46>
 800916e:	03cb      	lsls	r3, r1, #15
 8009170:	1ac0      	subs	r0, r0, r3
 8009172:	4152      	adcs	r2, r2
 8009174:	0b83      	lsrs	r3, r0, #14
 8009176:	428b      	cmp	r3, r1
 8009178:	d301      	bcc.n	800917e <__udivsi3+0x52>
 800917a:	038b      	lsls	r3, r1, #14
 800917c:	1ac0      	subs	r0, r0, r3
 800917e:	4152      	adcs	r2, r2
 8009180:	0b43      	lsrs	r3, r0, #13
 8009182:	428b      	cmp	r3, r1
 8009184:	d301      	bcc.n	800918a <__udivsi3+0x5e>
 8009186:	034b      	lsls	r3, r1, #13
 8009188:	1ac0      	subs	r0, r0, r3
 800918a:	4152      	adcs	r2, r2
 800918c:	0b03      	lsrs	r3, r0, #12
 800918e:	428b      	cmp	r3, r1
 8009190:	d301      	bcc.n	8009196 <__udivsi3+0x6a>
 8009192:	030b      	lsls	r3, r1, #12
 8009194:	1ac0      	subs	r0, r0, r3
 8009196:	4152      	adcs	r2, r2
 8009198:	0ac3      	lsrs	r3, r0, #11
 800919a:	428b      	cmp	r3, r1
 800919c:	d301      	bcc.n	80091a2 <__udivsi3+0x76>
 800919e:	02cb      	lsls	r3, r1, #11
 80091a0:	1ac0      	subs	r0, r0, r3
 80091a2:	4152      	adcs	r2, r2
 80091a4:	0a83      	lsrs	r3, r0, #10
 80091a6:	428b      	cmp	r3, r1
 80091a8:	d301      	bcc.n	80091ae <__udivsi3+0x82>
 80091aa:	028b      	lsls	r3, r1, #10
 80091ac:	1ac0      	subs	r0, r0, r3
 80091ae:	4152      	adcs	r2, r2
 80091b0:	0a43      	lsrs	r3, r0, #9
 80091b2:	428b      	cmp	r3, r1
 80091b4:	d301      	bcc.n	80091ba <__udivsi3+0x8e>
 80091b6:	024b      	lsls	r3, r1, #9
 80091b8:	1ac0      	subs	r0, r0, r3
 80091ba:	4152      	adcs	r2, r2
 80091bc:	0a03      	lsrs	r3, r0, #8
 80091be:	428b      	cmp	r3, r1
 80091c0:	d301      	bcc.n	80091c6 <__udivsi3+0x9a>
 80091c2:	020b      	lsls	r3, r1, #8
 80091c4:	1ac0      	subs	r0, r0, r3
 80091c6:	4152      	adcs	r2, r2
 80091c8:	d2cd      	bcs.n	8009166 <__udivsi3+0x3a>
 80091ca:	09c3      	lsrs	r3, r0, #7
 80091cc:	428b      	cmp	r3, r1
 80091ce:	d301      	bcc.n	80091d4 <__udivsi3+0xa8>
 80091d0:	01cb      	lsls	r3, r1, #7
 80091d2:	1ac0      	subs	r0, r0, r3
 80091d4:	4152      	adcs	r2, r2
 80091d6:	0983      	lsrs	r3, r0, #6
 80091d8:	428b      	cmp	r3, r1
 80091da:	d301      	bcc.n	80091e0 <__udivsi3+0xb4>
 80091dc:	018b      	lsls	r3, r1, #6
 80091de:	1ac0      	subs	r0, r0, r3
 80091e0:	4152      	adcs	r2, r2
 80091e2:	0943      	lsrs	r3, r0, #5
 80091e4:	428b      	cmp	r3, r1
 80091e6:	d301      	bcc.n	80091ec <__udivsi3+0xc0>
 80091e8:	014b      	lsls	r3, r1, #5
 80091ea:	1ac0      	subs	r0, r0, r3
 80091ec:	4152      	adcs	r2, r2
 80091ee:	0903      	lsrs	r3, r0, #4
 80091f0:	428b      	cmp	r3, r1
 80091f2:	d301      	bcc.n	80091f8 <__udivsi3+0xcc>
 80091f4:	010b      	lsls	r3, r1, #4
 80091f6:	1ac0      	subs	r0, r0, r3
 80091f8:	4152      	adcs	r2, r2
 80091fa:	08c3      	lsrs	r3, r0, #3
 80091fc:	428b      	cmp	r3, r1
 80091fe:	d301      	bcc.n	8009204 <__udivsi3+0xd8>
 8009200:	00cb      	lsls	r3, r1, #3
 8009202:	1ac0      	subs	r0, r0, r3
 8009204:	4152      	adcs	r2, r2
 8009206:	0883      	lsrs	r3, r0, #2
 8009208:	428b      	cmp	r3, r1
 800920a:	d301      	bcc.n	8009210 <__udivsi3+0xe4>
 800920c:	008b      	lsls	r3, r1, #2
 800920e:	1ac0      	subs	r0, r0, r3
 8009210:	4152      	adcs	r2, r2
 8009212:	0843      	lsrs	r3, r0, #1
 8009214:	428b      	cmp	r3, r1
 8009216:	d301      	bcc.n	800921c <__udivsi3+0xf0>
 8009218:	004b      	lsls	r3, r1, #1
 800921a:	1ac0      	subs	r0, r0, r3
 800921c:	4152      	adcs	r2, r2
 800921e:	1a41      	subs	r1, r0, r1
 8009220:	d200      	bcs.n	8009224 <__udivsi3+0xf8>
 8009222:	4601      	mov	r1, r0
 8009224:	4152      	adcs	r2, r2
 8009226:	4610      	mov	r0, r2
 8009228:	4770      	bx	lr
 800922a:	e7ff      	b.n	800922c <__udivsi3+0x100>
 800922c:	b501      	push	{r0, lr}
 800922e:	2000      	movs	r0, #0
 8009230:	f000 f806 	bl	8009240 <__aeabi_idiv0>
 8009234:	bd02      	pop	{r1, pc}
 8009236:	46c0      	nop			; (mov r8, r8)

08009238 <__aeabi_uidivmod>:
 8009238:	2900      	cmp	r1, #0
 800923a:	d0f7      	beq.n	800922c <__udivsi3+0x100>
 800923c:	e776      	b.n	800912c <__udivsi3>
 800923e:	4770      	bx	lr

08009240 <__aeabi_idiv0>:
 8009240:	4770      	bx	lr
 8009242:	46c0      	nop			; (mov r8, r8)

08009244 <GSM_Send_Bin>:
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 50);
	gsmTimeout = 0;
	gsmSend = 1;
}

void GSM_Send_Bin(char* data, int size){
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
	//int size;
	int timeout = 5;
 800924e:	2305      	movs	r3, #5
 8009250:	60fb      	str	r3, [r7, #12]
	//size = strlen(data);
	//HAL_UART_Transmit(&huart2, (uint8_t*)data, size, timeout);

	HAL_UART_Transmit_IT(&huart2, data, size);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	b29a      	uxth	r2, r3
 8009256:	6879      	ldr	r1, [r7, #4]
 8009258:	4b09      	ldr	r3, [pc, #36]	; (8009280 <GSM_Send_Bin+0x3c>)
 800925a:	0018      	movs	r0, r3
 800925c:	f003 f9da 	bl	800c614 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 50);
 8009260:	4908      	ldr	r1, [pc, #32]	; (8009284 <GSM_Send_Bin+0x40>)
 8009262:	4b07      	ldr	r3, [pc, #28]	; (8009280 <GSM_Send_Bin+0x3c>)
 8009264:	2232      	movs	r2, #50	; 0x32
 8009266:	0018      	movs	r0, r3
 8009268:	f003 fa54 	bl	800c714 <HAL_UART_Receive_IT>
	gsmTimeout = 0;
 800926c:	4b06      	ldr	r3, [pc, #24]	; (8009288 <GSM_Send_Bin+0x44>)
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
	gsmSend = 1;
 8009272:	4b06      	ldr	r3, [pc, #24]	; (800928c <GSM_Send_Bin+0x48>)
 8009274:	2201      	movs	r2, #1
 8009276:	601a      	str	r2, [r3, #0]
}
 8009278:	46c0      	nop			; (mov r8, r8)
 800927a:	46bd      	mov	sp, r7
 800927c:	b004      	add	sp, #16
 800927e:	bd80      	pop	{r7, pc}
 8009280:	2000248c 	.word	0x2000248c
 8009284:	200018b0 	.word	0x200018b0
 8009288:	200001f0 	.word	0x200001f0
 800928c:	200001f4 	.word	0x200001f4

08009290 <Debug_Send>:

void Debug_Send(char* data){
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
	int size;
	int timeout = 25;
 8009298:	2319      	movs	r3, #25
 800929a:	60fb      	str	r3, [r7, #12]
	size = strlen(data);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	0018      	movs	r0, r3
 80092a0:	f7ff ff32 	bl	8009108 <strlen>
 80092a4:	0003      	movs	r3, r0
 80092a6:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (uint8_t*)data, size, timeout);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6879      	ldr	r1, [r7, #4]
 80092b0:	4803      	ldr	r0, [pc, #12]	; (80092c0 <Debug_Send+0x30>)
 80092b2:	f003 f905 	bl	800c4c0 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, data, size);
}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	46bd      	mov	sp, r7
 80092ba:	b004      	add	sp, #16
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	20002404 	.word	0x20002404

080092c4 <GSM_Receive>:
	 //sendData(testS,UART0);
	return count;
}


void GSM_Receive(char in){
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	0002      	movs	r2, r0
 80092cc:	1dfb      	adds	r3, r7, #7
 80092ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80092d0:	2380      	movs	r3, #128	; 0x80
 80092d2:	01db      	lsls	r3, r3, #7
 80092d4:	4a20      	ldr	r2, [pc, #128]	; (8009358 <GSM_Receive+0x94>)
 80092d6:	0019      	movs	r1, r3
 80092d8:	0010      	movs	r0, r2
 80092da:	f002 f9cc 	bl	800b676 <HAL_GPIO_TogglePin>
	gsmInfo.Timeout = 0;
 80092de:	4a1f      	ldr	r2, [pc, #124]	; (800935c <GSM_Receive+0x98>)
 80092e0:	23b0      	movs	r3, #176	; 0xb0
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	2100      	movs	r1, #0
 80092e6:	50d1      	str	r1, [r2, r3]
	//HAL_UART_Receive_IT(&huart2, temp, 50);

	if (ftpinc < 60){
 80092e8:	4b1d      	ldr	r3, [pc, #116]	; (8009360 <GSM_Receive+0x9c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b3b      	cmp	r3, #59	; 0x3b
 80092ee:	dc11      	bgt.n	8009314 <GSM_Receive+0x50>
	//if (gsmInfo.FTP_Data > 0){
		ftpReceived[ftpinc] = in;
 80092f0:	4b1b      	ldr	r3, [pc, #108]	; (8009360 <GSM_Receive+0x9c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a1b      	ldr	r2, [pc, #108]	; (8009364 <GSM_Receive+0xa0>)
 80092f6:	1df9      	adds	r1, r7, #7
 80092f8:	7809      	ldrb	r1, [r1, #0]
 80092fa:	54d1      	strb	r1, [r2, r3]
		//HAL_UART_Transmit(&huart1, ftpReceived[ftpinc], 1, 10);
		ftpinc++;
 80092fc:	4b18      	ldr	r3, [pc, #96]	; (8009360 <GSM_Receive+0x9c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	4b17      	ldr	r3, [pc, #92]	; (8009360 <GSM_Receive+0x9c>)
 8009304:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8009306:	2380      	movs	r3, #128	; 0x80
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	4a17      	ldr	r2, [pc, #92]	; (8009368 <GSM_Receive+0xa4>)
 800930c:	0019      	movs	r1, r3
 800930e:	0010      	movs	r0, r2
 8009310:	f002 f9b1 	bl	800b676 <HAL_GPIO_TogglePin>
	}
	//else{
		if (in == '>') gsmInfo.Prompt = 1;
 8009314:	1dfb      	adds	r3, r7, #7
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	2b3e      	cmp	r3, #62	; 0x3e
 800931a:	d104      	bne.n	8009326 <GSM_Receive+0x62>
 800931c:	4a0f      	ldr	r2, [pc, #60]	; (800935c <GSM_Receive+0x98>)
 800931e:	23ae      	movs	r3, #174	; 0xae
 8009320:	005b      	lsls	r3, r3, #1
 8009322:	2101      	movs	r1, #1
 8009324:	50d1      	str	r1, [r2, r3]
		//if (in != 0x0A){
			recBuffDebug[recBuffPointerWrite] = in;
 8009326:	4b11      	ldr	r3, [pc, #68]	; (800936c <GSM_Receive+0xa8>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a11      	ldr	r2, [pc, #68]	; (8009370 <GSM_Receive+0xac>)
 800932c:	1df9      	adds	r1, r7, #7
 800932e:	7809      	ldrb	r1, [r1, #0]
 8009330:	54d1      	strb	r1, [r2, r3]
			//HAL_UART_Transmit(&huart1, recBuff[recBuffPointerWrite], 2, 10);
			//huart1.Instance->TDR = in;
			recBuffPointerWrite++;
 8009332:	4b0e      	ldr	r3, [pc, #56]	; (800936c <GSM_Receive+0xa8>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	4b0c      	ldr	r3, [pc, #48]	; (800936c <GSM_Receive+0xa8>)
 800933a:	601a      	str	r2, [r3, #0]
			if (recBuffPointerWrite > recBuffSize) recBuffPointerWrite = 0;
 800933c:	4b0b      	ldr	r3, [pc, #44]	; (800936c <GSM_Receive+0xa8>)
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	2396      	movs	r3, #150	; 0x96
 8009342:	005b      	lsls	r3, r3, #1
 8009344:	429a      	cmp	r2, r3
 8009346:	dd02      	ble.n	800934e <GSM_Receive+0x8a>
 8009348:	4b08      	ldr	r3, [pc, #32]	; (800936c <GSM_Receive+0xa8>)
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
		//}
	//}

}
 800934e:	46c0      	nop			; (mov r8, r8)
 8009350:	46bd      	mov	sp, r7
 8009352:	b002      	add	sp, #8
 8009354:	bd80      	pop	{r7, pc}
 8009356:	46c0      	nop			; (mov r8, r8)
 8009358:	48000800 	.word	0x48000800
 800935c:	20001724 	.word	0x20001724
 8009360:	200000c0 	.word	0x200000c0
 8009364:	200018e4 	.word	0x200018e4
 8009368:	48000400 	.word	0x48000400
 800936c:	200001ec 	.word	0x200001ec
 8009370:	200011d8 	.word	0x200011d8

08009374 <Wifi_Init>:
uint8_t temp1[500];
uint8_t ConnID[4];
uint8_t mqttReceived[30];


void Wifi_Init(){
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_RESET);
 8009378:	2380      	movs	r3, #128	; 0x80
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	481e      	ldr	r0, [pc, #120]	; (80093f8 <Wifi_Init+0x84>)
 800937e:	2200      	movs	r2, #0
 8009380:	0019      	movs	r1, r3
 8009382:	f002 f95b 	bl	800b63c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8009386:	4b1c      	ldr	r3, [pc, #112]	; (80093f8 <Wifi_Init+0x84>)
 8009388:	2201      	movs	r2, #1
 800938a:	2108      	movs	r1, #8
 800938c:	0018      	movs	r0, r3
 800938e:	f002 f955 	bl	800b63c <HAL_GPIO_WritePin>
	Debug_Send("Wifi init\r\n");
 8009392:	4b1a      	ldr	r3, [pc, #104]	; (80093fc <Wifi_Init+0x88>)
 8009394:	0018      	movs	r0, r3
 8009396:	f7ff ff7b 	bl	8009290 <Debug_Send>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 40);
 800939a:	4919      	ldr	r1, [pc, #100]	; (8009400 <Wifi_Init+0x8c>)
 800939c:	4b19      	ldr	r3, [pc, #100]	; (8009404 <Wifi_Init+0x90>)
 800939e:	2228      	movs	r2, #40	; 0x28
 80093a0:	0018      	movs	r0, r3
 80093a2:	f003 f9b7 	bl	800c714 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart1, (uint8_t *) dummy, 40);
	//__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);

	//HAL_UART_Receive(&huart3, dummy, 50, 5);
	//strcpy(quality,"N/A");
	HAL_Delay(1000);
 80093a6:	23fa      	movs	r3, #250	; 0xfa
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	0018      	movs	r0, r3
 80093ac:	f001 fe4e 	bl	800b04c <HAL_Delay>
	wifiFlag.connect = 0;
 80093b0:	4b15      	ldr	r3, [pc, #84]	; (8009408 <Wifi_Init+0x94>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]
	wifiFlag.list = 0;
 80093b6:	4b14      	ldr	r3, [pc, #80]	; (8009408 <Wifi_Init+0x94>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	705a      	strb	r2, [r3, #1]
	wifiFlag.ip = 0;
 80093bc:	4b12      	ldr	r3, [pc, #72]	; (8009408 <Wifi_Init+0x94>)
 80093be:	2200      	movs	r2, #0
 80093c0:	709a      	strb	r2, [r3, #2]
	wifiFlag.print = 1;
 80093c2:	4b11      	ldr	r3, [pc, #68]	; (8009408 <Wifi_Init+0x94>)
 80093c4:	2201      	movs	r2, #1
 80093c6:	70da      	strb	r2, [r3, #3]
	wifiFlag.server = 0;
 80093c8:	4b0f      	ldr	r3, [pc, #60]	; (8009408 <Wifi_Init+0x94>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	711a      	strb	r2, [r3, #4]
	//WifiState = GetIP;
	Debug_Send("Done\r\n");
 80093ce:	4b0f      	ldr	r3, [pc, #60]	; (800940c <Wifi_Init+0x98>)
 80093d0:	0018      	movs	r0, r3
 80093d2:	f7ff ff5d 	bl	8009290 <Debug_Send>
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 80093d6:	2380      	movs	r3, #128	; 0x80
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4807      	ldr	r0, [pc, #28]	; (80093f8 <Wifi_Init+0x84>)
 80093dc:	2201      	movs	r2, #1
 80093de:	0019      	movs	r1, r3
 80093e0:	f002 f92c 	bl	800b63c <HAL_GPIO_WritePin>
	//HAL_Delay(4000);
	//WifiState = CPMUX;
	mqttFlag.active = 1;
 80093e4:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <Wifi_Init+0x9c>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	709a      	strb	r2, [r3, #2]
	mqttInfo.timer = 0;
 80093ea:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <Wifi_Init+0xa0>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80093f0:	46c0      	nop			; (mov r8, r8)
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	48000400 	.word	0x48000400
 80093fc:	0800f620 	.word	0x0800f620
 8009400:	200018b0 	.word	0x200018b0
 8009404:	2000248c 	.word	0x2000248c
 8009408:	20002390 	.word	0x20002390
 800940c:	0800f62c 	.word	0x0800f62c
 8009410:	200022c0 	.word	0x200022c0
 8009414:	20001a08 	.word	0x20001a08

08009418 <Wifi_Service>:

void Wifi_Service(){
 8009418:	b580      	push	{r7, lr}
 800941a:	af00      	add	r7, sp, #0
	//Wifi_Send("AT\r\n");
	//sprintf(temp, "Wifi service state-%i\r\n", WifiState);
	//GSM_Send(temp);
	//GSM_Send("Wifi service\r\n");
	switch(WifiState){
 800941c:	4bdc      	ldr	r3, [pc, #880]	; (8009790 <Wifi_Service+0x378>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	2b11      	cmp	r3, #17
 8009422:	d900      	bls.n	8009426 <Wifi_Service+0xe>
 8009424:	e21f      	b.n	8009866 <Wifi_Service+0x44e>
 8009426:	009a      	lsls	r2, r3, #2
 8009428:	4bda      	ldr	r3, [pc, #872]	; (8009794 <Wifi_Service+0x37c>)
 800942a:	18d3      	adds	r3, r2, r3
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	469f      	mov	pc, r3
	case Wifi_ver:
		Wifi_Send("AT+GMR\r\n");
 8009430:	4bd9      	ldr	r3, [pc, #868]	; (8009798 <Wifi_Service+0x380>)
 8009432:	0018      	movs	r0, r3
 8009434:	f000 fa3a 	bl	80098ac <Wifi_Send>
		WifiState = Wifi_AT;
 8009438:	4bd5      	ldr	r3, [pc, #852]	; (8009790 <Wifi_Service+0x378>)
 800943a:	2202      	movs	r2, #2
 800943c:	701a      	strb	r2, [r3, #0]
		WifiState = 0;
 800943e:	4bd4      	ldr	r3, [pc, #848]	; (8009790 <Wifi_Service+0x378>)
 8009440:	2200      	movs	r2, #0
 8009442:	701a      	strb	r2, [r3, #0]
		break;
 8009444:	e20f      	b.n	8009866 <Wifi_Service+0x44e>
	case Wifi_AT:
		Wifi_Send("AT\r\n");
 8009446:	4bd5      	ldr	r3, [pc, #852]	; (800979c <Wifi_Service+0x384>)
 8009448:	0018      	movs	r0, r3
 800944a:	f000 fa2f 	bl	80098ac <Wifi_Send>
		WifiState = ListAP;
 800944e:	4bd0      	ldr	r3, [pc, #832]	; (8009790 <Wifi_Service+0x378>)
 8009450:	2203      	movs	r2, #3
 8009452:	701a      	strb	r2, [r3, #0]
		WifiState = CheckConnect;
 8009454:	4bce      	ldr	r3, [pc, #824]	; (8009790 <Wifi_Service+0x378>)
 8009456:	2205      	movs	r2, #5
 8009458:	701a      	strb	r2, [r3, #0]
		WifiState = Mode;
 800945a:	4bcd      	ldr	r3, [pc, #820]	; (8009790 <Wifi_Service+0x378>)
 800945c:	220a      	movs	r2, #10
 800945e:	701a      	strb	r2, [r3, #0]
		WifiState = 0;
 8009460:	4bcb      	ldr	r3, [pc, #812]	; (8009790 <Wifi_Service+0x378>)
 8009462:	2200      	movs	r2, #0
 8009464:	701a      	strb	r2, [r3, #0]
		break;
 8009466:	e1fe      	b.n	8009866 <Wifi_Service+0x44e>
	case Mode:
		Wifi_Send("AT+CWMODE=1\r\n");
 8009468:	4bcd      	ldr	r3, [pc, #820]	; (80097a0 <Wifi_Service+0x388>)
 800946a:	0018      	movs	r0, r3
 800946c:	f000 fa1e 	bl	80098ac <Wifi_Send>
		WifiState = CheckConnect;
 8009470:	4bc7      	ldr	r3, [pc, #796]	; (8009790 <Wifi_Service+0x378>)
 8009472:	2205      	movs	r2, #5
 8009474:	701a      	strb	r2, [r3, #0]
		break;
 8009476:	e1f6      	b.n	8009866 <Wifi_Service+0x44e>
	case ListAP:
		Wifi_Send("AT+CWLAP\r\n");
 8009478:	4bca      	ldr	r3, [pc, #808]	; (80097a4 <Wifi_Service+0x38c>)
 800947a:	0018      	movs	r0, r3
 800947c:	f000 fa16 	bl	80098ac <Wifi_Send>
		//WifiState = GetIP;
		wifiFlag.list = 1;
 8009480:	4bc9      	ldr	r3, [pc, #804]	; (80097a8 <Wifi_Service+0x390>)
 8009482:	2201      	movs	r2, #1
 8009484:	705a      	strb	r2, [r3, #1]

		break;
 8009486:	e1ee      	b.n	8009866 <Wifi_Service+0x44e>
	case GetIP:
		Wifi_Send("AT+CIFSR\r\n");
 8009488:	4bc8      	ldr	r3, [pc, #800]	; (80097ac <Wifi_Service+0x394>)
 800948a:	0018      	movs	r0, r3
 800948c:	f000 fa0e 	bl	80098ac <Wifi_Send>
		//WifiState = AT;
		//WifiState = ListAP;
		wifiFlag.print = 0;
 8009490:	4bc5      	ldr	r3, [pc, #788]	; (80097a8 <Wifi_Service+0x390>)
 8009492:	2200      	movs	r2, #0
 8009494:	70da      	strb	r2, [r3, #3]
		WifiState = CPMUX;
 8009496:	4bbe      	ldr	r3, [pc, #760]	; (8009790 <Wifi_Service+0x378>)
 8009498:	2209      	movs	r2, #9
 800949a:	701a      	strb	r2, [r3, #0]
		break;
 800949c:	e1e3      	b.n	8009866 <Wifi_Service+0x44e>
	case CheckConnect:
		Wifi_Send("AT+CWJAP?\r\n");
 800949e:	4bc4      	ldr	r3, [pc, #784]	; (80097b0 <Wifi_Service+0x398>)
 80094a0:	0018      	movs	r0, r3
 80094a2:	f000 fa03 	bl	80098ac <Wifi_Send>
		WifiState = 0;
 80094a6:	4bba      	ldr	r3, [pc, #744]	; (8009790 <Wifi_Service+0x378>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	701a      	strb	r2, [r3, #0]
		//WifiState = ListAP;
		break;
 80094ac:	e1db      	b.n	8009866 <Wifi_Service+0x44e>

	case WifiConnect:
		strcpy(temp,"AT+CWJAP=");
 80094ae:	4ac1      	ldr	r2, [pc, #772]	; (80097b4 <Wifi_Service+0x39c>)
 80094b0:	4bc1      	ldr	r3, [pc, #772]	; (80097b8 <Wifi_Service+0x3a0>)
 80094b2:	0010      	movs	r0, r2
 80094b4:	0019      	movs	r1, r3
 80094b6:	230a      	movs	r3, #10
 80094b8:	001a      	movs	r2, r3
 80094ba:	f005 fc51 	bl	800ed60 <memcpy>
		strcat(temp,"\"");
 80094be:	4bbd      	ldr	r3, [pc, #756]	; (80097b4 <Wifi_Service+0x39c>)
 80094c0:	0018      	movs	r0, r3
 80094c2:	f7ff fe21 	bl	8009108 <strlen>
 80094c6:	0003      	movs	r3, r0
 80094c8:	001a      	movs	r2, r3
 80094ca:	4bba      	ldr	r3, [pc, #744]	; (80097b4 <Wifi_Service+0x39c>)
 80094cc:	18d2      	adds	r2, r2, r3
 80094ce:	4bbb      	ldr	r3, [pc, #748]	; (80097bc <Wifi_Service+0x3a4>)
 80094d0:	0010      	movs	r0, r2
 80094d2:	0019      	movs	r1, r3
 80094d4:	2302      	movs	r3, #2
 80094d6:	001a      	movs	r2, r3
 80094d8:	f005 fc42 	bl	800ed60 <memcpy>
		strcat(temp,ssid);
 80094dc:	4ab8      	ldr	r2, [pc, #736]	; (80097c0 <Wifi_Service+0x3a8>)
 80094de:	4bb5      	ldr	r3, [pc, #724]	; (80097b4 <Wifi_Service+0x39c>)
 80094e0:	0011      	movs	r1, r2
 80094e2:	0018      	movs	r0, r3
 80094e4:	f005 fc6e 	bl	800edc4 <strcat>
		strcat(temp,"\",\"");
 80094e8:	4bb2      	ldr	r3, [pc, #712]	; (80097b4 <Wifi_Service+0x39c>)
 80094ea:	0018      	movs	r0, r3
 80094ec:	f7ff fe0c 	bl	8009108 <strlen>
 80094f0:	0003      	movs	r3, r0
 80094f2:	001a      	movs	r2, r3
 80094f4:	4baf      	ldr	r3, [pc, #700]	; (80097b4 <Wifi_Service+0x39c>)
 80094f6:	18d2      	adds	r2, r2, r3
 80094f8:	4bb2      	ldr	r3, [pc, #712]	; (80097c4 <Wifi_Service+0x3ac>)
 80094fa:	0010      	movs	r0, r2
 80094fc:	0019      	movs	r1, r3
 80094fe:	2304      	movs	r3, #4
 8009500:	001a      	movs	r2, r3
 8009502:	f005 fc2d 	bl	800ed60 <memcpy>
		strcat(temp,passwrd);
 8009506:	4ab0      	ldr	r2, [pc, #704]	; (80097c8 <Wifi_Service+0x3b0>)
 8009508:	4baa      	ldr	r3, [pc, #680]	; (80097b4 <Wifi_Service+0x39c>)
 800950a:	0011      	movs	r1, r2
 800950c:	0018      	movs	r0, r3
 800950e:	f005 fc59 	bl	800edc4 <strcat>
		strcat(temp,"\"");
 8009512:	4ba8      	ldr	r3, [pc, #672]	; (80097b4 <Wifi_Service+0x39c>)
 8009514:	0018      	movs	r0, r3
 8009516:	f7ff fdf7 	bl	8009108 <strlen>
 800951a:	0003      	movs	r3, r0
 800951c:	001a      	movs	r2, r3
 800951e:	4ba5      	ldr	r3, [pc, #660]	; (80097b4 <Wifi_Service+0x39c>)
 8009520:	18d2      	adds	r2, r2, r3
 8009522:	4ba6      	ldr	r3, [pc, #664]	; (80097bc <Wifi_Service+0x3a4>)
 8009524:	0010      	movs	r0, r2
 8009526:	0019      	movs	r1, r3
 8009528:	2302      	movs	r3, #2
 800952a:	001a      	movs	r2, r3
 800952c:	f005 fc18 	bl	800ed60 <memcpy>
		strcat(temp,"\r\n");
 8009530:	4ba0      	ldr	r3, [pc, #640]	; (80097b4 <Wifi_Service+0x39c>)
 8009532:	0018      	movs	r0, r3
 8009534:	f7ff fde8 	bl	8009108 <strlen>
 8009538:	0003      	movs	r3, r0
 800953a:	001a      	movs	r2, r3
 800953c:	4b9d      	ldr	r3, [pc, #628]	; (80097b4 <Wifi_Service+0x39c>)
 800953e:	18d2      	adds	r2, r2, r3
 8009540:	4ba2      	ldr	r3, [pc, #648]	; (80097cc <Wifi_Service+0x3b4>)
 8009542:	0010      	movs	r0, r2
 8009544:	0019      	movs	r1, r3
 8009546:	2303      	movs	r3, #3
 8009548:	001a      	movs	r2, r3
 800954a:	f005 fc09 	bl	800ed60 <memcpy>
		Wifi_Send(temp);
 800954e:	4b99      	ldr	r3, [pc, #612]	; (80097b4 <Wifi_Service+0x39c>)
 8009550:	0018      	movs	r0, r3
 8009552:	f000 f9ab 	bl	80098ac <Wifi_Send>
		WifiState = 0;
 8009556:	4b8e      	ldr	r3, [pc, #568]	; (8009790 <Wifi_Service+0x378>)
 8009558:	2200      	movs	r2, #0
 800955a:	701a      	strb	r2, [r3, #0]

		break;
 800955c:	e183      	b.n	8009866 <Wifi_Service+0x44e>
	case WifiAT:
		Wifi_Send("AT\r\n");
 800955e:	4b8f      	ldr	r3, [pc, #572]	; (800979c <Wifi_Service+0x384>)
 8009560:	0018      	movs	r0, r3
 8009562:	f000 f9a3 	bl	80098ac <Wifi_Send>
		WifiState = 0;
 8009566:	4b8a      	ldr	r3, [pc, #552]	; (8009790 <Wifi_Service+0x378>)
 8009568:	2200      	movs	r2, #0
 800956a:	701a      	strb	r2, [r3, #0]
		break;
 800956c:	e17b      	b.n	8009866 <Wifi_Service+0x44e>
	case IP_Stat:
		Wifi_Send("AT+CIPSTATUS\r\n");
 800956e:	4b98      	ldr	r3, [pc, #608]	; (80097d0 <Wifi_Service+0x3b8>)
 8009570:	0018      	movs	r0, r3
 8009572:	f000 f99b 	bl	80098ac <Wifi_Send>

		break;
 8009576:	e176      	b.n	8009866 <Wifi_Service+0x44e>
	case CPMUX:
		Wifi_Send("AT+CIPMUX=1\r\n");
 8009578:	4b96      	ldr	r3, [pc, #600]	; (80097d4 <Wifi_Service+0x3bc>)
 800957a:	0018      	movs	r0, r3
 800957c:	f000 f996 	bl	80098ac <Wifi_Send>
		WifiState = ServerOn;
 8009580:	4b83      	ldr	r3, [pc, #524]	; (8009790 <Wifi_Service+0x378>)
 8009582:	220b      	movs	r2, #11
 8009584:	701a      	strb	r2, [r3, #0]
		WifiState = Dial;
 8009586:	4b82      	ldr	r3, [pc, #520]	; (8009790 <Wifi_Service+0x378>)
 8009588:	220d      	movs	r2, #13
 800958a:	701a      	strb	r2, [r3, #0]
		if (wifiFlag.server == 0) WifiState = Dial;
 800958c:	4b86      	ldr	r3, [pc, #536]	; (80097a8 <Wifi_Service+0x390>)
 800958e:	791b      	ldrb	r3, [r3, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d103      	bne.n	800959c <Wifi_Service+0x184>
 8009594:	4b7e      	ldr	r3, [pc, #504]	; (8009790 <Wifi_Service+0x378>)
 8009596:	220d      	movs	r2, #13
 8009598:	701a      	strb	r2, [r3, #0]
		else WifiState = ServerOn;
		break;
 800959a:	e164      	b.n	8009866 <Wifi_Service+0x44e>
		else WifiState = ServerOn;
 800959c:	4b7c      	ldr	r3, [pc, #496]	; (8009790 <Wifi_Service+0x378>)
 800959e:	220b      	movs	r2, #11
 80095a0:	701a      	strb	r2, [r3, #0]
		break;
 80095a2:	e160      	b.n	8009866 <Wifi_Service+0x44e>

	case ServerOn:
		Wifi_Send("AT+CIPSERVER=1,5008\r\n");
 80095a4:	4b8c      	ldr	r3, [pc, #560]	; (80097d8 <Wifi_Service+0x3c0>)
 80095a6:	0018      	movs	r0, r3
 80095a8:	f000 f980 	bl	80098ac <Wifi_Send>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80095ac:	4b8b      	ldr	r3, [pc, #556]	; (80097dc <Wifi_Service+0x3c4>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	2108      	movs	r1, #8
 80095b2:	0018      	movs	r0, r3
 80095b4:	f002 f842 	bl	800b63c <HAL_GPIO_WritePin>
		WifiState = 0;
 80095b8:	4b75      	ldr	r3, [pc, #468]	; (8009790 <Wifi_Service+0x378>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	701a      	strb	r2, [r3, #0]
		break;
 80095be:	e152      	b.n	8009866 <Wifi_Service+0x44e>
	case ServerOff:
		Wifi_Send("AT+CIPSERVER=0\r\n");
 80095c0:	4b87      	ldr	r3, [pc, #540]	; (80097e0 <Wifi_Service+0x3c8>)
 80095c2:	0018      	movs	r0, r3
 80095c4:	f000 f972 	bl	80098ac <Wifi_Send>
		WifiState = 0;
 80095c8:	4b71      	ldr	r3, [pc, #452]	; (8009790 <Wifi_Service+0x378>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	701a      	strb	r2, [r3, #0]
		break;
 80095ce:	e14a      	b.n	8009866 <Wifi_Service+0x44e>
	case Dial:
		//Wifi_Send("AT+CIPSTART=\"TCP\",\"iot.espressif.cn\",8000\r\n");
		Wifi_Send("AT+CIPSTART=0,\"TCP\",\"196.40.108.169\",1883\r\n");
 80095d0:	4b84      	ldr	r3, [pc, #528]	; (80097e4 <Wifi_Service+0x3cc>)
 80095d2:	0018      	movs	r0, r3
 80095d4:	f000 f96a 	bl	80098ac <Wifi_Send>
		//Wifi_Send("AT+CIPSTART=0,\"TCP\",\"192.168.1.35\",5010\r\n");
		WifiState = 0;
 80095d8:	4b6d      	ldr	r3, [pc, #436]	; (8009790 <Wifi_Service+0x378>)
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
		break;
 80095de:	e142      	b.n	8009866 <Wifi_Service+0x44e>
	case IP_Send:
		//strcpy(temp1,HTML2);
		len = strlen(HTML5);
 80095e0:	4b81      	ldr	r3, [pc, #516]	; (80097e8 <Wifi_Service+0x3d0>)
 80095e2:	0018      	movs	r0, r3
 80095e4:	f7ff fd90 	bl	8009108 <strlen>
 80095e8:	0003      	movs	r3, r0
 80095ea:	001a      	movs	r2, r3
 80095ec:	4b7f      	ldr	r3, [pc, #508]	; (80097ec <Wifi_Service+0x3d4>)
 80095ee:	601a      	str	r2, [r3, #0]
		if(mqttFlag.active == 1) len = mqttInfo.length;
 80095f0:	4b7f      	ldr	r3, [pc, #508]	; (80097f0 <Wifi_Service+0x3d8>)
 80095f2:	789b      	ldrb	r3, [r3, #2]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d103      	bne.n	8009600 <Wifi_Service+0x1e8>
 80095f8:	4b7e      	ldr	r3, [pc, #504]	; (80097f4 <Wifi_Service+0x3dc>)
 80095fa:	689a      	ldr	r2, [r3, #8]
 80095fc:	4b7b      	ldr	r3, [pc, #492]	; (80097ec <Wifi_Service+0x3d4>)
 80095fe:	601a      	str	r2, [r3, #0]
		myLongStr(len , temp,10, 10);
 8009600:	4b7a      	ldr	r3, [pc, #488]	; (80097ec <Wifi_Service+0x3d4>)
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	496b      	ldr	r1, [pc, #428]	; (80097b4 <Wifi_Service+0x39c>)
 8009606:	230a      	movs	r3, #10
 8009608:	220a      	movs	r2, #10
 800960a:	f001 f9ab 	bl	800a964 <myLongStr>
		//len = 70;
		Debug_Send("HTML length is to send ");
 800960e:	4b7a      	ldr	r3, [pc, #488]	; (80097f8 <Wifi_Service+0x3e0>)
 8009610:	0018      	movs	r0, r3
 8009612:	f7ff fe3d 	bl	8009290 <Debug_Send>
		Debug_Send(temp);
 8009616:	4b67      	ldr	r3, [pc, #412]	; (80097b4 <Wifi_Service+0x39c>)
 8009618:	0018      	movs	r0, r3
 800961a:	f7ff fe39 	bl	8009290 <Debug_Send>
		Debug_Send("\r\n");
 800961e:	4b6b      	ldr	r3, [pc, #428]	; (80097cc <Wifi_Service+0x3b4>)
 8009620:	0018      	movs	r0, r3
 8009622:	f7ff fe35 	bl	8009290 <Debug_Send>
		//Wifi_Send("AT+CIPSEND=<");
		strcpy((char*)temp,"AT+CIPSENDEX=");
 8009626:	4a63      	ldr	r2, [pc, #396]	; (80097b4 <Wifi_Service+0x39c>)
 8009628:	4b74      	ldr	r3, [pc, #464]	; (80097fc <Wifi_Service+0x3e4>)
 800962a:	0010      	movs	r0, r2
 800962c:	0019      	movs	r1, r3
 800962e:	230e      	movs	r3, #14
 8009630:	001a      	movs	r2, r3
 8009632:	f005 fb95 	bl	800ed60 <memcpy>
		strcat((char*)temp,ConnID);
 8009636:	4a72      	ldr	r2, [pc, #456]	; (8009800 <Wifi_Service+0x3e8>)
 8009638:	4b5e      	ldr	r3, [pc, #376]	; (80097b4 <Wifi_Service+0x39c>)
 800963a:	0011      	movs	r1, r2
 800963c:	0018      	movs	r0, r3
 800963e:	f005 fbc1 	bl	800edc4 <strcat>
		strcat((char*)temp,",");
 8009642:	4b5c      	ldr	r3, [pc, #368]	; (80097b4 <Wifi_Service+0x39c>)
 8009644:	0018      	movs	r0, r3
 8009646:	f7ff fd5f 	bl	8009108 <strlen>
 800964a:	0003      	movs	r3, r0
 800964c:	001a      	movs	r2, r3
 800964e:	4b59      	ldr	r3, [pc, #356]	; (80097b4 <Wifi_Service+0x39c>)
 8009650:	18d2      	adds	r2, r2, r3
 8009652:	4b6c      	ldr	r3, [pc, #432]	; (8009804 <Wifi_Service+0x3ec>)
 8009654:	0010      	movs	r0, r2
 8009656:	0019      	movs	r1, r3
 8009658:	2302      	movs	r3, #2
 800965a:	001a      	movs	r2, r3
 800965c:	f005 fb80 	bl	800ed60 <memcpy>
		myLongStr(len,dummy,10,10);
 8009660:	4b62      	ldr	r3, [pc, #392]	; (80097ec <Wifi_Service+0x3d4>)
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	4968      	ldr	r1, [pc, #416]	; (8009808 <Wifi_Service+0x3f0>)
 8009666:	230a      	movs	r3, #10
 8009668:	220a      	movs	r2, #10
 800966a:	f001 f97b 	bl	800a964 <myLongStr>
		strcat((char*)temp,dummy);
 800966e:	4a66      	ldr	r2, [pc, #408]	; (8009808 <Wifi_Service+0x3f0>)
 8009670:	4b50      	ldr	r3, [pc, #320]	; (80097b4 <Wifi_Service+0x39c>)
 8009672:	0011      	movs	r1, r2
 8009674:	0018      	movs	r0, r3
 8009676:	f005 fba5 	bl	800edc4 <strcat>
		strcat((char*)temp,"\r\n");
 800967a:	4b4e      	ldr	r3, [pc, #312]	; (80097b4 <Wifi_Service+0x39c>)
 800967c:	0018      	movs	r0, r3
 800967e:	f7ff fd43 	bl	8009108 <strlen>
 8009682:	0003      	movs	r3, r0
 8009684:	001a      	movs	r2, r3
 8009686:	4b4b      	ldr	r3, [pc, #300]	; (80097b4 <Wifi_Service+0x39c>)
 8009688:	18d2      	adds	r2, r2, r3
 800968a:	4b50      	ldr	r3, [pc, #320]	; (80097cc <Wifi_Service+0x3b4>)
 800968c:	0010      	movs	r0, r2
 800968e:	0019      	movs	r1, r3
 8009690:	2303      	movs	r3, #3
 8009692:	001a      	movs	r2, r3
 8009694:	f005 fb64 	bl	800ed60 <memcpy>
		Wifi_Send((char*)temp);
 8009698:	4b46      	ldr	r3, [pc, #280]	; (80097b4 <Wifi_Service+0x39c>)
 800969a:	0018      	movs	r0, r3
 800969c:	f000 f906 	bl	80098ac <Wifi_Send>
		//Wifi_Send(">\r\n");
		//Wifi_Send("AT+CIPSEND=<length>\r\n");
		WifiState = 0;
 80096a0:	4b3b      	ldr	r3, [pc, #236]	; (8009790 <Wifi_Service+0x378>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	701a      	strb	r2, [r3, #0]
		break;
 80096a6:	e0de      	b.n	8009866 <Wifi_Service+0x44e>
	case IP_Data:
		Debug_Send("Send data\r\n");
 80096a8:	4b58      	ldr	r3, [pc, #352]	; (800980c <Wifi_Service+0x3f4>)
 80096aa:	0018      	movs	r0, r3
 80096ac:	f7ff fdf0 	bl	8009290 <Debug_Send>

		if(mqttFlag.active == 1) GSM_Send_Bin(temp1, mqttInfo.length);
 80096b0:	4b4f      	ldr	r3, [pc, #316]	; (80097f0 <Wifi_Service+0x3d8>)
 80096b2:	789b      	ldrb	r3, [r3, #2]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d107      	bne.n	80096c8 <Wifi_Service+0x2b0>
 80096b8:	4b4e      	ldr	r3, [pc, #312]	; (80097f4 <Wifi_Service+0x3dc>)
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	4b54      	ldr	r3, [pc, #336]	; (8009810 <Wifi_Service+0x3f8>)
 80096be:	0011      	movs	r1, r2
 80096c0:	0018      	movs	r0, r3
 80096c2:	f7ff fdbf 	bl	8009244 <GSM_Send_Bin>
 80096c6:	e01c      	b.n	8009702 <Wifi_Service+0x2ea>
		else{
			strcpy((char*)temp1,HTML5);
 80096c8:	4a47      	ldr	r2, [pc, #284]	; (80097e8 <Wifi_Service+0x3d0>)
 80096ca:	4b51      	ldr	r3, [pc, #324]	; (8009810 <Wifi_Service+0x3f8>)
 80096cc:	0011      	movs	r1, r2
 80096ce:	0018      	movs	r0, r3
 80096d0:	f005 fb85 	bl	800edde <strcpy>
			strcat((char*)temp1,"\r\n");
 80096d4:	4b4e      	ldr	r3, [pc, #312]	; (8009810 <Wifi_Service+0x3f8>)
 80096d6:	0018      	movs	r0, r3
 80096d8:	f7ff fd16 	bl	8009108 <strlen>
 80096dc:	0003      	movs	r3, r0
 80096de:	001a      	movs	r2, r3
 80096e0:	4b4b      	ldr	r3, [pc, #300]	; (8009810 <Wifi_Service+0x3f8>)
 80096e2:	18d2      	adds	r2, r2, r3
 80096e4:	4b39      	ldr	r3, [pc, #228]	; (80097cc <Wifi_Service+0x3b4>)
 80096e6:	0010      	movs	r0, r2
 80096e8:	0019      	movs	r1, r3
 80096ea:	2303      	movs	r3, #3
 80096ec:	001a      	movs	r2, r3
 80096ee:	f005 fb37 	bl	800ed60 <memcpy>
			Debug_Send((char*)temp1);
 80096f2:	4b47      	ldr	r3, [pc, #284]	; (8009810 <Wifi_Service+0x3f8>)
 80096f4:	0018      	movs	r0, r3
 80096f6:	f7ff fdcb 	bl	8009290 <Debug_Send>
			Wifi_Send((char*)temp1);
 80096fa:	4b45      	ldr	r3, [pc, #276]	; (8009810 <Wifi_Service+0x3f8>)
 80096fc:	0018      	movs	r0, r3
 80096fe:	f000 f8d5 	bl	80098ac <Wifi_Send>
		}

		Debug_Send("Send data done\r\n");
 8009702:	4b44      	ldr	r3, [pc, #272]	; (8009814 <Wifi_Service+0x3fc>)
 8009704:	0018      	movs	r0, r3
 8009706:	f7ff fdc3 	bl	8009290 <Debug_Send>
		WifiState = 0;
 800970a:	4b21      	ldr	r3, [pc, #132]	; (8009790 <Wifi_Service+0x378>)
 800970c:	2200      	movs	r2, #0
 800970e:	701a      	strb	r2, [r3, #0]
		break;
 8009710:	e0a9      	b.n	8009866 <Wifi_Service+0x44e>
	case IP_Buffer:
		strcpy((char*)temp,"AT+CIPSENDBUF=");
 8009712:	4a28      	ldr	r2, [pc, #160]	; (80097b4 <Wifi_Service+0x39c>)
 8009714:	4b40      	ldr	r3, [pc, #256]	; (8009818 <Wifi_Service+0x400>)
 8009716:	0010      	movs	r0, r2
 8009718:	0019      	movs	r1, r3
 800971a:	230f      	movs	r3, #15
 800971c:	001a      	movs	r2, r3
 800971e:	f005 fb1f 	bl	800ed60 <memcpy>
		strcat((char*)temp,ConnID);
 8009722:	4a37      	ldr	r2, [pc, #220]	; (8009800 <Wifi_Service+0x3e8>)
 8009724:	4b23      	ldr	r3, [pc, #140]	; (80097b4 <Wifi_Service+0x39c>)
 8009726:	0011      	movs	r1, r2
 8009728:	0018      	movs	r0, r3
 800972a:	f005 fb4b 	bl	800edc4 <strcat>
		strcat((char*)temp,",");
 800972e:	4b21      	ldr	r3, [pc, #132]	; (80097b4 <Wifi_Service+0x39c>)
 8009730:	0018      	movs	r0, r3
 8009732:	f7ff fce9 	bl	8009108 <strlen>
 8009736:	0003      	movs	r3, r0
 8009738:	001a      	movs	r2, r3
 800973a:	4b1e      	ldr	r3, [pc, #120]	; (80097b4 <Wifi_Service+0x39c>)
 800973c:	18d2      	adds	r2, r2, r3
 800973e:	4b31      	ldr	r3, [pc, #196]	; (8009804 <Wifi_Service+0x3ec>)
 8009740:	0010      	movs	r0, r2
 8009742:	0019      	movs	r1, r3
 8009744:	2302      	movs	r3, #2
 8009746:	001a      	movs	r2, r3
 8009748:	f005 fb0a 	bl	800ed60 <memcpy>
		myLongStr(len,temp1,10,10);
 800974c:	4b27      	ldr	r3, [pc, #156]	; (80097ec <Wifi_Service+0x3d4>)
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	492f      	ldr	r1, [pc, #188]	; (8009810 <Wifi_Service+0x3f8>)
 8009752:	230a      	movs	r3, #10
 8009754:	220a      	movs	r2, #10
 8009756:	f001 f905 	bl	800a964 <myLongStr>
		strcat((char*)temp,temp1);
 800975a:	4a2d      	ldr	r2, [pc, #180]	; (8009810 <Wifi_Service+0x3f8>)
 800975c:	4b15      	ldr	r3, [pc, #84]	; (80097b4 <Wifi_Service+0x39c>)
 800975e:	0011      	movs	r1, r2
 8009760:	0018      	movs	r0, r3
 8009762:	f005 fb2f 	bl	800edc4 <strcat>
		strcat((char*)temp,"\r\n");
 8009766:	4b13      	ldr	r3, [pc, #76]	; (80097b4 <Wifi_Service+0x39c>)
 8009768:	0018      	movs	r0, r3
 800976a:	f7ff fccd 	bl	8009108 <strlen>
 800976e:	0003      	movs	r3, r0
 8009770:	001a      	movs	r2, r3
 8009772:	4b10      	ldr	r3, [pc, #64]	; (80097b4 <Wifi_Service+0x39c>)
 8009774:	18d2      	adds	r2, r2, r3
 8009776:	4b15      	ldr	r3, [pc, #84]	; (80097cc <Wifi_Service+0x3b4>)
 8009778:	0010      	movs	r0, r2
 800977a:	0019      	movs	r1, r3
 800977c:	2303      	movs	r3, #3
 800977e:	001a      	movs	r2, r3
 8009780:	f005 faee 	bl	800ed60 <memcpy>
		Wifi_Send((char*)temp);
 8009784:	4b0b      	ldr	r3, [pc, #44]	; (80097b4 <Wifi_Service+0x39c>)
 8009786:	0018      	movs	r0, r3
 8009788:	f000 f890 	bl	80098ac <Wifi_Send>

		break;
 800978c:	e06b      	b.n	8009866 <Wifi_Service+0x44e>
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	200000c4 	.word	0x200000c4
 8009794:	0800fa24 	.word	0x0800fa24
 8009798:	0800f634 	.word	0x0800f634
 800979c:	0800f640 	.word	0x0800f640
 80097a0:	0800f648 	.word	0x0800f648
 80097a4:	0800f658 	.word	0x0800f658
 80097a8:	20002390 	.word	0x20002390
 80097ac:	0800f664 	.word	0x0800f664
 80097b0:	0800f670 	.word	0x0800f670
 80097b4:	20001f7c 	.word	0x20001f7c
 80097b8:	0800f67c 	.word	0x0800f67c
 80097bc:	0800f688 	.word	0x0800f688
 80097c0:	200000c8 	.word	0x200000c8
 80097c4:	0800f68c 	.word	0x0800f68c
 80097c8:	200000e8 	.word	0x200000e8
 80097cc:	0800f690 	.word	0x0800f690
 80097d0:	0800f694 	.word	0x0800f694
 80097d4:	0800f6a4 	.word	0x0800f6a4
 80097d8:	0800f6b4 	.word	0x0800f6b4
 80097dc:	48000400 	.word	0x48000400
 80097e0:	0800f6cc 	.word	0x0800f6cc
 80097e4:	0800f6e0 	.word	0x0800f6e0
 80097e8:	20000108 	.word	0x20000108
 80097ec:	20002398 	.word	0x20002398
 80097f0:	200022c0 	.word	0x200022c0
 80097f4:	20001a08 	.word	0x20001a08
 80097f8:	0800f70c 	.word	0x0800f70c
 80097fc:	0800f724 	.word	0x0800f724
 8009800:	200022bc 	.word	0x200022bc
 8009804:	0800f734 	.word	0x0800f734
 8009808:	200018b0 	.word	0x200018b0
 800980c:	0800f738 	.word	0x0800f738
 8009810:	20002000 	.word	0x20002000
 8009814:	0800f744 	.word	0x0800f744
 8009818:	0800f758 	.word	0x0800f758
	case Close_Socket:
		//Wifi_Send("AT+CLOSE\r\n");
		strcpy((char*)temp,"AT+CIPCLOSE=");
 800981c:	4a1c      	ldr	r2, [pc, #112]	; (8009890 <Wifi_Service+0x478>)
 800981e:	4b1d      	ldr	r3, [pc, #116]	; (8009894 <Wifi_Service+0x47c>)
 8009820:	0010      	movs	r0, r2
 8009822:	0019      	movs	r1, r3
 8009824:	230d      	movs	r3, #13
 8009826:	001a      	movs	r2, r3
 8009828:	f005 fa9a 	bl	800ed60 <memcpy>
		strcat((char*)temp,ConnID);
 800982c:	4a1a      	ldr	r2, [pc, #104]	; (8009898 <Wifi_Service+0x480>)
 800982e:	4b18      	ldr	r3, [pc, #96]	; (8009890 <Wifi_Service+0x478>)
 8009830:	0011      	movs	r1, r2
 8009832:	0018      	movs	r0, r3
 8009834:	f005 fac6 	bl	800edc4 <strcat>
		strcat((char*)temp,"\r\n");
 8009838:	4b15      	ldr	r3, [pc, #84]	; (8009890 <Wifi_Service+0x478>)
 800983a:	0018      	movs	r0, r3
 800983c:	f7ff fc64 	bl	8009108 <strlen>
 8009840:	0003      	movs	r3, r0
 8009842:	001a      	movs	r2, r3
 8009844:	4b12      	ldr	r3, [pc, #72]	; (8009890 <Wifi_Service+0x478>)
 8009846:	18d2      	adds	r2, r2, r3
 8009848:	4b14      	ldr	r3, [pc, #80]	; (800989c <Wifi_Service+0x484>)
 800984a:	0010      	movs	r0, r2
 800984c:	0019      	movs	r1, r3
 800984e:	2303      	movs	r3, #3
 8009850:	001a      	movs	r2, r3
 8009852:	f005 fa85 	bl	800ed60 <memcpy>
		Wifi_Send((char*)temp);
 8009856:	4b0e      	ldr	r3, [pc, #56]	; (8009890 <Wifi_Service+0x478>)
 8009858:	0018      	movs	r0, r3
 800985a:	f000 f827 	bl	80098ac <Wifi_Send>
		WifiState = 0;
 800985e:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <Wifi_Service+0x488>)
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]
		break;
 8009864:	46c0      	nop			; (mov r8, r8)
	}
	if (mqttFlag.subscribe == 2) mqttInfo.timer++;
 8009866:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <Wifi_Service+0x48c>)
 8009868:	785b      	ldrb	r3, [r3, #1]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d104      	bne.n	8009878 <Wifi_Service+0x460>
 800986e:	4b0e      	ldr	r3, [pc, #56]	; (80098a8 <Wifi_Service+0x490>)
 8009870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <Wifi_Service+0x490>)
 8009876:	65da      	str	r2, [r3, #92]	; 0x5c
	if (mqttInfo.timer == 90){
 8009878:	4b0b      	ldr	r3, [pc, #44]	; (80098a8 <Wifi_Service+0x490>)
 800987a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800987c:	2b5a      	cmp	r3, #90	; 0x5a
 800987e:	d104      	bne.n	800988a <Wifi_Service+0x472>
		MQTT_Publish_F1();
 8009880:	f000 fa20 	bl	8009cc4 <MQTT_Publish_F1>
		mqttInfo.timer = 0;
 8009884:	4b08      	ldr	r3, [pc, #32]	; (80098a8 <Wifi_Service+0x490>)
 8009886:	2200      	movs	r2, #0
 8009888:	65da      	str	r2, [r3, #92]	; 0x5c
	}
}
 800988a:	46c0      	nop			; (mov r8, r8)
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	20001f7c 	.word	0x20001f7c
 8009894:	0800f768 	.word	0x0800f768
 8009898:	200022bc 	.word	0x200022bc
 800989c:	0800f690 	.word	0x0800f690
 80098a0:	200000c4 	.word	0x200000c4
 80098a4:	200022c0 	.word	0x200022c0
 80098a8:	20001a08 	.word	0x20001a08

080098ac <Wifi_Send>:

void Wifi_Send(char* data){
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
	int size;
	int timeout = 25;
 80098b4:	2319      	movs	r3, #25
 80098b6:	60fb      	str	r3, [r7, #12]
	size = strlen(data);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	0018      	movs	r0, r3
 80098bc:	f7ff fc24 	bl	8009108 <strlen>
 80098c0:	0003      	movs	r3, r0
 80098c2:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart2, data, size, timeout);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6879      	ldr	r1, [r7, #4]
 80098cc:	4806      	ldr	r0, [pc, #24]	; (80098e8 <Wifi_Send+0x3c>)
 80098ce:	f002 fdf7 	bl	800c4c0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 140);
 80098d2:	4906      	ldr	r1, [pc, #24]	; (80098ec <Wifi_Send+0x40>)
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <Wifi_Send+0x3c>)
 80098d6:	228c      	movs	r2, #140	; 0x8c
 80098d8:	0018      	movs	r0, r3
 80098da:	f002 ff1b 	bl	800c714 <HAL_UART_Receive_IT>
	//HAL_UART_Transmit_IT(&huart3, data, size);
	//HAL_UART_Receive_IT(&huart1, data, size);
}
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	46bd      	mov	sp, r7
 80098e2:	b004      	add	sp, #16
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	46c0      	nop			; (mov r8, r8)
 80098e8:	2000248c 	.word	0x2000248c
 80098ec:	200018b0 	.word	0x200018b0

080098f0 <WifirecData>:


void WifirecData(){
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(LED2B0_GPIO_Port, LED2B0_Pin);
	//while (WrecBuffPointerWrite != WrecBuffPointerRead){
		if (WrecBuffPointerWrite != WrecBuffPointerRead){
 80098f4:	4b93      	ldr	r3, [pc, #588]	; (8009b44 <WifirecData+0x254>)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	4b93      	ldr	r3, [pc, #588]	; (8009b48 <WifirecData+0x258>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d100      	bne.n	8009902 <WifirecData+0x12>
 8009900:	e11c      	b.n	8009b3c <WifirecData+0x24c>

			WprocBuff[WprocBuffpointer] = WrecBuff[WrecBuffPointerRead];
 8009902:	4b91      	ldr	r3, [pc, #580]	; (8009b48 <WifirecData+0x258>)
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	4b91      	ldr	r3, [pc, #580]	; (8009b4c <WifirecData+0x25c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4991      	ldr	r1, [pc, #580]	; (8009b50 <WifirecData+0x260>)
 800990c:	5c89      	ldrb	r1, [r1, r2]
 800990e:	4a91      	ldr	r2, [pc, #580]	; (8009b54 <WifirecData+0x264>)
 8009910:	54d1      	strb	r1, [r2, r3]
			WrecBuffPointerRead++;
 8009912:	4b8d      	ldr	r3, [pc, #564]	; (8009b48 <WifirecData+0x258>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	4b8b      	ldr	r3, [pc, #556]	; (8009b48 <WifirecData+0x258>)
 800991a:	601a      	str	r2, [r3, #0]
			if (WrecBuffPointerRead > WrecBuffSize) WrecBuffPointerRead = 0;
 800991c:	4b8a      	ldr	r3, [pc, #552]	; (8009b48 <WifirecData+0x258>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a8d      	ldr	r2, [pc, #564]	; (8009b58 <WifirecData+0x268>)
 8009922:	4293      	cmp	r3, r2
 8009924:	dd02      	ble.n	800992c <WifirecData+0x3c>
 8009926:	4b88      	ldr	r3, [pc, #544]	; (8009b48 <WifirecData+0x258>)
 8009928:	2200      	movs	r2, #0
 800992a:	601a      	str	r2, [r3, #0]

			WprocBuffpointer++;
 800992c:	4b87      	ldr	r3, [pc, #540]	; (8009b4c <WifirecData+0x25c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	4b86      	ldr	r3, [pc, #536]	; (8009b4c <WifirecData+0x25c>)
 8009934:	601a      	str	r2, [r3, #0]
			if (WprocBuffpointer > WprocBuffSize) WprocBuffpointer = 0;
 8009936:	4b85      	ldr	r3, [pc, #532]	; (8009b4c <WifirecData+0x25c>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2bc8      	cmp	r3, #200	; 0xc8
 800993c:	dd02      	ble.n	8009944 <WifirecData+0x54>
 800993e:	4b83      	ldr	r3, [pc, #524]	; (8009b4c <WifirecData+0x25c>)
 8009940:	2200      	movs	r2, #0
 8009942:	601a      	str	r2, [r3, #0]

			mqttReceived[mqttInfo.Buffpointer] = WprocBuff[WprocBuffpointer - 1];
 8009944:	4b81      	ldr	r3, [pc, #516]	; (8009b4c <WifirecData+0x25c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	1e5a      	subs	r2, r3, #1
 800994a:	4b84      	ldr	r3, [pc, #528]	; (8009b5c <WifirecData+0x26c>)
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	4981      	ldr	r1, [pc, #516]	; (8009b54 <WifirecData+0x264>)
 8009950:	5c89      	ldrb	r1, [r1, r2]
 8009952:	4a83      	ldr	r2, [pc, #524]	; (8009b60 <WifirecData+0x270>)
 8009954:	54d1      	strb	r1, [r2, r3]
			if((mqttFlag.connect == 1) && (mqttReceived[mqttInfo.Buffpointer] == 2)){		//check connect response
 8009956:	4b83      	ldr	r3, [pc, #524]	; (8009b64 <WifirecData+0x274>)
 8009958:	78db      	ldrb	r3, [r3, #3]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d10e      	bne.n	800997c <WifirecData+0x8c>
 800995e:	4b7f      	ldr	r3, [pc, #508]	; (8009b5c <WifirecData+0x26c>)
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	4a7f      	ldr	r2, [pc, #508]	; (8009b60 <WifirecData+0x270>)
 8009964:	5cd3      	ldrb	r3, [r2, r3]
 8009966:	2b02      	cmp	r3, #2
 8009968:	d108      	bne.n	800997c <WifirecData+0x8c>
				Debug_Send("Got connect\r\n");
 800996a:	4b7f      	ldr	r3, [pc, #508]	; (8009b68 <WifirecData+0x278>)
 800996c:	0018      	movs	r0, r3
 800996e:	f7ff fc8f 	bl	8009290 <Debug_Send>
				mqttFlag.connect = 2;
 8009972:	4b7c      	ldr	r3, [pc, #496]	; (8009b64 <WifirecData+0x274>)
 8009974:	2202      	movs	r2, #2
 8009976:	70da      	strb	r2, [r3, #3]
				MQTT_SuscribeF1();
 8009978:	f000 f95e 	bl	8009c38 <MQTT_SuscribeF1>
			}
			if((mqttFlag.subscribe == 1) && (mqttReceived[mqttInfo.Buffpointer] == 0x90)){		//check subscribe response
 800997c:	4b79      	ldr	r3, [pc, #484]	; (8009b64 <WifirecData+0x274>)
 800997e:	785b      	ldrb	r3, [r3, #1]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d10e      	bne.n	80099a2 <WifirecData+0xb2>
 8009984:	4b75      	ldr	r3, [pc, #468]	; (8009b5c <WifirecData+0x26c>)
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	4a75      	ldr	r2, [pc, #468]	; (8009b60 <WifirecData+0x270>)
 800998a:	5cd3      	ldrb	r3, [r2, r3]
 800998c:	2b90      	cmp	r3, #144	; 0x90
 800998e:	d108      	bne.n	80099a2 <WifirecData+0xb2>
				Debug_Send("Got subscribe\r\n");
 8009990:	4b76      	ldr	r3, [pc, #472]	; (8009b6c <WifirecData+0x27c>)
 8009992:	0018      	movs	r0, r3
 8009994:	f7ff fc7c 	bl	8009290 <Debug_Send>
				mqttFlag.subscribe = 2;
 8009998:	4b72      	ldr	r3, [pc, #456]	; (8009b64 <WifirecData+0x274>)
 800999a:	2202      	movs	r2, #2
 800999c:	705a      	strb	r2, [r3, #1]
				MQTT_Publish_F1();
 800999e:	f000 f991 	bl	8009cc4 <MQTT_Publish_F1>
			}
			if((mqttFlag.subscribe == 2) && (mqttReceived[mqttInfo.Buffpointer] == 0x30)){
 80099a2:	4b70      	ldr	r3, [pc, #448]	; (8009b64 <WifirecData+0x274>)
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d10c      	bne.n	80099c4 <WifirecData+0xd4>
 80099aa:	4b6c      	ldr	r3, [pc, #432]	; (8009b5c <WifirecData+0x26c>)
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	4a6c      	ldr	r2, [pc, #432]	; (8009b60 <WifirecData+0x270>)
 80099b0:	5cd3      	ldrb	r3, [r2, r3]
 80099b2:	2b30      	cmp	r3, #48	; 0x30
 80099b4:	d106      	bne.n	80099c4 <WifirecData+0xd4>
				Debug_Send("Got publish\r\n");
 80099b6:	4b6e      	ldr	r3, [pc, #440]	; (8009b70 <WifirecData+0x280>)
 80099b8:	0018      	movs	r0, r3
 80099ba:	f7ff fc69 	bl	8009290 <Debug_Send>
				WifiState =  Wifi_AT;
 80099be:	4b6d      	ldr	r3, [pc, #436]	; (8009b74 <WifirecData+0x284>)
 80099c0:	2202      	movs	r2, #2
 80099c2:	701a      	strb	r2, [r3, #0]
			}

			if((mqttFlag.subscribe == 2) && (mqttReceived[mqttInfo.Buffpointer] == 0x31)){
 80099c4:	4b67      	ldr	r3, [pc, #412]	; (8009b64 <WifirecData+0x274>)
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d10c      	bne.n	80099e6 <WifirecData+0xf6>
 80099cc:	4b63      	ldr	r3, [pc, #396]	; (8009b5c <WifirecData+0x26c>)
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	4a63      	ldr	r2, [pc, #396]	; (8009b60 <WifirecData+0x270>)
 80099d2:	5cd3      	ldrb	r3, [r2, r3]
 80099d4:	2b31      	cmp	r3, #49	; 0x31
 80099d6:	d106      	bne.n	80099e6 <WifirecData+0xf6>
				Debug_Send("Got publish r\r\n");
 80099d8:	4b67      	ldr	r3, [pc, #412]	; (8009b78 <WifirecData+0x288>)
 80099da:	0018      	movs	r0, r3
 80099dc:	f7ff fc58 	bl	8009290 <Debug_Send>
				WifiState =  Wifi_AT;
 80099e0:	4b64      	ldr	r3, [pc, #400]	; (8009b74 <WifirecData+0x284>)
 80099e2:	2202      	movs	r2, #2
 80099e4:	701a      	strb	r2, [r3, #0]
			}

			if (mqttReceived[mqttInfo.Buffpointer] < 10){
 80099e6:	4b5d      	ldr	r3, [pc, #372]	; (8009b5c <WifirecData+0x26c>)
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	4a5d      	ldr	r2, [pc, #372]	; (8009b60 <WifirecData+0x270>)
 80099ec:	5cd3      	ldrb	r3, [r2, r3]
 80099ee:	2b09      	cmp	r3, #9
 80099f0:	d810      	bhi.n	8009a14 <WifirecData+0x124>
				//if ((WprocBuff[WprocBuffpointer - 1] != 0x10)||(WprocBuff[WprocBuffpointer - 1] != 0x13)){
				if (WprocBuff[WprocBuffpointer - 1] != 0x10){
 80099f2:	4b56      	ldr	r3, [pc, #344]	; (8009b4c <WifirecData+0x25c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	4a56      	ldr	r2, [pc, #344]	; (8009b54 <WifirecData+0x264>)
 80099fa:	5cd3      	ldrb	r3, [r2, r3]
 80099fc:	2b10      	cmp	r3, #16
 80099fe:	d009      	beq.n	8009a14 <WifirecData+0x124>
					myLongStr(mqttReceived[mqttInfo.Buffpointer],temp,10,16);
 8009a00:	4b56      	ldr	r3, [pc, #344]	; (8009b5c <WifirecData+0x26c>)
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	4a56      	ldr	r2, [pc, #344]	; (8009b60 <WifirecData+0x270>)
 8009a06:	5cd3      	ldrb	r3, [r2, r3]
 8009a08:	0018      	movs	r0, r3
 8009a0a:	495c      	ldr	r1, [pc, #368]	; (8009b7c <WifirecData+0x28c>)
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	220a      	movs	r2, #10
 8009a10:	f000 ffa8 	bl	800a964 <myLongStr>
					//Debug_Send(temp);
					//Debug_Send("\r\n");
				}
			}

			if (mqttFlag.Data == 1){
 8009a14:	4b53      	ldr	r3, [pc, #332]	; (8009b64 <WifirecData+0x274>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d172      	bne.n	8009b02 <WifirecData+0x212>
				mqttReceived[mqttInfo.Buffpointer] = WprocBuff[WprocBuffpointer - 1];
 8009a1c:	4b4b      	ldr	r3, [pc, #300]	; (8009b4c <WifirecData+0x25c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	1e5a      	subs	r2, r3, #1
 8009a22:	4b4e      	ldr	r3, [pc, #312]	; (8009b5c <WifirecData+0x26c>)
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	494b      	ldr	r1, [pc, #300]	; (8009b54 <WifirecData+0x264>)
 8009a28:	5c89      	ldrb	r1, [r1, r2]
 8009a2a:	4a4d      	ldr	r2, [pc, #308]	; (8009b60 <WifirecData+0x270>)
 8009a2c:	54d1      	strb	r1, [r2, r3]
				myLongStr(mqttInfo.Buffpointer,temp,10,10);
 8009a2e:	4b4b      	ldr	r3, [pc, #300]	; (8009b5c <WifirecData+0x26c>)
 8009a30:	6858      	ldr	r0, [r3, #4]
 8009a32:	4952      	ldr	r1, [pc, #328]	; (8009b7c <WifirecData+0x28c>)
 8009a34:	230a      	movs	r3, #10
 8009a36:	220a      	movs	r2, #10
 8009a38:	f000 ff94 	bl	800a964 <myLongStr>
				Debug_Send("pos: ");
 8009a3c:	4b50      	ldr	r3, [pc, #320]	; (8009b80 <WifirecData+0x290>)
 8009a3e:	0018      	movs	r0, r3
 8009a40:	f7ff fc26 	bl	8009290 <Debug_Send>
				Debug_Send(temp);
 8009a44:	4b4d      	ldr	r3, [pc, #308]	; (8009b7c <WifirecData+0x28c>)
 8009a46:	0018      	movs	r0, r3
 8009a48:	f7ff fc22 	bl	8009290 <Debug_Send>
				Debug_Send("\r\n");
 8009a4c:	4b4d      	ldr	r3, [pc, #308]	; (8009b84 <WifirecData+0x294>)
 8009a4e:	0018      	movs	r0, r3
 8009a50:	f7ff fc1e 	bl	8009290 <Debug_Send>
				myLongStr(mqttReceived[mqttInfo.Buffpointer],temp,10,10);
 8009a54:	4b41      	ldr	r3, [pc, #260]	; (8009b5c <WifirecData+0x26c>)
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	4a41      	ldr	r2, [pc, #260]	; (8009b60 <WifirecData+0x270>)
 8009a5a:	5cd3      	ldrb	r3, [r2, r3]
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	4947      	ldr	r1, [pc, #284]	; (8009b7c <WifirecData+0x28c>)
 8009a60:	230a      	movs	r3, #10
 8009a62:	220a      	movs	r2, #10
 8009a64:	f000 ff7e 	bl	800a964 <myLongStr>
				Debug_Send("byte: ");
 8009a68:	4b47      	ldr	r3, [pc, #284]	; (8009b88 <WifirecData+0x298>)
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f7ff fc10 	bl	8009290 <Debug_Send>
				Debug_Send(temp);
 8009a70:	4b42      	ldr	r3, [pc, #264]	; (8009b7c <WifirecData+0x28c>)
 8009a72:	0018      	movs	r0, r3
 8009a74:	f7ff fc0c 	bl	8009290 <Debug_Send>
				Debug_Send("\r\n");
 8009a78:	4b42      	ldr	r3, [pc, #264]	; (8009b84 <WifirecData+0x294>)
 8009a7a:	0018      	movs	r0, r3
 8009a7c:	f7ff fc08 	bl	8009290 <Debug_Send>
				if (mqttReceived[mqttInfo.Buffpointer] == 0x02){
 8009a80:	4b36      	ldr	r3, [pc, #216]	; (8009b5c <WifirecData+0x26c>)
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	4a36      	ldr	r2, [pc, #216]	; (8009b60 <WifirecData+0x270>)
 8009a86:	5cd3      	ldrb	r3, [r2, r3]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d103      	bne.n	8009a94 <WifirecData+0x1a4>
					Debug_Send("Connected\r\n");
 8009a8c:	4b3f      	ldr	r3, [pc, #252]	; (8009b8c <WifirecData+0x29c>)
 8009a8e:	0018      	movs	r0, r3
 8009a90:	f7ff fbfe 	bl	8009290 <Debug_Send>
					//mqttState = Subscribe;
					//gsmState = GPRS_Send;
				}
				if (mqttInfo.Buffpointer == 1){
 8009a94:	4b31      	ldr	r3, [pc, #196]	; (8009b5c <WifirecData+0x26c>)
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d11c      	bne.n	8009ad6 <WifirecData+0x1e6>
					mqttInfo.Size = mqttReceived[mqttInfo.Buffpointer];
 8009a9c:	4b2f      	ldr	r3, [pc, #188]	; (8009b5c <WifirecData+0x26c>)
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	4a2f      	ldr	r2, [pc, #188]	; (8009b60 <WifirecData+0x270>)
 8009aa2:	5cd2      	ldrb	r2, [r2, r3]
 8009aa4:	4b2d      	ldr	r3, [pc, #180]	; (8009b5c <WifirecData+0x26c>)
 8009aa6:	701a      	strb	r2, [r3, #0]
					mqttInfo.Size = 8;	//test
 8009aa8:	4b2c      	ldr	r3, [pc, #176]	; (8009b5c <WifirecData+0x26c>)
 8009aaa:	2208      	movs	r2, #8
 8009aac:	701a      	strb	r2, [r3, #0]
					myLongStr(mqttInfo.Size,temp,10,10);
 8009aae:	4b2b      	ldr	r3, [pc, #172]	; (8009b5c <WifirecData+0x26c>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	0018      	movs	r0, r3
 8009ab4:	4931      	ldr	r1, [pc, #196]	; (8009b7c <WifirecData+0x28c>)
 8009ab6:	230a      	movs	r3, #10
 8009ab8:	220a      	movs	r2, #10
 8009aba:	f000 ff53 	bl	800a964 <myLongStr>
					Debug_Send("Size: ");
 8009abe:	4b34      	ldr	r3, [pc, #208]	; (8009b90 <WifirecData+0x2a0>)
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f7ff fbe5 	bl	8009290 <Debug_Send>
					Debug_Send(temp);
 8009ac6:	4b2d      	ldr	r3, [pc, #180]	; (8009b7c <WifirecData+0x28c>)
 8009ac8:	0018      	movs	r0, r3
 8009aca:	f7ff fbe1 	bl	8009290 <Debug_Send>
					Debug_Send("\r\n");
 8009ace:	4b2d      	ldr	r3, [pc, #180]	; (8009b84 <WifirecData+0x294>)
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f7ff fbdd 	bl	8009290 <Debug_Send>
				}
				mqttInfo.Buffpointer++;
 8009ad6:	4b21      	ldr	r3, [pc, #132]	; (8009b5c <WifirecData+0x26c>)
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	4b1f      	ldr	r3, [pc, #124]	; (8009b5c <WifirecData+0x26c>)
 8009ade:	605a      	str	r2, [r3, #4]
				if(mqttInfo.Buffpointer>mqttInfo.Size+1){
 8009ae0:	4b1e      	ldr	r3, [pc, #120]	; (8009b5c <WifirecData+0x26c>)
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	4b1d      	ldr	r3, [pc, #116]	; (8009b5c <WifirecData+0x26c>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	429a      	cmp	r2, r3
 8009aec:	dd09      	ble.n	8009b02 <WifirecData+0x212>
					mqttFlag.Data = 0;
 8009aee:	4b1d      	ldr	r3, [pc, #116]	; (8009b64 <WifirecData+0x274>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	701a      	strb	r2, [r3, #0]
					mqttInfo.Buffpointer = 0;
 8009af4:	4b19      	ldr	r3, [pc, #100]	; (8009b5c <WifirecData+0x26c>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	605a      	str	r2, [r3, #4]
					Debug_Send("mqtt stop\r\n");
 8009afa:	4b26      	ldr	r3, [pc, #152]	; (8009b94 <WifirecData+0x2a4>)
 8009afc:	0018      	movs	r0, r3
 8009afe:	f7ff fbc7 	bl	8009290 <Debug_Send>
				}
				//if ((MQTTBuffpointer > gsmInfo.MQTT_Size + 2)||(gsmInfo.MQTT_Size == 0)) MQTT_Process();
			}

			if (WprocBuff[WprocBuffpointer - 1] == '>'){
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <WifirecData+0x25c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	4a12      	ldr	r2, [pc, #72]	; (8009b54 <WifirecData+0x264>)
 8009b0a:	5cd3      	ldrb	r3, [r2, r3]
 8009b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8009b0e:	d102      	bne.n	8009b16 <WifirecData+0x226>
				WifiState = IP_Data;
 8009b10:	4b18      	ldr	r3, [pc, #96]	; (8009b74 <WifirecData+0x284>)
 8009b12:	220f      	movs	r2, #15
 8009b14:	701a      	strb	r2, [r3, #0]
				/*if (gsmInfo.socket == 1) gsmState = GPRS_Write;
				if (gsmInfo.dataFlag == 1)gsmState = GPRS_Write;
				else gsmState = SMS_Text;*/
			}
			if (WprocBuff[WprocBuffpointer - 1] == 0x0A){
 8009b16:	4b0d      	ldr	r3, [pc, #52]	; (8009b4c <WifirecData+0x25c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	4a0d      	ldr	r2, [pc, #52]	; (8009b54 <WifirecData+0x264>)
 8009b1e:	5cd3      	ldrb	r3, [r2, r3]
 8009b20:	2b0a      	cmp	r3, #10
 8009b22:	d10b      	bne.n	8009b3c <WifirecData+0x24c>
				/*if (mqttFlag.active == 0)*/
				//WprocBuff[WprocBuffpointer - 1] = 0;
				WprocBuff[WprocBuffpointer] = 0;
 8009b24:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <WifirecData+0x25c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a0a      	ldr	r2, [pc, #40]	; (8009b54 <WifirecData+0x264>)
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	54d1      	strb	r1, [r2, r3]
				WprocBuffpointer = 0;
 8009b2e:	4b07      	ldr	r3, [pc, #28]	; (8009b4c <WifirecData+0x25c>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	601a      	str	r2, [r3, #0]
				//GSM_Send(WprocBuff);
				//GSM_Send("\r\n");
				//GSM_Send("0x0A\r\n");
				//GSM_Send("1");
				//Debug_Send("A\r\n");
				WifiprocData(WprocBuff);
 8009b34:	4b07      	ldr	r3, [pc, #28]	; (8009b54 <WifirecData+0x264>)
 8009b36:	0018      	movs	r0, r3
 8009b38:	f000 f90a 	bl	8009d50 <WifiprocData>
				//GSM_Send("0x0D\r\n");
				//GSM_Send("2");
			}
		}
	//}
}
 8009b3c:	46c0      	nop			; (mov r8, r8)
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	200001f8 	.word	0x200001f8
 8009b48:	200001fc 	.word	0x200001fc
 8009b4c:	20000200 	.word	0x20000200
 8009b50:	20001a68 	.word	0x20001a68
 8009b54:	200022c8 	.word	0x200022c8
 8009b58:	00000514 	.word	0x00000514
 8009b5c:	20001a08 	.word	0x20001a08
 8009b60:	2000168c 	.word	0x2000168c
 8009b64:	200022c0 	.word	0x200022c0
 8009b68:	0800f778 	.word	0x0800f778
 8009b6c:	0800f788 	.word	0x0800f788
 8009b70:	0800f798 	.word	0x0800f798
 8009b74:	200000c4 	.word	0x200000c4
 8009b78:	0800f7a8 	.word	0x0800f7a8
 8009b7c:	20001f7c 	.word	0x20001f7c
 8009b80:	0800f7b8 	.word	0x0800f7b8
 8009b84:	0800f690 	.word	0x0800f690
 8009b88:	0800f7c0 	.word	0x0800f7c0
 8009b8c:	0800f7c8 	.word	0x0800f7c8
 8009b90:	0800f7d4 	.word	0x0800f7d4
 8009b94:	0800f7dc 	.word	0x0800f7dc

08009b98 <MQTT_ConnectF1>:

void MQTT_ConnectF1(){
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
	Debug_Send("Build connect msg\r\n");
 8009b9c:	4b21      	ldr	r3, [pc, #132]	; (8009c24 <MQTT_ConnectF1+0x8c>)
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f7ff fb76 	bl	8009290 <Debug_Send>
	temp1[0] = 0x10;
 8009ba4:	4b20      	ldr	r3, [pc, #128]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009ba6:	2210      	movs	r2, #16
 8009ba8:	701a      	strb	r2, [r3, #0]
	temp1[1] = 0x0E;
 8009baa:	4b1f      	ldr	r3, [pc, #124]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bac:	220e      	movs	r2, #14
 8009bae:	705a      	strb	r2, [r3, #1]
	temp1[2] = 0x00;
 8009bb0:	4b1d      	ldr	r3, [pc, #116]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	709a      	strb	r2, [r3, #2]
	temp1[3] = 0x04;
 8009bb6:	4b1c      	ldr	r3, [pc, #112]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bb8:	2204      	movs	r2, #4
 8009bba:	70da      	strb	r2, [r3, #3]
	temp1[4] = 'M';
 8009bbc:	4b1a      	ldr	r3, [pc, #104]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bbe:	224d      	movs	r2, #77	; 0x4d
 8009bc0:	711a      	strb	r2, [r3, #4]
	temp1[5] = 'Q';
 8009bc2:	4b19      	ldr	r3, [pc, #100]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bc4:	2251      	movs	r2, #81	; 0x51
 8009bc6:	715a      	strb	r2, [r3, #5]
	temp1[6] = 'T';
 8009bc8:	4b17      	ldr	r3, [pc, #92]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bca:	2254      	movs	r2, #84	; 0x54
 8009bcc:	719a      	strb	r2, [r3, #6]
	temp1[7] = 'T';
 8009bce:	4b16      	ldr	r3, [pc, #88]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bd0:	2254      	movs	r2, #84	; 0x54
 8009bd2:	71da      	strb	r2, [r3, #7]
	temp1[8] = 0x04;
 8009bd4:	4b14      	ldr	r3, [pc, #80]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bd6:	2204      	movs	r2, #4
 8009bd8:	721a      	strb	r2, [r3, #8]
	temp1[9] = 0x02;
 8009bda:	4b13      	ldr	r3, [pc, #76]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bdc:	2202      	movs	r2, #2
 8009bde:	725a      	strb	r2, [r3, #9]
	temp1[10] = 0x00;
 8009be0:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	729a      	strb	r2, [r3, #10]
	temp1[11] = 0x78;
 8009be6:	4b10      	ldr	r3, [pc, #64]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009be8:	2278      	movs	r2, #120	; 0x78
 8009bea:	72da      	strb	r2, [r3, #11]
	temp1[12] = 0x00;
 8009bec:	4b0e      	ldr	r3, [pc, #56]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bee:	2200      	movs	r2, #0
 8009bf0:	731a      	strb	r2, [r3, #12]
	temp1[13] = 0x02;
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	735a      	strb	r2, [r3, #13]

	temp1[14] = 'P';
 8009bf8:	4b0b      	ldr	r3, [pc, #44]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009bfa:	2250      	movs	r2, #80	; 0x50
 8009bfc:	739a      	strb	r2, [r3, #14]
	temp1[15] = '2';
 8009bfe:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <MQTT_ConnectF1+0x90>)
 8009c00:	2232      	movs	r2, #50	; 0x32
 8009c02:	73da      	strb	r2, [r3, #15]

	mqttInfo.length = 16;
 8009c04:	4b09      	ldr	r3, [pc, #36]	; (8009c2c <MQTT_ConnectF1+0x94>)
 8009c06:	2210      	movs	r2, #16
 8009c08:	609a      	str	r2, [r3, #8]
	WifiState = IP_Send;
 8009c0a:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <MQTT_ConnectF1+0x98>)
 8009c0c:	220e      	movs	r2, #14
 8009c0e:	701a      	strb	r2, [r3, #0]
	mqttFlag.connect = 1;
 8009c10:	4b08      	ldr	r3, [pc, #32]	; (8009c34 <MQTT_ConnectF1+0x9c>)
 8009c12:	2201      	movs	r2, #1
 8009c14:	70da      	strb	r2, [r3, #3]
	mqttFlag.send = 1;
 8009c16:	4b07      	ldr	r3, [pc, #28]	; (8009c34 <MQTT_ConnectF1+0x9c>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	711a      	strb	r2, [r3, #4]
	//GSM_Send_Bin(temp1, 16);
}
 8009c1c:	46c0      	nop			; (mov r8, r8)
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	46c0      	nop			; (mov r8, r8)
 8009c24:	0800f7e8 	.word	0x0800f7e8
 8009c28:	20002000 	.word	0x20002000
 8009c2c:	20001a08 	.word	0x20001a08
 8009c30:	200000c4 	.word	0x200000c4
 8009c34:	200022c0 	.word	0x200022c0

08009c38 <MQTT_SuscribeF1>:

void MQTT_SuscribeF1(){
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	af00      	add	r7, sp, #0
	Debug_Send("Build subscribe msg\r\n");
 8009c3c:	4b1c      	ldr	r3, [pc, #112]	; (8009cb0 <MQTT_SuscribeF1+0x78>)
 8009c3e:	0018      	movs	r0, r3
 8009c40:	f7ff fb26 	bl	8009290 <Debug_Send>
	temp1[0] = 0x82;
 8009c44:	4b1b      	ldr	r3, [pc, #108]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c46:	2282      	movs	r2, #130	; 0x82
 8009c48:	701a      	strb	r2, [r3, #0]
	temp1[1] = 0x0A;
 8009c4a:	4b1a      	ldr	r3, [pc, #104]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c4c:	220a      	movs	r2, #10
 8009c4e:	705a      	strb	r2, [r3, #1]
	temp1[2] = 0x00;
 8009c50:	4b18      	ldr	r3, [pc, #96]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	709a      	strb	r2, [r3, #2]
	temp1[3] = 0x00;
 8009c56:	4b17      	ldr	r3, [pc, #92]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	70da      	strb	r2, [r3, #3]
	temp1[4] = 0x00;
 8009c5c:	4b15      	ldr	r3, [pc, #84]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	711a      	strb	r2, [r3, #4]
	temp1[5] = 0x05;
 8009c62:	4b14      	ldr	r3, [pc, #80]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c64:	2205      	movs	r2, #5
 8009c66:	715a      	strb	r2, [r3, #5]
	temp1[6] = 'h';
 8009c68:	4b12      	ldr	r3, [pc, #72]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c6a:	2268      	movs	r2, #104	; 0x68
 8009c6c:	719a      	strb	r2, [r3, #6]
	temp1[7] = 'o';
 8009c6e:	4b11      	ldr	r3, [pc, #68]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c70:	226f      	movs	r2, #111	; 0x6f
 8009c72:	71da      	strb	r2, [r3, #7]
	temp1[8] = 'u';
 8009c74:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c76:	2275      	movs	r2, #117	; 0x75
 8009c78:	721a      	strb	r2, [r3, #8]
	temp1[9] = 's';
 8009c7a:	4b0e      	ldr	r3, [pc, #56]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c7c:	2273      	movs	r2, #115	; 0x73
 8009c7e:	725a      	strb	r2, [r3, #9]
	temp1[10] = 'e';
 8009c80:	4b0c      	ldr	r3, [pc, #48]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c82:	2265      	movs	r2, #101	; 0x65
 8009c84:	729a      	strb	r2, [r3, #10]
	temp1[11] = 0x00;
 8009c86:	4b0b      	ldr	r3, [pc, #44]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	72da      	strb	r2, [r3, #11]
	temp1[12] = 0x00;
 8009c8c:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <MQTT_SuscribeF1+0x7c>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	731a      	strb	r2, [r3, #12]

	mqttInfo.length = 13;
 8009c92:	4b09      	ldr	r3, [pc, #36]	; (8009cb8 <MQTT_SuscribeF1+0x80>)
 8009c94:	220d      	movs	r2, #13
 8009c96:	609a      	str	r2, [r3, #8]
	WifiState = IP_Send;
 8009c98:	4b08      	ldr	r3, [pc, #32]	; (8009cbc <MQTT_SuscribeF1+0x84>)
 8009c9a:	220e      	movs	r2, #14
 8009c9c:	701a      	strb	r2, [r3, #0]
	mqttFlag.subscribe = 1;
 8009c9e:	4b08      	ldr	r3, [pc, #32]	; (8009cc0 <MQTT_SuscribeF1+0x88>)
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	705a      	strb	r2, [r3, #1]
	mqttFlag.send = 1;
 8009ca4:	4b06      	ldr	r3, [pc, #24]	; (8009cc0 <MQTT_SuscribeF1+0x88>)
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	711a      	strb	r2, [r3, #4]
	//GSM_Send_Bin(tempGPRS, 13);
}
 8009caa:	46c0      	nop			; (mov r8, r8)
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	0800f7fc 	.word	0x0800f7fc
 8009cb4:	20002000 	.word	0x20002000
 8009cb8:	20001a08 	.word	0x20001a08
 8009cbc:	200000c4 	.word	0x200000c4
 8009cc0:	200022c0 	.word	0x200022c0

08009cc4 <MQTT_Publish_F1>:

void MQTT_Publish_F1(){
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	af00      	add	r7, sp, #0
	Debug_Send("Build publish msg\r\n");
 8009cc8:	4b1c      	ldr	r3, [pc, #112]	; (8009d3c <MQTT_Publish_F1+0x78>)
 8009cca:	0018      	movs	r0, r3
 8009ccc:	f7ff fae0 	bl	8009290 <Debug_Send>
	temp1[0] = 0x30;
 8009cd0:	4b1b      	ldr	r3, [pc, #108]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009cd2:	2230      	movs	r2, #48	; 0x30
 8009cd4:	701a      	strb	r2, [r3, #0]
	temp1[1] = 0x0B;
 8009cd6:	4b1a      	ldr	r3, [pc, #104]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009cd8:	220b      	movs	r2, #11
 8009cda:	705a      	strb	r2, [r3, #1]
	temp1[2] = 0x00;
 8009cdc:	4b18      	ldr	r3, [pc, #96]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	709a      	strb	r2, [r3, #2]
	temp1[3] = 0x05;
 8009ce2:	4b17      	ldr	r3, [pc, #92]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009ce4:	2205      	movs	r2, #5
 8009ce6:	70da      	strb	r2, [r3, #3]
	temp1[4] = 'h';
 8009ce8:	4b15      	ldr	r3, [pc, #84]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009cea:	2268      	movs	r2, #104	; 0x68
 8009cec:	711a      	strb	r2, [r3, #4]
	temp1[5] = 'o';
 8009cee:	4b14      	ldr	r3, [pc, #80]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009cf0:	226f      	movs	r2, #111	; 0x6f
 8009cf2:	715a      	strb	r2, [r3, #5]
	temp1[6] = 'u';
 8009cf4:	4b12      	ldr	r3, [pc, #72]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009cf6:	2275      	movs	r2, #117	; 0x75
 8009cf8:	719a      	strb	r2, [r3, #6]
	temp1[7] = 's';
 8009cfa:	4b11      	ldr	r3, [pc, #68]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009cfc:	2273      	movs	r2, #115	; 0x73
 8009cfe:	71da      	strb	r2, [r3, #7]
	temp1[8] = 'e';
 8009d00:	4b0f      	ldr	r3, [pc, #60]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009d02:	2265      	movs	r2, #101	; 0x65
 8009d04:	721a      	strb	r2, [r3, #8]
	temp1[9] = 'o';
 8009d06:	4b0e      	ldr	r3, [pc, #56]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009d08:	226f      	movs	r2, #111	; 0x6f
 8009d0a:	725a      	strb	r2, [r3, #9]
	temp1[10] = 'f';
 8009d0c:	4b0c      	ldr	r3, [pc, #48]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009d0e:	2266      	movs	r2, #102	; 0x66
 8009d10:	729a      	strb	r2, [r3, #10]
	temp1[11] = 'f';
 8009d12:	4b0b      	ldr	r3, [pc, #44]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009d14:	2266      	movs	r2, #102	; 0x66
 8009d16:	72da      	strb	r2, [r3, #11]
	temp1[12] = '1';
 8009d18:	4b09      	ldr	r3, [pc, #36]	; (8009d40 <MQTT_Publish_F1+0x7c>)
 8009d1a:	2231      	movs	r2, #49	; 0x31
 8009d1c:	731a      	strb	r2, [r3, #12]

	mqttInfo.length = 13;
 8009d1e:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <MQTT_Publish_F1+0x80>)
 8009d20:	220d      	movs	r2, #13
 8009d22:	609a      	str	r2, [r3, #8]
	WifiState = IP_Send;
 8009d24:	4b08      	ldr	r3, [pc, #32]	; (8009d48 <MQTT_Publish_F1+0x84>)
 8009d26:	220e      	movs	r2, #14
 8009d28:	701a      	strb	r2, [r3, #0]
	mqttFlag.publish = 1;
 8009d2a:	4b08      	ldr	r3, [pc, #32]	; (8009d4c <MQTT_Publish_F1+0x88>)
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	719a      	strb	r2, [r3, #6]
	mqttFlag.send = 1;
 8009d30:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <MQTT_Publish_F1+0x88>)
 8009d32:	2201      	movs	r2, #1
 8009d34:	711a      	strb	r2, [r3, #4]
	//GSM_Send_Bin(temp1, 14);
}
 8009d36:	46c0      	nop			; (mov r8, r8)
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	0800f814 	.word	0x0800f814
 8009d40:	20002000 	.word	0x20002000
 8009d44:	20001a08 	.word	0x20001a08
 8009d48:	200000c4 	.word	0x200000c4
 8009d4c:	200022c0 	.word	0x200022c0

08009d50 <WifiprocData>:

void SendData(char * data){

}

void WifiprocData(char* data){
 8009d50:	b590      	push	{r4, r7, lr}
 8009d52:	b08f      	sub	sp, #60	; 0x3c
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
	//Debug_Send("Process Wifi msg\r\n");
	strcpy(temp,"Rx:");
 8009d58:	4a76      	ldr	r2, [pc, #472]	; (8009f34 <WifiprocData+0x1e4>)
 8009d5a:	4b77      	ldr	r3, [pc, #476]	; (8009f38 <WifiprocData+0x1e8>)
 8009d5c:	0010      	movs	r0, r2
 8009d5e:	0019      	movs	r1, r3
 8009d60:	2304      	movs	r3, #4
 8009d62:	001a      	movs	r2, r3
 8009d64:	f004 fffc 	bl	800ed60 <memcpy>
	strcat(temp,data);
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	4b72      	ldr	r3, [pc, #456]	; (8009f34 <WifiprocData+0x1e4>)
 8009d6c:	0011      	movs	r1, r2
 8009d6e:	0018      	movs	r0, r3
 8009d70:	f005 f828 	bl	800edc4 <strcat>
	//strcat(temp,"\r\n");
	Debug_Send(temp);
 8009d74:	4b6f      	ldr	r3, [pc, #444]	; (8009f34 <WifiprocData+0x1e4>)
 8009d76:	0018      	movs	r0, r3
 8009d78:	f7ff fa8a 	bl	8009290 <Debug_Send>

	myStrSection(WprocBuff, temp,30,',',1);
 8009d7c:	496d      	ldr	r1, [pc, #436]	; (8009f34 <WifiprocData+0x1e4>)
 8009d7e:	486f      	ldr	r0, [pc, #444]	; (8009f3c <WifiprocData+0x1ec>)
 8009d80:	2301      	movs	r3, #1
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	232c      	movs	r3, #44	; 0x2c
 8009d86:	221e      	movs	r2, #30
 8009d88:	f000 fd57 	bl	800a83a <myStrSection>
	if(strncmp((char*)temp,"CONNECT",7)==0){
 8009d8c:	496c      	ldr	r1, [pc, #432]	; (8009f40 <WifiprocData+0x1f0>)
 8009d8e:	4b69      	ldr	r3, [pc, #420]	; (8009f34 <WifiprocData+0x1e4>)
 8009d90:	2207      	movs	r2, #7
 8009d92:	0018      	movs	r0, r3
 8009d94:	f005 f82b 	bl	800edee <strncmp>
 8009d98:	1e03      	subs	r3, r0, #0
 8009d9a:	d117      	bne.n	8009dcc <WifiprocData+0x7c>
		myStrSection(WprocBuff, ConnID,30,',',0);
 8009d9c:	4969      	ldr	r1, [pc, #420]	; (8009f44 <WifiprocData+0x1f4>)
 8009d9e:	4867      	ldr	r0, [pc, #412]	; (8009f3c <WifiprocData+0x1ec>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	232c      	movs	r3, #44	; 0x2c
 8009da6:	221e      	movs	r2, #30
 8009da8:	f000 fd47 	bl	800a83a <myStrSection>
		sprintf(temp, "Conn %s connected\r\n",ConnID);
 8009dac:	4a65      	ldr	r2, [pc, #404]	; (8009f44 <WifiprocData+0x1f4>)
 8009dae:	4966      	ldr	r1, [pc, #408]	; (8009f48 <WifiprocData+0x1f8>)
 8009db0:	4b60      	ldr	r3, [pc, #384]	; (8009f34 <WifiprocData+0x1e4>)
 8009db2:	0018      	movs	r0, r3
 8009db4:	f004 ffe6 	bl	800ed84 <siprintf>
		Debug_Send(temp);
 8009db8:	4b5e      	ldr	r3, [pc, #376]	; (8009f34 <WifiprocData+0x1e4>)
 8009dba:	0018      	movs	r0, r3
 8009dbc:	f7ff fa68 	bl	8009290 <Debug_Send>
		if (wifiFlag.server == 0){
 8009dc0:	4b62      	ldr	r3, [pc, #392]	; (8009f4c <WifiprocData+0x1fc>)
 8009dc2:	791b      	ldrb	r3, [r3, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <WifiprocData+0x7c>
			MQTT_ConnectF1();
 8009dc8:	f7ff fee6 	bl	8009b98 <MQTT_ConnectF1>
		}
	}
	//GSM_Send(WprocBuff);
	//GSM_Send("\r\n");
	if(strncmp((char*)WprocBuff,"+CREG: 0,1",10)==0)HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009dcc:	4960      	ldr	r1, [pc, #384]	; (8009f50 <WifiprocData+0x200>)
 8009dce:	4b5b      	ldr	r3, [pc, #364]	; (8009f3c <WifiprocData+0x1ec>)
 8009dd0:	220a      	movs	r2, #10
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	f005 f80b 	bl	800edee <strncmp>
 8009dd8:	1e03      	subs	r3, r0, #0
 8009dda:	d106      	bne.n	8009dea <WifiprocData+0x9a>
 8009ddc:	2380      	movs	r3, #128	; 0x80
 8009dde:	01db      	lsls	r3, r3, #7
 8009de0:	4a5c      	ldr	r2, [pc, #368]	; (8009f54 <WifiprocData+0x204>)
 8009de2:	0019      	movs	r1, r3
 8009de4:	0010      	movs	r0, r2
 8009de6:	f001 fc46 	bl	800b676 <HAL_GPIO_TogglePin>
	if(strncmp((char*)WprocBuff,"OK",2)==0) WifiOK();
 8009dea:	495b      	ldr	r1, [pc, #364]	; (8009f58 <WifiprocData+0x208>)
 8009dec:	4b53      	ldr	r3, [pc, #332]	; (8009f3c <WifiprocData+0x1ec>)
 8009dee:	2202      	movs	r2, #2
 8009df0:	0018      	movs	r0, r3
 8009df2:	f004 fffc 	bl	800edee <strncmp>
 8009df6:	1e03      	subs	r3, r0, #0
 8009df8:	d101      	bne.n	8009dfe <WifiprocData+0xae>
 8009dfa:	f000 fa55 	bl	800a2a8 <WifiOK>
	//if(strncmp((char*)WprocBuff,"Ai",2)==0) WifiState = Wifi_version;
	//if(strncmp((char*)WprocBuff,"No AP",5)==0) WifiState = Connect;

	//if(strncmp((char*)WprocBuff,"WIFI CONNECTED",14)==0) WifiState = Connect;	//connected to AP
	if(strncmp((char*)WprocBuff,"WIFI GOT IP",10)==0) WifiState = GetIP;		//connected to AP
 8009dfe:	4957      	ldr	r1, [pc, #348]	; (8009f5c <WifiprocData+0x20c>)
 8009e00:	4b4e      	ldr	r3, [pc, #312]	; (8009f3c <WifiprocData+0x1ec>)
 8009e02:	220a      	movs	r2, #10
 8009e04:	0018      	movs	r0, r3
 8009e06:	f004 fff2 	bl	800edee <strncmp>
 8009e0a:	1e03      	subs	r3, r0, #0
 8009e0c:	d102      	bne.n	8009e14 <WifiprocData+0xc4>
 8009e0e:	4b54      	ldr	r3, [pc, #336]	; (8009f60 <WifiprocData+0x210>)
 8009e10:	2204      	movs	r2, #4
 8009e12:	701a      	strb	r2, [r3, #0]
	if(strncmp((char*)WprocBuff,"no change",9)==0) WifiState = 0;		//server running
 8009e14:	4953      	ldr	r1, [pc, #332]	; (8009f64 <WifiprocData+0x214>)
 8009e16:	4b49      	ldr	r3, [pc, #292]	; (8009f3c <WifiprocData+0x1ec>)
 8009e18:	2209      	movs	r2, #9
 8009e1a:	0018      	movs	r0, r3
 8009e1c:	f004 ffe7 	bl	800edee <strncmp>
 8009e20:	1e03      	subs	r3, r0, #0
 8009e22:	d102      	bne.n	8009e2a <WifiprocData+0xda>
 8009e24:	4b4e      	ldr	r3, [pc, #312]	; (8009f60 <WifiprocData+0x210>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	701a      	strb	r2, [r3, #0]

	if(strncmp((char*)WprocBuff,"+CWJAP:",7)==0){
 8009e2a:	494f      	ldr	r1, [pc, #316]	; (8009f68 <WifiprocData+0x218>)
 8009e2c:	4b43      	ldr	r3, [pc, #268]	; (8009f3c <WifiprocData+0x1ec>)
 8009e2e:	2207      	movs	r2, #7
 8009e30:	0018      	movs	r0, r3
 8009e32:	f004 ffdc 	bl	800edee <strncmp>
 8009e36:	1e03      	subs	r3, r0, #0
 8009e38:	d112      	bne.n	8009e60 <WifiprocData+0x110>
		myStrSection(WprocBuff, temp,30,'"',1);
 8009e3a:	493e      	ldr	r1, [pc, #248]	; (8009f34 <WifiprocData+0x1e4>)
 8009e3c:	483f      	ldr	r0, [pc, #252]	; (8009f3c <WifiprocData+0x1ec>)
 8009e3e:	2301      	movs	r3, #1
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	2322      	movs	r3, #34	; 0x22
 8009e44:	221e      	movs	r2, #30
 8009e46:	f000 fcf8 	bl	800a83a <myStrSection>
		if(strncmp(temp,ssid,5)==0) WifiState = GetIP;
 8009e4a:	4948      	ldr	r1, [pc, #288]	; (8009f6c <WifiprocData+0x21c>)
 8009e4c:	4b39      	ldr	r3, [pc, #228]	; (8009f34 <WifiprocData+0x1e4>)
 8009e4e:	2205      	movs	r2, #5
 8009e50:	0018      	movs	r0, r3
 8009e52:	f004 ffcc 	bl	800edee <strncmp>
 8009e56:	1e03      	subs	r3, r0, #0
 8009e58:	d102      	bne.n	8009e60 <WifiprocData+0x110>
 8009e5a:	4b41      	ldr	r3, [pc, #260]	; (8009f60 <WifiprocData+0x210>)
 8009e5c:	2204      	movs	r2, #4
 8009e5e:	701a      	strb	r2, [r3, #0]

	}
	if(strncmp((char*)WprocBuff,"+CIFSR:STAIP",12)==0){
 8009e60:	4943      	ldr	r1, [pc, #268]	; (8009f70 <WifiprocData+0x220>)
 8009e62:	4b36      	ldr	r3, [pc, #216]	; (8009f3c <WifiprocData+0x1ec>)
 8009e64:	220c      	movs	r2, #12
 8009e66:	0018      	movs	r0, r3
 8009e68:	f004 ffc1 	bl	800edee <strncmp>
 8009e6c:	1e03      	subs	r3, r0, #0
 8009e6e:	d10d      	bne.n	8009e8c <WifiprocData+0x13c>
		//GSM_Send(WprocBuff);
		//GSM_Send("\r\n");
		myStrSection(WprocBuff, IP1,30,'"',1);
 8009e70:	4940      	ldr	r1, [pc, #256]	; (8009f74 <WifiprocData+0x224>)
 8009e72:	4832      	ldr	r0, [pc, #200]	; (8009f3c <WifiprocData+0x1ec>)
 8009e74:	2301      	movs	r3, #1
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	2322      	movs	r3, #34	; 0x22
 8009e7a:	221e      	movs	r2, #30
 8009e7c:	f000 fcdd 	bl	800a83a <myStrSection>
		wifiFlag.print = 1;
 8009e80:	4b32      	ldr	r3, [pc, #200]	; (8009f4c <WifiprocData+0x1fc>)
 8009e82:	2201      	movs	r2, #1
 8009e84:	70da      	strb	r2, [r3, #3]
		if (wifiFlag.ip == 3){
			GSM_Send("Copy4\r\n");
			strcpy(IP4,WprocBuff);
			//
		}*/
		wifiFlag.ip = 1;
 8009e86:	4b31      	ldr	r3, [pc, #196]	; (8009f4c <WifiprocData+0x1fc>)
 8009e88:	2201      	movs	r2, #1
 8009e8a:	709a      	strb	r2, [r3, #2]
	}
	if(strncmp((char*)WprocBuff,"+IPD",3)==0){
 8009e8c:	493a      	ldr	r1, [pc, #232]	; (8009f78 <WifiprocData+0x228>)
 8009e8e:	4b2b      	ldr	r3, [pc, #172]	; (8009f3c <WifiprocData+0x1ec>)
 8009e90:	2203      	movs	r2, #3
 8009e92:	0018      	movs	r0, r3
 8009e94:	f004 ffab 	bl	800edee <strncmp>
 8009e98:	1e03      	subs	r3, r0, #0
 8009e9a:	d000      	beq.n	8009e9e <WifiprocData+0x14e>
 8009e9c:	e148      	b.n	800a130 <WifiprocData+0x3e0>
		Debug_Send("Got IPD\r\n");
 8009e9e:	4b37      	ldr	r3, [pc, #220]	; (8009f7c <WifiprocData+0x22c>)
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	f7ff f9f5 	bl	8009290 <Debug_Send>
		char len[10];
		int ln1;
		int start = 9;
 8009ea6:	2309      	movs	r3, #9
 8009ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
		int counter;
		myStrSection(WprocBuff, len,30,',',2);		//returned length
 8009eaa:	2418      	movs	r4, #24
 8009eac:	1939      	adds	r1, r7, r4
 8009eae:	4823      	ldr	r0, [pc, #140]	; (8009f3c <WifiprocData+0x1ec>)
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	232c      	movs	r3, #44	; 0x2c
 8009eb6:	221e      	movs	r2, #30
 8009eb8:	f000 fcbf 	bl	800a83a <myStrSection>
		if (len[1] == ':') len[1] = 0;
 8009ebc:	0022      	movs	r2, r4
 8009ebe:	18bb      	adds	r3, r7, r2
 8009ec0:	785b      	ldrb	r3, [r3, #1]
 8009ec2:	2b3a      	cmp	r3, #58	; 0x3a
 8009ec4:	d103      	bne.n	8009ece <WifiprocData+0x17e>
 8009ec6:	18bb      	adds	r3, r7, r2
 8009ec8:	2200      	movs	r2, #0
 8009eca:	705a      	strb	r2, [r3, #1]
 8009ecc:	e005      	b.n	8009eda <WifiprocData+0x18a>
		else{
			len[2] = 0;
 8009ece:	2318      	movs	r3, #24
 8009ed0:	18fb      	adds	r3, r7, r3
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	709a      	strb	r2, [r3, #2]
			start = 10;
 8009ed6:	230a      	movs	r3, #10
 8009ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		//mqttInfo.length = atoi(temp);
		ln1 =  myStrLong(len,10);
 8009eda:	2318      	movs	r3, #24
 8009edc:	18fb      	adds	r3, r7, r3
 8009ede:	210a      	movs	r1, #10
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	f000 fe37 	bl	800ab54 <myStrLong>
 8009ee6:	0003      	movs	r3, r0
 8009ee8:	627b      	str	r3, [r7, #36]	; 0x24
		if(mqttFlag.active == 0) myStrSection(WprocBuff, temp,30,':',1);
 8009eea:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <WifiprocData+0x230>)
 8009eec:	789b      	ldrb	r3, [r3, #2]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d108      	bne.n	8009f04 <WifiprocData+0x1b4>
 8009ef2:	4910      	ldr	r1, [pc, #64]	; (8009f34 <WifiprocData+0x1e4>)
 8009ef4:	4811      	ldr	r0, [pc, #68]	; (8009f3c <WifiprocData+0x1ec>)
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	233a      	movs	r3, #58	; 0x3a
 8009efc:	221e      	movs	r2, #30
 8009efe:	f000 fc9c 	bl	800a83a <myStrSection>
 8009f02:	e00c      	b.n	8009f1e <WifiprocData+0x1ce>
		else{
			byteCopy(WprocBuff, temp, start, start + ln1);
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	b2dc      	uxtb	r4, r3
 8009f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	18d3      	adds	r3, r2, r3
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	4907      	ldr	r1, [pc, #28]	; (8009f34 <WifiprocData+0x1e4>)
 8009f16:	4809      	ldr	r0, [pc, #36]	; (8009f3c <WifiprocData+0x1ec>)
 8009f18:	0022      	movs	r2, r4
 8009f1a:	f000 f967 	bl	800a1ec <byteCopy>
		}
		myStrSection(WprocBuff, ConnID,30,',',1);
 8009f1e:	4909      	ldr	r1, [pc, #36]	; (8009f44 <WifiprocData+0x1f4>)
 8009f20:	4806      	ldr	r0, [pc, #24]	; (8009f3c <WifiprocData+0x1ec>)
 8009f22:	2301      	movs	r3, #1
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	232c      	movs	r3, #44	; 0x2c
 8009f28:	221e      	movs	r2, #30
 8009f2a:	f000 fc86 	bl	800a83a <myStrSection>
		//sprintf(temp, "%s,%i,%i\r\n",WprocBuff, WrecBuffPointerWrite, WrecBuffPointerRead);
		//GSM_Send(temp);
		//WifiState = IP_Send;
		char cnt[10];
		for (counter = 0; counter < ln1; counter++){
 8009f2e:	2300      	movs	r3, #0
 8009f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f32:	e04b      	b.n	8009fcc <WifiprocData+0x27c>
 8009f34:	20001f7c 	.word	0x20001f7c
 8009f38:	0800f828 	.word	0x0800f828
 8009f3c:	200022c8 	.word	0x200022c8
 8009f40:	0800f82c 	.word	0x0800f82c
 8009f44:	200022bc 	.word	0x200022bc
 8009f48:	0800f834 	.word	0x0800f834
 8009f4c:	20002390 	.word	0x20002390
 8009f50:	0800f848 	.word	0x0800f848
 8009f54:	48000800 	.word	0x48000800
 8009f58:	0800f854 	.word	0x0800f854
 8009f5c:	0800f858 	.word	0x0800f858
 8009f60:	200000c4 	.word	0x200000c4
 8009f64:	0800f864 	.word	0x0800f864
 8009f68:	0800f870 	.word	0x0800f870
 8009f6c:	200000c8 	.word	0x200000c8
 8009f70:	0800f878 	.word	0x0800f878
 8009f74:	200019a4 	.word	0x200019a4
 8009f78:	0800f888 	.word	0x0800f888
 8009f7c:	0800f890 	.word	0x0800f890
 8009f80:	200022c0 	.word	0x200022c0
			myLongStr(counter,cnt,10,10);
 8009f84:	240c      	movs	r4, #12
 8009f86:	1939      	adds	r1, r7, r4
 8009f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f8a:	230a      	movs	r3, #10
 8009f8c:	220a      	movs	r2, #10
 8009f8e:	f000 fce9 	bl	800a964 <myLongStr>

			myLongStr(temp[counter],dummy,10,10);
 8009f92:	4a7c      	ldr	r2, [pc, #496]	; (800a184 <WifiprocData+0x434>)
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	18d3      	adds	r3, r2, r3
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	497a      	ldr	r1, [pc, #488]	; (800a188 <WifiprocData+0x438>)
 8009f9e:	230a      	movs	r3, #10
 8009fa0:	220a      	movs	r2, #10
 8009fa2:	f000 fcdf 	bl	800a964 <myLongStr>
			Debug_Send(cnt);
 8009fa6:	193b      	adds	r3, r7, r4
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f7ff f971 	bl	8009290 <Debug_Send>
			Debug_Send(":");
 8009fae:	4b77      	ldr	r3, [pc, #476]	; (800a18c <WifiprocData+0x43c>)
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	f7ff f96d 	bl	8009290 <Debug_Send>
			Debug_Send(dummy);
 8009fb6:	4b74      	ldr	r3, [pc, #464]	; (800a188 <WifiprocData+0x438>)
 8009fb8:	0018      	movs	r0, r3
 8009fba:	f7ff f969 	bl	8009290 <Debug_Send>
			//Debug_Send("\r\n");
			Debug_Send(" ");
 8009fbe:	4b74      	ldr	r3, [pc, #464]	; (800a190 <WifiprocData+0x440>)
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f7ff f965 	bl	8009290 <Debug_Send>
		for (counter = 0; counter < ln1; counter++){
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	3301      	adds	r3, #1
 8009fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	dbd7      	blt.n	8009f84 <WifiprocData+0x234>
		}

		if(temp[0] == 0x30){
 8009fd4:	4b6b      	ldr	r3, [pc, #428]	; (800a184 <WifiprocData+0x434>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b30      	cmp	r3, #48	; 0x30
 8009fda:	d103      	bne.n	8009fe4 <WifiprocData+0x294>
			Debug_Send("Got publ\r\n");
 8009fdc:	4b6d      	ldr	r3, [pc, #436]	; (800a194 <WifiprocData+0x444>)
 8009fde:	0018      	movs	r0, r3
 8009fe0:	f7ff f956 	bl	8009290 <Debug_Send>
			//WifiState =  Wifi_AT;
		}
		if(temp[0] == 0x31){
 8009fe4:	4b67      	ldr	r3, [pc, #412]	; (800a184 <WifiprocData+0x434>)
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2b31      	cmp	r3, #49	; 0x31
 8009fea:	d103      	bne.n	8009ff4 <WifiprocData+0x2a4>
			Debug_Send("Got publ r\r\n");
 8009fec:	4b6a      	ldr	r3, [pc, #424]	; (800a198 <WifiprocData+0x448>)
 8009fee:	0018      	movs	r0, r3
 8009ff0:	f7ff f94e 	bl	8009290 <Debug_Send>
			//WifiState =  Wifi_AT;
		}
		mqttInfo.packetLength = temp[1] ;
 8009ff4:	4b63      	ldr	r3, [pc, #396]	; (800a184 <WifiprocData+0x434>)
 8009ff6:	785b      	ldrb	r3, [r3, #1]
 8009ff8:	001a      	movs	r2, r3
 8009ffa:	4b68      	ldr	r3, [pc, #416]	; (800a19c <WifiprocData+0x44c>)
 8009ffc:	60da      	str	r2, [r3, #12]
		myLongStr(mqttInfo.packetLength,dummy,10,10);
 8009ffe:	4b67      	ldr	r3, [pc, #412]	; (800a19c <WifiprocData+0x44c>)
 800a000:	68d8      	ldr	r0, [r3, #12]
 800a002:	4961      	ldr	r1, [pc, #388]	; (800a188 <WifiprocData+0x438>)
 800a004:	230a      	movs	r3, #10
 800a006:	220a      	movs	r2, #10
 800a008:	f000 fcac 	bl	800a964 <myLongStr>
		Debug_Send("packet size ");
 800a00c:	4b64      	ldr	r3, [pc, #400]	; (800a1a0 <WifiprocData+0x450>)
 800a00e:	0018      	movs	r0, r3
 800a010:	f7ff f93e 	bl	8009290 <Debug_Send>
		Debug_Send(dummy);
 800a014:	4b5c      	ldr	r3, [pc, #368]	; (800a188 <WifiprocData+0x438>)
 800a016:	0018      	movs	r0, r3
 800a018:	f7ff f93a 	bl	8009290 <Debug_Send>
		Debug_Send("\r\n");
 800a01c:	4b61      	ldr	r3, [pc, #388]	; (800a1a4 <WifiprocData+0x454>)
 800a01e:	0018      	movs	r0, r3
 800a020:	f7ff f936 	bl	8009290 <Debug_Send>
		mqttInfo.topicLength = temp[3];
 800a024:	4b57      	ldr	r3, [pc, #348]	; (800a184 <WifiprocData+0x434>)
 800a026:	78db      	ldrb	r3, [r3, #3]
 800a028:	001a      	movs	r2, r3
 800a02a:	4b5c      	ldr	r3, [pc, #368]	; (800a19c <WifiprocData+0x44c>)
 800a02c:	611a      	str	r2, [r3, #16]
		myLongStr(mqttInfo.topicLength,dummy,10,10);
 800a02e:	4b5b      	ldr	r3, [pc, #364]	; (800a19c <WifiprocData+0x44c>)
 800a030:	6918      	ldr	r0, [r3, #16]
 800a032:	4955      	ldr	r1, [pc, #340]	; (800a188 <WifiprocData+0x438>)
 800a034:	230a      	movs	r3, #10
 800a036:	220a      	movs	r2, #10
 800a038:	f000 fc94 	bl	800a964 <myLongStr>
		Debug_Send("topic size ");
 800a03c:	4b5a      	ldr	r3, [pc, #360]	; (800a1a8 <WifiprocData+0x458>)
 800a03e:	0018      	movs	r0, r3
 800a040:	f7ff f926 	bl	8009290 <Debug_Send>
		Debug_Send(dummy);
 800a044:	4b50      	ldr	r3, [pc, #320]	; (800a188 <WifiprocData+0x438>)
 800a046:	0018      	movs	r0, r3
 800a048:	f7ff f922 	bl	8009290 <Debug_Send>
		Debug_Send("\r\n");
 800a04c:	4b55      	ldr	r3, [pc, #340]	; (800a1a4 <WifiprocData+0x454>)
 800a04e:	0018      	movs	r0, r3
 800a050:	f7ff f91e 	bl	8009290 <Debug_Send>
		mqttInfo.packet[0] = 0;
 800a054:	4b51      	ldr	r3, [pc, #324]	; (800a19c <WifiprocData+0x44c>)
 800a056:	2200      	movs	r2, #0
 800a058:	751a      	strb	r2, [r3, #20]
		mqttInfo.topic[0] = 0;
 800a05a:	4b50      	ldr	r3, [pc, #320]	; (800a19c <WifiprocData+0x44c>)
 800a05c:	2232      	movs	r2, #50	; 0x32
 800a05e:	2100      	movs	r1, #0
 800a060:	5499      	strb	r1, [r3, r2]
		mqttInfo.data[0] = 0;
 800a062:	4b4e      	ldr	r3, [pc, #312]	; (800a19c <WifiprocData+0x44c>)
 800a064:	2246      	movs	r2, #70	; 0x46
 800a066:	2100      	movs	r1, #0
 800a068:	5499      	strb	r1, [r3, r2]
		if (mqttFlag.subscribe == 2){
 800a06a:	4b50      	ldr	r3, [pc, #320]	; (800a1ac <WifiprocData+0x45c>)
 800a06c:	785b      	ldrb	r3, [r3, #1]
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d121      	bne.n	800a0b6 <WifiprocData+0x366>
			byteCopy(temp, mqttInfo.packet, 4, 1 + mqttInfo.packetLength);
 800a072:	4b4a      	ldr	r3, [pc, #296]	; (800a19c <WifiprocData+0x44c>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	3301      	adds	r3, #1
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	494c      	ldr	r1, [pc, #304]	; (800a1b0 <WifiprocData+0x460>)
 800a07e:	4841      	ldr	r0, [pc, #260]	; (800a184 <WifiprocData+0x434>)
 800a080:	2204      	movs	r2, #4
 800a082:	f000 f8b3 	bl	800a1ec <byteCopy>
			byteCopy(temp, mqttInfo.topic, 4, mqttInfo.topicLength + 3);
 800a086:	4b45      	ldr	r3, [pc, #276]	; (800a19c <WifiprocData+0x44c>)
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	3303      	adds	r3, #3
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	4948      	ldr	r1, [pc, #288]	; (800a1b4 <WifiprocData+0x464>)
 800a092:	483c      	ldr	r0, [pc, #240]	; (800a184 <WifiprocData+0x434>)
 800a094:	2204      	movs	r2, #4
 800a096:	f000 f8a9 	bl	800a1ec <byteCopy>
			byteCopy(temp, mqttInfo.data, 4 + mqttInfo.topicLength, 1 + mqttInfo.packetLength);
 800a09a:	4b40      	ldr	r3, [pc, #256]	; (800a19c <WifiprocData+0x44c>)
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	4b3d      	ldr	r3, [pc, #244]	; (800a19c <WifiprocData+0x44c>)
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	4942      	ldr	r1, [pc, #264]	; (800a1b8 <WifiprocData+0x468>)
 800a0b0:	4834      	ldr	r0, [pc, #208]	; (800a184 <WifiprocData+0x434>)
 800a0b2:	f000 f89b 	bl	800a1ec <byteCopy>
		}
		/**/
		Debug_Send(mqttInfo.packet);
 800a0b6:	4b3e      	ldr	r3, [pc, #248]	; (800a1b0 <WifiprocData+0x460>)
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	f7ff f8e9 	bl	8009290 <Debug_Send>
		Debug_Send(" - ");
 800a0be:	4b3f      	ldr	r3, [pc, #252]	; (800a1bc <WifiprocData+0x46c>)
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7ff f8e5 	bl	8009290 <Debug_Send>
		Debug_Send(mqttInfo.topic);
 800a0c6:	4b3b      	ldr	r3, [pc, #236]	; (800a1b4 <WifiprocData+0x464>)
 800a0c8:	0018      	movs	r0, r3
 800a0ca:	f7ff f8e1 	bl	8009290 <Debug_Send>
		Debug_Send(" - ");
 800a0ce:	4b3b      	ldr	r3, [pc, #236]	; (800a1bc <WifiprocData+0x46c>)
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f7ff f8dd 	bl	8009290 <Debug_Send>
		Debug_Send(mqttInfo.data);
 800a0d6:	4b38      	ldr	r3, [pc, #224]	; (800a1b8 <WifiprocData+0x468>)
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f7ff f8d9 	bl	8009290 <Debug_Send>
		Debug_Send("\r\n");
 800a0de:	4b31      	ldr	r3, [pc, #196]	; (800a1a4 <WifiprocData+0x454>)
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f7ff f8d5 	bl	8009290 <Debug_Send>
		myStrSection(WprocBuff, temp,30,' ',1);	//get parameter
 800a0e6:	4927      	ldr	r1, [pc, #156]	; (800a184 <WifiprocData+0x434>)
 800a0e8:	4835      	ldr	r0, [pc, #212]	; (800a1c0 <WifiprocData+0x470>)
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	2320      	movs	r3, #32
 800a0f0:	221e      	movs	r2, #30
 800a0f2:	f000 fba2 	bl	800a83a <myStrSection>
		if(strncmp(temp,"/H",2) == 0){
 800a0f6:	4933      	ldr	r1, [pc, #204]	; (800a1c4 <WifiprocData+0x474>)
 800a0f8:	4b22      	ldr	r3, [pc, #136]	; (800a184 <WifiprocData+0x434>)
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f004 fe76 	bl	800edee <strncmp>
 800a102:	1e03      	subs	r3, r0, #0
 800a104:	d10a      	bne.n	800a11c <WifiprocData+0x3cc>
			Debug_Send("Got click\r\n");
 800a106:	4b30      	ldr	r3, [pc, #192]	; (800a1c8 <WifiprocData+0x478>)
 800a108:	0018      	movs	r0, r3
 800a10a:	f7ff f8c1 	bl	8009290 <Debug_Send>
			HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800a10e:	2380      	movs	r3, #128	; 0x80
 800a110:	005b      	lsls	r3, r3, #1
 800a112:	4a2e      	ldr	r2, [pc, #184]	; (800a1cc <WifiprocData+0x47c>)
 800a114:	0019      	movs	r1, r3
 800a116:	0010      	movs	r0, r2
 800a118:	f001 faad 	bl	800b676 <HAL_GPIO_TogglePin>
		}
		Debug_Send("Processed IPD\r\n");
 800a11c:	4b2c      	ldr	r3, [pc, #176]	; (800a1d0 <WifiprocData+0x480>)
 800a11e:	0018      	movs	r0, r3
 800a120:	f7ff f8b6 	bl	8009290 <Debug_Send>
		//int hlen;
		//hlen = strlen(HTML);
		//sprintf(temp, "Conn %s received:%s\r\n",ConnID, temp1);
		//GSM_Send(temp);
		wifiFlag.print = 0;
 800a124:	4b2b      	ldr	r3, [pc, #172]	; (800a1d4 <WifiprocData+0x484>)
 800a126:	2200      	movs	r2, #0
 800a128:	70da      	strb	r2, [r3, #3]
		mqttFlag.receive = 0;
 800a12a:	4b20      	ldr	r3, [pc, #128]	; (800a1ac <WifiprocData+0x45c>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	715a      	strb	r2, [r3, #5]
	}
	if (wifiFlag.print == 1){
		//sprintf(temp, "%s,%i,%i\r\n",WprocBuff, WrecBuffPointerWrite, WrecBuffPointerRead);
		//GSM_Send(temp);
	}
	if(strncmp((char*)WprocBuff,"Accept",6)==0){
 800a130:	4929      	ldr	r1, [pc, #164]	; (800a1d8 <WifiprocData+0x488>)
 800a132:	4b23      	ldr	r3, [pc, #140]	; (800a1c0 <WifiprocData+0x470>)
 800a134:	2206      	movs	r2, #6
 800a136:	0018      	movs	r0, r3
 800a138:	f004 fe59 	bl	800edee <strncmp>
		//Debug_Send("Processed IPD\r\n");
		//WifiState = IP_Send;
	}
	wifiFlag.print = 1;
 800a13c:	4b25      	ldr	r3, [pc, #148]	; (800a1d4 <WifiprocData+0x484>)
 800a13e:	2201      	movs	r2, #1
 800a140:	70da      	strb	r2, [r3, #3]
	//if(strncmp((char*)WprocBuff,"busy s...",9)==0) wifiFlag.print = 1;	//BUSY SENDING DATA
	//if(strncmp((char*)WprocBuff,"Recv 5 bytes",4)==0) wifiFlag.print = 1;	//DATA SENT
	if(strncmp((char*)WprocBuff,"SEND OK",7)==0){
 800a142:	4926      	ldr	r1, [pc, #152]	; (800a1dc <WifiprocData+0x48c>)
 800a144:	4b1e      	ldr	r3, [pc, #120]	; (800a1c0 <WifiprocData+0x470>)
 800a146:	2207      	movs	r2, #7
 800a148:	0018      	movs	r0, r3
 800a14a:	f004 fe50 	bl	800edee <strncmp>
 800a14e:	1e03      	subs	r3, r0, #0
 800a150:	d114      	bne.n	800a17c <WifiprocData+0x42c>
		Debug_Send("SUCCESSFULLY SENT DATA\r\n");
 800a152:	4b23      	ldr	r3, [pc, #140]	; (800a1e0 <WifiprocData+0x490>)
 800a154:	0018      	movs	r0, r3
 800a156:	f7ff f89b 	bl	8009290 <Debug_Send>
		//wifiFlag.print = 1;	//SEND DONE
		//Debug_Send("Close socket\r\n");
		//mqttFlag.Data = 1;
		if (mqttFlag.send == 1){
 800a15a:	4b14      	ldr	r3, [pc, #80]	; (800a1ac <WifiprocData+0x45c>)
 800a15c:	791b      	ldrb	r3, [r3, #4]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d10c      	bne.n	800a17c <WifiprocData+0x42c>
			Debug_Send("Flush data\r\n");
 800a162:	4b20      	ldr	r3, [pc, #128]	; (800a1e4 <WifiprocData+0x494>)
 800a164:	0018      	movs	r0, r3
 800a166:	f7ff f893 	bl	8009290 <Debug_Send>
			WifiState =  Wifi_AT;
 800a16a:	4b1f      	ldr	r3, [pc, #124]	; (800a1e8 <WifiprocData+0x498>)
 800a16c:	2202      	movs	r2, #2
 800a16e:	701a      	strb	r2, [r3, #0]
			mqttFlag.send = 0;
 800a170:	4b0e      	ldr	r3, [pc, #56]	; (800a1ac <WifiprocData+0x45c>)
 800a172:	2200      	movs	r2, #0
 800a174:	711a      	strb	r2, [r3, #4]
			mqttFlag.receive = 1;
 800a176:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <WifiprocData+0x45c>)
 800a178:	2201      	movs	r2, #1
 800a17a:	715a      	strb	r2, [r3, #5]
		}
		//if (mqttFlag.active == 0) WifiState =  Close_Socket;
	}
}
 800a17c:	46c0      	nop			; (mov r8, r8)
 800a17e:	46bd      	mov	sp, r7
 800a180:	b00d      	add	sp, #52	; 0x34
 800a182:	bd90      	pop	{r4, r7, pc}
 800a184:	20001f7c 	.word	0x20001f7c
 800a188:	200018b0 	.word	0x200018b0
 800a18c:	0800f89c 	.word	0x0800f89c
 800a190:	0800f8a0 	.word	0x0800f8a0
 800a194:	0800f8a4 	.word	0x0800f8a4
 800a198:	0800f8b0 	.word	0x0800f8b0
 800a19c:	20001a08 	.word	0x20001a08
 800a1a0:	0800f8c0 	.word	0x0800f8c0
 800a1a4:	0800f690 	.word	0x0800f690
 800a1a8:	0800f8d0 	.word	0x0800f8d0
 800a1ac:	200022c0 	.word	0x200022c0
 800a1b0:	20001a1c 	.word	0x20001a1c
 800a1b4:	20001a3a 	.word	0x20001a3a
 800a1b8:	20001a4e 	.word	0x20001a4e
 800a1bc:	0800f8dc 	.word	0x0800f8dc
 800a1c0:	200022c8 	.word	0x200022c8
 800a1c4:	0800f8e0 	.word	0x0800f8e0
 800a1c8:	0800f8e4 	.word	0x0800f8e4
 800a1cc:	48000400 	.word	0x48000400
 800a1d0:	0800f8f0 	.word	0x0800f8f0
 800a1d4:	20002390 	.word	0x20002390
 800a1d8:	0800f900 	.word	0x0800f900
 800a1dc:	0800f908 	.word	0x0800f908
 800a1e0:	0800f910 	.word	0x0800f910
 800a1e4:	0800f92c 	.word	0x0800f92c
 800a1e8:	200000c4 	.word	0x200000c4

0800a1ec <byteCopy>:

int byteCopy(uint8_t *source, uint8_t *dest, uint8_t start, uint8_t stop){
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b088      	sub	sp, #32
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	0019      	movs	r1, r3
 800a1f8:	1dfb      	adds	r3, r7, #7
 800a1fa:	701a      	strb	r2, [r3, #0]
 800a1fc:	1dbb      	adds	r3, r7, #6
 800a1fe:	1c0a      	adds	r2, r1, #0
 800a200:	701a      	strb	r2, [r3, #0]
	 int val;
	 val = -1;
 800a202:	2301      	movs	r3, #1
 800a204:	425b      	negs	r3, r3
 800a206:	61bb      	str	r3, [r7, #24]
	 if (start >= stop){
 800a208:	1dfa      	adds	r2, r7, #7
 800a20a:	1dbb      	adds	r3, r7, #6
 800a20c:	7812      	ldrb	r2, [r2, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	429a      	cmp	r2, r3
 800a212:	d306      	bcc.n	800a222 <byteCopy+0x36>
		 Debug_Send("Index error\r\n");
 800a214:	4b23      	ldr	r3, [pc, #140]	; (800a2a4 <byteCopy+0xb8>)
 800a216:	0018      	movs	r0, r3
 800a218:	f7ff f83a 	bl	8009290 <Debug_Send>
		 return -1;
 800a21c:	2301      	movs	r3, #1
 800a21e:	425b      	negs	r3, r3
 800a220:	e03b      	b.n	800a29a <byteCopy+0xae>
	 }
	 uint8_t difference;
	 uint8_t count;
	 uint8_t* source1;
	 difference = stop - start + 1;
 800a222:	1dba      	adds	r2, r7, #6
 800a224:	1dfb      	adds	r3, r7, #7
 800a226:	7812      	ldrb	r2, [r2, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	2317      	movs	r3, #23
 800a230:	18fb      	adds	r3, r7, r3
 800a232:	3201      	adds	r2, #1
 800a234:	701a      	strb	r2, [r3, #0]
	 source += start;
 800a236:	1dfb      	adds	r3, r7, #7
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	18d3      	adds	r3, r2, r3
 800a23e:	60fb      	str	r3, [r7, #12]
	 source1 = source;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	613b      	str	r3, [r7, #16]
	 source1 += start;
 800a244:	1dfb      	adds	r3, r7, #7
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	18d3      	adds	r3, r2, r3
 800a24c:	613b      	str	r3, [r7, #16]
	 for (count = 0; count < difference; count++){
 800a24e:	231f      	movs	r3, #31
 800a250:	18fb      	adds	r3, r7, r3
 800a252:	2200      	movs	r2, #0
 800a254:	701a      	strb	r2, [r3, #0]
 800a256:	e00f      	b.n	800a278 <byteCopy+0x8c>
		 *dest = *source;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	781a      	ldrb	r2, [r3, #0]
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	701a      	strb	r2, [r3, #0]
		 dest++;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	3301      	adds	r3, #1
 800a264:	60bb      	str	r3, [r7, #8]
		 source++;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3301      	adds	r3, #1
 800a26a:	60fb      	str	r3, [r7, #12]
	 for (count = 0; count < difference; count++){
 800a26c:	211f      	movs	r1, #31
 800a26e:	187b      	adds	r3, r7, r1
 800a270:	781a      	ldrb	r2, [r3, #0]
 800a272:	187b      	adds	r3, r7, r1
 800a274:	3201      	adds	r2, #1
 800a276:	701a      	strb	r2, [r3, #0]
 800a278:	231f      	movs	r3, #31
 800a27a:	18fa      	adds	r2, r7, r3
 800a27c:	2317      	movs	r3, #23
 800a27e:	18fb      	adds	r3, r7, r3
 800a280:	7812      	ldrb	r2, [r2, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	429a      	cmp	r2, r3
 800a286:	d3e7      	bcc.n	800a258 <byteCopy+0x6c>
	 }
	 dest++;
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	3301      	adds	r3, #1
 800a28c:	60bb      	str	r3, [r7, #8]
	 *dest = 0;
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2200      	movs	r2, #0
 800a292:	701a      	strb	r2, [r3, #0]
	 //Debug_Send(dest);
	 //Debug_Send("\r\n");
	 val = 1;
 800a294:	2301      	movs	r3, #1
 800a296:	61bb      	str	r3, [r7, #24]
	 return val;
 800a298:	69bb      	ldr	r3, [r7, #24]
}
 800a29a:	0018      	movs	r0, r3
 800a29c:	46bd      	mov	sp, r7
 800a29e:	b008      	add	sp, #32
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	46c0      	nop			; (mov r8, r8)
 800a2a4:	0800f93c 	.word	0x0800f93c

0800a2a8 <WifiOK>:

void WifiOK(){
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af02      	add	r7, sp, #8
	//sprintf(temp, "%s,%i,%i,%i\r\n",WprocBuff, WrecBuffPointerWrite, WrecBuffPointerRead,wifiFlag.ip);
	//GSM_Send(temp);
	if(wifiFlag.list == 1){
 800a2ae:	4b1c      	ldr	r3, [pc, #112]	; (800a320 <WifiOK+0x78>)
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d105      	bne.n	800a2c2 <WifiOK+0x1a>
		wifiFlag.list = 0;
 800a2b6:	4b1a      	ldr	r3, [pc, #104]	; (800a320 <WifiOK+0x78>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	705a      	strb	r2, [r3, #1]
		WifiState = GetIP;
 800a2bc:	4b19      	ldr	r3, [pc, #100]	; (800a324 <WifiOK+0x7c>)
 800a2be:	2204      	movs	r2, #4
 800a2c0:	701a      	strb	r2, [r3, #0]
	}
	if (wifiFlag.ip == 1){
 800a2c2:	4b17      	ldr	r3, [pc, #92]	; (800a320 <WifiOK+0x78>)
 800a2c4:	789b      	ldrb	r3, [r3, #2]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d127      	bne.n	800a31a <WifiOK+0x72>
		wifiFlag.ip = 0;
 800a2ca:	4b15      	ldr	r3, [pc, #84]	; (800a320 <WifiOK+0x78>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	709a      	strb	r2, [r3, #2]
		Debug_Send(IP1);
 800a2d0:	4b15      	ldr	r3, [pc, #84]	; (800a328 <WifiOK+0x80>)
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	f7fe ffdc 	bl	8009290 <Debug_Send>
		Debug_Send("\r\n");
 800a2d8:	4b14      	ldr	r3, [pc, #80]	; (800a32c <WifiOK+0x84>)
 800a2da:	0018      	movs	r0, r3
 800a2dc:	f7fe ffd8 	bl	8009290 <Debug_Send>
		myStrSection(IP1, temp,30,'.',0);
 800a2e0:	4913      	ldr	r1, [pc, #76]	; (800a330 <WifiOK+0x88>)
 800a2e2:	4811      	ldr	r0, [pc, #68]	; (800a328 <WifiOK+0x80>)
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	232e      	movs	r3, #46	; 0x2e
 800a2ea:	221e      	movs	r2, #30
 800a2ec:	f000 faa5 	bl	800a83a <myStrSection>
		if (strncmp(temp,"0",1) != 0){
 800a2f0:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <WifiOK+0x88>)
 800a2f2:	781a      	ldrb	r2, [r3, #0]
 800a2f4:	4b0f      	ldr	r3, [pc, #60]	; (800a334 <WifiOK+0x8c>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	d00a      	beq.n	800a312 <WifiOK+0x6a>
			wifiFlag.ip = 2;
 800a2fc:	4b08      	ldr	r3, [pc, #32]	; (800a320 <WifiOK+0x78>)
 800a2fe:	2202      	movs	r2, #2
 800a300:	709a      	strb	r2, [r3, #2]
			WifiState = CPMUX;
 800a302:	4b08      	ldr	r3, [pc, #32]	; (800a324 <WifiOK+0x7c>)
 800a304:	2209      	movs	r2, #9
 800a306:	701a      	strb	r2, [r3, #0]
			Debug_Send("IP found\r\n");
 800a308:	4b0b      	ldr	r3, [pc, #44]	; (800a338 <WifiOK+0x90>)
 800a30a:	0018      	movs	r0, r3
 800a30c:	f7fe ffc0 	bl	8009290 <Debug_Send>
		GSM_Send("\r\n");
		GSM_Send(IP4);
		GSM_Send("\r\n");*/
	}
	//Debug_Send("Got OK\r\n");
}
 800a310:	e003      	b.n	800a31a <WifiOK+0x72>
			Debug_Send("IP not found\r\n");
 800a312:	4b0a      	ldr	r3, [pc, #40]	; (800a33c <WifiOK+0x94>)
 800a314:	0018      	movs	r0, r3
 800a316:	f7fe ffbb 	bl	8009290 <Debug_Send>
}
 800a31a:	46c0      	nop			; (mov r8, r8)
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20002390 	.word	0x20002390
 800a324:	200000c4 	.word	0x200000c4
 800a328:	200019a4 	.word	0x200019a4
 800a32c:	0800f690 	.word	0x0800f690
 800a330:	20001f7c 	.word	0x20001f7c
 800a334:	0800f94c 	.word	0x0800f94c
 800a338:	0800f950 	.word	0x0800f950
 800a33c:	0800f95c 	.word	0x0800f95c

0800a340 <Wifi_Receive>:
void Wifi_Receive(char in){
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	0002      	movs	r2, r0
 800a348:	1dfb      	adds	r3, r7, #7
 800a34a:	701a      	strb	r2, [r3, #0]
	//
	WrecBuff[WrecBuffPointerWrite] = (char)in;
 800a34c:	4b0b      	ldr	r3, [pc, #44]	; (800a37c <Wifi_Receive+0x3c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a0b      	ldr	r2, [pc, #44]	; (800a380 <Wifi_Receive+0x40>)
 800a352:	1df9      	adds	r1, r7, #7
 800a354:	7809      	ldrb	r1, [r1, #0]
 800a356:	54d1      	strb	r1, [r2, r3]
	//HAL_UART_Transmit(&huart1, recBuff[recBuffPointerWrite], 2, 10);
	//huart1.Instance->TDR = in;
	WrecBuffPointerWrite++;
 800a358:	4b08      	ldr	r3, [pc, #32]	; (800a37c <Wifi_Receive+0x3c>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	4b07      	ldr	r3, [pc, #28]	; (800a37c <Wifi_Receive+0x3c>)
 800a360:	601a      	str	r2, [r3, #0]
	if (WrecBuffPointerWrite > WrecBuffSize) WrecBuffPointerWrite = 0;
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <Wifi_Receive+0x3c>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a07      	ldr	r2, [pc, #28]	; (800a384 <Wifi_Receive+0x44>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	dd02      	ble.n	800a372 <Wifi_Receive+0x32>
 800a36c:	4b03      	ldr	r3, [pc, #12]	; (800a37c <Wifi_Receive+0x3c>)
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]

}
 800a372:	46c0      	nop			; (mov r8, r8)
 800a374:	46bd      	mov	sp, r7
 800a376:	b002      	add	sp, #8
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	200001f8 	.word	0x200001f8
 800a380:	20001a68 	.word	0x20001a68
 800a384:	00000514 	.word	0x00000514

0800a388 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	4a06      	ldr	r2, [pc, #24]	; (800a3b0 <vApplicationGetIdleTaskMemory+0x28>)
 800a398:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	4a05      	ldr	r2, [pc, #20]	; (800a3b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a39e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2280      	movs	r2, #128	; 0x80
 800a3a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800a3a6:	46c0      	nop			; (mov r8, r8)
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	b004      	add	sp, #16
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	46c0      	nop			; (mov r8, r8)
 800a3b0:	20000204 	.word	0x20000204
 800a3b4:	20000258 	.word	0x20000258

0800a3b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a3b8:	b5b0      	push	{r4, r5, r7, lr}
 800a3ba:	b08e      	sub	sp, #56	; 0x38
 800a3bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	remap();
 800a3be:	f000 f9d3 	bl	800a768 <remap>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a3c2:	f000 fddf 	bl	800af84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a3c6:	f000 f847 	bl	800a458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a3ca:	f000 f93b 	bl	800a644 <MX_GPIO_Init>
  MX_SPI2_Init();
 800a3ce:	f000 f89b 	bl	800a508 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800a3d2:	f000 f8d7 	bl	800a584 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800a3d6:	f000 f905 	bl	800a5e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_SET);
 800a3da:	2380      	movs	r3, #128	; 0x80
 800a3dc:	0059      	lsls	r1, r3, #1
 800a3de:	2390      	movs	r3, #144	; 0x90
 800a3e0:	05db      	lsls	r3, r3, #23
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f001 f929 	bl	800b63c <HAL_GPIO_WritePin>
  //GSM_Init();
  Wifi_Init();
 800a3ea:	f7fe ffc3 	bl	8009374 <Wifi_Init>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);		//wifi enable
 800a3ee:	2380      	movs	r3, #128	; 0x80
 800a3f0:	01db      	lsls	r3, r3, #7
 800a3f2:	4814      	ldr	r0, [pc, #80]	; (800a444 <main+0x8c>)
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	0019      	movs	r1, r3
 800a3f8:	f001 f920 	bl	800b63c <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800a3fc:	211c      	movs	r1, #28
 800a3fe:	187b      	adds	r3, r7, r1
 800a400:	4a11      	ldr	r2, [pc, #68]	; (800a448 <main+0x90>)
 800a402:	ca31      	ldmia	r2!, {r0, r4, r5}
 800a404:	c331      	stmia	r3!, {r0, r4, r5}
 800a406:	ca31      	ldmia	r2!, {r0, r4, r5}
 800a408:	c331      	stmia	r3!, {r0, r4, r5}
 800a40a:	6812      	ldr	r2, [r2, #0]
 800a40c:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800a40e:	187b      	adds	r3, r7, r1
 800a410:	2100      	movs	r1, #0
 800a412:	0018      	movs	r0, r3
 800a414:	f003 fbd7 	bl	800dbc6 <osThreadCreate>
 800a418:	0002      	movs	r2, r0
 800a41a:	4b0c      	ldr	r3, [pc, #48]	; (800a44c <main+0x94>)
 800a41c:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800a41e:	003b      	movs	r3, r7
 800a420:	4a0b      	ldr	r2, [pc, #44]	; (800a450 <main+0x98>)
 800a422:	ca13      	ldmia	r2!, {r0, r1, r4}
 800a424:	c313      	stmia	r3!, {r0, r1, r4}
 800a426:	ca13      	ldmia	r2!, {r0, r1, r4}
 800a428:	c313      	stmia	r3!, {r0, r1, r4}
 800a42a:	6812      	ldr	r2, [r2, #0]
 800a42c:	601a      	str	r2, [r3, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800a42e:	003b      	movs	r3, r7
 800a430:	2100      	movs	r1, #0
 800a432:	0018      	movs	r0, r3
 800a434:	f003 fbc7 	bl	800dbc6 <osThreadCreate>
 800a438:	0002      	movs	r2, r0
 800a43a:	4b06      	ldr	r3, [pc, #24]	; (800a454 <main+0x9c>)
 800a43c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800a43e:	f003 fbba 	bl	800dbb6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a442:	e7fe      	b.n	800a442 <main+0x8a>
 800a444:	48000800 	.word	0x48000800
 800a448:	0800f984 	.word	0x0800f984
 800a44c:	2000239c 	.word	0x2000239c
 800a450:	0800f9a0 	.word	0x0800f9a0
 800a454:	20002488 	.word	0x20002488

0800a458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a458:	b590      	push	{r4, r7, lr}
 800a45a:	b099      	sub	sp, #100	; 0x64
 800a45c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a45e:	242c      	movs	r4, #44	; 0x2c
 800a460:	193b      	adds	r3, r7, r4
 800a462:	0018      	movs	r0, r3
 800a464:	2334      	movs	r3, #52	; 0x34
 800a466:	001a      	movs	r2, r3
 800a468:	2100      	movs	r1, #0
 800a46a:	f004 fc82 	bl	800ed72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a46e:	231c      	movs	r3, #28
 800a470:	18fb      	adds	r3, r7, r3
 800a472:	0018      	movs	r0, r3
 800a474:	2310      	movs	r3, #16
 800a476:	001a      	movs	r2, r3
 800a478:	2100      	movs	r1, #0
 800a47a:	f004 fc7a 	bl	800ed72 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a47e:	003b      	movs	r3, r7
 800a480:	0018      	movs	r0, r3
 800a482:	231c      	movs	r3, #28
 800a484:	001a      	movs	r2, r3
 800a486:	2100      	movs	r1, #0
 800a488:	f004 fc73 	bl	800ed72 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800a48c:	193b      	adds	r3, r7, r4
 800a48e:	2220      	movs	r2, #32
 800a490:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a492:	193b      	adds	r3, r7, r4
 800a494:	2201      	movs	r2, #1
 800a496:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800a498:	193b      	adds	r3, r7, r4
 800a49a:	2200      	movs	r2, #0
 800a49c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a49e:	193b      	adds	r3, r7, r4
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	f001 f903 	bl	800b6ac <HAL_RCC_OscConfig>
 800a4a6:	1e03      	subs	r3, r0, #0
 800a4a8:	d001      	beq.n	800a4ae <SystemClock_Config+0x56>
  {
    Error_Handler();
 800a4aa:	f000 f9c1 	bl	800a830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a4ae:	211c      	movs	r1, #28
 800a4b0:	187b      	adds	r3, r7, r1
 800a4b2:	2207      	movs	r2, #7
 800a4b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800a4b6:	187b      	adds	r3, r7, r1
 800a4b8:	2203      	movs	r2, #3
 800a4ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a4bc:	187b      	adds	r3, r7, r1
 800a4be:	2200      	movs	r2, #0
 800a4c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a4c2:	187b      	adds	r3, r7, r1
 800a4c4:	2280      	movs	r2, #128	; 0x80
 800a4c6:	00d2      	lsls	r2, r2, #3
 800a4c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800a4ca:	187b      	adds	r3, r7, r1
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	0018      	movs	r0, r3
 800a4d0:	f001 fc72 	bl	800bdb8 <HAL_RCC_ClockConfig>
 800a4d4:	1e03      	subs	r3, r0, #0
 800a4d6:	d001      	beq.n	800a4dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 800a4d8:	f000 f9aa 	bl	800a830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800a4dc:	003b      	movs	r3, r7
 800a4de:	2203      	movs	r2, #3
 800a4e0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a4e2:	003b      	movs	r3, r7
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a4e8:	003b      	movs	r3, r7
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a4ee:	003b      	movs	r3, r7
 800a4f0:	0018      	movs	r0, r3
 800a4f2:	f001 fddb 	bl	800c0ac <HAL_RCCEx_PeriphCLKConfig>
 800a4f6:	1e03      	subs	r3, r0, #0
 800a4f8:	d001      	beq.n	800a4fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800a4fa:	f000 f999 	bl	800a830 <Error_Handler>
  }
}
 800a4fe:	46c0      	nop			; (mov r8, r8)
 800a500:	46bd      	mov	sp, r7
 800a502:	b019      	add	sp, #100	; 0x64
 800a504:	bd90      	pop	{r4, r7, pc}
	...

0800a508 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a50c:	4b1b      	ldr	r3, [pc, #108]	; (800a57c <MX_SPI2_Init+0x74>)
 800a50e:	4a1c      	ldr	r2, [pc, #112]	; (800a580 <MX_SPI2_Init+0x78>)
 800a510:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a512:	4b1a      	ldr	r3, [pc, #104]	; (800a57c <MX_SPI2_Init+0x74>)
 800a514:	2282      	movs	r2, #130	; 0x82
 800a516:	0052      	lsls	r2, r2, #1
 800a518:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a51a:	4b18      	ldr	r3, [pc, #96]	; (800a57c <MX_SPI2_Init+0x74>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a520:	4b16      	ldr	r3, [pc, #88]	; (800a57c <MX_SPI2_Init+0x74>)
 800a522:	22e0      	movs	r2, #224	; 0xe0
 800a524:	00d2      	lsls	r2, r2, #3
 800a526:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a528:	4b14      	ldr	r3, [pc, #80]	; (800a57c <MX_SPI2_Init+0x74>)
 800a52a:	2200      	movs	r2, #0
 800a52c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a52e:	4b13      	ldr	r3, [pc, #76]	; (800a57c <MX_SPI2_Init+0x74>)
 800a530:	2200      	movs	r2, #0
 800a532:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800a534:	4b11      	ldr	r3, [pc, #68]	; (800a57c <MX_SPI2_Init+0x74>)
 800a536:	2280      	movs	r2, #128	; 0x80
 800a538:	0092      	lsls	r2, r2, #2
 800a53a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a53c:	4b0f      	ldr	r3, [pc, #60]	; (800a57c <MX_SPI2_Init+0x74>)
 800a53e:	2220      	movs	r2, #32
 800a540:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a542:	4b0e      	ldr	r3, [pc, #56]	; (800a57c <MX_SPI2_Init+0x74>)
 800a544:	2200      	movs	r2, #0
 800a546:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a548:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <MX_SPI2_Init+0x74>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a54e:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <MX_SPI2_Init+0x74>)
 800a550:	2200      	movs	r2, #0
 800a552:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800a554:	4b09      	ldr	r3, [pc, #36]	; (800a57c <MX_SPI2_Init+0x74>)
 800a556:	2207      	movs	r2, #7
 800a558:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a55a:	4b08      	ldr	r3, [pc, #32]	; (800a57c <MX_SPI2_Init+0x74>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a560:	4b06      	ldr	r3, [pc, #24]	; (800a57c <MX_SPI2_Init+0x74>)
 800a562:	2208      	movs	r2, #8
 800a564:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a566:	4b05      	ldr	r3, [pc, #20]	; (800a57c <MX_SPI2_Init+0x74>)
 800a568:	0018      	movs	r0, r3
 800a56a:	f001 fe9d 	bl	800c2a8 <HAL_SPI_Init>
 800a56e:	1e03      	subs	r3, r0, #0
 800a570:	d001      	beq.n	800a576 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800a572:	f000 f95d 	bl	800a830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	200023a0 	.word	0x200023a0
 800a580:	40003800 	.word	0x40003800

0800a584 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a588:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a58a:	4a15      	ldr	r2, [pc, #84]	; (800a5e0 <MX_USART1_UART_Init+0x5c>)
 800a58c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a58e:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a590:	22e1      	movs	r2, #225	; 0xe1
 800a592:	0252      	lsls	r2, r2, #9
 800a594:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a596:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a598:	2200      	movs	r2, #0
 800a59a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a59c:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a5a2:	4b0e      	ldr	r3, [pc, #56]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a5a8:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a5aa:	220c      	movs	r2, #12
 800a5ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a5ae:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a5b4:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a5ba:	4b08      	ldr	r3, [pc, #32]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a5c0:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a5c6:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <MX_USART1_UART_Init+0x58>)
 800a5c8:	0018      	movs	r0, r3
 800a5ca:	f001 ff25 	bl	800c418 <HAL_UART_Init>
 800a5ce:	1e03      	subs	r3, r0, #0
 800a5d0:	d001      	beq.n	800a5d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a5d2:	f000 f92d 	bl	800a830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a5d6:	46c0      	nop			; (mov r8, r8)
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	20002404 	.word	0x20002404
 800a5e0:	40013800 	.word	0x40013800

0800a5e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a5e8:	4b14      	ldr	r3, [pc, #80]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a5ea:	4a15      	ldr	r2, [pc, #84]	; (800a640 <MX_USART2_UART_Init+0x5c>)
 800a5ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a5ee:	4b13      	ldr	r3, [pc, #76]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a5f0:	22e1      	movs	r2, #225	; 0xe1
 800a5f2:	0252      	lsls	r2, r2, #9
 800a5f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a5f6:	4b11      	ldr	r3, [pc, #68]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a5fc:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a602:	4b0e      	ldr	r3, [pc, #56]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a604:	2200      	movs	r2, #0
 800a606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a608:	4b0c      	ldr	r3, [pc, #48]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a60a:	220c      	movs	r2, #12
 800a60c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a60e:	4b0b      	ldr	r3, [pc, #44]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a610:	2200      	movs	r2, #0
 800a612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a614:	4b09      	ldr	r3, [pc, #36]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a616:	2200      	movs	r2, #0
 800a618:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a61a:	4b08      	ldr	r3, [pc, #32]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a620:	4b06      	ldr	r3, [pc, #24]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a622:	2200      	movs	r2, #0
 800a624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a626:	4b05      	ldr	r3, [pc, #20]	; (800a63c <MX_USART2_UART_Init+0x58>)
 800a628:	0018      	movs	r0, r3
 800a62a:	f001 fef5 	bl	800c418 <HAL_UART_Init>
 800a62e:	1e03      	subs	r3, r0, #0
 800a630:	d001      	beq.n	800a636 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a632:	f000 f8fd 	bl	800a830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a636:	46c0      	nop			; (mov r8, r8)
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	2000248c 	.word	0x2000248c
 800a640:	40004400 	.word	0x40004400

0800a644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b089      	sub	sp, #36	; 0x24
 800a648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a64a:	240c      	movs	r4, #12
 800a64c:	193b      	adds	r3, r7, r4
 800a64e:	0018      	movs	r0, r3
 800a650:	2314      	movs	r3, #20
 800a652:	001a      	movs	r2, r3
 800a654:	2100      	movs	r1, #0
 800a656:	f004 fb8c 	bl	800ed72 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a65a:	4b40      	ldr	r3, [pc, #256]	; (800a75c <MX_GPIO_Init+0x118>)
 800a65c:	695a      	ldr	r2, [r3, #20]
 800a65e:	4b3f      	ldr	r3, [pc, #252]	; (800a75c <MX_GPIO_Init+0x118>)
 800a660:	2180      	movs	r1, #128	; 0x80
 800a662:	0309      	lsls	r1, r1, #12
 800a664:	430a      	orrs	r2, r1
 800a666:	615a      	str	r2, [r3, #20]
 800a668:	4b3c      	ldr	r3, [pc, #240]	; (800a75c <MX_GPIO_Init+0x118>)
 800a66a:	695a      	ldr	r2, [r3, #20]
 800a66c:	2380      	movs	r3, #128	; 0x80
 800a66e:	031b      	lsls	r3, r3, #12
 800a670:	4013      	ands	r3, r2
 800a672:	60bb      	str	r3, [r7, #8]
 800a674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a676:	4b39      	ldr	r3, [pc, #228]	; (800a75c <MX_GPIO_Init+0x118>)
 800a678:	695a      	ldr	r2, [r3, #20]
 800a67a:	4b38      	ldr	r3, [pc, #224]	; (800a75c <MX_GPIO_Init+0x118>)
 800a67c:	2180      	movs	r1, #128	; 0x80
 800a67e:	0289      	lsls	r1, r1, #10
 800a680:	430a      	orrs	r2, r1
 800a682:	615a      	str	r2, [r3, #20]
 800a684:	4b35      	ldr	r3, [pc, #212]	; (800a75c <MX_GPIO_Init+0x118>)
 800a686:	695a      	ldr	r2, [r3, #20]
 800a688:	2380      	movs	r3, #128	; 0x80
 800a68a:	029b      	lsls	r3, r3, #10
 800a68c:	4013      	ands	r3, r2
 800a68e:	607b      	str	r3, [r7, #4]
 800a690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a692:	4b32      	ldr	r3, [pc, #200]	; (800a75c <MX_GPIO_Init+0x118>)
 800a694:	695a      	ldr	r2, [r3, #20]
 800a696:	4b31      	ldr	r3, [pc, #196]	; (800a75c <MX_GPIO_Init+0x118>)
 800a698:	2180      	movs	r1, #128	; 0x80
 800a69a:	02c9      	lsls	r1, r1, #11
 800a69c:	430a      	orrs	r2, r1
 800a69e:	615a      	str	r2, [r3, #20]
 800a6a0:	4b2e      	ldr	r3, [pc, #184]	; (800a75c <MX_GPIO_Init+0x118>)
 800a6a2:	695a      	ldr	r2, [r3, #20]
 800a6a4:	2380      	movs	r3, #128	; 0x80
 800a6a6:	02db      	lsls	r3, r3, #11
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	603b      	str	r3, [r7, #0]
 800a6ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|GSM_Enable_Pin, GPIO_PIN_RESET);
 800a6ae:	23e0      	movs	r3, #224	; 0xe0
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	482b      	ldr	r0, [pc, #172]	; (800a760 <MX_GPIO_Init+0x11c>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	0019      	movs	r1, r3
 800a6b8:	f000 ffc0 	bl	800b63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GSM_On_Pin|LED5_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 800a6bc:	23c3      	movs	r3, #195	; 0xc3
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4828      	ldr	r0, [pc, #160]	; (800a764 <MX_GPIO_Init+0x120>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	0019      	movs	r1, r3
 800a6c6:	f000 ffb9 	bl	800b63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800a6ca:	2380      	movs	r3, #128	; 0x80
 800a6cc:	0059      	lsls	r1, r3, #1
 800a6ce:	2390      	movs	r3, #144	; 0x90
 800a6d0:	05db      	lsls	r3, r3, #23
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	0018      	movs	r0, r3
 800a6d6:	f000 ffb1 	bl	800b63c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin GSM_Enable_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GSM_Enable_Pin;
 800a6da:	193b      	adds	r3, r7, r4
 800a6dc:	22e0      	movs	r2, #224	; 0xe0
 800a6de:	0212      	lsls	r2, r2, #8
 800a6e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6e2:	193b      	adds	r3, r7, r4
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6e8:	193b      	adds	r3, r7, r4
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6ee:	193b      	adds	r3, r7, r4
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6f4:	193b      	adds	r3, r7, r4
 800a6f6:	4a1a      	ldr	r2, [pc, #104]	; (800a760 <MX_GPIO_Init+0x11c>)
 800a6f8:	0019      	movs	r1, r3
 800a6fa:	0010      	movs	r0, r2
 800a6fc:	f000 fe26 	bl	800b34c <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_On_Pin LED5_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = GSM_On_Pin|LED5_Pin|LED4_Pin|LED3_Pin;
 800a700:	0021      	movs	r1, r4
 800a702:	187b      	adds	r3, r7, r1
 800a704:	22c3      	movs	r2, #195	; 0xc3
 800a706:	0092      	lsls	r2, r2, #2
 800a708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a70a:	000c      	movs	r4, r1
 800a70c:	193b      	adds	r3, r7, r4
 800a70e:	2201      	movs	r2, #1
 800a710:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a712:	193b      	adds	r3, r7, r4
 800a714:	2200      	movs	r2, #0
 800a716:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a718:	193b      	adds	r3, r7, r4
 800a71a:	2200      	movs	r2, #0
 800a71c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a71e:	193b      	adds	r3, r7, r4
 800a720:	4a10      	ldr	r2, [pc, #64]	; (800a764 <MX_GPIO_Init+0x120>)
 800a722:	0019      	movs	r1, r3
 800a724:	0010      	movs	r0, r2
 800a726:	f000 fe11 	bl	800b34c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800a72a:	0021      	movs	r1, r4
 800a72c:	187b      	adds	r3, r7, r1
 800a72e:	2280      	movs	r2, #128	; 0x80
 800a730:	0052      	lsls	r2, r2, #1
 800a732:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a734:	187b      	adds	r3, r7, r1
 800a736:	2201      	movs	r2, #1
 800a738:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a73a:	187b      	adds	r3, r7, r1
 800a73c:	2200      	movs	r2, #0
 800a73e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a740:	187b      	adds	r3, r7, r1
 800a742:	2200      	movs	r2, #0
 800a744:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800a746:	187a      	adds	r2, r7, r1
 800a748:	2390      	movs	r3, #144	; 0x90
 800a74a:	05db      	lsls	r3, r3, #23
 800a74c:	0011      	movs	r1, r2
 800a74e:	0018      	movs	r0, r3
 800a750:	f000 fdfc 	bl	800b34c <HAL_GPIO_Init>

}
 800a754:	46c0      	nop			; (mov r8, r8)
 800a756:	46bd      	mov	sp, r7
 800a758:	b009      	add	sp, #36	; 0x24
 800a75a:	bd90      	pop	{r4, r7, pc}
 800a75c:	40021000 	.word	0x40021000
 800a760:	48000800 	.word	0x48000800
 800a764:	48000400 	.word	0x48000400

0800a768 <remap>:
	 //Debug_Send(flash);
	 Debug_Send("\r\n");

 }*/

void remap(){
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
	 // Copy interrupt vector table to the RAM.
	 volatile uint32_t *VectorTable = (volatile uint32_t *)0x20000000;
 800a76e:	2380      	movs	r3, #128	; 0x80
 800a770:	059b      	lsls	r3, r3, #22
 800a772:	60bb      	str	r3, [r7, #8]
	 uint32_t ui32_VectorIndex = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	60fb      	str	r3, [r7, #12]

	 for(ui32_VectorIndex = 0; ui32_VectorIndex < 48; ui32_VectorIndex++)
 800a778:	2300      	movs	r3, #0
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	e00e      	b.n	800a79c <remap+0x34>
	 {
		 VectorTable[ui32_VectorIndex] = *(__IO uint32_t*)((uint32_t) 0x8009000 + (ui32_VectorIndex << 2));
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4a1c      	ldr	r2, [pc, #112]	; (800a7f4 <remap+0x8c>)
 800a784:	4694      	mov	ip, r2
 800a786:	4463      	add	r3, ip
 800a788:	001a      	movs	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	68b9      	ldr	r1, [r7, #8]
 800a790:	18cb      	adds	r3, r1, r3
 800a792:	6812      	ldr	r2, [r2, #0]
 800a794:	601a      	str	r2, [r3, #0]
	 for(ui32_VectorIndex = 0; ui32_VectorIndex < 48; ui32_VectorIndex++)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3301      	adds	r3, #1
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b2f      	cmp	r3, #47	; 0x2f
 800a7a0:	d9ed      	bls.n	800a77e <remap+0x16>
	 }

	 __HAL_RCC_AHB_FORCE_RESET();
 800a7a2:	4b15      	ldr	r3, [pc, #84]	; (800a7f8 <remap+0x90>)
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	4252      	negs	r2, r2
 800a7a8:	629a      	str	r2, [r3, #40]	; 0x28

	 //  Enable SYSCFG peripheral clock
	 __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7aa:	4b13      	ldr	r3, [pc, #76]	; (800a7f8 <remap+0x90>)
 800a7ac:	699a      	ldr	r2, [r3, #24]
 800a7ae:	4b12      	ldr	r3, [pc, #72]	; (800a7f8 <remap+0x90>)
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	619a      	str	r2, [r3, #24]
 800a7b6:	4b10      	ldr	r3, [pc, #64]	; (800a7f8 <remap+0x90>)
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	4013      	ands	r3, r2
 800a7be:	607b      	str	r3, [r7, #4]
 800a7c0:	687b      	ldr	r3, [r7, #4]

	 __HAL_RCC_AHB_RELEASE_RESET();
 800a7c2:	4b0d      	ldr	r3, [pc, #52]	; (800a7f8 <remap+0x90>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	629a      	str	r2, [r3, #40]	; 0x28

	 // Remap RAM into 0x0000 0000
	 __HAL_SYSCFG_REMAPMEMORY_SRAM();
 800a7c8:	4b0c      	ldr	r3, [pc, #48]	; (800a7fc <remap+0x94>)
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <remap+0x94>)
 800a7ce:	2103      	movs	r1, #3
 800a7d0:	438a      	bics	r2, r1
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	4b09      	ldr	r3, [pc, #36]	; (800a7fc <remap+0x94>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	4b08      	ldr	r3, [pc, #32]	; (800a7fc <remap+0x94>)
 800a7da:	2103      	movs	r1, #3
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800a7e0:	b662      	cpsie	i
}
 800a7e2:	46c0      	nop			; (mov r8, r8)

	 __enable_irq();
	 Debug_Send("test Vector table remapped\r\n");
 800a7e4:	4b06      	ldr	r3, [pc, #24]	; (800a800 <remap+0x98>)
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	f7fe fd52 	bl	8009290 <Debug_Send>
}
 800a7ec:	46c0      	nop			; (mov r8, r8)
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	b004      	add	sp, #16
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	08009000 	.word	0x08009000
 800a7f8:	40021000 	.word	0x40021000
 800a7fc:	40010000 	.word	0x40010000
 800a800:	0800f9bc 	.word	0x0800f9bc

0800a804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800a80c:	23fa      	movs	r3, #250	; 0xfa
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	0018      	movs	r0, r3
 800a812:	f003 fa25 	bl	800dc60 <osDelay>
    //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    //Debug_Send("M0 test running\r\n");
    //GSM_Service();
    //Debug_Send("M0 test running\r\n");
    //GSM_Send("AT\r\n");
    Wifi_Service();
 800a816:	f7fe fdff 	bl	8009418 <Wifi_Service>
    osDelay(1000);
 800a81a:	e7f7      	b.n	800a80c <StartDefaultTask+0x8>

0800a81c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(5);
 800a824:	2005      	movs	r0, #5
 800a826:	f003 fa1b 	bl	800dc60 <osDelay>
    //recData();
    WifirecData();
 800a82a:	f7ff f861 	bl	80098f0 <WifirecData>
    osDelay(5);
 800a82e:	e7f9      	b.n	800a824 <StartTask02+0x8>

0800a830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a834:	b672      	cpsid	i
}
 800a836:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a838:	e7fe      	b.n	800a838 <Error_Handler+0x8>

0800a83a <myStrSection>:
//#include "GSM.h"

//volatile unsigned char msisdn[80];
const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

short myStrSection(char *p_str,char *p_result,unsigned char p_size,char p_char,char p_pos){
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b086      	sub	sp, #24
 800a83e:	af00      	add	r7, sp, #0
 800a840:	60f8      	str	r0, [r7, #12]
 800a842:	60b9      	str	r1, [r7, #8]
 800a844:	0019      	movs	r1, r3
 800a846:	1dfb      	adds	r3, r7, #7
 800a848:	701a      	strb	r2, [r3, #0]
 800a84a:	1dbb      	adds	r3, r7, #6
 800a84c:	1c0a      	adds	r2, r1, #0
 800a84e:	701a      	strb	r2, [r3, #0]
	short string_index;
	short result_index;
	char tmp_pos;

	string_index=0;
 800a850:	2316      	movs	r3, #22
 800a852:	18fb      	adds	r3, r7, r3
 800a854:	2200      	movs	r2, #0
 800a856:	801a      	strh	r2, [r3, #0]
	result_index=0;
 800a858:	2314      	movs	r3, #20
 800a85a:	18fb      	adds	r3, r7, r3
 800a85c:	2200      	movs	r2, #0
 800a85e:	801a      	strh	r2, [r3, #0]
	tmp_pos=0;
 800a860:	2313      	movs	r3, #19
 800a862:	18fb      	adds	r3, r7, r3
 800a864:	2200      	movs	r2, #0
 800a866:	701a      	strb	r2, [r3, #0]
	p_size--;
 800a868:	1dfb      	adds	r3, r7, #7
 800a86a:	781a      	ldrb	r2, [r3, #0]
 800a86c:	1dfb      	adds	r3, r7, #7
 800a86e:	3a01      	subs	r2, #1
 800a870:	701a      	strb	r2, [r3, #0]
	while(p_str[string_index]!=0){
 800a872:	e04a      	b.n	800a90a <myStrSection+0xd0>
		if(p_str[string_index]==p_char){
 800a874:	2316      	movs	r3, #22
 800a876:	18fb      	adds	r3, r7, r3
 800a878:	2200      	movs	r2, #0
 800a87a:	5e9b      	ldrsh	r3, [r3, r2]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	18d3      	adds	r3, r2, r3
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	1dba      	adds	r2, r7, #6
 800a884:	7812      	ldrb	r2, [r2, #0]
 800a886:	429a      	cmp	r2, r3
 800a888:	d111      	bne.n	800a8ae <myStrSection+0x74>

			if(tmp_pos==p_pos)break;
 800a88a:	2113      	movs	r1, #19
 800a88c:	187a      	adds	r2, r7, r1
 800a88e:	2320      	movs	r3, #32
 800a890:	18fb      	adds	r3, r7, r3
 800a892:	7812      	ldrb	r2, [r2, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d041      	beq.n	800a91e <myStrSection+0xe4>
			tmp_pos++;
 800a89a:	187b      	adds	r3, r7, r1
 800a89c:	781a      	ldrb	r2, [r3, #0]
 800a89e:	187b      	adds	r3, r7, r1
 800a8a0:	3201      	adds	r2, #1
 800a8a2:	701a      	strb	r2, [r3, #0]
			result_index=0;
 800a8a4:	2314      	movs	r3, #20
 800a8a6:	18fb      	adds	r3, r7, r3
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	801a      	strh	r2, [r3, #0]
 800a8ac:	e024      	b.n	800a8f8 <myStrSection+0xbe>
		}else{
			if(p_str[string_index]>=' '){
 800a8ae:	2116      	movs	r1, #22
 800a8b0:	187b      	adds	r3, r7, r1
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	5e9b      	ldrsh	r3, [r3, r2]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	18d3      	adds	r3, r2, r3
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	2b1f      	cmp	r3, #31
 800a8be:	d91b      	bls.n	800a8f8 <myStrSection+0xbe>
				p_result[result_index]=p_str[string_index];				if(result_index<p_size)result_index++;
 800a8c0:	187b      	adds	r3, r7, r1
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	5e9b      	ldrsh	r3, [r3, r2]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	18d2      	adds	r2, r2, r3
 800a8ca:	2014      	movs	r0, #20
 800a8cc:	183b      	adds	r3, r7, r0
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	5e5b      	ldrsh	r3, [r3, r1]
 800a8d2:	68b9      	ldr	r1, [r7, #8]
 800a8d4:	18cb      	adds	r3, r1, r3
 800a8d6:	7812      	ldrb	r2, [r2, #0]
 800a8d8:	701a      	strb	r2, [r3, #0]
 800a8da:	183b      	adds	r3, r7, r0
 800a8dc:	2200      	movs	r2, #0
 800a8de:	5e9a      	ldrsh	r2, [r3, r2]
 800a8e0:	1dfb      	adds	r3, r7, #7
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	da07      	bge.n	800a8f8 <myStrSection+0xbe>
 800a8e8:	183b      	adds	r3, r7, r0
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	5e9b      	ldrsh	r3, [r3, r2]
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	183b      	adds	r3, r7, r0
 800a8f6:	801a      	strh	r2, [r3, #0]
			}
		}
		string_index++;
 800a8f8:	2116      	movs	r1, #22
 800a8fa:	187b      	adds	r3, r7, r1
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	5e9b      	ldrsh	r3, [r3, r2]
 800a900:	b29b      	uxth	r3, r3
 800a902:	3301      	adds	r3, #1
 800a904:	b29a      	uxth	r2, r3
 800a906:	187b      	adds	r3, r7, r1
 800a908:	801a      	strh	r2, [r3, #0]
	while(p_str[string_index]!=0){
 800a90a:	2316      	movs	r3, #22
 800a90c:	18fb      	adds	r3, r7, r3
 800a90e:	2200      	movs	r2, #0
 800a910:	5e9b      	ldrsh	r3, [r3, r2]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	18d3      	adds	r3, r2, r3
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1ab      	bne.n	800a874 <myStrSection+0x3a>
 800a91c:	e000      	b.n	800a920 <myStrSection+0xe6>
			if(tmp_pos==p_pos)break;
 800a91e:	46c0      	nop			; (mov r8, r8)
	}
	if(tmp_pos!=p_pos){
 800a920:	2313      	movs	r3, #19
 800a922:	18fa      	adds	r2, r7, r3
 800a924:	2320      	movs	r3, #32
 800a926:	18fb      	adds	r3, r7, r3
 800a928:	7812      	ldrb	r2, [r2, #0]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d008      	beq.n	800a942 <myStrSection+0x108>
		result_index=0;
 800a930:	2314      	movs	r3, #20
 800a932:	18fb      	adds	r3, r7, r3
 800a934:	2200      	movs	r2, #0
 800a936:	801a      	strh	r2, [r3, #0]
		string_index=-1;
 800a938:	2316      	movs	r3, #22
 800a93a:	18fb      	adds	r3, r7, r3
 800a93c:	2201      	movs	r2, #1
 800a93e:	4252      	negs	r2, r2
 800a940:	801a      	strh	r2, [r3, #0]
	}
	p_result[result_index]=0;
 800a942:	2314      	movs	r3, #20
 800a944:	18fb      	adds	r3, r7, r3
 800a946:	2200      	movs	r2, #0
 800a948:	5e9b      	ldrsh	r3, [r3, r2]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	18d3      	adds	r3, r2, r3
 800a94e:	2200      	movs	r2, #0
 800a950:	701a      	strb	r2, [r3, #0]

	return string_index;
 800a952:	2316      	movs	r3, #22
 800a954:	18fb      	adds	r3, r7, r3
 800a956:	2200      	movs	r2, #0
 800a958:	5e9b      	ldrsh	r3, [r3, r2]
}
 800a95a:	0018      	movs	r0, r3
 800a95c:	46bd      	mov	sp, r7
 800a95e:	b006      	add	sp, #24
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <myLongStr>:


char* myLongStr(signed long p_val,char *p_dest,short p_size,char p_base){
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	0019      	movs	r1, r3
 800a970:	1dbb      	adds	r3, r7, #6
 800a972:	801a      	strh	r2, [r3, #0]
 800a974:	1d7b      	adds	r3, r7, #5
 800a976:	1c0a      	adds	r2, r1, #0
 800a978:	701a      	strb	r2, [r3, #0]
	unsigned long tmp_index;
	short tmp_size;
	char tmp_val;
	char tmp_iszero;

	tmp_size=0;
 800a97a:	2112      	movs	r1, #18
 800a97c:	187b      	adds	r3, r7, r1
 800a97e:	2200      	movs	r2, #0
 800a980:	801a      	strh	r2, [r3, #0]
	tmp_iszero=1;
 800a982:	2311      	movs	r3, #17
 800a984:	18fb      	adds	r3, r7, r3
 800a986:	2201      	movs	r2, #1
 800a988:	701a      	strb	r2, [r3, #0]

	if(p_base==10){
 800a98a:	1d7b      	adds	r3, r7, #5
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	2b0a      	cmp	r3, #10
 800a990:	d15f      	bne.n	800aa52 <myLongStr+0xee>
		tmp_index=1000000000;
 800a992:	4b6f      	ldr	r3, [pc, #444]	; (800ab50 <myLongStr+0x1ec>)
 800a994:	617b      	str	r3, [r7, #20]

		if(p_val<0){
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	da56      	bge.n	800aa4a <myLongStr+0xe6>
			p_val*=-1;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	425b      	negs	r3, r3
 800a9a0:	60fb      	str	r3, [r7, #12]
			p_dest[tmp_size]='-';
 800a9a2:	187b      	adds	r3, r7, r1
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	5e9b      	ldrsh	r3, [r3, r2]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	18d3      	adds	r3, r2, r3
 800a9ac:	222d      	movs	r2, #45	; 0x2d
 800a9ae:	701a      	strb	r2, [r3, #0]
			tmp_size++;
 800a9b0:	187b      	adds	r3, r7, r1
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	5e9b      	ldrsh	r3, [r3, r2]
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	187b      	adds	r3, r7, r1
 800a9be:	801a      	strh	r2, [r3, #0]
		}

		while(tmp_index>0){
 800a9c0:	e043      	b.n	800aa4a <myLongStr+0xe6>
			tmp_val=p_val/tmp_index;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6979      	ldr	r1, [r7, #20]
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	f7fe fbb0 	bl	800912c <__udivsi3>
 800a9cc:	0003      	movs	r3, r0
 800a9ce:	001a      	movs	r2, r3
 800a9d0:	2110      	movs	r1, #16
 800a9d2:	187b      	adds	r3, r7, r1
 800a9d4:	701a      	strb	r2, [r3, #0]
			if(tmp_val>0)tmp_iszero=0;
 800a9d6:	187b      	adds	r3, r7, r1
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d003      	beq.n	800a9e6 <myLongStr+0x82>
 800a9de:	2311      	movs	r3, #17
 800a9e0:	18fb      	adds	r3, r7, r3
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	701a      	strb	r2, [r3, #0]
			if(tmp_iszero==0){
 800a9e6:	2311      	movs	r3, #17
 800a9e8:	18fb      	adds	r3, r7, r3
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d113      	bne.n	800aa18 <myLongStr+0xb4>
				p_dest[tmp_size]=tmp_val+0x30;
 800a9f0:	2112      	movs	r1, #18
 800a9f2:	187b      	adds	r3, r7, r1
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	5e9b      	ldrsh	r3, [r3, r2]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	18d3      	adds	r3, r2, r3
 800a9fc:	2210      	movs	r2, #16
 800a9fe:	18ba      	adds	r2, r7, r2
 800aa00:	7812      	ldrb	r2, [r2, #0]
 800aa02:	3230      	adds	r2, #48	; 0x30
 800aa04:	b2d2      	uxtb	r2, r2
 800aa06:	701a      	strb	r2, [r3, #0]
				tmp_size++;
 800aa08:	187b      	adds	r3, r7, r1
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	5e9b      	ldrsh	r3, [r3, r2]
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	3301      	adds	r3, #1
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	187b      	adds	r3, r7, r1
 800aa16:	801a      	strh	r2, [r3, #0]
			}
			p_val=p_val-(tmp_val*tmp_index);
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	2310      	movs	r3, #16
 800aa1c:	18fb      	adds	r3, r7, r3
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	6979      	ldr	r1, [r7, #20]
 800aa22:	434b      	muls	r3, r1
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	60fb      	str	r3, [r7, #12]
			tmp_index/=10;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	210a      	movs	r1, #10
 800aa2c:	0018      	movs	r0, r3
 800aa2e:	f7fe fb7d 	bl	800912c <__udivsi3>
 800aa32:	0003      	movs	r3, r0
 800aa34:	617b      	str	r3, [r7, #20]
			if(tmp_size>=(p_size-1))break;
 800aa36:	2312      	movs	r3, #18
 800aa38:	18fb      	adds	r3, r7, r3
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	5e9a      	ldrsh	r2, [r3, r2]
 800aa3e:	1dbb      	adds	r3, r7, #6
 800aa40:	2100      	movs	r1, #0
 800aa42:	5e5b      	ldrsh	r3, [r3, r1]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	429a      	cmp	r2, r3
 800aa48:	da5d      	bge.n	800ab06 <myLongStr+0x1a2>
		while(tmp_index>0){
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1b8      	bne.n	800a9c2 <myLongStr+0x5e>
 800aa50:	e05c      	b.n	800ab0c <myLongStr+0x1a8>
		}

	}
	else if(p_base==16){
 800aa52:	1d7b      	adds	r3, r7, #5
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	2b10      	cmp	r3, #16
 800aa58:	d158      	bne.n	800ab0c <myLongStr+0x1a8>
		tmp_index=32;
 800aa5a:	2320      	movs	r3, #32
 800aa5c:	617b      	str	r3, [r7, #20]
		while(tmp_index>0){
 800aa5e:	e04e      	b.n	800aafe <myLongStr+0x19a>
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	3b04      	subs	r3, #4
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	411a      	asrs	r2, r3
 800aa68:	0013      	movs	r3, r2
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	2010      	movs	r0, #16
 800aa6e:	183b      	adds	r3, r7, r0
 800aa70:	210f      	movs	r1, #15
 800aa72:	400a      	ands	r2, r1
 800aa74:	701a      	strb	r2, [r3, #0]

			if(tmp_val>0)tmp_iszero=0;
 800aa76:	183b      	adds	r3, r7, r0
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d003      	beq.n	800aa86 <myLongStr+0x122>
 800aa7e:	2311      	movs	r3, #17
 800aa80:	18fb      	adds	r3, r7, r3
 800aa82:	2200      	movs	r2, #0
 800aa84:	701a      	strb	r2, [r3, #0]
			if(tmp_iszero==0){
 800aa86:	2311      	movs	r3, #17
 800aa88:	18fb      	adds	r3, r7, r3
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d129      	bne.n	800aae4 <myLongStr+0x180>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 800aa90:	2110      	movs	r1, #16
 800aa92:	187b      	adds	r3, r7, r1
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	2b09      	cmp	r3, #9
 800aa98:	d80b      	bhi.n	800aab2 <myLongStr+0x14e>
 800aa9a:	2312      	movs	r3, #18
 800aa9c:	18fb      	adds	r3, r7, r3
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	5e9b      	ldrsh	r3, [r3, r2]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	18d3      	adds	r3, r2, r3
 800aaa6:	187a      	adds	r2, r7, r1
 800aaa8:	7812      	ldrb	r2, [r2, #0]
 800aaaa:	3230      	adds	r2, #48	; 0x30
 800aaac:	b2d2      	uxtb	r2, r2
 800aaae:	701a      	strb	r2, [r3, #0]
 800aab0:	e00f      	b.n	800aad2 <myLongStr+0x16e>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 800aab2:	2110      	movs	r1, #16
 800aab4:	187b      	adds	r3, r7, r1
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2b09      	cmp	r3, #9
 800aaba:	d90a      	bls.n	800aad2 <myLongStr+0x16e>
 800aabc:	2312      	movs	r3, #18
 800aabe:	18fb      	adds	r3, r7, r3
 800aac0:	2200      	movs	r2, #0
 800aac2:	5e9b      	ldrsh	r3, [r3, r2]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	18d3      	adds	r3, r2, r3
 800aac8:	187a      	adds	r2, r7, r1
 800aaca:	7812      	ldrb	r2, [r2, #0]
 800aacc:	3237      	adds	r2, #55	; 0x37
 800aace:	b2d2      	uxtb	r2, r2
 800aad0:	701a      	strb	r2, [r3, #0]
				tmp_size++;
 800aad2:	2112      	movs	r1, #18
 800aad4:	187b      	adds	r3, r7, r1
 800aad6:	2200      	movs	r2, #0
 800aad8:	5e9b      	ldrsh	r3, [r3, r2]
 800aada:	b29b      	uxth	r3, r3
 800aadc:	3301      	adds	r3, #1
 800aade:	b29a      	uxth	r2, r3
 800aae0:	187b      	adds	r3, r7, r1
 800aae2:	801a      	strh	r2, [r3, #0]
			}

			tmp_index-=4;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	3b04      	subs	r3, #4
 800aae8:	617b      	str	r3, [r7, #20]
			if(tmp_size>=(p_size-1))break;
 800aaea:	2312      	movs	r3, #18
 800aaec:	18fb      	adds	r3, r7, r3
 800aaee:	2200      	movs	r2, #0
 800aaf0:	5e9a      	ldrsh	r2, [r3, r2]
 800aaf2:	1dbb      	adds	r3, r7, #6
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	5e5b      	ldrsh	r3, [r3, r1]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	429a      	cmp	r2, r3
 800aafc:	da05      	bge.n	800ab0a <myLongStr+0x1a6>
		while(tmp_index>0){
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1ad      	bne.n	800aa60 <myLongStr+0xfc>
 800ab04:	e002      	b.n	800ab0c <myLongStr+0x1a8>
			if(tmp_size>=(p_size-1))break;
 800ab06:	46c0      	nop			; (mov r8, r8)
 800ab08:	e000      	b.n	800ab0c <myLongStr+0x1a8>
			if(tmp_size>=(p_size-1))break;
 800ab0a:	46c0      	nop			; (mov r8, r8)
		}

	}

	if(tmp_iszero==1){
 800ab0c:	2311      	movs	r3, #17
 800ab0e:	18fb      	adds	r3, r7, r3
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d10f      	bne.n	800ab36 <myLongStr+0x1d2>
		p_dest[tmp_size]='0';
 800ab16:	2112      	movs	r1, #18
 800ab18:	187b      	adds	r3, r7, r1
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	5e9b      	ldrsh	r3, [r3, r2]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	18d3      	adds	r3, r2, r3
 800ab22:	2230      	movs	r2, #48	; 0x30
 800ab24:	701a      	strb	r2, [r3, #0]
		tmp_size++;
 800ab26:	187b      	adds	r3, r7, r1
 800ab28:	2200      	movs	r2, #0
 800ab2a:	5e9b      	ldrsh	r3, [r3, r2]
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	3301      	adds	r3, #1
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	187b      	adds	r3, r7, r1
 800ab34:	801a      	strh	r2, [r3, #0]
	}

	p_dest[tmp_size]=0;
 800ab36:	2312      	movs	r3, #18
 800ab38:	18fb      	adds	r3, r7, r3
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	5e9b      	ldrsh	r3, [r3, r2]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	18d3      	adds	r3, r2, r3
 800ab42:	2200      	movs	r2, #0
 800ab44:	701a      	strb	r2, [r3, #0]
	return p_dest;
 800ab46:	68bb      	ldr	r3, [r7, #8]
}
 800ab48:	0018      	movs	r0, r3
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	b006      	add	sp, #24
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	3b9aca00 	.word	0x3b9aca00

0800ab54 <myStrLong>:

long myStrLong(char *p_str,char p_base){
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	000a      	movs	r2, r1
 800ab5e:	1cfb      	adds	r3, r7, #3
 800ab60:	701a      	strb	r2, [r3, #0]
	long tmp_long;
	tmp_long=0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	60fb      	str	r3, [r7, #12]
	if(p_base==10){
 800ab66:	1cfb      	adds	r3, r7, #3
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	2b0a      	cmp	r3, #10
 800ab6c:	d120      	bne.n	800abb0 <myStrLong+0x5c>
		while(*p_str != 0){
 800ab6e:	e01a      	b.n	800aba6 <myStrLong+0x52>
			if((*p_str>='0')&&(*p_str<='9')){
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	2b2f      	cmp	r3, #47	; 0x2f
 800ab76:	d90f      	bls.n	800ab98 <myStrLong+0x44>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b39      	cmp	r3, #57	; 0x39
 800ab7e:	d80b      	bhi.n	800ab98 <myStrLong+0x44>
				tmp_long*=10;
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	0013      	movs	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	189b      	adds	r3, r3, r2
 800ab88:	005b      	lsls	r3, r3, #1
 800ab8a:	60fb      	str	r3, [r7, #12]
				tmp_long+=*p_str-0x30;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	3b30      	subs	r3, #48	; 0x30
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	18d3      	adds	r3, r2, r3
 800ab96:	60fb      	str	r3, [r7, #12]
			}
			if(*p_str>='.')
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b2d      	cmp	r3, #45	; 0x2d
 800ab9e:	d902      	bls.n	800aba6 <myStrLong+0x52>
			p_str++;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3301      	adds	r3, #1
 800aba4:	607b      	str	r3, [r7, #4]
		while(*p_str != 0){
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1e0      	bne.n	800ab70 <myStrLong+0x1c>
 800abae:	e03e      	b.n	800ac2e <myStrLong+0xda>
		}
	}
	else if(p_base==16){
 800abb0:	1cfb      	adds	r3, r7, #3
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2b10      	cmp	r3, #16
 800abb6:	d13a      	bne.n	800ac2e <myStrLong+0xda>
		while(*p_str != 0){
 800abb8:	e035      	b.n	800ac26 <myStrLong+0xd2>
			if(*p_str>='0'){
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	2b2f      	cmp	r3, #47	; 0x2f
 800abc0:	d92e      	bls.n	800ac20 <myStrLong+0xcc>
				tmp_long=tmp_long<<4;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	011b      	lsls	r3, r3, #4
 800abc6:	60fb      	str	r3, [r7, #12]
				if((*p_str>='0')&&(*p_str<='9'))tmp_long|=*p_str-'0';
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2b2f      	cmp	r3, #47	; 0x2f
 800abce:	d90a      	bls.n	800abe6 <myStrLong+0x92>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	2b39      	cmp	r3, #57	; 0x39
 800abd6:	d806      	bhi.n	800abe6 <myStrLong+0x92>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	3b30      	subs	r3, #48	; 0x30
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	e01c      	b.n	800ac20 <myStrLong+0xcc>
				else if((*p_str>='a')&&(*p_str<='f'))tmp_long|=(*p_str-'a')+10;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	2b60      	cmp	r3, #96	; 0x60
 800abec:	d90a      	bls.n	800ac04 <myStrLong+0xb0>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	2b66      	cmp	r3, #102	; 0x66
 800abf4:	d806      	bhi.n	800ac04 <myStrLong+0xb0>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	3b57      	subs	r3, #87	; 0x57
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	60fb      	str	r3, [r7, #12]
 800ac02:	e00d      	b.n	800ac20 <myStrLong+0xcc>
				else if((*p_str>='A')&&(*p_str<='F'))tmp_long|=(*p_str-'A')+10;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	2b40      	cmp	r3, #64	; 0x40
 800ac0a:	d909      	bls.n	800ac20 <myStrLong+0xcc>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b46      	cmp	r3, #70	; 0x46
 800ac12:	d805      	bhi.n	800ac20 <myStrLong+0xcc>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	3b37      	subs	r3, #55	; 0x37
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	60fb      	str	r3, [r7, #12]
			}
			p_str++;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3301      	adds	r3, #1
 800ac24:	607b      	str	r3, [r7, #4]
		while(*p_str != 0){
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1c5      	bne.n	800abba <myStrLong+0x66>
		}
	}
	return tmp_long;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
}
 800ac30:	0018      	movs	r0, r3
 800ac32:	46bd      	mov	sp, r7
 800ac34:	b004      	add	sp, #16
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac3e:	4b12      	ldr	r3, [pc, #72]	; (800ac88 <HAL_MspInit+0x50>)
 800ac40:	699a      	ldr	r2, [r3, #24]
 800ac42:	4b11      	ldr	r3, [pc, #68]	; (800ac88 <HAL_MspInit+0x50>)
 800ac44:	2101      	movs	r1, #1
 800ac46:	430a      	orrs	r2, r1
 800ac48:	619a      	str	r2, [r3, #24]
 800ac4a:	4b0f      	ldr	r3, [pc, #60]	; (800ac88 <HAL_MspInit+0x50>)
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4013      	ands	r3, r2
 800ac52:	607b      	str	r3, [r7, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac56:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <HAL_MspInit+0x50>)
 800ac58:	69da      	ldr	r2, [r3, #28]
 800ac5a:	4b0b      	ldr	r3, [pc, #44]	; (800ac88 <HAL_MspInit+0x50>)
 800ac5c:	2180      	movs	r1, #128	; 0x80
 800ac5e:	0549      	lsls	r1, r1, #21
 800ac60:	430a      	orrs	r2, r1
 800ac62:	61da      	str	r2, [r3, #28]
 800ac64:	4b08      	ldr	r3, [pc, #32]	; (800ac88 <HAL_MspInit+0x50>)
 800ac66:	69da      	ldr	r2, [r3, #28]
 800ac68:	2380      	movs	r3, #128	; 0x80
 800ac6a:	055b      	lsls	r3, r3, #21
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	603b      	str	r3, [r7, #0]
 800ac70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800ac72:	2302      	movs	r3, #2
 800ac74:	425b      	negs	r3, r3
 800ac76:	2200      	movs	r2, #0
 800ac78:	2103      	movs	r1, #3
 800ac7a:	0018      	movs	r0, r3
 800ac7c:	f000 fab6 	bl	800b1ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac80:	46c0      	nop			; (mov r8, r8)
 800ac82:	46bd      	mov	sp, r7
 800ac84:	b002      	add	sp, #8
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	40021000 	.word	0x40021000

0800ac8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ac8c:	b590      	push	{r4, r7, lr}
 800ac8e:	b08b      	sub	sp, #44	; 0x2c
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac94:	2414      	movs	r4, #20
 800ac96:	193b      	adds	r3, r7, r4
 800ac98:	0018      	movs	r0, r3
 800ac9a:	2314      	movs	r3, #20
 800ac9c:	001a      	movs	r2, r3
 800ac9e:	2100      	movs	r1, #0
 800aca0:	f004 f867 	bl	800ed72 <memset>
  if(hspi->Instance==SPI2)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a1c      	ldr	r2, [pc, #112]	; (800ad1c <HAL_SPI_MspInit+0x90>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d132      	bne.n	800ad14 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800acae:	4b1c      	ldr	r3, [pc, #112]	; (800ad20 <HAL_SPI_MspInit+0x94>)
 800acb0:	69da      	ldr	r2, [r3, #28]
 800acb2:	4b1b      	ldr	r3, [pc, #108]	; (800ad20 <HAL_SPI_MspInit+0x94>)
 800acb4:	2180      	movs	r1, #128	; 0x80
 800acb6:	01c9      	lsls	r1, r1, #7
 800acb8:	430a      	orrs	r2, r1
 800acba:	61da      	str	r2, [r3, #28]
 800acbc:	4b18      	ldr	r3, [pc, #96]	; (800ad20 <HAL_SPI_MspInit+0x94>)
 800acbe:	69da      	ldr	r2, [r3, #28]
 800acc0:	2380      	movs	r3, #128	; 0x80
 800acc2:	01db      	lsls	r3, r3, #7
 800acc4:	4013      	ands	r3, r2
 800acc6:	613b      	str	r3, [r7, #16]
 800acc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800acca:	4b15      	ldr	r3, [pc, #84]	; (800ad20 <HAL_SPI_MspInit+0x94>)
 800accc:	695a      	ldr	r2, [r3, #20]
 800acce:	4b14      	ldr	r3, [pc, #80]	; (800ad20 <HAL_SPI_MspInit+0x94>)
 800acd0:	2180      	movs	r1, #128	; 0x80
 800acd2:	02c9      	lsls	r1, r1, #11
 800acd4:	430a      	orrs	r2, r1
 800acd6:	615a      	str	r2, [r3, #20]
 800acd8:	4b11      	ldr	r3, [pc, #68]	; (800ad20 <HAL_SPI_MspInit+0x94>)
 800acda:	695a      	ldr	r2, [r3, #20]
 800acdc:	2380      	movs	r3, #128	; 0x80
 800acde:	02db      	lsls	r3, r3, #11
 800ace0:	4013      	ands	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800ace6:	193b      	adds	r3, r7, r4
 800ace8:	22e0      	movs	r2, #224	; 0xe0
 800acea:	0212      	lsls	r2, r2, #8
 800acec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acee:	0021      	movs	r1, r4
 800acf0:	187b      	adds	r3, r7, r1
 800acf2:	2202      	movs	r2, #2
 800acf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acf6:	187b      	adds	r3, r7, r1
 800acf8:	2200      	movs	r2, #0
 800acfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800acfc:	187b      	adds	r3, r7, r1
 800acfe:	2203      	movs	r2, #3
 800ad00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800ad02:	187b      	adds	r3, r7, r1
 800ad04:	2200      	movs	r2, #0
 800ad06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad08:	187b      	adds	r3, r7, r1
 800ad0a:	4a06      	ldr	r2, [pc, #24]	; (800ad24 <HAL_SPI_MspInit+0x98>)
 800ad0c:	0019      	movs	r1, r3
 800ad0e:	0010      	movs	r0, r2
 800ad10:	f000 fb1c 	bl	800b34c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800ad14:	46c0      	nop			; (mov r8, r8)
 800ad16:	46bd      	mov	sp, r7
 800ad18:	b00b      	add	sp, #44	; 0x2c
 800ad1a:	bd90      	pop	{r4, r7, pc}
 800ad1c:	40003800 	.word	0x40003800
 800ad20:	40021000 	.word	0x40021000
 800ad24:	48000400 	.word	0x48000400

0800ad28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ad28:	b590      	push	{r4, r7, lr}
 800ad2a:	b08d      	sub	sp, #52	; 0x34
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad30:	241c      	movs	r4, #28
 800ad32:	193b      	adds	r3, r7, r4
 800ad34:	0018      	movs	r0, r3
 800ad36:	2314      	movs	r3, #20
 800ad38:	001a      	movs	r2, r3
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	f004 f819 	bl	800ed72 <memset>
  if(huart->Instance==USART1)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a49      	ldr	r2, [pc, #292]	; (800ae6c <HAL_UART_MspInit+0x144>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d134      	bne.n	800adb4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ad4a:	4b49      	ldr	r3, [pc, #292]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800ad4c:	699a      	ldr	r2, [r3, #24]
 800ad4e:	4b48      	ldr	r3, [pc, #288]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800ad50:	2180      	movs	r1, #128	; 0x80
 800ad52:	01c9      	lsls	r1, r1, #7
 800ad54:	430a      	orrs	r2, r1
 800ad56:	619a      	str	r2, [r3, #24]
 800ad58:	4b45      	ldr	r3, [pc, #276]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800ad5a:	699a      	ldr	r2, [r3, #24]
 800ad5c:	2380      	movs	r3, #128	; 0x80
 800ad5e:	01db      	lsls	r3, r3, #7
 800ad60:	4013      	ands	r3, r2
 800ad62:	61bb      	str	r3, [r7, #24]
 800ad64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad66:	4b42      	ldr	r3, [pc, #264]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800ad68:	695a      	ldr	r2, [r3, #20]
 800ad6a:	4b41      	ldr	r3, [pc, #260]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800ad6c:	2180      	movs	r1, #128	; 0x80
 800ad6e:	0289      	lsls	r1, r1, #10
 800ad70:	430a      	orrs	r2, r1
 800ad72:	615a      	str	r2, [r3, #20]
 800ad74:	4b3e      	ldr	r3, [pc, #248]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800ad76:	695a      	ldr	r2, [r3, #20]
 800ad78:	2380      	movs	r3, #128	; 0x80
 800ad7a:	029b      	lsls	r3, r3, #10
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	617b      	str	r3, [r7, #20]
 800ad80:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ad82:	193b      	adds	r3, r7, r4
 800ad84:	22c0      	movs	r2, #192	; 0xc0
 800ad86:	00d2      	lsls	r2, r2, #3
 800ad88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad8a:	0021      	movs	r1, r4
 800ad8c:	187b      	adds	r3, r7, r1
 800ad8e:	2202      	movs	r2, #2
 800ad90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad92:	187b      	adds	r3, r7, r1
 800ad94:	2200      	movs	r2, #0
 800ad96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad98:	187b      	adds	r3, r7, r1
 800ad9a:	2203      	movs	r2, #3
 800ad9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800ad9e:	187b      	adds	r3, r7, r1
 800ada0:	2201      	movs	r2, #1
 800ada2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ada4:	187a      	adds	r2, r7, r1
 800ada6:	2390      	movs	r3, #144	; 0x90
 800ada8:	05db      	lsls	r3, r3, #23
 800adaa:	0011      	movs	r1, r2
 800adac:	0018      	movs	r0, r3
 800adae:	f000 facd 	bl	800b34c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800adb2:	e056      	b.n	800ae62 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a2e      	ldr	r2, [pc, #184]	; (800ae74 <HAL_UART_MspInit+0x14c>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d151      	bne.n	800ae62 <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800adbe:	4b2c      	ldr	r3, [pc, #176]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800adc0:	69da      	ldr	r2, [r3, #28]
 800adc2:	4b2b      	ldr	r3, [pc, #172]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800adc4:	2180      	movs	r1, #128	; 0x80
 800adc6:	0289      	lsls	r1, r1, #10
 800adc8:	430a      	orrs	r2, r1
 800adca:	61da      	str	r2, [r3, #28]
 800adcc:	4b28      	ldr	r3, [pc, #160]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800adce:	69da      	ldr	r2, [r3, #28]
 800add0:	2380      	movs	r3, #128	; 0x80
 800add2:	029b      	lsls	r3, r3, #10
 800add4:	4013      	ands	r3, r2
 800add6:	613b      	str	r3, [r7, #16]
 800add8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adda:	4b25      	ldr	r3, [pc, #148]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800addc:	695a      	ldr	r2, [r3, #20]
 800adde:	4b24      	ldr	r3, [pc, #144]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800ade0:	2180      	movs	r1, #128	; 0x80
 800ade2:	0289      	lsls	r1, r1, #10
 800ade4:	430a      	orrs	r2, r1
 800ade6:	615a      	str	r2, [r3, #20]
 800ade8:	4b21      	ldr	r3, [pc, #132]	; (800ae70 <HAL_UART_MspInit+0x148>)
 800adea:	695a      	ldr	r2, [r3, #20]
 800adec:	2380      	movs	r3, #128	; 0x80
 800adee:	029b      	lsls	r3, r3, #10
 800adf0:	4013      	ands	r3, r2
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800adf6:	241c      	movs	r4, #28
 800adf8:	193b      	adds	r3, r7, r4
 800adfa:	2204      	movs	r2, #4
 800adfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adfe:	193b      	adds	r3, r7, r4
 800ae00:	2202      	movs	r2, #2
 800ae02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae04:	193b      	adds	r3, r7, r4
 800ae06:	2200      	movs	r2, #0
 800ae08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ae0a:	193b      	adds	r3, r7, r4
 800ae0c:	2203      	movs	r2, #3
 800ae0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800ae10:	193b      	adds	r3, r7, r4
 800ae12:	2201      	movs	r2, #1
 800ae14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae16:	193a      	adds	r2, r7, r4
 800ae18:	2390      	movs	r3, #144	; 0x90
 800ae1a:	05db      	lsls	r3, r3, #23
 800ae1c:	0011      	movs	r1, r2
 800ae1e:	0018      	movs	r0, r3
 800ae20:	f000 fa94 	bl	800b34c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ae24:	0021      	movs	r1, r4
 800ae26:	187b      	adds	r3, r7, r1
 800ae28:	2208      	movs	r2, #8
 800ae2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae2c:	187b      	adds	r3, r7, r1
 800ae2e:	2202      	movs	r2, #2
 800ae30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae32:	187b      	adds	r3, r7, r1
 800ae34:	2201      	movs	r2, #1
 800ae36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ae38:	187b      	adds	r3, r7, r1
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800ae3e:	187b      	adds	r3, r7, r1
 800ae40:	2201      	movs	r2, #1
 800ae42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae44:	187a      	adds	r2, r7, r1
 800ae46:	2390      	movs	r3, #144	; 0x90
 800ae48:	05db      	lsls	r3, r3, #23
 800ae4a:	0011      	movs	r1, r2
 800ae4c:	0018      	movs	r0, r3
 800ae4e:	f000 fa7d 	bl	800b34c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800ae52:	2200      	movs	r2, #0
 800ae54:	2103      	movs	r1, #3
 800ae56:	201c      	movs	r0, #28
 800ae58:	f000 f9c8 	bl	800b1ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ae5c:	201c      	movs	r0, #28
 800ae5e:	f000 f9da 	bl	800b216 <HAL_NVIC_EnableIRQ>
}
 800ae62:	46c0      	nop			; (mov r8, r8)
 800ae64:	46bd      	mov	sp, r7
 800ae66:	b00d      	add	sp, #52	; 0x34
 800ae68:	bd90      	pop	{r4, r7, pc}
 800ae6a:	46c0      	nop			; (mov r8, r8)
 800ae6c:	40013800 	.word	0x40013800
 800ae70:	40021000 	.word	0x40021000
 800ae74:	40004400 	.word	0x40004400

0800ae78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ae7c:	e7fe      	b.n	800ae7c <NMI_Handler+0x4>

0800ae7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ae82:	e7fe      	b.n	800ae82 <HardFault_Handler+0x4>

0800ae84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ae88:	f000 f8c4 	bl	800b014 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ae8c:	f003 fbf2 	bl	800e674 <xTaskGetSchedulerState>
 800ae90:	0003      	movs	r3, r0
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d001      	beq.n	800ae9a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800ae96:	f003 fd57 	bl	800e948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ae9a:	46c0      	nop			; (mov r8, r8)
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800aea4:	4b03      	ldr	r3, [pc, #12]	; (800aeb4 <USART2_IRQHandler+0x14>)
 800aea6:	0018      	movs	r0, r3
 800aea8:	f001 fc96 	bl	800c7d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800aeac:	46c0      	nop			; (mov r8, r8)
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	46c0      	nop			; (mov r8, r8)
 800aeb4:	2000248c 	.word	0x2000248c

0800aeb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800aec0:	4a14      	ldr	r2, [pc, #80]	; (800af14 <_sbrk+0x5c>)
 800aec2:	4b15      	ldr	r3, [pc, #84]	; (800af18 <_sbrk+0x60>)
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800aecc:	4b13      	ldr	r3, [pc, #76]	; (800af1c <_sbrk+0x64>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d102      	bne.n	800aeda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800aed4:	4b11      	ldr	r3, [pc, #68]	; (800af1c <_sbrk+0x64>)
 800aed6:	4a12      	ldr	r2, [pc, #72]	; (800af20 <_sbrk+0x68>)
 800aed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800aeda:	4b10      	ldr	r3, [pc, #64]	; (800af1c <_sbrk+0x64>)
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	18d3      	adds	r3, r2, r3
 800aee2:	693a      	ldr	r2, [r7, #16]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d207      	bcs.n	800aef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800aee8:	f003 ff10 	bl	800ed0c <__errno>
 800aeec:	0003      	movs	r3, r0
 800aeee:	220c      	movs	r2, #12
 800aef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800aef2:	2301      	movs	r3, #1
 800aef4:	425b      	negs	r3, r3
 800aef6:	e009      	b.n	800af0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800aef8:	4b08      	ldr	r3, [pc, #32]	; (800af1c <_sbrk+0x64>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800aefe:	4b07      	ldr	r3, [pc, #28]	; (800af1c <_sbrk+0x64>)
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	18d2      	adds	r2, r2, r3
 800af06:	4b05      	ldr	r3, [pc, #20]	; (800af1c <_sbrk+0x64>)
 800af08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800af0a:	68fb      	ldr	r3, [r7, #12]
}
 800af0c:	0018      	movs	r0, r3
 800af0e:	46bd      	mov	sp, r7
 800af10:	b006      	add	sp, #24
 800af12:	bd80      	pop	{r7, pc}
 800af14:	20004000 	.word	0x20004000
 800af18:	00000400 	.word	0x00000400
 800af1c:	20000458 	.word	0x20000458
 800af20:	20002528 	.word	0x20002528

0800af24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800af28:	46c0      	nop			; (mov r8, r8)
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
	...

0800af30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800af30:	480d      	ldr	r0, [pc, #52]	; (800af68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800af32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800af34:	480d      	ldr	r0, [pc, #52]	; (800af6c <LoopForever+0x6>)
  ldr r1, =_edata
 800af36:	490e      	ldr	r1, [pc, #56]	; (800af70 <LoopForever+0xa>)
  ldr r2, =_sidata
 800af38:	4a0e      	ldr	r2, [pc, #56]	; (800af74 <LoopForever+0xe>)
  movs r3, #0
 800af3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800af3c:	e002      	b.n	800af44 <LoopCopyDataInit>

0800af3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800af3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800af40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800af42:	3304      	adds	r3, #4

0800af44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800af44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800af46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800af48:	d3f9      	bcc.n	800af3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800af4a:	4a0b      	ldr	r2, [pc, #44]	; (800af78 <LoopForever+0x12>)
  ldr r4, =_ebss
 800af4c:	4c0b      	ldr	r4, [pc, #44]	; (800af7c <LoopForever+0x16>)
  movs r3, #0
 800af4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800af50:	e001      	b.n	800af56 <LoopFillZerobss>

0800af52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800af52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800af54:	3204      	adds	r2, #4

0800af56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800af56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800af58:	d3fb      	bcc.n	800af52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800af5a:	f7ff ffe3 	bl	800af24 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800af5e:	f003 fedb 	bl	800ed18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800af62:	f7ff fa29 	bl	800a3b8 <main>

0800af66 <LoopForever>:

LoopForever:
    b LoopForever
 800af66:	e7fe      	b.n	800af66 <LoopForever>
  ldr   r0, =_estack
 800af68:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800af6c:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 800af70:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 800af74:	0800fac0 	.word	0x0800fac0
  ldr r2, =_sbss
 800af78:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 800af7c:	20002524 	.word	0x20002524

0800af80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800af80:	e7fe      	b.n	800af80 <ADC1_COMP_IRQHandler>
	...

0800af84 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800af88:	4b07      	ldr	r3, [pc, #28]	; (800afa8 <HAL_Init+0x24>)
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	4b06      	ldr	r3, [pc, #24]	; (800afa8 <HAL_Init+0x24>)
 800af8e:	2110      	movs	r1, #16
 800af90:	430a      	orrs	r2, r1
 800af92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800af94:	2003      	movs	r0, #3
 800af96:	f000 f809 	bl	800afac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800af9a:	f7ff fe4d 	bl	800ac38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	0018      	movs	r0, r3
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	40022000 	.word	0x40022000

0800afac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800afac:	b590      	push	{r4, r7, lr}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800afb4:	4b14      	ldr	r3, [pc, #80]	; (800b008 <HAL_InitTick+0x5c>)
 800afb6:	681c      	ldr	r4, [r3, #0]
 800afb8:	4b14      	ldr	r3, [pc, #80]	; (800b00c <HAL_InitTick+0x60>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	0019      	movs	r1, r3
 800afbe:	23fa      	movs	r3, #250	; 0xfa
 800afc0:	0098      	lsls	r0, r3, #2
 800afc2:	f7fe f8b3 	bl	800912c <__udivsi3>
 800afc6:	0003      	movs	r3, r0
 800afc8:	0019      	movs	r1, r3
 800afca:	0020      	movs	r0, r4
 800afcc:	f7fe f8ae 	bl	800912c <__udivsi3>
 800afd0:	0003      	movs	r3, r0
 800afd2:	0018      	movs	r0, r3
 800afd4:	f000 f92f 	bl	800b236 <HAL_SYSTICK_Config>
 800afd8:	1e03      	subs	r3, r0, #0
 800afda:	d001      	beq.n	800afe0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e00f      	b.n	800b000 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d80b      	bhi.n	800affe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	2301      	movs	r3, #1
 800afea:	425b      	negs	r3, r3
 800afec:	2200      	movs	r2, #0
 800afee:	0018      	movs	r0, r3
 800aff0:	f000 f8fc 	bl	800b1ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800aff4:	4b06      	ldr	r3, [pc, #24]	; (800b010 <HAL_InitTick+0x64>)
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	e000      	b.n	800b000 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
}
 800b000:	0018      	movs	r0, r3
 800b002:	46bd      	mov	sp, r7
 800b004:	b003      	add	sp, #12
 800b006:	bd90      	pop	{r4, r7, pc}
 800b008:	2000015c 	.word	0x2000015c
 800b00c:	20000164 	.word	0x20000164
 800b010:	20000160 	.word	0x20000160

0800b014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b018:	4b05      	ldr	r3, [pc, #20]	; (800b030 <HAL_IncTick+0x1c>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	001a      	movs	r2, r3
 800b01e:	4b05      	ldr	r3, [pc, #20]	; (800b034 <HAL_IncTick+0x20>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	18d2      	adds	r2, r2, r3
 800b024:	4b03      	ldr	r3, [pc, #12]	; (800b034 <HAL_IncTick+0x20>)
 800b026:	601a      	str	r2, [r3, #0]
}
 800b028:	46c0      	nop			; (mov r8, r8)
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	46c0      	nop			; (mov r8, r8)
 800b030:	20000164 	.word	0x20000164
 800b034:	20002510 	.word	0x20002510

0800b038 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	af00      	add	r7, sp, #0
  return uwTick;
 800b03c:	4b02      	ldr	r3, [pc, #8]	; (800b048 <HAL_GetTick+0x10>)
 800b03e:	681b      	ldr	r3, [r3, #0]
}
 800b040:	0018      	movs	r0, r3
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	46c0      	nop			; (mov r8, r8)
 800b048:	20002510 	.word	0x20002510

0800b04c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b054:	f7ff fff0 	bl	800b038 <HAL_GetTick>
 800b058:	0003      	movs	r3, r0
 800b05a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	3301      	adds	r3, #1
 800b064:	d005      	beq.n	800b072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b066:	4b0a      	ldr	r3, [pc, #40]	; (800b090 <HAL_Delay+0x44>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	001a      	movs	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	189b      	adds	r3, r3, r2
 800b070:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800b072:	46c0      	nop			; (mov r8, r8)
 800b074:	f7ff ffe0 	bl	800b038 <HAL_GetTick>
 800b078:	0002      	movs	r2, r0
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	429a      	cmp	r2, r3
 800b082:	d8f7      	bhi.n	800b074 <HAL_Delay+0x28>
  {
  }
}
 800b084:	46c0      	nop			; (mov r8, r8)
 800b086:	46c0      	nop			; (mov r8, r8)
 800b088:	46bd      	mov	sp, r7
 800b08a:	b004      	add	sp, #16
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	46c0      	nop			; (mov r8, r8)
 800b090:	20000164 	.word	0x20000164

0800b094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	0002      	movs	r2, r0
 800b09c:	1dfb      	adds	r3, r7, #7
 800b09e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b0a0:	1dfb      	adds	r3, r7, #7
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	2b7f      	cmp	r3, #127	; 0x7f
 800b0a6:	d809      	bhi.n	800b0bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0a8:	1dfb      	adds	r3, r7, #7
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	001a      	movs	r2, r3
 800b0ae:	231f      	movs	r3, #31
 800b0b0:	401a      	ands	r2, r3
 800b0b2:	4b04      	ldr	r3, [pc, #16]	; (800b0c4 <__NVIC_EnableIRQ+0x30>)
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	4091      	lsls	r1, r2
 800b0b8:	000a      	movs	r2, r1
 800b0ba:	601a      	str	r2, [r3, #0]
  }
}
 800b0bc:	46c0      	nop			; (mov r8, r8)
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	b002      	add	sp, #8
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	e000e100 	.word	0xe000e100

0800b0c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b0c8:	b590      	push	{r4, r7, lr}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	0002      	movs	r2, r0
 800b0d0:	6039      	str	r1, [r7, #0]
 800b0d2:	1dfb      	adds	r3, r7, #7
 800b0d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b0d6:	1dfb      	adds	r3, r7, #7
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	2b7f      	cmp	r3, #127	; 0x7f
 800b0dc:	d828      	bhi.n	800b130 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b0de:	4a2f      	ldr	r2, [pc, #188]	; (800b19c <__NVIC_SetPriority+0xd4>)
 800b0e0:	1dfb      	adds	r3, r7, #7
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	b25b      	sxtb	r3, r3
 800b0e6:	089b      	lsrs	r3, r3, #2
 800b0e8:	33c0      	adds	r3, #192	; 0xc0
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	589b      	ldr	r3, [r3, r2]
 800b0ee:	1dfa      	adds	r2, r7, #7
 800b0f0:	7812      	ldrb	r2, [r2, #0]
 800b0f2:	0011      	movs	r1, r2
 800b0f4:	2203      	movs	r2, #3
 800b0f6:	400a      	ands	r2, r1
 800b0f8:	00d2      	lsls	r2, r2, #3
 800b0fa:	21ff      	movs	r1, #255	; 0xff
 800b0fc:	4091      	lsls	r1, r2
 800b0fe:	000a      	movs	r2, r1
 800b100:	43d2      	mvns	r2, r2
 800b102:	401a      	ands	r2, r3
 800b104:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	019b      	lsls	r3, r3, #6
 800b10a:	22ff      	movs	r2, #255	; 0xff
 800b10c:	401a      	ands	r2, r3
 800b10e:	1dfb      	adds	r3, r7, #7
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	0018      	movs	r0, r3
 800b114:	2303      	movs	r3, #3
 800b116:	4003      	ands	r3, r0
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b11c:	481f      	ldr	r0, [pc, #124]	; (800b19c <__NVIC_SetPriority+0xd4>)
 800b11e:	1dfb      	adds	r3, r7, #7
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	b25b      	sxtb	r3, r3
 800b124:	089b      	lsrs	r3, r3, #2
 800b126:	430a      	orrs	r2, r1
 800b128:	33c0      	adds	r3, #192	; 0xc0
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800b12e:	e031      	b.n	800b194 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b130:	4a1b      	ldr	r2, [pc, #108]	; (800b1a0 <__NVIC_SetPriority+0xd8>)
 800b132:	1dfb      	adds	r3, r7, #7
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	0019      	movs	r1, r3
 800b138:	230f      	movs	r3, #15
 800b13a:	400b      	ands	r3, r1
 800b13c:	3b08      	subs	r3, #8
 800b13e:	089b      	lsrs	r3, r3, #2
 800b140:	3306      	adds	r3, #6
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	18d3      	adds	r3, r2, r3
 800b146:	3304      	adds	r3, #4
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	1dfa      	adds	r2, r7, #7
 800b14c:	7812      	ldrb	r2, [r2, #0]
 800b14e:	0011      	movs	r1, r2
 800b150:	2203      	movs	r2, #3
 800b152:	400a      	ands	r2, r1
 800b154:	00d2      	lsls	r2, r2, #3
 800b156:	21ff      	movs	r1, #255	; 0xff
 800b158:	4091      	lsls	r1, r2
 800b15a:	000a      	movs	r2, r1
 800b15c:	43d2      	mvns	r2, r2
 800b15e:	401a      	ands	r2, r3
 800b160:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	019b      	lsls	r3, r3, #6
 800b166:	22ff      	movs	r2, #255	; 0xff
 800b168:	401a      	ands	r2, r3
 800b16a:	1dfb      	adds	r3, r7, #7
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	0018      	movs	r0, r3
 800b170:	2303      	movs	r3, #3
 800b172:	4003      	ands	r3, r0
 800b174:	00db      	lsls	r3, r3, #3
 800b176:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b178:	4809      	ldr	r0, [pc, #36]	; (800b1a0 <__NVIC_SetPriority+0xd8>)
 800b17a:	1dfb      	adds	r3, r7, #7
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	001c      	movs	r4, r3
 800b180:	230f      	movs	r3, #15
 800b182:	4023      	ands	r3, r4
 800b184:	3b08      	subs	r3, #8
 800b186:	089b      	lsrs	r3, r3, #2
 800b188:	430a      	orrs	r2, r1
 800b18a:	3306      	adds	r3, #6
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	18c3      	adds	r3, r0, r3
 800b190:	3304      	adds	r3, #4
 800b192:	601a      	str	r2, [r3, #0]
}
 800b194:	46c0      	nop			; (mov r8, r8)
 800b196:	46bd      	mov	sp, r7
 800b198:	b003      	add	sp, #12
 800b19a:	bd90      	pop	{r4, r7, pc}
 800b19c:	e000e100 	.word	0xe000e100
 800b1a0:	e000ed00 	.word	0xe000ed00

0800b1a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	1e5a      	subs	r2, r3, #1
 800b1b0:	2380      	movs	r3, #128	; 0x80
 800b1b2:	045b      	lsls	r3, r3, #17
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d301      	bcc.n	800b1bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e010      	b.n	800b1de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b1bc:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <SysTick_Config+0x44>)
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	3a01      	subs	r2, #1
 800b1c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	425b      	negs	r3, r3
 800b1c8:	2103      	movs	r1, #3
 800b1ca:	0018      	movs	r0, r3
 800b1cc:	f7ff ff7c 	bl	800b0c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1d0:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <SysTick_Config+0x44>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1d6:	4b04      	ldr	r3, [pc, #16]	; (800b1e8 <SysTick_Config+0x44>)
 800b1d8:	2207      	movs	r2, #7
 800b1da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	0018      	movs	r0, r3
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	b002      	add	sp, #8
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	46c0      	nop			; (mov r8, r8)
 800b1e8:	e000e010 	.word	0xe000e010

0800b1ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60b9      	str	r1, [r7, #8]
 800b1f4:	607a      	str	r2, [r7, #4]
 800b1f6:	210f      	movs	r1, #15
 800b1f8:	187b      	adds	r3, r7, r1
 800b1fa:	1c02      	adds	r2, r0, #0
 800b1fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	187b      	adds	r3, r7, r1
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	b25b      	sxtb	r3, r3
 800b206:	0011      	movs	r1, r2
 800b208:	0018      	movs	r0, r3
 800b20a:	f7ff ff5d 	bl	800b0c8 <__NVIC_SetPriority>
}
 800b20e:	46c0      	nop			; (mov r8, r8)
 800b210:	46bd      	mov	sp, r7
 800b212:	b004      	add	sp, #16
 800b214:	bd80      	pop	{r7, pc}

0800b216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	0002      	movs	r2, r0
 800b21e:	1dfb      	adds	r3, r7, #7
 800b220:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b222:	1dfb      	adds	r3, r7, #7
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b25b      	sxtb	r3, r3
 800b228:	0018      	movs	r0, r3
 800b22a:	f7ff ff33 	bl	800b094 <__NVIC_EnableIRQ>
}
 800b22e:	46c0      	nop			; (mov r8, r8)
 800b230:	46bd      	mov	sp, r7
 800b232:	b002      	add	sp, #8
 800b234:	bd80      	pop	{r7, pc}

0800b236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	0018      	movs	r0, r3
 800b242:	f7ff ffaf 	bl	800b1a4 <SysTick_Config>
 800b246:	0003      	movs	r3, r0
}
 800b248:	0018      	movs	r0, r3
 800b24a:	46bd      	mov	sp, r7
 800b24c:	b002      	add	sp, #8
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2221      	movs	r2, #33	; 0x21
 800b25c:	5c9b      	ldrb	r3, [r3, r2]
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b02      	cmp	r3, #2
 800b262:	d008      	beq.n	800b276 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2204      	movs	r2, #4
 800b268:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2220      	movs	r2, #32
 800b26e:	2100      	movs	r1, #0
 800b270:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	e020      	b.n	800b2b8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	210e      	movs	r1, #14
 800b282:	438a      	bics	r2, r1
 800b284:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2101      	movs	r1, #1
 800b292:	438a      	bics	r2, r1
 800b294:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b29e:	2101      	movs	r1, #1
 800b2a0:	4091      	lsls	r1, r2
 800b2a2:	000a      	movs	r2, r1
 800b2a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2221      	movs	r2, #33	; 0x21
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	0018      	movs	r0, r3
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	b002      	add	sp, #8
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2c8:	210f      	movs	r1, #15
 800b2ca:	187b      	adds	r3, r7, r1
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2221      	movs	r2, #33	; 0x21
 800b2d4:	5c9b      	ldrb	r3, [r3, r2]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d006      	beq.n	800b2ea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2204      	movs	r2, #4
 800b2e0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800b2e2:	187b      	adds	r3, r7, r1
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	701a      	strb	r2, [r3, #0]
 800b2e8:	e028      	b.n	800b33c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	210e      	movs	r1, #14
 800b2f6:	438a      	bics	r2, r1
 800b2f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2101      	movs	r1, #1
 800b306:	438a      	bics	r2, r1
 800b308:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b312:	2101      	movs	r1, #1
 800b314:	4091      	lsls	r1, r2
 800b316:	000a      	movs	r2, r1
 800b318:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2221      	movs	r2, #33	; 0x21
 800b31e:	2101      	movs	r1, #1
 800b320:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2220      	movs	r2, #32
 800b326:	2100      	movs	r1, #0
 800b328:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	0010      	movs	r0, r2
 800b33a:	4798      	blx	r3
    } 
  }
  return status;
 800b33c:	230f      	movs	r3, #15
 800b33e:	18fb      	adds	r3, r7, r3
 800b340:	781b      	ldrb	r3, [r3, #0]
}
 800b342:	0018      	movs	r0, r3
 800b344:	46bd      	mov	sp, r7
 800b346:	b004      	add	sp, #16
 800b348:	bd80      	pop	{r7, pc}
	...

0800b34c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b356:	2300      	movs	r3, #0
 800b358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b35a:	e155      	b.n	800b608 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2101      	movs	r1, #1
 800b362:	697a      	ldr	r2, [r7, #20]
 800b364:	4091      	lsls	r1, r2
 800b366:	000a      	movs	r2, r1
 800b368:	4013      	ands	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d100      	bne.n	800b374 <HAL_GPIO_Init+0x28>
 800b372:	e146      	b.n	800b602 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	2203      	movs	r2, #3
 800b37a:	4013      	ands	r3, r2
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d005      	beq.n	800b38c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	2203      	movs	r2, #3
 800b386:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b388:	2b02      	cmp	r3, #2
 800b38a:	d130      	bne.n	800b3ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	2203      	movs	r2, #3
 800b398:	409a      	lsls	r2, r3
 800b39a:	0013      	movs	r3, r2
 800b39c:	43da      	mvns	r2, r3
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	68da      	ldr	r2, [r3, #12]
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	005b      	lsls	r3, r3, #1
 800b3ac:	409a      	lsls	r2, r3
 800b3ae:	0013      	movs	r3, r2
 800b3b0:	693a      	ldr	r2, [r7, #16]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	409a      	lsls	r2, r3
 800b3c8:	0013      	movs	r3, r2
 800b3ca:	43da      	mvns	r2, r3
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	091b      	lsrs	r3, r3, #4
 800b3d8:	2201      	movs	r2, #1
 800b3da:	401a      	ands	r2, r3
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	409a      	lsls	r2, r3
 800b3e0:	0013      	movs	r3, r2
 800b3e2:	693a      	ldr	r2, [r7, #16]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	693a      	ldr	r2, [r7, #16]
 800b3ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	2203      	movs	r2, #3
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d017      	beq.n	800b42a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	2203      	movs	r2, #3
 800b406:	409a      	lsls	r2, r3
 800b408:	0013      	movs	r3, r2
 800b40a:	43da      	mvns	r2, r3
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	4013      	ands	r3, r2
 800b410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	689a      	ldr	r2, [r3, #8]
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	409a      	lsls	r2, r3
 800b41c:	0013      	movs	r3, r2
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	4313      	orrs	r3, r2
 800b422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	2203      	movs	r2, #3
 800b430:	4013      	ands	r3, r2
 800b432:	2b02      	cmp	r3, #2
 800b434:	d123      	bne.n	800b47e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	08da      	lsrs	r2, r3, #3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	3208      	adds	r2, #8
 800b43e:	0092      	lsls	r2, r2, #2
 800b440:	58d3      	ldr	r3, [r2, r3]
 800b442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2207      	movs	r2, #7
 800b448:	4013      	ands	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	220f      	movs	r2, #15
 800b44e:	409a      	lsls	r2, r3
 800b450:	0013      	movs	r3, r2
 800b452:	43da      	mvns	r2, r3
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	4013      	ands	r3, r2
 800b458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	691a      	ldr	r2, [r3, #16]
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	2107      	movs	r1, #7
 800b462:	400b      	ands	r3, r1
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	409a      	lsls	r2, r3
 800b468:	0013      	movs	r3, r2
 800b46a:	693a      	ldr	r2, [r7, #16]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	08da      	lsrs	r2, r3, #3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3208      	adds	r2, #8
 800b478:	0092      	lsls	r2, r2, #2
 800b47a:	6939      	ldr	r1, [r7, #16]
 800b47c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	005b      	lsls	r3, r3, #1
 800b488:	2203      	movs	r2, #3
 800b48a:	409a      	lsls	r2, r3
 800b48c:	0013      	movs	r3, r2
 800b48e:	43da      	mvns	r2, r3
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	4013      	ands	r3, r2
 800b494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	2203      	movs	r2, #3
 800b49c:	401a      	ands	r2, r3
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	005b      	lsls	r3, r3, #1
 800b4a2:	409a      	lsls	r2, r3
 800b4a4:	0013      	movs	r3, r2
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	23c0      	movs	r3, #192	; 0xc0
 800b4b8:	029b      	lsls	r3, r3, #10
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	d100      	bne.n	800b4c0 <HAL_GPIO_Init+0x174>
 800b4be:	e0a0      	b.n	800b602 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b4c0:	4b57      	ldr	r3, [pc, #348]	; (800b620 <HAL_GPIO_Init+0x2d4>)
 800b4c2:	699a      	ldr	r2, [r3, #24]
 800b4c4:	4b56      	ldr	r3, [pc, #344]	; (800b620 <HAL_GPIO_Init+0x2d4>)
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	430a      	orrs	r2, r1
 800b4ca:	619a      	str	r2, [r3, #24]
 800b4cc:	4b54      	ldr	r3, [pc, #336]	; (800b620 <HAL_GPIO_Init+0x2d4>)
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	60bb      	str	r3, [r7, #8]
 800b4d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b4d8:	4a52      	ldr	r2, [pc, #328]	; (800b624 <HAL_GPIO_Init+0x2d8>)
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	089b      	lsrs	r3, r3, #2
 800b4de:	3302      	adds	r3, #2
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	589b      	ldr	r3, [r3, r2]
 800b4e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2203      	movs	r2, #3
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	220f      	movs	r2, #15
 800b4f0:	409a      	lsls	r2, r3
 800b4f2:	0013      	movs	r3, r2
 800b4f4:	43da      	mvns	r2, r3
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	2390      	movs	r3, #144	; 0x90
 800b500:	05db      	lsls	r3, r3, #23
 800b502:	429a      	cmp	r2, r3
 800b504:	d019      	beq.n	800b53a <HAL_GPIO_Init+0x1ee>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a47      	ldr	r2, [pc, #284]	; (800b628 <HAL_GPIO_Init+0x2dc>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d013      	beq.n	800b536 <HAL_GPIO_Init+0x1ea>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a46      	ldr	r2, [pc, #280]	; (800b62c <HAL_GPIO_Init+0x2e0>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d00d      	beq.n	800b532 <HAL_GPIO_Init+0x1e6>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a45      	ldr	r2, [pc, #276]	; (800b630 <HAL_GPIO_Init+0x2e4>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d007      	beq.n	800b52e <HAL_GPIO_Init+0x1e2>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a44      	ldr	r2, [pc, #272]	; (800b634 <HAL_GPIO_Init+0x2e8>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d101      	bne.n	800b52a <HAL_GPIO_Init+0x1de>
 800b526:	2304      	movs	r3, #4
 800b528:	e008      	b.n	800b53c <HAL_GPIO_Init+0x1f0>
 800b52a:	2305      	movs	r3, #5
 800b52c:	e006      	b.n	800b53c <HAL_GPIO_Init+0x1f0>
 800b52e:	2303      	movs	r3, #3
 800b530:	e004      	b.n	800b53c <HAL_GPIO_Init+0x1f0>
 800b532:	2302      	movs	r3, #2
 800b534:	e002      	b.n	800b53c <HAL_GPIO_Init+0x1f0>
 800b536:	2301      	movs	r3, #1
 800b538:	e000      	b.n	800b53c <HAL_GPIO_Init+0x1f0>
 800b53a:	2300      	movs	r3, #0
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	2103      	movs	r1, #3
 800b540:	400a      	ands	r2, r1
 800b542:	0092      	lsls	r2, r2, #2
 800b544:	4093      	lsls	r3, r2
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	4313      	orrs	r3, r2
 800b54a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b54c:	4935      	ldr	r1, [pc, #212]	; (800b624 <HAL_GPIO_Init+0x2d8>)
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	089b      	lsrs	r3, r3, #2
 800b552:	3302      	adds	r3, #2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b55a:	4b37      	ldr	r3, [pc, #220]	; (800b638 <HAL_GPIO_Init+0x2ec>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	43da      	mvns	r2, r3
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	4013      	ands	r3, r2
 800b568:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	2380      	movs	r3, #128	; 0x80
 800b570:	025b      	lsls	r3, r3, #9
 800b572:	4013      	ands	r3, r2
 800b574:	d003      	beq.n	800b57e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800b576:	693a      	ldr	r2, [r7, #16]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b57e:	4b2e      	ldr	r3, [pc, #184]	; (800b638 <HAL_GPIO_Init+0x2ec>)
 800b580:	693a      	ldr	r2, [r7, #16]
 800b582:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800b584:	4b2c      	ldr	r3, [pc, #176]	; (800b638 <HAL_GPIO_Init+0x2ec>)
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	43da      	mvns	r2, r3
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	4013      	ands	r3, r2
 800b592:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	2380      	movs	r3, #128	; 0x80
 800b59a:	029b      	lsls	r3, r3, #10
 800b59c:	4013      	ands	r3, r2
 800b59e:	d003      	beq.n	800b5a8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800b5a0:	693a      	ldr	r2, [r7, #16]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b5a8:	4b23      	ldr	r3, [pc, #140]	; (800b638 <HAL_GPIO_Init+0x2ec>)
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b5ae:	4b22      	ldr	r3, [pc, #136]	; (800b638 <HAL_GPIO_Init+0x2ec>)
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	43da      	mvns	r2, r3
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	4013      	ands	r3, r2
 800b5bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	685a      	ldr	r2, [r3, #4]
 800b5c2:	2380      	movs	r3, #128	; 0x80
 800b5c4:	035b      	lsls	r3, r3, #13
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	d003      	beq.n	800b5d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b5d2:	4b19      	ldr	r3, [pc, #100]	; (800b638 <HAL_GPIO_Init+0x2ec>)
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b5d8:	4b17      	ldr	r3, [pc, #92]	; (800b638 <HAL_GPIO_Init+0x2ec>)
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	43da      	mvns	r2, r3
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	2380      	movs	r3, #128	; 0x80
 800b5ee:	039b      	lsls	r3, r3, #14
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	d003      	beq.n	800b5fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800b5f4:	693a      	ldr	r2, [r7, #16]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b5fc:	4b0e      	ldr	r3, [pc, #56]	; (800b638 <HAL_GPIO_Init+0x2ec>)
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	3301      	adds	r3, #1
 800b606:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	40da      	lsrs	r2, r3
 800b610:	1e13      	subs	r3, r2, #0
 800b612:	d000      	beq.n	800b616 <HAL_GPIO_Init+0x2ca>
 800b614:	e6a2      	b.n	800b35c <HAL_GPIO_Init+0x10>
  } 
}
 800b616:	46c0      	nop			; (mov r8, r8)
 800b618:	46c0      	nop			; (mov r8, r8)
 800b61a:	46bd      	mov	sp, r7
 800b61c:	b006      	add	sp, #24
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	40021000 	.word	0x40021000
 800b624:	40010000 	.word	0x40010000
 800b628:	48000400 	.word	0x48000400
 800b62c:	48000800 	.word	0x48000800
 800b630:	48000c00 	.word	0x48000c00
 800b634:	48001000 	.word	0x48001000
 800b638:	40010400 	.word	0x40010400

0800b63c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	0008      	movs	r0, r1
 800b646:	0011      	movs	r1, r2
 800b648:	1cbb      	adds	r3, r7, #2
 800b64a:	1c02      	adds	r2, r0, #0
 800b64c:	801a      	strh	r2, [r3, #0]
 800b64e:	1c7b      	adds	r3, r7, #1
 800b650:	1c0a      	adds	r2, r1, #0
 800b652:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b654:	1c7b      	adds	r3, r7, #1
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d004      	beq.n	800b666 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b65c:	1cbb      	adds	r3, r7, #2
 800b65e:	881a      	ldrh	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b664:	e003      	b.n	800b66e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b666:	1cbb      	adds	r3, r7, #2
 800b668:	881a      	ldrh	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b66e:	46c0      	nop			; (mov r8, r8)
 800b670:	46bd      	mov	sp, r7
 800b672:	b002      	add	sp, #8
 800b674:	bd80      	pop	{r7, pc}

0800b676 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	000a      	movs	r2, r1
 800b680:	1cbb      	adds	r3, r7, #2
 800b682:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	695b      	ldr	r3, [r3, #20]
 800b688:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b68a:	1cbb      	adds	r3, r7, #2
 800b68c:	881b      	ldrh	r3, [r3, #0]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	4013      	ands	r3, r2
 800b692:	041a      	lsls	r2, r3, #16
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	43db      	mvns	r3, r3
 800b698:	1cb9      	adds	r1, r7, #2
 800b69a:	8809      	ldrh	r1, [r1, #0]
 800b69c:	400b      	ands	r3, r1
 800b69e:	431a      	orrs	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	619a      	str	r2, [r3, #24]
}
 800b6a4:	46c0      	nop			; (mov r8, r8)
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	b004      	add	sp, #16
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d102      	bne.n	800b6c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f000 fb76 	bl	800bdac <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	d100      	bne.n	800b6cc <HAL_RCC_OscConfig+0x20>
 800b6ca:	e08e      	b.n	800b7ea <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800b6cc:	4bc5      	ldr	r3, [pc, #788]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	220c      	movs	r2, #12
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	2b04      	cmp	r3, #4
 800b6d6:	d00e      	beq.n	800b6f6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b6d8:	4bc2      	ldr	r3, [pc, #776]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	220c      	movs	r2, #12
 800b6de:	4013      	ands	r3, r2
 800b6e0:	2b08      	cmp	r3, #8
 800b6e2:	d117      	bne.n	800b714 <HAL_RCC_OscConfig+0x68>
 800b6e4:	4bbf      	ldr	r3, [pc, #764]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	23c0      	movs	r3, #192	; 0xc0
 800b6ea:	025b      	lsls	r3, r3, #9
 800b6ec:	401a      	ands	r2, r3
 800b6ee:	2380      	movs	r3, #128	; 0x80
 800b6f0:	025b      	lsls	r3, r3, #9
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d10e      	bne.n	800b714 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6f6:	4bbb      	ldr	r3, [pc, #748]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b6f8:	681a      	ldr	r2, [r3, #0]
 800b6fa:	2380      	movs	r3, #128	; 0x80
 800b6fc:	029b      	lsls	r3, r3, #10
 800b6fe:	4013      	ands	r3, r2
 800b700:	d100      	bne.n	800b704 <HAL_RCC_OscConfig+0x58>
 800b702:	e071      	b.n	800b7e8 <HAL_RCC_OscConfig+0x13c>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d000      	beq.n	800b70e <HAL_RCC_OscConfig+0x62>
 800b70c:	e06c      	b.n	800b7e8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	f000 fb4c 	bl	800bdac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d107      	bne.n	800b72c <HAL_RCC_OscConfig+0x80>
 800b71c:	4bb1      	ldr	r3, [pc, #708]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	4bb0      	ldr	r3, [pc, #704]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b722:	2180      	movs	r1, #128	; 0x80
 800b724:	0249      	lsls	r1, r1, #9
 800b726:	430a      	orrs	r2, r1
 800b728:	601a      	str	r2, [r3, #0]
 800b72a:	e02f      	b.n	800b78c <HAL_RCC_OscConfig+0xe0>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10c      	bne.n	800b74e <HAL_RCC_OscConfig+0xa2>
 800b734:	4bab      	ldr	r3, [pc, #684]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	4baa      	ldr	r3, [pc, #680]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b73a:	49ab      	ldr	r1, [pc, #684]	; (800b9e8 <HAL_RCC_OscConfig+0x33c>)
 800b73c:	400a      	ands	r2, r1
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	4ba8      	ldr	r3, [pc, #672]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	4ba7      	ldr	r3, [pc, #668]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b746:	49a9      	ldr	r1, [pc, #676]	; (800b9ec <HAL_RCC_OscConfig+0x340>)
 800b748:	400a      	ands	r2, r1
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	e01e      	b.n	800b78c <HAL_RCC_OscConfig+0xe0>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	2b05      	cmp	r3, #5
 800b754:	d10e      	bne.n	800b774 <HAL_RCC_OscConfig+0xc8>
 800b756:	4ba3      	ldr	r3, [pc, #652]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	4ba2      	ldr	r3, [pc, #648]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b75c:	2180      	movs	r1, #128	; 0x80
 800b75e:	02c9      	lsls	r1, r1, #11
 800b760:	430a      	orrs	r2, r1
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	4b9f      	ldr	r3, [pc, #636]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	4b9e      	ldr	r3, [pc, #632]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b76a:	2180      	movs	r1, #128	; 0x80
 800b76c:	0249      	lsls	r1, r1, #9
 800b76e:	430a      	orrs	r2, r1
 800b770:	601a      	str	r2, [r3, #0]
 800b772:	e00b      	b.n	800b78c <HAL_RCC_OscConfig+0xe0>
 800b774:	4b9b      	ldr	r3, [pc, #620]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	4b9a      	ldr	r3, [pc, #616]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b77a:	499b      	ldr	r1, [pc, #620]	; (800b9e8 <HAL_RCC_OscConfig+0x33c>)
 800b77c:	400a      	ands	r2, r1
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	4b98      	ldr	r3, [pc, #608]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	4b97      	ldr	r3, [pc, #604]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b786:	4999      	ldr	r1, [pc, #612]	; (800b9ec <HAL_RCC_OscConfig+0x340>)
 800b788:	400a      	ands	r2, r1
 800b78a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d014      	beq.n	800b7be <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b794:	f7ff fc50 	bl	800b038 <HAL_GetTick>
 800b798:	0003      	movs	r3, r0
 800b79a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b79c:	e008      	b.n	800b7b0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b79e:	f7ff fc4b 	bl	800b038 <HAL_GetTick>
 800b7a2:	0002      	movs	r2, r0
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	2b64      	cmp	r3, #100	; 0x64
 800b7aa:	d901      	bls.n	800b7b0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e2fd      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7b0:	4b8c      	ldr	r3, [pc, #560]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	2380      	movs	r3, #128	; 0x80
 800b7b6:	029b      	lsls	r3, r3, #10
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	d0f0      	beq.n	800b79e <HAL_RCC_OscConfig+0xf2>
 800b7bc:	e015      	b.n	800b7ea <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7be:	f7ff fc3b 	bl	800b038 <HAL_GetTick>
 800b7c2:	0003      	movs	r3, r0
 800b7c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b7c6:	e008      	b.n	800b7da <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b7c8:	f7ff fc36 	bl	800b038 <HAL_GetTick>
 800b7cc:	0002      	movs	r2, r0
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	2b64      	cmp	r3, #100	; 0x64
 800b7d4:	d901      	bls.n	800b7da <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e2e8      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b7da:	4b82      	ldr	r3, [pc, #520]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	2380      	movs	r3, #128	; 0x80
 800b7e0:	029b      	lsls	r3, r3, #10
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	d1f0      	bne.n	800b7c8 <HAL_RCC_OscConfig+0x11c>
 800b7e6:	e000      	b.n	800b7ea <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	d100      	bne.n	800b7f6 <HAL_RCC_OscConfig+0x14a>
 800b7f4:	e06c      	b.n	800b8d0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800b7f6:	4b7b      	ldr	r3, [pc, #492]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	220c      	movs	r2, #12
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	d00e      	beq.n	800b81e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800b800:	4b78      	ldr	r3, [pc, #480]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	220c      	movs	r2, #12
 800b806:	4013      	ands	r3, r2
 800b808:	2b08      	cmp	r3, #8
 800b80a:	d11f      	bne.n	800b84c <HAL_RCC_OscConfig+0x1a0>
 800b80c:	4b75      	ldr	r3, [pc, #468]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	23c0      	movs	r3, #192	; 0xc0
 800b812:	025b      	lsls	r3, r3, #9
 800b814:	401a      	ands	r2, r3
 800b816:	2380      	movs	r3, #128	; 0x80
 800b818:	021b      	lsls	r3, r3, #8
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d116      	bne.n	800b84c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b81e:	4b71      	ldr	r3, [pc, #452]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2202      	movs	r2, #2
 800b824:	4013      	ands	r3, r2
 800b826:	d005      	beq.n	800b834 <HAL_RCC_OscConfig+0x188>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d001      	beq.n	800b834 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	e2bb      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b834:	4b6b      	ldr	r3, [pc, #428]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	22f8      	movs	r2, #248	; 0xf8
 800b83a:	4393      	bics	r3, r2
 800b83c:	0019      	movs	r1, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	00da      	lsls	r2, r3, #3
 800b844:	4b67      	ldr	r3, [pc, #412]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b846:	430a      	orrs	r2, r1
 800b848:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b84a:	e041      	b.n	800b8d0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d024      	beq.n	800b89e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b854:	4b63      	ldr	r3, [pc, #396]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	4b62      	ldr	r3, [pc, #392]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b85a:	2101      	movs	r1, #1
 800b85c:	430a      	orrs	r2, r1
 800b85e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b860:	f7ff fbea 	bl	800b038 <HAL_GetTick>
 800b864:	0003      	movs	r3, r0
 800b866:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b868:	e008      	b.n	800b87c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b86a:	f7ff fbe5 	bl	800b038 <HAL_GetTick>
 800b86e:	0002      	movs	r2, r0
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	1ad3      	subs	r3, r2, r3
 800b874:	2b02      	cmp	r3, #2
 800b876:	d901      	bls.n	800b87c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b878:	2303      	movs	r3, #3
 800b87a:	e297      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b87c:	4b59      	ldr	r3, [pc, #356]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2202      	movs	r2, #2
 800b882:	4013      	ands	r3, r2
 800b884:	d0f1      	beq.n	800b86a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b886:	4b57      	ldr	r3, [pc, #348]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	22f8      	movs	r2, #248	; 0xf8
 800b88c:	4393      	bics	r3, r2
 800b88e:	0019      	movs	r1, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	691b      	ldr	r3, [r3, #16]
 800b894:	00da      	lsls	r2, r3, #3
 800b896:	4b53      	ldr	r3, [pc, #332]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b898:	430a      	orrs	r2, r1
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	e018      	b.n	800b8d0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b89e:	4b51      	ldr	r3, [pc, #324]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	4b50      	ldr	r3, [pc, #320]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	438a      	bics	r2, r1
 800b8a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8aa:	f7ff fbc5 	bl	800b038 <HAL_GetTick>
 800b8ae:	0003      	movs	r3, r0
 800b8b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8b2:	e008      	b.n	800b8c6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8b4:	f7ff fbc0 	bl	800b038 <HAL_GetTick>
 800b8b8:	0002      	movs	r2, r0
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	d901      	bls.n	800b8c6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	e272      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b8c6:	4b47      	ldr	r3, [pc, #284]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	d1f1      	bne.n	800b8b4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2208      	movs	r2, #8
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	d036      	beq.n	800b948 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d019      	beq.n	800b916 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b8e2:	4b40      	ldr	r3, [pc, #256]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b8e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8e6:	4b3f      	ldr	r3, [pc, #252]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	430a      	orrs	r2, r1
 800b8ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b8ee:	f7ff fba3 	bl	800b038 <HAL_GetTick>
 800b8f2:	0003      	movs	r3, r0
 800b8f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b8f6:	e008      	b.n	800b90a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b8f8:	f7ff fb9e 	bl	800b038 <HAL_GetTick>
 800b8fc:	0002      	movs	r2, r0
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	2b02      	cmp	r3, #2
 800b904:	d901      	bls.n	800b90a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e250      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b90a:	4b36      	ldr	r3, [pc, #216]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90e:	2202      	movs	r2, #2
 800b910:	4013      	ands	r3, r2
 800b912:	d0f1      	beq.n	800b8f8 <HAL_RCC_OscConfig+0x24c>
 800b914:	e018      	b.n	800b948 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b916:	4b33      	ldr	r3, [pc, #204]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b91a:	4b32      	ldr	r3, [pc, #200]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b91c:	2101      	movs	r1, #1
 800b91e:	438a      	bics	r2, r1
 800b920:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b922:	f7ff fb89 	bl	800b038 <HAL_GetTick>
 800b926:	0003      	movs	r3, r0
 800b928:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b92a:	e008      	b.n	800b93e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b92c:	f7ff fb84 	bl	800b038 <HAL_GetTick>
 800b930:	0002      	movs	r2, r0
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	2b02      	cmp	r3, #2
 800b938:	d901      	bls.n	800b93e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e236      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b93e:	4b29      	ldr	r3, [pc, #164]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b942:	2202      	movs	r2, #2
 800b944:	4013      	ands	r3, r2
 800b946:	d1f1      	bne.n	800b92c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2204      	movs	r2, #4
 800b94e:	4013      	ands	r3, r2
 800b950:	d100      	bne.n	800b954 <HAL_RCC_OscConfig+0x2a8>
 800b952:	e0b5      	b.n	800bac0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b954:	201f      	movs	r0, #31
 800b956:	183b      	adds	r3, r7, r0
 800b958:	2200      	movs	r2, #0
 800b95a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b95c:	4b21      	ldr	r3, [pc, #132]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b95e:	69da      	ldr	r2, [r3, #28]
 800b960:	2380      	movs	r3, #128	; 0x80
 800b962:	055b      	lsls	r3, r3, #21
 800b964:	4013      	ands	r3, r2
 800b966:	d110      	bne.n	800b98a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b968:	4b1e      	ldr	r3, [pc, #120]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b96a:	69da      	ldr	r2, [r3, #28]
 800b96c:	4b1d      	ldr	r3, [pc, #116]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b96e:	2180      	movs	r1, #128	; 0x80
 800b970:	0549      	lsls	r1, r1, #21
 800b972:	430a      	orrs	r2, r1
 800b974:	61da      	str	r2, [r3, #28]
 800b976:	4b1b      	ldr	r3, [pc, #108]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b978:	69da      	ldr	r2, [r3, #28]
 800b97a:	2380      	movs	r3, #128	; 0x80
 800b97c:	055b      	lsls	r3, r3, #21
 800b97e:	4013      	ands	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]
 800b982:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b984:	183b      	adds	r3, r7, r0
 800b986:	2201      	movs	r2, #1
 800b988:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b98a:	4b19      	ldr	r3, [pc, #100]	; (800b9f0 <HAL_RCC_OscConfig+0x344>)
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	2380      	movs	r3, #128	; 0x80
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	4013      	ands	r3, r2
 800b994:	d11a      	bne.n	800b9cc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b996:	4b16      	ldr	r3, [pc, #88]	; (800b9f0 <HAL_RCC_OscConfig+0x344>)
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	4b15      	ldr	r3, [pc, #84]	; (800b9f0 <HAL_RCC_OscConfig+0x344>)
 800b99c:	2180      	movs	r1, #128	; 0x80
 800b99e:	0049      	lsls	r1, r1, #1
 800b9a0:	430a      	orrs	r2, r1
 800b9a2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b9a4:	f7ff fb48 	bl	800b038 <HAL_GetTick>
 800b9a8:	0003      	movs	r3, r0
 800b9aa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9ac:	e008      	b.n	800b9c0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9ae:	f7ff fb43 	bl	800b038 <HAL_GetTick>
 800b9b2:	0002      	movs	r2, r0
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	2b64      	cmp	r3, #100	; 0x64
 800b9ba:	d901      	bls.n	800b9c0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800b9bc:	2303      	movs	r3, #3
 800b9be:	e1f5      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9c0:	4b0b      	ldr	r3, [pc, #44]	; (800b9f0 <HAL_RCC_OscConfig+0x344>)
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	2380      	movs	r3, #128	; 0x80
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	d0f0      	beq.n	800b9ae <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d10f      	bne.n	800b9f4 <HAL_RCC_OscConfig+0x348>
 800b9d4:	4b03      	ldr	r3, [pc, #12]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b9d6:	6a1a      	ldr	r2, [r3, #32]
 800b9d8:	4b02      	ldr	r3, [pc, #8]	; (800b9e4 <HAL_RCC_OscConfig+0x338>)
 800b9da:	2101      	movs	r1, #1
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	621a      	str	r2, [r3, #32]
 800b9e0:	e036      	b.n	800ba50 <HAL_RCC_OscConfig+0x3a4>
 800b9e2:	46c0      	nop			; (mov r8, r8)
 800b9e4:	40021000 	.word	0x40021000
 800b9e8:	fffeffff 	.word	0xfffeffff
 800b9ec:	fffbffff 	.word	0xfffbffff
 800b9f0:	40007000 	.word	0x40007000
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10c      	bne.n	800ba16 <HAL_RCC_OscConfig+0x36a>
 800b9fc:	4bca      	ldr	r3, [pc, #808]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800b9fe:	6a1a      	ldr	r2, [r3, #32]
 800ba00:	4bc9      	ldr	r3, [pc, #804]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba02:	2101      	movs	r1, #1
 800ba04:	438a      	bics	r2, r1
 800ba06:	621a      	str	r2, [r3, #32]
 800ba08:	4bc7      	ldr	r3, [pc, #796]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba0a:	6a1a      	ldr	r2, [r3, #32]
 800ba0c:	4bc6      	ldr	r3, [pc, #792]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba0e:	2104      	movs	r1, #4
 800ba10:	438a      	bics	r2, r1
 800ba12:	621a      	str	r2, [r3, #32]
 800ba14:	e01c      	b.n	800ba50 <HAL_RCC_OscConfig+0x3a4>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	2b05      	cmp	r3, #5
 800ba1c:	d10c      	bne.n	800ba38 <HAL_RCC_OscConfig+0x38c>
 800ba1e:	4bc2      	ldr	r3, [pc, #776]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba20:	6a1a      	ldr	r2, [r3, #32]
 800ba22:	4bc1      	ldr	r3, [pc, #772]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba24:	2104      	movs	r1, #4
 800ba26:	430a      	orrs	r2, r1
 800ba28:	621a      	str	r2, [r3, #32]
 800ba2a:	4bbf      	ldr	r3, [pc, #764]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba2c:	6a1a      	ldr	r2, [r3, #32]
 800ba2e:	4bbe      	ldr	r3, [pc, #760]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba30:	2101      	movs	r1, #1
 800ba32:	430a      	orrs	r2, r1
 800ba34:	621a      	str	r2, [r3, #32]
 800ba36:	e00b      	b.n	800ba50 <HAL_RCC_OscConfig+0x3a4>
 800ba38:	4bbb      	ldr	r3, [pc, #748]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba3a:	6a1a      	ldr	r2, [r3, #32]
 800ba3c:	4bba      	ldr	r3, [pc, #744]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba3e:	2101      	movs	r1, #1
 800ba40:	438a      	bics	r2, r1
 800ba42:	621a      	str	r2, [r3, #32]
 800ba44:	4bb8      	ldr	r3, [pc, #736]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba46:	6a1a      	ldr	r2, [r3, #32]
 800ba48:	4bb7      	ldr	r3, [pc, #732]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba4a:	2104      	movs	r1, #4
 800ba4c:	438a      	bics	r2, r1
 800ba4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d014      	beq.n	800ba82 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba58:	f7ff faee 	bl	800b038 <HAL_GetTick>
 800ba5c:	0003      	movs	r3, r0
 800ba5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba60:	e009      	b.n	800ba76 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba62:	f7ff fae9 	bl	800b038 <HAL_GetTick>
 800ba66:	0002      	movs	r2, r0
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	4aaf      	ldr	r2, [pc, #700]	; (800bd2c <HAL_RCC_OscConfig+0x680>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d901      	bls.n	800ba76 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800ba72:	2303      	movs	r3, #3
 800ba74:	e19a      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba76:	4bac      	ldr	r3, [pc, #688]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	d0f0      	beq.n	800ba62 <HAL_RCC_OscConfig+0x3b6>
 800ba80:	e013      	b.n	800baaa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ba82:	f7ff fad9 	bl	800b038 <HAL_GetTick>
 800ba86:	0003      	movs	r3, r0
 800ba88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ba8a:	e009      	b.n	800baa0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba8c:	f7ff fad4 	bl	800b038 <HAL_GetTick>
 800ba90:	0002      	movs	r2, r0
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	4aa5      	ldr	r2, [pc, #660]	; (800bd2c <HAL_RCC_OscConfig+0x680>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d901      	bls.n	800baa0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e185      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800baa0:	4ba1      	ldr	r3, [pc, #644]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800baa2:	6a1b      	ldr	r3, [r3, #32]
 800baa4:	2202      	movs	r2, #2
 800baa6:	4013      	ands	r3, r2
 800baa8:	d1f0      	bne.n	800ba8c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800baaa:	231f      	movs	r3, #31
 800baac:	18fb      	adds	r3, r7, r3
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d105      	bne.n	800bac0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bab4:	4b9c      	ldr	r3, [pc, #624]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bab6:	69da      	ldr	r2, [r3, #28]
 800bab8:	4b9b      	ldr	r3, [pc, #620]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800baba:	499d      	ldr	r1, [pc, #628]	; (800bd30 <HAL_RCC_OscConfig+0x684>)
 800babc:	400a      	ands	r2, r1
 800babe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2210      	movs	r2, #16
 800bac6:	4013      	ands	r3, r2
 800bac8:	d063      	beq.n	800bb92 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d12a      	bne.n	800bb28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800bad2:	4b95      	ldr	r3, [pc, #596]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bad6:	4b94      	ldr	r3, [pc, #592]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bad8:	2104      	movs	r1, #4
 800bada:	430a      	orrs	r2, r1
 800badc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800bade:	4b92      	ldr	r3, [pc, #584]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bae2:	4b91      	ldr	r3, [pc, #580]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bae4:	2101      	movs	r1, #1
 800bae6:	430a      	orrs	r2, r1
 800bae8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800baea:	f7ff faa5 	bl	800b038 <HAL_GetTick>
 800baee:	0003      	movs	r3, r0
 800baf0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800baf2:	e008      	b.n	800bb06 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800baf4:	f7ff faa0 	bl	800b038 <HAL_GetTick>
 800baf8:	0002      	movs	r2, r0
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d901      	bls.n	800bb06 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800bb02:	2303      	movs	r3, #3
 800bb04:	e152      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800bb06:	4b88      	ldr	r3, [pc, #544]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0a:	2202      	movs	r2, #2
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	d0f1      	beq.n	800baf4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800bb10:	4b85      	ldr	r3, [pc, #532]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb14:	22f8      	movs	r2, #248	; 0xf8
 800bb16:	4393      	bics	r3, r2
 800bb18:	0019      	movs	r1, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	00da      	lsls	r2, r3, #3
 800bb20:	4b81      	ldr	r3, [pc, #516]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb22:	430a      	orrs	r2, r1
 800bb24:	635a      	str	r2, [r3, #52]	; 0x34
 800bb26:	e034      	b.n	800bb92 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	695b      	ldr	r3, [r3, #20]
 800bb2c:	3305      	adds	r3, #5
 800bb2e:	d111      	bne.n	800bb54 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800bb30:	4b7d      	ldr	r3, [pc, #500]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb34:	4b7c      	ldr	r3, [pc, #496]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb36:	2104      	movs	r1, #4
 800bb38:	438a      	bics	r2, r1
 800bb3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800bb3c:	4b7a      	ldr	r3, [pc, #488]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb40:	22f8      	movs	r2, #248	; 0xf8
 800bb42:	4393      	bics	r3, r2
 800bb44:	0019      	movs	r1, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	00da      	lsls	r2, r3, #3
 800bb4c:	4b76      	ldr	r3, [pc, #472]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb4e:	430a      	orrs	r2, r1
 800bb50:	635a      	str	r2, [r3, #52]	; 0x34
 800bb52:	e01e      	b.n	800bb92 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800bb54:	4b74      	ldr	r3, [pc, #464]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb58:	4b73      	ldr	r3, [pc, #460]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb5a:	2104      	movs	r1, #4
 800bb5c:	430a      	orrs	r2, r1
 800bb5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800bb60:	4b71      	ldr	r3, [pc, #452]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb64:	4b70      	ldr	r3, [pc, #448]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb66:	2101      	movs	r1, #1
 800bb68:	438a      	bics	r2, r1
 800bb6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb6c:	f7ff fa64 	bl	800b038 <HAL_GetTick>
 800bb70:	0003      	movs	r3, r0
 800bb72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800bb74:	e008      	b.n	800bb88 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800bb76:	f7ff fa5f 	bl	800b038 <HAL_GetTick>
 800bb7a:	0002      	movs	r2, r0
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	1ad3      	subs	r3, r2, r3
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	d901      	bls.n	800bb88 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e111      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800bb88:	4b67      	ldr	r3, [pc, #412]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8c:	2202      	movs	r2, #2
 800bb8e:	4013      	ands	r3, r2
 800bb90:	d1f1      	bne.n	800bb76 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2220      	movs	r2, #32
 800bb98:	4013      	ands	r3, r2
 800bb9a:	d05c      	beq.n	800bc56 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800bb9c:	4b62      	ldr	r3, [pc, #392]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	220c      	movs	r2, #12
 800bba2:	4013      	ands	r3, r2
 800bba4:	2b0c      	cmp	r3, #12
 800bba6:	d00e      	beq.n	800bbc6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800bba8:	4b5f      	ldr	r3, [pc, #380]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	220c      	movs	r2, #12
 800bbae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800bbb0:	2b08      	cmp	r3, #8
 800bbb2:	d114      	bne.n	800bbde <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800bbb4:	4b5c      	ldr	r3, [pc, #368]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bbb6:	685a      	ldr	r2, [r3, #4]
 800bbb8:	23c0      	movs	r3, #192	; 0xc0
 800bbba:	025b      	lsls	r3, r3, #9
 800bbbc:	401a      	ands	r2, r3
 800bbbe:	23c0      	movs	r3, #192	; 0xc0
 800bbc0:	025b      	lsls	r3, r3, #9
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d10b      	bne.n	800bbde <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800bbc6:	4b58      	ldr	r3, [pc, #352]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bbc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbca:	2380      	movs	r3, #128	; 0x80
 800bbcc:	025b      	lsls	r3, r3, #9
 800bbce:	4013      	ands	r3, r2
 800bbd0:	d040      	beq.n	800bc54 <HAL_RCC_OscConfig+0x5a8>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d03c      	beq.n	800bc54 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e0e6      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d01b      	beq.n	800bc1e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800bbe6:	4b50      	ldr	r3, [pc, #320]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bbe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbea:	4b4f      	ldr	r3, [pc, #316]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bbec:	2180      	movs	r1, #128	; 0x80
 800bbee:	0249      	lsls	r1, r1, #9
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbf4:	f7ff fa20 	bl	800b038 <HAL_GetTick>
 800bbf8:	0003      	movs	r3, r0
 800bbfa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800bbfc:	e008      	b.n	800bc10 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bbfe:	f7ff fa1b 	bl	800b038 <HAL_GetTick>
 800bc02:	0002      	movs	r2, r0
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d901      	bls.n	800bc10 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	e0cd      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800bc10:	4b45      	ldr	r3, [pc, #276]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bc12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc14:	2380      	movs	r3, #128	; 0x80
 800bc16:	025b      	lsls	r3, r3, #9
 800bc18:	4013      	ands	r3, r2
 800bc1a:	d0f0      	beq.n	800bbfe <HAL_RCC_OscConfig+0x552>
 800bc1c:	e01b      	b.n	800bc56 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800bc1e:	4b42      	ldr	r3, [pc, #264]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bc20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc22:	4b41      	ldr	r3, [pc, #260]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bc24:	4943      	ldr	r1, [pc, #268]	; (800bd34 <HAL_RCC_OscConfig+0x688>)
 800bc26:	400a      	ands	r2, r1
 800bc28:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc2a:	f7ff fa05 	bl	800b038 <HAL_GetTick>
 800bc2e:	0003      	movs	r3, r0
 800bc30:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800bc32:	e008      	b.n	800bc46 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc34:	f7ff fa00 	bl	800b038 <HAL_GetTick>
 800bc38:	0002      	movs	r2, r0
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d901      	bls.n	800bc46 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800bc42:	2303      	movs	r3, #3
 800bc44:	e0b2      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800bc46:	4b38      	ldr	r3, [pc, #224]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bc48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc4a:	2380      	movs	r3, #128	; 0x80
 800bc4c:	025b      	lsls	r3, r3, #9
 800bc4e:	4013      	ands	r3, r2
 800bc50:	d1f0      	bne.n	800bc34 <HAL_RCC_OscConfig+0x588>
 800bc52:	e000      	b.n	800bc56 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800bc54:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d100      	bne.n	800bc60 <HAL_RCC_OscConfig+0x5b4>
 800bc5e:	e0a4      	b.n	800bdaa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc60:	4b31      	ldr	r3, [pc, #196]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	220c      	movs	r2, #12
 800bc66:	4013      	ands	r3, r2
 800bc68:	2b08      	cmp	r3, #8
 800bc6a:	d100      	bne.n	800bc6e <HAL_RCC_OscConfig+0x5c2>
 800bc6c:	e078      	b.n	800bd60 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d14c      	bne.n	800bd10 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc76:	4b2c      	ldr	r3, [pc, #176]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	4b2b      	ldr	r3, [pc, #172]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bc7c:	492e      	ldr	r1, [pc, #184]	; (800bd38 <HAL_RCC_OscConfig+0x68c>)
 800bc7e:	400a      	ands	r2, r1
 800bc80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc82:	f7ff f9d9 	bl	800b038 <HAL_GetTick>
 800bc86:	0003      	movs	r3, r0
 800bc88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc8a:	e008      	b.n	800bc9e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc8c:	f7ff f9d4 	bl	800b038 <HAL_GetTick>
 800bc90:	0002      	movs	r2, r0
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	d901      	bls.n	800bc9e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e086      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc9e:	4b22      	ldr	r3, [pc, #136]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	2380      	movs	r3, #128	; 0x80
 800bca4:	049b      	lsls	r3, r3, #18
 800bca6:	4013      	ands	r3, r2
 800bca8:	d1f0      	bne.n	800bc8c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bcaa:	4b1f      	ldr	r3, [pc, #124]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcae:	220f      	movs	r2, #15
 800bcb0:	4393      	bics	r3, r2
 800bcb2:	0019      	movs	r1, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcb8:	4b1b      	ldr	r3, [pc, #108]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bcba:	430a      	orrs	r2, r1
 800bcbc:	62da      	str	r2, [r3, #44]	; 0x2c
 800bcbe:	4b1a      	ldr	r3, [pc, #104]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	4a1e      	ldr	r2, [pc, #120]	; (800bd3c <HAL_RCC_OscConfig+0x690>)
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	0019      	movs	r1, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd0:	431a      	orrs	r2, r3
 800bcd2:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bcd4:	430a      	orrs	r2, r1
 800bcd6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bcd8:	4b13      	ldr	r3, [pc, #76]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	4b12      	ldr	r3, [pc, #72]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bcde:	2180      	movs	r1, #128	; 0x80
 800bce0:	0449      	lsls	r1, r1, #17
 800bce2:	430a      	orrs	r2, r1
 800bce4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bce6:	f7ff f9a7 	bl	800b038 <HAL_GetTick>
 800bcea:	0003      	movs	r3, r0
 800bcec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bcee:	e008      	b.n	800bd02 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bcf0:	f7ff f9a2 	bl	800b038 <HAL_GetTick>
 800bcf4:	0002      	movs	r2, r0
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	2b02      	cmp	r3, #2
 800bcfc:	d901      	bls.n	800bd02 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e054      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bd02:	4b09      	ldr	r3, [pc, #36]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	2380      	movs	r3, #128	; 0x80
 800bd08:	049b      	lsls	r3, r3, #18
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	d0f0      	beq.n	800bcf0 <HAL_RCC_OscConfig+0x644>
 800bd0e:	e04c      	b.n	800bdaa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd10:	4b05      	ldr	r3, [pc, #20]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	4b04      	ldr	r3, [pc, #16]	; (800bd28 <HAL_RCC_OscConfig+0x67c>)
 800bd16:	4908      	ldr	r1, [pc, #32]	; (800bd38 <HAL_RCC_OscConfig+0x68c>)
 800bd18:	400a      	ands	r2, r1
 800bd1a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd1c:	f7ff f98c 	bl	800b038 <HAL_GetTick>
 800bd20:	0003      	movs	r3, r0
 800bd22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bd24:	e015      	b.n	800bd52 <HAL_RCC_OscConfig+0x6a6>
 800bd26:	46c0      	nop			; (mov r8, r8)
 800bd28:	40021000 	.word	0x40021000
 800bd2c:	00001388 	.word	0x00001388
 800bd30:	efffffff 	.word	0xefffffff
 800bd34:	fffeffff 	.word	0xfffeffff
 800bd38:	feffffff 	.word	0xfeffffff
 800bd3c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd40:	f7ff f97a 	bl	800b038 <HAL_GetTick>
 800bd44:	0002      	movs	r2, r0
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d901      	bls.n	800bd52 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e02c      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bd52:	4b18      	ldr	r3, [pc, #96]	; (800bdb4 <HAL_RCC_OscConfig+0x708>)
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	2380      	movs	r3, #128	; 0x80
 800bd58:	049b      	lsls	r3, r3, #18
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	d1f0      	bne.n	800bd40 <HAL_RCC_OscConfig+0x694>
 800bd5e:	e024      	b.n	800bdaa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d101      	bne.n	800bd6c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e01f      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800bd6c:	4b11      	ldr	r3, [pc, #68]	; (800bdb4 <HAL_RCC_OscConfig+0x708>)
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800bd72:	4b10      	ldr	r3, [pc, #64]	; (800bdb4 <HAL_RCC_OscConfig+0x708>)
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	23c0      	movs	r3, #192	; 0xc0
 800bd7c:	025b      	lsls	r3, r3, #9
 800bd7e:	401a      	ands	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d10e      	bne.n	800bda6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	220f      	movs	r2, #15
 800bd8c:	401a      	ands	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d107      	bne.n	800bda6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800bd96:	697a      	ldr	r2, [r7, #20]
 800bd98:	23f0      	movs	r3, #240	; 0xf0
 800bd9a:	039b      	lsls	r3, r3, #14
 800bd9c:	401a      	ands	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d001      	beq.n	800bdaa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e000      	b.n	800bdac <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	0018      	movs	r0, r3
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	b008      	add	sp, #32
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	40021000 	.word	0x40021000

0800bdb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d101      	bne.n	800bdcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e0bf      	b.n	800bf4c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bdcc:	4b61      	ldr	r3, [pc, #388]	; (800bf54 <HAL_RCC_ClockConfig+0x19c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d911      	bls.n	800bdfe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdda:	4b5e      	ldr	r3, [pc, #376]	; (800bf54 <HAL_RCC_ClockConfig+0x19c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2201      	movs	r2, #1
 800bde0:	4393      	bics	r3, r2
 800bde2:	0019      	movs	r1, r3
 800bde4:	4b5b      	ldr	r3, [pc, #364]	; (800bf54 <HAL_RCC_ClockConfig+0x19c>)
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	430a      	orrs	r2, r1
 800bdea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdec:	4b59      	ldr	r3, [pc, #356]	; (800bf54 <HAL_RCC_ClockConfig+0x19c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2201      	movs	r2, #1
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	683a      	ldr	r2, [r7, #0]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d001      	beq.n	800bdfe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e0a6      	b.n	800bf4c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2202      	movs	r2, #2
 800be04:	4013      	ands	r3, r2
 800be06:	d015      	beq.n	800be34 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2204      	movs	r2, #4
 800be0e:	4013      	ands	r3, r2
 800be10:	d006      	beq.n	800be20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800be12:	4b51      	ldr	r3, [pc, #324]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	4b50      	ldr	r3, [pc, #320]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800be18:	21e0      	movs	r1, #224	; 0xe0
 800be1a:	00c9      	lsls	r1, r1, #3
 800be1c:	430a      	orrs	r2, r1
 800be1e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800be20:	4b4d      	ldr	r3, [pc, #308]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	22f0      	movs	r2, #240	; 0xf0
 800be26:	4393      	bics	r3, r2
 800be28:	0019      	movs	r1, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	689a      	ldr	r2, [r3, #8]
 800be2e:	4b4a      	ldr	r3, [pc, #296]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800be30:	430a      	orrs	r2, r1
 800be32:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2201      	movs	r2, #1
 800be3a:	4013      	ands	r3, r2
 800be3c:	d04c      	beq.n	800bed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	2b01      	cmp	r3, #1
 800be44:	d107      	bne.n	800be56 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be46:	4b44      	ldr	r3, [pc, #272]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	2380      	movs	r3, #128	; 0x80
 800be4c:	029b      	lsls	r3, r3, #10
 800be4e:	4013      	ands	r3, r2
 800be50:	d120      	bne.n	800be94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e07a      	b.n	800bf4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d107      	bne.n	800be6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be5e:	4b3e      	ldr	r3, [pc, #248]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	2380      	movs	r3, #128	; 0x80
 800be64:	049b      	lsls	r3, r3, #18
 800be66:	4013      	ands	r3, r2
 800be68:	d114      	bne.n	800be94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	e06e      	b.n	800bf4c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	2b03      	cmp	r3, #3
 800be74:	d107      	bne.n	800be86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800be76:	4b38      	ldr	r3, [pc, #224]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800be78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be7a:	2380      	movs	r3, #128	; 0x80
 800be7c:	025b      	lsls	r3, r3, #9
 800be7e:	4013      	ands	r3, r2
 800be80:	d108      	bne.n	800be94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e062      	b.n	800bf4c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be86:	4b34      	ldr	r3, [pc, #208]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2202      	movs	r2, #2
 800be8c:	4013      	ands	r3, r2
 800be8e:	d101      	bne.n	800be94 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	e05b      	b.n	800bf4c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800be94:	4b30      	ldr	r3, [pc, #192]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	2203      	movs	r2, #3
 800be9a:	4393      	bics	r3, r2
 800be9c:	0019      	movs	r1, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685a      	ldr	r2, [r3, #4]
 800bea2:	4b2d      	ldr	r3, [pc, #180]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800bea4:	430a      	orrs	r2, r1
 800bea6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bea8:	f7ff f8c6 	bl	800b038 <HAL_GetTick>
 800beac:	0003      	movs	r3, r0
 800beae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800beb0:	e009      	b.n	800bec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800beb2:	f7ff f8c1 	bl	800b038 <HAL_GetTick>
 800beb6:	0002      	movs	r2, r0
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	4a27      	ldr	r2, [pc, #156]	; (800bf5c <HAL_RCC_ClockConfig+0x1a4>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d901      	bls.n	800bec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e042      	b.n	800bf4c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bec6:	4b24      	ldr	r3, [pc, #144]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	220c      	movs	r2, #12
 800becc:	401a      	ands	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d1ec      	bne.n	800beb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bed8:	4b1e      	ldr	r3, [pc, #120]	; (800bf54 <HAL_RCC_ClockConfig+0x19c>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2201      	movs	r2, #1
 800bede:	4013      	ands	r3, r2
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d211      	bcs.n	800bf0a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bee6:	4b1b      	ldr	r3, [pc, #108]	; (800bf54 <HAL_RCC_ClockConfig+0x19c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2201      	movs	r2, #1
 800beec:	4393      	bics	r3, r2
 800beee:	0019      	movs	r1, r3
 800bef0:	4b18      	ldr	r3, [pc, #96]	; (800bf54 <HAL_RCC_ClockConfig+0x19c>)
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	430a      	orrs	r2, r1
 800bef6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bef8:	4b16      	ldr	r3, [pc, #88]	; (800bf54 <HAL_RCC_ClockConfig+0x19c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2201      	movs	r2, #1
 800befe:	4013      	ands	r3, r2
 800bf00:	683a      	ldr	r2, [r7, #0]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d001      	beq.n	800bf0a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e020      	b.n	800bf4c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2204      	movs	r2, #4
 800bf10:	4013      	ands	r3, r2
 800bf12:	d009      	beq.n	800bf28 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800bf14:	4b10      	ldr	r3, [pc, #64]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	4a11      	ldr	r2, [pc, #68]	; (800bf60 <HAL_RCC_ClockConfig+0x1a8>)
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	0019      	movs	r1, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68da      	ldr	r2, [r3, #12]
 800bf22:	4b0d      	ldr	r3, [pc, #52]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800bf24:	430a      	orrs	r2, r1
 800bf26:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800bf28:	f000 f820 	bl	800bf6c <HAL_RCC_GetSysClockFreq>
 800bf2c:	0001      	movs	r1, r0
 800bf2e:	4b0a      	ldr	r3, [pc, #40]	; (800bf58 <HAL_RCC_ClockConfig+0x1a0>)
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	091b      	lsrs	r3, r3, #4
 800bf34:	220f      	movs	r2, #15
 800bf36:	4013      	ands	r3, r2
 800bf38:	4a0a      	ldr	r2, [pc, #40]	; (800bf64 <HAL_RCC_ClockConfig+0x1ac>)
 800bf3a:	5cd3      	ldrb	r3, [r2, r3]
 800bf3c:	000a      	movs	r2, r1
 800bf3e:	40da      	lsrs	r2, r3
 800bf40:	4b09      	ldr	r3, [pc, #36]	; (800bf68 <HAL_RCC_ClockConfig+0x1b0>)
 800bf42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800bf44:	2003      	movs	r0, #3
 800bf46:	f7ff f831 	bl	800afac <HAL_InitTick>
  
  return HAL_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	0018      	movs	r0, r3
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	b004      	add	sp, #16
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	40022000 	.word	0x40022000
 800bf58:	40021000 	.word	0x40021000
 800bf5c:	00001388 	.word	0x00001388
 800bf60:	fffff8ff 	.word	0xfffff8ff
 800bf64:	0800fa6c 	.word	0x0800fa6c
 800bf68:	2000015c 	.word	0x2000015c

0800bf6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf6c:	b590      	push	{r4, r7, lr}
 800bf6e:	b08f      	sub	sp, #60	; 0x3c
 800bf70:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800bf72:	2314      	movs	r3, #20
 800bf74:	18fb      	adds	r3, r7, r3
 800bf76:	4a38      	ldr	r2, [pc, #224]	; (800c058 <HAL_RCC_GetSysClockFreq+0xec>)
 800bf78:	ca13      	ldmia	r2!, {r0, r1, r4}
 800bf7a:	c313      	stmia	r3!, {r0, r1, r4}
 800bf7c:	6812      	ldr	r2, [r2, #0]
 800bf7e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800bf80:	1d3b      	adds	r3, r7, #4
 800bf82:	4a36      	ldr	r2, [pc, #216]	; (800c05c <HAL_RCC_GetSysClockFreq+0xf0>)
 800bf84:	ca13      	ldmia	r2!, {r0, r1, r4}
 800bf86:	c313      	stmia	r3!, {r0, r1, r4}
 800bf88:	6812      	ldr	r2, [r2, #0]
 800bf8a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf90:	2300      	movs	r3, #0
 800bf92:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf94:	2300      	movs	r3, #0
 800bf96:	637b      	str	r3, [r7, #52]	; 0x34
 800bf98:	2300      	movs	r3, #0
 800bf9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800bfa0:	4b2f      	ldr	r3, [pc, #188]	; (800c060 <HAL_RCC_GetSysClockFreq+0xf4>)
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa8:	220c      	movs	r2, #12
 800bfaa:	4013      	ands	r3, r2
 800bfac:	2b0c      	cmp	r3, #12
 800bfae:	d047      	beq.n	800c040 <HAL_RCC_GetSysClockFreq+0xd4>
 800bfb0:	d849      	bhi.n	800c046 <HAL_RCC_GetSysClockFreq+0xda>
 800bfb2:	2b04      	cmp	r3, #4
 800bfb4:	d002      	beq.n	800bfbc <HAL_RCC_GetSysClockFreq+0x50>
 800bfb6:	2b08      	cmp	r3, #8
 800bfb8:	d003      	beq.n	800bfc2 <HAL_RCC_GetSysClockFreq+0x56>
 800bfba:	e044      	b.n	800c046 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bfbc:	4b29      	ldr	r3, [pc, #164]	; (800c064 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bfbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800bfc0:	e044      	b.n	800c04c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	0c9b      	lsrs	r3, r3, #18
 800bfc6:	220f      	movs	r2, #15
 800bfc8:	4013      	ands	r3, r2
 800bfca:	2214      	movs	r2, #20
 800bfcc:	18ba      	adds	r2, r7, r2
 800bfce:	5cd3      	ldrb	r3, [r2, r3]
 800bfd0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800bfd2:	4b23      	ldr	r3, [pc, #140]	; (800c060 <HAL_RCC_GetSysClockFreq+0xf4>)
 800bfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd6:	220f      	movs	r2, #15
 800bfd8:	4013      	ands	r3, r2
 800bfda:	1d3a      	adds	r2, r7, #4
 800bfdc:	5cd3      	ldrb	r3, [r2, r3]
 800bfde:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800bfe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfe2:	23c0      	movs	r3, #192	; 0xc0
 800bfe4:	025b      	lsls	r3, r3, #9
 800bfe6:	401a      	ands	r2, r3
 800bfe8:	2380      	movs	r3, #128	; 0x80
 800bfea:	025b      	lsls	r3, r3, #9
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d109      	bne.n	800c004 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800bff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bff2:	481c      	ldr	r0, [pc, #112]	; (800c064 <HAL_RCC_GetSysClockFreq+0xf8>)
 800bff4:	f7fd f89a 	bl	800912c <__udivsi3>
 800bff8:	0003      	movs	r3, r0
 800bffa:	001a      	movs	r2, r3
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	4353      	muls	r3, r2
 800c000:	637b      	str	r3, [r7, #52]	; 0x34
 800c002:	e01a      	b.n	800c03a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800c004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c006:	23c0      	movs	r3, #192	; 0xc0
 800c008:	025b      	lsls	r3, r3, #9
 800c00a:	401a      	ands	r2, r3
 800c00c:	23c0      	movs	r3, #192	; 0xc0
 800c00e:	025b      	lsls	r3, r3, #9
 800c010:	429a      	cmp	r2, r3
 800c012:	d109      	bne.n	800c028 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800c014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c016:	4814      	ldr	r0, [pc, #80]	; (800c068 <HAL_RCC_GetSysClockFreq+0xfc>)
 800c018:	f7fd f888 	bl	800912c <__udivsi3>
 800c01c:	0003      	movs	r3, r0
 800c01e:	001a      	movs	r2, r3
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	4353      	muls	r3, r2
 800c024:	637b      	str	r3, [r7, #52]	; 0x34
 800c026:	e008      	b.n	800c03a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800c028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c02a:	480e      	ldr	r0, [pc, #56]	; (800c064 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c02c:	f7fd f87e 	bl	800912c <__udivsi3>
 800c030:	0003      	movs	r3, r0
 800c032:	001a      	movs	r2, r3
 800c034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c036:	4353      	muls	r3, r2
 800c038:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800c03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c03e:	e005      	b.n	800c04c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800c040:	4b09      	ldr	r3, [pc, #36]	; (800c068 <HAL_RCC_GetSysClockFreq+0xfc>)
 800c042:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c044:	e002      	b.n	800c04c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c046:	4b07      	ldr	r3, [pc, #28]	; (800c064 <HAL_RCC_GetSysClockFreq+0xf8>)
 800c048:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c04a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800c04e:	0018      	movs	r0, r3
 800c050:	46bd      	mov	sp, r7
 800c052:	b00f      	add	sp, #60	; 0x3c
 800c054:	bd90      	pop	{r4, r7, pc}
 800c056:	46c0      	nop			; (mov r8, r8)
 800c058:	0800f9fc 	.word	0x0800f9fc
 800c05c:	0800fa0c 	.word	0x0800fa0c
 800c060:	40021000 	.word	0x40021000
 800c064:	007a1200 	.word	0x007a1200
 800c068:	02dc6c00 	.word	0x02dc6c00

0800c06c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c070:	4b02      	ldr	r3, [pc, #8]	; (800c07c <HAL_RCC_GetHCLKFreq+0x10>)
 800c072:	681b      	ldr	r3, [r3, #0]
}
 800c074:	0018      	movs	r0, r3
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	46c0      	nop			; (mov r8, r8)
 800c07c:	2000015c 	.word	0x2000015c

0800c080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800c084:	f7ff fff2 	bl	800c06c <HAL_RCC_GetHCLKFreq>
 800c088:	0001      	movs	r1, r0
 800c08a:	4b06      	ldr	r3, [pc, #24]	; (800c0a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	0a1b      	lsrs	r3, r3, #8
 800c090:	2207      	movs	r2, #7
 800c092:	4013      	ands	r3, r2
 800c094:	4a04      	ldr	r2, [pc, #16]	; (800c0a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c096:	5cd3      	ldrb	r3, [r2, r3]
 800c098:	40d9      	lsrs	r1, r3
 800c09a:	000b      	movs	r3, r1
}    
 800c09c:	0018      	movs	r0, r3
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	40021000 	.word	0x40021000
 800c0a8:	0800fa7c 	.word	0x0800fa7c

0800c0ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	2380      	movs	r3, #128	; 0x80
 800c0c2:	025b      	lsls	r3, r3, #9
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	d100      	bne.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800c0c8:	e08e      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800c0ca:	2017      	movs	r0, #23
 800c0cc:	183b      	adds	r3, r7, r0
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c0d2:	4b6e      	ldr	r3, [pc, #440]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c0d4:	69da      	ldr	r2, [r3, #28]
 800c0d6:	2380      	movs	r3, #128	; 0x80
 800c0d8:	055b      	lsls	r3, r3, #21
 800c0da:	4013      	ands	r3, r2
 800c0dc:	d110      	bne.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c0de:	4b6b      	ldr	r3, [pc, #428]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c0e0:	69da      	ldr	r2, [r3, #28]
 800c0e2:	4b6a      	ldr	r3, [pc, #424]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c0e4:	2180      	movs	r1, #128	; 0x80
 800c0e6:	0549      	lsls	r1, r1, #21
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	61da      	str	r2, [r3, #28]
 800c0ec:	4b67      	ldr	r3, [pc, #412]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c0ee:	69da      	ldr	r2, [r3, #28]
 800c0f0:	2380      	movs	r3, #128	; 0x80
 800c0f2:	055b      	lsls	r3, r3, #21
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	60bb      	str	r3, [r7, #8]
 800c0f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c0fa:	183b      	adds	r3, r7, r0
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c100:	4b63      	ldr	r3, [pc, #396]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	2380      	movs	r3, #128	; 0x80
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	4013      	ands	r3, r2
 800c10a:	d11a      	bne.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c10c:	4b60      	ldr	r3, [pc, #384]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	4b5f      	ldr	r3, [pc, #380]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800c112:	2180      	movs	r1, #128	; 0x80
 800c114:	0049      	lsls	r1, r1, #1
 800c116:	430a      	orrs	r2, r1
 800c118:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c11a:	f7fe ff8d 	bl	800b038 <HAL_GetTick>
 800c11e:	0003      	movs	r3, r0
 800c120:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c122:	e008      	b.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c124:	f7fe ff88 	bl	800b038 <HAL_GetTick>
 800c128:	0002      	movs	r2, r0
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	2b64      	cmp	r3, #100	; 0x64
 800c130:	d901      	bls.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800c132:	2303      	movs	r3, #3
 800c134:	e0a6      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c136:	4b56      	ldr	r3, [pc, #344]	; (800c290 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	2380      	movs	r3, #128	; 0x80
 800c13c:	005b      	lsls	r3, r3, #1
 800c13e:	4013      	ands	r3, r2
 800c140:	d0f0      	beq.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c142:	4b52      	ldr	r3, [pc, #328]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c144:	6a1a      	ldr	r2, [r3, #32]
 800c146:	23c0      	movs	r3, #192	; 0xc0
 800c148:	009b      	lsls	r3, r3, #2
 800c14a:	4013      	ands	r3, r2
 800c14c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d034      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x112>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	23c0      	movs	r3, #192	; 0xc0
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4013      	ands	r3, r2
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	429a      	cmp	r2, r3
 800c162:	d02c      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c164:	4b49      	ldr	r3, [pc, #292]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c166:	6a1b      	ldr	r3, [r3, #32]
 800c168:	4a4a      	ldr	r2, [pc, #296]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800c16a:	4013      	ands	r3, r2
 800c16c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c16e:	4b47      	ldr	r3, [pc, #284]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c170:	6a1a      	ldr	r2, [r3, #32]
 800c172:	4b46      	ldr	r3, [pc, #280]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c174:	2180      	movs	r1, #128	; 0x80
 800c176:	0249      	lsls	r1, r1, #9
 800c178:	430a      	orrs	r2, r1
 800c17a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c17c:	4b43      	ldr	r3, [pc, #268]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c17e:	6a1a      	ldr	r2, [r3, #32]
 800c180:	4b42      	ldr	r3, [pc, #264]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c182:	4945      	ldr	r1, [pc, #276]	; (800c298 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800c184:	400a      	ands	r2, r1
 800c186:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800c188:	4b40      	ldr	r3, [pc, #256]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2201      	movs	r2, #1
 800c192:	4013      	ands	r3, r2
 800c194:	d013      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c196:	f7fe ff4f 	bl	800b038 <HAL_GetTick>
 800c19a:	0003      	movs	r3, r0
 800c19c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c19e:	e009      	b.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1a0:	f7fe ff4a 	bl	800b038 <HAL_GetTick>
 800c1a4:	0002      	movs	r2, r0
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	4a3c      	ldr	r2, [pc, #240]	; (800c29c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d901      	bls.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	e067      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1b4:	4b35      	ldr	r3, [pc, #212]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c1b6:	6a1b      	ldr	r3, [r3, #32]
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	d0f0      	beq.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c1be:	4b33      	ldr	r3, [pc, #204]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	4a34      	ldr	r2, [pc, #208]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	0019      	movs	r1, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	4b2f      	ldr	r3, [pc, #188]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800c1d2:	2317      	movs	r3, #23
 800c1d4:	18fb      	adds	r3, r7, r3
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d105      	bne.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c1dc:	4b2b      	ldr	r3, [pc, #172]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c1de:	69da      	ldr	r2, [r3, #28]
 800c1e0:	4b2a      	ldr	r3, [pc, #168]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c1e2:	492f      	ldr	r1, [pc, #188]	; (800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800c1e4:	400a      	ands	r2, r1
 800c1e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	d009      	beq.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c1f2:	4b26      	ldr	r3, [pc, #152]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f6:	2203      	movs	r2, #3
 800c1f8:	4393      	bics	r3, r2
 800c1fa:	0019      	movs	r1, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	689a      	ldr	r2, [r3, #8]
 800c200:	4b22      	ldr	r3, [pc, #136]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c202:	430a      	orrs	r2, r1
 800c204:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2202      	movs	r2, #2
 800c20c:	4013      	ands	r3, r2
 800c20e:	d009      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c210:	4b1e      	ldr	r3, [pc, #120]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c214:	4a23      	ldr	r2, [pc, #140]	; (800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800c216:	4013      	ands	r3, r2
 800c218:	0019      	movs	r1, r3
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	68da      	ldr	r2, [r3, #12]
 800c21e:	4b1b      	ldr	r3, [pc, #108]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c220:	430a      	orrs	r2, r1
 800c222:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2220      	movs	r2, #32
 800c22a:	4013      	ands	r3, r2
 800c22c:	d009      	beq.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c22e:	4b17      	ldr	r3, [pc, #92]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c232:	2210      	movs	r2, #16
 800c234:	4393      	bics	r3, r2
 800c236:	0019      	movs	r1, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	691a      	ldr	r2, [r3, #16]
 800c23c:	4b13      	ldr	r3, [pc, #76]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c23e:	430a      	orrs	r2, r1
 800c240:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	2380      	movs	r3, #128	; 0x80
 800c248:	029b      	lsls	r3, r3, #10
 800c24a:	4013      	ands	r3, r2
 800c24c:	d009      	beq.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c24e:	4b0f      	ldr	r3, [pc, #60]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c252:	2280      	movs	r2, #128	; 0x80
 800c254:	4393      	bics	r3, r2
 800c256:	0019      	movs	r1, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	699a      	ldr	r2, [r3, #24]
 800c25c:	4b0b      	ldr	r3, [pc, #44]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c25e:	430a      	orrs	r2, r1
 800c260:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	2380      	movs	r3, #128	; 0x80
 800c268:	00db      	lsls	r3, r3, #3
 800c26a:	4013      	ands	r3, r2
 800c26c:	d009      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c26e:	4b07      	ldr	r3, [pc, #28]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c272:	2240      	movs	r2, #64	; 0x40
 800c274:	4393      	bics	r3, r2
 800c276:	0019      	movs	r1, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	695a      	ldr	r2, [r3, #20]
 800c27c:	4b03      	ldr	r3, [pc, #12]	; (800c28c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800c27e:	430a      	orrs	r2, r1
 800c280:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	0018      	movs	r0, r3
 800c286:	46bd      	mov	sp, r7
 800c288:	b006      	add	sp, #24
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	40021000 	.word	0x40021000
 800c290:	40007000 	.word	0x40007000
 800c294:	fffffcff 	.word	0xfffffcff
 800c298:	fffeffff 	.word	0xfffeffff
 800c29c:	00001388 	.word	0x00001388
 800c2a0:	efffffff 	.word	0xefffffff
 800c2a4:	fffcffff 	.word	0xfffcffff

0800c2a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d101      	bne.n	800c2ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e0a8      	b.n	800c40c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d109      	bne.n	800c2d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	685a      	ldr	r2, [r3, #4]
 800c2c6:	2382      	movs	r3, #130	; 0x82
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d009      	beq.n	800c2e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	61da      	str	r2, [r3, #28]
 800c2d4:	e005      	b.n	800c2e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	225d      	movs	r2, #93	; 0x5d
 800c2ec:	5c9b      	ldrb	r3, [r3, r2]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d107      	bne.n	800c304 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	225c      	movs	r2, #92	; 0x5c
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	0018      	movs	r0, r3
 800c300:	f7fe fcc4 	bl	800ac8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	225d      	movs	r2, #93	; 0x5d
 800c308:	2102      	movs	r1, #2
 800c30a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2140      	movs	r1, #64	; 0x40
 800c318:	438a      	bics	r2, r1
 800c31a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68da      	ldr	r2, [r3, #12]
 800c320:	23e0      	movs	r3, #224	; 0xe0
 800c322:	00db      	lsls	r3, r3, #3
 800c324:	429a      	cmp	r2, r3
 800c326:	d902      	bls.n	800c32e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c328:	2300      	movs	r3, #0
 800c32a:	60fb      	str	r3, [r7, #12]
 800c32c:	e002      	b.n	800c334 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c32e:	2380      	movs	r3, #128	; 0x80
 800c330:	015b      	lsls	r3, r3, #5
 800c332:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	68da      	ldr	r2, [r3, #12]
 800c338:	23f0      	movs	r3, #240	; 0xf0
 800c33a:	011b      	lsls	r3, r3, #4
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d008      	beq.n	800c352 <HAL_SPI_Init+0xaa>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	68da      	ldr	r2, [r3, #12]
 800c344:	23e0      	movs	r3, #224	; 0xe0
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	429a      	cmp	r2, r3
 800c34a:	d002      	beq.n	800c352 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2200      	movs	r2, #0
 800c350:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	2382      	movs	r3, #130	; 0x82
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	401a      	ands	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6899      	ldr	r1, [r3, #8]
 800c360:	2384      	movs	r3, #132	; 0x84
 800c362:	021b      	lsls	r3, r3, #8
 800c364:	400b      	ands	r3, r1
 800c366:	431a      	orrs	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	2102      	movs	r1, #2
 800c36e:	400b      	ands	r3, r1
 800c370:	431a      	orrs	r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	2101      	movs	r1, #1
 800c378:	400b      	ands	r3, r1
 800c37a:	431a      	orrs	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6999      	ldr	r1, [r3, #24]
 800c380:	2380      	movs	r3, #128	; 0x80
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	400b      	ands	r3, r1
 800c386:	431a      	orrs	r2, r3
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	69db      	ldr	r3, [r3, #28]
 800c38c:	2138      	movs	r1, #56	; 0x38
 800c38e:	400b      	ands	r3, r1
 800c390:	431a      	orrs	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a1b      	ldr	r3, [r3, #32]
 800c396:	2180      	movs	r1, #128	; 0x80
 800c398:	400b      	ands	r3, r1
 800c39a:	431a      	orrs	r2, r3
 800c39c:	0011      	movs	r1, r2
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3a2:	2380      	movs	r3, #128	; 0x80
 800c3a4:	019b      	lsls	r3, r3, #6
 800c3a6:	401a      	ands	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	430a      	orrs	r2, r1
 800c3ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	699b      	ldr	r3, [r3, #24]
 800c3b4:	0c1b      	lsrs	r3, r3, #16
 800c3b6:	2204      	movs	r2, #4
 800c3b8:	401a      	ands	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	2110      	movs	r1, #16
 800c3c0:	400b      	ands	r3, r1
 800c3c2:	431a      	orrs	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3c8:	2108      	movs	r1, #8
 800c3ca:	400b      	ands	r3, r1
 800c3cc:	431a      	orrs	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68d9      	ldr	r1, [r3, #12]
 800c3d2:	23f0      	movs	r3, #240	; 0xf0
 800c3d4:	011b      	lsls	r3, r3, #4
 800c3d6:	400b      	ands	r3, r1
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	0011      	movs	r1, r2
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	2380      	movs	r3, #128	; 0x80
 800c3e0:	015b      	lsls	r3, r3, #5
 800c3e2:	401a      	ands	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	430a      	orrs	r2, r1
 800c3ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	69da      	ldr	r2, [r3, #28]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	4907      	ldr	r1, [pc, #28]	; (800c414 <HAL_SPI_Init+0x16c>)
 800c3f8:	400a      	ands	r2, r1
 800c3fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	225d      	movs	r2, #93	; 0x5d
 800c406:	2101      	movs	r1, #1
 800c408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	0018      	movs	r0, r3
 800c40e:	46bd      	mov	sp, r7
 800c410:	b004      	add	sp, #16
 800c412:	bd80      	pop	{r7, pc}
 800c414:	fffff7ff 	.word	0xfffff7ff

0800c418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e044      	b.n	800c4b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d107      	bne.n	800c442 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2274      	movs	r2, #116	; 0x74
 800c436:	2100      	movs	r1, #0
 800c438:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	0018      	movs	r0, r3
 800c43e:	f7fe fc73 	bl	800ad28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2224      	movs	r2, #36	; 0x24
 800c446:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2101      	movs	r1, #1
 800c454:	438a      	bics	r2, r1
 800c456:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	0018      	movs	r0, r3
 800c45c:	f000 fcb8 	bl	800cdd0 <UART_SetConfig>
 800c460:	0003      	movs	r3, r0
 800c462:	2b01      	cmp	r3, #1
 800c464:	d101      	bne.n	800c46a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c466:	2301      	movs	r3, #1
 800c468:	e024      	b.n	800c4b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	0018      	movs	r0, r3
 800c476:	f000 fe33 	bl	800d0e0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	685a      	ldr	r2, [r3, #4]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	490d      	ldr	r1, [pc, #52]	; (800c4bc <HAL_UART_Init+0xa4>)
 800c486:	400a      	ands	r2, r1
 800c488:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	689a      	ldr	r2, [r3, #8]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	212a      	movs	r1, #42	; 0x2a
 800c496:	438a      	bics	r2, r1
 800c498:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2101      	movs	r1, #1
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	0018      	movs	r0, r3
 800c4ae:	f000 fecb 	bl	800d248 <UART_CheckIdleState>
 800c4b2:	0003      	movs	r3, r0
}
 800c4b4:	0018      	movs	r0, r3
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	b002      	add	sp, #8
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	ffffb7ff 	.word	0xffffb7ff

0800c4c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b08a      	sub	sp, #40	; 0x28
 800c4c4:	af02      	add	r7, sp, #8
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	603b      	str	r3, [r7, #0]
 800c4cc:	1dbb      	adds	r3, r7, #6
 800c4ce:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4d4:	2b20      	cmp	r3, #32
 800c4d6:	d000      	beq.n	800c4da <HAL_UART_Transmit+0x1a>
 800c4d8:	e096      	b.n	800c608 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d003      	beq.n	800c4e8 <HAL_UART_Transmit+0x28>
 800c4e0:	1dbb      	adds	r3, r7, #6
 800c4e2:	881b      	ldrh	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	e08e      	b.n	800c60a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	689a      	ldr	r2, [r3, #8]
 800c4f0:	2380      	movs	r3, #128	; 0x80
 800c4f2:	015b      	lsls	r3, r3, #5
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d109      	bne.n	800c50c <HAL_UART_Transmit+0x4c>
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d105      	bne.n	800c50c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2201      	movs	r2, #1
 800c504:	4013      	ands	r3, r2
 800c506:	d001      	beq.n	800c50c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	e07e      	b.n	800c60a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2274      	movs	r2, #116	; 0x74
 800c510:	5c9b      	ldrb	r3, [r3, r2]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d101      	bne.n	800c51a <HAL_UART_Transmit+0x5a>
 800c516:	2302      	movs	r3, #2
 800c518:	e077      	b.n	800c60a <HAL_UART_Transmit+0x14a>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2274      	movs	r2, #116	; 0x74
 800c51e:	2101      	movs	r1, #1
 800c520:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2280      	movs	r2, #128	; 0x80
 800c526:	2100      	movs	r1, #0
 800c528:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2221      	movs	r2, #33	; 0x21
 800c52e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c530:	f7fe fd82 	bl	800b038 <HAL_GetTick>
 800c534:	0003      	movs	r3, r0
 800c536:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	1dba      	adds	r2, r7, #6
 800c53c:	2150      	movs	r1, #80	; 0x50
 800c53e:	8812      	ldrh	r2, [r2, #0]
 800c540:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	1dba      	adds	r2, r7, #6
 800c546:	2152      	movs	r1, #82	; 0x52
 800c548:	8812      	ldrh	r2, [r2, #0]
 800c54a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	2380      	movs	r3, #128	; 0x80
 800c552:	015b      	lsls	r3, r3, #5
 800c554:	429a      	cmp	r2, r3
 800c556:	d108      	bne.n	800c56a <HAL_UART_Transmit+0xaa>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d104      	bne.n	800c56a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800c560:	2300      	movs	r3, #0
 800c562:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	61bb      	str	r3, [r7, #24]
 800c568:	e003      	b.n	800c572 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2274      	movs	r2, #116	; 0x74
 800c576:	2100      	movs	r1, #0
 800c578:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800c57a:	e02d      	b.n	800c5d8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c57c:	697a      	ldr	r2, [r7, #20]
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	0013      	movs	r3, r2
 800c586:	2200      	movs	r2, #0
 800c588:	2180      	movs	r1, #128	; 0x80
 800c58a:	f000 fea5 	bl	800d2d8 <UART_WaitOnFlagUntilTimeout>
 800c58e:	1e03      	subs	r3, r0, #0
 800c590:	d001      	beq.n	800c596 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	e039      	b.n	800c60a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10b      	bne.n	800c5b4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	881a      	ldrh	r2, [r3, #0]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	05d2      	lsls	r2, r2, #23
 800c5a6:	0dd2      	lsrs	r2, r2, #23
 800c5a8:	b292      	uxth	r2, r2
 800c5aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c5ac:	69bb      	ldr	r3, [r7, #24]
 800c5ae:	3302      	adds	r3, #2
 800c5b0:	61bb      	str	r3, [r7, #24]
 800c5b2:	e008      	b.n	800c5c6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	781a      	ldrb	r2, [r3, #0]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	b292      	uxth	r2, r2
 800c5be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2252      	movs	r2, #82	; 0x52
 800c5ca:	5a9b      	ldrh	r3, [r3, r2]
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	b299      	uxth	r1, r3
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2252      	movs	r2, #82	; 0x52
 800c5d6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2252      	movs	r2, #82	; 0x52
 800c5dc:	5a9b      	ldrh	r3, [r3, r2]
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1cb      	bne.n	800c57c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c5e4:	697a      	ldr	r2, [r7, #20]
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	0013      	movs	r3, r2
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2140      	movs	r1, #64	; 0x40
 800c5f2:	f000 fe71 	bl	800d2d8 <UART_WaitOnFlagUntilTimeout>
 800c5f6:	1e03      	subs	r3, r0, #0
 800c5f8:	d001      	beq.n	800c5fe <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	e005      	b.n	800c60a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2220      	movs	r2, #32
 800c602:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	e000      	b.n	800c60a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800c608:	2302      	movs	r3, #2
  }
}
 800c60a:	0018      	movs	r0, r3
 800c60c:	46bd      	mov	sp, r7
 800c60e:	b008      	add	sp, #32
 800c610:	bd80      	pop	{r7, pc}
	...

0800c614 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b088      	sub	sp, #32
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	1dbb      	adds	r3, r7, #6
 800c620:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c626:	2b20      	cmp	r3, #32
 800c628:	d000      	beq.n	800c62c <HAL_UART_Transmit_IT+0x18>
 800c62a:	e06a      	b.n	800c702 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <HAL_UART_Transmit_IT+0x26>
 800c632:	1dbb      	adds	r3, r7, #6
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	e062      	b.n	800c704 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	689a      	ldr	r2, [r3, #8]
 800c642:	2380      	movs	r3, #128	; 0x80
 800c644:	015b      	lsls	r3, r3, #5
 800c646:	429a      	cmp	r2, r3
 800c648:	d109      	bne.n	800c65e <HAL_UART_Transmit_IT+0x4a>
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	691b      	ldr	r3, [r3, #16]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d105      	bne.n	800c65e <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2201      	movs	r2, #1
 800c656:	4013      	ands	r3, r2
 800c658:	d001      	beq.n	800c65e <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e052      	b.n	800c704 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2274      	movs	r2, #116	; 0x74
 800c662:	5c9b      	ldrb	r3, [r3, r2]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d101      	bne.n	800c66c <HAL_UART_Transmit_IT+0x58>
 800c668:	2302      	movs	r3, #2
 800c66a:	e04b      	b.n	800c704 <HAL_UART_Transmit_IT+0xf0>
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2274      	movs	r2, #116	; 0x74
 800c670:	2101      	movs	r1, #1
 800c672:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	1dba      	adds	r2, r7, #6
 800c67e:	2150      	movs	r1, #80	; 0x50
 800c680:	8812      	ldrh	r2, [r2, #0]
 800c682:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	1dba      	adds	r2, r7, #6
 800c688:	2152      	movs	r1, #82	; 0x52
 800c68a:	8812      	ldrh	r2, [r2, #0]
 800c68c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2200      	movs	r2, #0
 800c692:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2280      	movs	r2, #128	; 0x80
 800c698:	2100      	movs	r1, #0
 800c69a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2221      	movs	r2, #33	; 0x21
 800c6a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	689a      	ldr	r2, [r3, #8]
 800c6a6:	2380      	movs	r3, #128	; 0x80
 800c6a8:	015b      	lsls	r3, r3, #5
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d107      	bne.n	800c6be <HAL_UART_Transmit_IT+0xaa>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	691b      	ldr	r3, [r3, #16]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d103      	bne.n	800c6be <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	4a14      	ldr	r2, [pc, #80]	; (800c70c <HAL_UART_Transmit_IT+0xf8>)
 800c6ba:	669a      	str	r2, [r3, #104]	; 0x68
 800c6bc:	e002      	b.n	800c6c4 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	4a13      	ldr	r2, [pc, #76]	; (800c710 <HAL_UART_Transmit_IT+0xfc>)
 800c6c2:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2274      	movs	r2, #116	; 0x74
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6cc:	f3ef 8310 	mrs	r3, PRIMASK
 800c6d0:	613b      	str	r3, [r7, #16]
  return(result);
 800c6d2:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c6d4:	61fb      	str	r3, [r7, #28]
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	f383 8810 	msr	PRIMASK, r3
}
 800c6e0:	46c0      	nop			; (mov r8, r8)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2180      	movs	r1, #128	; 0x80
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	f383 8810 	msr	PRIMASK, r3
}
 800c6fc:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	e000      	b.n	800c704 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 800c702:	2302      	movs	r3, #2
  }
}
 800c704:	0018      	movs	r0, r3
 800c706:	46bd      	mov	sp, r7
 800c708:	b008      	add	sp, #32
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	0800d767 	.word	0x0800d767
 800c710:	0800d6b3 	.word	0x0800d6b3

0800c714 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b088      	sub	sp, #32
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	1dbb      	adds	r3, r7, #6
 800c720:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c726:	2b20      	cmp	r3, #32
 800c728:	d150      	bne.n	800c7cc <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d003      	beq.n	800c738 <HAL_UART_Receive_IT+0x24>
 800c730:	1dbb      	adds	r3, r7, #6
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e048      	b.n	800c7ce <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	689a      	ldr	r2, [r3, #8]
 800c740:	2380      	movs	r3, #128	; 0x80
 800c742:	015b      	lsls	r3, r3, #5
 800c744:	429a      	cmp	r2, r3
 800c746:	d109      	bne.n	800c75c <HAL_UART_Receive_IT+0x48>
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d105      	bne.n	800c75c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	2201      	movs	r2, #1
 800c754:	4013      	ands	r3, r2
 800c756:	d001      	beq.n	800c75c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e038      	b.n	800c7ce <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2274      	movs	r2, #116	; 0x74
 800c760:	5c9b      	ldrb	r3, [r3, r2]
 800c762:	2b01      	cmp	r3, #1
 800c764:	d101      	bne.n	800c76a <HAL_UART_Receive_IT+0x56>
 800c766:	2302      	movs	r3, #2
 800c768:	e031      	b.n	800c7ce <HAL_UART_Receive_IT+0xba>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2274      	movs	r2, #116	; 0x74
 800c76e:	2101      	movs	r1, #1
 800c770:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	2380      	movs	r3, #128	; 0x80
 800c780:	041b      	lsls	r3, r3, #16
 800c782:	4013      	ands	r3, r2
 800c784:	d019      	beq.n	800c7ba <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c786:	f3ef 8310 	mrs	r3, PRIMASK
 800c78a:	613b      	str	r3, [r7, #16]
  return(result);
 800c78c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c78e:	61fb      	str	r3, [r7, #28]
 800c790:	2301      	movs	r3, #1
 800c792:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	f383 8810 	msr	PRIMASK, r3
}
 800c79a:	46c0      	nop			; (mov r8, r8)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2180      	movs	r1, #128	; 0x80
 800c7a8:	04c9      	lsls	r1, r1, #19
 800c7aa:	430a      	orrs	r2, r1
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	f383 8810 	msr	PRIMASK, r3
}
 800c7b8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c7ba:	1dbb      	adds	r3, r7, #6
 800c7bc:	881a      	ldrh	r2, [r3, #0]
 800c7be:	68b9      	ldr	r1, [r7, #8]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	f000 fe4c 	bl	800d460 <UART_Start_Receive_IT>
 800c7c8:	0003      	movs	r3, r0
 800c7ca:	e000      	b.n	800c7ce <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800c7cc:	2302      	movs	r3, #2
  }
}
 800c7ce:	0018      	movs	r0, r3
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	b008      	add	sp, #32
 800c7d4:	bd80      	pop	{r7, pc}
	...

0800c7d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c7d8:	b590      	push	{r4, r7, lr}
 800c7da:	b0ab      	sub	sp, #172	; 0xac
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	69db      	ldr	r3, [r3, #28]
 800c7e6:	22a4      	movs	r2, #164	; 0xa4
 800c7e8:	18b9      	adds	r1, r7, r2
 800c7ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	20a0      	movs	r0, #160	; 0xa0
 800c7f4:	1839      	adds	r1, r7, r0
 800c7f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	219c      	movs	r1, #156	; 0x9c
 800c800:	1879      	adds	r1, r7, r1
 800c802:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c804:	0011      	movs	r1, r2
 800c806:	18bb      	adds	r3, r7, r2
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a99      	ldr	r2, [pc, #612]	; (800ca70 <HAL_UART_IRQHandler+0x298>)
 800c80c:	4013      	ands	r3, r2
 800c80e:	2298      	movs	r2, #152	; 0x98
 800c810:	18bc      	adds	r4, r7, r2
 800c812:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800c814:	18bb      	adds	r3, r7, r2
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d114      	bne.n	800c846 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c81c:	187b      	adds	r3, r7, r1
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2220      	movs	r2, #32
 800c822:	4013      	ands	r3, r2
 800c824:	d00f      	beq.n	800c846 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c826:	183b      	adds	r3, r7, r0
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2220      	movs	r2, #32
 800c82c:	4013      	ands	r3, r2
 800c82e:	d00a      	beq.n	800c846 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c834:	2b00      	cmp	r3, #0
 800c836:	d100      	bne.n	800c83a <HAL_UART_IRQHandler+0x62>
 800c838:	e296      	b.n	800cd68 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	0010      	movs	r0, r2
 800c842:	4798      	blx	r3
      }
      return;
 800c844:	e290      	b.n	800cd68 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c846:	2398      	movs	r3, #152	; 0x98
 800c848:	18fb      	adds	r3, r7, r3
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d100      	bne.n	800c852 <HAL_UART_IRQHandler+0x7a>
 800c850:	e114      	b.n	800ca7c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c852:	239c      	movs	r3, #156	; 0x9c
 800c854:	18fb      	adds	r3, r7, r3
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2201      	movs	r2, #1
 800c85a:	4013      	ands	r3, r2
 800c85c:	d106      	bne.n	800c86c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c85e:	23a0      	movs	r3, #160	; 0xa0
 800c860:	18fb      	adds	r3, r7, r3
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a83      	ldr	r2, [pc, #524]	; (800ca74 <HAL_UART_IRQHandler+0x29c>)
 800c866:	4013      	ands	r3, r2
 800c868:	d100      	bne.n	800c86c <HAL_UART_IRQHandler+0x94>
 800c86a:	e107      	b.n	800ca7c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c86c:	23a4      	movs	r3, #164	; 0xa4
 800c86e:	18fb      	adds	r3, r7, r3
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2201      	movs	r2, #1
 800c874:	4013      	ands	r3, r2
 800c876:	d012      	beq.n	800c89e <HAL_UART_IRQHandler+0xc6>
 800c878:	23a0      	movs	r3, #160	; 0xa0
 800c87a:	18fb      	adds	r3, r7, r3
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	2380      	movs	r3, #128	; 0x80
 800c880:	005b      	lsls	r3, r3, #1
 800c882:	4013      	ands	r3, r2
 800c884:	d00b      	beq.n	800c89e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2201      	movs	r2, #1
 800c88c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2280      	movs	r2, #128	; 0x80
 800c892:	589b      	ldr	r3, [r3, r2]
 800c894:	2201      	movs	r2, #1
 800c896:	431a      	orrs	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2180      	movs	r1, #128	; 0x80
 800c89c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c89e:	23a4      	movs	r3, #164	; 0xa4
 800c8a0:	18fb      	adds	r3, r7, r3
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2202      	movs	r2, #2
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	d011      	beq.n	800c8ce <HAL_UART_IRQHandler+0xf6>
 800c8aa:	239c      	movs	r3, #156	; 0x9c
 800c8ac:	18fb      	adds	r3, r7, r3
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	d00b      	beq.n	800c8ce <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2280      	movs	r2, #128	; 0x80
 800c8c2:	589b      	ldr	r3, [r3, r2]
 800c8c4:	2204      	movs	r2, #4
 800c8c6:	431a      	orrs	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2180      	movs	r1, #128	; 0x80
 800c8cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c8ce:	23a4      	movs	r3, #164	; 0xa4
 800c8d0:	18fb      	adds	r3, r7, r3
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2204      	movs	r2, #4
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	d011      	beq.n	800c8fe <HAL_UART_IRQHandler+0x126>
 800c8da:	239c      	movs	r3, #156	; 0x9c
 800c8dc:	18fb      	adds	r3, r7, r3
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	4013      	ands	r3, r2
 800c8e4:	d00b      	beq.n	800c8fe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2204      	movs	r2, #4
 800c8ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2280      	movs	r2, #128	; 0x80
 800c8f2:	589b      	ldr	r3, [r3, r2]
 800c8f4:	2202      	movs	r2, #2
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2180      	movs	r1, #128	; 0x80
 800c8fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c8fe:	23a4      	movs	r3, #164	; 0xa4
 800c900:	18fb      	adds	r3, r7, r3
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2208      	movs	r2, #8
 800c906:	4013      	ands	r3, r2
 800c908:	d017      	beq.n	800c93a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c90a:	23a0      	movs	r3, #160	; 0xa0
 800c90c:	18fb      	adds	r3, r7, r3
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2220      	movs	r2, #32
 800c912:	4013      	ands	r3, r2
 800c914:	d105      	bne.n	800c922 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c916:	239c      	movs	r3, #156	; 0x9c
 800c918:	18fb      	adds	r3, r7, r3
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2201      	movs	r2, #1
 800c91e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c920:	d00b      	beq.n	800c93a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2208      	movs	r2, #8
 800c928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2280      	movs	r2, #128	; 0x80
 800c92e:	589b      	ldr	r3, [r3, r2]
 800c930:	2208      	movs	r2, #8
 800c932:	431a      	orrs	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2180      	movs	r1, #128	; 0x80
 800c938:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c93a:	23a4      	movs	r3, #164	; 0xa4
 800c93c:	18fb      	adds	r3, r7, r3
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	2380      	movs	r3, #128	; 0x80
 800c942:	011b      	lsls	r3, r3, #4
 800c944:	4013      	ands	r3, r2
 800c946:	d013      	beq.n	800c970 <HAL_UART_IRQHandler+0x198>
 800c948:	23a0      	movs	r3, #160	; 0xa0
 800c94a:	18fb      	adds	r3, r7, r3
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	2380      	movs	r3, #128	; 0x80
 800c950:	04db      	lsls	r3, r3, #19
 800c952:	4013      	ands	r3, r2
 800c954:	d00c      	beq.n	800c970 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2280      	movs	r2, #128	; 0x80
 800c95c:	0112      	lsls	r2, r2, #4
 800c95e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2280      	movs	r2, #128	; 0x80
 800c964:	589b      	ldr	r3, [r3, r2]
 800c966:	2220      	movs	r2, #32
 800c968:	431a      	orrs	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2180      	movs	r1, #128	; 0x80
 800c96e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2280      	movs	r2, #128	; 0x80
 800c974:	589b      	ldr	r3, [r3, r2]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d100      	bne.n	800c97c <HAL_UART_IRQHandler+0x1a4>
 800c97a:	e1f7      	b.n	800cd6c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c97c:	23a4      	movs	r3, #164	; 0xa4
 800c97e:	18fb      	adds	r3, r7, r3
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2220      	movs	r2, #32
 800c984:	4013      	ands	r3, r2
 800c986:	d00e      	beq.n	800c9a6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c988:	23a0      	movs	r3, #160	; 0xa0
 800c98a:	18fb      	adds	r3, r7, r3
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2220      	movs	r2, #32
 800c990:	4013      	ands	r3, r2
 800c992:	d008      	beq.n	800c9a6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d004      	beq.n	800c9a6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	0010      	movs	r0, r2
 800c9a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2280      	movs	r2, #128	; 0x80
 800c9aa:	589b      	ldr	r3, [r3, r2]
 800c9ac:	2194      	movs	r1, #148	; 0x94
 800c9ae:	187a      	adds	r2, r7, r1
 800c9b0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	2240      	movs	r2, #64	; 0x40
 800c9ba:	4013      	ands	r3, r2
 800c9bc:	2b40      	cmp	r3, #64	; 0x40
 800c9be:	d004      	beq.n	800c9ca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c9c0:	187b      	adds	r3, r7, r1
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2228      	movs	r2, #40	; 0x28
 800c9c6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c9c8:	d047      	beq.n	800ca5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	0018      	movs	r0, r3
 800c9ce:	f000 fdf7 	bl	800d5c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	2240      	movs	r2, #64	; 0x40
 800c9da:	4013      	ands	r3, r2
 800c9dc:	2b40      	cmp	r3, #64	; 0x40
 800c9de:	d137      	bne.n	800ca50 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c9e4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800c9e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9e8:	2090      	movs	r0, #144	; 0x90
 800c9ea:	183a      	adds	r2, r7, r0
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9f4:	f383 8810 	msr	PRIMASK, r3
}
 800c9f8:	46c0      	nop			; (mov r8, r8)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	689a      	ldr	r2, [r3, #8]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2140      	movs	r1, #64	; 0x40
 800ca06:	438a      	bics	r2, r1
 800ca08:	609a      	str	r2, [r3, #8]
 800ca0a:	183b      	adds	r3, r7, r0
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca12:	f383 8810 	msr	PRIMASK, r3
}
 800ca16:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d012      	beq.n	800ca46 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca24:	4a14      	ldr	r2, [pc, #80]	; (800ca78 <HAL_UART_IRQHandler+0x2a0>)
 800ca26:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	f7fe fc47 	bl	800b2c0 <HAL_DMA_Abort_IT>
 800ca32:	1e03      	subs	r3, r0, #0
 800ca34:	d01a      	beq.n	800ca6c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca40:	0018      	movs	r0, r3
 800ca42:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca44:	e012      	b.n	800ca6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	0018      	movs	r0, r3
 800ca4a:	f000 f9ad 	bl	800cda8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca4e:	e00d      	b.n	800ca6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	0018      	movs	r0, r3
 800ca54:	f000 f9a8 	bl	800cda8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca58:	e008      	b.n	800ca6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	0018      	movs	r0, r3
 800ca5e:	f000 f9a3 	bl	800cda8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2280      	movs	r2, #128	; 0x80
 800ca66:	2100      	movs	r1, #0
 800ca68:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800ca6a:	e17f      	b.n	800cd6c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca6c:	46c0      	nop			; (mov r8, r8)
    return;
 800ca6e:	e17d      	b.n	800cd6c <HAL_UART_IRQHandler+0x594>
 800ca70:	0000080f 	.word	0x0000080f
 800ca74:	04000120 	.word	0x04000120
 800ca78:	0800d685 	.word	0x0800d685

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d000      	beq.n	800ca86 <HAL_UART_IRQHandler+0x2ae>
 800ca84:	e131      	b.n	800ccea <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ca86:	23a4      	movs	r3, #164	; 0xa4
 800ca88:	18fb      	adds	r3, r7, r3
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2210      	movs	r2, #16
 800ca8e:	4013      	ands	r3, r2
 800ca90:	d100      	bne.n	800ca94 <HAL_UART_IRQHandler+0x2bc>
 800ca92:	e12a      	b.n	800ccea <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ca94:	23a0      	movs	r3, #160	; 0xa0
 800ca96:	18fb      	adds	r3, r7, r3
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2210      	movs	r2, #16
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	d100      	bne.n	800caa2 <HAL_UART_IRQHandler+0x2ca>
 800caa0:	e123      	b.n	800ccea <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2210      	movs	r2, #16
 800caa8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	2240      	movs	r2, #64	; 0x40
 800cab2:	4013      	ands	r3, r2
 800cab4:	2b40      	cmp	r3, #64	; 0x40
 800cab6:	d000      	beq.n	800caba <HAL_UART_IRQHandler+0x2e2>
 800cab8:	e09b      	b.n	800cbf2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	217e      	movs	r1, #126	; 0x7e
 800cac4:	187b      	adds	r3, r7, r1
 800cac6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800cac8:	187b      	adds	r3, r7, r1
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d100      	bne.n	800cad2 <HAL_UART_IRQHandler+0x2fa>
 800cad0:	e14e      	b.n	800cd70 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2258      	movs	r2, #88	; 0x58
 800cad6:	5a9b      	ldrh	r3, [r3, r2]
 800cad8:	187a      	adds	r2, r7, r1
 800cada:	8812      	ldrh	r2, [r2, #0]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d300      	bcc.n	800cae2 <HAL_UART_IRQHandler+0x30a>
 800cae0:	e146      	b.n	800cd70 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	187a      	adds	r2, r7, r1
 800cae6:	215a      	movs	r1, #90	; 0x5a
 800cae8:	8812      	ldrh	r2, [r2, #0]
 800caea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf0:	699b      	ldr	r3, [r3, #24]
 800caf2:	2b20      	cmp	r3, #32
 800caf4:	d06e      	beq.n	800cbd4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caf6:	f3ef 8310 	mrs	r3, PRIMASK
 800cafa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800cafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cafe:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb00:	2301      	movs	r3, #1
 800cb02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb06:	f383 8810 	msr	PRIMASK, r3
}
 800cb0a:	46c0      	nop			; (mov r8, r8)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	681a      	ldr	r2, [r3, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	499a      	ldr	r1, [pc, #616]	; (800cd80 <HAL_UART_IRQHandler+0x5a8>)
 800cb18:	400a      	ands	r2, r1
 800cb1a:	601a      	str	r2, [r3, #0]
 800cb1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb22:	f383 8810 	msr	PRIMASK, r3
}
 800cb26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb28:	f3ef 8310 	mrs	r3, PRIMASK
 800cb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800cb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb30:	677b      	str	r3, [r7, #116]	; 0x74
 800cb32:	2301      	movs	r3, #1
 800cb34:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb38:	f383 8810 	msr	PRIMASK, r3
}
 800cb3c:	46c0      	nop			; (mov r8, r8)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	689a      	ldr	r2, [r3, #8]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2101      	movs	r1, #1
 800cb4a:	438a      	bics	r2, r1
 800cb4c:	609a      	str	r2, [r3, #8]
 800cb4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb50:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb54:	f383 8810 	msr	PRIMASK, r3
}
 800cb58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb5a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb5e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800cb60:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb62:	673b      	str	r3, [r7, #112]	; 0x70
 800cb64:	2301      	movs	r3, #1
 800cb66:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb6a:	f383 8810 	msr	PRIMASK, r3
}
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	689a      	ldr	r2, [r3, #8]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2140      	movs	r1, #64	; 0x40
 800cb7c:	438a      	bics	r2, r1
 800cb7e:	609a      	str	r2, [r3, #8]
 800cb80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb82:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb86:	f383 8810 	msr	PRIMASK, r3
}
 800cb8a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2220      	movs	r2, #32
 800cb90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb98:	f3ef 8310 	mrs	r3, PRIMASK
 800cb9c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800cb9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cba0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cba2:	2301      	movs	r3, #1
 800cba4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cba8:	f383 8810 	msr	PRIMASK, r3
}
 800cbac:	46c0      	nop			; (mov r8, r8)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2110      	movs	r1, #16
 800cbba:	438a      	bics	r2, r1
 800cbbc:	601a      	str	r2, [r3, #0]
 800cbbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbc4:	f383 8810 	msr	PRIMASK, r3
}
 800cbc8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbce:	0018      	movs	r0, r3
 800cbd0:	f7fe fb3e 	bl	800b250 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2258      	movs	r2, #88	; 0x58
 800cbd8:	5a9a      	ldrh	r2, [r3, r2]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	215a      	movs	r1, #90	; 0x5a
 800cbde:	5a5b      	ldrh	r3, [r3, r1]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	0011      	movs	r1, r2
 800cbea:	0018      	movs	r0, r3
 800cbec:	f000 f8e4 	bl	800cdb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cbf0:	e0be      	b.n	800cd70 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2258      	movs	r2, #88	; 0x58
 800cbf6:	5a99      	ldrh	r1, [r3, r2]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	225a      	movs	r2, #90	; 0x5a
 800cbfc:	5a9b      	ldrh	r3, [r3, r2]
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	208e      	movs	r0, #142	; 0x8e
 800cc02:	183b      	adds	r3, r7, r0
 800cc04:	1a8a      	subs	r2, r1, r2
 800cc06:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	225a      	movs	r2, #90	; 0x5a
 800cc0c:	5a9b      	ldrh	r3, [r3, r2]
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d100      	bne.n	800cc16 <HAL_UART_IRQHandler+0x43e>
 800cc14:	e0ae      	b.n	800cd74 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800cc16:	183b      	adds	r3, r7, r0
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d100      	bne.n	800cc20 <HAL_UART_IRQHandler+0x448>
 800cc1e:	e0a9      	b.n	800cd74 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc20:	f3ef 8310 	mrs	r3, PRIMASK
 800cc24:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc26:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc28:	2488      	movs	r4, #136	; 0x88
 800cc2a:	193a      	adds	r2, r7, r4
 800cc2c:	6013      	str	r3, [r2, #0]
 800cc2e:	2301      	movs	r3, #1
 800cc30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	f383 8810 	msr	PRIMASK, r3
}
 800cc38:	46c0      	nop			; (mov r8, r8)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	494f      	ldr	r1, [pc, #316]	; (800cd84 <HAL_UART_IRQHandler+0x5ac>)
 800cc46:	400a      	ands	r2, r1
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	193b      	adds	r3, r7, r4
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	f383 8810 	msr	PRIMASK, r3
}
 800cc56:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc58:	f3ef 8310 	mrs	r3, PRIMASK
 800cc5c:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc5e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc60:	2484      	movs	r4, #132	; 0x84
 800cc62:	193a      	adds	r2, r7, r4
 800cc64:	6013      	str	r3, [r2, #0]
 800cc66:	2301      	movs	r3, #1
 800cc68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	f383 8810 	msr	PRIMASK, r3
}
 800cc70:	46c0      	nop			; (mov r8, r8)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	689a      	ldr	r2, [r3, #8]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2101      	movs	r1, #1
 800cc7e:	438a      	bics	r2, r1
 800cc80:	609a      	str	r2, [r3, #8]
 800cc82:	193b      	adds	r3, r7, r4
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc88:	6a3b      	ldr	r3, [r7, #32]
 800cc8a:	f383 8810 	msr	PRIMASK, r3
}
 800cc8e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2220      	movs	r2, #32
 800cc94:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cca2:	f3ef 8310 	mrs	r3, PRIMASK
 800cca6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccaa:	2480      	movs	r4, #128	; 0x80
 800ccac:	193a      	adds	r2, r7, r4
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb6:	f383 8810 	msr	PRIMASK, r3
}
 800ccba:	46c0      	nop			; (mov r8, r8)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2110      	movs	r1, #16
 800ccc8:	438a      	bics	r2, r1
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	193b      	adds	r3, r7, r4
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	f383 8810 	msr	PRIMASK, r3
}
 800ccd8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ccda:	183b      	adds	r3, r7, r0
 800ccdc:	881a      	ldrh	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	0011      	movs	r1, r2
 800cce2:	0018      	movs	r0, r3
 800cce4:	f000 f868 	bl	800cdb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cce8:	e044      	b.n	800cd74 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ccea:	23a4      	movs	r3, #164	; 0xa4
 800ccec:	18fb      	adds	r3, r7, r3
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	2380      	movs	r3, #128	; 0x80
 800ccf2:	035b      	lsls	r3, r3, #13
 800ccf4:	4013      	ands	r3, r2
 800ccf6:	d010      	beq.n	800cd1a <HAL_UART_IRQHandler+0x542>
 800ccf8:	239c      	movs	r3, #156	; 0x9c
 800ccfa:	18fb      	adds	r3, r7, r3
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	2380      	movs	r3, #128	; 0x80
 800cd00:	03db      	lsls	r3, r3, #15
 800cd02:	4013      	ands	r3, r2
 800cd04:	d009      	beq.n	800cd1a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2280      	movs	r2, #128	; 0x80
 800cd0c:	0352      	lsls	r2, r2, #13
 800cd0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	0018      	movs	r0, r3
 800cd14:	f000 ff2e 	bl	800db74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cd18:	e02f      	b.n	800cd7a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cd1a:	23a4      	movs	r3, #164	; 0xa4
 800cd1c:	18fb      	adds	r3, r7, r3
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2280      	movs	r2, #128	; 0x80
 800cd22:	4013      	ands	r3, r2
 800cd24:	d00f      	beq.n	800cd46 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cd26:	23a0      	movs	r3, #160	; 0xa0
 800cd28:	18fb      	adds	r3, r7, r3
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2280      	movs	r2, #128	; 0x80
 800cd2e:	4013      	ands	r3, r2
 800cd30:	d009      	beq.n	800cd46 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d01e      	beq.n	800cd78 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	0010      	movs	r0, r2
 800cd42:	4798      	blx	r3
    }
    return;
 800cd44:	e018      	b.n	800cd78 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cd46:	23a4      	movs	r3, #164	; 0xa4
 800cd48:	18fb      	adds	r3, r7, r3
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2240      	movs	r2, #64	; 0x40
 800cd4e:	4013      	ands	r3, r2
 800cd50:	d013      	beq.n	800cd7a <HAL_UART_IRQHandler+0x5a2>
 800cd52:	23a0      	movs	r3, #160	; 0xa0
 800cd54:	18fb      	adds	r3, r7, r3
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2240      	movs	r2, #64	; 0x40
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	d00d      	beq.n	800cd7a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	0018      	movs	r0, r3
 800cd62:	f000 fd5e 	bl	800d822 <UART_EndTransmit_IT>
    return;
 800cd66:	e008      	b.n	800cd7a <HAL_UART_IRQHandler+0x5a2>
      return;
 800cd68:	46c0      	nop			; (mov r8, r8)
 800cd6a:	e006      	b.n	800cd7a <HAL_UART_IRQHandler+0x5a2>
    return;
 800cd6c:	46c0      	nop			; (mov r8, r8)
 800cd6e:	e004      	b.n	800cd7a <HAL_UART_IRQHandler+0x5a2>
      return;
 800cd70:	46c0      	nop			; (mov r8, r8)
 800cd72:	e002      	b.n	800cd7a <HAL_UART_IRQHandler+0x5a2>
      return;
 800cd74:	46c0      	nop			; (mov r8, r8)
 800cd76:	e000      	b.n	800cd7a <HAL_UART_IRQHandler+0x5a2>
    return;
 800cd78:	46c0      	nop			; (mov r8, r8)
  }

}
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	b02b      	add	sp, #172	; 0xac
 800cd7e:	bd90      	pop	{r4, r7, pc}
 800cd80:	fffffeff 	.word	0xfffffeff
 800cd84:	fffffedf 	.word	0xfffffedf

0800cd88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cd90:	46c0      	nop			; (mov r8, r8)
 800cd92:	46bd      	mov	sp, r7
 800cd94:	b002      	add	sp, #8
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cda0:	46c0      	nop			; (mov r8, r8)
 800cda2:	46bd      	mov	sp, r7
 800cda4:	b002      	add	sp, #8
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cdb0:	46c0      	nop			; (mov r8, r8)
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	b002      	add	sp, #8
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	000a      	movs	r2, r1
 800cdc2:	1cbb      	adds	r3, r7, #2
 800cdc4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cdc6:	46c0      	nop			; (mov r8, r8)
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	b002      	add	sp, #8
 800cdcc:	bd80      	pop	{r7, pc}
	...

0800cdd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b088      	sub	sp, #32
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cdd8:	231e      	movs	r3, #30
 800cdda:	18fb      	adds	r3, r7, r3
 800cddc:	2200      	movs	r2, #0
 800cdde:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	689a      	ldr	r2, [r3, #8]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	431a      	orrs	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	431a      	orrs	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	69db      	ldr	r3, [r3, #28]
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4aaf      	ldr	r2, [pc, #700]	; (800d0bc <UART_SetConfig+0x2ec>)
 800ce00:	4013      	ands	r3, r2
 800ce02:	0019      	movs	r1, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	697a      	ldr	r2, [r7, #20]
 800ce0a:	430a      	orrs	r2, r1
 800ce0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	4aaa      	ldr	r2, [pc, #680]	; (800d0c0 <UART_SetConfig+0x2f0>)
 800ce16:	4013      	ands	r3, r2
 800ce18:	0019      	movs	r1, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68da      	ldr	r2, [r3, #12]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	430a      	orrs	r2, r1
 800ce24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	699b      	ldr	r3, [r3, #24]
 800ce2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6a1b      	ldr	r3, [r3, #32]
 800ce30:	697a      	ldr	r2, [r7, #20]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	4aa1      	ldr	r2, [pc, #644]	; (800d0c4 <UART_SetConfig+0x2f4>)
 800ce3e:	4013      	ands	r3, r2
 800ce40:	0019      	movs	r1, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	430a      	orrs	r2, r1
 800ce4a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a9d      	ldr	r2, [pc, #628]	; (800d0c8 <UART_SetConfig+0x2f8>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d127      	bne.n	800cea6 <UART_SetConfig+0xd6>
 800ce56:	4b9d      	ldr	r3, [pc, #628]	; (800d0cc <UART_SetConfig+0x2fc>)
 800ce58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5a:	2203      	movs	r2, #3
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	d00d      	beq.n	800ce7e <UART_SetConfig+0xae>
 800ce62:	d81b      	bhi.n	800ce9c <UART_SetConfig+0xcc>
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d014      	beq.n	800ce92 <UART_SetConfig+0xc2>
 800ce68:	d818      	bhi.n	800ce9c <UART_SetConfig+0xcc>
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d002      	beq.n	800ce74 <UART_SetConfig+0xa4>
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d00a      	beq.n	800ce88 <UART_SetConfig+0xb8>
 800ce72:	e013      	b.n	800ce9c <UART_SetConfig+0xcc>
 800ce74:	231f      	movs	r3, #31
 800ce76:	18fb      	adds	r3, r7, r3
 800ce78:	2200      	movs	r2, #0
 800ce7a:	701a      	strb	r2, [r3, #0]
 800ce7c:	e065      	b.n	800cf4a <UART_SetConfig+0x17a>
 800ce7e:	231f      	movs	r3, #31
 800ce80:	18fb      	adds	r3, r7, r3
 800ce82:	2202      	movs	r2, #2
 800ce84:	701a      	strb	r2, [r3, #0]
 800ce86:	e060      	b.n	800cf4a <UART_SetConfig+0x17a>
 800ce88:	231f      	movs	r3, #31
 800ce8a:	18fb      	adds	r3, r7, r3
 800ce8c:	2204      	movs	r2, #4
 800ce8e:	701a      	strb	r2, [r3, #0]
 800ce90:	e05b      	b.n	800cf4a <UART_SetConfig+0x17a>
 800ce92:	231f      	movs	r3, #31
 800ce94:	18fb      	adds	r3, r7, r3
 800ce96:	2208      	movs	r2, #8
 800ce98:	701a      	strb	r2, [r3, #0]
 800ce9a:	e056      	b.n	800cf4a <UART_SetConfig+0x17a>
 800ce9c:	231f      	movs	r3, #31
 800ce9e:	18fb      	adds	r3, r7, r3
 800cea0:	2210      	movs	r2, #16
 800cea2:	701a      	strb	r2, [r3, #0]
 800cea4:	e051      	b.n	800cf4a <UART_SetConfig+0x17a>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a89      	ldr	r2, [pc, #548]	; (800d0d0 <UART_SetConfig+0x300>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d134      	bne.n	800cf1a <UART_SetConfig+0x14a>
 800ceb0:	4b86      	ldr	r3, [pc, #536]	; (800d0cc <UART_SetConfig+0x2fc>)
 800ceb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ceb4:	23c0      	movs	r3, #192	; 0xc0
 800ceb6:	029b      	lsls	r3, r3, #10
 800ceb8:	4013      	ands	r3, r2
 800ceba:	22c0      	movs	r2, #192	; 0xc0
 800cebc:	0292      	lsls	r2, r2, #10
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d017      	beq.n	800cef2 <UART_SetConfig+0x122>
 800cec2:	22c0      	movs	r2, #192	; 0xc0
 800cec4:	0292      	lsls	r2, r2, #10
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d822      	bhi.n	800cf10 <UART_SetConfig+0x140>
 800ceca:	2280      	movs	r2, #128	; 0x80
 800cecc:	0292      	lsls	r2, r2, #10
 800cece:	4293      	cmp	r3, r2
 800ced0:	d019      	beq.n	800cf06 <UART_SetConfig+0x136>
 800ced2:	2280      	movs	r2, #128	; 0x80
 800ced4:	0292      	lsls	r2, r2, #10
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d81a      	bhi.n	800cf10 <UART_SetConfig+0x140>
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d004      	beq.n	800cee8 <UART_SetConfig+0x118>
 800cede:	2280      	movs	r2, #128	; 0x80
 800cee0:	0252      	lsls	r2, r2, #9
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d00a      	beq.n	800cefc <UART_SetConfig+0x12c>
 800cee6:	e013      	b.n	800cf10 <UART_SetConfig+0x140>
 800cee8:	231f      	movs	r3, #31
 800ceea:	18fb      	adds	r3, r7, r3
 800ceec:	2200      	movs	r2, #0
 800ceee:	701a      	strb	r2, [r3, #0]
 800cef0:	e02b      	b.n	800cf4a <UART_SetConfig+0x17a>
 800cef2:	231f      	movs	r3, #31
 800cef4:	18fb      	adds	r3, r7, r3
 800cef6:	2202      	movs	r2, #2
 800cef8:	701a      	strb	r2, [r3, #0]
 800cefa:	e026      	b.n	800cf4a <UART_SetConfig+0x17a>
 800cefc:	231f      	movs	r3, #31
 800cefe:	18fb      	adds	r3, r7, r3
 800cf00:	2204      	movs	r2, #4
 800cf02:	701a      	strb	r2, [r3, #0]
 800cf04:	e021      	b.n	800cf4a <UART_SetConfig+0x17a>
 800cf06:	231f      	movs	r3, #31
 800cf08:	18fb      	adds	r3, r7, r3
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	701a      	strb	r2, [r3, #0]
 800cf0e:	e01c      	b.n	800cf4a <UART_SetConfig+0x17a>
 800cf10:	231f      	movs	r3, #31
 800cf12:	18fb      	adds	r3, r7, r3
 800cf14:	2210      	movs	r2, #16
 800cf16:	701a      	strb	r2, [r3, #0]
 800cf18:	e017      	b.n	800cf4a <UART_SetConfig+0x17a>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a6d      	ldr	r2, [pc, #436]	; (800d0d4 <UART_SetConfig+0x304>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d104      	bne.n	800cf2e <UART_SetConfig+0x15e>
 800cf24:	231f      	movs	r3, #31
 800cf26:	18fb      	adds	r3, r7, r3
 800cf28:	2200      	movs	r2, #0
 800cf2a:	701a      	strb	r2, [r3, #0]
 800cf2c:	e00d      	b.n	800cf4a <UART_SetConfig+0x17a>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a69      	ldr	r2, [pc, #420]	; (800d0d8 <UART_SetConfig+0x308>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d104      	bne.n	800cf42 <UART_SetConfig+0x172>
 800cf38:	231f      	movs	r3, #31
 800cf3a:	18fb      	adds	r3, r7, r3
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	701a      	strb	r2, [r3, #0]
 800cf40:	e003      	b.n	800cf4a <UART_SetConfig+0x17a>
 800cf42:	231f      	movs	r3, #31
 800cf44:	18fb      	adds	r3, r7, r3
 800cf46:	2210      	movs	r2, #16
 800cf48:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	69da      	ldr	r2, [r3, #28]
 800cf4e:	2380      	movs	r3, #128	; 0x80
 800cf50:	021b      	lsls	r3, r3, #8
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d15d      	bne.n	800d012 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800cf56:	231f      	movs	r3, #31
 800cf58:	18fb      	adds	r3, r7, r3
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	2b08      	cmp	r3, #8
 800cf5e:	d015      	beq.n	800cf8c <UART_SetConfig+0x1bc>
 800cf60:	dc18      	bgt.n	800cf94 <UART_SetConfig+0x1c4>
 800cf62:	2b04      	cmp	r3, #4
 800cf64:	d00d      	beq.n	800cf82 <UART_SetConfig+0x1b2>
 800cf66:	dc15      	bgt.n	800cf94 <UART_SetConfig+0x1c4>
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <UART_SetConfig+0x1a2>
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d005      	beq.n	800cf7c <UART_SetConfig+0x1ac>
 800cf70:	e010      	b.n	800cf94 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf72:	f7ff f885 	bl	800c080 <HAL_RCC_GetPCLK1Freq>
 800cf76:	0003      	movs	r3, r0
 800cf78:	61bb      	str	r3, [r7, #24]
        break;
 800cf7a:	e012      	b.n	800cfa2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf7c:	4b57      	ldr	r3, [pc, #348]	; (800d0dc <UART_SetConfig+0x30c>)
 800cf7e:	61bb      	str	r3, [r7, #24]
        break;
 800cf80:	e00f      	b.n	800cfa2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf82:	f7fe fff3 	bl	800bf6c <HAL_RCC_GetSysClockFreq>
 800cf86:	0003      	movs	r3, r0
 800cf88:	61bb      	str	r3, [r7, #24]
        break;
 800cf8a:	e00a      	b.n	800cfa2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf8c:	2380      	movs	r3, #128	; 0x80
 800cf8e:	021b      	lsls	r3, r3, #8
 800cf90:	61bb      	str	r3, [r7, #24]
        break;
 800cf92:	e006      	b.n	800cfa2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800cf94:	2300      	movs	r3, #0
 800cf96:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cf98:	231e      	movs	r3, #30
 800cf9a:	18fb      	adds	r3, r7, r3
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	701a      	strb	r2, [r3, #0]
        break;
 800cfa0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d100      	bne.n	800cfaa <UART_SetConfig+0x1da>
 800cfa8:	e07b      	b.n	800d0a2 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	005a      	lsls	r2, r3, #1
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	085b      	lsrs	r3, r3, #1
 800cfb4:	18d2      	adds	r2, r2, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	685b      	ldr	r3, [r3, #4]
 800cfba:	0019      	movs	r1, r3
 800cfbc:	0010      	movs	r0, r2
 800cfbe:	f7fc f8b5 	bl	800912c <__udivsi3>
 800cfc2:	0003      	movs	r3, r0
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	2b0f      	cmp	r3, #15
 800cfcc:	d91c      	bls.n	800d008 <UART_SetConfig+0x238>
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	2380      	movs	r3, #128	; 0x80
 800cfd2:	025b      	lsls	r3, r3, #9
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d217      	bcs.n	800d008 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	200e      	movs	r0, #14
 800cfde:	183b      	adds	r3, r7, r0
 800cfe0:	210f      	movs	r1, #15
 800cfe2:	438a      	bics	r2, r1
 800cfe4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	085b      	lsrs	r3, r3, #1
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	2207      	movs	r2, #7
 800cfee:	4013      	ands	r3, r2
 800cff0:	b299      	uxth	r1, r3
 800cff2:	183b      	adds	r3, r7, r0
 800cff4:	183a      	adds	r2, r7, r0
 800cff6:	8812      	ldrh	r2, [r2, #0]
 800cff8:	430a      	orrs	r2, r1
 800cffa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	183a      	adds	r2, r7, r0
 800d002:	8812      	ldrh	r2, [r2, #0]
 800d004:	60da      	str	r2, [r3, #12]
 800d006:	e04c      	b.n	800d0a2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800d008:	231e      	movs	r3, #30
 800d00a:	18fb      	adds	r3, r7, r3
 800d00c:	2201      	movs	r2, #1
 800d00e:	701a      	strb	r2, [r3, #0]
 800d010:	e047      	b.n	800d0a2 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d012:	231f      	movs	r3, #31
 800d014:	18fb      	adds	r3, r7, r3
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	2b08      	cmp	r3, #8
 800d01a:	d015      	beq.n	800d048 <UART_SetConfig+0x278>
 800d01c:	dc18      	bgt.n	800d050 <UART_SetConfig+0x280>
 800d01e:	2b04      	cmp	r3, #4
 800d020:	d00d      	beq.n	800d03e <UART_SetConfig+0x26e>
 800d022:	dc15      	bgt.n	800d050 <UART_SetConfig+0x280>
 800d024:	2b00      	cmp	r3, #0
 800d026:	d002      	beq.n	800d02e <UART_SetConfig+0x25e>
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d005      	beq.n	800d038 <UART_SetConfig+0x268>
 800d02c:	e010      	b.n	800d050 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d02e:	f7ff f827 	bl	800c080 <HAL_RCC_GetPCLK1Freq>
 800d032:	0003      	movs	r3, r0
 800d034:	61bb      	str	r3, [r7, #24]
        break;
 800d036:	e012      	b.n	800d05e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d038:	4b28      	ldr	r3, [pc, #160]	; (800d0dc <UART_SetConfig+0x30c>)
 800d03a:	61bb      	str	r3, [r7, #24]
        break;
 800d03c:	e00f      	b.n	800d05e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d03e:	f7fe ff95 	bl	800bf6c <HAL_RCC_GetSysClockFreq>
 800d042:	0003      	movs	r3, r0
 800d044:	61bb      	str	r3, [r7, #24]
        break;
 800d046:	e00a      	b.n	800d05e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d048:	2380      	movs	r3, #128	; 0x80
 800d04a:	021b      	lsls	r3, r3, #8
 800d04c:	61bb      	str	r3, [r7, #24]
        break;
 800d04e:	e006      	b.n	800d05e <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 800d050:	2300      	movs	r3, #0
 800d052:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d054:	231e      	movs	r3, #30
 800d056:	18fb      	adds	r3, r7, r3
 800d058:	2201      	movs	r2, #1
 800d05a:	701a      	strb	r2, [r3, #0]
        break;
 800d05c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d01e      	beq.n	800d0a2 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	085a      	lsrs	r2, r3, #1
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	18d2      	adds	r2, r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	0019      	movs	r1, r3
 800d074:	0010      	movs	r0, r2
 800d076:	f7fc f859 	bl	800912c <__udivsi3>
 800d07a:	0003      	movs	r3, r0
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	2b0f      	cmp	r3, #15
 800d084:	d909      	bls.n	800d09a <UART_SetConfig+0x2ca>
 800d086:	693a      	ldr	r2, [r7, #16]
 800d088:	2380      	movs	r3, #128	; 0x80
 800d08a:	025b      	lsls	r3, r3, #9
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d204      	bcs.n	800d09a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	693a      	ldr	r2, [r7, #16]
 800d096:	60da      	str	r2, [r3, #12]
 800d098:	e003      	b.n	800d0a2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800d09a:	231e      	movs	r3, #30
 800d09c:	18fb      	adds	r3, r7, r3
 800d09e:	2201      	movs	r2, #1
 800d0a0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d0ae:	231e      	movs	r3, #30
 800d0b0:	18fb      	adds	r3, r7, r3
 800d0b2:	781b      	ldrb	r3, [r3, #0]
}
 800d0b4:	0018      	movs	r0, r3
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	b008      	add	sp, #32
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	efff69f3 	.word	0xefff69f3
 800d0c0:	ffffcfff 	.word	0xffffcfff
 800d0c4:	fffff4ff 	.word	0xfffff4ff
 800d0c8:	40013800 	.word	0x40013800
 800d0cc:	40021000 	.word	0x40021000
 800d0d0:	40004400 	.word	0x40004400
 800d0d4:	40004800 	.word	0x40004800
 800d0d8:	40004c00 	.word	0x40004c00
 800d0dc:	007a1200 	.word	0x007a1200

0800d0e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	d00b      	beq.n	800d10a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	4a4a      	ldr	r2, [pc, #296]	; (800d224 <UART_AdvFeatureConfig+0x144>)
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	0019      	movs	r1, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	430a      	orrs	r2, r1
 800d108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10e:	2202      	movs	r2, #2
 800d110:	4013      	ands	r3, r2
 800d112:	d00b      	beq.n	800d12c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	4a43      	ldr	r2, [pc, #268]	; (800d228 <UART_AdvFeatureConfig+0x148>)
 800d11c:	4013      	ands	r3, r2
 800d11e:	0019      	movs	r1, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	430a      	orrs	r2, r1
 800d12a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d130:	2204      	movs	r2, #4
 800d132:	4013      	ands	r3, r2
 800d134:	d00b      	beq.n	800d14e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	4a3b      	ldr	r2, [pc, #236]	; (800d22c <UART_AdvFeatureConfig+0x14c>)
 800d13e:	4013      	ands	r3, r2
 800d140:	0019      	movs	r1, r3
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	430a      	orrs	r2, r1
 800d14c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d152:	2208      	movs	r2, #8
 800d154:	4013      	ands	r3, r2
 800d156:	d00b      	beq.n	800d170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	4a34      	ldr	r2, [pc, #208]	; (800d230 <UART_AdvFeatureConfig+0x150>)
 800d160:	4013      	ands	r3, r2
 800d162:	0019      	movs	r1, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	430a      	orrs	r2, r1
 800d16e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d174:	2210      	movs	r2, #16
 800d176:	4013      	ands	r3, r2
 800d178:	d00b      	beq.n	800d192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	4a2c      	ldr	r2, [pc, #176]	; (800d234 <UART_AdvFeatureConfig+0x154>)
 800d182:	4013      	ands	r3, r2
 800d184:	0019      	movs	r1, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	430a      	orrs	r2, r1
 800d190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d196:	2220      	movs	r2, #32
 800d198:	4013      	ands	r3, r2
 800d19a:	d00b      	beq.n	800d1b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	4a25      	ldr	r2, [pc, #148]	; (800d238 <UART_AdvFeatureConfig+0x158>)
 800d1a4:	4013      	ands	r3, r2
 800d1a6:	0019      	movs	r1, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	430a      	orrs	r2, r1
 800d1b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b8:	2240      	movs	r2, #64	; 0x40
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	d01d      	beq.n	800d1fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	4a1d      	ldr	r2, [pc, #116]	; (800d23c <UART_AdvFeatureConfig+0x15c>)
 800d1c6:	4013      	ands	r3, r2
 800d1c8:	0019      	movs	r1, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	430a      	orrs	r2, r1
 800d1d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1da:	2380      	movs	r3, #128	; 0x80
 800d1dc:	035b      	lsls	r3, r3, #13
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d10b      	bne.n	800d1fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	4a15      	ldr	r2, [pc, #84]	; (800d240 <UART_AdvFeatureConfig+0x160>)
 800d1ea:	4013      	ands	r3, r2
 800d1ec:	0019      	movs	r1, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	430a      	orrs	r2, r1
 800d1f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fe:	2280      	movs	r2, #128	; 0x80
 800d200:	4013      	ands	r3, r2
 800d202:	d00b      	beq.n	800d21c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	4a0e      	ldr	r2, [pc, #56]	; (800d244 <UART_AdvFeatureConfig+0x164>)
 800d20c:	4013      	ands	r3, r2
 800d20e:	0019      	movs	r1, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	430a      	orrs	r2, r1
 800d21a:	605a      	str	r2, [r3, #4]
  }
}
 800d21c:	46c0      	nop			; (mov r8, r8)
 800d21e:	46bd      	mov	sp, r7
 800d220:	b002      	add	sp, #8
 800d222:	bd80      	pop	{r7, pc}
 800d224:	fffdffff 	.word	0xfffdffff
 800d228:	fffeffff 	.word	0xfffeffff
 800d22c:	fffbffff 	.word	0xfffbffff
 800d230:	ffff7fff 	.word	0xffff7fff
 800d234:	ffffefff 	.word	0xffffefff
 800d238:	ffffdfff 	.word	0xffffdfff
 800d23c:	ffefffff 	.word	0xffefffff
 800d240:	ff9fffff 	.word	0xff9fffff
 800d244:	fff7ffff 	.word	0xfff7ffff

0800d248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af02      	add	r7, sp, #8
 800d24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2280      	movs	r2, #128	; 0x80
 800d254:	2100      	movs	r1, #0
 800d256:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d258:	f7fd feee 	bl	800b038 <HAL_GetTick>
 800d25c:	0003      	movs	r3, r0
 800d25e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2208      	movs	r2, #8
 800d268:	4013      	ands	r3, r2
 800d26a:	2b08      	cmp	r3, #8
 800d26c:	d10c      	bne.n	800d288 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2280      	movs	r2, #128	; 0x80
 800d272:	0391      	lsls	r1, r2, #14
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	4a17      	ldr	r2, [pc, #92]	; (800d2d4 <UART_CheckIdleState+0x8c>)
 800d278:	9200      	str	r2, [sp, #0]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f000 f82c 	bl	800d2d8 <UART_WaitOnFlagUntilTimeout>
 800d280:	1e03      	subs	r3, r0, #0
 800d282:	d001      	beq.n	800d288 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d284:	2303      	movs	r3, #3
 800d286:	e021      	b.n	800d2cc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	2204      	movs	r2, #4
 800d290:	4013      	ands	r3, r2
 800d292:	2b04      	cmp	r3, #4
 800d294:	d10c      	bne.n	800d2b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2280      	movs	r2, #128	; 0x80
 800d29a:	03d1      	lsls	r1, r2, #15
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	4a0d      	ldr	r2, [pc, #52]	; (800d2d4 <UART_CheckIdleState+0x8c>)
 800d2a0:	9200      	str	r2, [sp, #0]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f000 f818 	bl	800d2d8 <UART_WaitOnFlagUntilTimeout>
 800d2a8:	1e03      	subs	r3, r0, #0
 800d2aa:	d001      	beq.n	800d2b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	e00d      	b.n	800d2cc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2220      	movs	r2, #32
 800d2b4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2220      	movs	r2, #32
 800d2ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2274      	movs	r2, #116	; 0x74
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	0018      	movs	r0, r3
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	b004      	add	sp, #16
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	01ffffff 	.word	0x01ffffff

0800d2d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b094      	sub	sp, #80	; 0x50
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	603b      	str	r3, [r7, #0]
 800d2e4:	1dfb      	adds	r3, r7, #7
 800d2e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2e8:	e0a3      	b.n	800d432 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	d100      	bne.n	800d2f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 800d2f0:	e09f      	b.n	800d432 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2f2:	f7fd fea1 	bl	800b038 <HAL_GetTick>
 800d2f6:	0002      	movs	r2, r0
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d302      	bcc.n	800d308 <UART_WaitOnFlagUntilTimeout+0x30>
 800d302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d304:	2b00      	cmp	r3, #0
 800d306:	d13d      	bne.n	800d384 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d308:	f3ef 8310 	mrs	r3, PRIMASK
 800d30c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800d30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d310:	647b      	str	r3, [r7, #68]	; 0x44
 800d312:	2301      	movs	r3, #1
 800d314:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d318:	f383 8810 	msr	PRIMASK, r3
}
 800d31c:	46c0      	nop			; (mov r8, r8)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	494c      	ldr	r1, [pc, #304]	; (800d45c <UART_WaitOnFlagUntilTimeout+0x184>)
 800d32a:	400a      	ands	r2, r1
 800d32c:	601a      	str	r2, [r3, #0]
 800d32e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d330:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d334:	f383 8810 	msr	PRIMASK, r3
}
 800d338:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d33a:	f3ef 8310 	mrs	r3, PRIMASK
 800d33e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800d340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d342:	643b      	str	r3, [r7, #64]	; 0x40
 800d344:	2301      	movs	r3, #1
 800d346:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34a:	f383 8810 	msr	PRIMASK, r3
}
 800d34e:	46c0      	nop			; (mov r8, r8)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	689a      	ldr	r2, [r3, #8]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2101      	movs	r1, #1
 800d35c:	438a      	bics	r2, r1
 800d35e:	609a      	str	r2, [r3, #8]
 800d360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d362:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d366:	f383 8810 	msr	PRIMASK, r3
}
 800d36a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2220      	movs	r2, #32
 800d370:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2220      	movs	r2, #32
 800d376:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2274      	movs	r2, #116	; 0x74
 800d37c:	2100      	movs	r1, #0
 800d37e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e067      	b.n	800d454 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2204      	movs	r2, #4
 800d38c:	4013      	ands	r3, r2
 800d38e:	d050      	beq.n	800d432 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	69da      	ldr	r2, [r3, #28]
 800d396:	2380      	movs	r3, #128	; 0x80
 800d398:	011b      	lsls	r3, r3, #4
 800d39a:	401a      	ands	r2, r3
 800d39c:	2380      	movs	r3, #128	; 0x80
 800d39e:	011b      	lsls	r3, r3, #4
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d146      	bne.n	800d432 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2280      	movs	r2, #128	; 0x80
 800d3aa:	0112      	lsls	r2, r2, #4
 800d3ac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800d3b2:	613b      	str	r3, [r7, #16]
  return(result);
 800d3b4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d3b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	f383 8810 	msr	PRIMASK, r3
}
 800d3c2:	46c0      	nop			; (mov r8, r8)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4923      	ldr	r1, [pc, #140]	; (800d45c <UART_WaitOnFlagUntilTimeout+0x184>)
 800d3d0:	400a      	ands	r2, r1
 800d3d2:	601a      	str	r2, [r3, #0]
 800d3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	f383 8810 	msr	PRIMASK, r3
}
 800d3de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d3e4:	61fb      	str	r3, [r7, #28]
  return(result);
 800d3e6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3ee:	6a3b      	ldr	r3, [r7, #32]
 800d3f0:	f383 8810 	msr	PRIMASK, r3
}
 800d3f4:	46c0      	nop			; (mov r8, r8)
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	689a      	ldr	r2, [r3, #8]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2101      	movs	r1, #1
 800d402:	438a      	bics	r2, r1
 800d404:	609a      	str	r2, [r3, #8]
 800d406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d408:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	f383 8810 	msr	PRIMASK, r3
}
 800d410:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2220      	movs	r2, #32
 800d416:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2220      	movs	r2, #32
 800d41c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2280      	movs	r2, #128	; 0x80
 800d422:	2120      	movs	r1, #32
 800d424:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2274      	movs	r2, #116	; 0x74
 800d42a:	2100      	movs	r1, #0
 800d42c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800d42e:	2303      	movs	r3, #3
 800d430:	e010      	b.n	800d454 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	69db      	ldr	r3, [r3, #28]
 800d438:	68ba      	ldr	r2, [r7, #8]
 800d43a:	4013      	ands	r3, r2
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	425a      	negs	r2, r3
 800d442:	4153      	adcs	r3, r2
 800d444:	b2db      	uxtb	r3, r3
 800d446:	001a      	movs	r2, r3
 800d448:	1dfb      	adds	r3, r7, #7
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d100      	bne.n	800d452 <UART_WaitOnFlagUntilTimeout+0x17a>
 800d450:	e74b      	b.n	800d2ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	0018      	movs	r0, r3
 800d456:	46bd      	mov	sp, r7
 800d458:	b014      	add	sp, #80	; 0x50
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	fffffe5f 	.word	0xfffffe5f

0800d460 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b08c      	sub	sp, #48	; 0x30
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	1dbb      	adds	r3, r7, #6
 800d46c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	1dba      	adds	r2, r7, #6
 800d478:	2158      	movs	r1, #88	; 0x58
 800d47a:	8812      	ldrh	r2, [r2, #0]
 800d47c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	1dba      	adds	r2, r7, #6
 800d482:	215a      	movs	r1, #90	; 0x5a
 800d484:	8812      	ldrh	r2, [r2, #0]
 800d486:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	689a      	ldr	r2, [r3, #8]
 800d492:	2380      	movs	r3, #128	; 0x80
 800d494:	015b      	lsls	r3, r3, #5
 800d496:	429a      	cmp	r2, r3
 800d498:	d10d      	bne.n	800d4b6 <UART_Start_Receive_IT+0x56>
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d104      	bne.n	800d4ac <UART_Start_Receive_IT+0x4c>
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	225c      	movs	r2, #92	; 0x5c
 800d4a6:	4943      	ldr	r1, [pc, #268]	; (800d5b4 <UART_Start_Receive_IT+0x154>)
 800d4a8:	5299      	strh	r1, [r3, r2]
 800d4aa:	e02e      	b.n	800d50a <UART_Start_Receive_IT+0xaa>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	225c      	movs	r2, #92	; 0x5c
 800d4b0:	21ff      	movs	r1, #255	; 0xff
 800d4b2:	5299      	strh	r1, [r3, r2]
 800d4b4:	e029      	b.n	800d50a <UART_Start_Receive_IT+0xaa>
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10d      	bne.n	800d4da <UART_Start_Receive_IT+0x7a>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	691b      	ldr	r3, [r3, #16]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d104      	bne.n	800d4d0 <UART_Start_Receive_IT+0x70>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	225c      	movs	r2, #92	; 0x5c
 800d4ca:	21ff      	movs	r1, #255	; 0xff
 800d4cc:	5299      	strh	r1, [r3, r2]
 800d4ce:	e01c      	b.n	800d50a <UART_Start_Receive_IT+0xaa>
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	225c      	movs	r2, #92	; 0x5c
 800d4d4:	217f      	movs	r1, #127	; 0x7f
 800d4d6:	5299      	strh	r1, [r3, r2]
 800d4d8:	e017      	b.n	800d50a <UART_Start_Receive_IT+0xaa>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	689a      	ldr	r2, [r3, #8]
 800d4de:	2380      	movs	r3, #128	; 0x80
 800d4e0:	055b      	lsls	r3, r3, #21
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d10d      	bne.n	800d502 <UART_Start_Receive_IT+0xa2>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	691b      	ldr	r3, [r3, #16]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d104      	bne.n	800d4f8 <UART_Start_Receive_IT+0x98>
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	225c      	movs	r2, #92	; 0x5c
 800d4f2:	217f      	movs	r1, #127	; 0x7f
 800d4f4:	5299      	strh	r1, [r3, r2]
 800d4f6:	e008      	b.n	800d50a <UART_Start_Receive_IT+0xaa>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	225c      	movs	r2, #92	; 0x5c
 800d4fc:	213f      	movs	r1, #63	; 0x3f
 800d4fe:	5299      	strh	r1, [r3, r2]
 800d500:	e003      	b.n	800d50a <UART_Start_Receive_IT+0xaa>
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	225c      	movs	r2, #92	; 0x5c
 800d506:	2100      	movs	r1, #0
 800d508:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2280      	movs	r2, #128	; 0x80
 800d50e:	2100      	movs	r1, #0
 800d510:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2222      	movs	r2, #34	; 0x22
 800d516:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d518:	f3ef 8310 	mrs	r3, PRIMASK
 800d51c:	61fb      	str	r3, [r7, #28]
  return(result);
 800d51e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d520:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d522:	2301      	movs	r3, #1
 800d524:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d526:	6a3b      	ldr	r3, [r7, #32]
 800d528:	f383 8810 	msr	PRIMASK, r3
}
 800d52c:	46c0      	nop			; (mov r8, r8)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	689a      	ldr	r2, [r3, #8]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2101      	movs	r1, #1
 800d53a:	430a      	orrs	r2, r1
 800d53c:	609a      	str	r2, [r3, #8]
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d544:	f383 8810 	msr	PRIMASK, r3
}
 800d548:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	689a      	ldr	r2, [r3, #8]
 800d54e:	2380      	movs	r3, #128	; 0x80
 800d550:	015b      	lsls	r3, r3, #5
 800d552:	429a      	cmp	r2, r3
 800d554:	d107      	bne.n	800d566 <UART_Start_Receive_IT+0x106>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	691b      	ldr	r3, [r3, #16]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d103      	bne.n	800d566 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	4a15      	ldr	r2, [pc, #84]	; (800d5b8 <UART_Start_Receive_IT+0x158>)
 800d562:	665a      	str	r2, [r3, #100]	; 0x64
 800d564:	e002      	b.n	800d56c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	4a14      	ldr	r2, [pc, #80]	; (800d5bc <UART_Start_Receive_IT+0x15c>)
 800d56a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2274      	movs	r2, #116	; 0x74
 800d570:	2100      	movs	r1, #0
 800d572:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d574:	f3ef 8310 	mrs	r3, PRIMASK
 800d578:	613b      	str	r3, [r7, #16]
  return(result);
 800d57a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d57c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d57e:	2301      	movs	r3, #1
 800d580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f383 8810 	msr	PRIMASK, r3
}
 800d588:	46c0      	nop			; (mov r8, r8)
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2190      	movs	r1, #144	; 0x90
 800d596:	0049      	lsls	r1, r1, #1
 800d598:	430a      	orrs	r2, r1
 800d59a:	601a      	str	r2, [r3, #0]
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	f383 8810 	msr	PRIMASK, r3
}
 800d5a6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	0018      	movs	r0, r3
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	b00c      	add	sp, #48	; 0x30
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	46c0      	nop			; (mov r8, r8)
 800d5b4:	000001ff 	.word	0x000001ff
 800d5b8:	0800da0d 	.word	0x0800da0d
 800d5bc:	0800d879 	.word	0x0800d879

0800d5c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b08e      	sub	sp, #56	; 0x38
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5c8:	f3ef 8310 	mrs	r3, PRIMASK
 800d5cc:	617b      	str	r3, [r7, #20]
  return(result);
 800d5ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d5d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	f383 8810 	msr	PRIMASK, r3
}
 800d5dc:	46c0      	nop			; (mov r8, r8)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4925      	ldr	r1, [pc, #148]	; (800d680 <UART_EndRxTransfer+0xc0>)
 800d5ea:	400a      	ands	r2, r1
 800d5ec:	601a      	str	r2, [r3, #0]
 800d5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	f383 8810 	msr	PRIMASK, r3
}
 800d5f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d5fe:	623b      	str	r3, [r7, #32]
  return(result);
 800d600:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d602:	633b      	str	r3, [r7, #48]	; 0x30
 800d604:	2301      	movs	r3, #1
 800d606:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	f383 8810 	msr	PRIMASK, r3
}
 800d60e:	46c0      	nop			; (mov r8, r8)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	689a      	ldr	r2, [r3, #8]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2101      	movs	r1, #1
 800d61c:	438a      	bics	r2, r1
 800d61e:	609a      	str	r2, [r3, #8]
 800d620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d622:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d626:	f383 8810 	msr	PRIMASK, r3
}
 800d62a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d630:	2b01      	cmp	r3, #1
 800d632:	d118      	bne.n	800d666 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d634:	f3ef 8310 	mrs	r3, PRIMASK
 800d638:	60bb      	str	r3, [r7, #8]
  return(result);
 800d63a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d63c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d63e:	2301      	movs	r3, #1
 800d640:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f383 8810 	msr	PRIMASK, r3
}
 800d648:	46c0      	nop			; (mov r8, r8)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2110      	movs	r1, #16
 800d656:	438a      	bics	r2, r1
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	f383 8810 	msr	PRIMASK, r3
}
 800d664:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2220      	movs	r2, #32
 800d66a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d678:	46c0      	nop			; (mov r8, r8)
 800d67a:	46bd      	mov	sp, r7
 800d67c:	b00e      	add	sp, #56	; 0x38
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	fffffedf 	.word	0xfffffedf

0800d684 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d690:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	225a      	movs	r2, #90	; 0x5a
 800d696:	2100      	movs	r1, #0
 800d698:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2252      	movs	r2, #82	; 0x52
 800d69e:	2100      	movs	r1, #0
 800d6a0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	0018      	movs	r0, r3
 800d6a6:	f7ff fb7f 	bl	800cda8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6aa:	46c0      	nop			; (mov r8, r8)
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	b004      	add	sp, #16
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b08a      	sub	sp, #40	; 0x28
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6be:	2b21      	cmp	r3, #33	; 0x21
 800d6c0:	d14d      	bne.n	800d75e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2252      	movs	r2, #82	; 0x52
 800d6c6:	5a9b      	ldrh	r3, [r3, r2]
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d132      	bne.n	800d734 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6ce:	f3ef 8310 	mrs	r3, PRIMASK
 800d6d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d6d4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d6d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d6d8:	2301      	movs	r3, #1
 800d6da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f383 8810 	msr	PRIMASK, r3
}
 800d6e2:	46c0      	nop			; (mov r8, r8)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2180      	movs	r1, #128	; 0x80
 800d6f0:	438a      	bics	r2, r1
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	f383 8810 	msr	PRIMASK, r3
}
 800d6fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d700:	f3ef 8310 	mrs	r3, PRIMASK
 800d704:	617b      	str	r3, [r7, #20]
  return(result);
 800d706:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d708:	623b      	str	r3, [r7, #32]
 800d70a:	2301      	movs	r3, #1
 800d70c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	f383 8810 	msr	PRIMASK, r3
}
 800d714:	46c0      	nop			; (mov r8, r8)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2140      	movs	r1, #64	; 0x40
 800d722:	430a      	orrs	r2, r1
 800d724:	601a      	str	r2, [r3, #0]
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	f383 8810 	msr	PRIMASK, r3
}
 800d730:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d732:	e014      	b.n	800d75e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d738:	781a      	ldrb	r2, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	b292      	uxth	r2, r2
 800d740:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d746:	1c5a      	adds	r2, r3, #1
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2252      	movs	r2, #82	; 0x52
 800d750:	5a9b      	ldrh	r3, [r3, r2]
 800d752:	b29b      	uxth	r3, r3
 800d754:	3b01      	subs	r3, #1
 800d756:	b299      	uxth	r1, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2252      	movs	r2, #82	; 0x52
 800d75c:	5299      	strh	r1, [r3, r2]
}
 800d75e:	46c0      	nop			; (mov r8, r8)
 800d760:	46bd      	mov	sp, r7
 800d762:	b00a      	add	sp, #40	; 0x28
 800d764:	bd80      	pop	{r7, pc}

0800d766 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b08c      	sub	sp, #48	; 0x30
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d772:	2b21      	cmp	r3, #33	; 0x21
 800d774:	d151      	bne.n	800d81a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2252      	movs	r2, #82	; 0x52
 800d77a:	5a9b      	ldrh	r3, [r3, r2]
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d132      	bne.n	800d7e8 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d782:	f3ef 8310 	mrs	r3, PRIMASK
 800d786:	60fb      	str	r3, [r7, #12]
  return(result);
 800d788:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d78a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d78c:	2301      	movs	r3, #1
 800d78e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	f383 8810 	msr	PRIMASK, r3
}
 800d796:	46c0      	nop			; (mov r8, r8)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2180      	movs	r1, #128	; 0x80
 800d7a4:	438a      	bics	r2, r1
 800d7a6:	601a      	str	r2, [r3, #0]
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	f383 8810 	msr	PRIMASK, r3
}
 800d7b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d7b8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d7ba:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d7bc:	627b      	str	r3, [r7, #36]	; 0x24
 800d7be:	2301      	movs	r3, #1
 800d7c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	f383 8810 	msr	PRIMASK, r3
}
 800d7c8:	46c0      	nop			; (mov r8, r8)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2140      	movs	r1, #64	; 0x40
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	f383 8810 	msr	PRIMASK, r3
}
 800d7e4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d7e6:	e018      	b.n	800d81a <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f0:	881a      	ldrh	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	05d2      	lsls	r2, r2, #23
 800d7f8:	0dd2      	lsrs	r2, r2, #23
 800d7fa:	b292      	uxth	r2, r2
 800d7fc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d802:	1c9a      	adds	r2, r3, #2
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2252      	movs	r2, #82	; 0x52
 800d80c:	5a9b      	ldrh	r3, [r3, r2]
 800d80e:	b29b      	uxth	r3, r3
 800d810:	3b01      	subs	r3, #1
 800d812:	b299      	uxth	r1, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2252      	movs	r2, #82	; 0x52
 800d818:	5299      	strh	r1, [r3, r2]
}
 800d81a:	46c0      	nop			; (mov r8, r8)
 800d81c:	46bd      	mov	sp, r7
 800d81e:	b00c      	add	sp, #48	; 0x30
 800d820:	bd80      	pop	{r7, pc}

0800d822 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b086      	sub	sp, #24
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d82a:	f3ef 8310 	mrs	r3, PRIMASK
 800d82e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d830:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d832:	617b      	str	r3, [r7, #20]
 800d834:	2301      	movs	r3, #1
 800d836:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f383 8810 	msr	PRIMASK, r3
}
 800d83e:	46c0      	nop			; (mov r8, r8)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2140      	movs	r1, #64	; 0x40
 800d84c:	438a      	bics	r2, r1
 800d84e:	601a      	str	r2, [r3, #0]
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	f383 8810 	msr	PRIMASK, r3
}
 800d85a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2220      	movs	r2, #32
 800d860:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	0018      	movs	r0, r3
 800d86c:	f7ff fa8c 	bl	800cd88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d870:	46c0      	nop			; (mov r8, r8)
 800d872:	46bd      	mov	sp, r7
 800d874:	b006      	add	sp, #24
 800d876:	bd80      	pop	{r7, pc}

0800d878 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d878:	b590      	push	{r4, r7, lr}
 800d87a:	b091      	sub	sp, #68	; 0x44
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d880:	203e      	movs	r0, #62	; 0x3e
 800d882:	183b      	adds	r3, r7, r0
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	215c      	movs	r1, #92	; 0x5c
 800d888:	5a52      	ldrh	r2, [r2, r1]
 800d88a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d890:	2b22      	cmp	r3, #34	; 0x22
 800d892:	d000      	beq.n	800d896 <UART_RxISR_8BIT+0x1e>
 800d894:	e0a9      	b.n	800d9ea <UART_RxISR_8BIT+0x172>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	243c      	movs	r4, #60	; 0x3c
 800d89c:	193b      	adds	r3, r7, r4
 800d89e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800d8a0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d8a2:	193b      	adds	r3, r7, r4
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	183b      	adds	r3, r7, r0
 800d8aa:	881b      	ldrh	r3, [r3, #0]
 800d8ac:	b2d9      	uxtb	r1, r3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8b2:	400a      	ands	r2, r1
 800d8b4:	b2d2      	uxtb	r2, r2
 800d8b6:	701a      	strb	r2, [r3, #0]
    //huart->pRxBuffPtr++;
    //huart->RxXferCount--;
    if (huart->Instance == USART2) GSM_Receive((uint8_t)(uhdata & (uint8_t)uhMask));
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a51      	ldr	r2, [pc, #324]	; (800da04 <UART_RxISR_8BIT+0x18c>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d10a      	bne.n	800d8d8 <UART_RxISR_8BIT+0x60>
 800d8c2:	193b      	adds	r3, r7, r4
 800d8c4:	881b      	ldrh	r3, [r3, #0]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	183a      	adds	r2, r7, r0
 800d8ca:	8812      	ldrh	r2, [r2, #0]
 800d8cc:	b2d2      	uxtb	r2, r2
 800d8ce:	4013      	ands	r3, r2
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	0018      	movs	r0, r3
 800d8d4:	f7fb fcf6 	bl	80092c4 <GSM_Receive>
    if (huart->Instance == USART2) Wifi_Receive((uint8_t)(uhdata & (uint8_t)uhMask));
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a49      	ldr	r2, [pc, #292]	; (800da04 <UART_RxISR_8BIT+0x18c>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d10c      	bne.n	800d8fc <UART_RxISR_8BIT+0x84>
 800d8e2:	233c      	movs	r3, #60	; 0x3c
 800d8e4:	18fb      	adds	r3, r7, r3
 800d8e6:	881b      	ldrh	r3, [r3, #0]
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	223e      	movs	r2, #62	; 0x3e
 800d8ec:	18ba      	adds	r2, r7, r2
 800d8ee:	8812      	ldrh	r2, [r2, #0]
 800d8f0:	b2d2      	uxtb	r2, r2
 800d8f2:	4013      	ands	r3, r2
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	0018      	movs	r0, r3
 800d8f8:	f7fc fd22 	bl	800a340 <Wifi_Receive>

    if (huart->RxXferCount == 0U)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	225a      	movs	r2, #90	; 0x5a
 800d900:	5a9b      	ldrh	r3, [r3, r2]
 800d902:	b29b      	uxth	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d178      	bne.n	800d9fa <UART_RxISR_8BIT+0x182>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d908:	f3ef 8310 	mrs	r3, PRIMASK
 800d90c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d90e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d910:	63bb      	str	r3, [r7, #56]	; 0x38
 800d912:	2301      	movs	r3, #1
 800d914:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	f383 8810 	msr	PRIMASK, r3
}
 800d91c:	46c0      	nop			; (mov r8, r8)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4937      	ldr	r1, [pc, #220]	; (800da08 <UART_RxISR_8BIT+0x190>)
 800d92a:	400a      	ands	r2, r1
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d930:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d932:	6a3b      	ldr	r3, [r7, #32]
 800d934:	f383 8810 	msr	PRIMASK, r3
}
 800d938:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d93a:	f3ef 8310 	mrs	r3, PRIMASK
 800d93e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d942:	637b      	str	r3, [r7, #52]	; 0x34
 800d944:	2301      	movs	r3, #1
 800d946:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94a:	f383 8810 	msr	PRIMASK, r3
}
 800d94e:	46c0      	nop			; (mov r8, r8)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	689a      	ldr	r2, [r3, #8]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2101      	movs	r1, #1
 800d95c:	438a      	bics	r2, r1
 800d95e:	609a      	str	r2, [r3, #8]
 800d960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d962:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d966:	f383 8810 	msr	PRIMASK, r3
}
 800d96a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2220      	movs	r2, #32
 800d970:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d12f      	bne.n	800d9e0 <UART_RxISR_8BIT+0x168>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d986:	f3ef 8310 	mrs	r3, PRIMASK
 800d98a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d98c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d98e:	633b      	str	r3, [r7, #48]	; 0x30
 800d990:	2301      	movs	r3, #1
 800d992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	f383 8810 	msr	PRIMASK, r3
}
 800d99a:	46c0      	nop			; (mov r8, r8)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2110      	movs	r1, #16
 800d9a8:	438a      	bics	r2, r1
 800d9aa:	601a      	str	r2, [r3, #0]
 800d9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	f383 8810 	msr	PRIMASK, r3
}
 800d9b6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	69db      	ldr	r3, [r3, #28]
 800d9be:	2210      	movs	r2, #16
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	2b10      	cmp	r3, #16
 800d9c4:	d103      	bne.n	800d9ce <UART_RxISR_8BIT+0x156>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2210      	movs	r2, #16
 800d9cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2258      	movs	r2, #88	; 0x58
 800d9d2:	5a9a      	ldrh	r2, [r3, r2]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	0011      	movs	r1, r2
 800d9d8:	0018      	movs	r0, r3
 800d9da:	f7ff f9ed 	bl	800cdb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d9de:	e00c      	b.n	800d9fa <UART_RxISR_8BIT+0x182>
        HAL_UART_RxCpltCallback(huart);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	0018      	movs	r0, r3
 800d9e4:	f7ff f9d8 	bl	800cd98 <HAL_UART_RxCpltCallback>
}
 800d9e8:	e007      	b.n	800d9fa <UART_RxISR_8BIT+0x182>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	699a      	ldr	r2, [r3, #24]
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2108      	movs	r1, #8
 800d9f6:	430a      	orrs	r2, r1
 800d9f8:	619a      	str	r2, [r3, #24]
}
 800d9fa:	46c0      	nop			; (mov r8, r8)
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	b011      	add	sp, #68	; 0x44
 800da00:	bd90      	pop	{r4, r7, pc}
 800da02:	46c0      	nop			; (mov r8, r8)
 800da04:	40004400 	.word	0x40004400
 800da08:	fffffedf 	.word	0xfffffedf

0800da0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b090      	sub	sp, #64	; 0x40
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800da14:	203e      	movs	r0, #62	; 0x3e
 800da16:	183b      	adds	r3, r7, r0
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	215c      	movs	r1, #92	; 0x5c
 800da1c:	5a52      	ldrh	r2, [r2, r1]
 800da1e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da24:	2b22      	cmp	r3, #34	; 0x22
 800da26:	d000      	beq.n	800da2a <UART_RxISR_16BIT+0x1e>
 800da28:	e095      	b.n	800db56 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	213c      	movs	r1, #60	; 0x3c
 800da30:	187b      	adds	r3, r7, r1
 800da32:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800da34:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da3a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800da3c:	187b      	adds	r3, r7, r1
 800da3e:	183a      	adds	r2, r7, r0
 800da40:	881b      	ldrh	r3, [r3, #0]
 800da42:	8812      	ldrh	r2, [r2, #0]
 800da44:	4013      	ands	r3, r2
 800da46:	b29a      	uxth	r2, r3
 800da48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da50:	1c9a      	adds	r2, r3, #2
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	225a      	movs	r2, #90	; 0x5a
 800da5a:	5a9b      	ldrh	r3, [r3, r2]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	3b01      	subs	r3, #1
 800da60:	b299      	uxth	r1, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	225a      	movs	r2, #90	; 0x5a
 800da66:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	225a      	movs	r2, #90	; 0x5a
 800da6c:	5a9b      	ldrh	r3, [r3, r2]
 800da6e:	b29b      	uxth	r3, r3
 800da70:	2b00      	cmp	r3, #0
 800da72:	d178      	bne.n	800db66 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da74:	f3ef 8310 	mrs	r3, PRIMASK
 800da78:	617b      	str	r3, [r7, #20]
  return(result);
 800da7a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da7c:	637b      	str	r3, [r7, #52]	; 0x34
 800da7e:	2301      	movs	r3, #1
 800da80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	f383 8810 	msr	PRIMASK, r3
}
 800da88:	46c0      	nop			; (mov r8, r8)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4936      	ldr	r1, [pc, #216]	; (800db70 <UART_RxISR_16BIT+0x164>)
 800da96:	400a      	ands	r2, r1
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	f383 8810 	msr	PRIMASK, r3
}
 800daa4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daa6:	f3ef 8310 	mrs	r3, PRIMASK
 800daaa:	623b      	str	r3, [r7, #32]
  return(result);
 800daac:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daae:	633b      	str	r3, [r7, #48]	; 0x30
 800dab0:	2301      	movs	r3, #1
 800dab2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab6:	f383 8810 	msr	PRIMASK, r3
}
 800daba:	46c0      	nop			; (mov r8, r8)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	689a      	ldr	r2, [r3, #8]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2101      	movs	r1, #1
 800dac8:	438a      	bics	r2, r1
 800daca:	609a      	str	r2, [r3, #8]
 800dacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dace:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad2:	f383 8810 	msr	PRIMASK, r3
}
 800dad6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2220      	movs	r2, #32
 800dadc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2200      	movs	r2, #0
 800dae2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d12f      	bne.n	800db4c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daf2:	f3ef 8310 	mrs	r3, PRIMASK
 800daf6:	60bb      	str	r3, [r7, #8]
  return(result);
 800daf8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dafa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dafc:	2301      	movs	r3, #1
 800dafe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f383 8810 	msr	PRIMASK, r3
}
 800db06:	46c0      	nop			; (mov r8, r8)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2110      	movs	r1, #16
 800db14:	438a      	bics	r2, r1
 800db16:	601a      	str	r2, [r3, #0]
 800db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	f383 8810 	msr	PRIMASK, r3
}
 800db22:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	69db      	ldr	r3, [r3, #28]
 800db2a:	2210      	movs	r2, #16
 800db2c:	4013      	ands	r3, r2
 800db2e:	2b10      	cmp	r3, #16
 800db30:	d103      	bne.n	800db3a <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2210      	movs	r2, #16
 800db38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2258      	movs	r2, #88	; 0x58
 800db3e:	5a9a      	ldrh	r2, [r3, r2]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	0011      	movs	r1, r2
 800db44:	0018      	movs	r0, r3
 800db46:	f7ff f937 	bl	800cdb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db4a:	e00c      	b.n	800db66 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	0018      	movs	r0, r3
 800db50:	f7ff f922 	bl	800cd98 <HAL_UART_RxCpltCallback>
}
 800db54:	e007      	b.n	800db66 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	699a      	ldr	r2, [r3, #24]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2108      	movs	r1, #8
 800db62:	430a      	orrs	r2, r1
 800db64:	619a      	str	r2, [r3, #24]
}
 800db66:	46c0      	nop			; (mov r8, r8)
 800db68:	46bd      	mov	sp, r7
 800db6a:	b010      	add	sp, #64	; 0x40
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	46c0      	nop			; (mov r8, r8)
 800db70:	fffffedf 	.word	0xfffffedf

0800db74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db7c:	46c0      	nop			; (mov r8, r8)
 800db7e:	46bd      	mov	sp, r7
 800db80:	b002      	add	sp, #8
 800db82:	bd80      	pop	{r7, pc}

0800db84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	0002      	movs	r2, r0
 800db8c:	1dbb      	adds	r3, r7, #6
 800db8e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800db90:	2300      	movs	r3, #0
 800db92:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800db94:	1dbb      	adds	r3, r7, #6
 800db96:	2200      	movs	r2, #0
 800db98:	5e9b      	ldrsh	r3, [r3, r2]
 800db9a:	2b84      	cmp	r3, #132	; 0x84
 800db9c:	d006      	beq.n	800dbac <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800db9e:	1dbb      	adds	r3, r7, #6
 800dba0:	2200      	movs	r2, #0
 800dba2:	5e9a      	ldrsh	r2, [r3, r2]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	18d3      	adds	r3, r2, r3
 800dba8:	3303      	adds	r3, #3
 800dbaa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dbac:	68fb      	ldr	r3, [r7, #12]
}
 800dbae:	0018      	movs	r0, r3
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	b004      	add	sp, #16
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dbba:	f000 faa1 	bl	800e100 <vTaskStartScheduler>
  
  return osOK;
 800dbbe:	2300      	movs	r3, #0
}
 800dbc0:	0018      	movs	r0, r3
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dbc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbc8:	b089      	sub	sp, #36	; 0x24
 800dbca:	af04      	add	r7, sp, #16
 800dbcc:	6078      	str	r0, [r7, #4]
 800dbce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	695b      	ldr	r3, [r3, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d020      	beq.n	800dc1a <osThreadCreate+0x54>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	699b      	ldr	r3, [r3, #24]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d01c      	beq.n	800dc1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	685c      	ldr	r4, [r3, #4]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681d      	ldr	r5, [r3, #0]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	691e      	ldr	r6, [r3, #16]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2208      	movs	r2, #8
 800dbf0:	5e9b      	ldrsh	r3, [r3, r2]
 800dbf2:	0018      	movs	r0, r3
 800dbf4:	f7ff ffc6 	bl	800db84 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	695a      	ldr	r2, [r3, #20]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	9302      	str	r3, [sp, #8]
 800dc04:	9201      	str	r2, [sp, #4]
 800dc06:	9000      	str	r0, [sp, #0]
 800dc08:	000b      	movs	r3, r1
 800dc0a:	0032      	movs	r2, r6
 800dc0c:	0029      	movs	r1, r5
 800dc0e:	0020      	movs	r0, r4
 800dc10:	f000 f8e3 	bl	800ddda <xTaskCreateStatic>
 800dc14:	0003      	movs	r3, r0
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	e01d      	b.n	800dc56 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685c      	ldr	r4, [r3, #4]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dc26:	b29e      	uxth	r6, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2208      	movs	r2, #8
 800dc2c:	5e9b      	ldrsh	r3, [r3, r2]
 800dc2e:	0018      	movs	r0, r3
 800dc30:	f7ff ffa8 	bl	800db84 <makeFreeRtosPriority>
 800dc34:	0001      	movs	r1, r0
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	230c      	movs	r3, #12
 800dc3a:	18fb      	adds	r3, r7, r3
 800dc3c:	9301      	str	r3, [sp, #4]
 800dc3e:	9100      	str	r1, [sp, #0]
 800dc40:	0013      	movs	r3, r2
 800dc42:	0032      	movs	r2, r6
 800dc44:	0029      	movs	r1, r5
 800dc46:	0020      	movs	r0, r4
 800dc48:	f000 f90a 	bl	800de60 <xTaskCreate>
 800dc4c:	0003      	movs	r3, r0
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d001      	beq.n	800dc56 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800dc52:	2300      	movs	r3, #0
 800dc54:	e000      	b.n	800dc58 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dc56:	68fb      	ldr	r3, [r7, #12]
}
 800dc58:	0018      	movs	r0, r3
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	b005      	add	sp, #20
 800dc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d001      	beq.n	800dc76 <osDelay+0x16>
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	e000      	b.n	800dc78 <osDelay+0x18>
 800dc76:	2301      	movs	r3, #1
 800dc78:	0018      	movs	r0, r3
 800dc7a:	f000 fa1b 	bl	800e0b4 <vTaskDelay>
  
  return osOK;
 800dc7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dc80:	0018      	movs	r0, r3
 800dc82:	46bd      	mov	sp, r7
 800dc84:	b004      	add	sp, #16
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	3308      	adds	r3, #8
 800dc94:	001a      	movs	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	4252      	negs	r2, r2
 800dca0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	3308      	adds	r3, #8
 800dca6:	001a      	movs	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	3308      	adds	r3, #8
 800dcb0:	001a      	movs	r2, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dcbc:	46c0      	nop			; (mov r8, r8)
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	b002      	add	sp, #8
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dcd2:	46c0      	nop			; (mov r8, r8)
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	b002      	add	sp, #8
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	685b      	ldr	r3, [r3, #4]
 800dce8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	689a      	ldr	r2, [r3, #8]
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	683a      	ldr	r2, [r7, #0]
 800dcfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	683a      	ldr	r2, [r7, #0]
 800dd04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	1c5a      	adds	r2, r3, #1
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	601a      	str	r2, [r3, #0]
}
 800dd16:	46c0      	nop			; (mov r8, r8)
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	b004      	add	sp, #16
 800dd1c:	bd80      	pop	{r7, pc}

0800dd1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b084      	sub	sp, #16
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
 800dd26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	3301      	adds	r3, #1
 800dd32:	d103      	bne.n	800dd3c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	691b      	ldr	r3, [r3, #16]
 800dd38:	60fb      	str	r3, [r7, #12]
 800dd3a:	e00c      	b.n	800dd56 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	3308      	adds	r3, #8
 800dd40:	60fb      	str	r3, [r7, #12]
 800dd42:	e002      	b.n	800dd4a <vListInsert+0x2c>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	60fb      	str	r3, [r7, #12]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d2f6      	bcs.n	800dd44 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	685a      	ldr	r2, [r3, #4]
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	1c5a      	adds	r2, r3, #1
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	601a      	str	r2, [r3, #0]
}
 800dd82:	46c0      	nop			; (mov r8, r8)
 800dd84:	46bd      	mov	sp, r7
 800dd86:	b004      	add	sp, #16
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b084      	sub	sp, #16
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	691b      	ldr	r3, [r3, #16]
 800dd96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	6892      	ldr	r2, [r2, #8]
 800dda0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	6852      	ldr	r2, [r2, #4]
 800ddaa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d103      	bne.n	800ddbe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	689a      	ldr	r2, [r3, #8]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	1e5a      	subs	r2, r3, #1
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
}
 800ddd2:	0018      	movs	r0, r3
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	b004      	add	sp, #16
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ddda:	b590      	push	{r4, r7, lr}
 800dddc:	b08d      	sub	sp, #52	; 0x34
 800ddde:	af04      	add	r7, sp, #16
 800dde0:	60f8      	str	r0, [r7, #12]
 800dde2:	60b9      	str	r1, [r7, #8]
 800dde4:	607a      	str	r2, [r7, #4]
 800dde6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d101      	bne.n	800ddf2 <xTaskCreateStatic+0x18>
 800ddee:	b672      	cpsid	i
 800ddf0:	e7fe      	b.n	800ddf0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800ddf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d101      	bne.n	800ddfc <xTaskCreateStatic+0x22>
 800ddf8:	b672      	cpsid	i
 800ddfa:	e7fe      	b.n	800ddfa <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ddfc:	2354      	movs	r3, #84	; 0x54
 800ddfe:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	2b54      	cmp	r3, #84	; 0x54
 800de04:	d001      	beq.n	800de0a <xTaskCreateStatic+0x30>
 800de06:	b672      	cpsid	i
 800de08:	e7fe      	b.n	800de08 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d020      	beq.n	800de52 <xTaskCreateStatic+0x78>
 800de10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de12:	2b00      	cmp	r3, #0
 800de14:	d01d      	beq.n	800de52 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de18:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de1e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	2251      	movs	r2, #81	; 0x51
 800de24:	2102      	movs	r1, #2
 800de26:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de28:	683c      	ldr	r4, [r7, #0]
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	68b9      	ldr	r1, [r7, #8]
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	2300      	movs	r3, #0
 800de32:	9303      	str	r3, [sp, #12]
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	9302      	str	r3, [sp, #8]
 800de38:	2318      	movs	r3, #24
 800de3a:	18fb      	adds	r3, r7, r3
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	0023      	movs	r3, r4
 800de44:	f000 f858 	bl	800def8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	0018      	movs	r0, r3
 800de4c:	f000 f8ce 	bl	800dfec <prvAddNewTaskToReadyList>
 800de50:	e001      	b.n	800de56 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800de52:	2300      	movs	r3, #0
 800de54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800de56:	69bb      	ldr	r3, [r7, #24]
	}
 800de58:	0018      	movs	r0, r3
 800de5a:	46bd      	mov	sp, r7
 800de5c:	b009      	add	sp, #36	; 0x24
 800de5e:	bd90      	pop	{r4, r7, pc}

0800de60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de60:	b590      	push	{r4, r7, lr}
 800de62:	b08d      	sub	sp, #52	; 0x34
 800de64:	af04      	add	r7, sp, #16
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	603b      	str	r3, [r7, #0]
 800de6c:	1dbb      	adds	r3, r7, #6
 800de6e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de70:	1dbb      	adds	r3, r7, #6
 800de72:	881b      	ldrh	r3, [r3, #0]
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	0018      	movs	r0, r3
 800de78:	f000 fda2 	bl	800e9c0 <pvPortMalloc>
 800de7c:	0003      	movs	r3, r0
 800de7e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d010      	beq.n	800dea8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800de86:	2054      	movs	r0, #84	; 0x54
 800de88:	f000 fd9a 	bl	800e9c0 <pvPortMalloc>
 800de8c:	0003      	movs	r3, r0
 800de8e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d003      	beq.n	800de9e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	631a      	str	r2, [r3, #48]	; 0x30
 800de9c:	e006      	b.n	800deac <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	0018      	movs	r0, r3
 800dea2:	f000 fe33 	bl	800eb0c <vPortFree>
 800dea6:	e001      	b.n	800deac <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dea8:	2300      	movs	r3, #0
 800deaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d01a      	beq.n	800dee8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	2251      	movs	r2, #81	; 0x51
 800deb6:	2100      	movs	r1, #0
 800deb8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800deba:	1dbb      	adds	r3, r7, #6
 800debc:	881a      	ldrh	r2, [r3, #0]
 800debe:	683c      	ldr	r4, [r7, #0]
 800dec0:	68b9      	ldr	r1, [r7, #8]
 800dec2:	68f8      	ldr	r0, [r7, #12]
 800dec4:	2300      	movs	r3, #0
 800dec6:	9303      	str	r3, [sp, #12]
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	9302      	str	r3, [sp, #8]
 800decc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dece:	9301      	str	r3, [sp, #4]
 800ded0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	0023      	movs	r3, r4
 800ded6:	f000 f80f 	bl	800def8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800deda:	69fb      	ldr	r3, [r7, #28]
 800dedc:	0018      	movs	r0, r3
 800dede:	f000 f885 	bl	800dfec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dee2:	2301      	movs	r3, #1
 800dee4:	61bb      	str	r3, [r7, #24]
 800dee6:	e002      	b.n	800deee <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dee8:	2301      	movs	r3, #1
 800deea:	425b      	negs	r3, r3
 800deec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800deee:	69bb      	ldr	r3, [r7, #24]
	}
 800def0:	0018      	movs	r0, r3
 800def2:	46bd      	mov	sp, r7
 800def4:	b009      	add	sp, #36	; 0x24
 800def6:	bd90      	pop	{r4, r7, pc}

0800def8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b086      	sub	sp, #24
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
 800df04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	4936      	ldr	r1, [pc, #216]	; (800dfe8 <prvInitialiseNewTask+0xf0>)
 800df0e:	468c      	mov	ip, r1
 800df10:	4463      	add	r3, ip
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	18d3      	adds	r3, r2, r3
 800df16:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	2207      	movs	r2, #7
 800df1c:	4393      	bics	r3, r2
 800df1e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	2207      	movs	r2, #7
 800df24:	4013      	ands	r3, r2
 800df26:	d001      	beq.n	800df2c <prvInitialiseNewTask+0x34>
 800df28:	b672      	cpsid	i
 800df2a:	e7fe      	b.n	800df2a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df2c:	2300      	movs	r3, #0
 800df2e:	617b      	str	r3, [r7, #20]
 800df30:	e013      	b.n	800df5a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	18d3      	adds	r3, r2, r3
 800df38:	7818      	ldrb	r0, [r3, #0]
 800df3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df3c:	2134      	movs	r1, #52	; 0x34
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	18d3      	adds	r3, r2, r3
 800df42:	185b      	adds	r3, r3, r1
 800df44:	1c02      	adds	r2, r0, #0
 800df46:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800df48:	68ba      	ldr	r2, [r7, #8]
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	18d3      	adds	r3, r2, r3
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d006      	beq.n	800df62 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	3301      	adds	r3, #1
 800df58:	617b      	str	r3, [r7, #20]
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	2b0f      	cmp	r3, #15
 800df5e:	d9e8      	bls.n	800df32 <prvInitialiseNewTask+0x3a>
 800df60:	e000      	b.n	800df64 <prvInitialiseNewTask+0x6c>
		{
			break;
 800df62:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df66:	2243      	movs	r2, #67	; 0x43
 800df68:	2100      	movs	r1, #0
 800df6a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	2b06      	cmp	r3, #6
 800df70:	d901      	bls.n	800df76 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df72:	2306      	movs	r3, #6
 800df74:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df78:	6a3a      	ldr	r2, [r7, #32]
 800df7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800df7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7e:	6a3a      	ldr	r2, [r7, #32]
 800df80:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800df82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df84:	2200      	movs	r2, #0
 800df86:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df8a:	3304      	adds	r3, #4
 800df8c:	0018      	movs	r0, r3
 800df8e:	f7ff fe99 	bl	800dcc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	3318      	adds	r3, #24
 800df96:	0018      	movs	r0, r3
 800df98:	f7ff fe94 	bl	800dcc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfa0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfa2:	6a3b      	ldr	r3, [r7, #32]
 800dfa4:	2207      	movs	r2, #7
 800dfa6:	1ad2      	subs	r2, r2, r3
 800dfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfb0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfba:	2250      	movs	r2, #80	; 0x50
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	68f9      	ldr	r1, [r7, #12]
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	0018      	movs	r0, r3
 800dfc8:	f000 fbc4 	bl	800e754 <pxPortInitialiseStack>
 800dfcc:	0002      	movs	r2, r0
 800dfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800dfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfde:	46c0      	nop			; (mov r8, r8)
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	b006      	add	sp, #24
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	46c0      	nop			; (mov r8, r8)
 800dfe8:	3fffffff 	.word	0x3fffffff

0800dfec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dff4:	f000 fc4c 	bl	800e890 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dff8:	4b28      	ldr	r3, [pc, #160]	; (800e09c <prvAddNewTaskToReadyList+0xb0>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	1c5a      	adds	r2, r3, #1
 800dffe:	4b27      	ldr	r3, [pc, #156]	; (800e09c <prvAddNewTaskToReadyList+0xb0>)
 800e000:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800e002:	4b27      	ldr	r3, [pc, #156]	; (800e0a0 <prvAddNewTaskToReadyList+0xb4>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d109      	bne.n	800e01e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e00a:	4b25      	ldr	r3, [pc, #148]	; (800e0a0 <prvAddNewTaskToReadyList+0xb4>)
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e010:	4b22      	ldr	r3, [pc, #136]	; (800e09c <prvAddNewTaskToReadyList+0xb0>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b01      	cmp	r3, #1
 800e016:	d110      	bne.n	800e03a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e018:	f000 fa6e 	bl	800e4f8 <prvInitialiseTaskLists>
 800e01c:	e00d      	b.n	800e03a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e01e:	4b21      	ldr	r3, [pc, #132]	; (800e0a4 <prvAddNewTaskToReadyList+0xb8>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d109      	bne.n	800e03a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e026:	4b1e      	ldr	r3, [pc, #120]	; (800e0a0 <prvAddNewTaskToReadyList+0xb4>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e030:	429a      	cmp	r2, r3
 800e032:	d802      	bhi.n	800e03a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e034:	4b1a      	ldr	r3, [pc, #104]	; (800e0a0 <prvAddNewTaskToReadyList+0xb4>)
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e03a:	4b1b      	ldr	r3, [pc, #108]	; (800e0a8 <prvAddNewTaskToReadyList+0xbc>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	1c5a      	adds	r2, r3, #1
 800e040:	4b19      	ldr	r3, [pc, #100]	; (800e0a8 <prvAddNewTaskToReadyList+0xbc>)
 800e042:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e048:	4b18      	ldr	r3, [pc, #96]	; (800e0ac <prvAddNewTaskToReadyList+0xc0>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d903      	bls.n	800e058 <prvAddNewTaskToReadyList+0x6c>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e054:	4b15      	ldr	r3, [pc, #84]	; (800e0ac <prvAddNewTaskToReadyList+0xc0>)
 800e056:	601a      	str	r2, [r3, #0]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05c:	0013      	movs	r3, r2
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	189b      	adds	r3, r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4a12      	ldr	r2, [pc, #72]	; (800e0b0 <prvAddNewTaskToReadyList+0xc4>)
 800e066:	189a      	adds	r2, r3, r2
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	3304      	adds	r3, #4
 800e06c:	0019      	movs	r1, r3
 800e06e:	0010      	movs	r0, r2
 800e070:	f7ff fe33 	bl	800dcda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e074:	f000 fc1e 	bl	800e8b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e078:	4b0a      	ldr	r3, [pc, #40]	; (800e0a4 <prvAddNewTaskToReadyList+0xb8>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d008      	beq.n	800e092 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e080:	4b07      	ldr	r3, [pc, #28]	; (800e0a0 <prvAddNewTaskToReadyList+0xb4>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d201      	bcs.n	800e092 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e08e:	f000 fbef 	bl	800e870 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e092:	46c0      	nop			; (mov r8, r8)
 800e094:	46bd      	mov	sp, r7
 800e096:	b002      	add	sp, #8
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	46c0      	nop			; (mov r8, r8)
 800e09c:	2000055c 	.word	0x2000055c
 800e0a0:	2000045c 	.word	0x2000045c
 800e0a4:	20000568 	.word	0x20000568
 800e0a8:	20000578 	.word	0x20000578
 800e0ac:	20000564 	.word	0x20000564
 800e0b0:	20000460 	.word	0x20000460

0800e0b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d010      	beq.n	800e0e8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e0c6:	4b0d      	ldr	r3, [pc, #52]	; (800e0fc <vTaskDelay+0x48>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <vTaskDelay+0x1e>
 800e0ce:	b672      	cpsid	i
 800e0d0:	e7fe      	b.n	800e0d0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800e0d2:	f000 f863 	bl	800e19c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2100      	movs	r1, #0
 800e0da:	0018      	movs	r0, r3
 800e0dc:	f000 fae6 	bl	800e6ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e0e0:	f000 f868 	bl	800e1b4 <xTaskResumeAll>
 800e0e4:	0003      	movs	r3, r0
 800e0e6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800e0ee:	f000 fbbf 	bl	800e870 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e0f2:	46c0      	nop			; (mov r8, r8)
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	b004      	add	sp, #16
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	46c0      	nop			; (mov r8, r8)
 800e0fc:	20000584 	.word	0x20000584

0800e100 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e100:	b590      	push	{r4, r7, lr}
 800e102:	b089      	sub	sp, #36	; 0x24
 800e104:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e106:	2300      	movs	r3, #0
 800e108:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e10a:	2300      	movs	r3, #0
 800e10c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e10e:	003a      	movs	r2, r7
 800e110:	1d39      	adds	r1, r7, #4
 800e112:	2308      	movs	r3, #8
 800e114:	18fb      	adds	r3, r7, r3
 800e116:	0018      	movs	r0, r3
 800e118:	f7fc f936 	bl	800a388 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e11c:	683c      	ldr	r4, [r7, #0]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	4918      	ldr	r1, [pc, #96]	; (800e184 <vTaskStartScheduler+0x84>)
 800e124:	4818      	ldr	r0, [pc, #96]	; (800e188 <vTaskStartScheduler+0x88>)
 800e126:	9202      	str	r2, [sp, #8]
 800e128:	9301      	str	r3, [sp, #4]
 800e12a:	2300      	movs	r3, #0
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	2300      	movs	r3, #0
 800e130:	0022      	movs	r2, r4
 800e132:	f7ff fe52 	bl	800ddda <xTaskCreateStatic>
 800e136:	0002      	movs	r2, r0
 800e138:	4b14      	ldr	r3, [pc, #80]	; (800e18c <vTaskStartScheduler+0x8c>)
 800e13a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e13c:	4b13      	ldr	r3, [pc, #76]	; (800e18c <vTaskStartScheduler+0x8c>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e144:	2301      	movs	r3, #1
 800e146:	60fb      	str	r3, [r7, #12]
 800e148:	e001      	b.n	800e14e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e14a:	2300      	movs	r3, #0
 800e14c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2b01      	cmp	r3, #1
 800e152:	d10d      	bne.n	800e170 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800e154:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e156:	4b0e      	ldr	r3, [pc, #56]	; (800e190 <vTaskStartScheduler+0x90>)
 800e158:	2201      	movs	r2, #1
 800e15a:	4252      	negs	r2, r2
 800e15c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e15e:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <vTaskStartScheduler+0x94>)
 800e160:	2201      	movs	r2, #1
 800e162:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e164:	4b0c      	ldr	r3, [pc, #48]	; (800e198 <vTaskStartScheduler+0x98>)
 800e166:	2200      	movs	r2, #0
 800e168:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e16a:	f000 fb5d 	bl	800e828 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e16e:	e004      	b.n	800e17a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	3301      	adds	r3, #1
 800e174:	d101      	bne.n	800e17a <vTaskStartScheduler+0x7a>
 800e176:	b672      	cpsid	i
 800e178:	e7fe      	b.n	800e178 <vTaskStartScheduler+0x78>
}
 800e17a:	46c0      	nop			; (mov r8, r8)
 800e17c:	46bd      	mov	sp, r7
 800e17e:	b005      	add	sp, #20
 800e180:	bd90      	pop	{r4, r7, pc}
 800e182:	46c0      	nop			; (mov r8, r8)
 800e184:	0800fa1c 	.word	0x0800fa1c
 800e188:	0800e4d9 	.word	0x0800e4d9
 800e18c:	20000580 	.word	0x20000580
 800e190:	2000057c 	.word	0x2000057c
 800e194:	20000568 	.word	0x20000568
 800e198:	20000560 	.word	0x20000560

0800e19c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e1a0:	4b03      	ldr	r3, [pc, #12]	; (800e1b0 <vTaskSuspendAll+0x14>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	1c5a      	adds	r2, r3, #1
 800e1a6:	4b02      	ldr	r3, [pc, #8]	; (800e1b0 <vTaskSuspendAll+0x14>)
 800e1a8:	601a      	str	r2, [r3, #0]
}
 800e1aa:	46c0      	nop			; (mov r8, r8)
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	20000584 	.word	0x20000584

0800e1b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e1c2:	4b3a      	ldr	r3, [pc, #232]	; (800e2ac <xTaskResumeAll+0xf8>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <xTaskResumeAll+0x1a>
 800e1ca:	b672      	cpsid	i
 800e1cc:	e7fe      	b.n	800e1cc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e1ce:	f000 fb5f 	bl	800e890 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e1d2:	4b36      	ldr	r3, [pc, #216]	; (800e2ac <xTaskResumeAll+0xf8>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	1e5a      	subs	r2, r3, #1
 800e1d8:	4b34      	ldr	r3, [pc, #208]	; (800e2ac <xTaskResumeAll+0xf8>)
 800e1da:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1dc:	4b33      	ldr	r3, [pc, #204]	; (800e2ac <xTaskResumeAll+0xf8>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d15b      	bne.n	800e29c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e1e4:	4b32      	ldr	r3, [pc, #200]	; (800e2b0 <xTaskResumeAll+0xfc>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d057      	beq.n	800e29c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1ec:	e02f      	b.n	800e24e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e1ee:	4b31      	ldr	r3, [pc, #196]	; (800e2b4 <xTaskResumeAll+0x100>)
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	3318      	adds	r3, #24
 800e1fa:	0018      	movs	r0, r3
 800e1fc:	f7ff fdc5 	bl	800dd8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	3304      	adds	r3, #4
 800e204:	0018      	movs	r0, r3
 800e206:	f7ff fdc0 	bl	800dd8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20e:	4b2a      	ldr	r3, [pc, #168]	; (800e2b8 <xTaskResumeAll+0x104>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	429a      	cmp	r2, r3
 800e214:	d903      	bls.n	800e21e <xTaskResumeAll+0x6a>
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21a:	4b27      	ldr	r3, [pc, #156]	; (800e2b8 <xTaskResumeAll+0x104>)
 800e21c:	601a      	str	r2, [r3, #0]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e222:	0013      	movs	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	189b      	adds	r3, r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4a24      	ldr	r2, [pc, #144]	; (800e2bc <xTaskResumeAll+0x108>)
 800e22c:	189a      	adds	r2, r3, r2
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	3304      	adds	r3, #4
 800e232:	0019      	movs	r1, r3
 800e234:	0010      	movs	r0, r2
 800e236:	f7ff fd50 	bl	800dcda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23e:	4b20      	ldr	r3, [pc, #128]	; (800e2c0 <xTaskResumeAll+0x10c>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e244:	429a      	cmp	r2, r3
 800e246:	d302      	bcc.n	800e24e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800e248:	4b1e      	ldr	r3, [pc, #120]	; (800e2c4 <xTaskResumeAll+0x110>)
 800e24a:	2201      	movs	r2, #1
 800e24c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e24e:	4b19      	ldr	r3, [pc, #100]	; (800e2b4 <xTaskResumeAll+0x100>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1cb      	bne.n	800e1ee <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e25c:	f000 f9e6 	bl	800e62c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e260:	4b19      	ldr	r3, [pc, #100]	; (800e2c8 <xTaskResumeAll+0x114>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d00f      	beq.n	800e28c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e26c:	f000 f82e 	bl	800e2cc <xTaskIncrementTick>
 800e270:	1e03      	subs	r3, r0, #0
 800e272:	d002      	beq.n	800e27a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800e274:	4b13      	ldr	r3, [pc, #76]	; (800e2c4 <xTaskResumeAll+0x110>)
 800e276:	2201      	movs	r2, #1
 800e278:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	3b01      	subs	r3, #1
 800e27e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1f2      	bne.n	800e26c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800e286:	4b10      	ldr	r3, [pc, #64]	; (800e2c8 <xTaskResumeAll+0x114>)
 800e288:	2200      	movs	r2, #0
 800e28a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e28c:	4b0d      	ldr	r3, [pc, #52]	; (800e2c4 <xTaskResumeAll+0x110>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d003      	beq.n	800e29c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e294:	2301      	movs	r3, #1
 800e296:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e298:	f000 faea 	bl	800e870 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e29c:	f000 fb0a 	bl	800e8b4 <vPortExitCritical>

	return xAlreadyYielded;
 800e2a0:	68bb      	ldr	r3, [r7, #8]
}
 800e2a2:	0018      	movs	r0, r3
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	b004      	add	sp, #16
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	46c0      	nop			; (mov r8, r8)
 800e2ac:	20000584 	.word	0x20000584
 800e2b0:	2000055c 	.word	0x2000055c
 800e2b4:	2000051c 	.word	0x2000051c
 800e2b8:	20000564 	.word	0x20000564
 800e2bc:	20000460 	.word	0x20000460
 800e2c0:	2000045c 	.word	0x2000045c
 800e2c4:	20000570 	.word	0x20000570
 800e2c8:	2000056c 	.word	0x2000056c

0800e2cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b086      	sub	sp, #24
 800e2d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2d6:	4b4c      	ldr	r3, [pc, #304]	; (800e408 <xTaskIncrementTick+0x13c>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d000      	beq.n	800e2e0 <xTaskIncrementTick+0x14>
 800e2de:	e083      	b.n	800e3e8 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e2e0:	4b4a      	ldr	r3, [pc, #296]	; (800e40c <xTaskIncrementTick+0x140>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e2e8:	4b48      	ldr	r3, [pc, #288]	; (800e40c <xTaskIncrementTick+0x140>)
 800e2ea:	693a      	ldr	r2, [r7, #16]
 800e2ec:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d117      	bne.n	800e324 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800e2f4:	4b46      	ldr	r3, [pc, #280]	; (800e410 <xTaskIncrementTick+0x144>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d001      	beq.n	800e302 <xTaskIncrementTick+0x36>
 800e2fe:	b672      	cpsid	i
 800e300:	e7fe      	b.n	800e300 <xTaskIncrementTick+0x34>
 800e302:	4b43      	ldr	r3, [pc, #268]	; (800e410 <xTaskIncrementTick+0x144>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	60fb      	str	r3, [r7, #12]
 800e308:	4b42      	ldr	r3, [pc, #264]	; (800e414 <xTaskIncrementTick+0x148>)
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	4b40      	ldr	r3, [pc, #256]	; (800e410 <xTaskIncrementTick+0x144>)
 800e30e:	601a      	str	r2, [r3, #0]
 800e310:	4b40      	ldr	r3, [pc, #256]	; (800e414 <xTaskIncrementTick+0x148>)
 800e312:	68fa      	ldr	r2, [r7, #12]
 800e314:	601a      	str	r2, [r3, #0]
 800e316:	4b40      	ldr	r3, [pc, #256]	; (800e418 <xTaskIncrementTick+0x14c>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	4b3e      	ldr	r3, [pc, #248]	; (800e418 <xTaskIncrementTick+0x14c>)
 800e31e:	601a      	str	r2, [r3, #0]
 800e320:	f000 f984 	bl	800e62c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e324:	4b3d      	ldr	r3, [pc, #244]	; (800e41c <xTaskIncrementTick+0x150>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	693a      	ldr	r2, [r7, #16]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d34e      	bcc.n	800e3cc <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e32e:	4b38      	ldr	r3, [pc, #224]	; (800e410 <xTaskIncrementTick+0x144>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d101      	bne.n	800e33c <xTaskIncrementTick+0x70>
 800e338:	2301      	movs	r3, #1
 800e33a:	e000      	b.n	800e33e <xTaskIncrementTick+0x72>
 800e33c:	2300      	movs	r3, #0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d004      	beq.n	800e34c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e342:	4b36      	ldr	r3, [pc, #216]	; (800e41c <xTaskIncrementTick+0x150>)
 800e344:	2201      	movs	r2, #1
 800e346:	4252      	negs	r2, r2
 800e348:	601a      	str	r2, [r3, #0]
					break;
 800e34a:	e03f      	b.n	800e3cc <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e34c:	4b30      	ldr	r3, [pc, #192]	; (800e410 <xTaskIncrementTick+0x144>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e35c:	693a      	ldr	r2, [r7, #16]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	429a      	cmp	r2, r3
 800e362:	d203      	bcs.n	800e36c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e364:	4b2d      	ldr	r3, [pc, #180]	; (800e41c <xTaskIncrementTick+0x150>)
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	601a      	str	r2, [r3, #0]
						break;
 800e36a:	e02f      	b.n	800e3cc <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	3304      	adds	r3, #4
 800e370:	0018      	movs	r0, r3
 800e372:	f7ff fd0a 	bl	800dd8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d004      	beq.n	800e388 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	3318      	adds	r3, #24
 800e382:	0018      	movs	r0, r3
 800e384:	f7ff fd01 	bl	800dd8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e38c:	4b24      	ldr	r3, [pc, #144]	; (800e420 <xTaskIncrementTick+0x154>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	429a      	cmp	r2, r3
 800e392:	d903      	bls.n	800e39c <xTaskIncrementTick+0xd0>
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e398:	4b21      	ldr	r3, [pc, #132]	; (800e420 <xTaskIncrementTick+0x154>)
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3a0:	0013      	movs	r3, r2
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	189b      	adds	r3, r3, r2
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	4a1e      	ldr	r2, [pc, #120]	; (800e424 <xTaskIncrementTick+0x158>)
 800e3aa:	189a      	adds	r2, r3, r2
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	0019      	movs	r1, r3
 800e3b2:	0010      	movs	r0, r2
 800e3b4:	f7ff fc91 	bl	800dcda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3bc:	4b1a      	ldr	r3, [pc, #104]	; (800e428 <xTaskIncrementTick+0x15c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d3b3      	bcc.n	800e32e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3ca:	e7b0      	b.n	800e32e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e3cc:	4b16      	ldr	r3, [pc, #88]	; (800e428 <xTaskIncrementTick+0x15c>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d2:	4914      	ldr	r1, [pc, #80]	; (800e424 <xTaskIncrementTick+0x158>)
 800e3d4:	0013      	movs	r3, r2
 800e3d6:	009b      	lsls	r3, r3, #2
 800e3d8:	189b      	adds	r3, r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	585b      	ldr	r3, [r3, r1]
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d907      	bls.n	800e3f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	617b      	str	r3, [r7, #20]
 800e3e6:	e004      	b.n	800e3f2 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e3e8:	4b10      	ldr	r3, [pc, #64]	; (800e42c <xTaskIncrementTick+0x160>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	4b0f      	ldr	r3, [pc, #60]	; (800e42c <xTaskIncrementTick+0x160>)
 800e3f0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e3f2:	4b0f      	ldr	r3, [pc, #60]	; (800e430 <xTaskIncrementTick+0x164>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d001      	beq.n	800e3fe <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e3fe:	697b      	ldr	r3, [r7, #20]
}
 800e400:	0018      	movs	r0, r3
 800e402:	46bd      	mov	sp, r7
 800e404:	b006      	add	sp, #24
 800e406:	bd80      	pop	{r7, pc}
 800e408:	20000584 	.word	0x20000584
 800e40c:	20000560 	.word	0x20000560
 800e410:	20000514 	.word	0x20000514
 800e414:	20000518 	.word	0x20000518
 800e418:	20000574 	.word	0x20000574
 800e41c:	2000057c 	.word	0x2000057c
 800e420:	20000564 	.word	0x20000564
 800e424:	20000460 	.word	0x20000460
 800e428:	2000045c 	.word	0x2000045c
 800e42c:	2000056c 	.word	0x2000056c
 800e430:	20000570 	.word	0x20000570

0800e434 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e43a:	4b22      	ldr	r3, [pc, #136]	; (800e4c4 <vTaskSwitchContext+0x90>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d003      	beq.n	800e44a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e442:	4b21      	ldr	r3, [pc, #132]	; (800e4c8 <vTaskSwitchContext+0x94>)
 800e444:	2201      	movs	r2, #1
 800e446:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e448:	e037      	b.n	800e4ba <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800e44a:	4b1f      	ldr	r3, [pc, #124]	; (800e4c8 <vTaskSwitchContext+0x94>)
 800e44c:	2200      	movs	r2, #0
 800e44e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e450:	4b1e      	ldr	r3, [pc, #120]	; (800e4cc <vTaskSwitchContext+0x98>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	607b      	str	r3, [r7, #4]
 800e456:	e007      	b.n	800e468 <vTaskSwitchContext+0x34>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <vTaskSwitchContext+0x2e>
 800e45e:	b672      	cpsid	i
 800e460:	e7fe      	b.n	800e460 <vTaskSwitchContext+0x2c>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	3b01      	subs	r3, #1
 800e466:	607b      	str	r3, [r7, #4]
 800e468:	4919      	ldr	r1, [pc, #100]	; (800e4d0 <vTaskSwitchContext+0x9c>)
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	0013      	movs	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	189b      	adds	r3, r3, r2
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	585b      	ldr	r3, [r3, r1]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0ee      	beq.n	800e458 <vTaskSwitchContext+0x24>
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	0013      	movs	r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	189b      	adds	r3, r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4a12      	ldr	r2, [pc, #72]	; (800e4d0 <vTaskSwitchContext+0x9c>)
 800e486:	189b      	adds	r3, r3, r2
 800e488:	603b      	str	r3, [r7, #0]
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	685a      	ldr	r2, [r3, #4]
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	605a      	str	r2, [r3, #4]
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	685a      	ldr	r2, [r3, #4]
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	3308      	adds	r3, #8
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d104      	bne.n	800e4aa <vTaskSwitchContext+0x76>
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	685a      	ldr	r2, [r3, #4]
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	605a      	str	r2, [r3, #4]
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	68da      	ldr	r2, [r3, #12]
 800e4b0:	4b08      	ldr	r3, [pc, #32]	; (800e4d4 <vTaskSwitchContext+0xa0>)
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <vTaskSwitchContext+0x98>)
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	601a      	str	r2, [r3, #0]
}
 800e4ba:	46c0      	nop			; (mov r8, r8)
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	b002      	add	sp, #8
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	46c0      	nop			; (mov r8, r8)
 800e4c4:	20000584 	.word	0x20000584
 800e4c8:	20000570 	.word	0x20000570
 800e4cc:	20000564 	.word	0x20000564
 800e4d0:	20000460 	.word	0x20000460
 800e4d4:	2000045c 	.word	0x2000045c

0800e4d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e4e0:	f000 f84e 	bl	800e580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e4e4:	4b03      	ldr	r3, [pc, #12]	; (800e4f4 <prvIdleTask+0x1c>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d9f9      	bls.n	800e4e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e4ec:	f000 f9c0 	bl	800e870 <vPortYield>
		prvCheckTasksWaitingTermination();
 800e4f0:	e7f6      	b.n	800e4e0 <prvIdleTask+0x8>
 800e4f2:	46c0      	nop			; (mov r8, r8)
 800e4f4:	20000460 	.word	0x20000460

0800e4f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e4fe:	2300      	movs	r3, #0
 800e500:	607b      	str	r3, [r7, #4]
 800e502:	e00c      	b.n	800e51e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	0013      	movs	r3, r2
 800e508:	009b      	lsls	r3, r3, #2
 800e50a:	189b      	adds	r3, r3, r2
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4a14      	ldr	r2, [pc, #80]	; (800e560 <prvInitialiseTaskLists+0x68>)
 800e510:	189b      	adds	r3, r3, r2
 800e512:	0018      	movs	r0, r3
 800e514:	f7ff fbb8 	bl	800dc88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3301      	adds	r3, #1
 800e51c:	607b      	str	r3, [r7, #4]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2b06      	cmp	r3, #6
 800e522:	d9ef      	bls.n	800e504 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e524:	4b0f      	ldr	r3, [pc, #60]	; (800e564 <prvInitialiseTaskLists+0x6c>)
 800e526:	0018      	movs	r0, r3
 800e528:	f7ff fbae 	bl	800dc88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e52c:	4b0e      	ldr	r3, [pc, #56]	; (800e568 <prvInitialiseTaskLists+0x70>)
 800e52e:	0018      	movs	r0, r3
 800e530:	f7ff fbaa 	bl	800dc88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e534:	4b0d      	ldr	r3, [pc, #52]	; (800e56c <prvInitialiseTaskLists+0x74>)
 800e536:	0018      	movs	r0, r3
 800e538:	f7ff fba6 	bl	800dc88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e53c:	4b0c      	ldr	r3, [pc, #48]	; (800e570 <prvInitialiseTaskLists+0x78>)
 800e53e:	0018      	movs	r0, r3
 800e540:	f7ff fba2 	bl	800dc88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e544:	4b0b      	ldr	r3, [pc, #44]	; (800e574 <prvInitialiseTaskLists+0x7c>)
 800e546:	0018      	movs	r0, r3
 800e548:	f7ff fb9e 	bl	800dc88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e54c:	4b0a      	ldr	r3, [pc, #40]	; (800e578 <prvInitialiseTaskLists+0x80>)
 800e54e:	4a05      	ldr	r2, [pc, #20]	; (800e564 <prvInitialiseTaskLists+0x6c>)
 800e550:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e552:	4b0a      	ldr	r3, [pc, #40]	; (800e57c <prvInitialiseTaskLists+0x84>)
 800e554:	4a04      	ldr	r2, [pc, #16]	; (800e568 <prvInitialiseTaskLists+0x70>)
 800e556:	601a      	str	r2, [r3, #0]
}
 800e558:	46c0      	nop			; (mov r8, r8)
 800e55a:	46bd      	mov	sp, r7
 800e55c:	b002      	add	sp, #8
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	20000460 	.word	0x20000460
 800e564:	200004ec 	.word	0x200004ec
 800e568:	20000500 	.word	0x20000500
 800e56c:	2000051c 	.word	0x2000051c
 800e570:	20000530 	.word	0x20000530
 800e574:	20000548 	.word	0x20000548
 800e578:	20000514 	.word	0x20000514
 800e57c:	20000518 	.word	0x20000518

0800e580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e586:	e01a      	b.n	800e5be <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800e588:	f000 f982 	bl	800e890 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e58c:	4b10      	ldr	r3, [pc, #64]	; (800e5d0 <prvCheckTasksWaitingTermination+0x50>)
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	3304      	adds	r3, #4
 800e598:	0018      	movs	r0, r3
 800e59a:	f7ff fbf6 	bl	800dd8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e59e:	4b0d      	ldr	r3, [pc, #52]	; (800e5d4 <prvCheckTasksWaitingTermination+0x54>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	1e5a      	subs	r2, r3, #1
 800e5a4:	4b0b      	ldr	r3, [pc, #44]	; (800e5d4 <prvCheckTasksWaitingTermination+0x54>)
 800e5a6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e5a8:	4b0b      	ldr	r3, [pc, #44]	; (800e5d8 <prvCheckTasksWaitingTermination+0x58>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	1e5a      	subs	r2, r3, #1
 800e5ae:	4b0a      	ldr	r3, [pc, #40]	; (800e5d8 <prvCheckTasksWaitingTermination+0x58>)
 800e5b0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800e5b2:	f000 f97f 	bl	800e8b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	0018      	movs	r0, r3
 800e5ba:	f000 f80f 	bl	800e5dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5be:	4b06      	ldr	r3, [pc, #24]	; (800e5d8 <prvCheckTasksWaitingTermination+0x58>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d1e0      	bne.n	800e588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e5c6:	46c0      	nop			; (mov r8, r8)
 800e5c8:	46c0      	nop			; (mov r8, r8)
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	b002      	add	sp, #8
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	20000530 	.word	0x20000530
 800e5d4:	2000055c 	.word	0x2000055c
 800e5d8:	20000544 	.word	0x20000544

0800e5dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2251      	movs	r2, #81	; 0x51
 800e5e8:	5c9b      	ldrb	r3, [r3, r2]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d109      	bne.n	800e602 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f2:	0018      	movs	r0, r3
 800e5f4:	f000 fa8a 	bl	800eb0c <vPortFree>
				vPortFree( pxTCB );
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	0018      	movs	r0, r3
 800e5fc:	f000 fa86 	bl	800eb0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e600:	e010      	b.n	800e624 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2251      	movs	r2, #81	; 0x51
 800e606:	5c9b      	ldrb	r3, [r3, r2]
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d104      	bne.n	800e616 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	0018      	movs	r0, r3
 800e610:	f000 fa7c 	bl	800eb0c <vPortFree>
	}
 800e614:	e006      	b.n	800e624 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2251      	movs	r2, #81	; 0x51
 800e61a:	5c9b      	ldrb	r3, [r3, r2]
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d001      	beq.n	800e624 <prvDeleteTCB+0x48>
 800e620:	b672      	cpsid	i
 800e622:	e7fe      	b.n	800e622 <prvDeleteTCB+0x46>
	}
 800e624:	46c0      	nop			; (mov r8, r8)
 800e626:	46bd      	mov	sp, r7
 800e628:	b002      	add	sp, #8
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e632:	4b0e      	ldr	r3, [pc, #56]	; (800e66c <prvResetNextTaskUnblockTime+0x40>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d101      	bne.n	800e640 <prvResetNextTaskUnblockTime+0x14>
 800e63c:	2301      	movs	r3, #1
 800e63e:	e000      	b.n	800e642 <prvResetNextTaskUnblockTime+0x16>
 800e640:	2300      	movs	r3, #0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d004      	beq.n	800e650 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e646:	4b0a      	ldr	r3, [pc, #40]	; (800e670 <prvResetNextTaskUnblockTime+0x44>)
 800e648:	2201      	movs	r2, #1
 800e64a:	4252      	negs	r2, r2
 800e64c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e64e:	e008      	b.n	800e662 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e650:	4b06      	ldr	r3, [pc, #24]	; (800e66c <prvResetNextTaskUnblockTime+0x40>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	68db      	ldr	r3, [r3, #12]
 800e658:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	4b04      	ldr	r3, [pc, #16]	; (800e670 <prvResetNextTaskUnblockTime+0x44>)
 800e660:	601a      	str	r2, [r3, #0]
}
 800e662:	46c0      	nop			; (mov r8, r8)
 800e664:	46bd      	mov	sp, r7
 800e666:	b002      	add	sp, #8
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	46c0      	nop			; (mov r8, r8)
 800e66c:	20000514 	.word	0x20000514
 800e670:	2000057c 	.word	0x2000057c

0800e674 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e67a:	4b0a      	ldr	r3, [pc, #40]	; (800e6a4 <xTaskGetSchedulerState+0x30>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d102      	bne.n	800e688 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e682:	2301      	movs	r3, #1
 800e684:	607b      	str	r3, [r7, #4]
 800e686:	e008      	b.n	800e69a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e688:	4b07      	ldr	r3, [pc, #28]	; (800e6a8 <xTaskGetSchedulerState+0x34>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d102      	bne.n	800e696 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e690:	2302      	movs	r3, #2
 800e692:	607b      	str	r3, [r7, #4]
 800e694:	e001      	b.n	800e69a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e696:	2300      	movs	r3, #0
 800e698:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e69a:	687b      	ldr	r3, [r7, #4]
	}
 800e69c:	0018      	movs	r0, r3
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	b002      	add	sp, #8
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	20000568 	.word	0x20000568
 800e6a8:	20000584 	.word	0x20000584

0800e6ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6b6:	4b21      	ldr	r3, [pc, #132]	; (800e73c <prvAddCurrentTaskToDelayedList+0x90>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6bc:	4b20      	ldr	r3, [pc, #128]	; (800e740 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	0018      	movs	r0, r3
 800e6c4:	f7ff fb61 	bl	800dd8a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	d10b      	bne.n	800e6e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d008      	beq.n	800e6e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6d4:	4b1a      	ldr	r3, [pc, #104]	; (800e740 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	1d1a      	adds	r2, r3, #4
 800e6da:	4b1a      	ldr	r3, [pc, #104]	; (800e744 <prvAddCurrentTaskToDelayedList+0x98>)
 800e6dc:	0011      	movs	r1, r2
 800e6de:	0018      	movs	r0, r3
 800e6e0:	f7ff fafb 	bl	800dcda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e6e4:	e026      	b.n	800e734 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	18d3      	adds	r3, r2, r3
 800e6ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e6ee:	4b14      	ldr	r3, [pc, #80]	; (800e740 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	68ba      	ldr	r2, [r7, #8]
 800e6f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d209      	bcs.n	800e712 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6fe:	4b12      	ldr	r3, [pc, #72]	; (800e748 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	4b0f      	ldr	r3, [pc, #60]	; (800e740 <prvAddCurrentTaskToDelayedList+0x94>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3304      	adds	r3, #4
 800e708:	0019      	movs	r1, r3
 800e70a:	0010      	movs	r0, r2
 800e70c:	f7ff fb07 	bl	800dd1e <vListInsert>
}
 800e710:	e010      	b.n	800e734 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e712:	4b0e      	ldr	r3, [pc, #56]	; (800e74c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	4b0a      	ldr	r3, [pc, #40]	; (800e740 <prvAddCurrentTaskToDelayedList+0x94>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	3304      	adds	r3, #4
 800e71c:	0019      	movs	r1, r3
 800e71e:	0010      	movs	r0, r2
 800e720:	f7ff fafd 	bl	800dd1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e724:	4b0a      	ldr	r3, [pc, #40]	; (800e750 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d202      	bcs.n	800e734 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e72e:	4b08      	ldr	r3, [pc, #32]	; (800e750 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e730:	68ba      	ldr	r2, [r7, #8]
 800e732:	601a      	str	r2, [r3, #0]
}
 800e734:	46c0      	nop			; (mov r8, r8)
 800e736:	46bd      	mov	sp, r7
 800e738:	b004      	add	sp, #16
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	20000560 	.word	0x20000560
 800e740:	2000045c 	.word	0x2000045c
 800e744:	20000548 	.word	0x20000548
 800e748:	20000518 	.word	0x20000518
 800e74c:	20000514 	.word	0x20000514
 800e750:	2000057c 	.word	0x2000057c

0800e754 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	3b04      	subs	r3, #4
 800e764:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2280      	movs	r2, #128	; 0x80
 800e76a:	0452      	lsls	r2, r2, #17
 800e76c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	3b04      	subs	r3, #4
 800e772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800e774:	68ba      	ldr	r2, [r7, #8]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	3b04      	subs	r3, #4
 800e77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e780:	4a08      	ldr	r2, [pc, #32]	; (800e7a4 <pxPortInitialiseStack+0x50>)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	3b14      	subs	r3, #20
 800e78a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	3b20      	subs	r3, #32
 800e796:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e798:	68fb      	ldr	r3, [r7, #12]
}
 800e79a:	0018      	movs	r0, r3
 800e79c:	46bd      	mov	sp, r7
 800e79e:	b004      	add	sp, #16
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	46c0      	nop			; (mov r8, r8)
 800e7a4:	0800e7a9 	.word	0x0800e7a9

0800e7a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b082      	sub	sp, #8
 800e7ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e7b2:	4b08      	ldr	r3, [pc, #32]	; (800e7d4 <prvTaskExitError+0x2c>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	d001      	beq.n	800e7be <prvTaskExitError+0x16>
 800e7ba:	b672      	cpsid	i
 800e7bc:	e7fe      	b.n	800e7bc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800e7be:	b672      	cpsid	i
	while( ulDummy == 0 )
 800e7c0:	46c0      	nop			; (mov r8, r8)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d0fc      	beq.n	800e7c2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e7c8:	46c0      	nop			; (mov r8, r8)
 800e7ca:	46c0      	nop			; (mov r8, r8)
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	b002      	add	sp, #8
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	46c0      	nop			; (mov r8, r8)
 800e7d4:	20000168 	.word	0x20000168

0800e7d8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800e7dc:	46c0      	nop			; (mov r8, r8)
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
	...

0800e7f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800e7f0:	4a0b      	ldr	r2, [pc, #44]	; (800e820 <pxCurrentTCBConst2>)
 800e7f2:	6813      	ldr	r3, [r2, #0]
 800e7f4:	6818      	ldr	r0, [r3, #0]
 800e7f6:	3020      	adds	r0, #32
 800e7f8:	f380 8809 	msr	PSP, r0
 800e7fc:	2002      	movs	r0, #2
 800e7fe:	f380 8814 	msr	CONTROL, r0
 800e802:	f3bf 8f6f 	isb	sy
 800e806:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800e808:	46ae      	mov	lr, r5
 800e80a:	bc08      	pop	{r3}
 800e80c:	bc04      	pop	{r2}
 800e80e:	b662      	cpsie	i
 800e810:	4718      	bx	r3
 800e812:	46c0      	nop			; (mov r8, r8)
 800e814:	46c0      	nop			; (mov r8, r8)
 800e816:	46c0      	nop			; (mov r8, r8)
 800e818:	46c0      	nop			; (mov r8, r8)
 800e81a:	46c0      	nop			; (mov r8, r8)
 800e81c:	46c0      	nop			; (mov r8, r8)
 800e81e:	46c0      	nop			; (mov r8, r8)

0800e820 <pxCurrentTCBConst2>:
 800e820:	2000045c 	.word	0x2000045c
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800e824:	46c0      	nop			; (mov r8, r8)
 800e826:	46c0      	nop			; (mov r8, r8)

0800e828 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800e82c:	4b0e      	ldr	r3, [pc, #56]	; (800e868 <xPortStartScheduler+0x40>)
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	4b0d      	ldr	r3, [pc, #52]	; (800e868 <xPortStartScheduler+0x40>)
 800e832:	21ff      	movs	r1, #255	; 0xff
 800e834:	0409      	lsls	r1, r1, #16
 800e836:	430a      	orrs	r2, r1
 800e838:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800e83a:	4b0b      	ldr	r3, [pc, #44]	; (800e868 <xPortStartScheduler+0x40>)
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <xPortStartScheduler+0x40>)
 800e840:	21ff      	movs	r1, #255	; 0xff
 800e842:	0609      	lsls	r1, r1, #24
 800e844:	430a      	orrs	r2, r1
 800e846:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800e848:	f000 f898 	bl	800e97c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e84c:	4b07      	ldr	r3, [pc, #28]	; (800e86c <xPortStartScheduler+0x44>)
 800e84e:	2200      	movs	r2, #0
 800e850:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800e852:	f7ff ffcd 	bl	800e7f0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e856:	f7ff fded 	bl	800e434 <vTaskSwitchContext>
	prvTaskExitError();
 800e85a:	f7ff ffa5 	bl	800e7a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e85e:	2300      	movs	r3, #0
}
 800e860:	0018      	movs	r0, r3
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	46c0      	nop			; (mov r8, r8)
 800e868:	e000ed20 	.word	0xe000ed20
 800e86c:	20000168 	.word	0x20000168

0800e870 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800e874:	4b05      	ldr	r3, [pc, #20]	; (800e88c <vPortYield+0x1c>)
 800e876:	2280      	movs	r2, #128	; 0x80
 800e878:	0552      	lsls	r2, r2, #21
 800e87a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800e87c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e880:	f3bf 8f6f 	isb	sy
}
 800e884:	46c0      	nop			; (mov r8, r8)
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	46c0      	nop			; (mov r8, r8)
 800e88c:	e000ed04 	.word	0xe000ed04

0800e890 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e890:	b580      	push	{r7, lr}
 800e892:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800e894:	b672      	cpsid	i
    uxCriticalNesting++;
 800e896:	4b06      	ldr	r3, [pc, #24]	; (800e8b0 <vPortEnterCritical+0x20>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	1c5a      	adds	r2, r3, #1
 800e89c:	4b04      	ldr	r3, [pc, #16]	; (800e8b0 <vPortEnterCritical+0x20>)
 800e89e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800e8a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800e8a4:	f3bf 8f6f 	isb	sy
}
 800e8a8:	46c0      	nop			; (mov r8, r8)
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	46c0      	nop			; (mov r8, r8)
 800e8b0:	20000168 	.word	0x20000168

0800e8b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e8b8:	4b09      	ldr	r3, [pc, #36]	; (800e8e0 <vPortExitCritical+0x2c>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d101      	bne.n	800e8c4 <vPortExitCritical+0x10>
 800e8c0:	b672      	cpsid	i
 800e8c2:	e7fe      	b.n	800e8c2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 800e8c4:	4b06      	ldr	r3, [pc, #24]	; (800e8e0 <vPortExitCritical+0x2c>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	1e5a      	subs	r2, r3, #1
 800e8ca:	4b05      	ldr	r3, [pc, #20]	; (800e8e0 <vPortExitCritical+0x2c>)
 800e8cc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800e8ce:	4b04      	ldr	r3, [pc, #16]	; (800e8e0 <vPortExitCritical+0x2c>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d100      	bne.n	800e8d8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 800e8d6:	b662      	cpsie	i
    }
}
 800e8d8:	46c0      	nop			; (mov r8, r8)
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	46c0      	nop			; (mov r8, r8)
 800e8e0:	20000168 	.word	0x20000168

0800e8e4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800e8e4:	f3ef 8010 	mrs	r0, PRIMASK
 800e8e8:	b672      	cpsid	i
 800e8ea:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800e8ec:	46c0      	nop			; (mov r8, r8)
 800e8ee:	0018      	movs	r0, r3

0800e8f0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800e8f0:	f380 8810 	msr	PRIMASK, r0
 800e8f4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 800e8f6:	46c0      	nop			; (mov r8, r8)
	...

0800e900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e900:	f3ef 8009 	mrs	r0, PSP
 800e904:	4b0e      	ldr	r3, [pc, #56]	; (800e940 <pxCurrentTCBConst>)
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	3820      	subs	r0, #32
 800e90a:	6010      	str	r0, [r2, #0]
 800e90c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e90e:	4644      	mov	r4, r8
 800e910:	464d      	mov	r5, r9
 800e912:	4656      	mov	r6, sl
 800e914:	465f      	mov	r7, fp
 800e916:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800e918:	b508      	push	{r3, lr}
 800e91a:	b672      	cpsid	i
 800e91c:	f7ff fd8a 	bl	800e434 <vTaskSwitchContext>
 800e920:	b662      	cpsie	i
 800e922:	bc0c      	pop	{r2, r3}
 800e924:	6811      	ldr	r1, [r2, #0]
 800e926:	6808      	ldr	r0, [r1, #0]
 800e928:	3010      	adds	r0, #16
 800e92a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e92c:	46a0      	mov	r8, r4
 800e92e:	46a9      	mov	r9, r5
 800e930:	46b2      	mov	sl, r6
 800e932:	46bb      	mov	fp, r7
 800e934:	f380 8809 	msr	PSP, r0
 800e938:	3820      	subs	r0, #32
 800e93a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800e93c:	4718      	bx	r3
 800e93e:	46c0      	nop			; (mov r8, r8)

0800e940 <pxCurrentTCBConst>:
 800e940:	2000045c 	.word	0x2000045c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800e944:	46c0      	nop			; (mov r8, r8)
 800e946:	46c0      	nop			; (mov r8, r8)

0800e948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800e94e:	f7ff ffc9 	bl	800e8e4 <ulSetInterruptMaskFromISR>
 800e952:	0003      	movs	r3, r0
 800e954:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e956:	f7ff fcb9 	bl	800e2cc <xTaskIncrementTick>
 800e95a:	1e03      	subs	r3, r0, #0
 800e95c:	d003      	beq.n	800e966 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800e95e:	4b06      	ldr	r3, [pc, #24]	; (800e978 <xPortSysTickHandler+0x30>)
 800e960:	2280      	movs	r2, #128	; 0x80
 800e962:	0552      	lsls	r2, r2, #21
 800e964:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	0018      	movs	r0, r3
 800e96a:	f7ff ffc1 	bl	800e8f0 <vClearInterruptMaskFromISR>
}
 800e96e:	46c0      	nop			; (mov r8, r8)
 800e970:	46bd      	mov	sp, r7
 800e972:	b002      	add	sp, #8
 800e974:	bd80      	pop	{r7, pc}
 800e976:	46c0      	nop			; (mov r8, r8)
 800e978:	e000ed04 	.word	0xe000ed04

0800e97c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 800e980:	4b0b      	ldr	r3, [pc, #44]	; (800e9b0 <prvSetupTimerInterrupt+0x34>)
 800e982:	2200      	movs	r2, #0
 800e984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800e986:	4b0b      	ldr	r3, [pc, #44]	; (800e9b4 <prvSetupTimerInterrupt+0x38>)
 800e988:	2200      	movs	r2, #0
 800e98a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e98c:	4b0a      	ldr	r3, [pc, #40]	; (800e9b8 <prvSetupTimerInterrupt+0x3c>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	22fa      	movs	r2, #250	; 0xfa
 800e992:	0091      	lsls	r1, r2, #2
 800e994:	0018      	movs	r0, r3
 800e996:	f7fa fbc9 	bl	800912c <__udivsi3>
 800e99a:	0003      	movs	r3, r0
 800e99c:	001a      	movs	r2, r3
 800e99e:	4b07      	ldr	r3, [pc, #28]	; (800e9bc <prvSetupTimerInterrupt+0x40>)
 800e9a0:	3a01      	subs	r2, #1
 800e9a2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800e9a4:	4b02      	ldr	r3, [pc, #8]	; (800e9b0 <prvSetupTimerInterrupt+0x34>)
 800e9a6:	2207      	movs	r2, #7
 800e9a8:	601a      	str	r2, [r3, #0]
}
 800e9aa:	46c0      	nop			; (mov r8, r8)
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	e000e010 	.word	0xe000e010
 800e9b4:	e000e018 	.word	0xe000e018
 800e9b8:	2000015c 	.word	0x2000015c
 800e9bc:	e000e014 	.word	0xe000e014

0800e9c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b086      	sub	sp, #24
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800e9cc:	f7ff fbe6 	bl	800e19c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9d0:	4b49      	ldr	r3, [pc, #292]	; (800eaf8 <pvPortMalloc+0x138>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d101      	bne.n	800e9dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9d8:	f000 f8e0 	bl	800eb9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9dc:	4b47      	ldr	r3, [pc, #284]	; (800eafc <pvPortMalloc+0x13c>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	4013      	ands	r3, r2
 800e9e4:	d000      	beq.n	800e9e8 <pvPortMalloc+0x28>
 800e9e6:	e079      	b.n	800eadc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d012      	beq.n	800ea14 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800e9ee:	2208      	movs	r2, #8
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	189b      	adds	r3, r3, r2
 800e9f4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2207      	movs	r2, #7
 800e9fa:	4013      	ands	r3, r2
 800e9fc:	d00a      	beq.n	800ea14 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2207      	movs	r2, #7
 800ea02:	4393      	bics	r3, r2
 800ea04:	3308      	adds	r3, #8
 800ea06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2207      	movs	r2, #7
 800ea0c:	4013      	ands	r3, r2
 800ea0e:	d001      	beq.n	800ea14 <pvPortMalloc+0x54>
 800ea10:	b672      	cpsid	i
 800ea12:	e7fe      	b.n	800ea12 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d060      	beq.n	800eadc <pvPortMalloc+0x11c>
 800ea1a:	4b39      	ldr	r3, [pc, #228]	; (800eb00 <pvPortMalloc+0x140>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d85b      	bhi.n	800eadc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea24:	4b37      	ldr	r3, [pc, #220]	; (800eb04 <pvPortMalloc+0x144>)
 800ea26:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800ea28:	4b36      	ldr	r3, [pc, #216]	; (800eb04 <pvPortMalloc+0x144>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea2e:	e004      	b.n	800ea3a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d903      	bls.n	800ea4c <pvPortMalloc+0x8c>
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1f1      	bne.n	800ea30 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea4c:	4b2a      	ldr	r3, [pc, #168]	; (800eaf8 <pvPortMalloc+0x138>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	697a      	ldr	r2, [r7, #20]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d042      	beq.n	800eadc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2208      	movs	r2, #8
 800ea5c:	189b      	adds	r3, r3, r2
 800ea5e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	1ad2      	subs	r2, r2, r3
 800ea70:	2308      	movs	r3, #8
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d916      	bls.n	800eaa6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea78:	697a      	ldr	r2, [r7, #20]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	18d3      	adds	r3, r2, r3
 800ea7e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	2207      	movs	r2, #7
 800ea84:	4013      	ands	r3, r2
 800ea86:	d001      	beq.n	800ea8c <pvPortMalloc+0xcc>
 800ea88:	b672      	cpsid	i
 800ea8a:	e7fe      	b.n	800ea8a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	685a      	ldr	r2, [r3, #4]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	1ad2      	subs	r2, r2, r3
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	0018      	movs	r0, r3
 800eaa2:	f000 f8db 	bl	800ec5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eaa6:	4b16      	ldr	r3, [pc, #88]	; (800eb00 <pvPortMalloc+0x140>)
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	1ad2      	subs	r2, r2, r3
 800eab0:	4b13      	ldr	r3, [pc, #76]	; (800eb00 <pvPortMalloc+0x140>)
 800eab2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eab4:	4b12      	ldr	r3, [pc, #72]	; (800eb00 <pvPortMalloc+0x140>)
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	4b13      	ldr	r3, [pc, #76]	; (800eb08 <pvPortMalloc+0x148>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d203      	bcs.n	800eac8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eac0:	4b0f      	ldr	r3, [pc, #60]	; (800eb00 <pvPortMalloc+0x140>)
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	4b10      	ldr	r3, [pc, #64]	; (800eb08 <pvPortMalloc+0x148>)
 800eac6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	685a      	ldr	r2, [r3, #4]
 800eacc:	4b0b      	ldr	r3, [pc, #44]	; (800eafc <pvPortMalloc+0x13c>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	431a      	orrs	r2, r3
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	2200      	movs	r2, #0
 800eada:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eadc:	f7ff fb6a 	bl	800e1b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2207      	movs	r2, #7
 800eae4:	4013      	ands	r3, r2
 800eae6:	d001      	beq.n	800eaec <pvPortMalloc+0x12c>
 800eae8:	b672      	cpsid	i
 800eaea:	e7fe      	b.n	800eaea <pvPortMalloc+0x12a>
	return pvReturn;
 800eaec:	68fb      	ldr	r3, [r7, #12]
}
 800eaee:	0018      	movs	r0, r3
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	b006      	add	sp, #24
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	46c0      	nop			; (mov r8, r8)
 800eaf8:	20001190 	.word	0x20001190
 800eafc:	2000119c 	.word	0x2000119c
 800eb00:	20001194 	.word	0x20001194
 800eb04:	20001188 	.word	0x20001188
 800eb08:	20001198 	.word	0x20001198

0800eb0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d035      	beq.n	800eb8a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb1e:	2308      	movs	r3, #8
 800eb20:	425b      	negs	r3, r3
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	18d3      	adds	r3, r2, r3
 800eb26:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	685a      	ldr	r2, [r3, #4]
 800eb30:	4b18      	ldr	r3, [pc, #96]	; (800eb94 <vPortFree+0x88>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4013      	ands	r3, r2
 800eb36:	d101      	bne.n	800eb3c <vPortFree+0x30>
 800eb38:	b672      	cpsid	i
 800eb3a:	e7fe      	b.n	800eb3a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d001      	beq.n	800eb48 <vPortFree+0x3c>
 800eb44:	b672      	cpsid	i
 800eb46:	e7fe      	b.n	800eb46 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	685a      	ldr	r2, [r3, #4]
 800eb4c:	4b11      	ldr	r3, [pc, #68]	; (800eb94 <vPortFree+0x88>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4013      	ands	r3, r2
 800eb52:	d01a      	beq.n	800eb8a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d116      	bne.n	800eb8a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	685a      	ldr	r2, [r3, #4]
 800eb60:	4b0c      	ldr	r3, [pc, #48]	; (800eb94 <vPortFree+0x88>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	43db      	mvns	r3, r3
 800eb66:	401a      	ands	r2, r3
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eb6c:	f7ff fb16 	bl	800e19c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	685a      	ldr	r2, [r3, #4]
 800eb74:	4b08      	ldr	r3, [pc, #32]	; (800eb98 <vPortFree+0x8c>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	18d2      	adds	r2, r2, r3
 800eb7a:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <vPortFree+0x8c>)
 800eb7c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	0018      	movs	r0, r3
 800eb82:	f000 f86b 	bl	800ec5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eb86:	f7ff fb15 	bl	800e1b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eb8a:	46c0      	nop			; (mov r8, r8)
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	b004      	add	sp, #16
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	46c0      	nop			; (mov r8, r8)
 800eb94:	2000119c 	.word	0x2000119c
 800eb98:	20001194 	.word	0x20001194

0800eb9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eba2:	23c0      	movs	r3, #192	; 0xc0
 800eba4:	011b      	lsls	r3, r3, #4
 800eba6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eba8:	4b26      	ldr	r3, [pc, #152]	; (800ec44 <prvHeapInit+0xa8>)
 800ebaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2207      	movs	r2, #7
 800ebb0:	4013      	ands	r3, r2
 800ebb2:	d00c      	beq.n	800ebce <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	3307      	adds	r3, #7
 800ebb8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2207      	movs	r2, #7
 800ebbe:	4393      	bics	r3, r2
 800ebc0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ebc2:	68ba      	ldr	r2, [r7, #8]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	1ad2      	subs	r2, r2, r3
 800ebc8:	4b1e      	ldr	r3, [pc, #120]	; (800ec44 <prvHeapInit+0xa8>)
 800ebca:	18d3      	adds	r3, r2, r3
 800ebcc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ebd2:	4b1d      	ldr	r3, [pc, #116]	; (800ec48 <prvHeapInit+0xac>)
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ebd8:	4b1b      	ldr	r3, [pc, #108]	; (800ec48 <prvHeapInit+0xac>)
 800ebda:	2200      	movs	r2, #0
 800ebdc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	68ba      	ldr	r2, [r7, #8]
 800ebe2:	18d3      	adds	r3, r2, r3
 800ebe4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ebe6:	2208      	movs	r2, #8
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	1a9b      	subs	r3, r3, r2
 800ebec:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2207      	movs	r2, #7
 800ebf2:	4393      	bics	r3, r2
 800ebf4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ebf6:	68fa      	ldr	r2, [r7, #12]
 800ebf8:	4b14      	ldr	r3, [pc, #80]	; (800ec4c <prvHeapInit+0xb0>)
 800ebfa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800ebfc:	4b13      	ldr	r3, [pc, #76]	; (800ec4c <prvHeapInit+0xb0>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2200      	movs	r2, #0
 800ec02:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec04:	4b11      	ldr	r3, [pc, #68]	; (800ec4c <prvHeapInit+0xb0>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	1ad2      	subs	r2, r2, r3
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ec1a:	4b0c      	ldr	r3, [pc, #48]	; (800ec4c <prvHeapInit+0xb0>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	685a      	ldr	r2, [r3, #4]
 800ec26:	4b0a      	ldr	r3, [pc, #40]	; (800ec50 <prvHeapInit+0xb4>)
 800ec28:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	685a      	ldr	r2, [r3, #4]
 800ec2e:	4b09      	ldr	r3, [pc, #36]	; (800ec54 <prvHeapInit+0xb8>)
 800ec30:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ec32:	4b09      	ldr	r3, [pc, #36]	; (800ec58 <prvHeapInit+0xbc>)
 800ec34:	2280      	movs	r2, #128	; 0x80
 800ec36:	0612      	lsls	r2, r2, #24
 800ec38:	601a      	str	r2, [r3, #0]
}
 800ec3a:	46c0      	nop			; (mov r8, r8)
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	b004      	add	sp, #16
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	46c0      	nop			; (mov r8, r8)
 800ec44:	20000588 	.word	0x20000588
 800ec48:	20001188 	.word	0x20001188
 800ec4c:	20001190 	.word	0x20001190
 800ec50:	20001198 	.word	0x20001198
 800ec54:	20001194 	.word	0x20001194
 800ec58:	2000119c 	.word	0x2000119c

0800ec5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ec64:	4b27      	ldr	r3, [pc, #156]	; (800ed04 <prvInsertBlockIntoFreeList+0xa8>)
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	e002      	b.n	800ec70 <prvInsertBlockIntoFreeList+0x14>
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	60fb      	str	r3, [r7, #12]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d8f7      	bhi.n	800ec6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	68ba      	ldr	r2, [r7, #8]
 800ec84:	18d3      	adds	r3, r2, r3
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d108      	bne.n	800ec9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	685a      	ldr	r2, [r3, #4]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	18d2      	adds	r2, r2, r3
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	18d2      	adds	r2, r2, r3
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d118      	bne.n	800ece4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	4b14      	ldr	r3, [pc, #80]	; (800ed08 <prvInsertBlockIntoFreeList+0xac>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d00d      	beq.n	800ecda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	685a      	ldr	r2, [r3, #4]
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	18d2      	adds	r2, r2, r3
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	601a      	str	r2, [r3, #0]
 800ecd8:	e008      	b.n	800ecec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ecda:	4b0b      	ldr	r3, [pc, #44]	; (800ed08 <prvInsertBlockIntoFreeList+0xac>)
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	601a      	str	r2, [r3, #0]
 800ece2:	e003      	b.n	800ecec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d002      	beq.n	800ecfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecfa:	46c0      	nop			; (mov r8, r8)
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	b004      	add	sp, #16
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	46c0      	nop			; (mov r8, r8)
 800ed04:	20001188 	.word	0x20001188
 800ed08:	20001190 	.word	0x20001190

0800ed0c <__errno>:
 800ed0c:	4b01      	ldr	r3, [pc, #4]	; (800ed14 <__errno+0x8>)
 800ed0e:	6818      	ldr	r0, [r3, #0]
 800ed10:	4770      	bx	lr
 800ed12:	46c0      	nop			; (mov r8, r8)
 800ed14:	2000016c 	.word	0x2000016c

0800ed18 <__libc_init_array>:
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	2600      	movs	r6, #0
 800ed1c:	4d0c      	ldr	r5, [pc, #48]	; (800ed50 <__libc_init_array+0x38>)
 800ed1e:	4c0d      	ldr	r4, [pc, #52]	; (800ed54 <__libc_init_array+0x3c>)
 800ed20:	1b64      	subs	r4, r4, r5
 800ed22:	10a4      	asrs	r4, r4, #2
 800ed24:	42a6      	cmp	r6, r4
 800ed26:	d109      	bne.n	800ed3c <__libc_init_array+0x24>
 800ed28:	2600      	movs	r6, #0
 800ed2a:	f000 fc6d 	bl	800f608 <_init>
 800ed2e:	4d0a      	ldr	r5, [pc, #40]	; (800ed58 <__libc_init_array+0x40>)
 800ed30:	4c0a      	ldr	r4, [pc, #40]	; (800ed5c <__libc_init_array+0x44>)
 800ed32:	1b64      	subs	r4, r4, r5
 800ed34:	10a4      	asrs	r4, r4, #2
 800ed36:	42a6      	cmp	r6, r4
 800ed38:	d105      	bne.n	800ed46 <__libc_init_array+0x2e>
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}
 800ed3c:	00b3      	lsls	r3, r6, #2
 800ed3e:	58eb      	ldr	r3, [r5, r3]
 800ed40:	4798      	blx	r3
 800ed42:	3601      	adds	r6, #1
 800ed44:	e7ee      	b.n	800ed24 <__libc_init_array+0xc>
 800ed46:	00b3      	lsls	r3, r6, #2
 800ed48:	58eb      	ldr	r3, [r5, r3]
 800ed4a:	4798      	blx	r3
 800ed4c:	3601      	adds	r6, #1
 800ed4e:	e7f2      	b.n	800ed36 <__libc_init_array+0x1e>
 800ed50:	0800fab8 	.word	0x0800fab8
 800ed54:	0800fab8 	.word	0x0800fab8
 800ed58:	0800fab8 	.word	0x0800fab8
 800ed5c:	0800fabc 	.word	0x0800fabc

0800ed60 <memcpy>:
 800ed60:	2300      	movs	r3, #0
 800ed62:	b510      	push	{r4, lr}
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d100      	bne.n	800ed6a <memcpy+0xa>
 800ed68:	bd10      	pop	{r4, pc}
 800ed6a:	5ccc      	ldrb	r4, [r1, r3]
 800ed6c:	54c4      	strb	r4, [r0, r3]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	e7f8      	b.n	800ed64 <memcpy+0x4>

0800ed72 <memset>:
 800ed72:	0003      	movs	r3, r0
 800ed74:	1882      	adds	r2, r0, r2
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d100      	bne.n	800ed7c <memset+0xa>
 800ed7a:	4770      	bx	lr
 800ed7c:	7019      	strb	r1, [r3, #0]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	e7f9      	b.n	800ed76 <memset+0x4>
	...

0800ed84 <siprintf>:
 800ed84:	b40e      	push	{r1, r2, r3}
 800ed86:	b500      	push	{lr}
 800ed88:	490b      	ldr	r1, [pc, #44]	; (800edb8 <siprintf+0x34>)
 800ed8a:	b09c      	sub	sp, #112	; 0x70
 800ed8c:	ab1d      	add	r3, sp, #116	; 0x74
 800ed8e:	9002      	str	r0, [sp, #8]
 800ed90:	9006      	str	r0, [sp, #24]
 800ed92:	9107      	str	r1, [sp, #28]
 800ed94:	9104      	str	r1, [sp, #16]
 800ed96:	4809      	ldr	r0, [pc, #36]	; (800edbc <siprintf+0x38>)
 800ed98:	4909      	ldr	r1, [pc, #36]	; (800edc0 <siprintf+0x3c>)
 800ed9a:	cb04      	ldmia	r3!, {r2}
 800ed9c:	9105      	str	r1, [sp, #20]
 800ed9e:	6800      	ldr	r0, [r0, #0]
 800eda0:	a902      	add	r1, sp, #8
 800eda2:	9301      	str	r3, [sp, #4]
 800eda4:	f000 f896 	bl	800eed4 <_svfiprintf_r>
 800eda8:	2300      	movs	r3, #0
 800edaa:	9a02      	ldr	r2, [sp, #8]
 800edac:	7013      	strb	r3, [r2, #0]
 800edae:	b01c      	add	sp, #112	; 0x70
 800edb0:	bc08      	pop	{r3}
 800edb2:	b003      	add	sp, #12
 800edb4:	4718      	bx	r3
 800edb6:	46c0      	nop			; (mov r8, r8)
 800edb8:	7fffffff 	.word	0x7fffffff
 800edbc:	2000016c 	.word	0x2000016c
 800edc0:	ffff0208 	.word	0xffff0208

0800edc4 <strcat>:
 800edc4:	0002      	movs	r2, r0
 800edc6:	b510      	push	{r4, lr}
 800edc8:	7813      	ldrb	r3, [r2, #0]
 800edca:	0014      	movs	r4, r2
 800edcc:	3201      	adds	r2, #1
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1fa      	bne.n	800edc8 <strcat+0x4>
 800edd2:	5cca      	ldrb	r2, [r1, r3]
 800edd4:	54e2      	strb	r2, [r4, r3]
 800edd6:	3301      	adds	r3, #1
 800edd8:	2a00      	cmp	r2, #0
 800edda:	d1fa      	bne.n	800edd2 <strcat+0xe>
 800eddc:	bd10      	pop	{r4, pc}

0800edde <strcpy>:
 800edde:	0003      	movs	r3, r0
 800ede0:	780a      	ldrb	r2, [r1, #0]
 800ede2:	3101      	adds	r1, #1
 800ede4:	701a      	strb	r2, [r3, #0]
 800ede6:	3301      	adds	r3, #1
 800ede8:	2a00      	cmp	r2, #0
 800edea:	d1f9      	bne.n	800ede0 <strcpy+0x2>
 800edec:	4770      	bx	lr

0800edee <strncmp>:
 800edee:	b530      	push	{r4, r5, lr}
 800edf0:	0005      	movs	r5, r0
 800edf2:	1e10      	subs	r0, r2, #0
 800edf4:	d00b      	beq.n	800ee0e <strncmp+0x20>
 800edf6:	2400      	movs	r4, #0
 800edf8:	3a01      	subs	r2, #1
 800edfa:	5d2b      	ldrb	r3, [r5, r4]
 800edfc:	5d08      	ldrb	r0, [r1, r4]
 800edfe:	4283      	cmp	r3, r0
 800ee00:	d104      	bne.n	800ee0c <strncmp+0x1e>
 800ee02:	4294      	cmp	r4, r2
 800ee04:	d002      	beq.n	800ee0c <strncmp+0x1e>
 800ee06:	3401      	adds	r4, #1
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d1f6      	bne.n	800edfa <strncmp+0xc>
 800ee0c:	1a18      	subs	r0, r3, r0
 800ee0e:	bd30      	pop	{r4, r5, pc}

0800ee10 <__ssputs_r>:
 800ee10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee12:	688e      	ldr	r6, [r1, #8]
 800ee14:	b085      	sub	sp, #20
 800ee16:	0007      	movs	r7, r0
 800ee18:	000c      	movs	r4, r1
 800ee1a:	9203      	str	r2, [sp, #12]
 800ee1c:	9301      	str	r3, [sp, #4]
 800ee1e:	429e      	cmp	r6, r3
 800ee20:	d83c      	bhi.n	800ee9c <__ssputs_r+0x8c>
 800ee22:	2390      	movs	r3, #144	; 0x90
 800ee24:	898a      	ldrh	r2, [r1, #12]
 800ee26:	00db      	lsls	r3, r3, #3
 800ee28:	421a      	tst	r2, r3
 800ee2a:	d034      	beq.n	800ee96 <__ssputs_r+0x86>
 800ee2c:	2503      	movs	r5, #3
 800ee2e:	6909      	ldr	r1, [r1, #16]
 800ee30:	6823      	ldr	r3, [r4, #0]
 800ee32:	1a5b      	subs	r3, r3, r1
 800ee34:	9302      	str	r3, [sp, #8]
 800ee36:	6963      	ldr	r3, [r4, #20]
 800ee38:	9802      	ldr	r0, [sp, #8]
 800ee3a:	435d      	muls	r5, r3
 800ee3c:	0feb      	lsrs	r3, r5, #31
 800ee3e:	195d      	adds	r5, r3, r5
 800ee40:	9b01      	ldr	r3, [sp, #4]
 800ee42:	106d      	asrs	r5, r5, #1
 800ee44:	3301      	adds	r3, #1
 800ee46:	181b      	adds	r3, r3, r0
 800ee48:	42ab      	cmp	r3, r5
 800ee4a:	d900      	bls.n	800ee4e <__ssputs_r+0x3e>
 800ee4c:	001d      	movs	r5, r3
 800ee4e:	0553      	lsls	r3, r2, #21
 800ee50:	d532      	bpl.n	800eeb8 <__ssputs_r+0xa8>
 800ee52:	0029      	movs	r1, r5
 800ee54:	0038      	movs	r0, r7
 800ee56:	f000 fb27 	bl	800f4a8 <_malloc_r>
 800ee5a:	1e06      	subs	r6, r0, #0
 800ee5c:	d109      	bne.n	800ee72 <__ssputs_r+0x62>
 800ee5e:	230c      	movs	r3, #12
 800ee60:	603b      	str	r3, [r7, #0]
 800ee62:	2340      	movs	r3, #64	; 0x40
 800ee64:	2001      	movs	r0, #1
 800ee66:	89a2      	ldrh	r2, [r4, #12]
 800ee68:	4240      	negs	r0, r0
 800ee6a:	4313      	orrs	r3, r2
 800ee6c:	81a3      	strh	r3, [r4, #12]
 800ee6e:	b005      	add	sp, #20
 800ee70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee72:	9a02      	ldr	r2, [sp, #8]
 800ee74:	6921      	ldr	r1, [r4, #16]
 800ee76:	f7ff ff73 	bl	800ed60 <memcpy>
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	4a14      	ldr	r2, [pc, #80]	; (800eed0 <__ssputs_r+0xc0>)
 800ee7e:	401a      	ands	r2, r3
 800ee80:	2380      	movs	r3, #128	; 0x80
 800ee82:	4313      	orrs	r3, r2
 800ee84:	81a3      	strh	r3, [r4, #12]
 800ee86:	9b02      	ldr	r3, [sp, #8]
 800ee88:	6126      	str	r6, [r4, #16]
 800ee8a:	18f6      	adds	r6, r6, r3
 800ee8c:	6026      	str	r6, [r4, #0]
 800ee8e:	6165      	str	r5, [r4, #20]
 800ee90:	9e01      	ldr	r6, [sp, #4]
 800ee92:	1aed      	subs	r5, r5, r3
 800ee94:	60a5      	str	r5, [r4, #8]
 800ee96:	9b01      	ldr	r3, [sp, #4]
 800ee98:	429e      	cmp	r6, r3
 800ee9a:	d900      	bls.n	800ee9e <__ssputs_r+0x8e>
 800ee9c:	9e01      	ldr	r6, [sp, #4]
 800ee9e:	0032      	movs	r2, r6
 800eea0:	9903      	ldr	r1, [sp, #12]
 800eea2:	6820      	ldr	r0, [r4, #0]
 800eea4:	f000 faa3 	bl	800f3ee <memmove>
 800eea8:	68a3      	ldr	r3, [r4, #8]
 800eeaa:	2000      	movs	r0, #0
 800eeac:	1b9b      	subs	r3, r3, r6
 800eeae:	60a3      	str	r3, [r4, #8]
 800eeb0:	6823      	ldr	r3, [r4, #0]
 800eeb2:	199e      	adds	r6, r3, r6
 800eeb4:	6026      	str	r6, [r4, #0]
 800eeb6:	e7da      	b.n	800ee6e <__ssputs_r+0x5e>
 800eeb8:	002a      	movs	r2, r5
 800eeba:	0038      	movs	r0, r7
 800eebc:	f000 fb52 	bl	800f564 <_realloc_r>
 800eec0:	1e06      	subs	r6, r0, #0
 800eec2:	d1e0      	bne.n	800ee86 <__ssputs_r+0x76>
 800eec4:	0038      	movs	r0, r7
 800eec6:	6921      	ldr	r1, [r4, #16]
 800eec8:	f000 faa4 	bl	800f414 <_free_r>
 800eecc:	e7c7      	b.n	800ee5e <__ssputs_r+0x4e>
 800eece:	46c0      	nop			; (mov r8, r8)
 800eed0:	fffffb7f 	.word	0xfffffb7f

0800eed4 <_svfiprintf_r>:
 800eed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eed6:	b0a1      	sub	sp, #132	; 0x84
 800eed8:	9003      	str	r0, [sp, #12]
 800eeda:	001d      	movs	r5, r3
 800eedc:	898b      	ldrh	r3, [r1, #12]
 800eede:	000f      	movs	r7, r1
 800eee0:	0016      	movs	r6, r2
 800eee2:	061b      	lsls	r3, r3, #24
 800eee4:	d511      	bpl.n	800ef0a <_svfiprintf_r+0x36>
 800eee6:	690b      	ldr	r3, [r1, #16]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d10e      	bne.n	800ef0a <_svfiprintf_r+0x36>
 800eeec:	2140      	movs	r1, #64	; 0x40
 800eeee:	f000 fadb 	bl	800f4a8 <_malloc_r>
 800eef2:	6038      	str	r0, [r7, #0]
 800eef4:	6138      	str	r0, [r7, #16]
 800eef6:	2800      	cmp	r0, #0
 800eef8:	d105      	bne.n	800ef06 <_svfiprintf_r+0x32>
 800eefa:	230c      	movs	r3, #12
 800eefc:	9a03      	ldr	r2, [sp, #12]
 800eefe:	3801      	subs	r0, #1
 800ef00:	6013      	str	r3, [r2, #0]
 800ef02:	b021      	add	sp, #132	; 0x84
 800ef04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef06:	2340      	movs	r3, #64	; 0x40
 800ef08:	617b      	str	r3, [r7, #20]
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	ac08      	add	r4, sp, #32
 800ef0e:	6163      	str	r3, [r4, #20]
 800ef10:	3320      	adds	r3, #32
 800ef12:	7663      	strb	r3, [r4, #25]
 800ef14:	3310      	adds	r3, #16
 800ef16:	76a3      	strb	r3, [r4, #26]
 800ef18:	9507      	str	r5, [sp, #28]
 800ef1a:	0035      	movs	r5, r6
 800ef1c:	782b      	ldrb	r3, [r5, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <_svfiprintf_r+0x52>
 800ef22:	2b25      	cmp	r3, #37	; 0x25
 800ef24:	d147      	bne.n	800efb6 <_svfiprintf_r+0xe2>
 800ef26:	1bab      	subs	r3, r5, r6
 800ef28:	9305      	str	r3, [sp, #20]
 800ef2a:	42b5      	cmp	r5, r6
 800ef2c:	d00c      	beq.n	800ef48 <_svfiprintf_r+0x74>
 800ef2e:	0032      	movs	r2, r6
 800ef30:	0039      	movs	r1, r7
 800ef32:	9803      	ldr	r0, [sp, #12]
 800ef34:	f7ff ff6c 	bl	800ee10 <__ssputs_r>
 800ef38:	1c43      	adds	r3, r0, #1
 800ef3a:	d100      	bne.n	800ef3e <_svfiprintf_r+0x6a>
 800ef3c:	e0ae      	b.n	800f09c <_svfiprintf_r+0x1c8>
 800ef3e:	6962      	ldr	r2, [r4, #20]
 800ef40:	9b05      	ldr	r3, [sp, #20]
 800ef42:	4694      	mov	ip, r2
 800ef44:	4463      	add	r3, ip
 800ef46:	6163      	str	r3, [r4, #20]
 800ef48:	782b      	ldrb	r3, [r5, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d100      	bne.n	800ef50 <_svfiprintf_r+0x7c>
 800ef4e:	e0a5      	b.n	800f09c <_svfiprintf_r+0x1c8>
 800ef50:	2201      	movs	r2, #1
 800ef52:	2300      	movs	r3, #0
 800ef54:	4252      	negs	r2, r2
 800ef56:	6062      	str	r2, [r4, #4]
 800ef58:	a904      	add	r1, sp, #16
 800ef5a:	3254      	adds	r2, #84	; 0x54
 800ef5c:	1852      	adds	r2, r2, r1
 800ef5e:	1c6e      	adds	r6, r5, #1
 800ef60:	6023      	str	r3, [r4, #0]
 800ef62:	60e3      	str	r3, [r4, #12]
 800ef64:	60a3      	str	r3, [r4, #8]
 800ef66:	7013      	strb	r3, [r2, #0]
 800ef68:	65a3      	str	r3, [r4, #88]	; 0x58
 800ef6a:	2205      	movs	r2, #5
 800ef6c:	7831      	ldrb	r1, [r6, #0]
 800ef6e:	4854      	ldr	r0, [pc, #336]	; (800f0c0 <_svfiprintf_r+0x1ec>)
 800ef70:	f000 fa32 	bl	800f3d8 <memchr>
 800ef74:	1c75      	adds	r5, r6, #1
 800ef76:	2800      	cmp	r0, #0
 800ef78:	d11f      	bne.n	800efba <_svfiprintf_r+0xe6>
 800ef7a:	6822      	ldr	r2, [r4, #0]
 800ef7c:	06d3      	lsls	r3, r2, #27
 800ef7e:	d504      	bpl.n	800ef8a <_svfiprintf_r+0xb6>
 800ef80:	2353      	movs	r3, #83	; 0x53
 800ef82:	a904      	add	r1, sp, #16
 800ef84:	185b      	adds	r3, r3, r1
 800ef86:	2120      	movs	r1, #32
 800ef88:	7019      	strb	r1, [r3, #0]
 800ef8a:	0713      	lsls	r3, r2, #28
 800ef8c:	d504      	bpl.n	800ef98 <_svfiprintf_r+0xc4>
 800ef8e:	2353      	movs	r3, #83	; 0x53
 800ef90:	a904      	add	r1, sp, #16
 800ef92:	185b      	adds	r3, r3, r1
 800ef94:	212b      	movs	r1, #43	; 0x2b
 800ef96:	7019      	strb	r1, [r3, #0]
 800ef98:	7833      	ldrb	r3, [r6, #0]
 800ef9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef9c:	d016      	beq.n	800efcc <_svfiprintf_r+0xf8>
 800ef9e:	0035      	movs	r5, r6
 800efa0:	2100      	movs	r1, #0
 800efa2:	200a      	movs	r0, #10
 800efa4:	68e3      	ldr	r3, [r4, #12]
 800efa6:	782a      	ldrb	r2, [r5, #0]
 800efa8:	1c6e      	adds	r6, r5, #1
 800efaa:	3a30      	subs	r2, #48	; 0x30
 800efac:	2a09      	cmp	r2, #9
 800efae:	d94e      	bls.n	800f04e <_svfiprintf_r+0x17a>
 800efb0:	2900      	cmp	r1, #0
 800efb2:	d111      	bne.n	800efd8 <_svfiprintf_r+0x104>
 800efb4:	e017      	b.n	800efe6 <_svfiprintf_r+0x112>
 800efb6:	3501      	adds	r5, #1
 800efb8:	e7b0      	b.n	800ef1c <_svfiprintf_r+0x48>
 800efba:	4b41      	ldr	r3, [pc, #260]	; (800f0c0 <_svfiprintf_r+0x1ec>)
 800efbc:	6822      	ldr	r2, [r4, #0]
 800efbe:	1ac0      	subs	r0, r0, r3
 800efc0:	2301      	movs	r3, #1
 800efc2:	4083      	lsls	r3, r0
 800efc4:	4313      	orrs	r3, r2
 800efc6:	002e      	movs	r6, r5
 800efc8:	6023      	str	r3, [r4, #0]
 800efca:	e7ce      	b.n	800ef6a <_svfiprintf_r+0x96>
 800efcc:	9b07      	ldr	r3, [sp, #28]
 800efce:	1d19      	adds	r1, r3, #4
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	9107      	str	r1, [sp, #28]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	db01      	blt.n	800efdc <_svfiprintf_r+0x108>
 800efd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800efda:	e004      	b.n	800efe6 <_svfiprintf_r+0x112>
 800efdc:	425b      	negs	r3, r3
 800efde:	60e3      	str	r3, [r4, #12]
 800efe0:	2302      	movs	r3, #2
 800efe2:	4313      	orrs	r3, r2
 800efe4:	6023      	str	r3, [r4, #0]
 800efe6:	782b      	ldrb	r3, [r5, #0]
 800efe8:	2b2e      	cmp	r3, #46	; 0x2e
 800efea:	d10a      	bne.n	800f002 <_svfiprintf_r+0x12e>
 800efec:	786b      	ldrb	r3, [r5, #1]
 800efee:	2b2a      	cmp	r3, #42	; 0x2a
 800eff0:	d135      	bne.n	800f05e <_svfiprintf_r+0x18a>
 800eff2:	9b07      	ldr	r3, [sp, #28]
 800eff4:	3502      	adds	r5, #2
 800eff6:	1d1a      	adds	r2, r3, #4
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	9207      	str	r2, [sp, #28]
 800effc:	2b00      	cmp	r3, #0
 800effe:	db2b      	blt.n	800f058 <_svfiprintf_r+0x184>
 800f000:	9309      	str	r3, [sp, #36]	; 0x24
 800f002:	4e30      	ldr	r6, [pc, #192]	; (800f0c4 <_svfiprintf_r+0x1f0>)
 800f004:	2203      	movs	r2, #3
 800f006:	0030      	movs	r0, r6
 800f008:	7829      	ldrb	r1, [r5, #0]
 800f00a:	f000 f9e5 	bl	800f3d8 <memchr>
 800f00e:	2800      	cmp	r0, #0
 800f010:	d006      	beq.n	800f020 <_svfiprintf_r+0x14c>
 800f012:	2340      	movs	r3, #64	; 0x40
 800f014:	1b80      	subs	r0, r0, r6
 800f016:	4083      	lsls	r3, r0
 800f018:	6822      	ldr	r2, [r4, #0]
 800f01a:	3501      	adds	r5, #1
 800f01c:	4313      	orrs	r3, r2
 800f01e:	6023      	str	r3, [r4, #0]
 800f020:	7829      	ldrb	r1, [r5, #0]
 800f022:	2206      	movs	r2, #6
 800f024:	4828      	ldr	r0, [pc, #160]	; (800f0c8 <_svfiprintf_r+0x1f4>)
 800f026:	1c6e      	adds	r6, r5, #1
 800f028:	7621      	strb	r1, [r4, #24]
 800f02a:	f000 f9d5 	bl	800f3d8 <memchr>
 800f02e:	2800      	cmp	r0, #0
 800f030:	d03c      	beq.n	800f0ac <_svfiprintf_r+0x1d8>
 800f032:	4b26      	ldr	r3, [pc, #152]	; (800f0cc <_svfiprintf_r+0x1f8>)
 800f034:	2b00      	cmp	r3, #0
 800f036:	d125      	bne.n	800f084 <_svfiprintf_r+0x1b0>
 800f038:	2207      	movs	r2, #7
 800f03a:	9b07      	ldr	r3, [sp, #28]
 800f03c:	3307      	adds	r3, #7
 800f03e:	4393      	bics	r3, r2
 800f040:	3308      	adds	r3, #8
 800f042:	9307      	str	r3, [sp, #28]
 800f044:	6963      	ldr	r3, [r4, #20]
 800f046:	9a04      	ldr	r2, [sp, #16]
 800f048:	189b      	adds	r3, r3, r2
 800f04a:	6163      	str	r3, [r4, #20]
 800f04c:	e765      	b.n	800ef1a <_svfiprintf_r+0x46>
 800f04e:	4343      	muls	r3, r0
 800f050:	0035      	movs	r5, r6
 800f052:	2101      	movs	r1, #1
 800f054:	189b      	adds	r3, r3, r2
 800f056:	e7a6      	b.n	800efa6 <_svfiprintf_r+0xd2>
 800f058:	2301      	movs	r3, #1
 800f05a:	425b      	negs	r3, r3
 800f05c:	e7d0      	b.n	800f000 <_svfiprintf_r+0x12c>
 800f05e:	2300      	movs	r3, #0
 800f060:	200a      	movs	r0, #10
 800f062:	001a      	movs	r2, r3
 800f064:	3501      	adds	r5, #1
 800f066:	6063      	str	r3, [r4, #4]
 800f068:	7829      	ldrb	r1, [r5, #0]
 800f06a:	1c6e      	adds	r6, r5, #1
 800f06c:	3930      	subs	r1, #48	; 0x30
 800f06e:	2909      	cmp	r1, #9
 800f070:	d903      	bls.n	800f07a <_svfiprintf_r+0x1a6>
 800f072:	2b00      	cmp	r3, #0
 800f074:	d0c5      	beq.n	800f002 <_svfiprintf_r+0x12e>
 800f076:	9209      	str	r2, [sp, #36]	; 0x24
 800f078:	e7c3      	b.n	800f002 <_svfiprintf_r+0x12e>
 800f07a:	4342      	muls	r2, r0
 800f07c:	0035      	movs	r5, r6
 800f07e:	2301      	movs	r3, #1
 800f080:	1852      	adds	r2, r2, r1
 800f082:	e7f1      	b.n	800f068 <_svfiprintf_r+0x194>
 800f084:	ab07      	add	r3, sp, #28
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	003a      	movs	r2, r7
 800f08a:	0021      	movs	r1, r4
 800f08c:	4b10      	ldr	r3, [pc, #64]	; (800f0d0 <_svfiprintf_r+0x1fc>)
 800f08e:	9803      	ldr	r0, [sp, #12]
 800f090:	e000      	b.n	800f094 <_svfiprintf_r+0x1c0>
 800f092:	bf00      	nop
 800f094:	9004      	str	r0, [sp, #16]
 800f096:	9b04      	ldr	r3, [sp, #16]
 800f098:	3301      	adds	r3, #1
 800f09a:	d1d3      	bne.n	800f044 <_svfiprintf_r+0x170>
 800f09c:	89bb      	ldrh	r3, [r7, #12]
 800f09e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f0a0:	065b      	lsls	r3, r3, #25
 800f0a2:	d400      	bmi.n	800f0a6 <_svfiprintf_r+0x1d2>
 800f0a4:	e72d      	b.n	800ef02 <_svfiprintf_r+0x2e>
 800f0a6:	2001      	movs	r0, #1
 800f0a8:	4240      	negs	r0, r0
 800f0aa:	e72a      	b.n	800ef02 <_svfiprintf_r+0x2e>
 800f0ac:	ab07      	add	r3, sp, #28
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	003a      	movs	r2, r7
 800f0b2:	0021      	movs	r1, r4
 800f0b4:	4b06      	ldr	r3, [pc, #24]	; (800f0d0 <_svfiprintf_r+0x1fc>)
 800f0b6:	9803      	ldr	r0, [sp, #12]
 800f0b8:	f000 f87c 	bl	800f1b4 <_printf_i>
 800f0bc:	e7ea      	b.n	800f094 <_svfiprintf_r+0x1c0>
 800f0be:	46c0      	nop			; (mov r8, r8)
 800f0c0:	0800fa84 	.word	0x0800fa84
 800f0c4:	0800fa8a 	.word	0x0800fa8a
 800f0c8:	0800fa8e 	.word	0x0800fa8e
 800f0cc:	00000000 	.word	0x00000000
 800f0d0:	0800ee11 	.word	0x0800ee11

0800f0d4 <_printf_common>:
 800f0d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0d6:	0015      	movs	r5, r2
 800f0d8:	9301      	str	r3, [sp, #4]
 800f0da:	688a      	ldr	r2, [r1, #8]
 800f0dc:	690b      	ldr	r3, [r1, #16]
 800f0de:	000c      	movs	r4, r1
 800f0e0:	9000      	str	r0, [sp, #0]
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	da00      	bge.n	800f0e8 <_printf_common+0x14>
 800f0e6:	0013      	movs	r3, r2
 800f0e8:	0022      	movs	r2, r4
 800f0ea:	602b      	str	r3, [r5, #0]
 800f0ec:	3243      	adds	r2, #67	; 0x43
 800f0ee:	7812      	ldrb	r2, [r2, #0]
 800f0f0:	2a00      	cmp	r2, #0
 800f0f2:	d001      	beq.n	800f0f8 <_printf_common+0x24>
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	602b      	str	r3, [r5, #0]
 800f0f8:	6823      	ldr	r3, [r4, #0]
 800f0fa:	069b      	lsls	r3, r3, #26
 800f0fc:	d502      	bpl.n	800f104 <_printf_common+0x30>
 800f0fe:	682b      	ldr	r3, [r5, #0]
 800f100:	3302      	adds	r3, #2
 800f102:	602b      	str	r3, [r5, #0]
 800f104:	6822      	ldr	r2, [r4, #0]
 800f106:	2306      	movs	r3, #6
 800f108:	0017      	movs	r7, r2
 800f10a:	401f      	ands	r7, r3
 800f10c:	421a      	tst	r2, r3
 800f10e:	d027      	beq.n	800f160 <_printf_common+0x8c>
 800f110:	0023      	movs	r3, r4
 800f112:	3343      	adds	r3, #67	; 0x43
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	1e5a      	subs	r2, r3, #1
 800f118:	4193      	sbcs	r3, r2
 800f11a:	6822      	ldr	r2, [r4, #0]
 800f11c:	0692      	lsls	r2, r2, #26
 800f11e:	d430      	bmi.n	800f182 <_printf_common+0xae>
 800f120:	0022      	movs	r2, r4
 800f122:	9901      	ldr	r1, [sp, #4]
 800f124:	9800      	ldr	r0, [sp, #0]
 800f126:	9e08      	ldr	r6, [sp, #32]
 800f128:	3243      	adds	r2, #67	; 0x43
 800f12a:	47b0      	blx	r6
 800f12c:	1c43      	adds	r3, r0, #1
 800f12e:	d025      	beq.n	800f17c <_printf_common+0xa8>
 800f130:	2306      	movs	r3, #6
 800f132:	6820      	ldr	r0, [r4, #0]
 800f134:	682a      	ldr	r2, [r5, #0]
 800f136:	68e1      	ldr	r1, [r4, #12]
 800f138:	2500      	movs	r5, #0
 800f13a:	4003      	ands	r3, r0
 800f13c:	2b04      	cmp	r3, #4
 800f13e:	d103      	bne.n	800f148 <_printf_common+0x74>
 800f140:	1a8d      	subs	r5, r1, r2
 800f142:	43eb      	mvns	r3, r5
 800f144:	17db      	asrs	r3, r3, #31
 800f146:	401d      	ands	r5, r3
 800f148:	68a3      	ldr	r3, [r4, #8]
 800f14a:	6922      	ldr	r2, [r4, #16]
 800f14c:	4293      	cmp	r3, r2
 800f14e:	dd01      	ble.n	800f154 <_printf_common+0x80>
 800f150:	1a9b      	subs	r3, r3, r2
 800f152:	18ed      	adds	r5, r5, r3
 800f154:	2700      	movs	r7, #0
 800f156:	42bd      	cmp	r5, r7
 800f158:	d120      	bne.n	800f19c <_printf_common+0xc8>
 800f15a:	2000      	movs	r0, #0
 800f15c:	e010      	b.n	800f180 <_printf_common+0xac>
 800f15e:	3701      	adds	r7, #1
 800f160:	68e3      	ldr	r3, [r4, #12]
 800f162:	682a      	ldr	r2, [r5, #0]
 800f164:	1a9b      	subs	r3, r3, r2
 800f166:	42bb      	cmp	r3, r7
 800f168:	ddd2      	ble.n	800f110 <_printf_common+0x3c>
 800f16a:	0022      	movs	r2, r4
 800f16c:	2301      	movs	r3, #1
 800f16e:	9901      	ldr	r1, [sp, #4]
 800f170:	9800      	ldr	r0, [sp, #0]
 800f172:	9e08      	ldr	r6, [sp, #32]
 800f174:	3219      	adds	r2, #25
 800f176:	47b0      	blx	r6
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	d1f0      	bne.n	800f15e <_printf_common+0x8a>
 800f17c:	2001      	movs	r0, #1
 800f17e:	4240      	negs	r0, r0
 800f180:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f182:	2030      	movs	r0, #48	; 0x30
 800f184:	18e1      	adds	r1, r4, r3
 800f186:	3143      	adds	r1, #67	; 0x43
 800f188:	7008      	strb	r0, [r1, #0]
 800f18a:	0021      	movs	r1, r4
 800f18c:	1c5a      	adds	r2, r3, #1
 800f18e:	3145      	adds	r1, #69	; 0x45
 800f190:	7809      	ldrb	r1, [r1, #0]
 800f192:	18a2      	adds	r2, r4, r2
 800f194:	3243      	adds	r2, #67	; 0x43
 800f196:	3302      	adds	r3, #2
 800f198:	7011      	strb	r1, [r2, #0]
 800f19a:	e7c1      	b.n	800f120 <_printf_common+0x4c>
 800f19c:	0022      	movs	r2, r4
 800f19e:	2301      	movs	r3, #1
 800f1a0:	9901      	ldr	r1, [sp, #4]
 800f1a2:	9800      	ldr	r0, [sp, #0]
 800f1a4:	9e08      	ldr	r6, [sp, #32]
 800f1a6:	321a      	adds	r2, #26
 800f1a8:	47b0      	blx	r6
 800f1aa:	1c43      	adds	r3, r0, #1
 800f1ac:	d0e6      	beq.n	800f17c <_printf_common+0xa8>
 800f1ae:	3701      	adds	r7, #1
 800f1b0:	e7d1      	b.n	800f156 <_printf_common+0x82>
	...

0800f1b4 <_printf_i>:
 800f1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1b6:	b08b      	sub	sp, #44	; 0x2c
 800f1b8:	9206      	str	r2, [sp, #24]
 800f1ba:	000a      	movs	r2, r1
 800f1bc:	3243      	adds	r2, #67	; 0x43
 800f1be:	9307      	str	r3, [sp, #28]
 800f1c0:	9005      	str	r0, [sp, #20]
 800f1c2:	9204      	str	r2, [sp, #16]
 800f1c4:	7e0a      	ldrb	r2, [r1, #24]
 800f1c6:	000c      	movs	r4, r1
 800f1c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1ca:	2a78      	cmp	r2, #120	; 0x78
 800f1cc:	d806      	bhi.n	800f1dc <_printf_i+0x28>
 800f1ce:	2a62      	cmp	r2, #98	; 0x62
 800f1d0:	d808      	bhi.n	800f1e4 <_printf_i+0x30>
 800f1d2:	2a00      	cmp	r2, #0
 800f1d4:	d100      	bne.n	800f1d8 <_printf_i+0x24>
 800f1d6:	e0c0      	b.n	800f35a <_printf_i+0x1a6>
 800f1d8:	2a58      	cmp	r2, #88	; 0x58
 800f1da:	d052      	beq.n	800f282 <_printf_i+0xce>
 800f1dc:	0026      	movs	r6, r4
 800f1de:	3642      	adds	r6, #66	; 0x42
 800f1e0:	7032      	strb	r2, [r6, #0]
 800f1e2:	e022      	b.n	800f22a <_printf_i+0x76>
 800f1e4:	0010      	movs	r0, r2
 800f1e6:	3863      	subs	r0, #99	; 0x63
 800f1e8:	2815      	cmp	r0, #21
 800f1ea:	d8f7      	bhi.n	800f1dc <_printf_i+0x28>
 800f1ec:	f7f9 ff94 	bl	8009118 <__gnu_thumb1_case_shi>
 800f1f0:	001f0016 	.word	0x001f0016
 800f1f4:	fff6fff6 	.word	0xfff6fff6
 800f1f8:	fff6fff6 	.word	0xfff6fff6
 800f1fc:	fff6001f 	.word	0xfff6001f
 800f200:	fff6fff6 	.word	0xfff6fff6
 800f204:	00a8fff6 	.word	0x00a8fff6
 800f208:	009a0036 	.word	0x009a0036
 800f20c:	fff6fff6 	.word	0xfff6fff6
 800f210:	fff600b9 	.word	0xfff600b9
 800f214:	fff60036 	.word	0xfff60036
 800f218:	009efff6 	.word	0x009efff6
 800f21c:	0026      	movs	r6, r4
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	3642      	adds	r6, #66	; 0x42
 800f222:	1d11      	adds	r1, r2, #4
 800f224:	6019      	str	r1, [r3, #0]
 800f226:	6813      	ldr	r3, [r2, #0]
 800f228:	7033      	strb	r3, [r6, #0]
 800f22a:	2301      	movs	r3, #1
 800f22c:	e0a7      	b.n	800f37e <_printf_i+0x1ca>
 800f22e:	6808      	ldr	r0, [r1, #0]
 800f230:	6819      	ldr	r1, [r3, #0]
 800f232:	1d0a      	adds	r2, r1, #4
 800f234:	0605      	lsls	r5, r0, #24
 800f236:	d50b      	bpl.n	800f250 <_printf_i+0x9c>
 800f238:	680d      	ldr	r5, [r1, #0]
 800f23a:	601a      	str	r2, [r3, #0]
 800f23c:	2d00      	cmp	r5, #0
 800f23e:	da03      	bge.n	800f248 <_printf_i+0x94>
 800f240:	232d      	movs	r3, #45	; 0x2d
 800f242:	9a04      	ldr	r2, [sp, #16]
 800f244:	426d      	negs	r5, r5
 800f246:	7013      	strb	r3, [r2, #0]
 800f248:	4b61      	ldr	r3, [pc, #388]	; (800f3d0 <_printf_i+0x21c>)
 800f24a:	270a      	movs	r7, #10
 800f24c:	9303      	str	r3, [sp, #12]
 800f24e:	e032      	b.n	800f2b6 <_printf_i+0x102>
 800f250:	680d      	ldr	r5, [r1, #0]
 800f252:	601a      	str	r2, [r3, #0]
 800f254:	0641      	lsls	r1, r0, #25
 800f256:	d5f1      	bpl.n	800f23c <_printf_i+0x88>
 800f258:	b22d      	sxth	r5, r5
 800f25a:	e7ef      	b.n	800f23c <_printf_i+0x88>
 800f25c:	680d      	ldr	r5, [r1, #0]
 800f25e:	6819      	ldr	r1, [r3, #0]
 800f260:	1d08      	adds	r0, r1, #4
 800f262:	6018      	str	r0, [r3, #0]
 800f264:	062e      	lsls	r6, r5, #24
 800f266:	d501      	bpl.n	800f26c <_printf_i+0xb8>
 800f268:	680d      	ldr	r5, [r1, #0]
 800f26a:	e003      	b.n	800f274 <_printf_i+0xc0>
 800f26c:	066d      	lsls	r5, r5, #25
 800f26e:	d5fb      	bpl.n	800f268 <_printf_i+0xb4>
 800f270:	680d      	ldr	r5, [r1, #0]
 800f272:	b2ad      	uxth	r5, r5
 800f274:	4b56      	ldr	r3, [pc, #344]	; (800f3d0 <_printf_i+0x21c>)
 800f276:	270a      	movs	r7, #10
 800f278:	9303      	str	r3, [sp, #12]
 800f27a:	2a6f      	cmp	r2, #111	; 0x6f
 800f27c:	d117      	bne.n	800f2ae <_printf_i+0xfa>
 800f27e:	2708      	movs	r7, #8
 800f280:	e015      	b.n	800f2ae <_printf_i+0xfa>
 800f282:	3145      	adds	r1, #69	; 0x45
 800f284:	700a      	strb	r2, [r1, #0]
 800f286:	4a52      	ldr	r2, [pc, #328]	; (800f3d0 <_printf_i+0x21c>)
 800f288:	9203      	str	r2, [sp, #12]
 800f28a:	681a      	ldr	r2, [r3, #0]
 800f28c:	6821      	ldr	r1, [r4, #0]
 800f28e:	ca20      	ldmia	r2!, {r5}
 800f290:	601a      	str	r2, [r3, #0]
 800f292:	0608      	lsls	r0, r1, #24
 800f294:	d550      	bpl.n	800f338 <_printf_i+0x184>
 800f296:	07cb      	lsls	r3, r1, #31
 800f298:	d502      	bpl.n	800f2a0 <_printf_i+0xec>
 800f29a:	2320      	movs	r3, #32
 800f29c:	4319      	orrs	r1, r3
 800f29e:	6021      	str	r1, [r4, #0]
 800f2a0:	2710      	movs	r7, #16
 800f2a2:	2d00      	cmp	r5, #0
 800f2a4:	d103      	bne.n	800f2ae <_printf_i+0xfa>
 800f2a6:	2320      	movs	r3, #32
 800f2a8:	6822      	ldr	r2, [r4, #0]
 800f2aa:	439a      	bics	r2, r3
 800f2ac:	6022      	str	r2, [r4, #0]
 800f2ae:	0023      	movs	r3, r4
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	3343      	adds	r3, #67	; 0x43
 800f2b4:	701a      	strb	r2, [r3, #0]
 800f2b6:	6863      	ldr	r3, [r4, #4]
 800f2b8:	60a3      	str	r3, [r4, #8]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	db03      	blt.n	800f2c6 <_printf_i+0x112>
 800f2be:	2204      	movs	r2, #4
 800f2c0:	6821      	ldr	r1, [r4, #0]
 800f2c2:	4391      	bics	r1, r2
 800f2c4:	6021      	str	r1, [r4, #0]
 800f2c6:	2d00      	cmp	r5, #0
 800f2c8:	d102      	bne.n	800f2d0 <_printf_i+0x11c>
 800f2ca:	9e04      	ldr	r6, [sp, #16]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00c      	beq.n	800f2ea <_printf_i+0x136>
 800f2d0:	9e04      	ldr	r6, [sp, #16]
 800f2d2:	0028      	movs	r0, r5
 800f2d4:	0039      	movs	r1, r7
 800f2d6:	f7f9 ffaf 	bl	8009238 <__aeabi_uidivmod>
 800f2da:	9b03      	ldr	r3, [sp, #12]
 800f2dc:	3e01      	subs	r6, #1
 800f2de:	5c5b      	ldrb	r3, [r3, r1]
 800f2e0:	7033      	strb	r3, [r6, #0]
 800f2e2:	002b      	movs	r3, r5
 800f2e4:	0005      	movs	r5, r0
 800f2e6:	429f      	cmp	r7, r3
 800f2e8:	d9f3      	bls.n	800f2d2 <_printf_i+0x11e>
 800f2ea:	2f08      	cmp	r7, #8
 800f2ec:	d109      	bne.n	800f302 <_printf_i+0x14e>
 800f2ee:	6823      	ldr	r3, [r4, #0]
 800f2f0:	07db      	lsls	r3, r3, #31
 800f2f2:	d506      	bpl.n	800f302 <_printf_i+0x14e>
 800f2f4:	6863      	ldr	r3, [r4, #4]
 800f2f6:	6922      	ldr	r2, [r4, #16]
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	dc02      	bgt.n	800f302 <_printf_i+0x14e>
 800f2fc:	2330      	movs	r3, #48	; 0x30
 800f2fe:	3e01      	subs	r6, #1
 800f300:	7033      	strb	r3, [r6, #0]
 800f302:	9b04      	ldr	r3, [sp, #16]
 800f304:	1b9b      	subs	r3, r3, r6
 800f306:	6123      	str	r3, [r4, #16]
 800f308:	9b07      	ldr	r3, [sp, #28]
 800f30a:	0021      	movs	r1, r4
 800f30c:	9300      	str	r3, [sp, #0]
 800f30e:	9805      	ldr	r0, [sp, #20]
 800f310:	9b06      	ldr	r3, [sp, #24]
 800f312:	aa09      	add	r2, sp, #36	; 0x24
 800f314:	f7ff fede 	bl	800f0d4 <_printf_common>
 800f318:	1c43      	adds	r3, r0, #1
 800f31a:	d135      	bne.n	800f388 <_printf_i+0x1d4>
 800f31c:	2001      	movs	r0, #1
 800f31e:	4240      	negs	r0, r0
 800f320:	b00b      	add	sp, #44	; 0x2c
 800f322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f324:	2220      	movs	r2, #32
 800f326:	6809      	ldr	r1, [r1, #0]
 800f328:	430a      	orrs	r2, r1
 800f32a:	6022      	str	r2, [r4, #0]
 800f32c:	0022      	movs	r2, r4
 800f32e:	2178      	movs	r1, #120	; 0x78
 800f330:	3245      	adds	r2, #69	; 0x45
 800f332:	7011      	strb	r1, [r2, #0]
 800f334:	4a27      	ldr	r2, [pc, #156]	; (800f3d4 <_printf_i+0x220>)
 800f336:	e7a7      	b.n	800f288 <_printf_i+0xd4>
 800f338:	0648      	lsls	r0, r1, #25
 800f33a:	d5ac      	bpl.n	800f296 <_printf_i+0xe2>
 800f33c:	b2ad      	uxth	r5, r5
 800f33e:	e7aa      	b.n	800f296 <_printf_i+0xe2>
 800f340:	681a      	ldr	r2, [r3, #0]
 800f342:	680d      	ldr	r5, [r1, #0]
 800f344:	1d10      	adds	r0, r2, #4
 800f346:	6949      	ldr	r1, [r1, #20]
 800f348:	6018      	str	r0, [r3, #0]
 800f34a:	6813      	ldr	r3, [r2, #0]
 800f34c:	062e      	lsls	r6, r5, #24
 800f34e:	d501      	bpl.n	800f354 <_printf_i+0x1a0>
 800f350:	6019      	str	r1, [r3, #0]
 800f352:	e002      	b.n	800f35a <_printf_i+0x1a6>
 800f354:	066d      	lsls	r5, r5, #25
 800f356:	d5fb      	bpl.n	800f350 <_printf_i+0x19c>
 800f358:	8019      	strh	r1, [r3, #0]
 800f35a:	2300      	movs	r3, #0
 800f35c:	9e04      	ldr	r6, [sp, #16]
 800f35e:	6123      	str	r3, [r4, #16]
 800f360:	e7d2      	b.n	800f308 <_printf_i+0x154>
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	1d11      	adds	r1, r2, #4
 800f366:	6019      	str	r1, [r3, #0]
 800f368:	6816      	ldr	r6, [r2, #0]
 800f36a:	2100      	movs	r1, #0
 800f36c:	0030      	movs	r0, r6
 800f36e:	6862      	ldr	r2, [r4, #4]
 800f370:	f000 f832 	bl	800f3d8 <memchr>
 800f374:	2800      	cmp	r0, #0
 800f376:	d001      	beq.n	800f37c <_printf_i+0x1c8>
 800f378:	1b80      	subs	r0, r0, r6
 800f37a:	6060      	str	r0, [r4, #4]
 800f37c:	6863      	ldr	r3, [r4, #4]
 800f37e:	6123      	str	r3, [r4, #16]
 800f380:	2300      	movs	r3, #0
 800f382:	9a04      	ldr	r2, [sp, #16]
 800f384:	7013      	strb	r3, [r2, #0]
 800f386:	e7bf      	b.n	800f308 <_printf_i+0x154>
 800f388:	6923      	ldr	r3, [r4, #16]
 800f38a:	0032      	movs	r2, r6
 800f38c:	9906      	ldr	r1, [sp, #24]
 800f38e:	9805      	ldr	r0, [sp, #20]
 800f390:	9d07      	ldr	r5, [sp, #28]
 800f392:	47a8      	blx	r5
 800f394:	1c43      	adds	r3, r0, #1
 800f396:	d0c1      	beq.n	800f31c <_printf_i+0x168>
 800f398:	6823      	ldr	r3, [r4, #0]
 800f39a:	079b      	lsls	r3, r3, #30
 800f39c:	d415      	bmi.n	800f3ca <_printf_i+0x216>
 800f39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a0:	68e0      	ldr	r0, [r4, #12]
 800f3a2:	4298      	cmp	r0, r3
 800f3a4:	dabc      	bge.n	800f320 <_printf_i+0x16c>
 800f3a6:	0018      	movs	r0, r3
 800f3a8:	e7ba      	b.n	800f320 <_printf_i+0x16c>
 800f3aa:	0022      	movs	r2, r4
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	9906      	ldr	r1, [sp, #24]
 800f3b0:	9805      	ldr	r0, [sp, #20]
 800f3b2:	9e07      	ldr	r6, [sp, #28]
 800f3b4:	3219      	adds	r2, #25
 800f3b6:	47b0      	blx	r6
 800f3b8:	1c43      	adds	r3, r0, #1
 800f3ba:	d0af      	beq.n	800f31c <_printf_i+0x168>
 800f3bc:	3501      	adds	r5, #1
 800f3be:	68e3      	ldr	r3, [r4, #12]
 800f3c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3c2:	1a9b      	subs	r3, r3, r2
 800f3c4:	42ab      	cmp	r3, r5
 800f3c6:	dcf0      	bgt.n	800f3aa <_printf_i+0x1f6>
 800f3c8:	e7e9      	b.n	800f39e <_printf_i+0x1ea>
 800f3ca:	2500      	movs	r5, #0
 800f3cc:	e7f7      	b.n	800f3be <_printf_i+0x20a>
 800f3ce:	46c0      	nop			; (mov r8, r8)
 800f3d0:	0800fa95 	.word	0x0800fa95
 800f3d4:	0800faa6 	.word	0x0800faa6

0800f3d8 <memchr>:
 800f3d8:	b2c9      	uxtb	r1, r1
 800f3da:	1882      	adds	r2, r0, r2
 800f3dc:	4290      	cmp	r0, r2
 800f3de:	d101      	bne.n	800f3e4 <memchr+0xc>
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	4770      	bx	lr
 800f3e4:	7803      	ldrb	r3, [r0, #0]
 800f3e6:	428b      	cmp	r3, r1
 800f3e8:	d0fb      	beq.n	800f3e2 <memchr+0xa>
 800f3ea:	3001      	adds	r0, #1
 800f3ec:	e7f6      	b.n	800f3dc <memchr+0x4>

0800f3ee <memmove>:
 800f3ee:	b510      	push	{r4, lr}
 800f3f0:	4288      	cmp	r0, r1
 800f3f2:	d902      	bls.n	800f3fa <memmove+0xc>
 800f3f4:	188b      	adds	r3, r1, r2
 800f3f6:	4298      	cmp	r0, r3
 800f3f8:	d303      	bcc.n	800f402 <memmove+0x14>
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	e007      	b.n	800f40e <memmove+0x20>
 800f3fe:	5c8b      	ldrb	r3, [r1, r2]
 800f400:	5483      	strb	r3, [r0, r2]
 800f402:	3a01      	subs	r2, #1
 800f404:	d2fb      	bcs.n	800f3fe <memmove+0x10>
 800f406:	bd10      	pop	{r4, pc}
 800f408:	5ccc      	ldrb	r4, [r1, r3]
 800f40a:	54c4      	strb	r4, [r0, r3]
 800f40c:	3301      	adds	r3, #1
 800f40e:	429a      	cmp	r2, r3
 800f410:	d1fa      	bne.n	800f408 <memmove+0x1a>
 800f412:	e7f8      	b.n	800f406 <memmove+0x18>

0800f414 <_free_r>:
 800f414:	b570      	push	{r4, r5, r6, lr}
 800f416:	0005      	movs	r5, r0
 800f418:	2900      	cmp	r1, #0
 800f41a:	d010      	beq.n	800f43e <_free_r+0x2a>
 800f41c:	1f0c      	subs	r4, r1, #4
 800f41e:	6823      	ldr	r3, [r4, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	da00      	bge.n	800f426 <_free_r+0x12>
 800f424:	18e4      	adds	r4, r4, r3
 800f426:	0028      	movs	r0, r5
 800f428:	f000 f8d4 	bl	800f5d4 <__malloc_lock>
 800f42c:	4a1d      	ldr	r2, [pc, #116]	; (800f4a4 <_free_r+0x90>)
 800f42e:	6813      	ldr	r3, [r2, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d105      	bne.n	800f440 <_free_r+0x2c>
 800f434:	6063      	str	r3, [r4, #4]
 800f436:	6014      	str	r4, [r2, #0]
 800f438:	0028      	movs	r0, r5
 800f43a:	f000 f8d3 	bl	800f5e4 <__malloc_unlock>
 800f43e:	bd70      	pop	{r4, r5, r6, pc}
 800f440:	42a3      	cmp	r3, r4
 800f442:	d908      	bls.n	800f456 <_free_r+0x42>
 800f444:	6821      	ldr	r1, [r4, #0]
 800f446:	1860      	adds	r0, r4, r1
 800f448:	4283      	cmp	r3, r0
 800f44a:	d1f3      	bne.n	800f434 <_free_r+0x20>
 800f44c:	6818      	ldr	r0, [r3, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	1841      	adds	r1, r0, r1
 800f452:	6021      	str	r1, [r4, #0]
 800f454:	e7ee      	b.n	800f434 <_free_r+0x20>
 800f456:	001a      	movs	r2, r3
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d001      	beq.n	800f462 <_free_r+0x4e>
 800f45e:	42a3      	cmp	r3, r4
 800f460:	d9f9      	bls.n	800f456 <_free_r+0x42>
 800f462:	6811      	ldr	r1, [r2, #0]
 800f464:	1850      	adds	r0, r2, r1
 800f466:	42a0      	cmp	r0, r4
 800f468:	d10b      	bne.n	800f482 <_free_r+0x6e>
 800f46a:	6820      	ldr	r0, [r4, #0]
 800f46c:	1809      	adds	r1, r1, r0
 800f46e:	1850      	adds	r0, r2, r1
 800f470:	6011      	str	r1, [r2, #0]
 800f472:	4283      	cmp	r3, r0
 800f474:	d1e0      	bne.n	800f438 <_free_r+0x24>
 800f476:	6818      	ldr	r0, [r3, #0]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	1841      	adds	r1, r0, r1
 800f47c:	6011      	str	r1, [r2, #0]
 800f47e:	6053      	str	r3, [r2, #4]
 800f480:	e7da      	b.n	800f438 <_free_r+0x24>
 800f482:	42a0      	cmp	r0, r4
 800f484:	d902      	bls.n	800f48c <_free_r+0x78>
 800f486:	230c      	movs	r3, #12
 800f488:	602b      	str	r3, [r5, #0]
 800f48a:	e7d5      	b.n	800f438 <_free_r+0x24>
 800f48c:	6821      	ldr	r1, [r4, #0]
 800f48e:	1860      	adds	r0, r4, r1
 800f490:	4283      	cmp	r3, r0
 800f492:	d103      	bne.n	800f49c <_free_r+0x88>
 800f494:	6818      	ldr	r0, [r3, #0]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	1841      	adds	r1, r0, r1
 800f49a:	6021      	str	r1, [r4, #0]
 800f49c:	6063      	str	r3, [r4, #4]
 800f49e:	6054      	str	r4, [r2, #4]
 800f4a0:	e7ca      	b.n	800f438 <_free_r+0x24>
 800f4a2:	46c0      	nop			; (mov r8, r8)
 800f4a4:	200011a0 	.word	0x200011a0

0800f4a8 <_malloc_r>:
 800f4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4aa:	2303      	movs	r3, #3
 800f4ac:	1ccd      	adds	r5, r1, #3
 800f4ae:	439d      	bics	r5, r3
 800f4b0:	3508      	adds	r5, #8
 800f4b2:	0006      	movs	r6, r0
 800f4b4:	2d0c      	cmp	r5, #12
 800f4b6:	d21f      	bcs.n	800f4f8 <_malloc_r+0x50>
 800f4b8:	250c      	movs	r5, #12
 800f4ba:	42a9      	cmp	r1, r5
 800f4bc:	d81e      	bhi.n	800f4fc <_malloc_r+0x54>
 800f4be:	0030      	movs	r0, r6
 800f4c0:	f000 f888 	bl	800f5d4 <__malloc_lock>
 800f4c4:	4925      	ldr	r1, [pc, #148]	; (800f55c <_malloc_r+0xb4>)
 800f4c6:	680a      	ldr	r2, [r1, #0]
 800f4c8:	0014      	movs	r4, r2
 800f4ca:	2c00      	cmp	r4, #0
 800f4cc:	d11a      	bne.n	800f504 <_malloc_r+0x5c>
 800f4ce:	4f24      	ldr	r7, [pc, #144]	; (800f560 <_malloc_r+0xb8>)
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d104      	bne.n	800f4e0 <_malloc_r+0x38>
 800f4d6:	0021      	movs	r1, r4
 800f4d8:	0030      	movs	r0, r6
 800f4da:	f000 f869 	bl	800f5b0 <_sbrk_r>
 800f4de:	6038      	str	r0, [r7, #0]
 800f4e0:	0029      	movs	r1, r5
 800f4e2:	0030      	movs	r0, r6
 800f4e4:	f000 f864 	bl	800f5b0 <_sbrk_r>
 800f4e8:	1c43      	adds	r3, r0, #1
 800f4ea:	d12b      	bne.n	800f544 <_malloc_r+0x9c>
 800f4ec:	230c      	movs	r3, #12
 800f4ee:	0030      	movs	r0, r6
 800f4f0:	6033      	str	r3, [r6, #0]
 800f4f2:	f000 f877 	bl	800f5e4 <__malloc_unlock>
 800f4f6:	e003      	b.n	800f500 <_malloc_r+0x58>
 800f4f8:	2d00      	cmp	r5, #0
 800f4fa:	dade      	bge.n	800f4ba <_malloc_r+0x12>
 800f4fc:	230c      	movs	r3, #12
 800f4fe:	6033      	str	r3, [r6, #0]
 800f500:	2000      	movs	r0, #0
 800f502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f504:	6823      	ldr	r3, [r4, #0]
 800f506:	1b5b      	subs	r3, r3, r5
 800f508:	d419      	bmi.n	800f53e <_malloc_r+0x96>
 800f50a:	2b0b      	cmp	r3, #11
 800f50c:	d903      	bls.n	800f516 <_malloc_r+0x6e>
 800f50e:	6023      	str	r3, [r4, #0]
 800f510:	18e4      	adds	r4, r4, r3
 800f512:	6025      	str	r5, [r4, #0]
 800f514:	e003      	b.n	800f51e <_malloc_r+0x76>
 800f516:	6863      	ldr	r3, [r4, #4]
 800f518:	42a2      	cmp	r2, r4
 800f51a:	d10e      	bne.n	800f53a <_malloc_r+0x92>
 800f51c:	600b      	str	r3, [r1, #0]
 800f51e:	0030      	movs	r0, r6
 800f520:	f000 f860 	bl	800f5e4 <__malloc_unlock>
 800f524:	0020      	movs	r0, r4
 800f526:	2207      	movs	r2, #7
 800f528:	300b      	adds	r0, #11
 800f52a:	1d23      	adds	r3, r4, #4
 800f52c:	4390      	bics	r0, r2
 800f52e:	1ac2      	subs	r2, r0, r3
 800f530:	4298      	cmp	r0, r3
 800f532:	d0e6      	beq.n	800f502 <_malloc_r+0x5a>
 800f534:	1a1b      	subs	r3, r3, r0
 800f536:	50a3      	str	r3, [r4, r2]
 800f538:	e7e3      	b.n	800f502 <_malloc_r+0x5a>
 800f53a:	6053      	str	r3, [r2, #4]
 800f53c:	e7ef      	b.n	800f51e <_malloc_r+0x76>
 800f53e:	0022      	movs	r2, r4
 800f540:	6864      	ldr	r4, [r4, #4]
 800f542:	e7c2      	b.n	800f4ca <_malloc_r+0x22>
 800f544:	2303      	movs	r3, #3
 800f546:	1cc4      	adds	r4, r0, #3
 800f548:	439c      	bics	r4, r3
 800f54a:	42a0      	cmp	r0, r4
 800f54c:	d0e1      	beq.n	800f512 <_malloc_r+0x6a>
 800f54e:	1a21      	subs	r1, r4, r0
 800f550:	0030      	movs	r0, r6
 800f552:	f000 f82d 	bl	800f5b0 <_sbrk_r>
 800f556:	1c43      	adds	r3, r0, #1
 800f558:	d1db      	bne.n	800f512 <_malloc_r+0x6a>
 800f55a:	e7c7      	b.n	800f4ec <_malloc_r+0x44>
 800f55c:	200011a0 	.word	0x200011a0
 800f560:	200011a4 	.word	0x200011a4

0800f564 <_realloc_r>:
 800f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f566:	0007      	movs	r7, r0
 800f568:	000d      	movs	r5, r1
 800f56a:	0016      	movs	r6, r2
 800f56c:	2900      	cmp	r1, #0
 800f56e:	d105      	bne.n	800f57c <_realloc_r+0x18>
 800f570:	0011      	movs	r1, r2
 800f572:	f7ff ff99 	bl	800f4a8 <_malloc_r>
 800f576:	0004      	movs	r4, r0
 800f578:	0020      	movs	r0, r4
 800f57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f57c:	2a00      	cmp	r2, #0
 800f57e:	d103      	bne.n	800f588 <_realloc_r+0x24>
 800f580:	f7ff ff48 	bl	800f414 <_free_r>
 800f584:	0034      	movs	r4, r6
 800f586:	e7f7      	b.n	800f578 <_realloc_r+0x14>
 800f588:	f000 f834 	bl	800f5f4 <_malloc_usable_size_r>
 800f58c:	002c      	movs	r4, r5
 800f58e:	42b0      	cmp	r0, r6
 800f590:	d2f2      	bcs.n	800f578 <_realloc_r+0x14>
 800f592:	0031      	movs	r1, r6
 800f594:	0038      	movs	r0, r7
 800f596:	f7ff ff87 	bl	800f4a8 <_malloc_r>
 800f59a:	1e04      	subs	r4, r0, #0
 800f59c:	d0ec      	beq.n	800f578 <_realloc_r+0x14>
 800f59e:	0029      	movs	r1, r5
 800f5a0:	0032      	movs	r2, r6
 800f5a2:	f7ff fbdd 	bl	800ed60 <memcpy>
 800f5a6:	0029      	movs	r1, r5
 800f5a8:	0038      	movs	r0, r7
 800f5aa:	f7ff ff33 	bl	800f414 <_free_r>
 800f5ae:	e7e3      	b.n	800f578 <_realloc_r+0x14>

0800f5b0 <_sbrk_r>:
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	b570      	push	{r4, r5, r6, lr}
 800f5b4:	4d06      	ldr	r5, [pc, #24]	; (800f5d0 <_sbrk_r+0x20>)
 800f5b6:	0004      	movs	r4, r0
 800f5b8:	0008      	movs	r0, r1
 800f5ba:	602b      	str	r3, [r5, #0]
 800f5bc:	f7fb fc7c 	bl	800aeb8 <_sbrk>
 800f5c0:	1c43      	adds	r3, r0, #1
 800f5c2:	d103      	bne.n	800f5cc <_sbrk_r+0x1c>
 800f5c4:	682b      	ldr	r3, [r5, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d000      	beq.n	800f5cc <_sbrk_r+0x1c>
 800f5ca:	6023      	str	r3, [r4, #0]
 800f5cc:	bd70      	pop	{r4, r5, r6, pc}
 800f5ce:	46c0      	nop			; (mov r8, r8)
 800f5d0:	20002514 	.word	0x20002514

0800f5d4 <__malloc_lock>:
 800f5d4:	b510      	push	{r4, lr}
 800f5d6:	4802      	ldr	r0, [pc, #8]	; (800f5e0 <__malloc_lock+0xc>)
 800f5d8:	f000 f814 	bl	800f604 <__retarget_lock_acquire_recursive>
 800f5dc:	bd10      	pop	{r4, pc}
 800f5de:	46c0      	nop			; (mov r8, r8)
 800f5e0:	2000251c 	.word	0x2000251c

0800f5e4 <__malloc_unlock>:
 800f5e4:	b510      	push	{r4, lr}
 800f5e6:	4802      	ldr	r0, [pc, #8]	; (800f5f0 <__malloc_unlock+0xc>)
 800f5e8:	f000 f80d 	bl	800f606 <__retarget_lock_release_recursive>
 800f5ec:	bd10      	pop	{r4, pc}
 800f5ee:	46c0      	nop			; (mov r8, r8)
 800f5f0:	2000251c 	.word	0x2000251c

0800f5f4 <_malloc_usable_size_r>:
 800f5f4:	1f0b      	subs	r3, r1, #4
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	1f18      	subs	r0, r3, #4
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	da01      	bge.n	800f602 <_malloc_usable_size_r+0xe>
 800f5fe:	580b      	ldr	r3, [r1, r0]
 800f600:	18c0      	adds	r0, r0, r3
 800f602:	4770      	bx	lr

0800f604 <__retarget_lock_acquire_recursive>:
 800f604:	4770      	bx	lr

0800f606 <__retarget_lock_release_recursive>:
 800f606:	4770      	bx	lr

0800f608 <_init>:
 800f608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f60a:	46c0      	nop			; (mov r8, r8)
 800f60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60e:	bc08      	pop	{r3}
 800f610:	469e      	mov	lr, r3
 800f612:	4770      	bx	lr

0800f614 <_fini>:
 800f614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f616:	46c0      	nop			; (mov r8, r8)
 800f618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f61a:	bc08      	pop	{r3}
 800f61c:	469e      	mov	lr, r3
 800f61e:	4770      	bx	lr
