
M0_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08009000  08009000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009430  080090c0  080090c0  000090c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f20  080124f0  080124f0  000124f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013410  08013410  00020148  2**0
                  CONTENTS
  4 .ARM          00000000  08013410  08013410  00020148  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013410  08013410  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013410  08013410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013414  08013414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  200000c0  08013418  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e0  20000148  080134a0  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b28  080134a0  00021b28  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001516b  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c6  00000000  00000000  000352db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  000384a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  00039468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f21  00000000  00000000  0003a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fea  00000000  00000000  0003e211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c8fb  00000000  00000000  000511fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edaf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b7c  00000000  00000000  000edb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080090c0 <__do_global_dtors_aux>:
 80090c0:	b510      	push	{r4, lr}
 80090c2:	4c06      	ldr	r4, [pc, #24]	; (80090dc <__do_global_dtors_aux+0x1c>)
 80090c4:	7823      	ldrb	r3, [r4, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d107      	bne.n	80090da <__do_global_dtors_aux+0x1a>
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <__do_global_dtors_aux+0x20>)
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <__do_global_dtors_aux+0x16>
 80090d0:	4804      	ldr	r0, [pc, #16]	; (80090e4 <__do_global_dtors_aux+0x24>)
 80090d2:	e000      	b.n	80090d6 <__do_global_dtors_aux+0x16>
 80090d4:	bf00      	nop
 80090d6:	2301      	movs	r3, #1
 80090d8:	7023      	strb	r3, [r4, #0]
 80090da:	bd10      	pop	{r4, pc}
 80090dc:	20000148 	.word	0x20000148
 80090e0:	00000000 	.word	0x00000000
 80090e4:	080124d8 	.word	0x080124d8

080090e8 <frame_dummy>:
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <frame_dummy+0x14>)
 80090ea:	b510      	push	{r4, lr}
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <frame_dummy+0x10>
 80090f0:	4903      	ldr	r1, [pc, #12]	; (8009100 <frame_dummy+0x18>)
 80090f2:	4804      	ldr	r0, [pc, #16]	; (8009104 <frame_dummy+0x1c>)
 80090f4:	e000      	b.n	80090f8 <frame_dummy+0x10>
 80090f6:	bf00      	nop
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	00000000 	.word	0x00000000
 8009100:	2000014c 	.word	0x2000014c
 8009104:	080124d8 	.word	0x080124d8

08009108 <strcmp>:
 8009108:	7802      	ldrb	r2, [r0, #0]
 800910a:	780b      	ldrb	r3, [r1, #0]
 800910c:	2a00      	cmp	r2, #0
 800910e:	d003      	beq.n	8009118 <strcmp+0x10>
 8009110:	3001      	adds	r0, #1
 8009112:	3101      	adds	r1, #1
 8009114:	429a      	cmp	r2, r3
 8009116:	d0f7      	beq.n	8009108 <strcmp>
 8009118:	1ad0      	subs	r0, r2, r3
 800911a:	4770      	bx	lr

0800911c <strlen>:
 800911c:	2300      	movs	r3, #0
 800911e:	5cc2      	ldrb	r2, [r0, r3]
 8009120:	3301      	adds	r3, #1
 8009122:	2a00      	cmp	r2, #0
 8009124:	d1fb      	bne.n	800911e <strlen+0x2>
 8009126:	1e58      	subs	r0, r3, #1
 8009128:	4770      	bx	lr
	...

0800912c <__gnu_thumb1_case_shi>:
 800912c:	b403      	push	{r0, r1}
 800912e:	4671      	mov	r1, lr
 8009130:	0849      	lsrs	r1, r1, #1
 8009132:	0040      	lsls	r0, r0, #1
 8009134:	0049      	lsls	r1, r1, #1
 8009136:	5e09      	ldrsh	r1, [r1, r0]
 8009138:	0049      	lsls	r1, r1, #1
 800913a:	448e      	add	lr, r1
 800913c:	bc03      	pop	{r0, r1}
 800913e:	4770      	bx	lr

08009140 <__udivsi3>:
 8009140:	2200      	movs	r2, #0
 8009142:	0843      	lsrs	r3, r0, #1
 8009144:	428b      	cmp	r3, r1
 8009146:	d374      	bcc.n	8009232 <__udivsi3+0xf2>
 8009148:	0903      	lsrs	r3, r0, #4
 800914a:	428b      	cmp	r3, r1
 800914c:	d35f      	bcc.n	800920e <__udivsi3+0xce>
 800914e:	0a03      	lsrs	r3, r0, #8
 8009150:	428b      	cmp	r3, r1
 8009152:	d344      	bcc.n	80091de <__udivsi3+0x9e>
 8009154:	0b03      	lsrs	r3, r0, #12
 8009156:	428b      	cmp	r3, r1
 8009158:	d328      	bcc.n	80091ac <__udivsi3+0x6c>
 800915a:	0c03      	lsrs	r3, r0, #16
 800915c:	428b      	cmp	r3, r1
 800915e:	d30d      	bcc.n	800917c <__udivsi3+0x3c>
 8009160:	22ff      	movs	r2, #255	; 0xff
 8009162:	0209      	lsls	r1, r1, #8
 8009164:	ba12      	rev	r2, r2
 8009166:	0c03      	lsrs	r3, r0, #16
 8009168:	428b      	cmp	r3, r1
 800916a:	d302      	bcc.n	8009172 <__udivsi3+0x32>
 800916c:	1212      	asrs	r2, r2, #8
 800916e:	0209      	lsls	r1, r1, #8
 8009170:	d065      	beq.n	800923e <__udivsi3+0xfe>
 8009172:	0b03      	lsrs	r3, r0, #12
 8009174:	428b      	cmp	r3, r1
 8009176:	d319      	bcc.n	80091ac <__udivsi3+0x6c>
 8009178:	e000      	b.n	800917c <__udivsi3+0x3c>
 800917a:	0a09      	lsrs	r1, r1, #8
 800917c:	0bc3      	lsrs	r3, r0, #15
 800917e:	428b      	cmp	r3, r1
 8009180:	d301      	bcc.n	8009186 <__udivsi3+0x46>
 8009182:	03cb      	lsls	r3, r1, #15
 8009184:	1ac0      	subs	r0, r0, r3
 8009186:	4152      	adcs	r2, r2
 8009188:	0b83      	lsrs	r3, r0, #14
 800918a:	428b      	cmp	r3, r1
 800918c:	d301      	bcc.n	8009192 <__udivsi3+0x52>
 800918e:	038b      	lsls	r3, r1, #14
 8009190:	1ac0      	subs	r0, r0, r3
 8009192:	4152      	adcs	r2, r2
 8009194:	0b43      	lsrs	r3, r0, #13
 8009196:	428b      	cmp	r3, r1
 8009198:	d301      	bcc.n	800919e <__udivsi3+0x5e>
 800919a:	034b      	lsls	r3, r1, #13
 800919c:	1ac0      	subs	r0, r0, r3
 800919e:	4152      	adcs	r2, r2
 80091a0:	0b03      	lsrs	r3, r0, #12
 80091a2:	428b      	cmp	r3, r1
 80091a4:	d301      	bcc.n	80091aa <__udivsi3+0x6a>
 80091a6:	030b      	lsls	r3, r1, #12
 80091a8:	1ac0      	subs	r0, r0, r3
 80091aa:	4152      	adcs	r2, r2
 80091ac:	0ac3      	lsrs	r3, r0, #11
 80091ae:	428b      	cmp	r3, r1
 80091b0:	d301      	bcc.n	80091b6 <__udivsi3+0x76>
 80091b2:	02cb      	lsls	r3, r1, #11
 80091b4:	1ac0      	subs	r0, r0, r3
 80091b6:	4152      	adcs	r2, r2
 80091b8:	0a83      	lsrs	r3, r0, #10
 80091ba:	428b      	cmp	r3, r1
 80091bc:	d301      	bcc.n	80091c2 <__udivsi3+0x82>
 80091be:	028b      	lsls	r3, r1, #10
 80091c0:	1ac0      	subs	r0, r0, r3
 80091c2:	4152      	adcs	r2, r2
 80091c4:	0a43      	lsrs	r3, r0, #9
 80091c6:	428b      	cmp	r3, r1
 80091c8:	d301      	bcc.n	80091ce <__udivsi3+0x8e>
 80091ca:	024b      	lsls	r3, r1, #9
 80091cc:	1ac0      	subs	r0, r0, r3
 80091ce:	4152      	adcs	r2, r2
 80091d0:	0a03      	lsrs	r3, r0, #8
 80091d2:	428b      	cmp	r3, r1
 80091d4:	d301      	bcc.n	80091da <__udivsi3+0x9a>
 80091d6:	020b      	lsls	r3, r1, #8
 80091d8:	1ac0      	subs	r0, r0, r3
 80091da:	4152      	adcs	r2, r2
 80091dc:	d2cd      	bcs.n	800917a <__udivsi3+0x3a>
 80091de:	09c3      	lsrs	r3, r0, #7
 80091e0:	428b      	cmp	r3, r1
 80091e2:	d301      	bcc.n	80091e8 <__udivsi3+0xa8>
 80091e4:	01cb      	lsls	r3, r1, #7
 80091e6:	1ac0      	subs	r0, r0, r3
 80091e8:	4152      	adcs	r2, r2
 80091ea:	0983      	lsrs	r3, r0, #6
 80091ec:	428b      	cmp	r3, r1
 80091ee:	d301      	bcc.n	80091f4 <__udivsi3+0xb4>
 80091f0:	018b      	lsls	r3, r1, #6
 80091f2:	1ac0      	subs	r0, r0, r3
 80091f4:	4152      	adcs	r2, r2
 80091f6:	0943      	lsrs	r3, r0, #5
 80091f8:	428b      	cmp	r3, r1
 80091fa:	d301      	bcc.n	8009200 <__udivsi3+0xc0>
 80091fc:	014b      	lsls	r3, r1, #5
 80091fe:	1ac0      	subs	r0, r0, r3
 8009200:	4152      	adcs	r2, r2
 8009202:	0903      	lsrs	r3, r0, #4
 8009204:	428b      	cmp	r3, r1
 8009206:	d301      	bcc.n	800920c <__udivsi3+0xcc>
 8009208:	010b      	lsls	r3, r1, #4
 800920a:	1ac0      	subs	r0, r0, r3
 800920c:	4152      	adcs	r2, r2
 800920e:	08c3      	lsrs	r3, r0, #3
 8009210:	428b      	cmp	r3, r1
 8009212:	d301      	bcc.n	8009218 <__udivsi3+0xd8>
 8009214:	00cb      	lsls	r3, r1, #3
 8009216:	1ac0      	subs	r0, r0, r3
 8009218:	4152      	adcs	r2, r2
 800921a:	0883      	lsrs	r3, r0, #2
 800921c:	428b      	cmp	r3, r1
 800921e:	d301      	bcc.n	8009224 <__udivsi3+0xe4>
 8009220:	008b      	lsls	r3, r1, #2
 8009222:	1ac0      	subs	r0, r0, r3
 8009224:	4152      	adcs	r2, r2
 8009226:	0843      	lsrs	r3, r0, #1
 8009228:	428b      	cmp	r3, r1
 800922a:	d301      	bcc.n	8009230 <__udivsi3+0xf0>
 800922c:	004b      	lsls	r3, r1, #1
 800922e:	1ac0      	subs	r0, r0, r3
 8009230:	4152      	adcs	r2, r2
 8009232:	1a41      	subs	r1, r0, r1
 8009234:	d200      	bcs.n	8009238 <__udivsi3+0xf8>
 8009236:	4601      	mov	r1, r0
 8009238:	4152      	adcs	r2, r2
 800923a:	4610      	mov	r0, r2
 800923c:	4770      	bx	lr
 800923e:	e7ff      	b.n	8009240 <__udivsi3+0x100>
 8009240:	b501      	push	{r0, lr}
 8009242:	2000      	movs	r0, #0
 8009244:	f000 f806 	bl	8009254 <__aeabi_idiv0>
 8009248:	bd02      	pop	{r1, pc}
 800924a:	46c0      	nop			; (mov r8, r8)

0800924c <__aeabi_uidivmod>:
 800924c:	2900      	cmp	r1, #0
 800924e:	d0f7      	beq.n	8009240 <__udivsi3+0x100>
 8009250:	e776      	b.n	8009140 <__udivsi3>
 8009252:	4770      	bx	lr

08009254 <__aeabi_idiv0>:
 8009254:	4770      	bx	lr
 8009256:	46c0      	nop			; (mov r8, r8)

08009258 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800925c:	f3bf 8f4f 	dsb	sy
}
 8009260:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009262:	4b04      	ldr	r3, [pc, #16]	; (8009274 <__NVIC_SystemReset+0x1c>)
 8009264:	4a04      	ldr	r2, [pc, #16]	; (8009278 <__NVIC_SystemReset+0x20>)
 8009266:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009268:	f3bf 8f4f 	dsb	sy
}
 800926c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	e7fd      	b.n	800926e <__NVIC_SystemReset+0x16>
 8009272:	46c0      	nop			; (mov r8, r8)
 8009274:	e000ed00 	.word	0xe000ed00
 8009278:	05fa0004 	.word	0x05fa0004

0800927c <GSM_Init>:
	//sendData("\r\n",UART0);
	//return pec;
}


void GSM_Init(){
 800927c:	b5b0      	push	{r4, r5, r7, lr}
 800927e:	af00      	add	r7, sp, #0
	//gsmState = AutoBaud;
	Debug_Send("GSM Init\r\n");
 8009280:	4b71      	ldr	r3, [pc, #452]	; (8009448 <GSM_Init+0x1cc>)
 8009282:	0018      	movs	r0, r3
 8009284:	f001 f9ae 	bl	800a5e4 <Debug_Send>
	//gsmInfo.GPRSinterval = 180;
	gsmInfo.GPRSinterval = 30;
 8009288:	4a70      	ldr	r2, [pc, #448]	; (800944c <GSM_Init+0x1d0>)
 800928a:	23a0      	movs	r3, #160	; 0xa0
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	211e      	movs	r1, #30
 8009290:	50d1      	str	r1, [r2, r3]
	strcpy(gsmInfo.urlport,"5008");
 8009292:	4a6f      	ldr	r2, [pc, #444]	; (8009450 <GSM_Init+0x1d4>)
 8009294:	4b6f      	ldr	r3, [pc, #444]	; (8009454 <GSM_Init+0x1d8>)
 8009296:	0010      	movs	r0, r2
 8009298:	0019      	movs	r1, r3
 800929a:	2305      	movs	r3, #5
 800929c:	001a      	movs	r2, r3
 800929e:	f008 fc2d 	bl	8011afc <memcpy>
	strcpy(gsmInfo.urlport,"5007");
 80092a2:	4a6b      	ldr	r2, [pc, #428]	; (8009450 <GSM_Init+0x1d4>)
 80092a4:	4b6c      	ldr	r3, [pc, #432]	; (8009458 <GSM_Init+0x1dc>)
 80092a6:	0010      	movs	r0, r2
 80092a8:	0019      	movs	r1, r3
 80092aa:	2305      	movs	r3, #5
 80092ac:	001a      	movs	r2, r3
 80092ae:	f008 fc25 	bl	8011afc <memcpy>
	strcpy(gsmInfo.urlport,"1883");
 80092b2:	4a67      	ldr	r2, [pc, #412]	; (8009450 <GSM_Init+0x1d4>)
 80092b4:	4b69      	ldr	r3, [pc, #420]	; (800945c <GSM_Init+0x1e0>)
 80092b6:	0010      	movs	r0, r2
 80092b8:	0019      	movs	r1, r3
 80092ba:	2305      	movs	r3, #5
 80092bc:	001a      	movs	r2, r3
 80092be:	f008 fc1d 	bl	8011afc <memcpy>
	//strcpy(gsmInfo.urlport,"5010");
	//strcpy(gsmInfo.urlport,"80");
	strcpy(gsmInfo.url,"escorsocket.ddns.net");
 80092c2:	4b62      	ldr	r3, [pc, #392]	; (800944c <GSM_Init+0x1d0>)
 80092c4:	4a66      	ldr	r2, [pc, #408]	; (8009460 <GSM_Init+0x1e4>)
 80092c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80092c8:	c313      	stmia	r3!, {r0, r1, r4}
 80092ca:	ca03      	ldmia	r2!, {r0, r1}
 80092cc:	c303      	stmia	r3!, {r0, r1}
 80092ce:	7812      	ldrb	r2, [r2, #0]
 80092d0:	701a      	strb	r2, [r3, #0]
	strcpy(gsmInfo.url,"196.40.108.169");
 80092d2:	4b5e      	ldr	r3, [pc, #376]	; (800944c <GSM_Init+0x1d0>)
 80092d4:	4a63      	ldr	r2, [pc, #396]	; (8009464 <GSM_Init+0x1e8>)
 80092d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80092d8:	c313      	stmia	r3!, {r0, r1, r4}
 80092da:	8811      	ldrh	r1, [r2, #0]
 80092dc:	8019      	strh	r1, [r3, #0]
 80092de:	7892      	ldrb	r2, [r2, #2]
 80092e0:	709a      	strb	r2, [r3, #2]
	//sprintf(temp, "URL:%s, port:%s\r\n",gsmInfo.url,gsmInfo.urlport);
	//Debug_Send(temp);
	//strcpy(gsmInfo.url,"197.94.242.65");
	//strcpy(gsmInfo.url,"102.129.99.123");
	restartTimer = 0;
 80092e2:	4b61      	ldr	r3, [pc, #388]	; (8009468 <GSM_Init+0x1ec>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
	onTimer = 0;
 80092e8:	4b60      	ldr	r3, [pc, #384]	; (800946c <GSM_Init+0x1f0>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, temp1, 20);
 80092ee:	4960      	ldr	r1, [pc, #384]	; (8009470 <GSM_Init+0x1f4>)
 80092f0:	4b60      	ldr	r3, [pc, #384]	; (8009474 <GSM_Init+0x1f8>)
 80092f2:	2214      	movs	r2, #20
 80092f4:	0018      	movs	r0, r3
 80092f6:	f006 f8e7 	bl	800f4c8 <HAL_UART_Receive_IT>
	//SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
	SET_BIT(huart2.Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80092fa:	4b5e      	ldr	r3, [pc, #376]	; (8009474 <GSM_Init+0x1f8>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	4b5c      	ldr	r3, [pc, #368]	; (8009474 <GSM_Init+0x1f8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2190      	movs	r1, #144	; 0x90
 8009306:	0049      	lsls	r1, r1, #1
 8009308:	430a      	orrs	r2, r1
 800930a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, temp, 50);
 800930c:	495a      	ldr	r1, [pc, #360]	; (8009478 <GSM_Init+0x1fc>)
 800930e:	4b5b      	ldr	r3, [pc, #364]	; (800947c <GSM_Init+0x200>)
 8009310:	2232      	movs	r2, #50	; 0x32
 8009312:	0018      	movs	r0, r3
 8009314:	f006 f8d8 	bl	800f4c8 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8009318:	4b59      	ldr	r3, [pc, #356]	; (8009480 <GSM_Init+0x204>)
 800931a:	2201      	movs	r2, #1
 800931c:	2108      	movs	r1, #8
 800931e:	0018      	movs	r0, r3
 8009320:	f004 fa1c 	bl	800d75c <HAL_GPIO_WritePin>
	smsFlags.gprsActive = 0;
 8009324:	4b57      	ldr	r3, [pc, #348]	; (8009484 <GSM_Init+0x208>)
 8009326:	2200      	movs	r2, #0
 8009328:	61da      	str	r2, [r3, #28]
	gsmInfo.socket = 0;
 800932a:	4b48      	ldr	r3, [pc, #288]	; (800944c <GSM_Init+0x1d0>)
 800932c:	2200      	movs	r2, #0
 800932e:	679a      	str	r2, [r3, #120]	; 0x78
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8009330:	4b53      	ldr	r3, [pc, #332]	; (8009480 <GSM_Init+0x204>)
 8009332:	2201      	movs	r2, #1
 8009334:	2108      	movs	r1, #8
 8009336:	0018      	movs	r0, r3
 8009338:	f004 fa10 	bl	800d75c <HAL_GPIO_WritePin>
	gsmInfo.FTP_Open = 0;
 800933c:	4a43      	ldr	r2, [pc, #268]	; (800944c <GSM_Init+0x1d0>)
 800933e:	23b2      	movs	r3, #178	; 0xb2
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	2100      	movs	r1, #0
 8009344:	50d1      	str	r1, [r2, r3]
	gsmInfo.FS_SeekFlag = 0;
 8009346:	4a41      	ldr	r2, [pc, #260]	; (800944c <GSM_Init+0x1d0>)
 8009348:	23b4      	movs	r3, #180	; 0xb4
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	2100      	movs	r1, #0
 800934e:	50d1      	str	r1, [r2, r3]
	gsmInfo.FS_Connect = 0;
 8009350:	4a3e      	ldr	r2, [pc, #248]	; (800944c <GSM_Init+0x1d0>)
 8009352:	23b6      	movs	r3, #182	; 0xb6
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	2100      	movs	r1, #0
 8009358:	50d1      	str	r1, [r2, r3]
	gsmInfo.FTP_Data = 0;
 800935a:	4a3c      	ldr	r2, [pc, #240]	; (800944c <GSM_Init+0x1d0>)
 800935c:	23b8      	movs	r3, #184	; 0xb8
 800935e:	005b      	lsls	r3, r3, #1
 8009360:	2100      	movs	r1, #0
 8009362:	50d1      	str	r1, [r2, r3]
	gsmInfo.FTP_Save_Addr = 1000;
 8009364:	4a39      	ldr	r2, [pc, #228]	; (800944c <GSM_Init+0x1d0>)
 8009366:	23ba      	movs	r3, #186	; 0xba
 8009368:	005b      	lsls	r3, r3, #1
 800936a:	21fa      	movs	r1, #250	; 0xfa
 800936c:	0089      	lsls	r1, r1, #2
 800936e:	50d1      	str	r1, [r2, r3]
	gsmInfo.FTP_Size = 0;
 8009370:	4a36      	ldr	r2, [pc, #216]	; (800944c <GSM_Init+0x1d0>)
 8009372:	23bc      	movs	r3, #188	; 0xbc
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	2100      	movs	r1, #0
 8009378:	50d1      	str	r1, [r2, r3]
	gsmInfo.MQTT = 1;
 800937a:	4a34      	ldr	r2, [pc, #208]	; (800944c <GSM_Init+0x1d0>)
 800937c:	23be      	movs	r3, #190	; 0xbe
 800937e:	005b      	lsls	r3, r3, #1
 8009380:	2101      	movs	r1, #1
 8009382:	50d1      	str	r1, [r2, r3]
	gsmTimer = 0;
 8009384:	4b40      	ldr	r3, [pc, #256]	; (8009488 <GSM_Init+0x20c>)
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]
	ftpseek = 0;
 800938a:	4b40      	ldr	r3, [pc, #256]	; (800948c <GSM_Init+0x210>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
	myLongStr(ftpseek,temp1,10,10);
 8009390:	4b3e      	ldr	r3, [pc, #248]	; (800948c <GSM_Init+0x210>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	0018      	movs	r0, r3
 8009396:	4936      	ldr	r1, [pc, #216]	; (8009470 <GSM_Init+0x1f4>)
 8009398:	230a      	movs	r3, #10
 800939a:	220a      	movs	r2, #10
 800939c:	f003 fb72 	bl	800ca84 <myLongStr>
	strcpy(temp,"FTP seek init");
 80093a0:	4a35      	ldr	r2, [pc, #212]	; (8009478 <GSM_Init+0x1fc>)
 80093a2:	4b3b      	ldr	r3, [pc, #236]	; (8009490 <GSM_Init+0x214>)
 80093a4:	0010      	movs	r0, r2
 80093a6:	0019      	movs	r1, r3
 80093a8:	230e      	movs	r3, #14
 80093aa:	001a      	movs	r2, r3
 80093ac:	f008 fba6 	bl	8011afc <memcpy>
	strcat(temp,temp1);
 80093b0:	4a2f      	ldr	r2, [pc, #188]	; (8009470 <GSM_Init+0x1f4>)
 80093b2:	4b31      	ldr	r3, [pc, #196]	; (8009478 <GSM_Init+0x1fc>)
 80093b4:	0011      	movs	r1, r2
 80093b6:	0018      	movs	r0, r3
 80093b8:	f008 fbd2 	bl	8011b60 <strcat>
	strcat(temp,"\r\n");
 80093bc:	4b2e      	ldr	r3, [pc, #184]	; (8009478 <GSM_Init+0x1fc>)
 80093be:	0018      	movs	r0, r3
 80093c0:	f7ff feac 	bl	800911c <strlen>
 80093c4:	0003      	movs	r3, r0
 80093c6:	001a      	movs	r2, r3
 80093c8:	4b2b      	ldr	r3, [pc, #172]	; (8009478 <GSM_Init+0x1fc>)
 80093ca:	18d2      	adds	r2, r2, r3
 80093cc:	4b31      	ldr	r3, [pc, #196]	; (8009494 <GSM_Init+0x218>)
 80093ce:	0010      	movs	r0, r2
 80093d0:	0019      	movs	r1, r3
 80093d2:	2303      	movs	r3, #3
 80093d4:	001a      	movs	r2, r3
 80093d6:	f008 fb91 	bl	8011afc <memcpy>
	Debug_Send(temp);
 80093da:	4b27      	ldr	r3, [pc, #156]	; (8009478 <GSM_Init+0x1fc>)
 80093dc:	0018      	movs	r0, r3
 80093de:	f001 f901 	bl	800a5e4 <Debug_Send>
	strcpy(temp,"M95 address");
 80093e2:	4a25      	ldr	r2, [pc, #148]	; (8009478 <GSM_Init+0x1fc>)
 80093e4:	4b2c      	ldr	r3, [pc, #176]	; (8009498 <GSM_Init+0x21c>)
 80093e6:	0010      	movs	r0, r2
 80093e8:	0019      	movs	r1, r3
 80093ea:	230c      	movs	r3, #12
 80093ec:	001a      	movs	r2, r3
 80093ee:	f008 fb85 	bl	8011afc <memcpy>
	myLongStr(gsmInfo.FTP_Save_Addr,temp1,10,10);
 80093f2:	4a16      	ldr	r2, [pc, #88]	; (800944c <GSM_Init+0x1d0>)
 80093f4:	23ba      	movs	r3, #186	; 0xba
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	58d0      	ldr	r0, [r2, r3]
 80093fa:	491d      	ldr	r1, [pc, #116]	; (8009470 <GSM_Init+0x1f4>)
 80093fc:	230a      	movs	r3, #10
 80093fe:	220a      	movs	r2, #10
 8009400:	f003 fb40 	bl	800ca84 <myLongStr>
	strcat(temp,temp1);
 8009404:	4a1a      	ldr	r2, [pc, #104]	; (8009470 <GSM_Init+0x1f4>)
 8009406:	4b1c      	ldr	r3, [pc, #112]	; (8009478 <GSM_Init+0x1fc>)
 8009408:	0011      	movs	r1, r2
 800940a:	0018      	movs	r0, r3
 800940c:	f008 fba8 	bl	8011b60 <strcat>
	strcat(temp,"\r\n");
 8009410:	4b19      	ldr	r3, [pc, #100]	; (8009478 <GSM_Init+0x1fc>)
 8009412:	0018      	movs	r0, r3
 8009414:	f7ff fe82 	bl	800911c <strlen>
 8009418:	0003      	movs	r3, r0
 800941a:	001a      	movs	r2, r3
 800941c:	4b16      	ldr	r3, [pc, #88]	; (8009478 <GSM_Init+0x1fc>)
 800941e:	18d2      	adds	r2, r2, r3
 8009420:	4b1c      	ldr	r3, [pc, #112]	; (8009494 <GSM_Init+0x218>)
 8009422:	0010      	movs	r0, r2
 8009424:	0019      	movs	r1, r3
 8009426:	2303      	movs	r3, #3
 8009428:	001a      	movs	r2, r3
 800942a:	f008 fb67 	bl	8011afc <memcpy>
	Debug_Send(temp);
 800942e:	4b12      	ldr	r3, [pc, #72]	; (8009478 <GSM_Init+0x1fc>)
 8009430:	0018      	movs	r0, r3
 8009432:	f001 f8d7 	bl	800a5e4 <Debug_Send>
	gsmInfo.MQTT_Subscribe = 0;
 8009436:	4a05      	ldr	r2, [pc, #20]	; (800944c <GSM_Init+0x1d0>)
 8009438:	23c4      	movs	r3, #196	; 0xc4
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	2100      	movs	r1, #0
 800943e:	50d1      	str	r1, [r2, r3]
}
 8009440:	46c0      	nop			; (mov r8, r8)
 8009442:	46bd      	mov	sp, r7
 8009444:	bdb0      	pop	{r4, r5, r7, pc}
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	080124f0 	.word	0x080124f0
 800944c:	20001720 	.word	0x20001720
 8009450:	2000173e 	.word	0x2000173e
 8009454:	080124fc 	.word	0x080124fc
 8009458:	08012504 	.word	0x08012504
 800945c:	0801250c 	.word	0x0801250c
 8009460:	08012514 	.word	0x08012514
 8009464:	0801252c 	.word	0x0801252c
 8009468:	2000017c 	.word	0x2000017c
 800946c:	20000164 	.word	0x20000164
 8009470:	20001578 	.word	0x20001578
 8009474:	20001a90 	.word	0x20001a90
 8009478:	20001434 	.word	0x20001434
 800947c:	20001a08 	.word	0x20001a08
 8009480:	48000400 	.word	0x48000400
 8009484:	2000112c 	.word	0x2000112c
 8009488:	2000156c 	.word	0x2000156c
 800948c:	200000c4 	.word	0x200000c4
 8009490:	0801253c 	.word	0x0801253c
 8009494:	0801254c 	.word	0x0801254c
 8009498:	08012550 	.word	0x08012550

0800949c <GSM_Service>:

void GSM_Service(){
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b0c7      	sub	sp, #284	; 0x11c
 80094a0:	af00      	add	r7, sp, #0
	//Debug_Send("GSM\r\n");
	char temp[60];
	int tempI;

	//voltage = getVolt();
	myLongStr(voltage,temp1,10,10);
 80094a2:	4bf0      	ldr	r3, [pc, #960]	; (8009864 <GSM_Service+0x3c8>)
 80094a4:	6818      	ldr	r0, [r3, #0]
 80094a6:	49f0      	ldr	r1, [pc, #960]	; (8009868 <GSM_Service+0x3cc>)
 80094a8:	230a      	movs	r3, #10
 80094aa:	220a      	movs	r2, #10
 80094ac:	f003 faea 	bl	800ca84 <myLongStr>
	strcat(temp,",");
 80094b0:	24dc      	movs	r4, #220	; 0xdc
 80094b2:	193b      	adds	r3, r7, r4
 80094b4:	0018      	movs	r0, r3
 80094b6:	f7ff fe31 	bl	800911c <strlen>
 80094ba:	0003      	movs	r3, r0
 80094bc:	001a      	movs	r2, r3
 80094be:	193b      	adds	r3, r7, r4
 80094c0:	189a      	adds	r2, r3, r2
 80094c2:	4bea      	ldr	r3, [pc, #936]	; (800986c <GSM_Service+0x3d0>)
 80094c4:	0010      	movs	r0, r2
 80094c6:	0019      	movs	r1, r3
 80094c8:	2302      	movs	r3, #2
 80094ca:	001a      	movs	r2, r3
 80094cc:	f008 fb16 	bl	8011afc <memcpy>
	strcat(temp,temp1);
 80094d0:	4ae5      	ldr	r2, [pc, #916]	; (8009868 <GSM_Service+0x3cc>)
 80094d2:	193b      	adds	r3, r7, r4
 80094d4:	0011      	movs	r1, r2
 80094d6:	0018      	movs	r0, r3
 80094d8:	f008 fb42 	bl	8011b60 <strcat>
	//LineSelect(0x80);
	//LCD_Print(temp);

	//tempI = getVolt();
	//tempI = getCurrent();
	switch(gsmState){
 80094dc:	4be4      	ldr	r3, [pc, #912]	; (8009870 <GSM_Service+0x3d4>)
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	2b36      	cmp	r3, #54	; 0x36
 80094e2:	d901      	bls.n	80094e8 <GSM_Service+0x4c>
 80094e4:	f000 fe72 	bl	800a1cc <GSM_Service+0xd30>
 80094e8:	009a      	lsls	r2, r3, #2
 80094ea:	4be2      	ldr	r3, [pc, #904]	; (8009874 <GSM_Service+0x3d8>)
 80094ec:	18d3      	adds	r3, r2, r3
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	469f      	mov	pc, r3
	case GSM_Off:
		//Debug_Send("GSM off1\r\n");
		//gsmState = FTP_Close;			//check jumping to bootloader
		if (onTimer < 3){
 80094f2:	4be1      	ldr	r3, [pc, #900]	; (8009878 <GSM_Service+0x3dc>)
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d80e      	bhi.n	8009518 <GSM_Service+0x7c>
			HAL_GPIO_WritePin(GSM_Enable_GPIO_Port, GSM_Enable_Pin, GPIO_PIN_RESET);
 80094fa:	2380      	movs	r3, #128	; 0x80
 80094fc:	021b      	lsls	r3, r3, #8
 80094fe:	48df      	ldr	r0, [pc, #892]	; (800987c <GSM_Service+0x3e0>)
 8009500:	2200      	movs	r2, #0
 8009502:	0019      	movs	r1, r3
 8009504:	f004 f92a 	bl	800d75c <HAL_GPIO_WritePin>
			onTimer++;
 8009508:	4bdb      	ldr	r3, [pc, #876]	; (8009878 <GSM_Service+0x3dc>)
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	4bd9      	ldr	r3, [pc, #868]	; (8009878 <GSM_Service+0x3dc>)
 8009512:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_RESET);
			gsmState = GSM_On;
			//gsmState = AutoBaud;
		}

		break;
 8009514:	f000 fe5d 	bl	800a1d2 <GSM_Service+0xd36>
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_RESET);
 8009518:	4bd9      	ldr	r3, [pc, #868]	; (8009880 <GSM_Service+0x3e4>)
 800951a:	2200      	movs	r2, #0
 800951c:	2104      	movs	r1, #4
 800951e:	0018      	movs	r0, r3
 8009520:	f004 f91c 	bl	800d75c <HAL_GPIO_WritePin>
			gsmState = GSM_On;
 8009524:	4bd2      	ldr	r3, [pc, #840]	; (8009870 <GSM_Service+0x3d4>)
 8009526:	2202      	movs	r2, #2
 8009528:	701a      	strb	r2, [r3, #0]
		break;
 800952a:	f000 fe52 	bl	800a1d2 <GSM_Service+0xd36>
	case GSM_On:
		Debug_Send("GSM on\r\n");
 800952e:	4bd5      	ldr	r3, [pc, #852]	; (8009884 <GSM_Service+0x3e8>)
 8009530:	0018      	movs	r0, r3
 8009532:	f001 f857 	bl	800a5e4 <Debug_Send>
		HAL_GPIO_WritePin(GSM_Enable_GPIO_Port, GSM_Enable_Pin, GPIO_PIN_SET);
 8009536:	2380      	movs	r3, #128	; 0x80
 8009538:	021b      	lsls	r3, r3, #8
 800953a:	48d0      	ldr	r0, [pc, #832]	; (800987c <GSM_Service+0x3e0>)
 800953c:	2201      	movs	r2, #1
 800953e:	0019      	movs	r1, r3
 8009540:	f004 f90c 	bl	800d75c <HAL_GPIO_WritePin>
		//HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
		onTimer = 0;
 8009544:	4bcc      	ldr	r3, [pc, #816]	; (8009878 <GSM_Service+0x3dc>)
 8009546:	2200      	movs	r2, #0
 8009548:	801a      	strh	r2, [r3, #0]
		gsmState = GSM_Enable;
 800954a:	4bc9      	ldr	r3, [pc, #804]	; (8009870 <GSM_Service+0x3d4>)
 800954c:	2203      	movs	r2, #3
 800954e:	701a      	strb	r2, [r3, #0]
		break;
 8009550:	f000 fe3f 	bl	800a1d2 <GSM_Service+0xd36>
	case GSM_Enable:
		Debug_Send("GSM enable\r\n");
 8009554:	4bcc      	ldr	r3, [pc, #816]	; (8009888 <GSM_Service+0x3ec>)
 8009556:	0018      	movs	r0, r3
 8009558:	f001 f844 	bl	800a5e4 <Debug_Send>
		if (onTimer < 4){
 800955c:	4bc6      	ldr	r3, [pc, #792]	; (8009878 <GSM_Service+0x3dc>)
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	2b03      	cmp	r3, #3
 8009562:	d811      	bhi.n	8009588 <GSM_Service+0xec>
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_SET);
 8009564:	4bc6      	ldr	r3, [pc, #792]	; (8009880 <GSM_Service+0x3e4>)
 8009566:	2201      	movs	r2, #1
 8009568:	2104      	movs	r1, #4
 800956a:	0018      	movs	r0, r3
 800956c:	f004 f8f6 	bl	800d75c <HAL_GPIO_WritePin>
			onTimer++;
 8009570:	4bc1      	ldr	r3, [pc, #772]	; (8009878 <GSM_Service+0x3dc>)
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	4bbf      	ldr	r3, [pc, #764]	; (8009878 <GSM_Service+0x3dc>)
 800957a:	801a      	strh	r2, [r3, #0]
			Debug_Send("GSM on set\r\n");
 800957c:	4bc3      	ldr	r3, [pc, #780]	; (800988c <GSM_Service+0x3f0>)
 800957e:	0018      	movs	r0, r3
 8009580:	f001 f830 	bl	800a5e4 <Debug_Send>
			gsmState = Search;
			//onTimer = 0;
			Debug_Send("GSM reset\r\n");
			//gsmState = AutoBaud;
		}
		break;
 8009584:	f000 fe25 	bl	800a1d2 <GSM_Service+0xd36>
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_RESET);
 8009588:	4bbd      	ldr	r3, [pc, #756]	; (8009880 <GSM_Service+0x3e4>)
 800958a:	2200      	movs	r2, #0
 800958c:	2104      	movs	r1, #4
 800958e:	0018      	movs	r0, r3
 8009590:	f004 f8e4 	bl	800d75c <HAL_GPIO_WritePin>
			gsmState = Search;
 8009594:	4bb6      	ldr	r3, [pc, #728]	; (8009870 <GSM_Service+0x3d4>)
 8009596:	2204      	movs	r2, #4
 8009598:	701a      	strb	r2, [r3, #0]
			Debug_Send("GSM reset\r\n");
 800959a:	4bbd      	ldr	r3, [pc, #756]	; (8009890 <GSM_Service+0x3f4>)
 800959c:	0018      	movs	r0, r3
 800959e:	f001 f821 	bl	800a5e4 <Debug_Send>
		break;
 80095a2:	f000 fe16 	bl	800a1d2 <GSM_Service+0xd36>
	case Search:
		//smsFlags.send = 1;	//test sms function
		//Debug_Send("Search\r\n");
		//GSM_Send("AT+CREG?\r\n");
		GSM_Send("AT+CREG=1\r");
 80095a6:	4bbb      	ldr	r3, [pc, #748]	; (8009894 <GSM_Service+0x3f8>)
 80095a8:	0018      	movs	r0, r3
 80095aa:	f000 ffc9 	bl	800a540 <GSM_Send>
		gsmState = GPRS_Search;
 80095ae:	4bb0      	ldr	r3, [pc, #704]	; (8009870 <GSM_Service+0x3d4>)
 80095b0:	2205      	movs	r2, #5
 80095b2:	701a      	strb	r2, [r3, #0]
		break;
 80095b4:	f000 fe0d 	bl	800a1d2 <GSM_Service+0xd36>
	case GPRS_Search:
		GSM_Send("AT+CGREG=1\r");
 80095b8:	4bb7      	ldr	r3, [pc, #732]	; (8009898 <GSM_Service+0x3fc>)
 80095ba:	0018      	movs	r0, r3
 80095bc:	f000 ffc0 	bl	800a540 <GSM_Send>
		gsmState = 0;
 80095c0:	4bab      	ldr	r3, [pc, #684]	; (8009870 <GSM_Service+0x3d4>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	701a      	strb	r2, [r3, #0]
		break;
 80095c6:	f000 fe04 	bl	800a1d2 <GSM_Service+0xd36>
	case SMSconfig:
		Debug_Send("testing\r\n");
 80095ca:	4bb4      	ldr	r3, [pc, #720]	; (800989c <GSM_Service+0x400>)
 80095cc:	0018      	movs	r0, r3
 80095ce:	f001 f809 	bl	800a5e4 <Debug_Send>
		GSM_Send("AT+CMGF=1\r\n");
 80095d2:	4bb3      	ldr	r3, [pc, #716]	; (80098a0 <GSM_Service+0x404>)
 80095d4:	0018      	movs	r0, r3
 80095d6:	f000 ffb3 	bl	800a540 <GSM_Send>
		smsFlags.config = 1;
 80095da:	4bb2      	ldr	r3, [pc, #712]	; (80098a4 <GSM_Service+0x408>)
 80095dc:	2201      	movs	r2, #1
 80095de:	605a      	str	r2, [r3, #4]
		smsFlags.signal = 1;
 80095e0:	4bb0      	ldr	r3, [pc, #704]	; (80098a4 <GSM_Service+0x408>)
 80095e2:	2201      	movs	r2, #1
 80095e4:	601a      	str	r2, [r3, #0]
		//sendData(gsmInfo.vth,UART0);
		//gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
		//gsmInfo.vth_l *= 100;

		//gsmState = Imei;
		gsmState = Operator;
 80095e6:	4ba2      	ldr	r3, [pc, #648]	; (8009870 <GSM_Service+0x3d4>)
 80095e8:	2207      	movs	r2, #7
 80095ea:	701a      	strb	r2, [r3, #0]
		break;
 80095ec:	f000 fdf1 	bl	800a1d2 <GSM_Service+0xd36>
	case Operator:
		GSM_Send("AT+COPS?\r");
 80095f0:	4bad      	ldr	r3, [pc, #692]	; (80098a8 <GSM_Service+0x40c>)
 80095f2:	0018      	movs	r0, r3
 80095f4:	f000 ffa4 	bl	800a540 <GSM_Send>
		gsmState = Imei;
 80095f8:	4b9d      	ldr	r3, [pc, #628]	; (8009870 <GSM_Service+0x3d4>)
 80095fa:	2208      	movs	r2, #8
 80095fc:	701a      	strb	r2, [r3, #0]
		//gsmState = GPRS_Send;
		//gsmState = SMS_Send;
		break;
 80095fe:	f000 fde8 	bl	800a1d2 <GSM_Service+0xd36>
	case Imei:
		GSM_Send("AT+CGSN\r\n");
 8009602:	4baa      	ldr	r3, [pc, #680]	; (80098ac <GSM_Service+0x410>)
 8009604:	0018      	movs	r0, r3
 8009606:	f000 ff9b 	bl	800a540 <GSM_Send>
		//GSM_Send("AT+CGSN?\r\n");
		gsmInfo.imeiFlag = 5;
 800960a:	4aa9      	ldr	r2, [pc, #676]	; (80098b0 <GSM_Service+0x414>)
 800960c:	23a8      	movs	r3, #168	; 0xa8
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	2105      	movs	r1, #5
 8009612:	50d1      	str	r1, [r2, r3]
		gsmState = Ccid;
 8009614:	4b96      	ldr	r3, [pc, #600]	; (8009870 <GSM_Service+0x3d4>)
 8009616:	2209      	movs	r2, #9
 8009618:	701a      	strb	r2, [r3, #0]

		//gsmState = GPRS_Send;
		gsmState = GprsContext;
 800961a:	4b95      	ldr	r3, [pc, #596]	; (8009870 <GSM_Service+0x3d4>)
 800961c:	220a      	movs	r2, #10
 800961e:	701a      	strb	r2, [r3, #0]
		//gsmState = 0;
		break;
 8009620:	f000 fdd7 	bl	800a1d2 <GSM_Service+0xd36>
	case Ccid:
		GSM_Send("AT+CCID\r\n");
 8009624:	4ba3      	ldr	r3, [pc, #652]	; (80098b4 <GSM_Service+0x418>)
 8009626:	0018      	movs	r0, r3
 8009628:	f000 ff8a 	bl	800a540 <GSM_Send>
		gsmState = GprsContext;
 800962c:	4b90      	ldr	r3, [pc, #576]	; (8009870 <GSM_Service+0x3d4>)
 800962e:	220a      	movs	r2, #10
 8009630:	701a      	strb	r2, [r3, #0]
		gsmState = GPRS_Attach;
 8009632:	4b8f      	ldr	r3, [pc, #572]	; (8009870 <GSM_Service+0x3d4>)
 8009634:	2211      	movs	r2, #17
 8009636:	701a      	strb	r2, [r3, #0]
		break;
 8009638:	f000 fdcb 	bl	800a1d2 <GSM_Service+0xd36>
	case GprsContext:
		//GSM_Send("AT+CGDCONT=1,\"IP\",\"INTERNET\"\r\n");
		GSM_Send("AT+CGDCONT=1,\"ip\",\"internet\"\r\n");
 800963c:	4b9e      	ldr	r3, [pc, #632]	; (80098b8 <GSM_Service+0x41c>)
 800963e:	0018      	movs	r0, r3
 8009640:	f000 ff7e 	bl	800a540 <GSM_Send>
		//strcpy(gsmInfo.url,"www.google.com");
		//strcpy(gsmInfo.urlport,"80");
		gsmState = DataMode;
 8009644:	4b8a      	ldr	r3, [pc, #552]	; (8009870 <GSM_Service+0x3d4>)
 8009646:	2220      	movs	r2, #32
 8009648:	701a      	strb	r2, [r3, #0]

		//sendSMS("0720631005", smsInfo.build);
		//gsmState = CallerID;
		//gsmState = USSD_Config;
		//gsmState = 0;
		gsmState = FTP_User;
 800964a:	4b89      	ldr	r3, [pc, #548]	; (8009870 <GSM_Service+0x3d4>)
 800964c:	2222      	movs	r2, #34	; 0x22
 800964e:	701a      	strb	r2, [r3, #0]
		break;
 8009650:	f000 fdbf 	bl	800a1d2 <GSM_Service+0xd36>
	case DataMode:
		Debug_Send("Check FTP\r\n");
 8009654:	4b99      	ldr	r3, [pc, #612]	; (80098bc <GSM_Service+0x420>)
 8009656:	0018      	movs	r0, r3
 8009658:	f000 ffc4 	bl	800a5e4 <Debug_Send>
		//GSM_Send("AT+QIMODE=0\r\n");
		//GSM_Send("AT+QIMODE?\r\n");
		//Debug_Send("Build SMS\r\n");
		BuildPower();
 800965c:	f002 f8f6 	bl	800b84c <BuildPower>
		//sendSMS("0720631005", smsInfo.build);
		//GSM_Send("AT+CGDCONT=1,\"ip\",\"internet\"\r\n");
		GSM_Send("AT+QFTPOPEN=?\r\n");
 8009660:	4b97      	ldr	r3, [pc, #604]	; (80098c0 <GSM_Service+0x424>)
 8009662:	0018      	movs	r0, r3
 8009664:	f000 ff6c 	bl	800a540 <GSM_Send>
		gsmState = FTP_Open;
 8009668:	4b81      	ldr	r3, [pc, #516]	; (8009870 <GSM_Service+0x3d4>)
 800966a:	2224      	movs	r2, #36	; 0x24
 800966c:	701a      	strb	r2, [r3, #0]

		gsmState = 0;
 800966e:	4b80      	ldr	r3, [pc, #512]	; (8009870 <GSM_Service+0x3d4>)
 8009670:	2200      	movs	r2, #0
 8009672:	701a      	strb	r2, [r3, #0]
		gsmState = FTP_User;
 8009674:	4b7e      	ldr	r3, [pc, #504]	; (8009870 <GSM_Service+0x3d4>)
 8009676:	2222      	movs	r2, #34	; 0x22
 8009678:	701a      	strb	r2, [r3, #0]
		break;
 800967a:	f000 fdaa 	bl	800a1d2 <GSM_Service+0xd36>
	case CallerID:
		GSM_Send("AT+CLIP=1\r\n");
 800967e:	4b91      	ldr	r3, [pc, #580]	; (80098c4 <GSM_Service+0x428>)
 8009680:	0018      	movs	r0, r3
 8009682:	f000 ff5d 	bl	800a540 <GSM_Send>
		//+CLIP: "+27733507155",145,,,"",0
		gsmState = USSD;		//test
 8009686:	4b7a      	ldr	r3, [pc, #488]	; (8009870 <GSM_Service+0x3d4>)
 8009688:	220c      	movs	r2, #12
 800968a:	701a      	strb	r2, [r3, #0]
		gsmState = SMS_Check;
 800968c:	4b78      	ldr	r3, [pc, #480]	; (8009870 <GSM_Service+0x3d4>)
 800968e:	220e      	movs	r2, #14
 8009690:	701a      	strb	r2, [r3, #0]
		break;
 8009692:	f000 fd9e 	bl	800a1d2 <GSM_Service+0xd36>
	case USSD:
		if(strncmp(gsmInfo.network,"VodaCom",7)==0)GSM_Send("AT+CUSD=1,\"*100#\"\r\n");
 8009696:	498c      	ldr	r1, [pc, #560]	; (80098c8 <GSM_Service+0x42c>)
 8009698:	4b8c      	ldr	r3, [pc, #560]	; (80098cc <GSM_Service+0x430>)
 800969a:	2207      	movs	r2, #7
 800969c:	0018      	movs	r0, r3
 800969e:	f008 fa74 	bl	8011b8a <strncmp>
 80096a2:	1e03      	subs	r3, r0, #0
 80096a4:	d104      	bne.n	80096b0 <GSM_Service+0x214>
 80096a6:	4b8a      	ldr	r3, [pc, #552]	; (80098d0 <GSM_Service+0x434>)
 80096a8:	0018      	movs	r0, r3
 80096aa:	f000 ff49 	bl	800a540 <GSM_Send>
 80096ae:	e00b      	b.n	80096c8 <GSM_Service+0x22c>
		else if(strncmp(gsmInfo.network,"MTN",3)==0)GSM_Send("AT+CUSD=1,\"*141#\"\r\n");
 80096b0:	4988      	ldr	r1, [pc, #544]	; (80098d4 <GSM_Service+0x438>)
 80096b2:	4b86      	ldr	r3, [pc, #536]	; (80098cc <GSM_Service+0x430>)
 80096b4:	2203      	movs	r2, #3
 80096b6:	0018      	movs	r0, r3
 80096b8:	f008 fa67 	bl	8011b8a <strncmp>
 80096bc:	1e03      	subs	r3, r0, #0
 80096be:	d103      	bne.n	80096c8 <GSM_Service+0x22c>
 80096c0:	4b85      	ldr	r3, [pc, #532]	; (80098d8 <GSM_Service+0x43c>)
 80096c2:	0018      	movs	r0, r3
 80096c4:	f000 ff3c 	bl	800a540 <GSM_Send>
		//tempState = USSD;
		gsmInfo.balanceFlag = 0;
 80096c8:	4a79      	ldr	r2, [pc, #484]	; (80098b0 <GSM_Service+0x414>)
 80096ca:	239a      	movs	r3, #154	; 0x9a
 80096cc:	005b      	lsls	r3, r3, #1
 80096ce:	2100      	movs	r1, #0
 80096d0:	50d1      	str	r1, [r2, r3]
		gsmInfo.balancePending = 1;
 80096d2:	4a77      	ldr	r2, [pc, #476]	; (80098b0 <GSM_Service+0x414>)
 80096d4:	239c      	movs	r3, #156	; 0x9c
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	2101      	movs	r1, #1
 80096da:	50d1      	str	r1, [r2, r3]
		gsmState = 0;
 80096dc:	4b64      	ldr	r3, [pc, #400]	; (8009870 <GSM_Service+0x3d4>)
 80096de:	2200      	movs	r2, #0
 80096e0:	701a      	strb	r2, [r3, #0]

		break;
 80096e2:	f000 fd76 	bl	800a1d2 <GSM_Service+0xd36>

	case SMS_Check:
		GSM_Send("AT+CMGL=\"ALL\"\r\n");
 80096e6:	4b7d      	ldr	r3, [pc, #500]	; (80098dc <GSM_Service+0x440>)
 80096e8:	0018      	movs	r0, r3
 80096ea:	f000 ff29 	bl	800a540 <GSM_Send>
		smsInfo.count = 0;
 80096ee:	4b7c      	ldr	r3, [pc, #496]	; (80098e0 <GSM_Service+0x444>)
 80096f0:	22f8      	movs	r2, #248	; 0xf8
 80096f2:	2100      	movs	r1, #0
 80096f4:	5099      	str	r1, [r3, r2]
		//if (gsmInfo.registered == 1) sendData("Unit registered!!!\r\n",UART0);
		gsmState = Signal;		//check signal
 80096f6:	4b5e      	ldr	r3, [pc, #376]	; (8009870 <GSM_Service+0x3d4>)
 80096f8:	2218      	movs	r2, #24
 80096fa:	701a      	strb	r2, [r3, #0]
		break;
 80096fc:	f000 fd69 	bl	800a1d2 <GSM_Service+0xd36>
	case Signal:
		GSM_Send("AT+CSQ\r\n");
 8009700:	4b78      	ldr	r3, [pc, #480]	; (80098e4 <GSM_Service+0x448>)
 8009702:	0018      	movs	r0, r3
 8009704:	f000 ff1c 	bl	800a540 <GSM_Send>
		//else if (smsFlags.gprsActive == 1)gsmState = SocketOpen;
		//else if (smsFlags.gprsPending == 1) gsmState = GPRS_Off;		//switch off gsm if previous socket dial failed
		//else if (gsmInfo.gprsDataPending == 1) gsmInfo.gprsDataPending = 0;
		//else if (gsmInfo.gprsDataPending == 0) gsmState = SocketOpen;
		//else if (gsmInfo.registered == 1) gsmState = SocketOpen;
		/*else */gsmState = 0;
 8009708:	4b59      	ldr	r3, [pc, #356]	; (8009870 <GSM_Service+0x3d4>)
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
		if (gsmInfo.balanceFlag == 1) gsmState = USSD;
 800970e:	4a68      	ldr	r2, [pc, #416]	; (80098b0 <GSM_Service+0x414>)
 8009710:	239a      	movs	r3, #154	; 0x9a
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	58d3      	ldr	r3, [r2, r3]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d001      	beq.n	800971e <GSM_Service+0x282>
 800971a:	f000 fd59 	bl	800a1d0 <GSM_Service+0xd34>
 800971e:	4b54      	ldr	r3, [pc, #336]	; (8009870 <GSM_Service+0x3d4>)
 8009720:	220c      	movs	r2, #12
 8009722:	701a      	strb	r2, [r3, #0]

		//buildInfo();
		break;
 8009724:	f000 fd54 	bl	800a1d0 <GSM_Service+0xd34>
	case SMS_Send:
		smsFlags.send = 1;
 8009728:	4b5e      	ldr	r3, [pc, #376]	; (80098a4 <GSM_Service+0x408>)
 800972a:	2201      	movs	r2, #1
 800972c:	609a      	str	r2, [r3, #8]
		Debug_Send("Send SMS\r\n");
 800972e:	4b6e      	ldr	r3, [pc, #440]	; (80098e8 <GSM_Service+0x44c>)
 8009730:	0018      	movs	r0, r3
 8009732:	f000 ff57 	bl	800a5e4 <Debug_Send>
		if (CheckUser() == 0){ //if there is no user registered
 8009736:	f001 ff2b 	bl	800b590 <CheckUser>
 800973a:	1e03      	subs	r3, r0, #0
 800973c:	d108      	bne.n	8009750 <GSM_Service+0x2b4>
			strcpy(smsInfo.recMSISDN, "0720631005");		//return all sms to admin
 800973e:	4b6b      	ldr	r3, [pc, #428]	; (80098ec <GSM_Service+0x450>)
 8009740:	4a6b      	ldr	r2, [pc, #428]	; (80098f0 <GSM_Service+0x454>)
 8009742:	ca03      	ldmia	r2!, {r0, r1}
 8009744:	c303      	stmia	r3!, {r0, r1}
 8009746:	8811      	ldrh	r1, [r2, #0]
 8009748:	8019      	strh	r1, [r3, #0]
 800974a:	7892      	ldrb	r2, [r2, #2]
 800974c:	709a      	strb	r2, [r3, #2]
 800974e:	e005      	b.n	800975c <GSM_Service+0x2c0>
		}
		else strcpy(smsInfo.recMSISDN, gsmInfo.msisdn);
 8009750:	4a68      	ldr	r2, [pc, #416]	; (80098f4 <GSM_Service+0x458>)
 8009752:	4b66      	ldr	r3, [pc, #408]	; (80098ec <GSM_Service+0x450>)
 8009754:	0011      	movs	r1, r2
 8009756:	0018      	movs	r0, r3
 8009758:	f008 fa0f 	bl	8011b7a <strcpy>
		strcpy(smsInfo.recMSISDN, "0720631005");	//debug
 800975c:	4b63      	ldr	r3, [pc, #396]	; (80098ec <GSM_Service+0x450>)
 800975e:	4a64      	ldr	r2, [pc, #400]	; (80098f0 <GSM_Service+0x454>)
 8009760:	ca03      	ldmia	r2!, {r0, r1}
 8009762:	c303      	stmia	r3!, {r0, r1}
 8009764:	8811      	ldrh	r1, [r2, #0]
 8009766:	8019      	strh	r1, [r3, #0]
 8009768:	7892      	ldrb	r2, [r2, #2]
 800976a:	709a      	strb	r2, [r3, #2]
		Debug_Send("MSISDN:");
 800976c:	4b62      	ldr	r3, [pc, #392]	; (80098f8 <GSM_Service+0x45c>)
 800976e:	0018      	movs	r0, r3
 8009770:	f000 ff38 	bl	800a5e4 <Debug_Send>
		Debug_Send(smsInfo.recMSISDN);
 8009774:	4b5d      	ldr	r3, [pc, #372]	; (80098ec <GSM_Service+0x450>)
 8009776:	0018      	movs	r0, r3
 8009778:	f000 ff34 	bl	800a5e4 <Debug_Send>
		Debug_Send("\r\n");
 800977c:	4b5f      	ldr	r3, [pc, #380]	; (80098fc <GSM_Service+0x460>)
 800977e:	0018      	movs	r0, r3
 8009780:	f000 ff30 	bl	800a5e4 <Debug_Send>
		//sendSMS(smsInfo.recMSISDN, smsInfo.build);
		sendSMS("0720631005", smsInfo.build);
 8009784:	4a5e      	ldr	r2, [pc, #376]	; (8009900 <GSM_Service+0x464>)
 8009786:	4b5a      	ldr	r3, [pc, #360]	; (80098f0 <GSM_Service+0x454>)
 8009788:	0011      	movs	r1, r2
 800978a:	0018      	movs	r0, r3
 800978c:	f001 fdc8 	bl	800b320 <sendSMS>
		gsmInfo.balanceFlag = 1;
 8009790:	4a47      	ldr	r2, [pc, #284]	; (80098b0 <GSM_Service+0x414>)
 8009792:	239a      	movs	r3, #154	; 0x9a
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	2101      	movs	r1, #1
 8009798:	50d1      	str	r1, [r2, r3]
		//sendSMS("0720631005", "TEST");
		gsmState = 0;
 800979a:	4b35      	ldr	r3, [pc, #212]	; (8009870 <GSM_Service+0x3d4>)
 800979c:	2200      	movs	r2, #0
 800979e:	701a      	strb	r2, [r3, #0]
		break;
 80097a0:	f000 fd17 	bl	800a1d2 <GSM_Service+0xd36>
	case SMS_Text:
		//sendData("Insert SMS text\r\n",UART0);
		Debug_Send("SMS\r\n");
 80097a4:	4b57      	ldr	r3, [pc, #348]	; (8009904 <GSM_Service+0x468>)
 80097a6:	0018      	movs	r0, r3
 80097a8:	f000 ff1c 	bl	800a5e4 <Debug_Send>
		strcpy(temp,SMScontent);
 80097ac:	4a56      	ldr	r2, [pc, #344]	; (8009908 <GSM_Service+0x46c>)
 80097ae:	24dc      	movs	r4, #220	; 0xdc
 80097b0:	193b      	adds	r3, r7, r4
 80097b2:	0011      	movs	r1, r2
 80097b4:	0018      	movs	r0, r3
 80097b6:	f008 f9e0 	bl	8011b7a <strcpy>
		strcat(temp,"\032\r");
 80097ba:	193b      	adds	r3, r7, r4
 80097bc:	0018      	movs	r0, r3
 80097be:	f7ff fcad 	bl	800911c <strlen>
 80097c2:	0003      	movs	r3, r0
 80097c4:	001a      	movs	r2, r3
 80097c6:	193b      	adds	r3, r7, r4
 80097c8:	189a      	adds	r2, r3, r2
 80097ca:	4b50      	ldr	r3, [pc, #320]	; (800990c <GSM_Service+0x470>)
 80097cc:	0010      	movs	r0, r2
 80097ce:	0019      	movs	r1, r3
 80097d0:	2303      	movs	r3, #3
 80097d2:	001a      	movs	r2, r3
 80097d4:	f008 f992 	bl	8011afc <memcpy>
		GSM_Send(temp);
 80097d8:	193b      	adds	r3, r7, r4
 80097da:	0018      	movs	r0, r3
 80097dc:	f000 feb0 	bl	800a540 <GSM_Send>
		//GSM_Send(SMScontent);
		//sendByte('1A', UART1);
		//GSM_Send("\032\r");		//1A HEX
		smsFlags.reply = 0;
 80097e0:	4b30      	ldr	r3, [pc, #192]	; (80098a4 <GSM_Service+0x408>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	625a      	str	r2, [r3, #36]	; 0x24
		gsmState = 0;
 80097e6:	4b22      	ldr	r3, [pc, #136]	; (8009870 <GSM_Service+0x3d4>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	701a      	strb	r2, [r3, #0]
		break;
 80097ec:	f000 fcf1 	bl	800a1d2 <GSM_Service+0xd36>
	case GPRS_Attach:
		GSM_Send("AT+CGATT=1\r\n");
 80097f0:	4b47      	ldr	r3, [pc, #284]	; (8009910 <GSM_Service+0x474>)
 80097f2:	0018      	movs	r0, r3
 80097f4:	f000 fea4 	bl	800a540 <GSM_Send>
		gsmState = 0;
 80097f8:	4b1d      	ldr	r3, [pc, #116]	; (8009870 <GSM_Service+0x3d4>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	701a      	strb	r2, [r3, #0]
		gsmState = GprsContext;
 80097fe:	4b1c      	ldr	r3, [pc, #112]	; (8009870 <GSM_Service+0x3d4>)
 8009800:	220a      	movs	r2, #10
 8009802:	701a      	strb	r2, [r3, #0]
		break;
 8009804:	f000 fce5 	bl	800a1d2 <GSM_Service+0xd36>
	case GPRS_On:
		GSM_Send("AT+CGACT=1,1\r\n");
 8009808:	4b42      	ldr	r3, [pc, #264]	; (8009914 <GSM_Service+0x478>)
 800980a:	0018      	movs	r0, r3
 800980c:	f000 fe98 	bl	800a540 <GSM_Send>
		smsFlags.gprsPending = 1;
 8009810:	4b24      	ldr	r3, [pc, #144]	; (80098a4 <GSM_Service+0x408>)
 8009812:	2201      	movs	r2, #1
 8009814:	619a      	str	r2, [r3, #24]
		gsmInfo.socket = 0;
 8009816:	4b26      	ldr	r3, [pc, #152]	; (80098b0 <GSM_Service+0x414>)
 8009818:	2200      	movs	r2, #0
 800981a:	679a      	str	r2, [r3, #120]	; 0x78
		//gsmState = 0;
		//gsmState = 10;
		gsmState = GPRS_IP;
 800981c:	4b14      	ldr	r3, [pc, #80]	; (8009870 <GSM_Service+0x3d4>)
 800981e:	2213      	movs	r2, #19
 8009820:	701a      	strb	r2, [r3, #0]
		break;
 8009822:	f000 fcd6 	bl	800a1d2 <GSM_Service+0xd36>
	case GPRS_IP:
		GSM_Send("AT+CGPADDR=1\r\n");
 8009826:	4b3c      	ldr	r3, [pc, #240]	; (8009918 <GSM_Service+0x47c>)
 8009828:	0018      	movs	r0, r3
 800982a:	f000 fe89 	bl	800a540 <GSM_Send>
		gsmState = 0;
 800982e:	4b10      	ldr	r3, [pc, #64]	; (8009870 <GSM_Service+0x3d4>)
 8009830:	2200      	movs	r2, #0
 8009832:	701a      	strb	r2, [r3, #0]
		break;
 8009834:	f000 fccd 	bl	800a1d2 <GSM_Service+0xd36>
	case GPRS_Off:
		//GSM_Send("AT+MIPCALL=0\r\n");

		HAL_Delay(1);
 8009838:	2001      	movs	r0, #1
 800983a:	f003 fc97 	bl	800d16c <HAL_Delay>
		GSM_Send("AT+CGACT=0,1\r\n");
 800983e:	4b37      	ldr	r3, [pc, #220]	; (800991c <GSM_Service+0x480>)
 8009840:	0018      	movs	r0, r3
 8009842:	f000 fe7d 	bl	800a540 <GSM_Send>
		gsmInfo.socket = 0;
 8009846:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <GSM_Service+0x414>)
 8009848:	2200      	movs	r2, #0
 800984a:	679a      	str	r2, [r3, #120]	; 0x78
		smsFlags.gprsActive = 0;
 800984c:	4b15      	ldr	r3, [pc, #84]	; (80098a4 <GSM_Service+0x408>)
 800984e:	2200      	movs	r2, #0
 8009850:	61da      	str	r2, [r3, #28]
		gsmInfo.gprsDataPending = 0;
 8009852:	4b17      	ldr	r3, [pc, #92]	; (80098b0 <GSM_Service+0x414>)
 8009854:	2280      	movs	r2, #128	; 0x80
 8009856:	2100      	movs	r1, #0
 8009858:	5099      	str	r1, [r3, r2]
		gsmState = 0;
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <GSM_Service+0x3d4>)
 800985c:	2200      	movs	r2, #0
 800985e:	701a      	strb	r2, [r3, #0]
		//go2boot();
		break;
 8009860:	f000 fcb7 	bl	800a1d2 <GSM_Service+0xd36>
 8009864:	20001570 	.word	0x20001570
 8009868:	20001578 	.word	0x20001578
 800986c:	0801255c 	.word	0x0801255c
 8009870:	200000c0 	.word	0x200000c0
 8009874:	080131e8 	.word	0x080131e8
 8009878:	20000164 	.word	0x20000164
 800987c:	48000800 	.word	0x48000800
 8009880:	48000400 	.word	0x48000400
 8009884:	08012560 	.word	0x08012560
 8009888:	0801256c 	.word	0x0801256c
 800988c:	0801257c 	.word	0x0801257c
 8009890:	0801258c 	.word	0x0801258c
 8009894:	08012598 	.word	0x08012598
 8009898:	080125a4 	.word	0x080125a4
 800989c:	080125b0 	.word	0x080125b0
 80098a0:	080125bc 	.word	0x080125bc
 80098a4:	2000112c 	.word	0x2000112c
 80098a8:	080125c8 	.word	0x080125c8
 80098ac:	080125d4 	.word	0x080125d4
 80098b0:	20001720 	.word	0x20001720
 80098b4:	080125e0 	.word	0x080125e0
 80098b8:	080125ec 	.word	0x080125ec
 80098bc:	0801260c 	.word	0x0801260c
 80098c0:	08012618 	.word	0x08012618
 80098c4:	08012628 	.word	0x08012628
 80098c8:	08012634 	.word	0x08012634
 80098cc:	200017f5 	.word	0x200017f5
 80098d0:	0801263c 	.word	0x0801263c
 80098d4:	08012650 	.word	0x08012650
 80098d8:	08012654 	.word	0x08012654
 80098dc:	08012668 	.word	0x08012668
 80098e0:	20001298 	.word	0x20001298
 80098e4:	08012678 	.word	0x08012678
 80098e8:	08012684 	.word	0x08012684
 80098ec:	2000129c 	.word	0x2000129c
 80098f0:	08012690 	.word	0x08012690
 80098f4:	200017d2 	.word	0x200017d2
 80098f8:	0801269c 	.word	0x0801269c
 80098fc:	0801254c 	.word	0x0801254c
 8009900:	20001394 	.word	0x20001394
 8009904:	080126a4 	.word	0x080126a4
 8009908:	200014c8 	.word	0x200014c8
 800990c:	080126ac 	.word	0x080126ac
 8009910:	080126b0 	.word	0x080126b0
 8009914:	080126c0 	.word	0x080126c0
 8009918:	080126d0 	.word	0x080126d0
 800991c:	080126e0 	.word	0x080126e0
	case SocketOpen:
		gsmState = 0;
 8009920:	4b76      	ldr	r3, [pc, #472]	; (8009afc <GSM_Service+0x660>)
 8009922:	2200      	movs	r2, #0
 8009924:	701a      	strb	r2, [r3, #0]
		//sendData("AT+MIPOPEN=1,10,\"139.130.4.5\",80,0\r\n",UART1);		//connect to remote server
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"216.58.223.4\",80,0\r\n",UART1);		//connect to remote server
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"197.159.49.78\",5001,0\r\n",UART1);
		gsmInfo.gprsDataPending = 1;
 8009926:	4b76      	ldr	r3, [pc, #472]	; (8009b00 <GSM_Service+0x664>)
 8009928:	2280      	movs	r2, #128	; 0x80
 800992a:	2101      	movs	r1, #1
 800992c:	5099      	str	r1, [r3, r2]
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"196.40.183.39\",5001,0\r\n",UART1);
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"102.129.99.123\",5001,0\r\n",UART1);

		char temp[200];
		//strcpy(temp,"AT+MIPOPEN=1,5001,\"");
		strcpy(temp,"AT+QIOPEN=1,\"TCP\",\"");
 800992e:	003b      	movs	r3, r7
 8009930:	4a74      	ldr	r2, [pc, #464]	; (8009b04 <GSM_Service+0x668>)
 8009932:	ca13      	ldmia	r2!, {r0, r1, r4}
 8009934:	c313      	stmia	r3!, {r0, r1, r4}
 8009936:	ca03      	ldmia	r2!, {r0, r1}
 8009938:	c303      	stmia	r3!, {r0, r1}
		strcpy(temp,"AT+QIOPEN=\"TCP\",\"");
 800993a:	003b      	movs	r3, r7
 800993c:	4a72      	ldr	r2, [pc, #456]	; (8009b08 <GSM_Service+0x66c>)
 800993e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8009940:	c313      	stmia	r3!, {r0, r1, r4}
 8009942:	6811      	ldr	r1, [r2, #0]
 8009944:	6019      	str	r1, [r3, #0]
 8009946:	8892      	ldrh	r2, [r2, #4]
 8009948:	809a      	strh	r2, [r3, #4]
		strcat(temp,gsmInfo.url);
 800994a:	4a6d      	ldr	r2, [pc, #436]	; (8009b00 <GSM_Service+0x664>)
 800994c:	003b      	movs	r3, r7
 800994e:	0011      	movs	r1, r2
 8009950:	0018      	movs	r0, r3
 8009952:	f008 f905 	bl	8011b60 <strcat>
		strcat(temp,"\",");
 8009956:	003b      	movs	r3, r7
 8009958:	0018      	movs	r0, r3
 800995a:	f7ff fbdf 	bl	800911c <strlen>
 800995e:	0003      	movs	r3, r0
 8009960:	001a      	movs	r2, r3
 8009962:	003b      	movs	r3, r7
 8009964:	189a      	adds	r2, r3, r2
 8009966:	4b69      	ldr	r3, [pc, #420]	; (8009b0c <GSM_Service+0x670>)
 8009968:	0010      	movs	r0, r2
 800996a:	0019      	movs	r1, r3
 800996c:	2303      	movs	r3, #3
 800996e:	001a      	movs	r2, r3
 8009970:	f008 f8c4 	bl	8011afc <memcpy>
		strcat(temp,gsmInfo.urlport);
 8009974:	4a66      	ldr	r2, [pc, #408]	; (8009b10 <GSM_Service+0x674>)
 8009976:	003b      	movs	r3, r7
 8009978:	0011      	movs	r1, r2
 800997a:	0018      	movs	r0, r3
 800997c:	f008 f8f0 	bl	8011b60 <strcat>
		strcat (temp,"\r\n");
 8009980:	003b      	movs	r3, r7
 8009982:	0018      	movs	r0, r3
 8009984:	f7ff fbca 	bl	800911c <strlen>
 8009988:	0003      	movs	r3, r0
 800998a:	001a      	movs	r2, r3
 800998c:	003b      	movs	r3, r7
 800998e:	189a      	adds	r2, r3, r2
 8009990:	4b60      	ldr	r3, [pc, #384]	; (8009b14 <GSM_Service+0x678>)
 8009992:	0010      	movs	r0, r2
 8009994:	0019      	movs	r1, r3
 8009996:	2303      	movs	r3, #3
 8009998:	001a      	movs	r2, r3
 800999a:	f008 f8af 	bl	8011afc <memcpy>
		Debug_Send("build socket\r\n");
 800999e:	4b5e      	ldr	r3, [pc, #376]	; (8009b18 <GSM_Service+0x67c>)
 80099a0:	0018      	movs	r0, r3
 80099a2:	f000 fe1f 	bl	800a5e4 <Debug_Send>
		//strcat (temp,",0\r\n");
		if (gsmInfo.socket == 0){
 80099a6:	4b56      	ldr	r3, [pc, #344]	; (8009b00 <GSM_Service+0x664>)
 80099a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10d      	bne.n	80099ca <GSM_Service+0x52e>
			//sendData("AT+MIPOPEN=1,5001,\"102.129.99.123\",5000,0\r\n",UART1);
			Debug_Send("Open socket\r\n");
 80099ae:	4b5b      	ldr	r3, [pc, #364]	; (8009b1c <GSM_Service+0x680>)
 80099b0:	0018      	movs	r0, r3
 80099b2:	f000 fe17 	bl	800a5e4 <Debug_Send>
			Debug_Send(temp);
 80099b6:	003b      	movs	r3, r7
 80099b8:	0018      	movs	r0, r3
 80099ba:	f000 fe13 	bl	800a5e4 <Debug_Send>
			GSM_Send(temp);
 80099be:	003b      	movs	r3, r7
 80099c0:	0018      	movs	r0, r3
 80099c2:	f000 fdbd 	bl	800a540 <GSM_Send>
			//sendData("Socket open\r\n",UART0);
		}
		//sendData("AT+MIPOPEN=?\r\n",UART1);
		//gsmState = GPRS_Write;
		//if (gsmInfo.gprsDataPending == 0) gsmState = 0;
		break;
 80099c6:	f000 fc04 	bl	800a1d2 <GSM_Service+0xd36>
			gsmState = SocketClose;
 80099ca:	4b4c      	ldr	r3, [pc, #304]	; (8009afc <GSM_Service+0x660>)
 80099cc:	2216      	movs	r2, #22
 80099ce:	701a      	strb	r2, [r3, #0]
		break;
 80099d0:	f000 fbff 	bl	800a1d2 <GSM_Service+0xd36>
	case SocketClose:
		//GSM_Send("AT+MIPCLOSE=1\r\n");
		GSM_Send("AT+QICLOSE\r\n");
 80099d4:	4b52      	ldr	r3, [pc, #328]	; (8009b20 <GSM_Service+0x684>)
 80099d6:	0018      	movs	r0, r3
 80099d8:	f000 fdb2 	bl	800a540 <GSM_Send>
		gsmInfo.gprsDataPending = 0;
 80099dc:	4b48      	ldr	r3, [pc, #288]	; (8009b00 <GSM_Service+0x664>)
 80099de:	2280      	movs	r2, #128	; 0x80
 80099e0:	2100      	movs	r1, #0
 80099e2:	5099      	str	r1, [r3, r2]
		gsmState = 0;
 80099e4:	4b45      	ldr	r3, [pc, #276]	; (8009afc <GSM_Service+0x660>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	701a      	strb	r2, [r3, #0]
		break;
 80099ea:	f000 fbf2 	bl	800a1d2 <GSM_Service+0xd36>
	case SMS_Del:
		//smsFlags.send = 1;
		//GSM_Send("AT+CMGD=");
		//GSM_Send(smsInfo.index);
		strcpy(temp,"AT+CMGD=");
 80099ee:	003b      	movs	r3, r7
 80099f0:	4a4c      	ldr	r2, [pc, #304]	; (8009b24 <GSM_Service+0x688>)
 80099f2:	ca03      	ldmia	r2!, {r0, r1}
 80099f4:	c303      	stmia	r3!, {r0, r1}
 80099f6:	7812      	ldrb	r2, [r2, #0]
 80099f8:	701a      	strb	r2, [r3, #0]
		strcat(temp,smsInfo.index);
 80099fa:	4a4b      	ldr	r2, [pc, #300]	; (8009b28 <GSM_Service+0x68c>)
 80099fc:	003b      	movs	r3, r7
 80099fe:	0011      	movs	r1, r2
 8009a00:	0018      	movs	r0, r3
 8009a02:	f008 f8ad 	bl	8011b60 <strcat>
		strcat(temp,"\r\n");
 8009a06:	003b      	movs	r3, r7
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f7ff fb87 	bl	800911c <strlen>
 8009a0e:	0003      	movs	r3, r0
 8009a10:	001a      	movs	r2, r3
 8009a12:	003b      	movs	r3, r7
 8009a14:	189a      	adds	r2, r3, r2
 8009a16:	4b3f      	ldr	r3, [pc, #252]	; (8009b14 <GSM_Service+0x678>)
 8009a18:	0010      	movs	r0, r2
 8009a1a:	0019      	movs	r1, r3
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	001a      	movs	r2, r3
 8009a20:	f008 f86c 	bl	8011afc <memcpy>
		//sendData("4",UART1);
		//GSM_Send("\r\n");
		GSM_Send(temp);
 8009a24:	003b      	movs	r3, r7
 8009a26:	0018      	movs	r0, r3
 8009a28:	f000 fd8a 	bl	800a540 <GSM_Send>
		smsFlags.del = 0;
 8009a2c:	4b3f      	ldr	r3, [pc, #252]	; (8009b2c <GSM_Service+0x690>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	621a      	str	r2, [r3, #32]
		gsmState = 0;
 8009a32:	4b32      	ldr	r3, [pc, #200]	; (8009afc <GSM_Service+0x660>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	701a      	strb	r2, [r3, #0]
		break;
 8009a38:	f000 fbcb 	bl	800a1d2 <GSM_Service+0xd36>
		//sendData("AT+MIPOPEN=?\r\n",UART1);

		gsmState = 0;
		break;*/
	case GPRS_Write:
		gsmInfo.dataFlag = 1;
 8009a3c:	4a30      	ldr	r2, [pc, #192]	; (8009b00 <GSM_Service+0x664>)
 8009a3e:	23aa      	movs	r3, #170	; 0xaa
 8009a40:	005b      	lsls	r3, r3, #1
 8009a42:	2101      	movs	r1, #1
 8009a44:	50d1      	str	r1, [r2, r3]
		Debug_Send("GPRS write\r\n");
 8009a46:	4b3a      	ldr	r3, [pc, #232]	; (8009b30 <GSM_Service+0x694>)
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f000 fdcb 	bl	800a5e4 <Debug_Send>
		if (gsmInfo.MQTT == 0){
 8009a4e:	4a2c      	ldr	r2, [pc, #176]	; (8009b00 <GSM_Service+0x664>)
 8009a50:	23be      	movs	r3, #190	; 0xbe
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	58d3      	ldr	r3, [r2, r3]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d000      	beq.n	8009a5c <GSM_Service+0x5c0>
 8009a5a:	e199      	b.n	8009d90 <GSM_Service+0x8f4>
			if (gsmInfo.registered == 0){
 8009a5c:	4b28      	ldr	r3, [pc, #160]	; (8009b00 <GSM_Service+0x664>)
 8009a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d177      	bne.n	8009b54 <GSM_Service+0x6b8>
				Debug_Send("unregistered\r\n");
 8009a64:	4b33      	ldr	r3, [pc, #204]	; (8009b34 <GSM_Service+0x698>)
 8009a66:	0018      	movs	r0, r3
 8009a68:	f000 fdbc 	bl	800a5e4 <Debug_Send>
				strcpy(tempGPRS,"imei:");
 8009a6c:	4a32      	ldr	r2, [pc, #200]	; (8009b38 <GSM_Service+0x69c>)
 8009a6e:	4b33      	ldr	r3, [pc, #204]	; (8009b3c <GSM_Service+0x6a0>)
 8009a70:	0010      	movs	r0, r2
 8009a72:	0019      	movs	r1, r3
 8009a74:	2306      	movs	r3, #6
 8009a76:	001a      	movs	r2, r3
 8009a78:	f008 f840 	bl	8011afc <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.imei);
 8009a7c:	4a30      	ldr	r2, [pc, #192]	; (8009b40 <GSM_Service+0x6a4>)
 8009a7e:	4b2e      	ldr	r3, [pc, #184]	; (8009b38 <GSM_Service+0x69c>)
 8009a80:	0011      	movs	r1, r2
 8009a82:	0018      	movs	r0, r3
 8009a84:	f008 f86c 	bl	8011b60 <strcat>

				int temp3;
				char temp2[20];
				//temp3 = getVolt();
				myLongStr(voltage,temp2,10,10);
 8009a88:	4b2e      	ldr	r3, [pc, #184]	; (8009b44 <GSM_Service+0x6a8>)
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	24c8      	movs	r4, #200	; 0xc8
 8009a8e:	1939      	adds	r1, r7, r4
 8009a90:	230a      	movs	r3, #10
 8009a92:	220a      	movs	r2, #10
 8009a94:	f002 fff6 	bl	800ca84 <myLongStr>
				strcat(tempGPRS,",v:");
 8009a98:	4b27      	ldr	r3, [pc, #156]	; (8009b38 <GSM_Service+0x69c>)
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	f7ff fb3e 	bl	800911c <strlen>
 8009aa0:	0003      	movs	r3, r0
 8009aa2:	001a      	movs	r2, r3
 8009aa4:	4b24      	ldr	r3, [pc, #144]	; (8009b38 <GSM_Service+0x69c>)
 8009aa6:	18d2      	adds	r2, r2, r3
 8009aa8:	4b27      	ldr	r3, [pc, #156]	; (8009b48 <GSM_Service+0x6ac>)
 8009aaa:	0010      	movs	r0, r2
 8009aac:	0019      	movs	r1, r3
 8009aae:	2304      	movs	r3, #4
 8009ab0:	001a      	movs	r2, r3
 8009ab2:	f008 f823 	bl	8011afc <memcpy>
				strcat(tempGPRS,temp2);
 8009ab6:	193a      	adds	r2, r7, r4
 8009ab8:	4b1f      	ldr	r3, [pc, #124]	; (8009b38 <GSM_Service+0x69c>)
 8009aba:	0011      	movs	r1, r2
 8009abc:	0018      	movs	r0, r3
 8009abe:	f008 f84f 	bl	8011b60 <strcat>
				//temp3 = getCurrent();
				myLongStr(current1,temp2,10,10);
 8009ac2:	4b22      	ldr	r3, [pc, #136]	; (8009b4c <GSM_Service+0x6b0>)
 8009ac4:	6818      	ldr	r0, [r3, #0]
 8009ac6:	1939      	adds	r1, r7, r4
 8009ac8:	230a      	movs	r3, #10
 8009aca:	220a      	movs	r2, #10
 8009acc:	f002 ffda 	bl	800ca84 <myLongStr>
				strcat(tempGPRS,",c:");
 8009ad0:	4b19      	ldr	r3, [pc, #100]	; (8009b38 <GSM_Service+0x69c>)
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	f7ff fb22 	bl	800911c <strlen>
 8009ad8:	0003      	movs	r3, r0
 8009ada:	001a      	movs	r2, r3
 8009adc:	4b16      	ldr	r3, [pc, #88]	; (8009b38 <GSM_Service+0x69c>)
 8009ade:	18d2      	adds	r2, r2, r3
 8009ae0:	4b1b      	ldr	r3, [pc, #108]	; (8009b50 <GSM_Service+0x6b4>)
 8009ae2:	0010      	movs	r0, r2
 8009ae4:	0019      	movs	r1, r3
 8009ae6:	2304      	movs	r3, #4
 8009ae8:	001a      	movs	r2, r3
 8009aea:	f008 f807 	bl	8011afc <memcpy>
				strcat(tempGPRS,temp2);
 8009aee:	193a      	adds	r2, r7, r4
 8009af0:	4b11      	ldr	r3, [pc, #68]	; (8009b38 <GSM_Service+0x69c>)
 8009af2:	0011      	movs	r1, r2
 8009af4:	0018      	movs	r0, r3
 8009af6:	f008 f833 	bl	8011b60 <strcat>
 8009afa:	e039      	b.n	8009b70 <GSM_Service+0x6d4>
 8009afc:	200000c0 	.word	0x200000c0
 8009b00:	20001720 	.word	0x20001720
 8009b04:	080126f0 	.word	0x080126f0
 8009b08:	08012704 	.word	0x08012704
 8009b0c:	08012718 	.word	0x08012718
 8009b10:	2000173e 	.word	0x2000173e
 8009b14:	0801254c 	.word	0x0801254c
 8009b18:	0801271c 	.word	0x0801271c
 8009b1c:	0801272c 	.word	0x0801272c
 8009b20:	0801273c 	.word	0x0801273c
 8009b24:	0801274c 	.word	0x0801274c
 8009b28:	20001298 	.word	0x20001298
 8009b2c:	2000112c 	.word	0x2000112c
 8009b30:	08012758 	.word	0x08012758
 8009b34:	08012768 	.word	0x08012768
 8009b38:	200014a0 	.word	0x200014a0
 8009b3c:	08012778 	.word	0x08012778
 8009b40:	20001744 	.word	0x20001744
 8009b44:	20001570 	.word	0x20001570
 8009b48:	08012780 	.word	0x08012780
 8009b4c:	20001998 	.word	0x20001998
 8009b50:	08012784 	.word	0x08012784
			}
			else {
				strcpy(tempGPRS,"user:");
 8009b54:	4ae5      	ldr	r2, [pc, #916]	; (8009eec <GSM_Service+0xa50>)
 8009b56:	4be6      	ldr	r3, [pc, #920]	; (8009ef0 <GSM_Service+0xa54>)
 8009b58:	0010      	movs	r0, r2
 8009b5a:	0019      	movs	r1, r3
 8009b5c:	2306      	movs	r3, #6
 8009b5e:	001a      	movs	r2, r3
 8009b60:	f007 ffcc 	bl	8011afc <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.user);
 8009b64:	4ae3      	ldr	r2, [pc, #908]	; (8009ef4 <GSM_Service+0xa58>)
 8009b66:	4be1      	ldr	r3, [pc, #900]	; (8009eec <GSM_Service+0xa50>)
 8009b68:	0011      	movs	r1, r2
 8009b6a:	0018      	movs	r0, r3
 8009b6c:	f007 fff8 	bl	8011b60 <strcat>
					sprintf (tempv,".%d", owData[3]);
					strcat(tempGPRS,tempv);
				}*/
			}
			//GPRS_SendData(tempGPRS);
			if (gsmInfo.userFlag == 1){
 8009b70:	4be1      	ldr	r3, [pc, #900]	; (8009ef8 <GSM_Service+0xa5c>)
 8009b72:	2284      	movs	r2, #132	; 0x84
 8009b74:	589b      	ldr	r3, [r3, r2]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d124      	bne.n	8009bc4 <GSM_Service+0x728>
				gsmInfo.userFlag = 0;
 8009b7a:	4bdf      	ldr	r3, [pc, #892]	; (8009ef8 <GSM_Service+0xa5c>)
 8009b7c:	2284      	movs	r2, #132	; 0x84
 8009b7e:	2100      	movs	r1, #0
 8009b80:	5099      	str	r1, [r3, r2]
				strcpy(tempGPRS,",");
 8009b82:	4ada      	ldr	r2, [pc, #872]	; (8009eec <GSM_Service+0xa50>)
 8009b84:	4bdd      	ldr	r3, [pc, #884]	; (8009efc <GSM_Service+0xa60>)
 8009b86:	0010      	movs	r0, r2
 8009b88:	0019      	movs	r1, r3
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	001a      	movs	r2, r3
 8009b8e:	f007 ffb5 	bl	8011afc <memcpy>
				strcat(tempGPRS,"user:");
 8009b92:	4bd6      	ldr	r3, [pc, #856]	; (8009eec <GSM_Service+0xa50>)
 8009b94:	0018      	movs	r0, r3
 8009b96:	f7ff fac1 	bl	800911c <strlen>
 8009b9a:	0003      	movs	r3, r0
 8009b9c:	001a      	movs	r2, r3
 8009b9e:	4bd3      	ldr	r3, [pc, #844]	; (8009eec <GSM_Service+0xa50>)
 8009ba0:	18d2      	adds	r2, r2, r3
 8009ba2:	4bd3      	ldr	r3, [pc, #844]	; (8009ef0 <GSM_Service+0xa54>)
 8009ba4:	0010      	movs	r0, r2
 8009ba6:	0019      	movs	r1, r3
 8009ba8:	2306      	movs	r3, #6
 8009baa:	001a      	movs	r2, r3
 8009bac:	f007 ffa6 	bl	8011afc <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.user);
 8009bb0:	4ad0      	ldr	r2, [pc, #832]	; (8009ef4 <GSM_Service+0xa58>)
 8009bb2:	4bce      	ldr	r3, [pc, #824]	; (8009eec <GSM_Service+0xa50>)
 8009bb4:	0011      	movs	r1, r2
 8009bb6:	0018      	movs	r0, r3
 8009bb8:	f007 ffd2 	bl	8011b60 <strcat>


				//strcat(tempGPRS,",");
				//sendData(tempGPRS,UART0);
				GPRS_SendData(tempGPRS);
 8009bbc:	4bcb      	ldr	r3, [pc, #812]	; (8009eec <GSM_Service+0xa50>)
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	f001 ffc2 	bl	800bb48 <GPRS_SendData>
			}

			if (gsmInfo.msisdnFlag == 1){
 8009bc4:	4bcc      	ldr	r3, [pc, #816]	; (8009ef8 <GSM_Service+0xa5c>)
 8009bc6:	2288      	movs	r2, #136	; 0x88
 8009bc8:	589b      	ldr	r3, [r3, r2]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d124      	bne.n	8009c18 <GSM_Service+0x77c>
				gsmInfo.msisdnFlag = 0;
 8009bce:	4bca      	ldr	r3, [pc, #808]	; (8009ef8 <GSM_Service+0xa5c>)
 8009bd0:	2288      	movs	r2, #136	; 0x88
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	5099      	str	r1, [r3, r2]
				strcpy(tempGPRS,",");
 8009bd6:	4ac5      	ldr	r2, [pc, #788]	; (8009eec <GSM_Service+0xa50>)
 8009bd8:	4bc8      	ldr	r3, [pc, #800]	; (8009efc <GSM_Service+0xa60>)
 8009bda:	0010      	movs	r0, r2
 8009bdc:	0019      	movs	r1, r3
 8009bde:	2302      	movs	r3, #2
 8009be0:	001a      	movs	r2, r3
 8009be2:	f007 ff8b 	bl	8011afc <memcpy>
				strcat(tempGPRS,"msisdn:");
 8009be6:	4bc1      	ldr	r3, [pc, #772]	; (8009eec <GSM_Service+0xa50>)
 8009be8:	0018      	movs	r0, r3
 8009bea:	f7ff fa97 	bl	800911c <strlen>
 8009bee:	0003      	movs	r3, r0
 8009bf0:	001a      	movs	r2, r3
 8009bf2:	4bbe      	ldr	r3, [pc, #760]	; (8009eec <GSM_Service+0xa50>)
 8009bf4:	18d2      	adds	r2, r2, r3
 8009bf6:	4bc2      	ldr	r3, [pc, #776]	; (8009f00 <GSM_Service+0xa64>)
 8009bf8:	0010      	movs	r0, r2
 8009bfa:	0019      	movs	r1, r3
 8009bfc:	2308      	movs	r3, #8
 8009bfe:	001a      	movs	r2, r3
 8009c00:	f007 ff7c 	bl	8011afc <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.msisdn);
 8009c04:	4abf      	ldr	r2, [pc, #764]	; (8009f04 <GSM_Service+0xa68>)
 8009c06:	4bb9      	ldr	r3, [pc, #740]	; (8009eec <GSM_Service+0xa50>)
 8009c08:	0011      	movs	r1, r2
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	f007 ffa8 	bl	8011b60 <strcat>
				//sendData(tempGPRS,UART0);
				GPRS_SendData(tempGPRS);
 8009c10:	4bb6      	ldr	r3, [pc, #728]	; (8009eec <GSM_Service+0xa50>)
 8009c12:	0018      	movs	r0, r3
 8009c14:	f001 ff98 	bl	800bb48 <GPRS_SendData>
			}

			if (gsmInfo.passwordFlag == 1){
 8009c18:	4bb7      	ldr	r3, [pc, #732]	; (8009ef8 <GSM_Service+0xa5c>)
 8009c1a:	228c      	movs	r2, #140	; 0x8c
 8009c1c:	589b      	ldr	r3, [r3, r2]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d124      	bne.n	8009c6c <GSM_Service+0x7d0>
				gsmInfo.passwordFlag = 0;
 8009c22:	4bb5      	ldr	r3, [pc, #724]	; (8009ef8 <GSM_Service+0xa5c>)
 8009c24:	228c      	movs	r2, #140	; 0x8c
 8009c26:	2100      	movs	r1, #0
 8009c28:	5099      	str	r1, [r3, r2]
				strcpy(tempGPRS,",");
 8009c2a:	4ab0      	ldr	r2, [pc, #704]	; (8009eec <GSM_Service+0xa50>)
 8009c2c:	4bb3      	ldr	r3, [pc, #716]	; (8009efc <GSM_Service+0xa60>)
 8009c2e:	0010      	movs	r0, r2
 8009c30:	0019      	movs	r1, r3
 8009c32:	2302      	movs	r3, #2
 8009c34:	001a      	movs	r2, r3
 8009c36:	f007 ff61 	bl	8011afc <memcpy>
				strcat(tempGPRS,"password:");
 8009c3a:	4bac      	ldr	r3, [pc, #688]	; (8009eec <GSM_Service+0xa50>)
 8009c3c:	0018      	movs	r0, r3
 8009c3e:	f7ff fa6d 	bl	800911c <strlen>
 8009c42:	0003      	movs	r3, r0
 8009c44:	001a      	movs	r2, r3
 8009c46:	4ba9      	ldr	r3, [pc, #676]	; (8009eec <GSM_Service+0xa50>)
 8009c48:	18d2      	adds	r2, r2, r3
 8009c4a:	4baf      	ldr	r3, [pc, #700]	; (8009f08 <GSM_Service+0xa6c>)
 8009c4c:	0010      	movs	r0, r2
 8009c4e:	0019      	movs	r1, r3
 8009c50:	230a      	movs	r3, #10
 8009c52:	001a      	movs	r2, r3
 8009c54:	f007 ff52 	bl	8011afc <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.password);
 8009c58:	4aac      	ldr	r2, [pc, #688]	; (8009f0c <GSM_Service+0xa70>)
 8009c5a:	4ba4      	ldr	r3, [pc, #656]	; (8009eec <GSM_Service+0xa50>)
 8009c5c:	0011      	movs	r1, r2
 8009c5e:	0018      	movs	r0, r3
 8009c60:	f007 ff7e 	bl	8011b60 <strcat>
				//sendData(tempGPRS,UART0);
				GPRS_SendData(tempGPRS);
 8009c64:	4ba1      	ldr	r3, [pc, #644]	; (8009eec <GSM_Service+0xa50>)
 8009c66:	0018      	movs	r0, r3
 8009c68:	f001 ff6e 	bl	800bb48 <GPRS_SendData>
			}
			if (gsmInfo.relayFlag == 1){
 8009c6c:	4aa2      	ldr	r2, [pc, #648]	; (8009ef8 <GSM_Service+0xa5c>)
 8009c6e:	238c      	movs	r3, #140	; 0x8c
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	58d3      	ldr	r3, [r2, r3]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d11f      	bne.n	8009cb8 <GSM_Service+0x81c>
				gsmInfo.relayFlag = 0;
 8009c78:	4a9f      	ldr	r2, [pc, #636]	; (8009ef8 <GSM_Service+0xa5c>)
 8009c7a:	238c      	movs	r3, #140	; 0x8c
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	2100      	movs	r1, #0
 8009c80:	50d1      	str	r1, [r2, r3]
				strcpy(tempGPRS,",");
 8009c82:	4a9a      	ldr	r2, [pc, #616]	; (8009eec <GSM_Service+0xa50>)
 8009c84:	4b9d      	ldr	r3, [pc, #628]	; (8009efc <GSM_Service+0xa60>)
 8009c86:	0010      	movs	r0, r2
 8009c88:	0019      	movs	r1, r3
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	001a      	movs	r2, r3
 8009c8e:	f007 ff35 	bl	8011afc <memcpy>
				strcat(tempGPRS,"relay:");
 8009c92:	4b96      	ldr	r3, [pc, #600]	; (8009eec <GSM_Service+0xa50>)
 8009c94:	0018      	movs	r0, r3
 8009c96:	f7ff fa41 	bl	800911c <strlen>
 8009c9a:	0003      	movs	r3, r0
 8009c9c:	001a      	movs	r2, r3
 8009c9e:	4b93      	ldr	r3, [pc, #588]	; (8009eec <GSM_Service+0xa50>)
 8009ca0:	18d2      	adds	r2, r2, r3
 8009ca2:	4b9b      	ldr	r3, [pc, #620]	; (8009f10 <GSM_Service+0xa74>)
 8009ca4:	0010      	movs	r0, r2
 8009ca6:	0019      	movs	r1, r3
 8009ca8:	2307      	movs	r3, #7
 8009caa:	001a      	movs	r2, r3
 8009cac:	f007 ff26 	bl	8011afc <memcpy>
				//if (RELAY == 1) strcat(tempGPRS,"ON");
				//else strcat(tempGPRS,"OFF");
				GPRS_SendData(tempGPRS);
 8009cb0:	4b8e      	ldr	r3, [pc, #568]	; (8009eec <GSM_Service+0xa50>)
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	f001 ff48 	bl	800bb48 <GPRS_SendData>
			}
			if (gsmInfo.vthFlag == 1){
 8009cb8:	4a8f      	ldr	r2, [pc, #572]	; (8009ef8 <GSM_Service+0xa5c>)
 8009cba:	238a      	movs	r3, #138	; 0x8a
 8009cbc:	005b      	lsls	r3, r3, #1
 8009cbe:	58d3      	ldr	r3, [r2, r3]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d125      	bne.n	8009d10 <GSM_Service+0x874>
				gsmInfo.vthFlag = 0;
 8009cc4:	4a8c      	ldr	r2, [pc, #560]	; (8009ef8 <GSM_Service+0xa5c>)
 8009cc6:	238a      	movs	r3, #138	; 0x8a
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	2100      	movs	r1, #0
 8009ccc:	50d1      	str	r1, [r2, r3]
				strcpy(tempGPRS,",");
 8009cce:	4a87      	ldr	r2, [pc, #540]	; (8009eec <GSM_Service+0xa50>)
 8009cd0:	4b8a      	ldr	r3, [pc, #552]	; (8009efc <GSM_Service+0xa60>)
 8009cd2:	0010      	movs	r0, r2
 8009cd4:	0019      	movs	r1, r3
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	001a      	movs	r2, r3
 8009cda:	f007 ff0f 	bl	8011afc <memcpy>
				strcat(tempGPRS,"vth:");
 8009cde:	4b83      	ldr	r3, [pc, #524]	; (8009eec <GSM_Service+0xa50>)
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f7ff fa1b 	bl	800911c <strlen>
 8009ce6:	0003      	movs	r3, r0
 8009ce8:	001a      	movs	r2, r3
 8009cea:	4b80      	ldr	r3, [pc, #512]	; (8009eec <GSM_Service+0xa50>)
 8009cec:	18d2      	adds	r2, r2, r3
 8009cee:	4b89      	ldr	r3, [pc, #548]	; (8009f14 <GSM_Service+0xa78>)
 8009cf0:	0010      	movs	r0, r2
 8009cf2:	0019      	movs	r1, r3
 8009cf4:	2305      	movs	r3, #5
 8009cf6:	001a      	movs	r2, r3
 8009cf8:	f007 ff00 	bl	8011afc <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.vth);
 8009cfc:	4a86      	ldr	r2, [pc, #536]	; (8009f18 <GSM_Service+0xa7c>)
 8009cfe:	4b7b      	ldr	r3, [pc, #492]	; (8009eec <GSM_Service+0xa50>)
 8009d00:	0011      	movs	r1, r2
 8009d02:	0018      	movs	r0, r3
 8009d04:	f007 ff2c 	bl	8011b60 <strcat>
				GPRS_SendData(tempGPRS);
 8009d08:	4b78      	ldr	r3, [pc, #480]	; (8009eec <GSM_Service+0xa50>)
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f001 ff1c 	bl	800bb48 <GPRS_SendData>
			}
			if (gsmInfo.ccidFlag == 1){
 8009d10:	4a79      	ldr	r2, [pc, #484]	; (8009ef8 <GSM_Service+0xa5c>)
 8009d12:	238e      	movs	r3, #142	; 0x8e
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	58d3      	ldr	r3, [r2, r3]
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d125      	bne.n	8009d68 <GSM_Service+0x8cc>
				gsmInfo.ccidFlag = 0;
 8009d1c:	4a76      	ldr	r2, [pc, #472]	; (8009ef8 <GSM_Service+0xa5c>)
 8009d1e:	238e      	movs	r3, #142	; 0x8e
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	2100      	movs	r1, #0
 8009d24:	50d1      	str	r1, [r2, r3]
				strcpy(tempGPRS,",");
 8009d26:	4a71      	ldr	r2, [pc, #452]	; (8009eec <GSM_Service+0xa50>)
 8009d28:	4b74      	ldr	r3, [pc, #464]	; (8009efc <GSM_Service+0xa60>)
 8009d2a:	0010      	movs	r0, r2
 8009d2c:	0019      	movs	r1, r3
 8009d2e:	2302      	movs	r3, #2
 8009d30:	001a      	movs	r2, r3
 8009d32:	f007 fee3 	bl	8011afc <memcpy>
				strcat(tempGPRS,"ccid:");
 8009d36:	4b6d      	ldr	r3, [pc, #436]	; (8009eec <GSM_Service+0xa50>)
 8009d38:	0018      	movs	r0, r3
 8009d3a:	f7ff f9ef 	bl	800911c <strlen>
 8009d3e:	0003      	movs	r3, r0
 8009d40:	001a      	movs	r2, r3
 8009d42:	4b6a      	ldr	r3, [pc, #424]	; (8009eec <GSM_Service+0xa50>)
 8009d44:	18d2      	adds	r2, r2, r3
 8009d46:	4b75      	ldr	r3, [pc, #468]	; (8009f1c <GSM_Service+0xa80>)
 8009d48:	0010      	movs	r0, r2
 8009d4a:	0019      	movs	r1, r3
 8009d4c:	2306      	movs	r3, #6
 8009d4e:	001a      	movs	r2, r3
 8009d50:	f007 fed4 	bl	8011afc <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.ccid);
 8009d54:	4a72      	ldr	r2, [pc, #456]	; (8009f20 <GSM_Service+0xa84>)
 8009d56:	4b65      	ldr	r3, [pc, #404]	; (8009eec <GSM_Service+0xa50>)
 8009d58:	0011      	movs	r1, r2
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f007 ff00 	bl	8011b60 <strcat>
				GPRS_SendData(tempGPRS);
 8009d60:	4b62      	ldr	r3, [pc, #392]	; (8009eec <GSM_Service+0xa50>)
 8009d62:	0018      	movs	r0, r3
 8009d64:	f001 fef0 	bl	800bb48 <GPRS_SendData>
			}
			strcat(tempGPRS,"\32\r");
 8009d68:	4b60      	ldr	r3, [pc, #384]	; (8009eec <GSM_Service+0xa50>)
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f7ff f9d6 	bl	800911c <strlen>
 8009d70:	0003      	movs	r3, r0
 8009d72:	001a      	movs	r2, r3
 8009d74:	4b5d      	ldr	r3, [pc, #372]	; (8009eec <GSM_Service+0xa50>)
 8009d76:	18d2      	adds	r2, r2, r3
 8009d78:	4b6a      	ldr	r3, [pc, #424]	; (8009f24 <GSM_Service+0xa88>)
 8009d7a:	0010      	movs	r0, r2
 8009d7c:	0019      	movs	r1, r3
 8009d7e:	2303      	movs	r3, #3
 8009d80:	001a      	movs	r2, r3
 8009d82:	f007 febb 	bl	8011afc <memcpy>
			//GSM_Send(tempGPRS);
			GSM_Send(tempGPRS);
 8009d86:	4b59      	ldr	r3, [pc, #356]	; (8009eec <GSM_Service+0xa50>)
 8009d88:	0018      	movs	r0, r3
 8009d8a:	f000 fbd9 	bl	800a540 <GSM_Send>
 8009d8e:	e01e      	b.n	8009dce <GSM_Service+0x932>
		}
		else{
			//connect("test2");
			//connect1("test2",temp);
			gsmInfo.MQTT_Data = 1;
 8009d90:	4a59      	ldr	r2, [pc, #356]	; (8009ef8 <GSM_Service+0xa5c>)
 8009d92:	23c0      	movs	r3, #192	; 0xc0
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	2101      	movs	r1, #1
 8009d98:	50d1      	str	r1, [r2, r3]
			switch(mqttState){
 8009d9a:	4b63      	ldr	r3, [pc, #396]	; (8009f28 <GSM_Service+0xa8c>)
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	d014      	beq.n	8009dcc <GSM_Service+0x930>
 8009da2:	dc14      	bgt.n	8009dce <GSM_Service+0x932>
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d00e      	beq.n	8009dc6 <GSM_Service+0x92a>
 8009da8:	dc11      	bgt.n	8009dce <GSM_Service+0x932>
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d002      	beq.n	8009db4 <GSM_Service+0x918>
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d006      	beq.n	8009dc0 <GSM_Service+0x924>
 8009db2:	e00c      	b.n	8009dce <GSM_Service+0x932>
			case Connect:
				MQTT_ConnectF();
 8009db4:	f000 fb12 	bl	800a3dc <MQTT_ConnectF>

				mqttCounter = 0;
 8009db8:	4b5c      	ldr	r3, [pc, #368]	; (8009f2c <GSM_Service+0xa90>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	601a      	str	r2, [r3, #0]
				//mqttState++;
				break;
 8009dbe:	e006      	b.n	8009dce <GSM_Service+0x932>
			case Subscribe:
				MQTT_SuscribeF();
 8009dc0:	f000 fb4e 	bl	800a460 <MQTT_SuscribeF>
				break;
 8009dc4:	e003      	b.n	8009dce <GSM_Service+0x932>
			case Publish:
				MQTT_Publish_F();
 8009dc6:	f000 fb85 	bl	800a4d4 <MQTT_Publish_F>

				break;
 8009dca:	e000      	b.n	8009dce <GSM_Service+0x932>
			case Unsubscribe:


				break;
 8009dcc:	46c0      	nop			; (mov r8, r8)

			//GSM_Send("MQTT\r\n");
		}

		//GSM_Send("\032\r");
		gsmState = 0;
 8009dce:	4b58      	ldr	r3, [pc, #352]	; (8009f30 <GSM_Service+0xa94>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	701a      	strb	r2, [r3, #0]
		GSM_Send("\"\r\n");
		gsmState = GPRS_Send;*/
		//sprintf (tempGPRS,"GPRS Write:GSM state-%d\r\n", gsmState);
		//sendData(tempGPRS,UART0);
		//sendData("-gprs\r\n",UART0);
		break;
 8009dd4:	e1fd      	b.n	800a1d2 <GSM_Service+0xd36>
	case AT:
		Debug_Send("Get MQTT data\n");
 8009dd6:	4b57      	ldr	r3, [pc, #348]	; (8009f34 <GSM_Service+0xa98>)
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f000 fc03 	bl	800a5e4 <Debug_Send>
		GSM_Send("AT\r");
 8009dde:	4b56      	ldr	r3, [pc, #344]	; (8009f38 <GSM_Service+0xa9c>)
 8009de0:	0018      	movs	r0, r3
 8009de2:	f000 fbad 	bl	800a540 <GSM_Send>
		gsmState = 0;
 8009de6:	4b52      	ldr	r3, [pc, #328]	; (8009f30 <GSM_Service+0xa94>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	701a      	strb	r2, [r3, #0]
		break;
 8009dec:	e1f1      	b.n	800a1d2 <GSM_Service+0xd36>
	case GPRS_Send:
		//GSM_Send("AT+MIPPUSH=1\r\n");	//listen for incoming connections
		GSM_Send("AT+QISEND\r");
 8009dee:	4b53      	ldr	r3, [pc, #332]	; (8009f3c <GSM_Service+0xaa0>)
 8009df0:	0018      	movs	r0, r3
 8009df2:	f000 fba5 	bl	800a540 <GSM_Send>
		//Debug_Send("Push GPRS data!\n");
		/*GSM_Send(tempGPRS);
		GSM_Send("\032\r");*/
		gsmInfo.dataFlag = 0;
 8009df6:	4a40      	ldr	r2, [pc, #256]	; (8009ef8 <GSM_Service+0xa5c>)
 8009df8:	23aa      	movs	r3, #170	; 0xaa
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	50d1      	str	r1, [r2, r3]
		gsmState = 0;
 8009e00:	4b4b      	ldr	r3, [pc, #300]	; (8009f30 <GSM_Service+0xa94>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	701a      	strb	r2, [r3, #0]
		break;
 8009e06:	e1e4      	b.n	800a1d2 <GSM_Service+0xd36>
	case GPRS_SendMode:
		GSM_Send("AT+ATO\r");
 8009e08:	4b4d      	ldr	r3, [pc, #308]	; (8009f40 <GSM_Service+0xaa4>)
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f000 fb98 	bl	800a540 <GSM_Send>

		break;
 8009e10:	e1df      	b.n	800a1d2 <GSM_Service+0xd36>
	case GPRS_SendModeTRans:
		GSM_Send("test\r");
 8009e12:	4b4c      	ldr	r3, [pc, #304]	; (8009f44 <GSM_Service+0xaa8>)
 8009e14:	0018      	movs	r0, r3
 8009e16:	f000 fb93 	bl	800a540 <GSM_Send>

		break;
 8009e1a:	e1da      	b.n	800a1d2 <GSM_Service+0xd36>
	case AutoBaud:
		Debug_Send("Auto baud\r\n");
 8009e1c:	4b4a      	ldr	r3, [pc, #296]	; (8009f48 <GSM_Service+0xaac>)
 8009e1e:	0018      	movs	r0, r3
 8009e20:	f000 fbe0 	bl	800a5e4 <Debug_Send>
		GSM_Send("AT\r\n");
 8009e24:	4b49      	ldr	r3, [pc, #292]	; (8009f4c <GSM_Service+0xab0>)
 8009e26:	0018      	movs	r0, r3
 8009e28:	f000 fb8a 	bl	800a540 <GSM_Send>

		break;
 8009e2c:	e1d1      	b.n	800a1d2 <GSM_Service+0xd36>
			gsmState = Search;
			GSM_ON = 0;
		}
		break;*/
	case FTP_User:
		Debug_Send("Set FTP user\r\n");
 8009e2e:	4b48      	ldr	r3, [pc, #288]	; (8009f50 <GSM_Service+0xab4>)
 8009e30:	0018      	movs	r0, r3
 8009e32:	f000 fbd7 	bl	800a5e4 <Debug_Send>
		GSM_Send("AT+QFTPUSER=\"testuser\"\r\n");
 8009e36:	4b47      	ldr	r3, [pc, #284]	; (8009f54 <GSM_Service+0xab8>)
 8009e38:	0018      	movs	r0, r3
 8009e3a:	f000 fb81 	bl	800a540 <GSM_Send>
		gsmState = FTP_Password;
 8009e3e:	4b3c      	ldr	r3, [pc, #240]	; (8009f30 <GSM_Service+0xa94>)
 8009e40:	2223      	movs	r2, #35	; 0x23
 8009e42:	701a      	strb	r2, [r3, #0]

		break;
 8009e44:	e1c5      	b.n	800a1d2 <GSM_Service+0xd36>
	case FTP_Password:
		Debug_Send("Set FTP password\r\n");
 8009e46:	4b44      	ldr	r3, [pc, #272]	; (8009f58 <GSM_Service+0xabc>)
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f000 fbcb 	bl	800a5e4 <Debug_Send>
		GSM_Send("AT+QFTPPASS=\"admin\"\r\n");
 8009e4e:	4b43      	ldr	r3, [pc, #268]	; (8009f5c <GSM_Service+0xac0>)
 8009e50:	0018      	movs	r0, r3
 8009e52:	f000 fb75 	bl	800a540 <GSM_Send>
		gsmState = FTP_Config;
 8009e56:	4b36      	ldr	r3, [pc, #216]	; (8009f30 <GSM_Service+0xa94>)
 8009e58:	222a      	movs	r2, #42	; 0x2a
 8009e5a:	701a      	strb	r2, [r3, #0]
		//sendSMS("0720631005", "test SIM IMC");
		gsmState = 0;
 8009e5c:	4b34      	ldr	r3, [pc, #208]	; (8009f30 <GSM_Service+0xa94>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	701a      	strb	r2, [r3, #0]
		//gsmState = SMS_Send;
		break;
 8009e62:	e1b6      	b.n	800a1d2 <GSM_Service+0xd36>
	case FTP_Config:
		Debug_Send("FTP config\r\n");
 8009e64:	4b3e      	ldr	r3, [pc, #248]	; (8009f60 <GSM_Service+0xac4>)
 8009e66:	0018      	movs	r0, r3
 8009e68:	f000 fbbc 	bl	800a5e4 <Debug_Send>
		//GSM_Send("AT+QFTPCFG=4,\"/COM/\"\r\n");
		GSM_Send("AT+QFTPCFG=4,\"/RAM/\"\r\n");
 8009e6c:	4b3d      	ldr	r3, [pc, #244]	; (8009f64 <GSM_Service+0xac8>)
 8009e6e:	0018      	movs	r0, r3
 8009e70:	f000 fb66 	bl	800a540 <GSM_Send>
		//GSM_Send("AT+QFTPCFG=3\r\n");
		gsmState = 0;
 8009e74:	4b2e      	ldr	r3, [pc, #184]	; (8009f30 <GSM_Service+0xa94>)
 8009e76:	2200      	movs	r2, #0
 8009e78:	701a      	strb	r2, [r3, #0]
		break;
 8009e7a:	e1aa      	b.n	800a1d2 <GSM_Service+0xd36>
	case FTP_Open:
		Debug_Send("FTP open\r\n");
 8009e7c:	4b3a      	ldr	r3, [pc, #232]	; (8009f68 <GSM_Service+0xacc>)
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f000 fbb0 	bl	800a5e4 <Debug_Send>
		GSM_Send("AT+QFTPOPEN=\"196.40.108.169\",\"21\"\r\n");
 8009e84:	4b39      	ldr	r3, [pc, #228]	; (8009f6c <GSM_Service+0xad0>)
 8009e86:	0018      	movs	r0, r3
 8009e88:	f000 fb5a 	bl	800a540 <GSM_Send>
		gsmInfo.FTP_Open = 1;
 8009e8c:	4a1a      	ldr	r2, [pc, #104]	; (8009ef8 <GSM_Service+0xa5c>)
 8009e8e:	23b2      	movs	r3, #178	; 0xb2
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	2101      	movs	r1, #1
 8009e94:	50d1      	str	r1, [r2, r3]
		gsmState = FTP_Status;
 8009e96:	4b26      	ldr	r3, [pc, #152]	; (8009f30 <GSM_Service+0xa94>)
 8009e98:	2225      	movs	r2, #37	; 0x25
 8009e9a:	701a      	strb	r2, [r3, #0]
		//gsmState = 0;
		break;
 8009e9c:	e199      	b.n	800a1d2 <GSM_Service+0xd36>
	case FTP_Status:
		Debug_Send("FTP status\r\n");
 8009e9e:	4b34      	ldr	r3, [pc, #208]	; (8009f70 <GSM_Service+0xad4>)
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	f000 fb9f 	bl	800a5e4 <Debug_Send>
		GSM_Send("AT+QFTPSTAT\r\n");
 8009ea6:	4b33      	ldr	r3, [pc, #204]	; (8009f74 <GSM_Service+0xad8>)
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f000 fb49 	bl	800a540 <GSM_Send>
		gsmState = 0;
 8009eae:	4b20      	ldr	r3, [pc, #128]	; (8009f30 <GSM_Service+0xa94>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	701a      	strb	r2, [r3, #0]
		break;
 8009eb4:	e18d      	b.n	800a1d2 <GSM_Service+0xd36>
	case FTP_Path:
		Debug_Send("FTP path\r\n");
 8009eb6:	4b30      	ldr	r3, [pc, #192]	; (8009f78 <GSM_Service+0xadc>)
 8009eb8:	0018      	movs	r0, r3
 8009eba:	f000 fb93 	bl	800a5e4 <Debug_Send>
		GSM_Send("AT+QFTPPATH=\"/srv/ftp/\"\r\n");
 8009ebe:	4b2f      	ldr	r3, [pc, #188]	; (8009f7c <GSM_Service+0xae0>)
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	f000 fb3d 	bl	800a540 <GSM_Send>
		gsmState = FTP_List;
 8009ec6:	4b1a      	ldr	r3, [pc, #104]	; (8009f30 <GSM_Service+0xa94>)
 8009ec8:	2229      	movs	r2, #41	; 0x29
 8009eca:	701a      	strb	r2, [r3, #0]
		gsmState = FTP_Config;
 8009ecc:	4b18      	ldr	r3, [pc, #96]	; (8009f30 <GSM_Service+0xa94>)
 8009ece:	222a      	movs	r2, #42	; 0x2a
 8009ed0:	701a      	strb	r2, [r3, #0]
		break;
 8009ed2:	e17e      	b.n	800a1d2 <GSM_Service+0xd36>
	case FTP_List:
		Debug_Send("FTP list\r\n");
 8009ed4:	4b2a      	ldr	r3, [pc, #168]	; (8009f80 <GSM_Service+0xae4>)
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f000 fb84 	bl	800a5e4 <Debug_Send>
		GSM_Send("AT+QFTPNLST\r\n");
 8009edc:	4b29      	ldr	r3, [pc, #164]	; (8009f84 <GSM_Service+0xae8>)
 8009ede:	0018      	movs	r0, r3
 8009ee0:	f000 fb2e 	bl	800a540 <GSM_Send>
		gsmState = 0;
 8009ee4:	4b12      	ldr	r3, [pc, #72]	; (8009f30 <GSM_Service+0xa94>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	701a      	strb	r2, [r3, #0]
		break;
 8009eea:	e172      	b.n	800a1d2 <GSM_Service+0xd36>
 8009eec:	200014a0 	.word	0x200014a0
 8009ef0:	08012788 	.word	0x08012788
 8009ef4:	200017b4 	.word	0x200017b4
 8009ef8:	20001720 	.word	0x20001720
 8009efc:	0801255c 	.word	0x0801255c
 8009f00:	08012790 	.word	0x08012790
 8009f04:	200017d2 	.word	0x200017d2
 8009f08:	08012798 	.word	0x08012798
 8009f0c:	200017e6 	.word	0x200017e6
 8009f10:	080127a4 	.word	0x080127a4
 8009f14:	080127ac 	.word	0x080127ac
 8009f18:	20001824 	.word	0x20001824
 8009f1c:	080127b4 	.word	0x080127b4
 8009f20:	2000176c 	.word	0x2000176c
 8009f24:	080126ac 	.word	0x080126ac
 8009f28:	200000d0 	.word	0x200000d0
 8009f2c:	20001568 	.word	0x20001568
 8009f30:	200000c0 	.word	0x200000c0
 8009f34:	080127bc 	.word	0x080127bc
 8009f38:	080127cc 	.word	0x080127cc
 8009f3c:	080127d0 	.word	0x080127d0
 8009f40:	080127dc 	.word	0x080127dc
 8009f44:	080127e4 	.word	0x080127e4
 8009f48:	080127ec 	.word	0x080127ec
 8009f4c:	080127f8 	.word	0x080127f8
 8009f50:	08012800 	.word	0x08012800
 8009f54:	08012810 	.word	0x08012810
 8009f58:	0801282c 	.word	0x0801282c
 8009f5c:	08012840 	.word	0x08012840
 8009f60:	08012858 	.word	0x08012858
 8009f64:	08012868 	.word	0x08012868
 8009f68:	08012880 	.word	0x08012880
 8009f6c:	0801288c 	.word	0x0801288c
 8009f70:	080128b0 	.word	0x080128b0
 8009f74:	080128c0 	.word	0x080128c0
 8009f78:	080128d0 	.word	0x080128d0
 8009f7c:	080128dc 	.word	0x080128dc
 8009f80:	080128f8 	.word	0x080128f8
 8009f84:	08012904 	.word	0x08012904
	case FTP_Size:
		Debug_Send("FTP size\r\n");
 8009f88:	4bc6      	ldr	r3, [pc, #792]	; (800a2a4 <GSM_Service+0xe08>)
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f000 fb2a 	bl	800a5e4 <Debug_Send>
		//GSM_Send("AT+QFTPSIZE=\"/srv/ftp/Test.csv\"\r\n");
		//GSM_Send("AT+QFTPSIZE=\"/srv/ftp/GSM_Test.bin\"\r\n");
		GSM_Send("AT+QFTPSIZE=\"/srv/ftp/M0_Test.hex\"\r\n");
 8009f90:	4bc5      	ldr	r3, [pc, #788]	; (800a2a8 <GSM_Service+0xe0c>)
 8009f92:	0018      	movs	r0, r3
 8009f94:	f000 fad4 	bl	800a540 <GSM_Send>
		gsmState = 0;
 8009f98:	4bc4      	ldr	r3, [pc, #784]	; (800a2ac <GSM_Service+0xe10>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
		break;
 8009f9e:	e118      	b.n	800a1d2 <GSM_Service+0xd36>
	case FTP_Download:
		Debug_Send("Get FTP\r\n");
 8009fa0:	4bc3      	ldr	r3, [pc, #780]	; (800a2b0 <GSM_Service+0xe14>)
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f000 fb1e 	bl	800a5e4 <Debug_Send>
		//GSM_Send("AT+QFTPGET=\"Test.csv\"\r\n");
		//GSM_Send("AT+QFTPGET=\"/srv/ftp/GSM_Test.bin\",50000\r\n");
		//GSM_Send("AT+QFTPGET=\"GSM_Test.bin\"\r\n");
		//GSM_Send("AT+QFTPGET=\"M0_Test.hex\"\r\n");
		GSM_Send("AT+QFTPGET=\"M0_Test-B611.hex\"\r\n");
 8009fa8:	4bc2      	ldr	r3, [pc, #776]	; (800a2b4 <GSM_Service+0xe18>)
 8009faa:	0018      	movs	r0, r3
 8009fac:	f000 fac8 	bl	800a540 <GSM_Send>
		gsmState = FS_Storage;
 8009fb0:	4bbe      	ldr	r3, [pc, #760]	; (800a2ac <GSM_Service+0xe10>)
 8009fb2:	222c      	movs	r2, #44	; 0x2c
 8009fb4:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 8009fb6:	4bbd      	ldr	r3, [pc, #756]	; (800a2ac <GSM_Service+0xe10>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	701a      	strb	r2, [r3, #0]
		break;
 8009fbc:	e109      	b.n	800a1d2 <GSM_Service+0xd36>
	case FTP_Close:
		Debug_Send("FTP close\r\n");
 8009fbe:	4bbe      	ldr	r3, [pc, #760]	; (800a2b8 <GSM_Service+0xe1c>)
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f000 fb0f 	bl	800a5e4 <Debug_Send>
		GSM_Send("AT+QFTPCLOSE\r\n");
 8009fc6:	4bbd      	ldr	r3, [pc, #756]	; (800a2bc <GSM_Service+0xe20>)
 8009fc8:	0018      	movs	r0, r3
 8009fca:	f000 fab9 	bl	800a540 <GSM_Send>
		//Debug_Send("Jump to bootloader\r\n");
		gsmState = 0;
 8009fce:	4bb7      	ldr	r3, [pc, #732]	; (800a2ac <GSM_Service+0xe10>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	701a      	strb	r2, [r3, #0]
		//NVIC_SystemReset();
		/*uint32_t addr = *(uint32_t*) (resetAddr + 4);	//get PC location
		resetFunc = (fPointer) addr;
		__set_MSP(*(uint32_t*) resetAddr);
		resetFunc();*/
		break;
 8009fd4:	e0fd      	b.n	800a1d2 <GSM_Service+0xd36>
	case FS_Storage:

		GSM_Send("AT+QFLDS=\"RAM\"\r\n");
 8009fd6:	4bba      	ldr	r3, [pc, #744]	; (800a2c0 <GSM_Service+0xe24>)
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f000 fab1 	bl	800a540 <GSM_Send>
		gsmState = 0;
 8009fde:	4bb3      	ldr	r3, [pc, #716]	; (800a2ac <GSM_Service+0xe10>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	701a      	strb	r2, [r3, #0]
		break;
 8009fe4:	e0f5      	b.n	800a1d2 <GSM_Service+0xd36>
	case FS_SList:

		GSM_Send("AT+QFLST=\"RAM:*\"\r\n");
 8009fe6:	4bb7      	ldr	r3, [pc, #732]	; (800a2c4 <GSM_Service+0xe28>)
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f000 faa9 	bl	800a540 <GSM_Send>
		gsmState = 0;
 8009fee:	4baf      	ldr	r3, [pc, #700]	; (800a2ac <GSM_Service+0xe10>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	701a      	strb	r2, [r3, #0]
		break;
 8009ff4:	e0ed      	b.n	800a1d2 <GSM_Service+0xd36>
	case FS_Download:
		//GSM_Send("AT+QFDWL=\"RAM:Test.csv\"\r\n");
		GSM_Send("AT+QFDWL=\"RAM:M0_Test.bin\"\r\n");
 8009ff6:	4bb4      	ldr	r3, [pc, #720]	; (800a2c8 <GSM_Service+0xe2c>)
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	f000 faa1 	bl	800a540 <GSM_Send>
		gsmState = 0;
 8009ffe:	4bab      	ldr	r3, [pc, #684]	; (800a2ac <GSM_Service+0xe10>)
 800a000:	2200      	movs	r2, #0
 800a002:	701a      	strb	r2, [r3, #0]
		break;
 800a004:	e0e5      	b.n	800a1d2 <GSM_Service+0xd36>
	case FS_Open:
		//GSM_Send("AT+QFOPEN=\"RAM:Test.csv\",0\r\n");
		//GSM_Send("AT+QFOPEN=\"RAM:M0_Test.hex\",0\r\n");
		GSM_Send("AT+QFOPEN=\"RAM:M0_Test-B611.hex\",0\r\n");
 800a006:	4bb1      	ldr	r3, [pc, #708]	; (800a2cc <GSM_Service+0xe30>)
 800a008:	0018      	movs	r0, r3
 800a00a:	f000 fa99 	bl	800a540 <GSM_Send>
		gsmState = 0;
 800a00e:	4ba7      	ldr	r3, [pc, #668]	; (800a2ac <GSM_Service+0xe10>)
 800a010:	2200      	movs	r2, #0
 800a012:	701a      	strb	r2, [r3, #0]
		break;
 800a014:	e0dd      	b.n	800a1d2 <GSM_Service+0xd36>
	case FS_Seek:
		Debug_Send("Seek file\r\n");
 800a016:	4bae      	ldr	r3, [pc, #696]	; (800a2d0 <GSM_Service+0xe34>)
 800a018:	0018      	movs	r0, r3
 800a01a:	f000 fae3 	bl	800a5e4 <Debug_Send>
		//Debug_Send("AT+QFSEEK=");
		//Debug_Send(FID);
		//Debug_Send(",0,0\r\n");
		strcpy(temp,"AT+QFSEEK=");
 800a01e:	003b      	movs	r3, r7
 800a020:	4aac      	ldr	r2, [pc, #688]	; (800a2d4 <GSM_Service+0xe38>)
 800a022:	ca03      	ldmia	r2!, {r0, r1}
 800a024:	c303      	stmia	r3!, {r0, r1}
 800a026:	8811      	ldrh	r1, [r2, #0]
 800a028:	8019      	strh	r1, [r3, #0]
 800a02a:	7892      	ldrb	r2, [r2, #2]
 800a02c:	709a      	strb	r2, [r3, #2]
		strcat(temp,FID);
 800a02e:	4aaa      	ldr	r2, [pc, #680]	; (800a2d8 <GSM_Service+0xe3c>)
 800a030:	003b      	movs	r3, r7
 800a032:	0011      	movs	r1, r2
 800a034:	0018      	movs	r0, r3
 800a036:	f007 fd93 	bl	8011b60 <strcat>
		strcat(temp,",");
 800a03a:	003b      	movs	r3, r7
 800a03c:	0018      	movs	r0, r3
 800a03e:	f7ff f86d 	bl	800911c <strlen>
 800a042:	0003      	movs	r3, r0
 800a044:	001a      	movs	r2, r3
 800a046:	003b      	movs	r3, r7
 800a048:	189a      	adds	r2, r3, r2
 800a04a:	4ba4      	ldr	r3, [pc, #656]	; (800a2dc <GSM_Service+0xe40>)
 800a04c:	0010      	movs	r0, r2
 800a04e:	0019      	movs	r1, r3
 800a050:	2302      	movs	r3, #2
 800a052:	001a      	movs	r2, r3
 800a054:	f007 fd52 	bl	8011afc <memcpy>
		myLongStr((long)ftpseek,temp1,11,10);
 800a058:	4ba1      	ldr	r3, [pc, #644]	; (800a2e0 <GSM_Service+0xe44>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	0018      	movs	r0, r3
 800a05e:	49a1      	ldr	r1, [pc, #644]	; (800a2e4 <GSM_Service+0xe48>)
 800a060:	230a      	movs	r3, #10
 800a062:	220b      	movs	r2, #11
 800a064:	f002 fd0e 	bl	800ca84 <myLongStr>
		strcat(temp,temp1);
 800a068:	4a9e      	ldr	r2, [pc, #632]	; (800a2e4 <GSM_Service+0xe48>)
 800a06a:	003b      	movs	r3, r7
 800a06c:	0011      	movs	r1, r2
 800a06e:	0018      	movs	r0, r3
 800a070:	f007 fd76 	bl	8011b60 <strcat>
		//strcat(temp,",0\r\n");

		strcat(temp,"\r\n");
 800a074:	003b      	movs	r3, r7
 800a076:	0018      	movs	r0, r3
 800a078:	f7ff f850 	bl	800911c <strlen>
 800a07c:	0003      	movs	r3, r0
 800a07e:	001a      	movs	r2, r3
 800a080:	003b      	movs	r3, r7
 800a082:	189a      	adds	r2, r3, r2
 800a084:	4b98      	ldr	r3, [pc, #608]	; (800a2e8 <GSM_Service+0xe4c>)
 800a086:	0010      	movs	r0, r2
 800a088:	0019      	movs	r1, r3
 800a08a:	2303      	movs	r3, #3
 800a08c:	001a      	movs	r2, r3
 800a08e:	f007 fd35 	bl	8011afc <memcpy>
		//sprintf(temp, "AT+QFSEEK=%s,%i\r\n",FID,(int)ftpseek);
		//Debug_Send(temp);
		GSM_Send(temp);
 800a092:	003b      	movs	r3, r7
 800a094:	0018      	movs	r0, r3
 800a096:	f000 fa53 	bl	800a540 <GSM_Send>
		/*GSM_Send("AT+QFSEEK=");
		GSM_Send(FID);
		GSM_Send(",0\r\n");*/
		gsmInfo.FS_SeekFlag = 1;
 800a09a:	4a94      	ldr	r2, [pc, #592]	; (800a2ec <GSM_Service+0xe50>)
 800a09c:	23b4      	movs	r3, #180	; 0xb4
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	50d1      	str	r1, [r2, r3]
		gsmState = 0;
 800a0a4:	4b81      	ldr	r3, [pc, #516]	; (800a2ac <GSM_Service+0xe10>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	701a      	strb	r2, [r3, #0]
		break;
 800a0aa:	e092      	b.n	800a1d2 <GSM_Service+0xd36>
	case FS_Read:
		//Debug_Send("Read file\r\n");
		//GSM_Send("AT+QFREAD=");
		//GSM_Send(FID);
		strcpy(temp,"AT+QFREAD=");
 800a0ac:	003b      	movs	r3, r7
 800a0ae:	4a90      	ldr	r2, [pc, #576]	; (800a2f0 <GSM_Service+0xe54>)
 800a0b0:	ca03      	ldmia	r2!, {r0, r1}
 800a0b2:	c303      	stmia	r3!, {r0, r1}
 800a0b4:	8811      	ldrh	r1, [r2, #0]
 800a0b6:	8019      	strh	r1, [r3, #0]
 800a0b8:	7892      	ldrb	r2, [r2, #2]
 800a0ba:	709a      	strb	r2, [r3, #2]
		strcat(temp,FID);
 800a0bc:	4a86      	ldr	r2, [pc, #536]	; (800a2d8 <GSM_Service+0xe3c>)
 800a0be:	003b      	movs	r3, r7
 800a0c0:	0011      	movs	r1, r2
 800a0c2:	0018      	movs	r0, r3
 800a0c4:	f007 fd4c 	bl	8011b60 <strcat>
		strcat(temp,",");
 800a0c8:	003b      	movs	r3, r7
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	f7ff f826 	bl	800911c <strlen>
 800a0d0:	0003      	movs	r3, r0
 800a0d2:	001a      	movs	r2, r3
 800a0d4:	003b      	movs	r3, r7
 800a0d6:	189a      	adds	r2, r3, r2
 800a0d8:	4b80      	ldr	r3, [pc, #512]	; (800a2dc <GSM_Service+0xe40>)
 800a0da:	0010      	movs	r0, r2
 800a0dc:	0019      	movs	r1, r3
 800a0de:	2302      	movs	r3, #2
 800a0e0:	001a      	movs	r2, r3
 800a0e2:	f007 fd0b 	bl	8011afc <memcpy>
		myLongStr(ftpPacket,temp1,10,10);
 800a0e6:	4b83      	ldr	r3, [pc, #524]	; (800a2f4 <GSM_Service+0xe58>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	497d      	ldr	r1, [pc, #500]	; (800a2e4 <GSM_Service+0xe48>)
 800a0ee:	230a      	movs	r3, #10
 800a0f0:	220a      	movs	r2, #10
 800a0f2:	f002 fcc7 	bl	800ca84 <myLongStr>
		strcat(temp,temp1);
 800a0f6:	4a7b      	ldr	r2, [pc, #492]	; (800a2e4 <GSM_Service+0xe48>)
 800a0f8:	003b      	movs	r3, r7
 800a0fa:	0011      	movs	r1, r2
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f007 fd2f 	bl	8011b60 <strcat>
		strcat(temp,"\r\n");
 800a102:	003b      	movs	r3, r7
 800a104:	0018      	movs	r0, r3
 800a106:	f7ff f809 	bl	800911c <strlen>
 800a10a:	0003      	movs	r3, r0
 800a10c:	001a      	movs	r2, r3
 800a10e:	003b      	movs	r3, r7
 800a110:	189a      	adds	r2, r3, r2
 800a112:	4b75      	ldr	r3, [pc, #468]	; (800a2e8 <GSM_Service+0xe4c>)
 800a114:	0010      	movs	r0, r2
 800a116:	0019      	movs	r1, r3
 800a118:	2303      	movs	r3, #3
 800a11a:	001a      	movs	r2, r3
 800a11c:	f007 fcee 	bl	8011afc <memcpy>
		//Debug_Send(temp);
		GSM_Send(temp);
 800a120:	003b      	movs	r3, r7
 800a122:	0018      	movs	r0, r3
 800a124:	f000 fa0c 	bl	800a540 <GSM_Send>


		ftpRead = 1;
 800a128:	4b73      	ldr	r3, [pc, #460]	; (800a2f8 <GSM_Service+0xe5c>)
 800a12a:	2201      	movs	r2, #1
 800a12c:	701a      	strb	r2, [r3, #0]
		//if ((filesize - ftpseek) < 60)
		//if ((filesize - ftpseek) < 60)
		gsmState = 0;
 800a12e:	4b5f      	ldr	r3, [pc, #380]	; (800a2ac <GSM_Service+0xe10>)
 800a130:	2200      	movs	r2, #0
 800a132:	701a      	strb	r2, [r3, #0]
		gsmState = FS_Seek;
 800a134:	4b5d      	ldr	r3, [pc, #372]	; (800a2ac <GSM_Service+0xe10>)
 800a136:	222f      	movs	r2, #47	; 0x2f
 800a138:	701a      	strb	r2, [r3, #0]
		//ftpseek += ftpinc;
		ftpseek += ftpPacket;
 800a13a:	4b69      	ldr	r3, [pc, #420]	; (800a2e0 <GSM_Service+0xe44>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	4b6d      	ldr	r3, [pc, #436]	; (800a2f4 <GSM_Service+0xe58>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	18d2      	adds	r2, r2, r3
 800a144:	4b66      	ldr	r3, [pc, #408]	; (800a2e0 <GSM_Service+0xe44>)
 800a146:	601a      	str	r2, [r3, #0]
		/*if (ftpseek > filesize) {
			ftpseek -= ftpinc;
			ftpPacket = filesize - ftpseek;
			gsmState = 0;
		}*/
		break;
 800a148:	e043      	b.n	800a1d2 <GSM_Service+0xd36>
	case FS_Close:
		Debug_Send("Close file\r\n");
 800a14a:	4b6c      	ldr	r3, [pc, #432]	; (800a2fc <GSM_Service+0xe60>)
 800a14c:	0018      	movs	r0, r3
 800a14e:	f000 fa49 	bl	800a5e4 <Debug_Send>
		strcpy(temp,"AT+QFCLOSE=");
 800a152:	003b      	movs	r3, r7
 800a154:	4a6a      	ldr	r2, [pc, #424]	; (800a300 <GSM_Service+0xe64>)
 800a156:	ca13      	ldmia	r2!, {r0, r1, r4}
 800a158:	c313      	stmia	r3!, {r0, r1, r4}
		strcat(temp,FID);
 800a15a:	4a5f      	ldr	r2, [pc, #380]	; (800a2d8 <GSM_Service+0xe3c>)
 800a15c:	003b      	movs	r3, r7
 800a15e:	0011      	movs	r1, r2
 800a160:	0018      	movs	r0, r3
 800a162:	f007 fcfd 	bl	8011b60 <strcat>
		strcat(temp,"\r\n");
 800a166:	003b      	movs	r3, r7
 800a168:	0018      	movs	r0, r3
 800a16a:	f7fe ffd7 	bl	800911c <strlen>
 800a16e:	0003      	movs	r3, r0
 800a170:	001a      	movs	r2, r3
 800a172:	003b      	movs	r3, r7
 800a174:	189a      	adds	r2, r3, r2
 800a176:	4b5c      	ldr	r3, [pc, #368]	; (800a2e8 <GSM_Service+0xe4c>)
 800a178:	0010      	movs	r0, r2
 800a17a:	0019      	movs	r1, r3
 800a17c:	2303      	movs	r3, #3
 800a17e:	001a      	movs	r2, r3
 800a180:	f007 fcbc 	bl	8011afc <memcpy>
		Debug_Send(temp);
 800a184:	003b      	movs	r3, r7
 800a186:	0018      	movs	r0, r3
 800a188:	f000 fa2c 	bl	800a5e4 <Debug_Send>
		GSM_Send(temp);
 800a18c:	003b      	movs	r3, r7
 800a18e:	0018      	movs	r0, r3
 800a190:	f000 f9d6 	bl	800a540 <GSM_Send>
		ftpseek = 0;
 800a194:	4b52      	ldr	r3, [pc, #328]	; (800a2e0 <GSM_Service+0xe44>)
 800a196:	2200      	movs	r2, #0
 800a198:	601a      	str	r2, [r3, #0]
		/*flashRead(1000, temp, gsmInfo.FTP_Size);	//Service , Message , Max , Min , Average , Count , frequency ,Timed
		Debug_Send("Flash:");
		Debug_Send(temp);
		Debug_Send("\r\n");*/
		//flashWrite(900,"U",1);
		gsmInfo.FTP_Size = 0;
 800a19a:	4a54      	ldr	r2, [pc, #336]	; (800a2ec <GSM_Service+0xe50>)
 800a19c:	23bc      	movs	r3, #188	; 0xbc
 800a19e:	005b      	lsls	r3, r3, #1
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	50d1      	str	r1, [r2, r3]

		gsmState = FlashWrite;
 800a1a4:	4b41      	ldr	r3, [pc, #260]	; (800a2ac <GSM_Service+0xe10>)
 800a1a6:	2233      	movs	r2, #51	; 0x33
 800a1a8:	701a      	strb	r2, [r3, #0]
		break;
 800a1aa:	e012      	b.n	800a1d2 <GSM_Service+0xd36>
	case FlashWrite:
		Debug_Send("Set flash flag\r\n");
 800a1ac:	4b55      	ldr	r3, [pc, #340]	; (800a304 <GSM_Service+0xe68>)
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f000 fa18 	bl	800a5e4 <Debug_Send>
		//flashWrite(900,"UL",2);
		Debug_Send("Done\r\n");
 800a1b4:	4b54      	ldr	r3, [pc, #336]	; (800a308 <GSM_Service+0xe6c>)
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f000 fa14 	bl	800a5e4 <Debug_Send>
		gsmState = FTP_Close;
 800a1bc:	4b3b      	ldr	r3, [pc, #236]	; (800a2ac <GSM_Service+0xe10>)
 800a1be:	2226      	movs	r2, #38	; 0x26
 800a1c0:	701a      	strb	r2, [r3, #0]
		break;
 800a1c2:	e006      	b.n	800a1d2 <GSM_Service+0xd36>
	case MQTT_Connect:
		//connect("test1");
		gsmState = 0;
 800a1c4:	4b39      	ldr	r3, [pc, #228]	; (800a2ac <GSM_Service+0xe10>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	701a      	strb	r2, [r3, #0]
		break;
 800a1ca:	e002      	b.n	800a1d2 <GSM_Service+0xd36>


		break;
	default:

		break;
 800a1cc:	46c0      	nop			; (mov r8, r8)
 800a1ce:	e000      	b.n	800a1d2 <GSM_Service+0xd36>
		break;
 800a1d0:	46c0      	nop			; (mov r8, r8)
	//if (smsFlags.prompt == 1){

	//	smsFlags.prompt = 0;
	//}
	//if ((gsmTimer < 20)&&(smsFlags.signal == 1)){			//restarts cycle
		if (gsmInfo.socket == 0)gsmTimer++;
 800a1d2:	4b46      	ldr	r3, [pc, #280]	; (800a2ec <GSM_Service+0xe50>)
 800a1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d104      	bne.n	800a1e4 <GSM_Service+0xd48>
 800a1da:	4b4c      	ldr	r3, [pc, #304]	; (800a30c <GSM_Service+0xe70>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	1c5a      	adds	r2, r3, #1
 800a1e0:	4b4a      	ldr	r3, [pc, #296]	; (800a30c <GSM_Service+0xe70>)
 800a1e2:	601a      	str	r2, [r3, #0]
		//sprintf(count, "%d", gsmTimer);
		//sprintf(count, "%d", gsmState);
		//sendData(count,UART0);
		//sendData("\r\n",UART0);
		//if ((gsmTimer >= 20)&&(smsFlags.config == 1)&&(gsmInfo.socket == 0)){
		if ((gsmTimer >= 20)&&(smsFlags.config == 1)&&(gsmInfo.FTP_Open == 0)){
 800a1e4:	4b49      	ldr	r3, [pc, #292]	; (800a30c <GSM_Service+0xe70>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b13      	cmp	r3, #19
 800a1ea:	dd19      	ble.n	800a220 <GSM_Service+0xd84>
 800a1ec:	4b48      	ldr	r3, [pc, #288]	; (800a310 <GSM_Service+0xe74>)
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d115      	bne.n	800a220 <GSM_Service+0xd84>
 800a1f4:	4a3d      	ldr	r2, [pc, #244]	; (800a2ec <GSM_Service+0xe50>)
 800a1f6:	23b2      	movs	r3, #178	; 0xb2
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	58d3      	ldr	r3, [r2, r3]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10f      	bne.n	800a220 <GSM_Service+0xd84>
			gsmTimer = 0;
 800a200:	4b42      	ldr	r3, [pc, #264]	; (800a30c <GSM_Service+0xe70>)
 800a202:	2200      	movs	r2, #0
 800a204:	601a      	str	r2, [r3, #0]
			Debug_Send("Recy\n");
 800a206:	4b43      	ldr	r3, [pc, #268]	; (800a314 <GSM_Service+0xe78>)
 800a208:	0018      	movs	r0, r3
 800a20a:	f000 f9eb 	bl	800a5e4 <Debug_Send>
			//gsmState = SMS_Check;
			gsmState = USSD;		//test
 800a20e:	4b27      	ldr	r3, [pc, #156]	; (800a2ac <GSM_Service+0xe10>)
 800a210:	220c      	movs	r2, #12
 800a212:	701a      	strb	r2, [r3, #0]
			gsmState = SMS_Check;
 800a214:	4b25      	ldr	r3, [pc, #148]	; (800a2ac <GSM_Service+0xe10>)
 800a216:	220e      	movs	r2, #14
 800a218:	701a      	strb	r2, [r3, #0]
			gsmState = Signal;
 800a21a:	4b24      	ldr	r3, [pc, #144]	; (800a2ac <GSM_Service+0xe10>)
 800a21c:	2218      	movs	r2, #24
 800a21e:	701a      	strb	r2, [r3, #0]

		}
		if ((smsFlags.gprsActive == 0)&&(smsFlags.signal == 1))gsmInfo.GPRStimer++;
 800a220:	4b3b      	ldr	r3, [pc, #236]	; (800a310 <GSM_Service+0xe74>)
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10c      	bne.n	800a242 <GSM_Service+0xda6>
 800a228:	4b39      	ldr	r3, [pc, #228]	; (800a310 <GSM_Service+0xe74>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d108      	bne.n	800a242 <GSM_Service+0xda6>
 800a230:	4a2e      	ldr	r2, [pc, #184]	; (800a2ec <GSM_Service+0xe50>)
 800a232:	239e      	movs	r3, #158	; 0x9e
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	58d3      	ldr	r3, [r2, r3]
 800a238:	1c59      	adds	r1, r3, #1
 800a23a:	4a2c      	ldr	r2, [pc, #176]	; (800a2ec <GSM_Service+0xe50>)
 800a23c:	239e      	movs	r3, #158	; 0x9e
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	50d1      	str	r1, [r2, r3]
		//sprintf(temp, "gprs %i state %i v:%i c %i T:%i\r\n",gsmInfo.GPRStimer, gsmState, smsFlags.send, smsFlags.signal, gsmTimeout);

		if ((gsmInfo.GPRStimer >= gsmInfo.GPRSinterval)&&(gsmState == 0)&&(smsFlags.send == 0)&&(smsFlags.signal == 1)&&(gsmInfo.FTP_Open == 0)){
 800a242:	4a2a      	ldr	r2, [pc, #168]	; (800a2ec <GSM_Service+0xe50>)
 800a244:	239e      	movs	r3, #158	; 0x9e
 800a246:	005b      	lsls	r3, r3, #1
 800a248:	58d2      	ldr	r2, [r2, r3]
 800a24a:	4928      	ldr	r1, [pc, #160]	; (800a2ec <GSM_Service+0xe50>)
 800a24c:	23a0      	movs	r3, #160	; 0xa0
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	58cb      	ldr	r3, [r1, r3]
 800a252:	429a      	cmp	r2, r3
 800a254:	db67      	blt.n	800a326 <GSM_Service+0xe8a>
 800a256:	4b15      	ldr	r3, [pc, #84]	; (800a2ac <GSM_Service+0xe10>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d163      	bne.n	800a326 <GSM_Service+0xe8a>
 800a25e:	4b2c      	ldr	r3, [pc, #176]	; (800a310 <GSM_Service+0xe74>)
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d15f      	bne.n	800a326 <GSM_Service+0xe8a>
 800a266:	4b2a      	ldr	r3, [pc, #168]	; (800a310 <GSM_Service+0xe74>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d15b      	bne.n	800a326 <GSM_Service+0xe8a>
 800a26e:	4a1f      	ldr	r2, [pc, #124]	; (800a2ec <GSM_Service+0xe50>)
 800a270:	23b2      	movs	r3, #178	; 0xb2
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	58d3      	ldr	r3, [r2, r3]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d155      	bne.n	800a326 <GSM_Service+0xe8a>
			gsmInfo.GPRStimer = 0;
 800a27a:	4a1c      	ldr	r2, [pc, #112]	; (800a2ec <GSM_Service+0xe50>)
 800a27c:	239e      	movs	r3, #158	; 0x9e
 800a27e:	005b      	lsls	r3, r3, #1
 800a280:	2100      	movs	r1, #0
 800a282:	50d1      	str	r1, [r2, r3]
			if (smsFlags.gprsActive == 0) gsmState = GPRS_On;
 800a284:	4b22      	ldr	r3, [pc, #136]	; (800a310 <GSM_Service+0xe74>)
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d103      	bne.n	800a294 <GSM_Service+0xdf8>
 800a28c:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <GSM_Service+0xe10>)
 800a28e:	2212      	movs	r2, #18
 800a290:	701a      	strb	r2, [r3, #0]
 800a292:	e048      	b.n	800a326 <GSM_Service+0xe8a>
			else if (smsFlags.gprsActive == 1)gsmState = SocketOpen;
 800a294:	4b1e      	ldr	r3, [pc, #120]	; (800a310 <GSM_Service+0xe74>)
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d13d      	bne.n	800a318 <GSM_Service+0xe7c>
 800a29c:	4b03      	ldr	r3, [pc, #12]	; (800a2ac <GSM_Service+0xe10>)
 800a29e:	2215      	movs	r2, #21
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	e040      	b.n	800a326 <GSM_Service+0xe8a>
 800a2a4:	08012914 	.word	0x08012914
 800a2a8:	08012920 	.word	0x08012920
 800a2ac:	200000c0 	.word	0x200000c0
 800a2b0:	08012948 	.word	0x08012948
 800a2b4:	08012954 	.word	0x08012954
 800a2b8:	08012974 	.word	0x08012974
 800a2bc:	08012980 	.word	0x08012980
 800a2c0:	08012990 	.word	0x08012990
 800a2c4:	080129a4 	.word	0x080129a4
 800a2c8:	080129b8 	.word	0x080129b8
 800a2cc:	080129d8 	.word	0x080129d8
 800a2d0:	08012a00 	.word	0x08012a00
 800a2d4:	08012a0c 	.word	0x08012a0c
 800a2d8:	20001984 	.word	0x20001984
 800a2dc:	0801255c 	.word	0x0801255c
 800a2e0:	200000c4 	.word	0x200000c4
 800a2e4:	20001578 	.word	0x20001578
 800a2e8:	0801254c 	.word	0x0801254c
 800a2ec:	20001720 	.word	0x20001720
 800a2f0:	08012a18 	.word	0x08012a18
 800a2f4:	200000cc 	.word	0x200000cc
 800a2f8:	2000197c 	.word	0x2000197c
 800a2fc:	08012a24 	.word	0x08012a24
 800a300:	08012a34 	.word	0x08012a34
 800a304:	08012a40 	.word	0x08012a40
 800a308:	08012a54 	.word	0x08012a54
 800a30c:	2000156c 	.word	0x2000156c
 800a310:	2000112c 	.word	0x2000112c
 800a314:	08012a5c 	.word	0x08012a5c
			else if (smsFlags.gprsPending == 1) gsmState = GPRS_Off;		//switch off gsm if previous
 800a318:	4b28      	ldr	r3, [pc, #160]	; (800a3bc <GSM_Service+0xf20>)
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d102      	bne.n	800a326 <GSM_Service+0xe8a>
 800a320:	4b27      	ldr	r3, [pc, #156]	; (800a3c0 <GSM_Service+0xf24>)
 800a322:	2214      	movs	r2, #20
 800a324:	701a      	strb	r2, [r3, #0]
		}

		//if (gsmState == 0) gsmInfo.Timeout++;
		if(gsmInfo.Timeout >= 60){
 800a326:	4a27      	ldr	r2, [pc, #156]	; (800a3c4 <GSM_Service+0xf28>)
 800a328:	23b0      	movs	r3, #176	; 0xb0
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	58d3      	ldr	r3, [r2, r3]
 800a32e:	2b3b      	cmp	r3, #59	; 0x3b
 800a330:	dd09      	ble.n	800a346 <GSM_Service+0xeaa>
			gsmInfo.Timeout = 0;
 800a332:	4a24      	ldr	r2, [pc, #144]	; (800a3c4 <GSM_Service+0xf28>)
 800a334:	23b0      	movs	r3, #176	; 0xb0
 800a336:	005b      	lsls	r3, r3, #1
 800a338:	2100      	movs	r1, #0
 800a33a:	50d1      	str	r1, [r2, r3]
			GSM_Init();
 800a33c:	f7fe ff9e 	bl	800927c <GSM_Init>
			gsmState = GSM_Off;
 800a340:	4b1f      	ldr	r3, [pc, #124]	; (800a3c0 <GSM_Service+0xf24>)
 800a342:	2201      	movs	r2, #1
 800a344:	701a      	strb	r2, [r3, #0]

		}
		//smsTimer++;
		if ((smsTimer >= 3600)&&(gsmState == 0)&&(gsmInfo.socket == 0)&&(smsFlags.signal == 1)){
 800a346:	4b20      	ldr	r3, [pc, #128]	; (800a3c8 <GSM_Service+0xf2c>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	23e1      	movs	r3, #225	; 0xe1
 800a34c:	011b      	lsls	r3, r3, #4
 800a34e:	429a      	cmp	r2, r3
 800a350:	db19      	blt.n	800a386 <GSM_Service+0xeea>
 800a352:	4b1b      	ldr	r3, [pc, #108]	; (800a3c0 <GSM_Service+0xf24>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d115      	bne.n	800a386 <GSM_Service+0xeea>
 800a35a:	4b1a      	ldr	r3, [pc, #104]	; (800a3c4 <GSM_Service+0xf28>)
 800a35c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d111      	bne.n	800a386 <GSM_Service+0xeea>
 800a362:	4b16      	ldr	r3, [pc, #88]	; (800a3bc <GSM_Service+0xf20>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d10d      	bne.n	800a386 <GSM_Service+0xeea>
			smsTimer = 0;
 800a36a:	4b17      	ldr	r3, [pc, #92]	; (800a3c8 <GSM_Service+0xf2c>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	601a      	str	r2, [r3, #0]
			strcpy(smsInfo.build,"test");
 800a370:	4b16      	ldr	r3, [pc, #88]	; (800a3cc <GSM_Service+0xf30>)
 800a372:	4a17      	ldr	r2, [pc, #92]	; (800a3d0 <GSM_Service+0xf34>)
 800a374:	6811      	ldr	r1, [r2, #0]
 800a376:	6019      	str	r1, [r3, #0]
 800a378:	7912      	ldrb	r2, [r2, #4]
 800a37a:	711a      	strb	r2, [r3, #4]
			BuildPower();
 800a37c:	f001 fa66 	bl	800b84c <BuildPower>
			gsmState = SMS_Send;
 800a380:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <GSM_Service+0xf24>)
 800a382:	220f      	movs	r2, #15
 800a384:	701a      	strb	r2, [r3, #0]
		}
		if ((gsmInfo.GPRStimer >= 30) && (smsFlags.signal== 0)){
 800a386:	4a0f      	ldr	r2, [pc, #60]	; (800a3c4 <GSM_Service+0xf28>)
 800a388:	239e      	movs	r3, #158	; 0x9e
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	58d3      	ldr	r3, [r2, r3]
 800a38e:	2b1d      	cmp	r3, #29
 800a390:	dd06      	ble.n	800a3a0 <GSM_Service+0xf04>
 800a392:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <GSM_Service+0xf20>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d102      	bne.n	800a3a0 <GSM_Service+0xf04>
			gsmTimeout =  10;
 800a39a:	4b0e      	ldr	r3, [pc, #56]	; (800a3d4 <GSM_Service+0xf38>)
 800a39c:	220a      	movs	r2, #10
 800a39e:	601a      	str	r2, [r3, #0]
		//restartTimer = 0;
		//gsmState = 30;
	//}
		//buildInfo();
	//}
		if (gsmSend == 1) gsmTimeout++;
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <GSM_Service+0xf3c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d104      	bne.n	800a3b2 <GSM_Service+0xf16>
 800a3a8:	4b0a      	ldr	r3, [pc, #40]	; (800a3d4 <GSM_Service+0xf38>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <GSM_Service+0xf38>)
 800a3b0:	601a      	str	r2, [r3, #0]
		//Debug_Send(temp);
}
 800a3b2:	46c0      	nop			; (mov r8, r8)
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	b047      	add	sp, #284	; 0x11c
 800a3b8:	bd90      	pop	{r4, r7, pc}
 800a3ba:	46c0      	nop			; (mov r8, r8)
 800a3bc:	2000112c 	.word	0x2000112c
 800a3c0:	200000c0 	.word	0x200000c0
 800a3c4:	20001720 	.word	0x20001720
 800a3c8:	20001980 	.word	0x20001980
 800a3cc:	20001394 	.word	0x20001394
 800a3d0:	08012a64 	.word	0x08012a64
 800a3d4:	20000180 	.word	0x20000180
 800a3d8:	20000184 	.word	0x20000184

0800a3dc <MQTT_ConnectF>:

void MQTT_ConnectF(){
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	af00      	add	r7, sp, #0
	tempGPRS[0] = 0x10;
 800a3e0:	4b1e      	ldr	r3, [pc, #120]	; (800a45c <MQTT_ConnectF+0x80>)
 800a3e2:	2210      	movs	r2, #16
 800a3e4:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x0E;
 800a3e6:	4b1d      	ldr	r3, [pc, #116]	; (800a45c <MQTT_ConnectF+0x80>)
 800a3e8:	220e      	movs	r2, #14
 800a3ea:	705a      	strb	r2, [r3, #1]
	tempGPRS[2] = 0x00;
 800a3ec:	4b1b      	ldr	r3, [pc, #108]	; (800a45c <MQTT_ConnectF+0x80>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x04;
 800a3f2:	4b1a      	ldr	r3, [pc, #104]	; (800a45c <MQTT_ConnectF+0x80>)
 800a3f4:	2204      	movs	r2, #4
 800a3f6:	70da      	strb	r2, [r3, #3]
	tempGPRS[4] = 'M';
 800a3f8:	4b18      	ldr	r3, [pc, #96]	; (800a45c <MQTT_ConnectF+0x80>)
 800a3fa:	224d      	movs	r2, #77	; 0x4d
 800a3fc:	711a      	strb	r2, [r3, #4]
	tempGPRS[5] = 'Q';
 800a3fe:	4b17      	ldr	r3, [pc, #92]	; (800a45c <MQTT_ConnectF+0x80>)
 800a400:	2251      	movs	r2, #81	; 0x51
 800a402:	715a      	strb	r2, [r3, #5]
	tempGPRS[6] = 'T';
 800a404:	4b15      	ldr	r3, [pc, #84]	; (800a45c <MQTT_ConnectF+0x80>)
 800a406:	2254      	movs	r2, #84	; 0x54
 800a408:	719a      	strb	r2, [r3, #6]
	tempGPRS[7] = 'T';
 800a40a:	4b14      	ldr	r3, [pc, #80]	; (800a45c <MQTT_ConnectF+0x80>)
 800a40c:	2254      	movs	r2, #84	; 0x54
 800a40e:	71da      	strb	r2, [r3, #7]
	tempGPRS[8] = 0x04;
 800a410:	4b12      	ldr	r3, [pc, #72]	; (800a45c <MQTT_ConnectF+0x80>)
 800a412:	2204      	movs	r2, #4
 800a414:	721a      	strb	r2, [r3, #8]
	tempGPRS[9] = 0x02;
 800a416:	4b11      	ldr	r3, [pc, #68]	; (800a45c <MQTT_ConnectF+0x80>)
 800a418:	2202      	movs	r2, #2
 800a41a:	725a      	strb	r2, [r3, #9]
	tempGPRS[10] = 0x00;
 800a41c:	4b0f      	ldr	r3, [pc, #60]	; (800a45c <MQTT_ConnectF+0x80>)
 800a41e:	2200      	movs	r2, #0
 800a420:	729a      	strb	r2, [r3, #10]
	tempGPRS[11] = 0x78;
 800a422:	4b0e      	ldr	r3, [pc, #56]	; (800a45c <MQTT_ConnectF+0x80>)
 800a424:	2278      	movs	r2, #120	; 0x78
 800a426:	72da      	strb	r2, [r3, #11]
	tempGPRS[12] = 0x00;
 800a428:	4b0c      	ldr	r3, [pc, #48]	; (800a45c <MQTT_ConnectF+0x80>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	731a      	strb	r2, [r3, #12]
	tempGPRS[13] = 0x02;
 800a42e:	4b0b      	ldr	r3, [pc, #44]	; (800a45c <MQTT_ConnectF+0x80>)
 800a430:	2202      	movs	r2, #2
 800a432:	735a      	strb	r2, [r3, #13]

	tempGPRS[14] = 'P';
 800a434:	4b09      	ldr	r3, [pc, #36]	; (800a45c <MQTT_ConnectF+0x80>)
 800a436:	2250      	movs	r2, #80	; 0x50
 800a438:	739a      	strb	r2, [r3, #14]
	tempGPRS[15] = '2';
 800a43a:	4b08      	ldr	r3, [pc, #32]	; (800a45c <MQTT_ConnectF+0x80>)
 800a43c:	2232      	movs	r2, #50	; 0x32
 800a43e:	73da      	strb	r2, [r3, #15]

	tempGPRS[16] = 0x1A;
 800a440:	4b06      	ldr	r3, [pc, #24]	; (800a45c <MQTT_ConnectF+0x80>)
 800a442:	221a      	movs	r2, #26
 800a444:	741a      	strb	r2, [r3, #16]
	tempGPRS[17] = 0x0D;
 800a446:	4b05      	ldr	r3, [pc, #20]	; (800a45c <MQTT_ConnectF+0x80>)
 800a448:	220d      	movs	r2, #13
 800a44a:	745a      	strb	r2, [r3, #17]
	GSM_Send_Bin(tempGPRS, 18);
 800a44c:	4b03      	ldr	r3, [pc, #12]	; (800a45c <MQTT_ConnectF+0x80>)
 800a44e:	2112      	movs	r1, #18
 800a450:	0018      	movs	r0, r3
 800a452:	f000 f8a1 	bl	800a598 <GSM_Send_Bin>
}
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	200014a0 	.word	0x200014a0

0800a460 <MQTT_SuscribeF>:

void MQTT_SuscribeF(){
 800a460:	b580      	push	{r7, lr}
 800a462:	af00      	add	r7, sp, #0
	tempGPRS[0] = 0x82;
 800a464:	4b1a      	ldr	r3, [pc, #104]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a466:	2282      	movs	r2, #130	; 0x82
 800a468:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x0A;
 800a46a:	4b19      	ldr	r3, [pc, #100]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a46c:	220a      	movs	r2, #10
 800a46e:	705a      	strb	r2, [r3, #1]
	tempGPRS[2] = 0x00;
 800a470:	4b17      	ldr	r3, [pc, #92]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a472:	2200      	movs	r2, #0
 800a474:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x00;
 800a476:	4b16      	ldr	r3, [pc, #88]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a478:	2200      	movs	r2, #0
 800a47a:	70da      	strb	r2, [r3, #3]
	tempGPRS[4] = 0x00;
 800a47c:	4b14      	ldr	r3, [pc, #80]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a47e:	2200      	movs	r2, #0
 800a480:	711a      	strb	r2, [r3, #4]
	tempGPRS[5] = 0x05;
 800a482:	4b13      	ldr	r3, [pc, #76]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a484:	2205      	movs	r2, #5
 800a486:	715a      	strb	r2, [r3, #5]
	tempGPRS[6] = 'h';
 800a488:	4b11      	ldr	r3, [pc, #68]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a48a:	2268      	movs	r2, #104	; 0x68
 800a48c:	719a      	strb	r2, [r3, #6]
	tempGPRS[7] = '0';
 800a48e:	4b10      	ldr	r3, [pc, #64]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a490:	2230      	movs	r2, #48	; 0x30
 800a492:	71da      	strb	r2, [r3, #7]
	tempGPRS[8] = 'u';
 800a494:	4b0e      	ldr	r3, [pc, #56]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a496:	2275      	movs	r2, #117	; 0x75
 800a498:	721a      	strb	r2, [r3, #8]
	tempGPRS[9] = 's';
 800a49a:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a49c:	2273      	movs	r2, #115	; 0x73
 800a49e:	725a      	strb	r2, [r3, #9]
	tempGPRS[10] = 'e';
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a4a2:	2265      	movs	r2, #101	; 0x65
 800a4a4:	729a      	strb	r2, [r3, #10]
	tempGPRS[11] = 0x00;
 800a4a6:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	72da      	strb	r2, [r3, #11]
	tempGPRS[12] = 0x00;
 800a4ac:	4b08      	ldr	r3, [pc, #32]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	731a      	strb	r2, [r3, #12]

	tempGPRS[13] = 0x1A;
 800a4b2:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a4b4:	221a      	movs	r2, #26
 800a4b6:	735a      	strb	r2, [r3, #13]
	tempGPRS[14] = 0x0D;
 800a4b8:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a4ba:	220d      	movs	r2, #13
 800a4bc:	739a      	strb	r2, [r3, #14]
	GSM_Send_Bin(tempGPRS, 15);
 800a4be:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <MQTT_SuscribeF+0x70>)
 800a4c0:	210f      	movs	r1, #15
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	f000 f868 	bl	800a598 <GSM_Send_Bin>
}
 800a4c8:	46c0      	nop			; (mov r8, r8)
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	46c0      	nop			; (mov r8, r8)
 800a4d0:	200014a0 	.word	0x200014a0

0800a4d4 <MQTT_Publish_F>:

void MQTT_Publish_F(){
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	af00      	add	r7, sp, #0
	tempGPRS[0] = 0x30;
 800a4d8:	4b18      	ldr	r3, [pc, #96]	; (800a53c <MQTT_Publish_F+0x68>)
 800a4da:	2230      	movs	r2, #48	; 0x30
 800a4dc:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x0A;
 800a4de:	4b17      	ldr	r3, [pc, #92]	; (800a53c <MQTT_Publish_F+0x68>)
 800a4e0:	220a      	movs	r2, #10
 800a4e2:	705a      	strb	r2, [r3, #1]
	tempGPRS[2] = 0x00;
 800a4e4:	4b15      	ldr	r3, [pc, #84]	; (800a53c <MQTT_Publish_F+0x68>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x05;
 800a4ea:	4b14      	ldr	r3, [pc, #80]	; (800a53c <MQTT_Publish_F+0x68>)
 800a4ec:	2205      	movs	r2, #5
 800a4ee:	70da      	strb	r2, [r3, #3]
	tempGPRS[4] = 'h';
 800a4f0:	4b12      	ldr	r3, [pc, #72]	; (800a53c <MQTT_Publish_F+0x68>)
 800a4f2:	2268      	movs	r2, #104	; 0x68
 800a4f4:	711a      	strb	r2, [r3, #4]
	tempGPRS[5] = '0';
 800a4f6:	4b11      	ldr	r3, [pc, #68]	; (800a53c <MQTT_Publish_F+0x68>)
 800a4f8:	2230      	movs	r2, #48	; 0x30
 800a4fa:	715a      	strb	r2, [r3, #5]
	tempGPRS[6] = 'u';
 800a4fc:	4b0f      	ldr	r3, [pc, #60]	; (800a53c <MQTT_Publish_F+0x68>)
 800a4fe:	2275      	movs	r2, #117	; 0x75
 800a500:	719a      	strb	r2, [r3, #6]
	tempGPRS[7] = 's';
 800a502:	4b0e      	ldr	r3, [pc, #56]	; (800a53c <MQTT_Publish_F+0x68>)
 800a504:	2273      	movs	r2, #115	; 0x73
 800a506:	71da      	strb	r2, [r3, #7]
	tempGPRS[8] = 'e';
 800a508:	4b0c      	ldr	r3, [pc, #48]	; (800a53c <MQTT_Publish_F+0x68>)
 800a50a:	2265      	movs	r2, #101	; 0x65
 800a50c:	721a      	strb	r2, [r3, #8]
	tempGPRS[9] = 'o';
 800a50e:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <MQTT_Publish_F+0x68>)
 800a510:	226f      	movs	r2, #111	; 0x6f
 800a512:	725a      	strb	r2, [r3, #9]
	tempGPRS[10] = 'f';
 800a514:	4b09      	ldr	r3, [pc, #36]	; (800a53c <MQTT_Publish_F+0x68>)
 800a516:	2266      	movs	r2, #102	; 0x66
 800a518:	729a      	strb	r2, [r3, #10]
	tempGPRS[11] = 'f';
 800a51a:	4b08      	ldr	r3, [pc, #32]	; (800a53c <MQTT_Publish_F+0x68>)
 800a51c:	2266      	movs	r2, #102	; 0x66
 800a51e:	72da      	strb	r2, [r3, #11]


	tempGPRS[12] = 0x1A;
 800a520:	4b06      	ldr	r3, [pc, #24]	; (800a53c <MQTT_Publish_F+0x68>)
 800a522:	221a      	movs	r2, #26
 800a524:	731a      	strb	r2, [r3, #12]
	tempGPRS[13] = 0x0D;
 800a526:	4b05      	ldr	r3, [pc, #20]	; (800a53c <MQTT_Publish_F+0x68>)
 800a528:	220d      	movs	r2, #13
 800a52a:	735a      	strb	r2, [r3, #13]
	GSM_Send_Bin(tempGPRS, 14);
 800a52c:	4b03      	ldr	r3, [pc, #12]	; (800a53c <MQTT_Publish_F+0x68>)
 800a52e:	210e      	movs	r1, #14
 800a530:	0018      	movs	r0, r3
 800a532:	f000 f831 	bl	800a598 <GSM_Send_Bin>
}
 800a536:	46c0      	nop			; (mov r8, r8)
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	200014a0 	.word	0x200014a0

0800a540 <GSM_Send>:
	GSM_Send(",0\r\n");*/
	gsmInfo.FS_SeekFlag = 1;
	gsmState = 0;
}

void GSM_Send(char* data){
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
	int size;
	int timeout = 5;
 800a548:	2305      	movs	r3, #5
 800a54a:	60fb      	str	r3, [r7, #12]
	size = strlen(data);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	0018      	movs	r0, r3
 800a550:	f7fe fde4 	bl	800911c <strlen>
 800a554:	0003      	movs	r3, r0
 800a556:	60bb      	str	r3, [r7, #8]
	//HAL_UART_Transmit(&huart2, (uint8_t*)data, size, timeout);

	HAL_UART_Transmit_IT(&huart2, data, size);
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	4b0a      	ldr	r3, [pc, #40]	; (800a588 <GSM_Send+0x48>)
 800a560:	0018      	movs	r0, r3
 800a562:	f004 ff31 	bl	800f3c8 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 50);
 800a566:	4909      	ldr	r1, [pc, #36]	; (800a58c <GSM_Send+0x4c>)
 800a568:	4b07      	ldr	r3, [pc, #28]	; (800a588 <GSM_Send+0x48>)
 800a56a:	2232      	movs	r2, #50	; 0x32
 800a56c:	0018      	movs	r0, r3
 800a56e:	f004 ffab 	bl	800f4c8 <HAL_UART_Receive_IT>
	gsmTimeout = 0;
 800a572:	4b07      	ldr	r3, [pc, #28]	; (800a590 <GSM_Send+0x50>)
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
	gsmSend = 1;
 800a578:	4b06      	ldr	r3, [pc, #24]	; (800a594 <GSM_Send+0x54>)
 800a57a:	2201      	movs	r2, #1
 800a57c:	601a      	str	r2, [r3, #0]
}
 800a57e:	46c0      	nop			; (mov r8, r8)
 800a580:	46bd      	mov	sp, r7
 800a582:	b004      	add	sp, #16
 800a584:	bd80      	pop	{r7, pc}
 800a586:	46c0      	nop			; (mov r8, r8)
 800a588:	20001a90 	.word	0x20001a90
 800a58c:	200018ac 	.word	0x200018ac
 800a590:	20000180 	.word	0x20000180
 800a594:	20000184 	.word	0x20000184

0800a598 <GSM_Send_Bin>:

void GSM_Send_Bin(char* data, int size){
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
	//int size;
	int timeout = 5;
 800a5a2:	2305      	movs	r3, #5
 800a5a4:	60fb      	str	r3, [r7, #12]
	//size = strlen(data);
	//HAL_UART_Transmit(&huart2, (uint8_t*)data, size, timeout);

	HAL_UART_Transmit_IT(&huart2, data, size);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <GSM_Send_Bin+0x3c>)
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	f004 ff0a 	bl	800f3c8 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 50);
 800a5b4:	4908      	ldr	r1, [pc, #32]	; (800a5d8 <GSM_Send_Bin+0x40>)
 800a5b6:	4b07      	ldr	r3, [pc, #28]	; (800a5d4 <GSM_Send_Bin+0x3c>)
 800a5b8:	2232      	movs	r2, #50	; 0x32
 800a5ba:	0018      	movs	r0, r3
 800a5bc:	f004 ff84 	bl	800f4c8 <HAL_UART_Receive_IT>
	gsmTimeout = 0;
 800a5c0:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <GSM_Send_Bin+0x44>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	601a      	str	r2, [r3, #0]
	gsmSend = 1;
 800a5c6:	4b06      	ldr	r3, [pc, #24]	; (800a5e0 <GSM_Send_Bin+0x48>)
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	601a      	str	r2, [r3, #0]
}
 800a5cc:	46c0      	nop			; (mov r8, r8)
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	b004      	add	sp, #16
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	20001a90 	.word	0x20001a90
 800a5d8:	200018ac 	.word	0x200018ac
 800a5dc:	20000180 	.word	0x20000180
 800a5e0:	20000184 	.word	0x20000184

0800a5e4 <Debug_Send>:

void Debug_Send(char* data){
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
	int size;
	int timeout = 5;
 800a5ec:	2305      	movs	r3, #5
 800a5ee:	60fb      	str	r3, [r7, #12]
	size = strlen(data);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	f7fe fd92 	bl	800911c <strlen>
 800a5f8:	0003      	movs	r3, r0
 800a5fa:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (uint8_t*)data, size, timeout);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	4803      	ldr	r0, [pc, #12]	; (800a614 <Debug_Send+0x30>)
 800a606:	f004 fe35 	bl	800f274 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, data, size);
}
 800a60a:	46c0      	nop			; (mov r8, r8)
 800a60c:	46bd      	mov	sp, r7
 800a60e:	b004      	add	sp, #16
 800a610:	bd80      	pop	{r7, pc}
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	20001a08 	.word	0x20001a08

0800a618 <recData>:
	  }
	huart1.Instance->TDR = (data & (uint8_t)0xFFU);

}

void recData(){
 800a618:	b580      	push	{r7, lr}
 800a61a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800a61c:	2380      	movs	r3, #128	; 0x80
 800a61e:	019b      	lsls	r3, r3, #6
 800a620:	4aab      	ldr	r2, [pc, #684]	; (800a8d0 <recData+0x2b8>)
 800a622:	0019      	movs	r1, r3
 800a624:	0010      	movs	r0, r2
 800a626:	f003 f8b6 	bl	800d796 <HAL_GPIO_TogglePin>
		gsmInfo.Prompt = 0;
		Debug_Send("got prompt2\r\n");
		if (gsmInfo.socket == 1) gsmState = GPRS_Write;
		else gsmState = SMS_Text;
	}*/
		if (recBuffPointerWrite != recBuffPointerRead){
 800a62a:	4baa      	ldr	r3, [pc, #680]	; (800a8d4 <recData+0x2bc>)
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	4baa      	ldr	r3, [pc, #680]	; (800a8d8 <recData+0x2c0>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	429a      	cmp	r2, r3
 800a634:	d100      	bne.n	800a638 <recData+0x20>
 800a636:	e148      	b.n	800a8ca <recData+0x2b2>
			//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			gsmSend = 0;
 800a638:	4ba8      	ldr	r3, [pc, #672]	; (800a8dc <recData+0x2c4>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
			//if (recBuffDebug[recBuffPointerRead] != 0x0A){
				procBuff[procBuffpointer] = recBuffDebug[recBuffPointerRead];
 800a63e:	4ba6      	ldr	r3, [pc, #664]	; (800a8d8 <recData+0x2c0>)
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	4ba7      	ldr	r3, [pc, #668]	; (800a8e0 <recData+0x2c8>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	49a7      	ldr	r1, [pc, #668]	; (800a8e4 <recData+0x2cc>)
 800a648:	5c89      	ldrb	r1, [r1, r2]
 800a64a:	4aa7      	ldr	r2, [pc, #668]	; (800a8e8 <recData+0x2d0>)
 800a64c:	54d1      	strb	r1, [r2, r3]
				//HAL_UART_Transmit(&huart1, procBuff[procBuffpointer], 1, 10);
				/*if (recBuff[recBuffPointerRead] != 0x0A)*/ //SendChar(procBuff[procBuffpointer]);
				recBuffPointerRead++;
 800a64e:	4ba2      	ldr	r3, [pc, #648]	; (800a8d8 <recData+0x2c0>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	1c5a      	adds	r2, r3, #1
 800a654:	4ba0      	ldr	r3, [pc, #640]	; (800a8d8 <recData+0x2c0>)
 800a656:	601a      	str	r2, [r3, #0]
				if (recBuffPointerRead > recBuffSize) recBuffPointerRead = 0;
 800a658:	4b9f      	ldr	r3, [pc, #636]	; (800a8d8 <recData+0x2c0>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	2396      	movs	r3, #150	; 0x96
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	429a      	cmp	r2, r3
 800a662:	dd02      	ble.n	800a66a <recData+0x52>
 800a664:	4b9c      	ldr	r3, [pc, #624]	; (800a8d8 <recData+0x2c0>)
 800a666:	2200      	movs	r2, #0
 800a668:	601a      	str	r2, [r3, #0]
				procBuffpointer++;
 800a66a:	4b9d      	ldr	r3, [pc, #628]	; (800a8e0 <recData+0x2c8>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	4b9b      	ldr	r3, [pc, #620]	; (800a8e0 <recData+0x2c8>)
 800a672:	601a      	str	r2, [r3, #0]
				if (procBuffpointer > procBuffSize) procBuffpointer = 0;
 800a674:	4b9a      	ldr	r3, [pc, #616]	; (800a8e0 <recData+0x2c8>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2be6      	cmp	r3, #230	; 0xe6
 800a67a:	dd02      	ble.n	800a682 <recData+0x6a>
 800a67c:	4b98      	ldr	r3, [pc, #608]	; (800a8e0 <recData+0x2c8>)
 800a67e:	2200      	movs	r2, #0
 800a680:	601a      	str	r2, [r3, #0]
			//}

			//if (procBuff[procBuffpointer - 1] == '>'){
			if (procBuff[procBuffpointer - 1] == 62){
 800a682:	4b97      	ldr	r3, [pc, #604]	; (800a8e0 <recData+0x2c8>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3b01      	subs	r3, #1
 800a688:	4a97      	ldr	r2, [pc, #604]	; (800a8e8 <recData+0x2d0>)
 800a68a:	5cd3      	ldrb	r3, [r2, r3]
 800a68c:	2b3e      	cmp	r3, #62	; 0x3e
 800a68e:	d10a      	bne.n	800a6a6 <recData+0x8e>
			//if (procBuff[procBuffpointer] == '>'){
				//Debug_Send("got prompt\r\n");
				if (gsmInfo.socket == 1) gsmState = GPRS_Write;
 800a690:	4b96      	ldr	r3, [pc, #600]	; (800a8ec <recData+0x2d4>)
 800a692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a694:	2b01      	cmp	r3, #1
 800a696:	d103      	bne.n	800a6a0 <recData+0x88>
 800a698:	4b95      	ldr	r3, [pc, #596]	; (800a8f0 <recData+0x2d8>)
 800a69a:	221b      	movs	r2, #27
 800a69c:	701a      	strb	r2, [r3, #0]
 800a69e:	e002      	b.n	800a6a6 <recData+0x8e>
				else gsmState = SMS_Text;
 800a6a0:	4b93      	ldr	r3, [pc, #588]	; (800a8f0 <recData+0x2d8>)
 800a6a2:	2210      	movs	r2, #16
 800a6a4:	701a      	strb	r2, [r3, #0]
			}
			if (procBuff[procBuffpointer - 1] == 0x02){
 800a6a6:	4b8e      	ldr	r3, [pc, #568]	; (800a8e0 <recData+0x2c8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	4a8e      	ldr	r2, [pc, #568]	; (800a8e8 <recData+0x2d0>)
 800a6ae:	5cd3      	ldrb	r3, [r2, r3]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d106      	bne.n	800a6c2 <recData+0xaa>
				Debug_Send("conn\r\n");
 800a6b4:	4b8f      	ldr	r3, [pc, #572]	; (800a8f4 <recData+0x2dc>)
 800a6b6:	0018      	movs	r0, r3
 800a6b8:	f7ff ff94 	bl	800a5e4 <Debug_Send>
				//gsmInfo.MQTT_Data = 1;
				MQTTBuffpointer = 0;
 800a6bc:	4b8e      	ldr	r3, [pc, #568]	; (800a8f8 <recData+0x2e0>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	601a      	str	r2, [r3, #0]

			}
			if (procBuff[procBuffpointer - 1] == 0x90){
 800a6c2:	4b87      	ldr	r3, [pc, #540]	; (800a8e0 <recData+0x2c8>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	4a87      	ldr	r2, [pc, #540]	; (800a8e8 <recData+0x2d0>)
 800a6ca:	5cd3      	ldrb	r3, [r2, r3]
 800a6cc:	2b90      	cmp	r3, #144	; 0x90
 800a6ce:	d113      	bne.n	800a6f8 <recData+0xe0>
				Debug_Send("subscribed!!!!\r\n");
 800a6d0:	4b8a      	ldr	r3, [pc, #552]	; (800a8fc <recData+0x2e4>)
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	f7ff ff86 	bl	800a5e4 <Debug_Send>
				MQTTBuffpointer = 0;
 800a6d8:	4b87      	ldr	r3, [pc, #540]	; (800a8f8 <recData+0x2e0>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]
				gsmInfo.MQTT_Data = 1;
 800a6de:	4a83      	ldr	r2, [pc, #524]	; (800a8ec <recData+0x2d4>)
 800a6e0:	23c0      	movs	r3, #192	; 0xc0
 800a6e2:	005b      	lsls	r3, r3, #1
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	50d1      	str	r1, [r2, r3]
				gsmInfo.MQTT_Subscribe = 1;
 800a6e8:	4a80      	ldr	r2, [pc, #512]	; (800a8ec <recData+0x2d4>)
 800a6ea:	23c4      	movs	r3, #196	; 0xc4
 800a6ec:	005b      	lsls	r3, r3, #1
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	50d1      	str	r1, [r2, r3]
				mqttState = Publish;
 800a6f2:	4b83      	ldr	r3, [pc, #524]	; (800a900 <recData+0x2e8>)
 800a6f4:	2203      	movs	r2, #3
 800a6f6:	701a      	strb	r2, [r3, #0]
			}
			if (gsmInfo.MQTT_Data == 1){
 800a6f8:	4a7c      	ldr	r2, [pc, #496]	; (800a8ec <recData+0x2d4>)
 800a6fa:	23c0      	movs	r3, #192	; 0xc0
 800a6fc:	005b      	lsls	r3, r3, #1
 800a6fe:	58d3      	ldr	r3, [r2, r3]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d000      	beq.n	800a706 <recData+0xee>
 800a704:	e07a      	b.n	800a7fc <recData+0x1e4>
				mqttReceived[MQTTBuffpointer] = procBuff[procBuffpointer - 1];
 800a706:	4b76      	ldr	r3, [pc, #472]	; (800a8e0 <recData+0x2c8>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	1e5a      	subs	r2, r3, #1
 800a70c:	4b7a      	ldr	r3, [pc, #488]	; (800a8f8 <recData+0x2e0>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4975      	ldr	r1, [pc, #468]	; (800a8e8 <recData+0x2d0>)
 800a712:	5c89      	ldrb	r1, [r1, r2]
 800a714:	4a7b      	ldr	r2, [pc, #492]	; (800a904 <recData+0x2ec>)
 800a716:	54d1      	strb	r1, [r2, r3]
				myLongStr(MQTTBuffpointer,temp1,10,10);
 800a718:	4b77      	ldr	r3, [pc, #476]	; (800a8f8 <recData+0x2e0>)
 800a71a:	6818      	ldr	r0, [r3, #0]
 800a71c:	497a      	ldr	r1, [pc, #488]	; (800a908 <recData+0x2f0>)
 800a71e:	230a      	movs	r3, #10
 800a720:	220a      	movs	r2, #10
 800a722:	f002 f9af 	bl	800ca84 <myLongStr>
				Debug_Send("pos: ");
 800a726:	4b79      	ldr	r3, [pc, #484]	; (800a90c <recData+0x2f4>)
 800a728:	0018      	movs	r0, r3
 800a72a:	f7ff ff5b 	bl	800a5e4 <Debug_Send>
				Debug_Send(temp1);
 800a72e:	4b76      	ldr	r3, [pc, #472]	; (800a908 <recData+0x2f0>)
 800a730:	0018      	movs	r0, r3
 800a732:	f7ff ff57 	bl	800a5e4 <Debug_Send>
				Debug_Send("\r\n");
 800a736:	4b76      	ldr	r3, [pc, #472]	; (800a910 <recData+0x2f8>)
 800a738:	0018      	movs	r0, r3
 800a73a:	f7ff ff53 	bl	800a5e4 <Debug_Send>
				myLongStr(mqttReceived[MQTTBuffpointer],temp1,10,10);
 800a73e:	4b6e      	ldr	r3, [pc, #440]	; (800a8f8 <recData+0x2e0>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a70      	ldr	r2, [pc, #448]	; (800a904 <recData+0x2ec>)
 800a744:	5cd3      	ldrb	r3, [r2, r3]
 800a746:	0018      	movs	r0, r3
 800a748:	496f      	ldr	r1, [pc, #444]	; (800a908 <recData+0x2f0>)
 800a74a:	230a      	movs	r3, #10
 800a74c:	220a      	movs	r2, #10
 800a74e:	f002 f999 	bl	800ca84 <myLongStr>
				Debug_Send("byte: ");
 800a752:	4b70      	ldr	r3, [pc, #448]	; (800a914 <recData+0x2fc>)
 800a754:	0018      	movs	r0, r3
 800a756:	f7ff ff45 	bl	800a5e4 <Debug_Send>
				Debug_Send(temp1);
 800a75a:	4b6b      	ldr	r3, [pc, #428]	; (800a908 <recData+0x2f0>)
 800a75c:	0018      	movs	r0, r3
 800a75e:	f7ff ff41 	bl	800a5e4 <Debug_Send>
				Debug_Send("\r\n");
 800a762:	4b6b      	ldr	r3, [pc, #428]	; (800a910 <recData+0x2f8>)
 800a764:	0018      	movs	r0, r3
 800a766:	f7ff ff3d 	bl	800a5e4 <Debug_Send>
				if (mqttReceived[MQTTBuffpointer] == 0x02){
 800a76a:	4b63      	ldr	r3, [pc, #396]	; (800a8f8 <recData+0x2e0>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a65      	ldr	r2, [pc, #404]	; (800a904 <recData+0x2ec>)
 800a770:	5cd3      	ldrb	r3, [r2, r3]
 800a772:	2b02      	cmp	r3, #2
 800a774:	d109      	bne.n	800a78a <recData+0x172>
					Debug_Send("Connected\r\n");
 800a776:	4b68      	ldr	r3, [pc, #416]	; (800a918 <recData+0x300>)
 800a778:	0018      	movs	r0, r3
 800a77a:	f7ff ff33 	bl	800a5e4 <Debug_Send>
					mqttState = Subscribe;
 800a77e:	4b60      	ldr	r3, [pc, #384]	; (800a900 <recData+0x2e8>)
 800a780:	2202      	movs	r2, #2
 800a782:	701a      	strb	r2, [r3, #0]
					gsmState = GPRS_Send;
 800a784:	4b5a      	ldr	r3, [pc, #360]	; (800a8f0 <recData+0x2d8>)
 800a786:	221c      	movs	r2, #28
 800a788:	701a      	strb	r2, [r3, #0]
				}
				if (MQTTBuffpointer == 1){
 800a78a:	4b5b      	ldr	r3, [pc, #364]	; (800a8f8 <recData+0x2e0>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d11d      	bne.n	800a7ce <recData+0x1b6>
					gsmInfo.MQTT_Size = mqttReceived[MQTTBuffpointer];
 800a792:	4b59      	ldr	r3, [pc, #356]	; (800a8f8 <recData+0x2e0>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a5b      	ldr	r2, [pc, #364]	; (800a904 <recData+0x2ec>)
 800a798:	5cd3      	ldrb	r3, [r2, r3]
 800a79a:	0019      	movs	r1, r3
 800a79c:	4a53      	ldr	r2, [pc, #332]	; (800a8ec <recData+0x2d4>)
 800a79e:	23c2      	movs	r3, #194	; 0xc2
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	50d1      	str	r1, [r2, r3]
					myLongStr(gsmInfo.MQTT_Size,temp1,10,10);
 800a7a4:	4a51      	ldr	r2, [pc, #324]	; (800a8ec <recData+0x2d4>)
 800a7a6:	23c2      	movs	r3, #194	; 0xc2
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	58d0      	ldr	r0, [r2, r3]
 800a7ac:	4956      	ldr	r1, [pc, #344]	; (800a908 <recData+0x2f0>)
 800a7ae:	230a      	movs	r3, #10
 800a7b0:	220a      	movs	r2, #10
 800a7b2:	f002 f967 	bl	800ca84 <myLongStr>
					Debug_Send("Size: ");
 800a7b6:	4b59      	ldr	r3, [pc, #356]	; (800a91c <recData+0x304>)
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	f7ff ff13 	bl	800a5e4 <Debug_Send>
					Debug_Send(temp1);
 800a7be:	4b52      	ldr	r3, [pc, #328]	; (800a908 <recData+0x2f0>)
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	f7ff ff0f 	bl	800a5e4 <Debug_Send>
					Debug_Send("\r\n");
 800a7c6:	4b52      	ldr	r3, [pc, #328]	; (800a910 <recData+0x2f8>)
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	f7ff ff0b 	bl	800a5e4 <Debug_Send>
				}
				MQTTBuffpointer++;
 800a7ce:	4b4a      	ldr	r3, [pc, #296]	; (800a8f8 <recData+0x2e0>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	4b48      	ldr	r3, [pc, #288]	; (800a8f8 <recData+0x2e0>)
 800a7d6:	601a      	str	r2, [r3, #0]
				if(MQTTBuffpointer>gsmInfo.MQTT_Size+1){
 800a7d8:	4a44      	ldr	r2, [pc, #272]	; (800a8ec <recData+0x2d4>)
 800a7da:	23c2      	movs	r3, #194	; 0xc2
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	58d3      	ldr	r3, [r2, r3]
 800a7e0:	1c5a      	adds	r2, r3, #1
 800a7e2:	4b45      	ldr	r3, [pc, #276]	; (800a8f8 <recData+0x2e0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	da08      	bge.n	800a7fc <recData+0x1e4>
					gsmInfo.MQTT_Data = 0;
 800a7ea:	4a40      	ldr	r2, [pc, #256]	; (800a8ec <recData+0x2d4>)
 800a7ec:	23c0      	movs	r3, #192	; 0xc0
 800a7ee:	005b      	lsls	r3, r3, #1
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	50d1      	str	r1, [r2, r3]
					Debug_Send("mqtt stop\r\n");
 800a7f4:	4b4a      	ldr	r3, [pc, #296]	; (800a920 <recData+0x308>)
 800a7f6:	0018      	movs	r0, r3
 800a7f8:	f7ff fef4 	bl	800a5e4 <Debug_Send>
				}
				//if ((MQTTBuffpointer > gsmInfo.MQTT_Size + 2)||(gsmInfo.MQTT_Size == 0)) MQTT_Process();
			}
			if (gsmInfo.MQTT_Subscribe == 1){
 800a7fc:	4a3b      	ldr	r2, [pc, #236]	; (800a8ec <recData+0x2d4>)
 800a7fe:	23c4      	movs	r3, #196	; 0xc4
 800a800:	005b      	lsls	r3, r3, #1
 800a802:	58d3      	ldr	r3, [r2, r3]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d137      	bne.n	800a878 <recData+0x260>
				mqttReceived[mqttCounter] = procBuff[procBuffpointer - 1];
 800a808:	4b35      	ldr	r3, [pc, #212]	; (800a8e0 <recData+0x2c8>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	1e5a      	subs	r2, r3, #1
 800a80e:	4b45      	ldr	r3, [pc, #276]	; (800a924 <recData+0x30c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4935      	ldr	r1, [pc, #212]	; (800a8e8 <recData+0x2d0>)
 800a814:	5c89      	ldrb	r1, [r1, r2]
 800a816:	4a3b      	ldr	r2, [pc, #236]	; (800a904 <recData+0x2ec>)
 800a818:	54d1      	strb	r1, [r2, r3]
				myLongStr(mqttCounter,temp1,10,10);
 800a81a:	4b42      	ldr	r3, [pc, #264]	; (800a924 <recData+0x30c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	0018      	movs	r0, r3
 800a820:	4939      	ldr	r1, [pc, #228]	; (800a908 <recData+0x2f0>)
 800a822:	230a      	movs	r3, #10
 800a824:	220a      	movs	r2, #10
 800a826:	f002 f92d 	bl	800ca84 <myLongStr>
				Debug_Send("pos: ");
 800a82a:	4b38      	ldr	r3, [pc, #224]	; (800a90c <recData+0x2f4>)
 800a82c:	0018      	movs	r0, r3
 800a82e:	f7ff fed9 	bl	800a5e4 <Debug_Send>
				Debug_Send(temp1);
 800a832:	4b35      	ldr	r3, [pc, #212]	; (800a908 <recData+0x2f0>)
 800a834:	0018      	movs	r0, r3
 800a836:	f7ff fed5 	bl	800a5e4 <Debug_Send>
				Debug_Send(" - ");
 800a83a:	4b3b      	ldr	r3, [pc, #236]	; (800a928 <recData+0x310>)
 800a83c:	0018      	movs	r0, r3
 800a83e:	f7ff fed1 	bl	800a5e4 <Debug_Send>
				myLongStr(mqttReceived[mqttCounter],temp1,10,10);
 800a842:	4b38      	ldr	r3, [pc, #224]	; (800a924 <recData+0x30c>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a2f      	ldr	r2, [pc, #188]	; (800a904 <recData+0x2ec>)
 800a848:	5cd3      	ldrb	r3, [r2, r3]
 800a84a:	0018      	movs	r0, r3
 800a84c:	492e      	ldr	r1, [pc, #184]	; (800a908 <recData+0x2f0>)
 800a84e:	230a      	movs	r3, #10
 800a850:	220a      	movs	r2, #10
 800a852:	f002 f917 	bl	800ca84 <myLongStr>
				Debug_Send(temp1);
 800a856:	4b2c      	ldr	r3, [pc, #176]	; (800a908 <recData+0x2f0>)
 800a858:	0018      	movs	r0, r3
 800a85a:	f7ff fec3 	bl	800a5e4 <Debug_Send>
				Debug_Send("\r\n");
 800a85e:	4b2c      	ldr	r3, [pc, #176]	; (800a910 <recData+0x2f8>)
 800a860:	0018      	movs	r0, r3
 800a862:	f7ff febf 	bl	800a5e4 <Debug_Send>
				if (mqttReceived[mqttCounter] == 0x02){

				}
				mqttCounter++;
 800a866:	4b2f      	ldr	r3, [pc, #188]	; (800a924 <recData+0x30c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	4b2d      	ldr	r3, [pc, #180]	; (800a924 <recData+0x30c>)
 800a86e:	601a      	str	r2, [r3, #0]
				Debug_Send("subscribe\r\n");
 800a870:	4b2e      	ldr	r3, [pc, #184]	; (800a92c <recData+0x314>)
 800a872:	0018      	movs	r0, r3
 800a874:	f7ff feb6 	bl	800a5e4 <Debug_Send>
			}

			if (procBuff[procBuffpointer - 1] == 0x0A){
 800a878:	4b19      	ldr	r3, [pc, #100]	; (800a8e0 <recData+0x2c8>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3b01      	subs	r3, #1
 800a87e:	4a1a      	ldr	r2, [pc, #104]	; (800a8e8 <recData+0x2d0>)
 800a880:	5cd3      	ldrb	r3, [r2, r3]
 800a882:	2b0a      	cmp	r3, #10
 800a884:	d108      	bne.n	800a898 <recData+0x280>
				procBuff[procBuffpointer - 1] = 0;
 800a886:	4b16      	ldr	r3, [pc, #88]	; (800a8e0 <recData+0x2c8>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	4a16      	ldr	r2, [pc, #88]	; (800a8e8 <recData+0x2d0>)
 800a88e:	2100      	movs	r1, #0
 800a890:	54d1      	strb	r1, [r2, r3]
				procBuffpointer = 0;
 800a892:	4b13      	ldr	r3, [pc, #76]	; (800a8e0 <recData+0x2c8>)
 800a894:	2200      	movs	r2, #0
 800a896:	601a      	str	r2, [r3, #0]
				//sendData(procBuff,UART0);
				//sendData("\r\n",UART0);
				//Debug_Send("A");
				//procBuffpointer--;
			}
			if (procBuff[procBuffpointer - 1] == 0x0D){
 800a898:	4b11      	ldr	r3, [pc, #68]	; (800a8e0 <recData+0x2c8>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	4a12      	ldr	r2, [pc, #72]	; (800a8e8 <recData+0x2d0>)
 800a8a0:	5cd3      	ldrb	r3, [r2, r3]
 800a8a2:	2b0d      	cmp	r3, #13
 800a8a4:	d111      	bne.n	800a8ca <recData+0x2b2>
				procBuff[procBuffpointer - 1] = 0;
 800a8a6:	4b0e      	ldr	r3, [pc, #56]	; (800a8e0 <recData+0x2c8>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	4a0e      	ldr	r2, [pc, #56]	; (800a8e8 <recData+0x2d0>)
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	54d1      	strb	r1, [r2, r3]
				procBuffpointer = 0;
 800a8b2:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <recData+0x2c8>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	601a      	str	r2, [r3, #0]
				//Debug_Send(procBuff);
				//Debug_Send("\r\n");
				//Debug_Send("D");
				procData();
 800a8b8:	f000 f83a 	bl	800a930 <procData>
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800a8bc:	2380      	movs	r3, #128	; 0x80
 800a8be:	019b      	lsls	r3, r3, #6
 800a8c0:	4a03      	ldr	r2, [pc, #12]	; (800a8d0 <recData+0x2b8>)
 800a8c2:	0019      	movs	r1, r3
 800a8c4:	0010      	movs	r0, r2
 800a8c6:	f002 ff66 	bl	800d796 <HAL_GPIO_TogglePin>
				//("0x0D\r\n");

			}
		}
	//}
}
 800a8ca:	46c0      	nop			; (mov r8, r8)
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	48000800 	.word	0x48000800
 800a8d4:	20000168 	.word	0x20000168
 800a8d8:	2000016c 	.word	0x2000016c
 800a8dc:	20000184 	.word	0x20000184
 800a8e0:	20000170 	.word	0x20000170
 800a8e4:	2000115c 	.word	0x2000115c
 800a8e8:	200015a0 	.word	0x200015a0
 800a8ec:	20001720 	.word	0x20001720
 800a8f0:	200000c0 	.word	0x200000c0
 800a8f4:	08012a70 	.word	0x08012a70
 800a8f8:	20000174 	.word	0x20000174
 800a8fc:	08012a78 	.word	0x08012a78
 800a900:	200000d0 	.word	0x200000d0
 800a904:	20001688 	.word	0x20001688
 800a908:	20001578 	.word	0x20001578
 800a90c:	08012a8c 	.word	0x08012a8c
 800a910:	0801254c 	.word	0x0801254c
 800a914:	08012a94 	.word	0x08012a94
 800a918:	08012a9c 	.word	0x08012a9c
 800a91c:	08012aa8 	.word	0x08012aa8
 800a920:	08012ab0 	.word	0x08012ab0
 800a924:	20001568 	.word	0x20001568
 800a928:	08012abc 	.word	0x08012abc
 800a92c:	08012ac0 	.word	0x08012ac0

0800a930 <procData>:
void MQTT_Process(){
	Debug_Send("Process MQTT\r\n");
	gsmInfo.MQTT_Data = 0;
}

void procData(){		//process line
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af02      	add	r7, sp, #8
	//Debug_Send("Rx:");
	//Debug_Send(procBuff);
	//Debug_Send("\r\n");
	if (gsmInfo.FTP_Data == 0){
 800a936:	4ac0      	ldr	r2, [pc, #768]	; (800ac38 <procData+0x308>)
 800a938:	23b8      	movs	r3, #184	; 0xb8
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	58d3      	ldr	r3, [r2, r3]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d120      	bne.n	800a984 <procData+0x54>
		strcpy(temp,"Rx:");
 800a942:	4abe      	ldr	r2, [pc, #760]	; (800ac3c <procData+0x30c>)
 800a944:	4bbe      	ldr	r3, [pc, #760]	; (800ac40 <procData+0x310>)
 800a946:	0010      	movs	r0, r2
 800a948:	0019      	movs	r1, r3
 800a94a:	2304      	movs	r3, #4
 800a94c:	001a      	movs	r2, r3
 800a94e:	f007 f8d5 	bl	8011afc <memcpy>
		strcat(temp,procBuff);
 800a952:	4abc      	ldr	r2, [pc, #752]	; (800ac44 <procData+0x314>)
 800a954:	4bb9      	ldr	r3, [pc, #740]	; (800ac3c <procData+0x30c>)
 800a956:	0011      	movs	r1, r2
 800a958:	0018      	movs	r0, r3
 800a95a:	f007 f901 	bl	8011b60 <strcat>
		strcat(temp,"\r\n");
 800a95e:	4bb7      	ldr	r3, [pc, #732]	; (800ac3c <procData+0x30c>)
 800a960:	0018      	movs	r0, r3
 800a962:	f7fe fbdb 	bl	800911c <strlen>
 800a966:	0003      	movs	r3, r0
 800a968:	001a      	movs	r2, r3
 800a96a:	4bb4      	ldr	r3, [pc, #720]	; (800ac3c <procData+0x30c>)
 800a96c:	18d2      	adds	r2, r2, r3
 800a96e:	4bb6      	ldr	r3, [pc, #728]	; (800ac48 <procData+0x318>)
 800a970:	0010      	movs	r0, r2
 800a972:	0019      	movs	r1, r3
 800a974:	2303      	movs	r3, #3
 800a976:	001a      	movs	r2, r3
 800a978:	f007 f8c0 	bl	8011afc <memcpy>
		Debug_Send(temp);
 800a97c:	4baf      	ldr	r3, [pc, #700]	; (800ac3c <procData+0x30c>)
 800a97e:	0018      	movs	r0, r3
 800a980:	f7ff fe30 	bl	800a5e4 <Debug_Send>
	}
	if (procBuff[0] == 0x02) Debug_Send("Unit connected to MQTT\r\n");
 800a984:	4baf      	ldr	r3, [pc, #700]	; (800ac44 <procData+0x314>)
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d103      	bne.n	800a994 <procData+0x64>
 800a98c:	4baf      	ldr	r3, [pc, #700]	; (800ac4c <procData+0x31c>)
 800a98e:	0018      	movs	r0, r3
 800a990:	f7ff fe28 	bl	800a5e4 <Debug_Send>
	if (gsmInfo.MQTT_Data == 1){
 800a994:	4aa8      	ldr	r2, [pc, #672]	; (800ac38 <procData+0x308>)
 800a996:	23c0      	movs	r3, #192	; 0xc0
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	58d3      	ldr	r3, [r2, r3]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d118      	bne.n	800a9d2 <procData+0xa2>

		myLongStr(tempGPRS[1],temp1,10,10);
 800a9a0:	4bab      	ldr	r3, [pc, #684]	; (800ac50 <procData+0x320>)
 800a9a2:	785b      	ldrb	r3, [r3, #1]
 800a9a4:	0018      	movs	r0, r3
 800a9a6:	49ab      	ldr	r1, [pc, #684]	; (800ac54 <procData+0x324>)
 800a9a8:	230a      	movs	r3, #10
 800a9aa:	220a      	movs	r2, #10
 800a9ac:	f002 f86a 	bl	800ca84 <myLongStr>
		Debug_Send("MQTT1: ");
 800a9b0:	4ba9      	ldr	r3, [pc, #676]	; (800ac58 <procData+0x328>)
 800a9b2:	0018      	movs	r0, r3
 800a9b4:	f7ff fe16 	bl	800a5e4 <Debug_Send>
		Debug_Send(temp1);
 800a9b8:	4ba6      	ldr	r3, [pc, #664]	; (800ac54 <procData+0x324>)
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	f7ff fe12 	bl	800a5e4 <Debug_Send>
		Debug_Send("\r\n");
 800a9c0:	4ba1      	ldr	r3, [pc, #644]	; (800ac48 <procData+0x318>)
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	f7ff fe0e 	bl	800a5e4 <Debug_Send>
		gsmInfo.MQTT_Data = 0;
 800a9c8:	4a9b      	ldr	r2, [pc, #620]	; (800ac38 <procData+0x308>)
 800a9ca:	23c0      	movs	r3, #192	; 0xc0
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	50d1      	str	r1, [r2, r3]
	}
	uint8_t crc = 0;
 800a9d2:	1dfb      	adds	r3, r7, #7
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	701a      	strb	r2, [r3, #0]
	if (smsFlags.content == 1){
 800a9d8:	4ba0      	ldr	r3, [pc, #640]	; (800ac5c <procData+0x32c>)
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d110      	bne.n	800aa02 <procData+0xd2>
		smsFlags.content = 0;
 800a9e0:	4b9e      	ldr	r3, [pc, #632]	; (800ac5c <procData+0x32c>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	611a      	str	r2, [r3, #16]
		smsFlags.del = 1;
 800a9e6:	4b9d      	ldr	r3, [pc, #628]	; (800ac5c <procData+0x32c>)
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	621a      	str	r2, [r3, #32]
		//if(strncmp((char*)smsInfo.index,"1",2)==0){
			//sendData("Got index: ",UART0);
			//sendData(smsInfo.index,UART0);
			//sendData("\r\n",UART0);
			strcpy(smsInfo.content1,procBuff);	//store SMS content
 800a9ec:	4a95      	ldr	r2, [pc, #596]	; (800ac44 <procData+0x314>)
 800a9ee:	4b9c      	ldr	r3, [pc, #624]	; (800ac60 <procData+0x330>)
 800a9f0:	0011      	movs	r1, r2
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	f007 f8c1 	bl	8011b7a <strcpy>
		}*/
		//sendData("SMS conent:",UART0);
		//sendData(smsInfo.content,UART0);
		//sendData("\r\n",UART0);
		//sendData("Got SMS content\r\n",UART0);
			Debug_Send("SMS Process Done\r\n");
 800a9f8:	4b9a      	ldr	r3, [pc, #616]	; (800ac64 <procData+0x334>)
 800a9fa:	0018      	movs	r0, r3
 800a9fc:	f7ff fdf2 	bl	800a5e4 <Debug_Send>


	//sendData(procBuff,UART0);
	//sendData("\r\n",UART0);
	//else if(strncmp((char*)procBuff,"+SIM READY1",8)==0);		//unsolicited
}
 800aa00:	e34c      	b.n	800b09c <procData+0x76c>
	else if (gsmInfo.imeiFlag > 1){
 800aa02:	4a8d      	ldr	r2, [pc, #564]	; (800ac38 <procData+0x308>)
 800aa04:	23a8      	movs	r3, #168	; 0xa8
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	58d3      	ldr	r3, [r2, r3]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	dd18      	ble.n	800aa40 <procData+0x110>
		Debug_Send("DEC imei\r\n");
 800aa0e:	4b96      	ldr	r3, [pc, #600]	; (800ac68 <procData+0x338>)
 800aa10:	0018      	movs	r0, r3
 800aa12:	f7ff fde7 	bl	800a5e4 <Debug_Send>
		len = strlen((char*)procBuff);
 800aa16:	4b8b      	ldr	r3, [pc, #556]	; (800ac44 <procData+0x314>)
 800aa18:	0018      	movs	r0, r3
 800aa1a:	f7fe fb7f 	bl	800911c <strlen>
 800aa1e:	0003      	movs	r3, r0
 800aa20:	603b      	str	r3, [r7, #0]
		if (len  >= 9)getIMEI();
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	2b08      	cmp	r3, #8
 800aa26:	dd01      	ble.n	800aa2c <procData+0xfc>
 800aa28:	f000 fcd0 	bl	800b3cc <getIMEI>
		gsmInfo.imeiFlag--;
 800aa2c:	4a82      	ldr	r2, [pc, #520]	; (800ac38 <procData+0x308>)
 800aa2e:	23a8      	movs	r3, #168	; 0xa8
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	58d3      	ldr	r3, [r2, r3]
 800aa34:	1e59      	subs	r1, r3, #1
 800aa36:	4a80      	ldr	r2, [pc, #512]	; (800ac38 <procData+0x308>)
 800aa38:	23a8      	movs	r3, #168	; 0xa8
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	50d1      	str	r1, [r2, r3]
}
 800aa3e:	e32d      	b.n	800b09c <procData+0x76c>
	else if (gsmInfo.FTP_Data == 1){
 800aa40:	4a7d      	ldr	r2, [pc, #500]	; (800ac38 <procData+0x308>)
 800aa42:	23b8      	movs	r3, #184	; 0xb8
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	58d3      	ldr	r3, [r2, r3]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d159      	bne.n	800ab00 <procData+0x1d0>
		 while (crc == 0){
 800aa4c:	e031      	b.n	800aab2 <procData+0x182>
			flashWrite(gsmInfo.FTP_Save_Addr,ftpReceived, ftpReceive);
 800aa4e:	4a7a      	ldr	r2, [pc, #488]	; (800ac38 <procData+0x308>)
 800aa50:	23ba      	movs	r3, #186	; 0xba
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	58d0      	ldr	r0, [r2, r3]
 800aa56:	4b85      	ldr	r3, [pc, #532]	; (800ac6c <procData+0x33c>)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	4b85      	ldr	r3, [pc, #532]	; (800ac70 <procData+0x340>)
 800aa5c:	0019      	movs	r1, r3
 800aa5e:	f001 fe97 	bl	800c790 <flashWrite>
			flashRead(gsmInfo.FTP_Save_Addr,temp, ftpReceive);
 800aa62:	4a75      	ldr	r2, [pc, #468]	; (800ac38 <procData+0x308>)
 800aa64:	23ba      	movs	r3, #186	; 0xba
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	58d0      	ldr	r0, [r2, r3]
 800aa6a:	4b80      	ldr	r3, [pc, #512]	; (800ac6c <procData+0x33c>)
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	4b73      	ldr	r3, [pc, #460]	; (800ac3c <procData+0x30c>)
 800aa70:	0019      	movs	r1, r3
 800aa72:	f001 fee3 	bl	800c83c <flashRead>
			ftpReceived[ftpReceive] = 0;
 800aa76:	4b7d      	ldr	r3, [pc, #500]	; (800ac6c <procData+0x33c>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a7d      	ldr	r2, [pc, #500]	; (800ac70 <procData+0x340>)
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	54d1      	strb	r1, [r2, r3]
			temp[ftpReceive] = 0;
 800aa80:	4b7a      	ldr	r3, [pc, #488]	; (800ac6c <procData+0x33c>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a6d      	ldr	r2, [pc, #436]	; (800ac3c <procData+0x30c>)
 800aa86:	2100      	movs	r1, #0
 800aa88:	54d1      	strb	r1, [r2, r3]
			if (strcmp(ftpReceived,temp) == 0){
 800aa8a:	4a6c      	ldr	r2, [pc, #432]	; (800ac3c <procData+0x30c>)
 800aa8c:	4b78      	ldr	r3, [pc, #480]	; (800ac70 <procData+0x340>)
 800aa8e:	0011      	movs	r1, r2
 800aa90:	0018      	movs	r0, r3
 800aa92:	f7fe fb39 	bl	8009108 <strcmp>
 800aa96:	0001      	movs	r1, r0
 800aa98:	1dfb      	adds	r3, r7, #7
 800aa9a:	1dfa      	adds	r2, r7, #7
 800aa9c:	7812      	ldrb	r2, [r2, #0]
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	2900      	cmp	r1, #0
 800aaa2:	d106      	bne.n	800aab2 <procData+0x182>
				Debug_Send("Data written!\r\n");
 800aaa4:	4b73      	ldr	r3, [pc, #460]	; (800ac74 <procData+0x344>)
 800aaa6:	0018      	movs	r0, r3
 800aaa8:	f7ff fd9c 	bl	800a5e4 <Debug_Send>
				crc = 1;
 800aaac:	1dfb      	adds	r3, r7, #7
 800aaae:	2201      	movs	r2, #1
 800aab0:	701a      	strb	r2, [r3, #0]
		 while (crc == 0){
 800aab2:	1dfb      	adds	r3, r7, #7
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0c9      	beq.n	800aa4e <procData+0x11e>
		 crc = 0;
 800aaba:	1dfb      	adds	r3, r7, #7
 800aabc:	2200      	movs	r2, #0
 800aabe:	701a      	strb	r2, [r3, #0]
			gsmInfo.FTP_Save_Addr += ftpReceive;
 800aac0:	4a5d      	ldr	r2, [pc, #372]	; (800ac38 <procData+0x308>)
 800aac2:	23ba      	movs	r3, #186	; 0xba
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	58d3      	ldr	r3, [r2, r3]
 800aac8:	001a      	movs	r2, r3
 800aaca:	4b68      	ldr	r3, [pc, #416]	; (800ac6c <procData+0x33c>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	18d3      	adds	r3, r2, r3
 800aad0:	0019      	movs	r1, r3
 800aad2:	4a59      	ldr	r2, [pc, #356]	; (800ac38 <procData+0x308>)
 800aad4:	23ba      	movs	r3, #186	; 0xba
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	50d1      	str	r1, [r2, r3]
			gsmInfo.FTP_Size += ftpReceive;
 800aada:	4a57      	ldr	r2, [pc, #348]	; (800ac38 <procData+0x308>)
 800aadc:	23bc      	movs	r3, #188	; 0xbc
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	58d3      	ldr	r3, [r2, r3]
 800aae2:	001a      	movs	r2, r3
 800aae4:	4b61      	ldr	r3, [pc, #388]	; (800ac6c <procData+0x33c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	18d3      	adds	r3, r2, r3
 800aaea:	0019      	movs	r1, r3
 800aaec:	4a52      	ldr	r2, [pc, #328]	; (800ac38 <procData+0x308>)
 800aaee:	23bc      	movs	r3, #188	; 0xbc
 800aaf0:	005b      	lsls	r3, r3, #1
 800aaf2:	50d1      	str	r1, [r2, r3]
			gsmInfo.FTP_Data = 0;
 800aaf4:	4a50      	ldr	r2, [pc, #320]	; (800ac38 <procData+0x308>)
 800aaf6:	23b8      	movs	r3, #184	; 0xb8
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	2100      	movs	r1, #0
 800aafc:	50d1      	str	r1, [r2, r3]
}
 800aafe:	e2cd      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"AT+CGSN",7)==0){
 800ab00:	495d      	ldr	r1, [pc, #372]	; (800ac78 <procData+0x348>)
 800ab02:	4b50      	ldr	r3, [pc, #320]	; (800ac44 <procData+0x314>)
 800ab04:	2207      	movs	r2, #7
 800ab06:	0018      	movs	r0, r3
 800ab08:	f007 f83f 	bl	8011b8a <strncmp>
 800ab0c:	1e03      	subs	r3, r0, #0
 800ab0e:	d105      	bne.n	800ab1c <procData+0x1ec>
			gsmInfo.imeiFlag = 5;
 800ab10:	4a49      	ldr	r2, [pc, #292]	; (800ac38 <procData+0x308>)
 800ab12:	23a8      	movs	r3, #168	; 0xa8
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	2105      	movs	r1, #5
 800ab18:	50d1      	str	r1, [r2, r3]
}
 800ab1a:	e2bf      	b.n	800b09c <procData+0x76c>
	else if (gsmInfo.GPRS_Rec == 1){
 800ab1c:	4a46      	ldr	r2, [pc, #280]	; (800ac38 <procData+0x308>)
 800ab1e:	23ac      	movs	r3, #172	; 0xac
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	58d3      	ldr	r3, [r2, r3]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d102      	bne.n	800ab2e <procData+0x1fe>
		DataDecrypt();
 800ab28:	f001 f830 	bl	800bb8c <DataDecrypt>
}
 800ab2c:	e2b6      	b.n	800b09c <procData+0x76c>
	else if (gsmInfo.GPRS_Rec > 1) gsmInfo.GPRS_Rec--;
 800ab2e:	4a42      	ldr	r2, [pc, #264]	; (800ac38 <procData+0x308>)
 800ab30:	23ac      	movs	r3, #172	; 0xac
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	58d3      	ldr	r3, [r2, r3]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	dd09      	ble.n	800ab4e <procData+0x21e>
 800ab3a:	4a3f      	ldr	r2, [pc, #252]	; (800ac38 <procData+0x308>)
 800ab3c:	23ac      	movs	r3, #172	; 0xac
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	58d3      	ldr	r3, [r2, r3]
 800ab42:	1e59      	subs	r1, r3, #1
 800ab44:	4a3c      	ldr	r2, [pc, #240]	; (800ac38 <procData+0x308>)
 800ab46:	23ac      	movs	r3, #172	; 0xac
 800ab48:	005b      	lsls	r3, r3, #1
 800ab4a:	50d1      	str	r1, [r2, r3]
}
 800ab4c:	e2a6      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+CREG: 0,1",10)==0)gsmState = SMSconfig;
 800ab4e:	494b      	ldr	r1, [pc, #300]	; (800ac7c <procData+0x34c>)
 800ab50:	4b3c      	ldr	r3, [pc, #240]	; (800ac44 <procData+0x314>)
 800ab52:	220a      	movs	r2, #10
 800ab54:	0018      	movs	r0, r3
 800ab56:	f007 f818 	bl	8011b8a <strncmp>
 800ab5a:	1e03      	subs	r3, r0, #0
 800ab5c:	d103      	bne.n	800ab66 <procData+0x236>
 800ab5e:	4b48      	ldr	r3, [pc, #288]	; (800ac80 <procData+0x350>)
 800ab60:	2206      	movs	r2, #6
 800ab62:	701a      	strb	r2, [r3, #0]
}
 800ab64:	e29a      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+CREG: 1",8)==0)gsmState = SMSconfig;
 800ab66:	4947      	ldr	r1, [pc, #284]	; (800ac84 <procData+0x354>)
 800ab68:	4b36      	ldr	r3, [pc, #216]	; (800ac44 <procData+0x314>)
 800ab6a:	2208      	movs	r2, #8
 800ab6c:	0018      	movs	r0, r3
 800ab6e:	f007 f80c 	bl	8011b8a <strncmp>
 800ab72:	1e03      	subs	r3, r0, #0
 800ab74:	d103      	bne.n	800ab7e <procData+0x24e>
 800ab76:	4b42      	ldr	r3, [pc, #264]	; (800ac80 <procData+0x350>)
 800ab78:	2206      	movs	r2, #6
 800ab7a:	701a      	strb	r2, [r3, #0]
}
 800ab7c:	e28e      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+CGREG: 1",9)==0) Debug_Send("GOT GPRS!!!!!!!\r\n");
 800ab7e:	4942      	ldr	r1, [pc, #264]	; (800ac88 <procData+0x358>)
 800ab80:	4b30      	ldr	r3, [pc, #192]	; (800ac44 <procData+0x314>)
 800ab82:	2209      	movs	r2, #9
 800ab84:	0018      	movs	r0, r3
 800ab86:	f007 f800 	bl	8011b8a <strncmp>
 800ab8a:	1e03      	subs	r3, r0, #0
 800ab8c:	d104      	bne.n	800ab98 <procData+0x268>
 800ab8e:	4b3f      	ldr	r3, [pc, #252]	; (800ac8c <procData+0x35c>)
 800ab90:	0018      	movs	r0, r3
 800ab92:	f7ff fd27 	bl	800a5e4 <Debug_Send>
}
 800ab96:	e281      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+CSQ",4)==0)getSignal();
 800ab98:	493d      	ldr	r1, [pc, #244]	; (800ac90 <procData+0x360>)
 800ab9a:	4b2a      	ldr	r3, [pc, #168]	; (800ac44 <procData+0x314>)
 800ab9c:	2204      	movs	r2, #4
 800ab9e:	0018      	movs	r0, r3
 800aba0:	f006 fff3 	bl	8011b8a <strncmp>
 800aba4:	1e03      	subs	r3, r0, #0
 800aba6:	d102      	bne.n	800abae <procData+0x27e>
 800aba8:	f000 fc58 	bl	800b45c <getSignal>
}
 800abac:	e276      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+CMGS:",6)==0)smsFlags.send = 0;
 800abae:	4939      	ldr	r1, [pc, #228]	; (800ac94 <procData+0x364>)
 800abb0:	4b24      	ldr	r3, [pc, #144]	; (800ac44 <procData+0x314>)
 800abb2:	2206      	movs	r2, #6
 800abb4:	0018      	movs	r0, r3
 800abb6:	f006 ffe8 	bl	8011b8a <strncmp>
 800abba:	1e03      	subs	r3, r0, #0
 800abbc:	d103      	bne.n	800abc6 <procData+0x296>
 800abbe:	4b27      	ldr	r3, [pc, #156]	; (800ac5c <procData+0x32c>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	609a      	str	r2, [r3, #8]
}
 800abc4:	e26a      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+CCID:",6)==0)getCCID();
 800abc6:	4934      	ldr	r1, [pc, #208]	; (800ac98 <procData+0x368>)
 800abc8:	4b1e      	ldr	r3, [pc, #120]	; (800ac44 <procData+0x314>)
 800abca:	2206      	movs	r2, #6
 800abcc:	0018      	movs	r0, r3
 800abce:	f006 ffdc 	bl	8011b8a <strncmp>
 800abd2:	1e03      	subs	r3, r0, #0
 800abd4:	d102      	bne.n	800abdc <procData+0x2ac>
 800abd6:	f000 fc2f 	bl	800b438 <getCCID>
}
 800abda:	e25f      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"OK",3)==0)	OK();
 800abdc:	4a2f      	ldr	r2, [pc, #188]	; (800ac9c <procData+0x36c>)
 800abde:	4b19      	ldr	r3, [pc, #100]	; (800ac44 <procData+0x314>)
 800abe0:	0011      	movs	r1, r2
 800abe2:	0018      	movs	r0, r3
 800abe4:	f7fe fa90 	bl	8009108 <strcmp>
 800abe8:	1e03      	subs	r3, r0, #0
 800abea:	d102      	bne.n	800abf2 <procData+0x2c2>
 800abec:	f000 ff46 	bl	800ba7c <OK>
}
 800abf0:	e254      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+CGPADDR",8)==0)Context();
 800abf2:	492b      	ldr	r1, [pc, #172]	; (800aca0 <procData+0x370>)
 800abf4:	4b13      	ldr	r3, [pc, #76]	; (800ac44 <procData+0x314>)
 800abf6:	2208      	movs	r2, #8
 800abf8:	0018      	movs	r0, r3
 800abfa:	f006 ffc6 	bl	8011b8a <strncmp>
 800abfe:	1e03      	subs	r3, r0, #0
 800ac00:	d102      	bne.n	800ac08 <procData+0x2d8>
 800ac02:	f000 fec3 	bl	800b98c <Context>
}
 800ac06:	e249      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"CONNECT",6)==0){
 800ac08:	4926      	ldr	r1, [pc, #152]	; (800aca4 <procData+0x374>)
 800ac0a:	4b0e      	ldr	r3, [pc, #56]	; (800ac44 <procData+0x314>)
 800ac0c:	2206      	movs	r2, #6
 800ac0e:	0018      	movs	r0, r3
 800ac10:	f006 ffbb 	bl	8011b8a <strncmp>
 800ac14:	1e03      	subs	r3, r0, #0
 800ac16:	d000      	beq.n	800ac1a <procData+0x2ea>
 800ac18:	e09b      	b.n	800ad52 <procData+0x422>
		if (strlen(procBuff) < 7){
 800ac1a:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <procData+0x314>)
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f7fe fa7d 	bl	800911c <strlen>
 800ac22:	0003      	movs	r3, r0
 800ac24:	2b06      	cmp	r3, #6
 800ac26:	d83f      	bhi.n	800aca8 <procData+0x378>
			gsmInfo.gprsDataPending = 0;
 800ac28:	4b03      	ldr	r3, [pc, #12]	; (800ac38 <procData+0x308>)
 800ac2a:	2280      	movs	r2, #128	; 0x80
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	5099      	str	r1, [r3, r2]
			gsmInfo.socket = 1;
 800ac30:	4b01      	ldr	r3, [pc, #4]	; (800ac38 <procData+0x308>)
 800ac32:	2201      	movs	r2, #1
 800ac34:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ac36:	e231      	b.n	800b09c <procData+0x76c>
 800ac38:	20001720 	.word	0x20001720
 800ac3c:	20001434 	.word	0x20001434
 800ac40:	08012adc 	.word	0x08012adc
 800ac44:	200015a0 	.word	0x200015a0
 800ac48:	0801254c 	.word	0x0801254c
 800ac4c:	08012ae0 	.word	0x08012ae0
 800ac50:	200014a0 	.word	0x200014a0
 800ac54:	20001578 	.word	0x20001578
 800ac58:	08012afc 	.word	0x08012afc
 800ac5c:	2000112c 	.word	0x2000112c
 800ac60:	200012bc 	.word	0x200012bc
 800ac64:	08012b04 	.word	0x08012b04
 800ac68:	08012b18 	.word	0x08012b18
 800ac6c:	20001978 	.word	0x20001978
 800ac70:	200018e0 	.word	0x200018e0
 800ac74:	08012b24 	.word	0x08012b24
 800ac78:	08012b34 	.word	0x08012b34
 800ac7c:	08012b3c 	.word	0x08012b3c
 800ac80:	200000c0 	.word	0x200000c0
 800ac84:	08012b48 	.word	0x08012b48
 800ac88:	08012b54 	.word	0x08012b54
 800ac8c:	08012b60 	.word	0x08012b60
 800ac90:	08012b74 	.word	0x08012b74
 800ac94:	08012b7c 	.word	0x08012b7c
 800ac98:	08012b84 	.word	0x08012b84
 800ac9c:	08012b8c 	.word	0x08012b8c
 800aca0:	08012b90 	.word	0x08012b90
 800aca4:	08012b9c 	.word	0x08012b9c
			if (ftpRead == 1){
 800aca8:	4bc2      	ldr	r3, [pc, #776]	; (800afb4 <procData+0x684>)
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d141      	bne.n	800ad34 <procData+0x404>
				ftpinc = 0;
 800acb0:	4bc1      	ldr	r3, [pc, #772]	; (800afb8 <procData+0x688>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]
				ftpPad = 0;
 800acb6:	4bc1      	ldr	r3, [pc, #772]	; (800afbc <procData+0x68c>)
 800acb8:	2200      	movs	r2, #0
 800acba:	701a      	strb	r2, [r3, #0]
				myStrSection(procBuff,temp,10,' ',1);
 800acbc:	49c0      	ldr	r1, [pc, #768]	; (800afc0 <procData+0x690>)
 800acbe:	48c1      	ldr	r0, [pc, #772]	; (800afc4 <procData+0x694>)
 800acc0:	2301      	movs	r3, #1
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	2320      	movs	r3, #32
 800acc6:	220a      	movs	r2, #10
 800acc8:	f001 fe47 	bl	800c95a <myStrSection>
				ftpReceive = atoi(temp);
 800accc:	4bbc      	ldr	r3, [pc, #752]	; (800afc0 <procData+0x690>)
 800acce:	0018      	movs	r0, r3
 800acd0:	f006 fee4 	bl	8011a9c <atoi>
 800acd4:	0003      	movs	r3, r0
 800acd6:	001a      	movs	r2, r3
 800acd8:	4bbb      	ldr	r3, [pc, #748]	; (800afc8 <procData+0x698>)
 800acda:	601a      	str	r2, [r3, #0]
				gsmInfo.FTP_Data = 1;
 800acdc:	4abb      	ldr	r2, [pc, #748]	; (800afcc <procData+0x69c>)
 800acde:	23b8      	movs	r3, #184	; 0xb8
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	2101      	movs	r1, #1
 800ace4:	50d1      	str	r1, [r2, r3]
				getFtp();
 800ace6:	f000 f9eb 	bl	800b0c0 <getFtp>
				if (ftpPacket > ftpReceive){
 800acea:	4bb9      	ldr	r3, [pc, #740]	; (800afd0 <procData+0x6a0>)
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	4bb6      	ldr	r3, [pc, #728]	; (800afc8 <procData+0x698>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d800      	bhi.n	800acf8 <procData+0x3c8>
 800acf6:	e1d1      	b.n	800b09c <procData+0x76c>
					flashWrite(900,"UL",2);
 800acf8:	49b6      	ldr	r1, [pc, #728]	; (800afd4 <procData+0x6a4>)
 800acfa:	23e1      	movs	r3, #225	; 0xe1
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	2202      	movs	r2, #2
 800ad00:	0018      	movs	r0, r3
 800ad02:	f001 fd45 	bl	800c790 <flashWrite>
					Debug_Send("FTP DONE!!!!!!!\r\n");
 800ad06:	4bb4      	ldr	r3, [pc, #720]	; (800afd8 <procData+0x6a8>)
 800ad08:	0018      	movs	r0, r3
 800ad0a:	f7ff fc6b 	bl	800a5e4 <Debug_Send>
					gsmInfo.FS_Connect = 0;
 800ad0e:	4aaf      	ldr	r2, [pc, #700]	; (800afcc <procData+0x69c>)
 800ad10:	23b6      	movs	r3, #182	; 0xb6
 800ad12:	005b      	lsls	r3, r3, #1
 800ad14:	2100      	movs	r1, #0
 800ad16:	50d1      	str	r1, [r2, r3]
					ftpRead = 0;
 800ad18:	4ba6      	ldr	r3, [pc, #664]	; (800afb4 <procData+0x684>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	701a      	strb	r2, [r3, #0]
					gsmState = FS_Close;
 800ad1e:	4baf      	ldr	r3, [pc, #700]	; (800afdc <procData+0x6ac>)
 800ad20:	2232      	movs	r2, #50	; 0x32
 800ad22:	701a      	strb	r2, [r3, #0]
					gsmInfo.FTP_Save_Addr = 1000;
 800ad24:	4aa9      	ldr	r2, [pc, #676]	; (800afcc <procData+0x69c>)
 800ad26:	23ba      	movs	r3, #186	; 0xba
 800ad28:	005b      	lsls	r3, r3, #1
 800ad2a:	21fa      	movs	r1, #250	; 0xfa
 800ad2c:	0089      	lsls	r1, r1, #2
 800ad2e:	50d1      	str	r1, [r2, r3]
					NVIC_SystemReset();
 800ad30:	f7fe fa92 	bl	8009258 <__NVIC_SystemReset>
				gsmInfo.gprsDataPending = 0;
 800ad34:	4ba5      	ldr	r3, [pc, #660]	; (800afcc <procData+0x69c>)
 800ad36:	2280      	movs	r2, #128	; 0x80
 800ad38:	2100      	movs	r1, #0
 800ad3a:	5099      	str	r1, [r3, r2]
				gsmInfo.socket = 1;
 800ad3c:	4ba3      	ldr	r3, [pc, #652]	; (800afcc <procData+0x69c>)
 800ad3e:	2201      	movs	r2, #1
 800ad40:	679a      	str	r2, [r3, #120]	; 0x78
				gsmState = GPRS_Send;
 800ad42:	4ba6      	ldr	r3, [pc, #664]	; (800afdc <procData+0x6ac>)
 800ad44:	221c      	movs	r2, #28
 800ad46:	701a      	strb	r2, [r3, #0]
				Debug_Send("connected1\r\n");
 800ad48:	4ba5      	ldr	r3, [pc, #660]	; (800afe0 <procData+0x6b0>)
 800ad4a:	0018      	movs	r0, r3
 800ad4c:	f7ff fc4a 	bl	800a5e4 <Debug_Send>
}
 800ad50:	e1a4      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"ALREADY CONNECT",15)==0){
 800ad52:	49a4      	ldr	r1, [pc, #656]	; (800afe4 <procData+0x6b4>)
 800ad54:	4b9b      	ldr	r3, [pc, #620]	; (800afc4 <procData+0x694>)
 800ad56:	220f      	movs	r2, #15
 800ad58:	0018      	movs	r0, r3
 800ad5a:	f006 ff16 	bl	8011b8a <strncmp>
 800ad5e:	1e03      	subs	r3, r0, #0
 800ad60:	d106      	bne.n	800ad70 <procData+0x440>
		gsmState = SocketClose;
 800ad62:	4b9e      	ldr	r3, [pc, #632]	; (800afdc <procData+0x6ac>)
 800ad64:	2216      	movs	r2, #22
 800ad66:	701a      	strb	r2, [r3, #0]
		gsmInfo.socket = 0;
 800ad68:	4b98      	ldr	r3, [pc, #608]	; (800afcc <procData+0x69c>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ad6e:	e195      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"CONNECT FAIL",13)==0){
 800ad70:	4a9d      	ldr	r2, [pc, #628]	; (800afe8 <procData+0x6b8>)
 800ad72:	4b94      	ldr	r3, [pc, #592]	; (800afc4 <procData+0x694>)
 800ad74:	0011      	movs	r1, r2
 800ad76:	0018      	movs	r0, r3
 800ad78:	f7fe f9c6 	bl	8009108 <strcmp>
 800ad7c:	1e03      	subs	r3, r0, #0
 800ad7e:	d103      	bne.n	800ad88 <procData+0x458>
		gsmState = GPRS_Off;
 800ad80:	4b96      	ldr	r3, [pc, #600]	; (800afdc <procData+0x6ac>)
 800ad82:	2214      	movs	r2, #20
 800ad84:	701a      	strb	r2, [r3, #0]
}
 800ad86:	e189      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"CONNECT OK",11)==0){
 800ad88:	4a98      	ldr	r2, [pc, #608]	; (800afec <procData+0x6bc>)
 800ad8a:	4b8e      	ldr	r3, [pc, #568]	; (800afc4 <procData+0x694>)
 800ad8c:	0011      	movs	r1, r2
 800ad8e:	0018      	movs	r0, r3
 800ad90:	f7fe f9ba 	bl	8009108 <strcmp>
 800ad94:	1e03      	subs	r3, r0, #0
 800ad96:	d10e      	bne.n	800adb6 <procData+0x486>
		gsmInfo.gprsDataPending = 0;
 800ad98:	4b8c      	ldr	r3, [pc, #560]	; (800afcc <procData+0x69c>)
 800ad9a:	2280      	movs	r2, #128	; 0x80
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	5099      	str	r1, [r3, r2]
		gsmInfo.socket = 1;
 800ada0:	4b8a      	ldr	r3, [pc, #552]	; (800afcc <procData+0x69c>)
 800ada2:	2201      	movs	r2, #1
 800ada4:	679a      	str	r2, [r3, #120]	; 0x78
		gsmState = GPRS_Send;
 800ada6:	4b8d      	ldr	r3, [pc, #564]	; (800afdc <procData+0x6ac>)
 800ada8:	221c      	movs	r2, #28
 800adaa:	701a      	strb	r2, [r3, #0]
		Debug_Send("connected\r\n");
 800adac:	4b90      	ldr	r3, [pc, #576]	; (800aff0 <procData+0x6c0>)
 800adae:	0018      	movs	r0, r3
 800adb0:	f7ff fc18 	bl	800a5e4 <Debug_Send>
}
 800adb4:	e172      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"SEND OK",7)==0){	//data sent
 800adb6:	498f      	ldr	r1, [pc, #572]	; (800aff4 <procData+0x6c4>)
 800adb8:	4b82      	ldr	r3, [pc, #520]	; (800afc4 <procData+0x694>)
 800adba:	2207      	movs	r2, #7
 800adbc:	0018      	movs	r0, r3
 800adbe:	f006 fee4 	bl	8011b8a <strncmp>
 800adc2:	1e03      	subs	r3, r0, #0
 800adc4:	d105      	bne.n	800add2 <procData+0x4a2>
		gsmInfo.MQTT_Data = 1;
 800adc6:	4a81      	ldr	r2, [pc, #516]	; (800afcc <procData+0x69c>)
 800adc8:	23c0      	movs	r3, #192	; 0xc0
 800adca:	005b      	lsls	r3, r3, #1
 800adcc:	2101      	movs	r1, #1
 800adce:	50d1      	str	r1, [r2, r3]
}
 800add0:	e164      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"CLOSED",7)==0){	//socket closed by remote
 800add2:	4a89      	ldr	r2, [pc, #548]	; (800aff8 <procData+0x6c8>)
 800add4:	4b7b      	ldr	r3, [pc, #492]	; (800afc4 <procData+0x694>)
 800add6:	0011      	movs	r1, r2
 800add8:	0018      	movs	r0, r3
 800adda:	f7fe f995 	bl	8009108 <strcmp>
 800adde:	1e03      	subs	r3, r0, #0
 800ade0:	d110      	bne.n	800ae04 <procData+0x4d4>
		gsmInfo.socket = 0;
 800ade2:	4b7a      	ldr	r3, [pc, #488]	; (800afcc <procData+0x69c>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	679a      	str	r2, [r3, #120]	; 0x78
		gsmTimer = 0;
 800ade8:	4b84      	ldr	r3, [pc, #528]	; (800affc <procData+0x6cc>)
 800adea:	2200      	movs	r2, #0
 800adec:	601a      	str	r2, [r3, #0]
		Debug_Send("Socket closed\r\n");
 800adee:	4b84      	ldr	r3, [pc, #528]	; (800b000 <procData+0x6d0>)
 800adf0:	0018      	movs	r0, r3
 800adf2:	f7ff fbf7 	bl	800a5e4 <Debug_Send>
		gsmState = GPRS_Off;
 800adf6:	4b79      	ldr	r3, [pc, #484]	; (800afdc <procData+0x6ac>)
 800adf8:	2214      	movs	r2, #20
 800adfa:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 800adfc:	4b77      	ldr	r3, [pc, #476]	; (800afdc <procData+0x6ac>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	701a      	strb	r2, [r3, #0]
}
 800ae02:	e14b      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"CLOSE OK",8)==0){
 800ae04:	497f      	ldr	r1, [pc, #508]	; (800b004 <procData+0x6d4>)
 800ae06:	4b6f      	ldr	r3, [pc, #444]	; (800afc4 <procData+0x694>)
 800ae08:	2208      	movs	r2, #8
 800ae0a:	0018      	movs	r0, r3
 800ae0c:	f006 febd 	bl	8011b8a <strncmp>
 800ae10:	1e03      	subs	r3, r0, #0
 800ae12:	d110      	bne.n	800ae36 <procData+0x506>
		gsmInfo.socket = 0;
 800ae14:	4b6d      	ldr	r3, [pc, #436]	; (800afcc <procData+0x69c>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	679a      	str	r2, [r3, #120]	; 0x78
		gsmTimer = 0;
 800ae1a:	4b78      	ldr	r3, [pc, #480]	; (800affc <procData+0x6cc>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	601a      	str	r2, [r3, #0]
		Debug_Send("Socket forced closed\r\n");
 800ae20:	4b79      	ldr	r3, [pc, #484]	; (800b008 <procData+0x6d8>)
 800ae22:	0018      	movs	r0, r3
 800ae24:	f7ff fbde 	bl	800a5e4 <Debug_Send>
		gsmState = GPRS_Off;
 800ae28:	4b6c      	ldr	r3, [pc, #432]	; (800afdc <procData+0x6ac>)
 800ae2a:	2214      	movs	r2, #20
 800ae2c:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 800ae2e:	4b6b      	ldr	r3, [pc, #428]	; (800afdc <procData+0x6ac>)
 800ae30:	2200      	movs	r2, #0
 800ae32:	701a      	strb	r2, [r3, #0]
}
 800ae34:	e132      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFTPOPEN:",10)==0)FTP_OpenF();
 800ae36:	4975      	ldr	r1, [pc, #468]	; (800b00c <procData+0x6dc>)
 800ae38:	4b62      	ldr	r3, [pc, #392]	; (800afc4 <procData+0x694>)
 800ae3a:	220a      	movs	r2, #10
 800ae3c:	0018      	movs	r0, r3
 800ae3e:	f006 fea4 	bl	8011b8a <strncmp>
 800ae42:	1e03      	subs	r3, r0, #0
 800ae44:	d102      	bne.n	800ae4c <procData+0x51c>
 800ae46:	f000 f9fb 	bl	800b240 <FTP_OpenF>
}
 800ae4a:	e127      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFTPSTAT:",10)==0)FTP_StatusF();
 800ae4c:	4970      	ldr	r1, [pc, #448]	; (800b010 <procData+0x6e0>)
 800ae4e:	4b5d      	ldr	r3, [pc, #372]	; (800afc4 <procData+0x694>)
 800ae50:	220a      	movs	r2, #10
 800ae52:	0018      	movs	r0, r3
 800ae54:	f006 fe99 	bl	8011b8a <strncmp>
 800ae58:	1e03      	subs	r3, r0, #0
 800ae5a:	d102      	bne.n	800ae62 <procData+0x532>
 800ae5c:	f000 fa30 	bl	800b2c0 <FTP_StatusF>
}
 800ae60:	e11c      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFTPNLST",9)==0)gsmState = FTP_Config;
 800ae62:	496c      	ldr	r1, [pc, #432]	; (800b014 <procData+0x6e4>)
 800ae64:	4b57      	ldr	r3, [pc, #348]	; (800afc4 <procData+0x694>)
 800ae66:	2209      	movs	r2, #9
 800ae68:	0018      	movs	r0, r3
 800ae6a:	f006 fe8e 	bl	8011b8a <strncmp>
 800ae6e:	1e03      	subs	r3, r0, #0
 800ae70:	d103      	bne.n	800ae7a <procData+0x54a>
 800ae72:	4b5a      	ldr	r3, [pc, #360]	; (800afdc <procData+0x6ac>)
 800ae74:	222a      	movs	r2, #42	; 0x2a
 800ae76:	701a      	strb	r2, [r3, #0]
}
 800ae78:	e110      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFTPCFG",8)==0)gsmState = FTP_Download;
 800ae7a:	4967      	ldr	r1, [pc, #412]	; (800b018 <procData+0x6e8>)
 800ae7c:	4b51      	ldr	r3, [pc, #324]	; (800afc4 <procData+0x694>)
 800ae7e:	2208      	movs	r2, #8
 800ae80:	0018      	movs	r0, r3
 800ae82:	f006 fe82 	bl	8011b8a <strncmp>
 800ae86:	1e03      	subs	r3, r0, #0
 800ae88:	d103      	bne.n	800ae92 <procData+0x562>
 800ae8a:	4b54      	ldr	r3, [pc, #336]	; (800afdc <procData+0x6ac>)
 800ae8c:	2227      	movs	r2, #39	; 0x27
 800ae8e:	701a      	strb	r2, [r3, #0]
}
 800ae90:	e104      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFTPGET",8)==0)gsmState = FS_Storage;
 800ae92:	4962      	ldr	r1, [pc, #392]	; (800b01c <procData+0x6ec>)
 800ae94:	4b4b      	ldr	r3, [pc, #300]	; (800afc4 <procData+0x694>)
 800ae96:	2208      	movs	r2, #8
 800ae98:	0018      	movs	r0, r3
 800ae9a:	f006 fe76 	bl	8011b8a <strncmp>
 800ae9e:	1e03      	subs	r3, r0, #0
 800aea0:	d103      	bne.n	800aeaa <procData+0x57a>
 800aea2:	4b4e      	ldr	r3, [pc, #312]	; (800afdc <procData+0x6ac>)
 800aea4:	222c      	movs	r2, #44	; 0x2c
 800aea6:	701a      	strb	r2, [r3, #0]
}
 800aea8:	e0f8      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFLDS",6)==0)gsmState = FS_SList;
 800aeaa:	495d      	ldr	r1, [pc, #372]	; (800b020 <procData+0x6f0>)
 800aeac:	4b45      	ldr	r3, [pc, #276]	; (800afc4 <procData+0x694>)
 800aeae:	2206      	movs	r2, #6
 800aeb0:	0018      	movs	r0, r3
 800aeb2:	f006 fe6a 	bl	8011b8a <strncmp>
 800aeb6:	1e03      	subs	r3, r0, #0
 800aeb8:	d103      	bne.n	800aec2 <procData+0x592>
 800aeba:	4b48      	ldr	r3, [pc, #288]	; (800afdc <procData+0x6ac>)
 800aebc:	222d      	movs	r2, #45	; 0x2d
 800aebe:	701a      	strb	r2, [r3, #0]
}
 800aec0:	e0ec      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFLST",6)==0)FileSize();
 800aec2:	4958      	ldr	r1, [pc, #352]	; (800b024 <procData+0x6f4>)
 800aec4:	4b3f      	ldr	r3, [pc, #252]	; (800afc4 <procData+0x694>)
 800aec6:	2206      	movs	r2, #6
 800aec8:	0018      	movs	r0, r3
 800aeca:	f006 fe5e 	bl	8011b8a <strncmp>
 800aece:	1e03      	subs	r3, r0, #0
 800aed0:	d102      	bne.n	800aed8 <procData+0x5a8>
 800aed2:	f000 f93f 	bl	800b154 <FileSize>
}
 800aed6:	e0e1      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFOPEN",7)==0) FS_Open_F();
 800aed8:	4953      	ldr	r1, [pc, #332]	; (800b028 <procData+0x6f8>)
 800aeda:	4b3a      	ldr	r3, [pc, #232]	; (800afc4 <procData+0x694>)
 800aedc:	2207      	movs	r2, #7
 800aede:	0018      	movs	r0, r3
 800aee0:	f006 fe53 	bl	8011b8a <strncmp>
 800aee4:	1e03      	subs	r3, r0, #0
 800aee6:	d102      	bne.n	800aeee <procData+0x5be>
 800aee8:	f000 f97c 	bl	800b1e4 <FS_Open_F>
}
 800aeec:	e0d6      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFDWL",6)==0)gsmState = FTP_Close;
 800aeee:	494f      	ldr	r1, [pc, #316]	; (800b02c <procData+0x6fc>)
 800aef0:	4b34      	ldr	r3, [pc, #208]	; (800afc4 <procData+0x694>)
 800aef2:	2206      	movs	r2, #6
 800aef4:	0018      	movs	r0, r3
 800aef6:	f006 fe48 	bl	8011b8a <strncmp>
 800aefa:	1e03      	subs	r3, r0, #0
 800aefc:	d103      	bne.n	800af06 <procData+0x5d6>
 800aefe:	4b37      	ldr	r3, [pc, #220]	; (800afdc <procData+0x6ac>)
 800af00:	2226      	movs	r2, #38	; 0x26
 800af02:	701a      	strb	r2, [r3, #0]
}
 800af04:	e0ca      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFTPSIZE",9)==0)gsmState = FTP_Close;
 800af06:	494a      	ldr	r1, [pc, #296]	; (800b030 <procData+0x700>)
 800af08:	4b2e      	ldr	r3, [pc, #184]	; (800afc4 <procData+0x694>)
 800af0a:	2209      	movs	r2, #9
 800af0c:	0018      	movs	r0, r3
 800af0e:	f006 fe3c 	bl	8011b8a <strncmp>
 800af12:	1e03      	subs	r3, r0, #0
 800af14:	d103      	bne.n	800af1e <procData+0x5ee>
 800af16:	4b31      	ldr	r3, [pc, #196]	; (800afdc <procData+0x6ac>)
 800af18:	2226      	movs	r2, #38	; 0x26
 800af1a:	701a      	strb	r2, [r3, #0]
}
 800af1c:	e0be      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFTPCLOSE",10)==0){
 800af1e:	4945      	ldr	r1, [pc, #276]	; (800b034 <procData+0x704>)
 800af20:	4b28      	ldr	r3, [pc, #160]	; (800afc4 <procData+0x694>)
 800af22:	220a      	movs	r2, #10
 800af24:	0018      	movs	r0, r3
 800af26:	f006 fe30 	bl	8011b8a <strncmp>
 800af2a:	1e03      	subs	r3, r0, #0
 800af2c:	d108      	bne.n	800af40 <procData+0x610>
		gsmInfo.FTP_Open = 0;
 800af2e:	4a27      	ldr	r2, [pc, #156]	; (800afcc <procData+0x69c>)
 800af30:	23b2      	movs	r3, #178	; 0xb2
 800af32:	005b      	lsls	r3, r3, #1
 800af34:	2100      	movs	r1, #0
 800af36:	50d1      	str	r1, [r2, r3]
		gsmState = GPRS_Off;
 800af38:	4b28      	ldr	r3, [pc, #160]	; (800afdc <procData+0x6ac>)
 800af3a:	2214      	movs	r2, #20
 800af3c:	701a      	strb	r2, [r3, #0]
}
 800af3e:	e0ad      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+QFTPSIZE",9)==0) gsmState = FTP_Download;
 800af40:	493b      	ldr	r1, [pc, #236]	; (800b030 <procData+0x700>)
 800af42:	4b20      	ldr	r3, [pc, #128]	; (800afc4 <procData+0x694>)
 800af44:	2209      	movs	r2, #9
 800af46:	0018      	movs	r0, r3
 800af48:	f006 fe1f 	bl	8011b8a <strncmp>
 800af4c:	1e03      	subs	r3, r0, #0
 800af4e:	d103      	bne.n	800af58 <procData+0x628>
 800af50:	4b22      	ldr	r3, [pc, #136]	; (800afdc <procData+0x6ac>)
 800af52:	2227      	movs	r2, #39	; 0x27
 800af54:	701a      	strb	r2, [r3, #0]
}
 800af56:	e0a1      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+MIPCLOSE",9)==0)gsmState = GPRS_Off;
 800af58:	4937      	ldr	r1, [pc, #220]	; (800b038 <procData+0x708>)
 800af5a:	4b1a      	ldr	r3, [pc, #104]	; (800afc4 <procData+0x694>)
 800af5c:	2209      	movs	r2, #9
 800af5e:	0018      	movs	r0, r3
 800af60:	f006 fe13 	bl	8011b8a <strncmp>
 800af64:	1e03      	subs	r3, r0, #0
 800af66:	d103      	bne.n	800af70 <procData+0x640>
 800af68:	4b1c      	ldr	r3, [pc, #112]	; (800afdc <procData+0x6ac>)
 800af6a:	2214      	movs	r2, #20
 800af6c:	701a      	strb	r2, [r3, #0]
}
 800af6e:	e095      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"SEND FAIL",8)==0)gsmState = GPRS_Off;
 800af70:	4932      	ldr	r1, [pc, #200]	; (800b03c <procData+0x70c>)
 800af72:	4b14      	ldr	r3, [pc, #80]	; (800afc4 <procData+0x694>)
 800af74:	2208      	movs	r2, #8
 800af76:	0018      	movs	r0, r3
 800af78:	f006 fe07 	bl	8011b8a <strncmp>
 800af7c:	1e03      	subs	r3, r0, #0
 800af7e:	d103      	bne.n	800af88 <procData+0x658>
 800af80:	4b16      	ldr	r3, [pc, #88]	; (800afdc <procData+0x6ac>)
 800af82:	2214      	movs	r2, #20
 800af84:	701a      	strb	r2, [r3, #0]
}
 800af86:	e089      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+CMGL",5)==0) GotSMS();
 800af88:	492d      	ldr	r1, [pc, #180]	; (800b040 <procData+0x710>)
 800af8a:	4b0e      	ldr	r3, [pc, #56]	; (800afc4 <procData+0x694>)
 800af8c:	2205      	movs	r2, #5
 800af8e:	0018      	movs	r0, r3
 800af90:	f006 fdfb 	bl	8011b8a <strncmp>
 800af94:	1e03      	subs	r3, r0, #0
 800af96:	d102      	bne.n	800af9e <procData+0x66e>
 800af98:	f000 fd40 	bl	800ba1c <GotSMS>
}
 800af9c:	e07e      	b.n	800b09c <procData+0x76c>
	else if(strncmp((char*)procBuff,"+CPIN: NOT READY",16)==0){
 800af9e:	4929      	ldr	r1, [pc, #164]	; (800b044 <procData+0x714>)
 800afa0:	4b08      	ldr	r3, [pc, #32]	; (800afc4 <procData+0x694>)
 800afa2:	2210      	movs	r2, #16
 800afa4:	0018      	movs	r0, r3
 800afa6:	f006 fdf0 	bl	8011b8a <strncmp>
 800afaa:	1e03      	subs	r3, r0, #0
 800afac:	d14c      	bne.n	800b048 <procData+0x718>
		GSM_Init();
 800afae:	f7fe f965 	bl	800927c <GSM_Init>
}
 800afb2:	e073      	b.n	800b09c <procData+0x76c>
 800afb4:	2000197c 	.word	0x2000197c
 800afb8:	200000c8 	.word	0x200000c8
 800afbc:	2000199c 	.word	0x2000199c
 800afc0:	20001434 	.word	0x20001434
 800afc4:	200015a0 	.word	0x200015a0
 800afc8:	20001978 	.word	0x20001978
 800afcc:	20001720 	.word	0x20001720
 800afd0:	200000cc 	.word	0x200000cc
 800afd4:	08012ba4 	.word	0x08012ba4
 800afd8:	08012ba8 	.word	0x08012ba8
 800afdc:	200000c0 	.word	0x200000c0
 800afe0:	08012bbc 	.word	0x08012bbc
 800afe4:	08012bcc 	.word	0x08012bcc
 800afe8:	08012bdc 	.word	0x08012bdc
 800afec:	08012bec 	.word	0x08012bec
 800aff0:	08012bf8 	.word	0x08012bf8
 800aff4:	08012c04 	.word	0x08012c04
 800aff8:	08012c0c 	.word	0x08012c0c
 800affc:	2000156c 	.word	0x2000156c
 800b000:	08012c14 	.word	0x08012c14
 800b004:	08012c24 	.word	0x08012c24
 800b008:	08012c30 	.word	0x08012c30
 800b00c:	08012c48 	.word	0x08012c48
 800b010:	08012c54 	.word	0x08012c54
 800b014:	08012c60 	.word	0x08012c60
 800b018:	08012c6c 	.word	0x08012c6c
 800b01c:	08012c78 	.word	0x08012c78
 800b020:	08012c84 	.word	0x08012c84
 800b024:	08012c8c 	.word	0x08012c8c
 800b028:	08012c94 	.word	0x08012c94
 800b02c:	08012c9c 	.word	0x08012c9c
 800b030:	08012ca4 	.word	0x08012ca4
 800b034:	08012cb0 	.word	0x08012cb0
 800b038:	08012cbc 	.word	0x08012cbc
 800b03c:	08012cc8 	.word	0x08012cc8
 800b040:	08012cd4 	.word	0x08012cd4
 800b044:	08012cdc 	.word	0x08012cdc
	else if(strncmp((char*)procBuff,"ERROR",5)==0){
 800b048:	4916      	ldr	r1, [pc, #88]	; (800b0a4 <procData+0x774>)
 800b04a:	4b17      	ldr	r3, [pc, #92]	; (800b0a8 <procData+0x778>)
 800b04c:	2205      	movs	r2, #5
 800b04e:	0018      	movs	r0, r3
 800b050:	f006 fd9b 	bl	8011b8a <strncmp>
 800b054:	1e03      	subs	r3, r0, #0
 800b056:	d117      	bne.n	800b088 <procData+0x758>
		onTimer = 0;
 800b058:	4b14      	ldr	r3, [pc, #80]	; (800b0ac <procData+0x77c>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	801a      	strh	r2, [r3, #0]
		smsFlags.config = 0;
 800b05e:	4b14      	ldr	r3, [pc, #80]	; (800b0b0 <procData+0x780>)
 800b060:	2200      	movs	r2, #0
 800b062:	605a      	str	r2, [r3, #4]
		smsFlags.gprsActive = 0;
 800b064:	4b12      	ldr	r3, [pc, #72]	; (800b0b0 <procData+0x780>)
 800b066:	2200      	movs	r2, #0
 800b068:	61da      	str	r2, [r3, #28]
		if (gsmInfo.balancePending == 1){
 800b06a:	4a12      	ldr	r2, [pc, #72]	; (800b0b4 <procData+0x784>)
 800b06c:	239c      	movs	r3, #156	; 0x9c
 800b06e:	005b      	lsls	r3, r3, #1
 800b070:	58d3      	ldr	r3, [r2, r3]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d112      	bne.n	800b09c <procData+0x76c>
			gsmInfo.balancePending = 0;
 800b076:	4a0f      	ldr	r2, [pc, #60]	; (800b0b4 <procData+0x784>)
 800b078:	239c      	movs	r3, #156	; 0x9c
 800b07a:	005b      	lsls	r3, r3, #1
 800b07c:	2100      	movs	r1, #0
 800b07e:	50d1      	str	r1, [r2, r3]
			gsmState = 0;
 800b080:	4b0d      	ldr	r3, [pc, #52]	; (800b0b8 <procData+0x788>)
 800b082:	2200      	movs	r2, #0
 800b084:	701a      	strb	r2, [r3, #0]
}
 800b086:	e009      	b.n	800b09c <procData+0x76c>
	else if (gsmInfo.GPRS_Rec == 1){
 800b088:	4a0a      	ldr	r2, [pc, #40]	; (800b0b4 <procData+0x784>)
 800b08a:	23ac      	movs	r3, #172	; 0xac
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	58d3      	ldr	r3, [r2, r3]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d103      	bne.n	800b09c <procData+0x76c>
		Debug_Send("Socket forced closed\r\n");
 800b094:	4b09      	ldr	r3, [pc, #36]	; (800b0bc <procData+0x78c>)
 800b096:	0018      	movs	r0, r3
 800b098:	f7ff faa4 	bl	800a5e4 <Debug_Send>
}
 800b09c:	46c0      	nop			; (mov r8, r8)
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	b002      	add	sp, #8
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	08012cf0 	.word	0x08012cf0
 800b0a8:	200015a0 	.word	0x200015a0
 800b0ac:	20000164 	.word	0x20000164
 800b0b0:	2000112c 	.word	0x2000112c
 800b0b4:	20001720 	.word	0x20001720
 800b0b8:	200000c0 	.word	0x200000c0
 800b0bc:	08012c30 	.word	0x08012c30

0800b0c0 <getFtp>:
void Download(){


}

void getFtp(){
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	af00      	add	r7, sp, #0
	while(ftpinc < ftpPacket){
 800b0c4:	e02a      	b.n	800b11c <getFtp+0x5c>
		if (recBuffPointerWrite != recBuffPointerRead){
 800b0c6:	4b1b      	ldr	r3, [pc, #108]	; (800b134 <getFtp+0x74>)
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	4b1b      	ldr	r3, [pc, #108]	; (800b138 <getFtp+0x78>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d024      	beq.n	800b11c <getFtp+0x5c>
			//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			gsmSend = 0;
 800b0d2:	4b1a      	ldr	r3, [pc, #104]	; (800b13c <getFtp+0x7c>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]
			//if (recBuffDebug[recBuffPointerRead] != 0x0A){
				ftpReceived[ftpinc] = recBuffDebug[recBuffPointerRead];
 800b0d8:	4b17      	ldr	r3, [pc, #92]	; (800b138 <getFtp+0x78>)
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	4b18      	ldr	r3, [pc, #96]	; (800b140 <getFtp+0x80>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4918      	ldr	r1, [pc, #96]	; (800b144 <getFtp+0x84>)
 800b0e2:	5c89      	ldrb	r1, [r1, r2]
 800b0e4:	4a18      	ldr	r2, [pc, #96]	; (800b148 <getFtp+0x88>)
 800b0e6:	54d1      	strb	r1, [r2, r3]
				//HAL_UART_Transmit(&huart1, procBuff[procBuffpointer], 1, 10);
				/*if (recBuff[recBuffPointerRead] != 0x0A)*/ //SendChar(procBuff[procBuffpointer]);
				recBuffPointerRead++;
 800b0e8:	4b13      	ldr	r3, [pc, #76]	; (800b138 <getFtp+0x78>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	1c5a      	adds	r2, r3, #1
 800b0ee:	4b12      	ldr	r3, [pc, #72]	; (800b138 <getFtp+0x78>)
 800b0f0:	601a      	str	r2, [r3, #0]
				if (ftpPad == 1) ftpinc++;
 800b0f2:	4b16      	ldr	r3, [pc, #88]	; (800b14c <getFtp+0x8c>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d104      	bne.n	800b104 <getFtp+0x44>
 800b0fa:	4b11      	ldr	r3, [pc, #68]	; (800b140 <getFtp+0x80>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	4b0f      	ldr	r3, [pc, #60]	; (800b140 <getFtp+0x80>)
 800b102:	601a      	str	r2, [r3, #0]
				if (recBuffPointerRead > recBuffSize) recBuffPointerRead = 0;
 800b104:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <getFtp+0x78>)
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	2396      	movs	r3, #150	; 0x96
 800b10a:	005b      	lsls	r3, r3, #1
 800b10c:	429a      	cmp	r2, r3
 800b10e:	dd02      	ble.n	800b116 <getFtp+0x56>
 800b110:	4b09      	ldr	r3, [pc, #36]	; (800b138 <getFtp+0x78>)
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]
				ftpPad = 1;
 800b116:	4b0d      	ldr	r3, [pc, #52]	; (800b14c <getFtp+0x8c>)
 800b118:	2201      	movs	r2, #1
 800b11a:	701a      	strb	r2, [r3, #0]
	while(ftpinc < ftpPacket){
 800b11c:	4b08      	ldr	r3, [pc, #32]	; (800b140 <getFtp+0x80>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	001a      	movs	r2, r3
 800b122:	4b0b      	ldr	r3, [pc, #44]	; (800b150 <getFtp+0x90>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	429a      	cmp	r2, r3
 800b128:	d3cd      	bcc.n	800b0c6 <getFtp+0x6>
				//procBuffpointer++;
				//if (procBuffpointer > procBuffSize) procBuffpointer = 0;
			//}
		}
	}
}
 800b12a:	46c0      	nop			; (mov r8, r8)
 800b12c:	46c0      	nop			; (mov r8, r8)
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	46c0      	nop			; (mov r8, r8)
 800b134:	20000168 	.word	0x20000168
 800b138:	2000016c 	.word	0x2000016c
 800b13c:	20000184 	.word	0x20000184
 800b140:	200000c8 	.word	0x200000c8
 800b144:	2000115c 	.word	0x2000115c
 800b148:	200018e0 	.word	0x200018e0
 800b14c:	2000199c 	.word	0x2000199c
 800b150:	200000cc 	.word	0x200000cc

0800b154 <FileSize>:

void FileSize(){
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af02      	add	r7, sp, #8
	gsmState = FS_Open;
 800b15a:	4b1a      	ldr	r3, [pc, #104]	; (800b1c4 <FileSize+0x70>)
 800b15c:	2231      	movs	r2, #49	; 0x31
 800b15e:	701a      	strb	r2, [r3, #0]
	myStrSection(procBuff,temp,10,',',1);
 800b160:	4919      	ldr	r1, [pc, #100]	; (800b1c8 <FileSize+0x74>)
 800b162:	481a      	ldr	r0, [pc, #104]	; (800b1cc <FileSize+0x78>)
 800b164:	2301      	movs	r3, #1
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	232c      	movs	r3, #44	; 0x2c
 800b16a:	220a      	movs	r2, #10
 800b16c:	f001 fbf5 	bl	800c95a <myStrSection>
	flashWrite(910,temp,strlen(temp) + 1);
 800b170:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <FileSize+0x74>)
 800b172:	0018      	movs	r0, r3
 800b174:	f7fd ffd2 	bl	800911c <strlen>
 800b178:	0003      	movs	r3, r0
 800b17a:	1c5a      	adds	r2, r3, #1
 800b17c:	4b12      	ldr	r3, [pc, #72]	; (800b1c8 <FileSize+0x74>)
 800b17e:	4814      	ldr	r0, [pc, #80]	; (800b1d0 <FileSize+0x7c>)
 800b180:	0019      	movs	r1, r3
 800b182:	f001 fb05 	bl	800c790 <flashWrite>
	filesize = atoi(temp);
 800b186:	4b10      	ldr	r3, [pc, #64]	; (800b1c8 <FileSize+0x74>)
 800b188:	0018      	movs	r0, r3
 800b18a:	f006 fc87 	bl	8011a9c <atoi>
 800b18e:	0003      	movs	r3, r0
 800b190:	001a      	movs	r2, r3
 800b192:	4b10      	ldr	r3, [pc, #64]	; (800b1d4 <FileSize+0x80>)
 800b194:	601a      	str	r2, [r3, #0]
	myLongStr(filesize,temp1,10,10);
 800b196:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <FileSize+0x80>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	0018      	movs	r0, r3
 800b19c:	490e      	ldr	r1, [pc, #56]	; (800b1d8 <FileSize+0x84>)
 800b19e:	230a      	movs	r3, #10
 800b1a0:	220a      	movs	r2, #10
 800b1a2:	f001 fc6f 	bl	800ca84 <myLongStr>
	Debug_Send("File size: ");
 800b1a6:	4b0d      	ldr	r3, [pc, #52]	; (800b1dc <FileSize+0x88>)
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f7ff fa1b 	bl	800a5e4 <Debug_Send>
	Debug_Send(temp1);
 800b1ae:	4b0a      	ldr	r3, [pc, #40]	; (800b1d8 <FileSize+0x84>)
 800b1b0:	0018      	movs	r0, r3
 800b1b2:	f7ff fa17 	bl	800a5e4 <Debug_Send>
	Debug_Send("\r\n");
 800b1b6:	4b0a      	ldr	r3, [pc, #40]	; (800b1e0 <FileSize+0x8c>)
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	f7ff fa13 	bl	800a5e4 <Debug_Send>
}
 800b1be:	46c0      	nop			; (mov r8, r8)
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	200000c0 	.word	0x200000c0
 800b1c8:	20001434 	.word	0x20001434
 800b1cc:	200015a0 	.word	0x200015a0
 800b1d0:	0000038e 	.word	0x0000038e
 800b1d4:	20001574 	.word	0x20001574
 800b1d8:	20001578 	.word	0x20001578
 800b1dc:	08012cf8 	.word	0x08012cf8
 800b1e0:	0801254c 	.word	0x0801254c

0800b1e4 <FS_Open_F>:

void FS_Open_F(){
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af02      	add	r7, sp, #8
	//Debug_Send("Open file\r\n");
	myStrSection(procBuff, FID,30,' ',1);
 800b1ea:	490f      	ldr	r1, [pc, #60]	; (800b228 <FS_Open_F+0x44>)
 800b1ec:	480f      	ldr	r0, [pc, #60]	; (800b22c <FS_Open_F+0x48>)
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	2320      	movs	r3, #32
 800b1f4:	221e      	movs	r2, #30
 800b1f6:	f001 fbb0 	bl	800c95a <myStrSection>
	Debug_Send(FID);
 800b1fa:	4b0b      	ldr	r3, [pc, #44]	; (800b228 <FS_Open_F+0x44>)
 800b1fc:	0018      	movs	r0, r3
 800b1fe:	f7ff f9f1 	bl	800a5e4 <Debug_Send>
	Debug_Send(" Opened\r\n");
 800b202:	4b0b      	ldr	r3, [pc, #44]	; (800b230 <FS_Open_F+0x4c>)
 800b204:	0018      	movs	r0, r3
 800b206:	f7ff f9ed 	bl	800a5e4 <Debug_Send>
	gsmState = FS_Seek;
 800b20a:	4b0a      	ldr	r3, [pc, #40]	; (800b234 <FS_Open_F+0x50>)
 800b20c:	222f      	movs	r2, #47	; 0x2f
 800b20e:	701a      	strb	r2, [r3, #0]
	ftpRead = 1;
 800b210:	4b09      	ldr	r3, [pc, #36]	; (800b238 <FS_Open_F+0x54>)
 800b212:	2201      	movs	r2, #1
 800b214:	701a      	strb	r2, [r3, #0]
	gsmInfo.FS_Connect = 1;
 800b216:	4a09      	ldr	r2, [pc, #36]	; (800b23c <FS_Open_F+0x58>)
 800b218:	23b6      	movs	r3, #182	; 0xb6
 800b21a:	005b      	lsls	r3, r3, #1
 800b21c:	2101      	movs	r1, #1
 800b21e:	50d1      	str	r1, [r2, r3]
	//gsmState = FS_Read;
}
 800b220:	46c0      	nop			; (mov r8, r8)
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	46c0      	nop			; (mov r8, r8)
 800b228:	20001984 	.word	0x20001984
 800b22c:	200015a0 	.word	0x200015a0
 800b230:	08012d04 	.word	0x08012d04
 800b234:	200000c0 	.word	0x200000c0
 800b238:	2000197c 	.word	0x2000197c
 800b23c:	20001720 	.word	0x20001720

0800b240 <FTP_OpenF>:

void FTP_OpenF(){
 800b240:	b580      	push	{r7, lr}
 800b242:	b088      	sub	sp, #32
 800b244:	af02      	add	r7, sp, #8
	char tmp[20];
	myStrSection(procBuff, tmp,30,':',1);
 800b246:	0039      	movs	r1, r7
 800b248:	4817      	ldr	r0, [pc, #92]	; (800b2a8 <FTP_OpenF+0x68>)
 800b24a:	2301      	movs	r3, #1
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	233a      	movs	r3, #58	; 0x3a
 800b250:	221e      	movs	r2, #30
 800b252:	f001 fb82 	bl	800c95a <myStrSection>
	Debug_Send("FTP Check open");
 800b256:	4b15      	ldr	r3, [pc, #84]	; (800b2ac <FTP_OpenF+0x6c>)
 800b258:	0018      	movs	r0, r3
 800b25a:	f7ff f9c3 	bl	800a5e4 <Debug_Send>
	Debug_Send(tmp);
 800b25e:	003b      	movs	r3, r7
 800b260:	0018      	movs	r0, r3
 800b262:	f7ff f9bf 	bl	800a5e4 <Debug_Send>
	Debug_Send("\r\n");
 800b266:	4b12      	ldr	r3, [pc, #72]	; (800b2b0 <FTP_OpenF+0x70>)
 800b268:	0018      	movs	r0, r3
 800b26a:	f7ff f9bb 	bl	800a5e4 <Debug_Send>
	int len = strlen(tmp);
 800b26e:	003b      	movs	r3, r7
 800b270:	0018      	movs	r0, r3
 800b272:	f7fd ff53 	bl	800911c <strlen>
 800b276:	0003      	movs	r3, r0
 800b278:	617b      	str	r3, [r7, #20]
	//if (strncmp((char*)tmp,"0",1)){ //connection successful
	if (len < 2){
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	dc07      	bgt.n	800b290 <FTP_OpenF+0x50>
		Debug_Send("FTP Connected\r\n");
 800b280:	4b0c      	ldr	r3, [pc, #48]	; (800b2b4 <FTP_OpenF+0x74>)
 800b282:	0018      	movs	r0, r3
 800b284:	f7ff f9ae 	bl	800a5e4 <Debug_Send>
		gsmState = FTP_Path;
 800b288:	4b0b      	ldr	r3, [pc, #44]	; (800b2b8 <FTP_OpenF+0x78>)
 800b28a:	222b      	movs	r2, #43	; 0x2b
 800b28c:	701a      	strb	r2, [r3, #0]
		gsmState = FTP_Close;
	}
	//Debug_Send("FTP connected\r\n");
	//gsmState = FTP_Download;
	//gsmState = FTP_Path;
}
 800b28e:	e006      	b.n	800b29e <FTP_OpenF+0x5e>
		Debug_Send("FTP NOT Connected\r\n");
 800b290:	4b0a      	ldr	r3, [pc, #40]	; (800b2bc <FTP_OpenF+0x7c>)
 800b292:	0018      	movs	r0, r3
 800b294:	f7ff f9a6 	bl	800a5e4 <Debug_Send>
		gsmState = FTP_Close;
 800b298:	4b07      	ldr	r3, [pc, #28]	; (800b2b8 <FTP_OpenF+0x78>)
 800b29a:	2226      	movs	r2, #38	; 0x26
 800b29c:	701a      	strb	r2, [r3, #0]
}
 800b29e:	46c0      	nop			; (mov r8, r8)
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	b006      	add	sp, #24
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	46c0      	nop			; (mov r8, r8)
 800b2a8:	200015a0 	.word	0x200015a0
 800b2ac:	08012d10 	.word	0x08012d10
 800b2b0:	0801254c 	.word	0x0801254c
 800b2b4:	08012d20 	.word	0x08012d20
 800b2b8:	200000c0 	.word	0x200000c0
 800b2bc:	08012d30 	.word	0x08012d30

0800b2c0 <FTP_StatusF>:

void FTP_StatusF(){
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b088      	sub	sp, #32
 800b2c4:	af02      	add	r7, sp, #8
	char tmp [20];
	Debug_Send("FTP Check status ");
 800b2c6:	4b12      	ldr	r3, [pc, #72]	; (800b310 <FTP_StatusF+0x50>)
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	f7ff f98b 	bl	800a5e4 <Debug_Send>
	myStrSection(procBuff, tmp,30,' ',1);
 800b2ce:	0039      	movs	r1, r7
 800b2d0:	4810      	ldr	r0, [pc, #64]	; (800b314 <FTP_StatusF+0x54>)
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	2320      	movs	r3, #32
 800b2d8:	221e      	movs	r2, #30
 800b2da:	f001 fb3e 	bl	800c95a <myStrSection>
	Debug_Send(tmp);
 800b2de:	003b      	movs	r3, r7
 800b2e0:	0018      	movs	r0, r3
 800b2e2:	f7ff f97f 	bl	800a5e4 <Debug_Send>
	Debug_Send("\r\n");
 800b2e6:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <FTP_StatusF+0x58>)
 800b2e8:	0018      	movs	r0, r3
 800b2ea:	f7ff f97b 	bl	800a5e4 <Debug_Send>
	int len = strlen(tmp);
 800b2ee:	003b      	movs	r3, r7
 800b2f0:	0018      	movs	r0, r3
 800b2f2:	f7fd ff13 	bl	800911c <strlen>
 800b2f6:	0003      	movs	r3, r0
 800b2f8:	617b      	str	r3, [r7, #20]
	/*if (strncmp((char*)tmp,"OPENING",7)) gsmState = 0;
	else if (strncmp((char*)tmp,"OPENED",7)) gsmState = FTP_Path;*/
	if (len == 6) gsmState = FTP_Path;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2b06      	cmp	r3, #6
 800b2fe:	d102      	bne.n	800b306 <FTP_StatusF+0x46>
 800b300:	4b06      	ldr	r3, [pc, #24]	; (800b31c <FTP_StatusF+0x5c>)
 800b302:	222b      	movs	r2, #43	; 0x2b
 800b304:	701a      	strb	r2, [r3, #0]
}
 800b306:	46c0      	nop			; (mov r8, r8)
 800b308:	46bd      	mov	sp, r7
 800b30a:	b006      	add	sp, #24
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	46c0      	nop			; (mov r8, r8)
 800b310:	08012d44 	.word	0x08012d44
 800b314:	200015a0 	.word	0x200015a0
 800b318:	0801254c 	.word	0x0801254c
 800b31c:	200000c0 	.word	0x200000c0

0800b320 <sendSMS>:

void sendSMS(char* num, char* msg){
 800b320:	b580      	push	{r7, lr}
 800b322:	b082      	sub	sp, #8
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
	if (smsFlags.signal == 0) return;
 800b32a:	4b21      	ldr	r3, [pc, #132]	; (800b3b0 <sendSMS+0x90>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d035      	beq.n	800b39e <sendSMS+0x7e>
	if (smsFlags.config == 0) return;
 800b332:	4b1f      	ldr	r3, [pc, #124]	; (800b3b0 <sendSMS+0x90>)
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d033      	beq.n	800b3a2 <sendSMS+0x82>
	if (gsmInfo.low == 1) return;
 800b33a:	4a1e      	ldr	r2, [pc, #120]	; (800b3b4 <sendSMS+0x94>)
 800b33c:	2380      	movs	r3, #128	; 0x80
 800b33e:	005b      	lsls	r3, r3, #1
 800b340:	58d3      	ldr	r3, [r2, r3]
 800b342:	2b01      	cmp	r3, #1
 800b344:	d02f      	beq.n	800b3a6 <sendSMS+0x86>
	//char sms
	//sendData("Send SMS\r\n",UART0);
	Debug_Send("Send SMS\r\n");
 800b346:	4b1c      	ldr	r3, [pc, #112]	; (800b3b8 <sendSMS+0x98>)
 800b348:	0018      	movs	r0, r3
 800b34a:	f7ff f94b 	bl	800a5e4 <Debug_Send>
	strcpy (temp, "AT+CMGS=\"");
 800b34e:	4a1b      	ldr	r2, [pc, #108]	; (800b3bc <sendSMS+0x9c>)
 800b350:	4b1b      	ldr	r3, [pc, #108]	; (800b3c0 <sendSMS+0xa0>)
 800b352:	0010      	movs	r0, r2
 800b354:	0019      	movs	r1, r3
 800b356:	230a      	movs	r3, #10
 800b358:	001a      	movs	r2, r3
 800b35a:	f006 fbcf 	bl	8011afc <memcpy>
	strcat(temp,num);
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <sendSMS+0x9c>)
 800b362:	0011      	movs	r1, r2
 800b364:	0018      	movs	r0, r3
 800b366:	f006 fbfb 	bl	8011b60 <strcat>
	strcat(temp,"\"\r\n");
 800b36a:	4b14      	ldr	r3, [pc, #80]	; (800b3bc <sendSMS+0x9c>)
 800b36c:	0018      	movs	r0, r3
 800b36e:	f7fd fed5 	bl	800911c <strlen>
 800b372:	0003      	movs	r3, r0
 800b374:	001a      	movs	r2, r3
 800b376:	4b11      	ldr	r3, [pc, #68]	; (800b3bc <sendSMS+0x9c>)
 800b378:	18d2      	adds	r2, r2, r3
 800b37a:	4b12      	ldr	r3, [pc, #72]	; (800b3c4 <sendSMS+0xa4>)
 800b37c:	0010      	movs	r0, r2
 800b37e:	0019      	movs	r1, r3
 800b380:	2304      	movs	r3, #4
 800b382:	001a      	movs	r2, r3
 800b384:	f006 fbba 	bl	8011afc <memcpy>
	GSM_Send(temp);
 800b388:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <sendSMS+0x9c>)
 800b38a:	0018      	movs	r0, r3
 800b38c:	f7ff f8d8 	bl	800a540 <GSM_Send>

	//GSM_Send("AT+CMGS=\"");
	//GSM_Send(num);,
	//GSM_Send("\"\r\n");
	//sendData("AT+CMGS=\"0720631005\"\r\n",UART1);
	strcpy(SMScontent,msg);
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <sendSMS+0xa8>)
 800b394:	0011      	movs	r1, r2
 800b396:	0018      	movs	r0, r3
 800b398:	f006 fbef 	bl	8011b7a <strcpy>
 800b39c:	e004      	b.n	800b3a8 <sendSMS+0x88>
	if (smsFlags.signal == 0) return;
 800b39e:	46c0      	nop			; (mov r8, r8)
 800b3a0:	e002      	b.n	800b3a8 <sendSMS+0x88>
	if (smsFlags.config == 0) return;
 800b3a2:	46c0      	nop			; (mov r8, r8)
 800b3a4:	e000      	b.n	800b3a8 <sendSMS+0x88>
	if (gsmInfo.low == 1) return;
 800b3a6:	46c0      	nop			; (mov r8, r8)
	//smsFlags.send = 0;
}
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	b002      	add	sp, #8
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	46c0      	nop			; (mov r8, r8)
 800b3b0:	2000112c 	.word	0x2000112c
 800b3b4:	20001720 	.word	0x20001720
 800b3b8:	08012684 	.word	0x08012684
 800b3bc:	20001434 	.word	0x20001434
 800b3c0:	08012d58 	.word	0x08012d58
 800b3c4:	08012d64 	.word	0x08012d64
 800b3c8:	200014c8 	.word	0x200014c8

0800b3cc <getIMEI>:
		errorCounter = 0;
		gsmState = 20;
	}
}*/

void getIMEI(){
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0
	//myStrSection(procBuff, gsmInfo.imei,30,'"',1);
	/*Debug_Send("Procbuff:");
	Debug_Send(procBuff);
	Debug_Send("\r\n");*/
	strcpy(gsmInfo.imei,procBuff);
 800b3d0:	4a12      	ldr	r2, [pc, #72]	; (800b41c <getIMEI+0x50>)
 800b3d2:	4b13      	ldr	r3, [pc, #76]	; (800b420 <getIMEI+0x54>)
 800b3d4:	0011      	movs	r1, r2
 800b3d6:	0018      	movs	r0, r3
 800b3d8:	f006 fbcf 	bl	8011b7a <strcpy>
	if (strncmp(gsmInfo.imei, "AT+CGSN", 7)== 0) gsmState = Imei;
 800b3dc:	4911      	ldr	r1, [pc, #68]	; (800b424 <getIMEI+0x58>)
 800b3de:	4b10      	ldr	r3, [pc, #64]	; (800b420 <getIMEI+0x54>)
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	0018      	movs	r0, r3
 800b3e4:	f006 fbd1 	bl	8011b8a <strncmp>
 800b3e8:	1e03      	subs	r3, r0, #0
 800b3ea:	d102      	bne.n	800b3f2 <getIMEI+0x26>
 800b3ec:	4b0e      	ldr	r3, [pc, #56]	; (800b428 <getIMEI+0x5c>)
 800b3ee:	2208      	movs	r2, #8
 800b3f0:	701a      	strb	r2, [r3, #0]
	Debug_Send("IMEI:");
 800b3f2:	4b0e      	ldr	r3, [pc, #56]	; (800b42c <getIMEI+0x60>)
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	f7ff f8f5 	bl	800a5e4 <Debug_Send>
	Debug_Send(gsmInfo.imei);
 800b3fa:	4b09      	ldr	r3, [pc, #36]	; (800b420 <getIMEI+0x54>)
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	f7ff f8f1 	bl	800a5e4 <Debug_Send>
	Debug_Send("\r\n");
 800b402:	4b0b      	ldr	r3, [pc, #44]	; (800b430 <getIMEI+0x64>)
 800b404:	0018      	movs	r0, r3
 800b406:	f7ff f8ed 	bl	800a5e4 <Debug_Send>
	gsmInfo.imeiFlag = 0;
 800b40a:	4a0a      	ldr	r2, [pc, #40]	; (800b434 <getIMEI+0x68>)
 800b40c:	23a8      	movs	r3, #168	; 0xa8
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	2100      	movs	r1, #0
 800b412:	50d1      	str	r1, [r2, r3]
	//sendData("IMEI:",UART0);
	//sendData(gsmInfo.imei,UART0);
	//sendData("\r\n",UART0);
}
 800b414:	46c0      	nop			; (mov r8, r8)
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	46c0      	nop			; (mov r8, r8)
 800b41c:	200015a0 	.word	0x200015a0
 800b420:	20001744 	.word	0x20001744
 800b424:	08012b34 	.word	0x08012b34
 800b428:	200000c0 	.word	0x200000c0
 800b42c:	08012d68 	.word	0x08012d68
 800b430:	0801254c 	.word	0x0801254c
 800b434:	20001720 	.word	0x20001720

0800b438 <getCCID>:

void getCCID(){
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af02      	add	r7, sp, #8
	myStrSection(procBuff, gsmInfo.ccid,30,' ',1);
 800b43e:	4905      	ldr	r1, [pc, #20]	; (800b454 <getCCID+0x1c>)
 800b440:	4805      	ldr	r0, [pc, #20]	; (800b458 <getCCID+0x20>)
 800b442:	2301      	movs	r3, #1
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	2320      	movs	r3, #32
 800b448:	221e      	movs	r2, #30
 800b44a:	f001 fa86 	bl	800c95a <myStrSection>
	//sendData("CCID:",UART0);
	//sendData(gsmInfo.ccid,UART0);
	//sendData("\r\n",UART0);
}
 800b44e:	46c0      	nop			; (mov r8, r8)
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	2000176c 	.word	0x2000176c
 800b458:	200015a0 	.word	0x200015a0

0800b45c <getSignal>:

void getSignal(){
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af02      	add	r7, sp, #8
	myStrSection(procBuff, quality,3,' ',1);
 800b462:	490f      	ldr	r1, [pc, #60]	; (800b4a0 <getSignal+0x44>)
 800b464:	480f      	ldr	r0, [pc, #60]	; (800b4a4 <getSignal+0x48>)
 800b466:	2301      	movs	r3, #1
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	2320      	movs	r3, #32
 800b46c:	2203      	movs	r2, #3
 800b46e:	f001 fa74 	bl	800c95a <myStrSection>
	int temp2;
	int temp3;
	temp2 = atoi(quality);
 800b472:	4b0b      	ldr	r3, [pc, #44]	; (800b4a0 <getSignal+0x44>)
 800b474:	0018      	movs	r0, r3
 800b476:	f006 fb11 	bl	8011a9c <atoi>
 800b47a:	0003      	movs	r3, r0
 800b47c:	607b      	str	r3, [r7, #4]
	temp2 *= 2;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	005b      	lsls	r3, r3, #1
 800b482:	607b      	str	r3, [r7, #4]
	temp3 = 113 - temp2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2271      	movs	r2, #113	; 0x71
 800b488:	1ad3      	subs	r3, r2, r3
 800b48a:	603b      	str	r3, [r7, #0]
	sprintf (quality," -%ddBm", temp3);
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	4906      	ldr	r1, [pc, #24]	; (800b4a8 <getSignal+0x4c>)
 800b490:	4b03      	ldr	r3, [pc, #12]	; (800b4a0 <getSignal+0x44>)
 800b492:	0018      	movs	r0, r3
 800b494:	f006 fb44 	bl	8011b20 <siprintf>
}
 800b498:	46c0      	nop			; (mov r8, r8)
 800b49a:	46bd      	mov	sp, r7
 800b49c:	b002      	add	sp, #8
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	2000158c 	.word	0x2000158c
 800b4a4:	200015a0 	.word	0x200015a0
 800b4a8:	08012d70 	.word	0x08012d70

0800b4ac <RegisterConfirm>:
		index++;
		myStrSection(smsInfo.content1, pair,100,',',index);
	}
}

void RegisterConfirm(){
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af00      	add	r7, sp, #0
	char temps[30];
	strcpy(SMScontent,"Unit registered\n");
 800b4b2:	4a2b      	ldr	r2, [pc, #172]	; (800b560 <RegisterConfirm+0xb4>)
 800b4b4:	4b2b      	ldr	r3, [pc, #172]	; (800b564 <RegisterConfirm+0xb8>)
 800b4b6:	0010      	movs	r0, r2
 800b4b8:	0019      	movs	r1, r3
 800b4ba:	2311      	movs	r3, #17
 800b4bc:	001a      	movs	r2, r3
 800b4be:	f006 fb1d 	bl	8011afc <memcpy>
	sprintf(temps,"User: %s\n",gsmInfo.user);
 800b4c2:	4a29      	ldr	r2, [pc, #164]	; (800b568 <RegisterConfirm+0xbc>)
 800b4c4:	4929      	ldr	r1, [pc, #164]	; (800b56c <RegisterConfirm+0xc0>)
 800b4c6:	003b      	movs	r3, r7
 800b4c8:	0018      	movs	r0, r3
 800b4ca:	f006 fb29 	bl	8011b20 <siprintf>
	strcat(SMScontent,temps);
 800b4ce:	003a      	movs	r2, r7
 800b4d0:	4b23      	ldr	r3, [pc, #140]	; (800b560 <RegisterConfirm+0xb4>)
 800b4d2:	0011      	movs	r1, r2
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f006 fb43 	bl	8011b60 <strcat>
	sprintf(temps,"MSISDN: %s\n",gsmInfo.msisdn);
 800b4da:	4a25      	ldr	r2, [pc, #148]	; (800b570 <RegisterConfirm+0xc4>)
 800b4dc:	4925      	ldr	r1, [pc, #148]	; (800b574 <RegisterConfirm+0xc8>)
 800b4de:	003b      	movs	r3, r7
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f006 fb1d 	bl	8011b20 <siprintf>
	strcat(SMScontent,temps);
 800b4e6:	003a      	movs	r2, r7
 800b4e8:	4b1d      	ldr	r3, [pc, #116]	; (800b560 <RegisterConfirm+0xb4>)
 800b4ea:	0011      	movs	r1, r2
 800b4ec:	0018      	movs	r0, r3
 800b4ee:	f006 fb37 	bl	8011b60 <strcat>
	strcat(SMScontent,"URL: ");
 800b4f2:	4b1b      	ldr	r3, [pc, #108]	; (800b560 <RegisterConfirm+0xb4>)
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	f7fd fe11 	bl	800911c <strlen>
 800b4fa:	0003      	movs	r3, r0
 800b4fc:	001a      	movs	r2, r3
 800b4fe:	4b18      	ldr	r3, [pc, #96]	; (800b560 <RegisterConfirm+0xb4>)
 800b500:	18d2      	adds	r2, r2, r3
 800b502:	4b1d      	ldr	r3, [pc, #116]	; (800b578 <RegisterConfirm+0xcc>)
 800b504:	0010      	movs	r0, r2
 800b506:	0019      	movs	r1, r3
 800b508:	2306      	movs	r3, #6
 800b50a:	001a      	movs	r2, r3
 800b50c:	f006 faf6 	bl	8011afc <memcpy>
	strcat(SMScontent,gsmInfo.url);
 800b510:	4a1a      	ldr	r2, [pc, #104]	; (800b57c <RegisterConfirm+0xd0>)
 800b512:	4b13      	ldr	r3, [pc, #76]	; (800b560 <RegisterConfirm+0xb4>)
 800b514:	0011      	movs	r1, r2
 800b516:	0018      	movs	r0, r3
 800b518:	f006 fb22 	bl	8011b60 <strcat>
	strcat(SMScontent,":");
 800b51c:	4b10      	ldr	r3, [pc, #64]	; (800b560 <RegisterConfirm+0xb4>)
 800b51e:	0018      	movs	r0, r3
 800b520:	f7fd fdfc 	bl	800911c <strlen>
 800b524:	0003      	movs	r3, r0
 800b526:	001a      	movs	r2, r3
 800b528:	4b0d      	ldr	r3, [pc, #52]	; (800b560 <RegisterConfirm+0xb4>)
 800b52a:	18d2      	adds	r2, r2, r3
 800b52c:	4b14      	ldr	r3, [pc, #80]	; (800b580 <RegisterConfirm+0xd4>)
 800b52e:	0010      	movs	r0, r2
 800b530:	0019      	movs	r1, r3
 800b532:	2302      	movs	r3, #2
 800b534:	001a      	movs	r2, r3
 800b536:	f006 fae1 	bl	8011afc <memcpy>
	strcat(SMScontent,gsmInfo.urlport);
 800b53a:	4a12      	ldr	r2, [pc, #72]	; (800b584 <RegisterConfirm+0xd8>)
 800b53c:	4b08      	ldr	r3, [pc, #32]	; (800b560 <RegisterConfirm+0xb4>)
 800b53e:	0011      	movs	r1, r2
 800b540:	0018      	movs	r0, r3
 800b542:	f006 fb0d 	bl	8011b60 <strcat>
	strcpy (smsInfo.build, SMScontent);
 800b546:	4a06      	ldr	r2, [pc, #24]	; (800b560 <RegisterConfirm+0xb4>)
 800b548:	4b0f      	ldr	r3, [pc, #60]	; (800b588 <RegisterConfirm+0xdc>)
 800b54a:	0011      	movs	r1, r2
 800b54c:	0018      	movs	r0, r3
 800b54e:	f006 fb14 	bl	8011b7a <strcpy>
	smsFlags.reply = 1;
 800b552:	4b0e      	ldr	r3, [pc, #56]	; (800b58c <RegisterConfirm+0xe0>)
 800b554:	2201      	movs	r2, #1
 800b556:	625a      	str	r2, [r3, #36]	; 0x24

}
 800b558:	46c0      	nop			; (mov r8, r8)
 800b55a:	46bd      	mov	sp, r7
 800b55c:	b008      	add	sp, #32
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	200014c8 	.word	0x200014c8
 800b564:	08012e00 	.word	0x08012e00
 800b568:	200017b4 	.word	0x200017b4
 800b56c:	08012e14 	.word	0x08012e14
 800b570:	200017d2 	.word	0x200017d2
 800b574:	08012e20 	.word	0x08012e20
 800b578:	08012e2c 	.word	0x08012e2c
 800b57c:	20001720 	.word	0x20001720
 800b580:	08012e34 	.word	0x08012e34
 800b584:	2000173e 	.word	0x2000173e
 800b588:	20001394 	.word	0x20001394
 800b58c:	2000112c 	.word	0x2000112c

0800b590 <CheckUser>:

char CheckUser(){
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
	Debug_Send("Check user\r\n");
 800b594:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <CheckUser+0x4c>)
 800b596:	0018      	movs	r0, r3
 800b598:	f7ff f824 	bl	800a5e4 <Debug_Send>
	if (strlen(gsmInfo.msisdn) < 2) return 0;
 800b59c:	4b10      	ldr	r3, [pc, #64]	; (800b5e0 <CheckUser+0x50>)
 800b59e:	0018      	movs	r0, r3
 800b5a0:	f7fd fdbc 	bl	800911c <strlen>
 800b5a4:	0003      	movs	r3, r0
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d801      	bhi.n	800b5ae <CheckUser+0x1e>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e012      	b.n	800b5d4 <CheckUser+0x44>
	if (strncmp(smsInfo.recMSISDN, gsmInfo.msisdn, 16) == 0){
 800b5ae:	490c      	ldr	r1, [pc, #48]	; (800b5e0 <CheckUser+0x50>)
 800b5b0:	4b0c      	ldr	r3, [pc, #48]	; (800b5e4 <CheckUser+0x54>)
 800b5b2:	2210      	movs	r2, #16
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	f006 fae8 	bl	8011b8a <strncmp>
 800b5ba:	1e03      	subs	r3, r0, #0
 800b5bc:	d105      	bne.n	800b5ca <CheckUser+0x3a>
		Debug_Send("Found user\r\n");
 800b5be:	4b0a      	ldr	r3, [pc, #40]	; (800b5e8 <CheckUser+0x58>)
 800b5c0:	0018      	movs	r0, r3
 800b5c2:	f7ff f80f 	bl	800a5e4 <Debug_Send>
		return 1;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e004      	b.n	800b5d4 <CheckUser+0x44>
	}
	else {
		Debug_Send("No user found\r\n");
 800b5ca:	4b08      	ldr	r3, [pc, #32]	; (800b5ec <CheckUser+0x5c>)
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	f7ff f809 	bl	800a5e4 <Debug_Send>
		return 0;
 800b5d2:	2300      	movs	r3, #0
	}
}
 800b5d4:	0018      	movs	r0, r3
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	46c0      	nop			; (mov r8, r8)
 800b5dc:	08012e38 	.word	0x08012e38
 800b5e0:	200017d2 	.word	0x200017d2
 800b5e4:	2000129c 	.word	0x2000129c
 800b5e8:	08012e48 	.word	0x08012e48
 800b5ec:	08012e58 	.word	0x08012e58

0800b5f0 <buildInfo>:
	//sendData(result,UART0);
	//strcpy(str, result);

}

void buildInfo(){
 800b5f0:	b590      	push	{r4, r7, lr}
 800b5f2:	b08f      	sub	sp, #60	; 0x3c
 800b5f4:	af00      	add	r7, sp, #0
	Debug_Send("Build INFO SMS\r\n");
 800b5f6:	4b7b      	ldr	r3, [pc, #492]	; (800b7e4 <buildInfo+0x1f4>)
 800b5f8:	0018      	movs	r0, r3
 800b5fa:	f7fe fff3 	bl	800a5e4 <Debug_Send>
	//strcpy(SMScontent,"Powerbox is active\n ");
	char temps[40];
	char adcv[10];
	//GetADC(adcv);
	strcpy(SMScontent,"GSM active\n");
 800b5fe:	4a7a      	ldr	r2, [pc, #488]	; (800b7e8 <buildInfo+0x1f8>)
 800b600:	4b7a      	ldr	r3, [pc, #488]	; (800b7ec <buildInfo+0x1fc>)
 800b602:	0010      	movs	r0, r2
 800b604:	0019      	movs	r1, r3
 800b606:	230c      	movs	r3, #12
 800b608:	001a      	movs	r2, r3
 800b60a:	f006 fa77 	bl	8011afc <memcpy>
	sprintf(temps,"V: %s\n",adcv);
 800b60e:	1d3a      	adds	r2, r7, #4
 800b610:	4977      	ldr	r1, [pc, #476]	; (800b7f0 <buildInfo+0x200>)
 800b612:	2410      	movs	r4, #16
 800b614:	193b      	adds	r3, r7, r4
 800b616:	0018      	movs	r0, r3
 800b618:	f006 fa82 	bl	8011b20 <siprintf>
	strcpy(SMScontent,temps);
 800b61c:	193a      	adds	r2, r7, r4
 800b61e:	4b72      	ldr	r3, [pc, #456]	; (800b7e8 <buildInfo+0x1f8>)
 800b620:	0011      	movs	r1, r2
 800b622:	0018      	movs	r0, r3
 800b624:	f006 faa9 	bl	8011b7a <strcpy>
	sprintf(temps,"Thresh: %sV\n",gsmInfo.vth);
 800b628:	4a72      	ldr	r2, [pc, #456]	; (800b7f4 <buildInfo+0x204>)
 800b62a:	4973      	ldr	r1, [pc, #460]	; (800b7f8 <buildInfo+0x208>)
 800b62c:	193b      	adds	r3, r7, r4
 800b62e:	0018      	movs	r0, r3
 800b630:	f006 fa76 	bl	8011b20 <siprintf>
	strcat(SMScontent,temps);
 800b634:	193a      	adds	r2, r7, r4
 800b636:	4b6c      	ldr	r3, [pc, #432]	; (800b7e8 <buildInfo+0x1f8>)
 800b638:	0011      	movs	r1, r2
 800b63a:	0018      	movs	r0, r3
 800b63c:	f006 fa90 	bl	8011b60 <strcat>
	//sprintf(temps,"CCID: %s\n",gsmInfo.ccid);
	if (gsmInfo.ccidStatus == 1) strcat(SMScontent,"CCID miss-matched!\r\n");
 800b640:	4a6e      	ldr	r2, [pc, #440]	; (800b7fc <buildInfo+0x20c>)
 800b642:	2398      	movs	r3, #152	; 0x98
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	58d3      	ldr	r3, [r2, r3]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d10e      	bne.n	800b66a <buildInfo+0x7a>
 800b64c:	4b66      	ldr	r3, [pc, #408]	; (800b7e8 <buildInfo+0x1f8>)
 800b64e:	0018      	movs	r0, r3
 800b650:	f7fd fd64 	bl	800911c <strlen>
 800b654:	0003      	movs	r3, r0
 800b656:	001a      	movs	r2, r3
 800b658:	4b63      	ldr	r3, [pc, #396]	; (800b7e8 <buildInfo+0x1f8>)
 800b65a:	18d2      	adds	r2, r2, r3
 800b65c:	4b68      	ldr	r3, [pc, #416]	; (800b800 <buildInfo+0x210>)
 800b65e:	0010      	movs	r0, r2
 800b660:	0019      	movs	r1, r3
 800b662:	2315      	movs	r3, #21
 800b664:	001a      	movs	r2, r3
 800b666:	f006 fa49 	bl	8011afc <memcpy>
	//sprintf(temps,"mode: %s\n",smsInfo.IP);
	//strcat(SMScontent,temps);
	if (gsmInfo.modeFlag == 1) strcat(SMScontent,"Mode:Pulse\r\n");
 800b66a:	4a64      	ldr	r2, [pc, #400]	; (800b7fc <buildInfo+0x20c>)
 800b66c:	2394      	movs	r3, #148	; 0x94
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	58d3      	ldr	r3, [r2, r3]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d10f      	bne.n	800b696 <buildInfo+0xa6>
 800b676:	4b5c      	ldr	r3, [pc, #368]	; (800b7e8 <buildInfo+0x1f8>)
 800b678:	0018      	movs	r0, r3
 800b67a:	f7fd fd4f 	bl	800911c <strlen>
 800b67e:	0003      	movs	r3, r0
 800b680:	001a      	movs	r2, r3
 800b682:	4b59      	ldr	r3, [pc, #356]	; (800b7e8 <buildInfo+0x1f8>)
 800b684:	18d2      	adds	r2, r2, r3
 800b686:	4b5f      	ldr	r3, [pc, #380]	; (800b804 <buildInfo+0x214>)
 800b688:	0010      	movs	r0, r2
 800b68a:	0019      	movs	r1, r3
 800b68c:	230d      	movs	r3, #13
 800b68e:	001a      	movs	r2, r3
 800b690:	f006 fa34 	bl	8011afc <memcpy>
 800b694:	e00e      	b.n	800b6b4 <buildInfo+0xc4>
	else strcat(SMScontent,"Mode: Latch\r\n");
 800b696:	4b54      	ldr	r3, [pc, #336]	; (800b7e8 <buildInfo+0x1f8>)
 800b698:	0018      	movs	r0, r3
 800b69a:	f7fd fd3f 	bl	800911c <strlen>
 800b69e:	0003      	movs	r3, r0
 800b6a0:	001a      	movs	r2, r3
 800b6a2:	4b51      	ldr	r3, [pc, #324]	; (800b7e8 <buildInfo+0x1f8>)
 800b6a4:	18d2      	adds	r2, r2, r3
 800b6a6:	4b58      	ldr	r3, [pc, #352]	; (800b808 <buildInfo+0x218>)
 800b6a8:	0010      	movs	r0, r2
 800b6aa:	0019      	movs	r1, r3
 800b6ac:	230e      	movs	r3, #14
 800b6ae:	001a      	movs	r2, r3
 800b6b0:	f006 fa24 	bl	8011afc <memcpy>
	if (gsmInfo.activeFlag == 1) strcat(SMScontent,"Status:Active\r\n");
 800b6b4:	4a51      	ldr	r2, [pc, #324]	; (800b7fc <buildInfo+0x20c>)
 800b6b6:	2390      	movs	r3, #144	; 0x90
 800b6b8:	005b      	lsls	r3, r3, #1
 800b6ba:	58d3      	ldr	r3, [r2, r3]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d10f      	bne.n	800b6e0 <buildInfo+0xf0>
 800b6c0:	4b49      	ldr	r3, [pc, #292]	; (800b7e8 <buildInfo+0x1f8>)
 800b6c2:	0018      	movs	r0, r3
 800b6c4:	f7fd fd2a 	bl	800911c <strlen>
 800b6c8:	0003      	movs	r3, r0
 800b6ca:	001a      	movs	r2, r3
 800b6cc:	4b46      	ldr	r3, [pc, #280]	; (800b7e8 <buildInfo+0x1f8>)
 800b6ce:	18d2      	adds	r2, r2, r3
 800b6d0:	4b4e      	ldr	r3, [pc, #312]	; (800b80c <buildInfo+0x21c>)
 800b6d2:	0010      	movs	r0, r2
 800b6d4:	0019      	movs	r1, r3
 800b6d6:	2310      	movs	r3, #16
 800b6d8:	001a      	movs	r2, r3
 800b6da:	f006 fa0f 	bl	8011afc <memcpy>
 800b6de:	e00e      	b.n	800b6fe <buildInfo+0x10e>
	else strcat(SMScontent,"Status: Suspended\r\n");
 800b6e0:	4b41      	ldr	r3, [pc, #260]	; (800b7e8 <buildInfo+0x1f8>)
 800b6e2:	0018      	movs	r0, r3
 800b6e4:	f7fd fd1a 	bl	800911c <strlen>
 800b6e8:	0003      	movs	r3, r0
 800b6ea:	001a      	movs	r2, r3
 800b6ec:	4b3e      	ldr	r3, [pc, #248]	; (800b7e8 <buildInfo+0x1f8>)
 800b6ee:	18d2      	adds	r2, r2, r3
 800b6f0:	4b47      	ldr	r3, [pc, #284]	; (800b810 <buildInfo+0x220>)
 800b6f2:	0010      	movs	r0, r2
 800b6f4:	0019      	movs	r1, r3
 800b6f6:	2314      	movs	r3, #20
 800b6f8:	001a      	movs	r2, r3
 800b6fa:	f006 f9ff 	bl	8011afc <memcpy>
	//if (RELAY == 1) strcat(SMScontent,"Relay: ON\r\n");
	//else strcat(SMScontent,"Relay: OFF\r\n");
	sprintf(temps,"Airtime: %s\n",gsmInfo.balance);
 800b6fe:	4a45      	ldr	r2, [pc, #276]	; (800b814 <buildInfo+0x224>)
 800b700:	4945      	ldr	r1, [pc, #276]	; (800b818 <buildInfo+0x228>)
 800b702:	2410      	movs	r4, #16
 800b704:	193b      	adds	r3, r7, r4
 800b706:	0018      	movs	r0, r3
 800b708:	f006 fa0a 	bl	8011b20 <siprintf>
	strcat(SMScontent,temps);
 800b70c:	193a      	adds	r2, r7, r4
 800b70e:	4b36      	ldr	r3, [pc, #216]	; (800b7e8 <buildInfo+0x1f8>)
 800b710:	0011      	movs	r1, r2
 800b712:	0018      	movs	r0, r3
 800b714:	f006 fa24 	bl	8011b60 <strcat>
	sprintf(temps,"User: %s\n",gsmInfo.user);
 800b718:	4a40      	ldr	r2, [pc, #256]	; (800b81c <buildInfo+0x22c>)
 800b71a:	4941      	ldr	r1, [pc, #260]	; (800b820 <buildInfo+0x230>)
 800b71c:	193b      	adds	r3, r7, r4
 800b71e:	0018      	movs	r0, r3
 800b720:	f006 f9fe 	bl	8011b20 <siprintf>
	strcat(SMScontent,temps);
 800b724:	193a      	adds	r2, r7, r4
 800b726:	4b30      	ldr	r3, [pc, #192]	; (800b7e8 <buildInfo+0x1f8>)
 800b728:	0011      	movs	r1, r2
 800b72a:	0018      	movs	r0, r3
 800b72c:	f006 fa18 	bl	8011b60 <strcat>
	sprintf(temps,"MSISDN: %s\n",gsmInfo.msisdn);
 800b730:	4a3c      	ldr	r2, [pc, #240]	; (800b824 <buildInfo+0x234>)
 800b732:	493d      	ldr	r1, [pc, #244]	; (800b828 <buildInfo+0x238>)
 800b734:	193b      	adds	r3, r7, r4
 800b736:	0018      	movs	r0, r3
 800b738:	f006 f9f2 	bl	8011b20 <siprintf>
	strcat(SMScontent,temps);
 800b73c:	193a      	adds	r2, r7, r4
 800b73e:	4b2a      	ldr	r3, [pc, #168]	; (800b7e8 <buildInfo+0x1f8>)
 800b740:	0011      	movs	r1, r2
 800b742:	0018      	movs	r0, r3
 800b744:	f006 fa0c 	bl	8011b60 <strcat>
	quality[0] = 0x20;
 800b748:	4b38      	ldr	r3, [pc, #224]	; (800b82c <buildInfo+0x23c>)
 800b74a:	2220      	movs	r2, #32
 800b74c:	701a      	strb	r2, [r3, #0]
	sprintf(temps,"Signal:%s\n",quality);
 800b74e:	4a37      	ldr	r2, [pc, #220]	; (800b82c <buildInfo+0x23c>)
 800b750:	4937      	ldr	r1, [pc, #220]	; (800b830 <buildInfo+0x240>)
 800b752:	193b      	adds	r3, r7, r4
 800b754:	0018      	movs	r0, r3
 800b756:	f006 f9e3 	bl	8011b20 <siprintf>
	strcat(SMScontent,temps);
 800b75a:	193a      	adds	r2, r7, r4
 800b75c:	4b22      	ldr	r3, [pc, #136]	; (800b7e8 <buildInfo+0x1f8>)
 800b75e:	0011      	movs	r1, r2
 800b760:	0018      	movs	r0, r3
 800b762:	f006 f9fd 	bl	8011b60 <strcat>
	strcat(SMScontent,"URL: ");
 800b766:	4b20      	ldr	r3, [pc, #128]	; (800b7e8 <buildInfo+0x1f8>)
 800b768:	0018      	movs	r0, r3
 800b76a:	f7fd fcd7 	bl	800911c <strlen>
 800b76e:	0003      	movs	r3, r0
 800b770:	001a      	movs	r2, r3
 800b772:	4b1d      	ldr	r3, [pc, #116]	; (800b7e8 <buildInfo+0x1f8>)
 800b774:	18d2      	adds	r2, r2, r3
 800b776:	4b2f      	ldr	r3, [pc, #188]	; (800b834 <buildInfo+0x244>)
 800b778:	0010      	movs	r0, r2
 800b77a:	0019      	movs	r1, r3
 800b77c:	2306      	movs	r3, #6
 800b77e:	001a      	movs	r2, r3
 800b780:	f006 f9bc 	bl	8011afc <memcpy>
	strcat(SMScontent,gsmInfo.url);
 800b784:	4a1d      	ldr	r2, [pc, #116]	; (800b7fc <buildInfo+0x20c>)
 800b786:	4b18      	ldr	r3, [pc, #96]	; (800b7e8 <buildInfo+0x1f8>)
 800b788:	0011      	movs	r1, r2
 800b78a:	0018      	movs	r0, r3
 800b78c:	f006 f9e8 	bl	8011b60 <strcat>
	strcat(SMScontent,":");
 800b790:	4b15      	ldr	r3, [pc, #84]	; (800b7e8 <buildInfo+0x1f8>)
 800b792:	0018      	movs	r0, r3
 800b794:	f7fd fcc2 	bl	800911c <strlen>
 800b798:	0003      	movs	r3, r0
 800b79a:	001a      	movs	r2, r3
 800b79c:	4b12      	ldr	r3, [pc, #72]	; (800b7e8 <buildInfo+0x1f8>)
 800b79e:	18d2      	adds	r2, r2, r3
 800b7a0:	4b25      	ldr	r3, [pc, #148]	; (800b838 <buildInfo+0x248>)
 800b7a2:	0010      	movs	r0, r2
 800b7a4:	0019      	movs	r1, r3
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	001a      	movs	r2, r3
 800b7aa:	f006 f9a7 	bl	8011afc <memcpy>
	strcat(SMScontent,gsmInfo.urlport);
 800b7ae:	4a23      	ldr	r2, [pc, #140]	; (800b83c <buildInfo+0x24c>)
 800b7b0:	4b0d      	ldr	r3, [pc, #52]	; (800b7e8 <buildInfo+0x1f8>)
 800b7b2:	0011      	movs	r1, r2
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	f006 f9d3 	bl	8011b60 <strcat>
	/*rtc time;
	time = getUptime();
	char temp1[30];
	sprintf (temp1,"Uptime: %.2dw %.2dd %.2dh %.2dm %.2ds\n", time.weeks, time.days, time.hours, time.minutes, time.seconds);
	strcat(SMScontent,temp1);*/
	strcpy (smsInfo.build, SMScontent);
 800b7ba:	4a0b      	ldr	r2, [pc, #44]	; (800b7e8 <buildInfo+0x1f8>)
 800b7bc:	4b20      	ldr	r3, [pc, #128]	; (800b840 <buildInfo+0x250>)
 800b7be:	0011      	movs	r1, r2
 800b7c0:	0018      	movs	r0, r3
 800b7c2:	f006 f9da 	bl	8011b7a <strcpy>
	//sendData("\r\nSMS content:",UART0);
	//sendData(SMScontent,UART0);
	//sendData("\r\n",UART0);
	//sendData("\r\nSMSinfo build:",UART0);
	Debug_Send(smsInfo.build);
 800b7c6:	4b1e      	ldr	r3, [pc, #120]	; (800b840 <buildInfo+0x250>)
 800b7c8:	0018      	movs	r0, r3
 800b7ca:	f7fe ff0b 	bl	800a5e4 <Debug_Send>
	Debug_Send("\r\n");
 800b7ce:	4b1d      	ldr	r3, [pc, #116]	; (800b844 <buildInfo+0x254>)
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	f7fe ff07 	bl	800a5e4 <Debug_Send>
	smsFlags.reply = 1;			//generates reply sms
 800b7d6:	4b1c      	ldr	r3, [pc, #112]	; (800b848 <buildInfo+0x258>)
 800b7d8:	2201      	movs	r2, #1
 800b7da:	625a      	str	r2, [r3, #36]	; 0x24
	//strcpy(smsInfo.recMSISDN,"0720631005");	//debug for sms from rtc
}
 800b7dc:	46c0      	nop			; (mov r8, r8)
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	b00f      	add	sp, #60	; 0x3c
 800b7e2:	bd90      	pop	{r4, r7, pc}
 800b7e4:	08012eb4 	.word	0x08012eb4
 800b7e8:	200014c8 	.word	0x200014c8
 800b7ec:	08012ec8 	.word	0x08012ec8
 800b7f0:	08012ed4 	.word	0x08012ed4
 800b7f4:	20001824 	.word	0x20001824
 800b7f8:	08012edc 	.word	0x08012edc
 800b7fc:	20001720 	.word	0x20001720
 800b800:	08012eec 	.word	0x08012eec
 800b804:	08012f04 	.word	0x08012f04
 800b808:	08012f14 	.word	0x08012f14
 800b80c:	08012f24 	.word	0x08012f24
 800b810:	08012f34 	.word	0x08012f34
 800b814:	2000180e 	.word	0x2000180e
 800b818:	08012f48 	.word	0x08012f48
 800b81c:	200017b4 	.word	0x200017b4
 800b820:	08012e14 	.word	0x08012e14
 800b824:	200017d2 	.word	0x200017d2
 800b828:	08012e20 	.word	0x08012e20
 800b82c:	2000158c 	.word	0x2000158c
 800b830:	08012f58 	.word	0x08012f58
 800b834:	08012e2c 	.word	0x08012e2c
 800b838:	08012e34 	.word	0x08012e34
 800b83c:	2000173e 	.word	0x2000173e
 800b840:	20001394 	.word	0x20001394
 800b844:	0801254c 	.word	0x0801254c
 800b848:	2000112c 	.word	0x2000112c

0800b84c <BuildPower>:

void BuildPower(){
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
	int temp3;
	char temp2[20];
	//temp3 = getVolt();
	myLongStr(voltage,temp2,10,10);
 800b852:	4b45      	ldr	r3, [pc, #276]	; (800b968 <BuildPower+0x11c>)
 800b854:	6818      	ldr	r0, [r3, #0]
 800b856:	1d39      	adds	r1, r7, #4
 800b858:	230a      	movs	r3, #10
 800b85a:	220a      	movs	r2, #10
 800b85c:	f001 f912 	bl	800ca84 <myLongStr>
	strcpy (smsInfo.build, "IMC v4.08\n");
 800b860:	4b42      	ldr	r3, [pc, #264]	; (800b96c <BuildPower+0x120>)
 800b862:	4a43      	ldr	r2, [pc, #268]	; (800b970 <BuildPower+0x124>)
 800b864:	ca03      	ldmia	r2!, {r0, r1}
 800b866:	c303      	stmia	r3!, {r0, r1}
 800b868:	8811      	ldrh	r1, [r2, #0]
 800b86a:	8019      	strh	r1, [r3, #0]
 800b86c:	7892      	ldrb	r2, [r2, #2]
 800b86e:	709a      	strb	r2, [r3, #2]
	strcat(smsInfo.build,"IMEI: ");
 800b870:	4b3e      	ldr	r3, [pc, #248]	; (800b96c <BuildPower+0x120>)
 800b872:	0018      	movs	r0, r3
 800b874:	f7fd fc52 	bl	800911c <strlen>
 800b878:	0003      	movs	r3, r0
 800b87a:	001a      	movs	r2, r3
 800b87c:	4b3b      	ldr	r3, [pc, #236]	; (800b96c <BuildPower+0x120>)
 800b87e:	18d2      	adds	r2, r2, r3
 800b880:	4b3c      	ldr	r3, [pc, #240]	; (800b974 <BuildPower+0x128>)
 800b882:	0010      	movs	r0, r2
 800b884:	0019      	movs	r1, r3
 800b886:	2307      	movs	r3, #7
 800b888:	001a      	movs	r2, r3
 800b88a:	f006 f937 	bl	8011afc <memcpy>
	strcat(smsInfo.build, gsmInfo.imei);
 800b88e:	4a3a      	ldr	r2, [pc, #232]	; (800b978 <BuildPower+0x12c>)
 800b890:	4b36      	ldr	r3, [pc, #216]	; (800b96c <BuildPower+0x120>)
 800b892:	0011      	movs	r1, r2
 800b894:	0018      	movs	r0, r3
 800b896:	f006 f963 	bl	8011b60 <strcat>
	strcat(smsInfo.build,"\n");
 800b89a:	4b34      	ldr	r3, [pc, #208]	; (800b96c <BuildPower+0x120>)
 800b89c:	0018      	movs	r0, r3
 800b89e:	f7fd fc3d 	bl	800911c <strlen>
 800b8a2:	0003      	movs	r3, r0
 800b8a4:	001a      	movs	r2, r3
 800b8a6:	4b31      	ldr	r3, [pc, #196]	; (800b96c <BuildPower+0x120>)
 800b8a8:	18d2      	adds	r2, r2, r3
 800b8aa:	4b34      	ldr	r3, [pc, #208]	; (800b97c <BuildPower+0x130>)
 800b8ac:	0010      	movs	r0, r2
 800b8ae:	0019      	movs	r1, r3
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	001a      	movs	r2, r3
 800b8b4:	f006 f922 	bl	8011afc <memcpy>
	strcat (smsInfo.build, "Voltage:");
 800b8b8:	4b2c      	ldr	r3, [pc, #176]	; (800b96c <BuildPower+0x120>)
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f7fd fc2e 	bl	800911c <strlen>
 800b8c0:	0003      	movs	r3, r0
 800b8c2:	001a      	movs	r2, r3
 800b8c4:	4b29      	ldr	r3, [pc, #164]	; (800b96c <BuildPower+0x120>)
 800b8c6:	18d2      	adds	r2, r2, r3
 800b8c8:	4b2d      	ldr	r3, [pc, #180]	; (800b980 <BuildPower+0x134>)
 800b8ca:	0010      	movs	r0, r2
 800b8cc:	0019      	movs	r1, r3
 800b8ce:	2309      	movs	r3, #9
 800b8d0:	001a      	movs	r2, r3
 800b8d2:	f006 f913 	bl	8011afc <memcpy>
	strcat (smsInfo.build, temp2);
 800b8d6:	1d3a      	adds	r2, r7, #4
 800b8d8:	4b24      	ldr	r3, [pc, #144]	; (800b96c <BuildPower+0x120>)
 800b8da:	0011      	movs	r1, r2
 800b8dc:	0018      	movs	r0, r3
 800b8de:	f006 f93f 	bl	8011b60 <strcat>
	strcat (smsInfo.build, "\n");
 800b8e2:	4b22      	ldr	r3, [pc, #136]	; (800b96c <BuildPower+0x120>)
 800b8e4:	0018      	movs	r0, r3
 800b8e6:	f7fd fc19 	bl	800911c <strlen>
 800b8ea:	0003      	movs	r3, r0
 800b8ec:	001a      	movs	r2, r3
 800b8ee:	4b1f      	ldr	r3, [pc, #124]	; (800b96c <BuildPower+0x120>)
 800b8f0:	18d2      	adds	r2, r2, r3
 800b8f2:	4b22      	ldr	r3, [pc, #136]	; (800b97c <BuildPower+0x130>)
 800b8f4:	0010      	movs	r0, r2
 800b8f6:	0019      	movs	r1, r3
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	001a      	movs	r2, r3
 800b8fc:	f006 f8fe 	bl	8011afc <memcpy>
	//temp3 = getCurrent();
	myLongStr(current1,temp2,10,10);
 800b900:	4b20      	ldr	r3, [pc, #128]	; (800b984 <BuildPower+0x138>)
 800b902:	6818      	ldr	r0, [r3, #0]
 800b904:	1d39      	adds	r1, r7, #4
 800b906:	230a      	movs	r3, #10
 800b908:	220a      	movs	r2, #10
 800b90a:	f001 f8bb 	bl	800ca84 <myLongStr>
	strcat (smsInfo.build, "Current:");
 800b90e:	4b17      	ldr	r3, [pc, #92]	; (800b96c <BuildPower+0x120>)
 800b910:	0018      	movs	r0, r3
 800b912:	f7fd fc03 	bl	800911c <strlen>
 800b916:	0003      	movs	r3, r0
 800b918:	001a      	movs	r2, r3
 800b91a:	4b14      	ldr	r3, [pc, #80]	; (800b96c <BuildPower+0x120>)
 800b91c:	18d2      	adds	r2, r2, r3
 800b91e:	4b1a      	ldr	r3, [pc, #104]	; (800b988 <BuildPower+0x13c>)
 800b920:	0010      	movs	r0, r2
 800b922:	0019      	movs	r1, r3
 800b924:	2309      	movs	r3, #9
 800b926:	001a      	movs	r2, r3
 800b928:	f006 f8e8 	bl	8011afc <memcpy>
	strcat (smsInfo.build, temp2);
 800b92c:	1d3a      	adds	r2, r7, #4
 800b92e:	4b0f      	ldr	r3, [pc, #60]	; (800b96c <BuildPower+0x120>)
 800b930:	0011      	movs	r1, r2
 800b932:	0018      	movs	r0, r3
 800b934:	f006 f914 	bl	8011b60 <strcat>
	strcat (smsInfo.build, "\n");
 800b938:	4b0c      	ldr	r3, [pc, #48]	; (800b96c <BuildPower+0x120>)
 800b93a:	0018      	movs	r0, r3
 800b93c:	f7fd fbee 	bl	800911c <strlen>
 800b940:	0003      	movs	r3, r0
 800b942:	001a      	movs	r2, r3
 800b944:	4b09      	ldr	r3, [pc, #36]	; (800b96c <BuildPower+0x120>)
 800b946:	18d2      	adds	r2, r2, r3
 800b948:	4b0c      	ldr	r3, [pc, #48]	; (800b97c <BuildPower+0x130>)
 800b94a:	0010      	movs	r0, r2
 800b94c:	0019      	movs	r1, r3
 800b94e:	2302      	movs	r3, #2
 800b950:	001a      	movs	r2, r3
 800b952:	f006 f8d3 	bl	8011afc <memcpy>
	//strcpy(gsmInfo.imei,procBuff);
	//sprintf(smsInfo.build, "IMC4.08\n IMEI:%s v:%i c %i\r\n",gsmInfo.imei, voltage, current1);

	Debug_Send(smsInfo.build);
 800b956:	4b05      	ldr	r3, [pc, #20]	; (800b96c <BuildPower+0x120>)
 800b958:	0018      	movs	r0, r3
 800b95a:	f7fe fe43 	bl	800a5e4 <Debug_Send>
}
 800b95e:	46c0      	nop			; (mov r8, r8)
 800b960:	46bd      	mov	sp, r7
 800b962:	b006      	add	sp, #24
 800b964:	bd80      	pop	{r7, pc}
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	20001570 	.word	0x20001570
 800b96c:	20001394 	.word	0x20001394
 800b970:	08012f64 	.word	0x08012f64
 800b974:	08012f70 	.word	0x08012f70
 800b978:	20001744 	.word	0x20001744
 800b97c:	08012f78 	.word	0x08012f78
 800b980:	08012f7c 	.word	0x08012f7c
 800b984:	20001998 	.word	0x20001998
 800b988:	08012f88 	.word	0x08012f88

0800b98c <Context>:

void Context(){	//MIPCALL
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af02      	add	r7, sp, #8

	myStrSection(procBuff, smsInfo.IP,15,'"',1);
 800b992:	491b      	ldr	r1, [pc, #108]	; (800ba00 <Context+0x74>)
 800b994:	481b      	ldr	r0, [pc, #108]	; (800ba04 <Context+0x78>)
 800b996:	2301      	movs	r3, #1
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	2322      	movs	r3, #34	; 0x22
 800b99c:	220f      	movs	r2, #15
 800b99e:	f000 ffdc 	bl	800c95a <myStrSection>
	if (strlen(smsInfo.IP) > 3){
 800b9a2:	4b17      	ldr	r3, [pc, #92]	; (800ba00 <Context+0x74>)
 800b9a4:	0018      	movs	r0, r3
 800b9a6:	f7fd fbb9 	bl	800911c <strlen>
 800b9aa:	0003      	movs	r3, r0
 800b9ac:	2b03      	cmp	r3, #3
 800b9ae:	d918      	bls.n	800b9e2 <Context+0x56>
		smsFlags.gprsActive = 1;		//if gotten IP
 800b9b0:	4b15      	ldr	r3, [pc, #84]	; (800ba08 <Context+0x7c>)
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	61da      	str	r2, [r3, #28]
		smsFlags.gprsPending = 0;
 800b9b6:	4b14      	ldr	r3, [pc, #80]	; (800ba08 <Context+0x7c>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	619a      	str	r2, [r3, #24]
		gsmState = SocketOpen;
 800b9bc:	4b13      	ldr	r3, [pc, #76]	; (800ba0c <Context+0x80>)
 800b9be:	2215      	movs	r2, #21
 800b9c0:	701a      	strb	r2, [r3, #0]
		gsmState = FTP_Open;
 800b9c2:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <Context+0x80>)
 800b9c4:	2224      	movs	r2, #36	; 0x24
 800b9c6:	701a      	strb	r2, [r3, #0]
		//gsmState = FTP_Read;
		Debug_Send("IP:");
 800b9c8:	4b11      	ldr	r3, [pc, #68]	; (800ba10 <Context+0x84>)
 800b9ca:	0018      	movs	r0, r3
 800b9cc:	f7fe fe0a 	bl	800a5e4 <Debug_Send>
		Debug_Send(smsInfo.IP);
 800b9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ba00 <Context+0x74>)
 800b9d2:	0018      	movs	r0, r3
 800b9d4:	f7fe fe06 	bl	800a5e4 <Debug_Send>
		Debug_Send("\r\n");
 800b9d8:	4b0e      	ldr	r3, [pc, #56]	; (800ba14 <Context+0x88>)
 800b9da:	0018      	movs	r0, r3
 800b9dc:	f7fe fe02 	bl	800a5e4 <Debug_Send>
			//gsmInfo.alarm = 0;
			gsmState = SMS_Send;
		}
		//sendData("Context closed\r\n",UART0);
	}
}
 800b9e0:	e00a      	b.n	800b9f8 <Context+0x6c>
		smsFlags.gprsActive = 0;
 800b9e2:	4b09      	ldr	r3, [pc, #36]	; (800ba08 <Context+0x7c>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	61da      	str	r2, [r3, #28]
		if (gsmInfo.alarm == 1){
 800b9e8:	4b0b      	ldr	r3, [pc, #44]	; (800ba18 <Context+0x8c>)
 800b9ea:	2290      	movs	r2, #144	; 0x90
 800b9ec:	589b      	ldr	r3, [r3, r2]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d102      	bne.n	800b9f8 <Context+0x6c>
			gsmState = SMS_Send;
 800b9f2:	4b06      	ldr	r3, [pc, #24]	; (800ba0c <Context+0x80>)
 800b9f4:	220f      	movs	r2, #15
 800b9f6:	701a      	strb	r2, [r3, #0]
}
 800b9f8:	46c0      	nop			; (mov r8, r8)
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	46c0      	nop			; (mov r8, r8)
 800ba00:	20001370 	.word	0x20001370
 800ba04:	200015a0 	.word	0x200015a0
 800ba08:	2000112c 	.word	0x2000112c
 800ba0c:	200000c0 	.word	0x200000c0
 800ba10:	08012f94 	.word	0x08012f94
 800ba14:	0801254c 	.word	0x0801254c
 800ba18:	20001720 	.word	0x20001720

0800ba1c <GotSMS>:

void Socket2(){

}

void GotSMS(){
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af02      	add	r7, sp, #8
	if (smsFlags.reply == 1) return;
 800ba22:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <GotSMS+0x50>)
 800ba24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d01b      	beq.n	800ba62 <GotSMS+0x46>
	char section[15];
	//char tempData[90];
	//strcpy(tempData,procBuff);
	//sendData("SMS info:\r\n",UART0);
	myStrSection(procBuff, section,10,',',0);
 800ba2a:	0039      	movs	r1, r7
 800ba2c:	4810      	ldr	r0, [pc, #64]	; (800ba70 <GotSMS+0x54>)
 800ba2e:	2300      	movs	r3, #0
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	232c      	movs	r3, #44	; 0x2c
 800ba34:	220a      	movs	r2, #10
 800ba36:	f000 ff90 	bl	800c95a <myStrSection>
	myStrSection(section, smsInfo.index,3,' ',1);
 800ba3a:	490e      	ldr	r1, [pc, #56]	; (800ba74 <GotSMS+0x58>)
 800ba3c:	0038      	movs	r0, r7
 800ba3e:	2301      	movs	r3, #1
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	2320      	movs	r3, #32
 800ba44:	2203      	movs	r2, #3
 800ba46:	f000 ff88 	bl	800c95a <myStrSection>
	myStrSection(procBuff, smsInfo.recMSISDN,20,'"',3);
 800ba4a:	490b      	ldr	r1, [pc, #44]	; (800ba78 <GotSMS+0x5c>)
 800ba4c:	4808      	ldr	r0, [pc, #32]	; (800ba70 <GotSMS+0x54>)
 800ba4e:	2303      	movs	r3, #3
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	2322      	movs	r3, #34	; 0x22
 800ba54:	2214      	movs	r2, #20
 800ba56:	f000 ff80 	bl	800c95a <myStrSection>
	//sendData(smsInfo.recMSISDN,UART0);
	//sendData(smsInfo.index,UART0);
	//sendData("\r\n",UART0);
	//sendData(smsInfo.index,UART0);
	//sendData("\r\n",UART0);
	smsFlags.content = 1;
 800ba5a:	4b04      	ldr	r3, [pc, #16]	; (800ba6c <GotSMS+0x50>)
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	611a      	str	r2, [r3, #16]
 800ba60:	e000      	b.n	800ba64 <GotSMS+0x48>
	if (smsFlags.reply == 1) return;
 800ba62:	46c0      	nop			; (mov r8, r8)
}
 800ba64:	46bd      	mov	sp, r7
 800ba66:	b004      	add	sp, #16
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	46c0      	nop			; (mov r8, r8)
 800ba6c:	2000112c 	.word	0x2000112c
 800ba70:	200015a0 	.word	0x200015a0
 800ba74:	20001298 	.word	0x20001298
 800ba78:	2000129c 	.word	0x2000129c

0800ba7c <OK>:

void OK(){
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	af00      	add	r7, sp, #0

	//Debug_Send("Got OK\r\n");
	errorTimer = 0;
 800ba80:	4b2b      	ldr	r3, [pc, #172]	; (800bb30 <OK+0xb4>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	601a      	str	r2, [r3, #0]
	gsmTimer = 0;
 800ba86:	4b2b      	ldr	r3, [pc, #172]	; (800bb34 <OK+0xb8>)
 800ba88:	2200      	movs	r2, #0
 800ba8a:	601a      	str	r2, [r3, #0]
	//if (gsmState == GPRS_On) gsmState = SocketOpen;
	if (smsFlags.reply == 1){		//sent when sms built
 800ba8c:	4b2a      	ldr	r3, [pc, #168]	; (800bb38 <OK+0xbc>)
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d10a      	bne.n	800baaa <OK+0x2e>
	//if (smsFlags.send == 1){
		if ((smsFlags.config == 1)&&(smsFlags.gprsActive == 0)) gsmState = SMS_Send;
 800ba94:	4b28      	ldr	r3, [pc, #160]	; (800bb38 <OK+0xbc>)
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d106      	bne.n	800baaa <OK+0x2e>
 800ba9c:	4b26      	ldr	r3, [pc, #152]	; (800bb38 <OK+0xbc>)
 800ba9e:	69db      	ldr	r3, [r3, #28]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d102      	bne.n	800baaa <OK+0x2e>
 800baa4:	4b25      	ldr	r3, [pc, #148]	; (800bb3c <OK+0xc0>)
 800baa6:	220f      	movs	r2, #15
 800baa8:	701a      	strb	r2, [r3, #0]
		//sendData("Send OK\r\n",UART0);
	}
	if (gsmState == GprsContext) smsFlags.context = 1;
 800baaa:	4b24      	ldr	r3, [pc, #144]	; (800bb3c <OK+0xc0>)
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	2b0a      	cmp	r3, #10
 800bab0:	d102      	bne.n	800bab8 <OK+0x3c>
 800bab2:	4b21      	ldr	r3, [pc, #132]	; (800bb38 <OK+0xbc>)
 800bab4:	2201      	movs	r2, #1
 800bab6:	615a      	str	r2, [r3, #20]
	if (smsFlags.del == 1) gsmState = SMS_Del;	//set when sms content read
 800bab8:	4b1f      	ldr	r3, [pc, #124]	; (800bb38 <OK+0xbc>)
 800baba:	6a1b      	ldr	r3, [r3, #32]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d102      	bne.n	800bac6 <OK+0x4a>
 800bac0:	4b1e      	ldr	r3, [pc, #120]	; (800bb3c <OK+0xc0>)
 800bac2:	2217      	movs	r2, #23
 800bac4:	701a      	strb	r2, [r3, #0]
	if (gsmState == AutoBaud) gsmState = Search;
 800bac6:	4b1d      	ldr	r3, [pc, #116]	; (800bb3c <OK+0xc0>)
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	2b1f      	cmp	r3, #31
 800bacc:	d102      	bne.n	800bad4 <OK+0x58>
 800bace:	4b1b      	ldr	r3, [pc, #108]	; (800bb3c <OK+0xc0>)
 800bad0:	2204      	movs	r2, #4
 800bad2:	701a      	strb	r2, [r3, #0]
	if (gsmState == GPRS_SendMode) gsmState = GPRS_SendModeTRans;
 800bad4:	4b19      	ldr	r3, [pc, #100]	; (800bb3c <OK+0xc0>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b1d      	cmp	r3, #29
 800bada:	d102      	bne.n	800bae2 <OK+0x66>
 800badc:	4b17      	ldr	r3, [pc, #92]	; (800bb3c <OK+0xc0>)
 800bade:	221e      	movs	r2, #30
 800bae0:	701a      	strb	r2, [r3, #0]
	if ((gsmInfo.FS_SeekFlag == 1)&&(gsmInfo.FS_Connect== 1)){
 800bae2:	4a17      	ldr	r2, [pc, #92]	; (800bb40 <OK+0xc4>)
 800bae4:	23b4      	movs	r3, #180	; 0xb4
 800bae6:	005b      	lsls	r3, r3, #1
 800bae8:	58d3      	ldr	r3, [r2, r3]
 800baea:	2b01      	cmp	r3, #1
 800baec:	d10d      	bne.n	800bb0a <OK+0x8e>
 800baee:	4a14      	ldr	r2, [pc, #80]	; (800bb40 <OK+0xc4>)
 800baf0:	23b6      	movs	r3, #182	; 0xb6
 800baf2:	005b      	lsls	r3, r3, #1
 800baf4:	58d3      	ldr	r3, [r2, r3]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d107      	bne.n	800bb0a <OK+0x8e>
		//Read();
		gsmInfo.FS_SeekFlag = 0;
 800bafa:	4a11      	ldr	r2, [pc, #68]	; (800bb40 <OK+0xc4>)
 800bafc:	23b4      	movs	r3, #180	; 0xb4
 800bafe:	005b      	lsls	r3, r3, #1
 800bb00:	2100      	movs	r1, #0
 800bb02:	50d1      	str	r1, [r2, r3]
		gsmState = FS_Read;
 800bb04:	4b0d      	ldr	r3, [pc, #52]	; (800bb3c <OK+0xc0>)
 800bb06:	2230      	movs	r2, #48	; 0x30
 800bb08:	701a      	strb	r2, [r3, #0]
	}
	if ((ftpRead == 1)&&(gsmInfo.FS_Connect == 1)){
 800bb0a:	4b0e      	ldr	r3, [pc, #56]	; (800bb44 <OK+0xc8>)
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d10b      	bne.n	800bb2a <OK+0xae>
 800bb12:	4a0b      	ldr	r2, [pc, #44]	; (800bb40 <OK+0xc4>)
 800bb14:	23b6      	movs	r3, #182	; 0xb6
 800bb16:	005b      	lsls	r3, r3, #1
 800bb18:	58d3      	ldr	r3, [r2, r3]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d105      	bne.n	800bb2a <OK+0xae>
		ftpRead = 0;
 800bb1e:	4b09      	ldr	r3, [pc, #36]	; (800bb44 <OK+0xc8>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	701a      	strb	r2, [r3, #0]
		gsmState = FS_Seek;
 800bb24:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <OK+0xc0>)
 800bb26:	222f      	movs	r2, #47	; 0x2f
 800bb28:	701a      	strb	r2, [r3, #0]
	}
	//if (gsmState == 12) gsmState = 6;
	//sprintf(count, "GSM state=%d", gsmState);
	//sendData(count,UART0);
	//sendData("\r\n",UART0);
}
 800bb2a:	46c0      	nop			; (mov r8, r8)
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	20000178 	.word	0x20000178
 800bb34:	2000156c 	.word	0x2000156c
 800bb38:	2000112c 	.word	0x2000112c
 800bb3c:	200000c0 	.word	0x200000c0
 800bb40:	20001720 	.word	0x20001720
 800bb44:	2000197c 	.word	0x2000197c

0800bb48 <GPRS_SendData>:

void GPRS_SendData(char* gprs){
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	int len;
	len = strlen(gprs);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	0018      	movs	r0, r3
 800bb54:	f7fd fae2 	bl	800911c <strlen>
 800bb58:	0003      	movs	r3, r0
 800bb5a:	60fb      	str	r3, [r7, #12]
	Debug_Send(gprs);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	0018      	movs	r0, r3
 800bb60:	f7fe fd40 	bl	800a5e4 <Debug_Send>
	Debug_Send("-send\r\n");
 800bb64:	4b07      	ldr	r3, [pc, #28]	; (800bb84 <GPRS_SendData+0x3c>)
 800bb66:	0018      	movs	r0, r3
 800bb68:	f7fe fd3c 	bl	800a5e4 <Debug_Send>
	GSM_Send(gprs);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	0018      	movs	r0, r3
 800bb70:	f7fe fce6 	bl	800a540 <GSM_Send>
	//sendData("\r\n",UART1);
	//sendData(GPRSresult,UART0);
	//sendData("\r\n",UART0);
	//sprintf (temp,"GPRS send:GSM state-%d\r\n", gsmState);
	//	sendData(temp,UART0);
	GPRSresult[0] = 0;
 800bb74:	4b04      	ldr	r3, [pc, #16]	; (800bb88 <GPRS_SendData+0x40>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	701a      	strb	r2, [r3, #0]
}
 800bb7a:	46c0      	nop			; (mov r8, r8)
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	b004      	add	sp, #16
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	46c0      	nop			; (mov r8, r8)
 800bb84:	08012f98 	.word	0x08012f98
 800bb88:	20001290 	.word	0x20001290

0800bb8c <DataDecrypt>:
		//sendData("Connection closed automatically due to non � fatal alert\r\n",UART0);
		gsmState = GPRS_Off;  		//close socket
	}
}

void DataDecrypt(){
 800bb8c:	b5b0      	push	{r4, r5, r7, lr}
 800bb8e:	b0f8      	sub	sp, #480	; 0x1e0
 800bb90:	af02      	add	r7, sp, #8
	Debug_Send("Decrypt\r\n");
 800bb92:	4bd8      	ldr	r3, [pc, #864]	; (800bef4 <DataDecrypt+0x368>)
 800bb94:	0018      	movs	r0, r3
 800bb96:	f7fe fd25 	bl	800a5e4 <Debug_Send>
	Debug_Send(procBuff);
 800bb9a:	4bd7      	ldr	r3, [pc, #860]	; (800bef8 <DataDecrypt+0x36c>)
 800bb9c:	0018      	movs	r0, r3
 800bb9e:	f7fe fd21 	bl	800a5e4 <Debug_Send>
	Debug_Send("\r\n");
 800bba2:	4bd6      	ldr	r3, [pc, #856]	; (800befc <DataDecrypt+0x370>)
 800bba4:	0018      	movs	r0, r3
 800bba6:	f7fe fd1d 	bl	800a5e4 <Debug_Send>
	//char test1[10];
	char temp[180];
	char temp1[50];
	//strcpy(procBuff,"696E672F");
	int len;
	int index = 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	24ea      	movs	r4, #234	; 0xea
 800bbae:	0064      	lsls	r4, r4, #1
 800bbb0:	193a      	adds	r2, r7, r4
 800bbb2:	6013      	str	r3, [r2, #0]
	char hex[4];
	int hexIndex = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	22e8      	movs	r2, #232	; 0xe8
 800bbb8:	0052      	lsls	r2, r2, #1
 800bbba:	18ba      	adds	r2, r7, r2
 800bbbc:	6013      	str	r3, [r2, #0]
	int count = 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	22e6      	movs	r2, #230	; 0xe6
 800bbc2:	0052      	lsls	r2, r2, #1
 800bbc4:	18ba      	adds	r2, r7, r2
 800bbc6:	6013      	str	r3, [r2, #0]
	}
	//recIndex++;
	receive[recIndex] = 0;
	index = 0;
	myStrSection(receive, temp ,160,';',index);*/
	strcpy(receive,procBuff);
 800bbc8:	4acb      	ldr	r2, [pc, #812]	; (800bef8 <DataDecrypt+0x36c>)
 800bbca:	252c      	movs	r5, #44	; 0x2c
 800bbcc:	197b      	adds	r3, r7, r5
 800bbce:	0011      	movs	r1, r2
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	f005 ffd2 	bl	8011b7a <strcpy>
	myStrSection(receive, temp ,160,';',index);
 800bbd6:	193b      	adds	r3, r7, r4
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	228c      	movs	r2, #140	; 0x8c
 800bbde:	0052      	lsls	r2, r2, #1
 800bbe0:	18b9      	adds	r1, r7, r2
 800bbe2:	1978      	adds	r0, r7, r5
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	233b      	movs	r3, #59	; 0x3b
 800bbe8:	22a0      	movs	r2, #160	; 0xa0
 800bbea:	f000 feb6 	bl	800c95a <myStrSection>

	while (strlen(temp) > 1){
 800bbee:	e26f      	b.n	800c0d0 <DataDecrypt+0x544>
		Debug_Send(temp);
 800bbf0:	248c      	movs	r4, #140	; 0x8c
 800bbf2:	0064      	lsls	r4, r4, #1
 800bbf4:	193b      	adds	r3, r7, r4
 800bbf6:	0018      	movs	r0, r3
 800bbf8:	f7fe fcf4 	bl	800a5e4 <Debug_Send>
		Debug_Send("\r\n");
 800bbfc:	4bbf      	ldr	r3, [pc, #764]	; (800befc <DataDecrypt+0x370>)
 800bbfe:	0018      	movs	r0, r3
 800bc00:	f7fe fcf0 	bl	800a5e4 <Debug_Send>
		if(strncmp((char*)temp,"user",4)==0){
 800bc04:	49be      	ldr	r1, [pc, #760]	; (800bf00 <DataDecrypt+0x374>)
 800bc06:	193b      	adds	r3, r7, r4
 800bc08:	2204      	movs	r2, #4
 800bc0a:	0018      	movs	r0, r3
 800bc0c:	f005 ffbd 	bl	8011b8a <strncmp>
 800bc10:	1e03      	subs	r3, r0, #0
 800bc12:	d12b      	bne.n	800bc6c <DataDecrypt+0xe0>
			myStrSection(temp, temp1 ,40,':',1);
 800bc14:	25e4      	movs	r5, #228	; 0xe4
 800bc16:	1979      	adds	r1, r7, r5
 800bc18:	1938      	adds	r0, r7, r4
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	233a      	movs	r3, #58	; 0x3a
 800bc20:	2228      	movs	r2, #40	; 0x28
 800bc22:	f000 fe9a 	bl	800c95a <myStrSection>
			myStrSection(temp1, gsmInfo.user ,30,',',0);
 800bc26:	49b7      	ldr	r1, [pc, #732]	; (800bf04 <DataDecrypt+0x378>)
 800bc28:	1978      	adds	r0, r7, r5
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	232c      	movs	r3, #44	; 0x2c
 800bc30:	221e      	movs	r2, #30
 800bc32:	f000 fe92 	bl	800c95a <myStrSection>
			myStrSection(temp1, gsmInfo.msisdn ,30,',',1);
 800bc36:	49b4      	ldr	r1, [pc, #720]	; (800bf08 <DataDecrypt+0x37c>)
 800bc38:	1978      	adds	r0, r7, r5
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	232c      	movs	r3, #44	; 0x2c
 800bc40:	221e      	movs	r2, #30
 800bc42:	f000 fe8a 	bl	800c95a <myStrSection>
			Debug_Send(gsmInfo.user);
 800bc46:	4baf      	ldr	r3, [pc, #700]	; (800bf04 <DataDecrypt+0x378>)
 800bc48:	0018      	movs	r0, r3
 800bc4a:	f7fe fccb 	bl	800a5e4 <Debug_Send>
			Debug_Send(" - ");
 800bc4e:	4baf      	ldr	r3, [pc, #700]	; (800bf0c <DataDecrypt+0x380>)
 800bc50:	0018      	movs	r0, r3
 800bc52:	f7fe fcc7 	bl	800a5e4 <Debug_Send>
			Debug_Send(gsmInfo.msisdn);
 800bc56:	4bac      	ldr	r3, [pc, #688]	; (800bf08 <DataDecrypt+0x37c>)
 800bc58:	0018      	movs	r0, r3
 800bc5a:	f7fe fcc3 	bl	800a5e4 <Debug_Send>
			//LED = 0;
			Debug_Send("\r\n");
 800bc5e:	4ba7      	ldr	r3, [pc, #668]	; (800befc <DataDecrypt+0x370>)
 800bc60:	0018      	movs	r0, r3
 800bc62:	f7fe fcbf 	bl	800a5e4 <Debug_Send>
			gsmInfo.registered = 1;
 800bc66:	4baa      	ldr	r3, [pc, #680]	; (800bf10 <DataDecrypt+0x384>)
 800bc68:	2201      	movs	r2, #1
 800bc6a:	67da      	str	r2, [r3, #124]	; 0x7c
		}
		if(strncmp((char*)temp,"output",5)==0){
 800bc6c:	49a9      	ldr	r1, [pc, #676]	; (800bf14 <DataDecrypt+0x388>)
 800bc6e:	238c      	movs	r3, #140	; 0x8c
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	18fb      	adds	r3, r7, r3
 800bc74:	2205      	movs	r2, #5
 800bc76:	0018      	movs	r0, r3
 800bc78:	f005 ff87 	bl	8011b8a <strncmp>
 800bc7c:	1e03      	subs	r3, r0, #0
 800bc7e:	d11b      	bne.n	800bcb8 <DataDecrypt+0x12c>
			char state[5];
			myStrSection(receive, state ,4,':',1);
 800bc80:	2424      	movs	r4, #36	; 0x24
 800bc82:	1939      	adds	r1, r7, r4
 800bc84:	232c      	movs	r3, #44	; 0x2c
 800bc86:	18f8      	adds	r0, r7, r3
 800bc88:	2301      	movs	r3, #1
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	233a      	movs	r3, #58	; 0x3a
 800bc8e:	2204      	movs	r2, #4
 800bc90:	f000 fe63 	bl	800c95a <myStrSection>
			if(strncmp(state,"ON",2)==0){
 800bc94:	49a0      	ldr	r1, [pc, #640]	; (800bf18 <DataDecrypt+0x38c>)
 800bc96:	193b      	adds	r3, r7, r4
 800bc98:	2202      	movs	r2, #2
 800bc9a:	0018      	movs	r0, r3
 800bc9c:	f005 ff75 	bl	8011b8a <strncmp>
				if (gsmInfo.updateFlag == 0){
					//if (gsmInfo.activeFlag == 1) RELAY = 1;
				}
			}
			if(strncmp(state,"OFF",3)==0){
 800bca0:	499e      	ldr	r1, [pc, #632]	; (800bf1c <DataDecrypt+0x390>)
 800bca2:	193b      	adds	r3, r7, r4
 800bca4:	2203      	movs	r2, #3
 800bca6:	0018      	movs	r0, r3
 800bca8:	f005 ff6f 	bl	8011b8a <strncmp>
 800bcac:	1e03      	subs	r3, r0, #0
 800bcae:	d103      	bne.n	800bcb8 <DataDecrypt+0x12c>
				Debug_Send("Off\r\n");
 800bcb0:	4b9b      	ldr	r3, [pc, #620]	; (800bf20 <DataDecrypt+0x394>)
 800bcb2:	0018      	movs	r0, r3
 800bcb4:	f7fe fc96 	bl	800a5e4 <Debug_Send>
					//if (gsmInfo.activeFlag == 1) RELAY = 0;
				}
			}
			//CheckUser();
		}
		if(strncmp((char*)temp,"mode",4)==0){
 800bcb8:	499a      	ldr	r1, [pc, #616]	; (800bf24 <DataDecrypt+0x398>)
 800bcba:	248c      	movs	r4, #140	; 0x8c
 800bcbc:	0064      	lsls	r4, r4, #1
 800bcbe:	193b      	adds	r3, r7, r4
 800bcc0:	2204      	movs	r2, #4
 800bcc2:	0018      	movs	r0, r3
 800bcc4:	f005 ff61 	bl	8011b8a <strncmp>
 800bcc8:	1e03      	subs	r3, r0, #0
 800bcca:	d130      	bne.n	800bd2e <DataDecrypt+0x1a2>
			Debug_Send("GOT MODE!!!!!\r\n");
 800bccc:	4b96      	ldr	r3, [pc, #600]	; (800bf28 <DataDecrypt+0x39c>)
 800bcce:	0018      	movs	r0, r3
 800bcd0:	f7fe fc88 	bl	800a5e4 <Debug_Send>
			myStrSection(temp, temp1 ,40,':',1);
 800bcd4:	25e4      	movs	r5, #228	; 0xe4
 800bcd6:	1979      	adds	r1, r7, r5
 800bcd8:	1938      	adds	r0, r7, r4
 800bcda:	2301      	movs	r3, #1
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	233a      	movs	r3, #58	; 0x3a
 800bce0:	2228      	movs	r2, #40	; 0x28
 800bce2:	f000 fe3a 	bl	800c95a <myStrSection>
			if (strncmp(temp1,"latch",5)==0){
 800bce6:	4991      	ldr	r1, [pc, #580]	; (800bf2c <DataDecrypt+0x3a0>)
 800bce8:	197b      	adds	r3, r7, r5
 800bcea:	2205      	movs	r2, #5
 800bcec:	0018      	movs	r0, r3
 800bcee:	f005 ff4c 	bl	8011b8a <strncmp>
 800bcf2:	1e03      	subs	r3, r0, #0
 800bcf4:	d104      	bne.n	800bd00 <DataDecrypt+0x174>
				gsmInfo.modeFlag = 0;
 800bcf6:	4a86      	ldr	r2, [pc, #536]	; (800bf10 <DataDecrypt+0x384>)
 800bcf8:	2394      	movs	r3, #148	; 0x94
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	50d1      	str	r1, [r2, r3]
			}
			if (strncmp(temp1,"pulse",5)==0){
 800bd00:	498b      	ldr	r1, [pc, #556]	; (800bf30 <DataDecrypt+0x3a4>)
 800bd02:	23e4      	movs	r3, #228	; 0xe4
 800bd04:	18fb      	adds	r3, r7, r3
 800bd06:	2205      	movs	r2, #5
 800bd08:	0018      	movs	r0, r3
 800bd0a:	f005 ff3e 	bl	8011b8a <strncmp>
 800bd0e:	1e03      	subs	r3, r0, #0
 800bd10:	d104      	bne.n	800bd1c <DataDecrypt+0x190>
				gsmInfo.modeFlag = 1;
 800bd12:	4a7f      	ldr	r2, [pc, #508]	; (800bf10 <DataDecrypt+0x384>)
 800bd14:	2394      	movs	r3, #148	; 0x94
 800bd16:	005b      	lsls	r3, r3, #1
 800bd18:	2101      	movs	r1, #1
 800bd1a:	50d1      	str	r1, [r2, r3]
			}
			Debug_Send(temp1);
 800bd1c:	23e4      	movs	r3, #228	; 0xe4
 800bd1e:	18fb      	adds	r3, r7, r3
 800bd20:	0018      	movs	r0, r3
 800bd22:	f7fe fc5f 	bl	800a5e4 <Debug_Send>
			Debug_Send("\r\n");
 800bd26:	4b75      	ldr	r3, [pc, #468]	; (800befc <DataDecrypt+0x370>)
 800bd28:	0018      	movs	r0, r3
 800bd2a:	f7fe fc5b 	bl	800a5e4 <Debug_Send>
		}
		if(strncmp((char*)temp,"ccid",4)==0){
 800bd2e:	4981      	ldr	r1, [pc, #516]	; (800bf34 <DataDecrypt+0x3a8>)
 800bd30:	248c      	movs	r4, #140	; 0x8c
 800bd32:	0064      	lsls	r4, r4, #1
 800bd34:	193b      	adds	r3, r7, r4
 800bd36:	2204      	movs	r2, #4
 800bd38:	0018      	movs	r0, r3
 800bd3a:	f005 ff26 	bl	8011b8a <strncmp>
 800bd3e:	1e03      	subs	r3, r0, #0
 800bd40:	d122      	bne.n	800bd88 <DataDecrypt+0x1fc>
			char ccid1[30];
			myStrSection(temp, ccid1 ,40,':',1);
 800bd42:	1d39      	adds	r1, r7, #4
 800bd44:	1938      	adds	r0, r7, r4
 800bd46:	2301      	movs	r3, #1
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	233a      	movs	r3, #58	; 0x3a
 800bd4c:	2228      	movs	r2, #40	; 0x28
 800bd4e:	f000 fe04 	bl	800c95a <myStrSection>
			if (strncmp(gsmInfo.ccid,ccid1,25)==0){
 800bd52:	1d39      	adds	r1, r7, #4
 800bd54:	4b78      	ldr	r3, [pc, #480]	; (800bf38 <DataDecrypt+0x3ac>)
 800bd56:	2219      	movs	r2, #25
 800bd58:	0018      	movs	r0, r3
 800bd5a:	f005 ff16 	bl	8011b8a <strncmp>
 800bd5e:	1e03      	subs	r3, r0, #0
 800bd60:	d109      	bne.n	800bd76 <DataDecrypt+0x1ea>
				Debug_Send("CCID same\r\n");
 800bd62:	4b76      	ldr	r3, [pc, #472]	; (800bf3c <DataDecrypt+0x3b0>)
 800bd64:	0018      	movs	r0, r3
 800bd66:	f7fe fc3d 	bl	800a5e4 <Debug_Send>
				gsmInfo.ccidStatus = 0;
 800bd6a:	4a69      	ldr	r2, [pc, #420]	; (800bf10 <DataDecrypt+0x384>)
 800bd6c:	2398      	movs	r3, #152	; 0x98
 800bd6e:	005b      	lsls	r3, r3, #1
 800bd70:	2100      	movs	r1, #0
 800bd72:	50d1      	str	r1, [r2, r3]
 800bd74:	e008      	b.n	800bd88 <DataDecrypt+0x1fc>
			}
			else{
				//alarmFunc(ccid);
				//RELAY = 0;
				Debug_Send("CCID differ\r\n");
 800bd76:	4b72      	ldr	r3, [pc, #456]	; (800bf40 <DataDecrypt+0x3b4>)
 800bd78:	0018      	movs	r0, r3
 800bd7a:	f7fe fc33 	bl	800a5e4 <Debug_Send>
				gsmInfo.ccidStatus = 1;
 800bd7e:	4a64      	ldr	r2, [pc, #400]	; (800bf10 <DataDecrypt+0x384>)
 800bd80:	2398      	movs	r3, #152	; 0x98
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	2101      	movs	r1, #1
 800bd86:	50d1      	str	r1, [r2, r3]
			}
		}
		if(strncmp((char*)temp,"status",6)==0){
 800bd88:	496e      	ldr	r1, [pc, #440]	; (800bf44 <DataDecrypt+0x3b8>)
 800bd8a:	248c      	movs	r4, #140	; 0x8c
 800bd8c:	0064      	lsls	r4, r4, #1
 800bd8e:	193b      	adds	r3, r7, r4
 800bd90:	2206      	movs	r2, #6
 800bd92:	0018      	movs	r0, r3
 800bd94:	f005 fef9 	bl	8011b8a <strncmp>

		}
		if(strncmp((char*)temp,"vth1",4)==0){
 800bd98:	496b      	ldr	r1, [pc, #428]	; (800bf48 <DataDecrypt+0x3bc>)
 800bd9a:	193b      	adds	r3, r7, r4
 800bd9c:	2204      	movs	r2, #4
 800bd9e:	0018      	movs	r0, r3
 800bda0:	f005 fef3 	bl	8011b8a <strncmp>
 800bda4:	1e03      	subs	r3, r0, #0
 800bda6:	d12e      	bne.n	800be06 <DataDecrypt+0x27a>
			if (gsmInfo.vthFlag == 0){
 800bda8:	4a59      	ldr	r2, [pc, #356]	; (800bf10 <DataDecrypt+0x384>)
 800bdaa:	238a      	movs	r3, #138	; 0x8a
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	58d3      	ldr	r3, [r2, r3]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d120      	bne.n	800bdf6 <DataDecrypt+0x26a>
				Debug_Send("GOT THV!!!!!\r\n");
 800bdb4:	4b65      	ldr	r3, [pc, #404]	; (800bf4c <DataDecrypt+0x3c0>)
 800bdb6:	0018      	movs	r0, r3
 800bdb8:	f7fe fc14 	bl	800a5e4 <Debug_Send>
				myStrSection(temp, gsmInfo.vth ,5,':',1);
 800bdbc:	4964      	ldr	r1, [pc, #400]	; (800bf50 <DataDecrypt+0x3c4>)
 800bdbe:	1938      	adds	r0, r7, r4
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	233a      	movs	r3, #58	; 0x3a
 800bdc6:	2205      	movs	r2, #5
 800bdc8:	f000 fdc7 	bl	800c95a <myStrSection>
				gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
 800bdcc:	4b60      	ldr	r3, [pc, #384]	; (800bf50 <DataDecrypt+0x3c4>)
 800bdce:	210a      	movs	r1, #10
 800bdd0:	0018      	movs	r0, r3
 800bdd2:	f000 ff4f 	bl	800cc74 <myStrLong>
 800bdd6:	0001      	movs	r1, r0
 800bdd8:	4a4d      	ldr	r2, [pc, #308]	; (800bf10 <DataDecrypt+0x384>)
 800bdda:	2388      	movs	r3, #136	; 0x88
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	50d1      	str	r1, [r2, r3]
				gsmInfo.vth_l *= 100;
 800bde0:	4a4b      	ldr	r2, [pc, #300]	; (800bf10 <DataDecrypt+0x384>)
 800bde2:	2388      	movs	r3, #136	; 0x88
 800bde4:	005b      	lsls	r3, r3, #1
 800bde6:	58d3      	ldr	r3, [r2, r3]
 800bde8:	2264      	movs	r2, #100	; 0x64
 800bdea:	435a      	muls	r2, r3
 800bdec:	0011      	movs	r1, r2
 800bdee:	4a48      	ldr	r2, [pc, #288]	; (800bf10 <DataDecrypt+0x384>)
 800bdf0:	2388      	movs	r3, #136	; 0x88
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	50d1      	str	r1, [r2, r3]
			}
			Debug_Send(gsmInfo.vth);
 800bdf6:	4b56      	ldr	r3, [pc, #344]	; (800bf50 <DataDecrypt+0x3c4>)
 800bdf8:	0018      	movs	r0, r3
 800bdfa:	f7fe fbf3 	bl	800a5e4 <Debug_Send>
			Debug_Send("\r\n");
 800bdfe:	4b3f      	ldr	r3, [pc, #252]	; (800befc <DataDecrypt+0x370>)
 800be00:	0018      	movs	r0, r3
 800be02:	f7fe fbef 	bl	800a5e4 <Debug_Send>

		}
		if(strncmp((char*)smsInfo.content1,"vth",5)==0){
 800be06:	4a53      	ldr	r2, [pc, #332]	; (800bf54 <DataDecrypt+0x3c8>)
 800be08:	4b53      	ldr	r3, [pc, #332]	; (800bf58 <DataDecrypt+0x3cc>)
 800be0a:	0011      	movs	r1, r2
 800be0c:	0018      	movs	r0, r3
 800be0e:	f7fd f97b 	bl	8009108 <strcmp>
 800be12:	1e03      	subs	r3, r0, #0
 800be14:	d11c      	bne.n	800be50 <DataDecrypt+0x2c4>
			myStrSection(smsInfo.content1, gsmInfo.vth,4,':',1);
 800be16:	494e      	ldr	r1, [pc, #312]	; (800bf50 <DataDecrypt+0x3c4>)
 800be18:	484f      	ldr	r0, [pc, #316]	; (800bf58 <DataDecrypt+0x3cc>)
 800be1a:	2301      	movs	r3, #1
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	233a      	movs	r3, #58	; 0x3a
 800be20:	2204      	movs	r2, #4
 800be22:	f000 fd9a 	bl	800c95a <myStrSection>
			//gsmInfo.vth_f = atof(gsmInfo.vth);
			gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
 800be26:	4b4a      	ldr	r3, [pc, #296]	; (800bf50 <DataDecrypt+0x3c4>)
 800be28:	210a      	movs	r1, #10
 800be2a:	0018      	movs	r0, r3
 800be2c:	f000 ff22 	bl	800cc74 <myStrLong>
 800be30:	0001      	movs	r1, r0
 800be32:	4a37      	ldr	r2, [pc, #220]	; (800bf10 <DataDecrypt+0x384>)
 800be34:	2388      	movs	r3, #136	; 0x88
 800be36:	005b      	lsls	r3, r3, #1
 800be38:	50d1      	str	r1, [r2, r3]
			gsmInfo.vth_l *= 100;
 800be3a:	4a35      	ldr	r2, [pc, #212]	; (800bf10 <DataDecrypt+0x384>)
 800be3c:	2388      	movs	r3, #136	; 0x88
 800be3e:	005b      	lsls	r3, r3, #1
 800be40:	58d3      	ldr	r3, [r2, r3]
 800be42:	2264      	movs	r2, #100	; 0x64
 800be44:	435a      	muls	r2, r3
 800be46:	0011      	movs	r1, r2
 800be48:	4a31      	ldr	r2, [pc, #196]	; (800bf10 <DataDecrypt+0x384>)
 800be4a:	2388      	movs	r3, #136	; 0x88
 800be4c:	005b      	lsls	r3, r3, #1
 800be4e:	50d1      	str	r1, [r2, r3]
		}
		if(strncmp((char*)temp,"mode",4)==0){
 800be50:	4934      	ldr	r1, [pc, #208]	; (800bf24 <DataDecrypt+0x398>)
 800be52:	248c      	movs	r4, #140	; 0x8c
 800be54:	0064      	lsls	r4, r4, #1
 800be56:	193b      	adds	r3, r7, r4
 800be58:	2204      	movs	r2, #4
 800be5a:	0018      	movs	r0, r3
 800be5c:	f005 fe95 	bl	8011b8a <strncmp>

		}
		if(strncmp((char*)temp,"status",5)==0){
 800be60:	4938      	ldr	r1, [pc, #224]	; (800bf44 <DataDecrypt+0x3b8>)
 800be62:	193b      	adds	r3, r7, r4
 800be64:	2205      	movs	r2, #5
 800be66:	0018      	movs	r0, r3
 800be68:	f005 fe8f 	bl	8011b8a <strncmp>
 800be6c:	1e03      	subs	r3, r0, #0
 800be6e:	d121      	bne.n	800beb4 <DataDecrypt+0x328>
			myStrSection(temp, temp1 ,4,':',1);
 800be70:	25e4      	movs	r5, #228	; 0xe4
 800be72:	1979      	adds	r1, r7, r5
 800be74:	1938      	adds	r0, r7, r4
 800be76:	2301      	movs	r3, #1
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	233a      	movs	r3, #58	; 0x3a
 800be7c:	2204      	movs	r2, #4
 800be7e:	f000 fd6c 	bl	800c95a <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800be82:	197b      	adds	r3, r7, r5
 800be84:	781a      	ldrb	r2, [r3, #0]
 800be86:	4b35      	ldr	r3, [pc, #212]	; (800bf5c <DataDecrypt+0x3d0>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	d109      	bne.n	800bea2 <DataDecrypt+0x316>
				Debug_Send("Unit active\r\n");
 800be8e:	4b34      	ldr	r3, [pc, #208]	; (800bf60 <DataDecrypt+0x3d4>)
 800be90:	0018      	movs	r0, r3
 800be92:	f7fe fba7 	bl	800a5e4 <Debug_Send>
				gsmInfo.activeFlag = 1;
 800be96:	4a1e      	ldr	r2, [pc, #120]	; (800bf10 <DataDecrypt+0x384>)
 800be98:	2390      	movs	r3, #144	; 0x90
 800be9a:	005b      	lsls	r3, r3, #1
 800be9c:	2101      	movs	r1, #1
 800be9e:	50d1      	str	r1, [r2, r3]
 800bea0:	e008      	b.n	800beb4 <DataDecrypt+0x328>
			}
			else{
				gsmInfo.activeFlag = 0;
 800bea2:	4a1b      	ldr	r2, [pc, #108]	; (800bf10 <DataDecrypt+0x384>)
 800bea4:	2390      	movs	r3, #144	; 0x90
 800bea6:	005b      	lsls	r3, r3, #1
 800bea8:	2100      	movs	r1, #0
 800beaa:	50d1      	str	r1, [r2, r3]
				Debug_Send("Unit not active\r\n");
 800beac:	4b2d      	ldr	r3, [pc, #180]	; (800bf64 <DataDecrypt+0x3d8>)
 800beae:	0018      	movs	r0, r3
 800beb0:	f7fe fb98 	bl	800a5e4 <Debug_Send>
			}
		}
		if(strncmp((char*)temp,"sms",3)==0){
 800beb4:	492c      	ldr	r1, [pc, #176]	; (800bf68 <DataDecrypt+0x3dc>)
 800beb6:	248c      	movs	r4, #140	; 0x8c
 800beb8:	0064      	lsls	r4, r4, #1
 800beba:	193b      	adds	r3, r7, r4
 800bebc:	2203      	movs	r2, #3
 800bebe:	0018      	movs	r0, r3
 800bec0:	f005 fe63 	bl	8011b8a <strncmp>
 800bec4:	1e03      	subs	r3, r0, #0
 800bec6:	d157      	bne.n	800bf78 <DataDecrypt+0x3ec>
			myStrSection(temp, temp1 ,4,':',1);
 800bec8:	25e4      	movs	r5, #228	; 0xe4
 800beca:	1979      	adds	r1, r7, r5
 800becc:	1938      	adds	r0, r7, r4
 800bece:	2301      	movs	r3, #1
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	233a      	movs	r3, #58	; 0x3a
 800bed4:	2204      	movs	r2, #4
 800bed6:	f000 fd40 	bl	800c95a <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800beda:	197b      	adds	r3, r7, r5
 800bedc:	781a      	ldrb	r2, [r3, #0]
 800bede:	4b1f      	ldr	r3, [pc, #124]	; (800bf5c <DataDecrypt+0x3d0>)
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	d144      	bne.n	800bf70 <DataDecrypt+0x3e4>
				Debug_Send("Generate SMS\r\n");
 800bee6:	4b21      	ldr	r3, [pc, #132]	; (800bf6c <DataDecrypt+0x3e0>)
 800bee8:	0018      	movs	r0, r3
 800beea:	f7fe fb7b 	bl	800a5e4 <Debug_Send>
				buildInfo();
 800beee:	f7ff fb7f 	bl	800b5f0 <buildInfo>
 800bef2:	e041      	b.n	800bf78 <DataDecrypt+0x3ec>
 800bef4:	08012fc4 	.word	0x08012fc4
 800bef8:	200015a0 	.word	0x200015a0
 800befc:	0801254c 	.word	0x0801254c
 800bf00:	08012fd0 	.word	0x08012fd0
 800bf04:	200017b4 	.word	0x200017b4
 800bf08:	200017d2 	.word	0x200017d2
 800bf0c:	08012abc 	.word	0x08012abc
 800bf10:	20001720 	.word	0x20001720
 800bf14:	08012fd8 	.word	0x08012fd8
 800bf18:	08012da0 	.word	0x08012da0
 800bf1c:	08012da4 	.word	0x08012da4
 800bf20:	08012fe0 	.word	0x08012fe0
 800bf24:	08012fe8 	.word	0x08012fe8
 800bf28:	08012ff0 	.word	0x08012ff0
 800bf2c:	08013000 	.word	0x08013000
 800bf30:	08013008 	.word	0x08013008
 800bf34:	08013010 	.word	0x08013010
 800bf38:	2000176c 	.word	0x2000176c
 800bf3c:	08013018 	.word	0x08013018
 800bf40:	08013024 	.word	0x08013024
 800bf44:	08013034 	.word	0x08013034
 800bf48:	0801303c 	.word	0x0801303c
 800bf4c:	08013044 	.word	0x08013044
 800bf50:	20001824 	.word	0x20001824
 800bf54:	08013054 	.word	0x08013054
 800bf58:	200012bc 	.word	0x200012bc
 800bf5c:	08012fa4 	.word	0x08012fa4
 800bf60:	08013058 	.word	0x08013058
 800bf64:	08013068 	.word	0x08013068
 800bf68:	0801307c 	.word	0x0801307c
 800bf6c:	08013080 	.word	0x08013080
			}
			else Debug_Send("Dont generate SMS\r\n");
 800bf70:	4b6a      	ldr	r3, [pc, #424]	; (800c11c <DataDecrypt+0x590>)
 800bf72:	0018      	movs	r0, r3
 800bf74:	f7fe fb36 	bl	800a5e4 <Debug_Send>
		}
		if(strncmp((char*)temp,"sync",4)==0){
 800bf78:	4969      	ldr	r1, [pc, #420]	; (800c120 <DataDecrypt+0x594>)
 800bf7a:	248c      	movs	r4, #140	; 0x8c
 800bf7c:	0064      	lsls	r4, r4, #1
 800bf7e:	193b      	adds	r3, r7, r4
 800bf80:	2204      	movs	r2, #4
 800bf82:	0018      	movs	r0, r3
 800bf84:	f005 fe01 	bl	8011b8a <strncmp>
 800bf88:	1e03      	subs	r3, r0, #0
 800bf8a:	d117      	bne.n	800bfbc <DataDecrypt+0x430>
			myStrSection(temp, temp1 ,4,':',1);
 800bf8c:	25e4      	movs	r5, #228	; 0xe4
 800bf8e:	1979      	adds	r1, r7, r5
 800bf90:	1938      	adds	r0, r7, r4
 800bf92:	2301      	movs	r3, #1
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	233a      	movs	r3, #58	; 0x3a
 800bf98:	2204      	movs	r2, #4
 800bf9a:	f000 fcde 	bl	800c95a <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800bf9e:	197b      	adds	r3, r7, r5
 800bfa0:	781a      	ldrb	r2, [r3, #0]
 800bfa2:	4b60      	ldr	r3, [pc, #384]	; (800c124 <DataDecrypt+0x598>)
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	d104      	bne.n	800bfb4 <DataDecrypt+0x428>
				Debug_Send("Unit active\r\n");
 800bfaa:	4b5f      	ldr	r3, [pc, #380]	; (800c128 <DataDecrypt+0x59c>)
 800bfac:	0018      	movs	r0, r3
 800bfae:	f7fe fb19 	bl	800a5e4 <Debug_Send>
 800bfb2:	e003      	b.n	800bfbc <DataDecrypt+0x430>
			}
			else Debug_Send("Unit not active\r\n");
 800bfb4:	4b5d      	ldr	r3, [pc, #372]	; (800c12c <DataDecrypt+0x5a0>)
 800bfb6:	0018      	movs	r0, r3
 800bfb8:	f7fe fb14 	bl	800a5e4 <Debug_Send>
		}
		if(strncmp((char*)temp,"vthresh",7)==0){
 800bfbc:	495c      	ldr	r1, [pc, #368]	; (800c130 <DataDecrypt+0x5a4>)
 800bfbe:	248c      	movs	r4, #140	; 0x8c
 800bfc0:	0064      	lsls	r4, r4, #1
 800bfc2:	193b      	adds	r3, r7, r4
 800bfc4:	2207      	movs	r2, #7
 800bfc6:	0018      	movs	r0, r3
 800bfc8:	f005 fddf 	bl	8011b8a <strncmp>
 800bfcc:	1e03      	subs	r3, r0, #0
 800bfce:	d121      	bne.n	800c014 <DataDecrypt+0x488>
			myStrSection(temp, temp1 ,4,':',1);
 800bfd0:	25e4      	movs	r5, #228	; 0xe4
 800bfd2:	1979      	adds	r1, r7, r5
 800bfd4:	1938      	adds	r0, r7, r4
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	233a      	movs	r3, #58	; 0x3a
 800bfdc:	2204      	movs	r2, #4
 800bfde:	f000 fcbc 	bl	800c95a <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800bfe2:	197b      	adds	r3, r7, r5
 800bfe4:	781a      	ldrb	r2, [r3, #0]
 800bfe6:	4b4f      	ldr	r3, [pc, #316]	; (800c124 <DataDecrypt+0x598>)
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	d109      	bne.n	800c002 <DataDecrypt+0x476>
				Debug_Send("Threshold active\r\n");
 800bfee:	4b51      	ldr	r3, [pc, #324]	; (800c134 <DataDecrypt+0x5a8>)
 800bff0:	0018      	movs	r0, r3
 800bff2:	f7fe faf7 	bl	800a5e4 <Debug_Send>
				gsmInfo.vThreshold = 1;
 800bff6:	4a50      	ldr	r2, [pc, #320]	; (800c138 <DataDecrypt+0x5ac>)
 800bff8:	2396      	movs	r3, #150	; 0x96
 800bffa:	005b      	lsls	r3, r3, #1
 800bffc:	2101      	movs	r1, #1
 800bffe:	50d1      	str	r1, [r2, r3]
 800c000:	e008      	b.n	800c014 <DataDecrypt+0x488>
			}
			else{
				Debug_Send("Threshold not active\r\n");
 800c002:	4b4e      	ldr	r3, [pc, #312]	; (800c13c <DataDecrypt+0x5b0>)
 800c004:	0018      	movs	r0, r3
 800c006:	f7fe faed 	bl	800a5e4 <Debug_Send>
				gsmInfo.vThreshold = 0;
 800c00a:	4a4b      	ldr	r2, [pc, #300]	; (800c138 <DataDecrypt+0x5ac>)
 800c00c:	2396      	movs	r3, #150	; 0x96
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	2100      	movs	r1, #0
 800c012:	50d1      	str	r1, [r2, r3]
			}
		}
		if(strncmp((char*)temp,"saved",5)==0){
 800c014:	494a      	ldr	r1, [pc, #296]	; (800c140 <DataDecrypt+0x5b4>)
 800c016:	238c      	movs	r3, #140	; 0x8c
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	18fb      	adds	r3, r7, r3
 800c01c:	2205      	movs	r2, #5
 800c01e:	0018      	movs	r0, r3
 800c020:	f005 fdb3 	bl	8011b8a <strncmp>
 800c024:	1e03      	subs	r3, r0, #0
 800c026:	d109      	bne.n	800c03c <DataDecrypt+0x4b0>
			Debug_Send("Generate registration SMS\r\n");
 800c028:	4b46      	ldr	r3, [pc, #280]	; (800c144 <DataDecrypt+0x5b8>)
 800c02a:	0018      	movs	r0, r3
 800c02c:	f7fe fada 	bl	800a5e4 <Debug_Send>
			RegisterConfirm();
 800c030:	f7ff fa3c 	bl	800b4ac <RegisterConfirm>
			Debug_Send("Registration SMS generated\r\n");
 800c034:	4b44      	ldr	r3, [pc, #272]	; (800c148 <DataDecrypt+0x5bc>)
 800c036:	0018      	movs	r0, r3
 800c038:	f7fe fad4 	bl	800a5e4 <Debug_Send>
		}
		if(strncmp((char*)temp,"tmg",3)==0){
 800c03c:	4943      	ldr	r1, [pc, #268]	; (800c14c <DataDecrypt+0x5c0>)
 800c03e:	248c      	movs	r4, #140	; 0x8c
 800c040:	0064      	lsls	r4, r4, #1
 800c042:	193b      	adds	r3, r7, r4
 800c044:	2203      	movs	r2, #3
 800c046:	0018      	movs	r0, r3
 800c048:	f005 fd9f 	bl	8011b8a <strncmp>
 800c04c:	1e03      	subs	r3, r0, #0
 800c04e:	d11e      	bne.n	800c08e <DataDecrypt+0x502>
			myStrSection(temp, gsmInfo.GPRSint,20,':',1);
 800c050:	493f      	ldr	r1, [pc, #252]	; (800c150 <DataDecrypt+0x5c4>)
 800c052:	1938      	adds	r0, r7, r4
 800c054:	2301      	movs	r3, #1
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	233a      	movs	r3, #58	; 0x3a
 800c05a:	2214      	movs	r2, #20
 800c05c:	f000 fc7d 	bl	800c95a <myStrSection>
			gsmInfo.GPRSinterval = myStrLong(gsmInfo.GPRSint, 10);
 800c060:	4b3b      	ldr	r3, [pc, #236]	; (800c150 <DataDecrypt+0x5c4>)
 800c062:	210a      	movs	r1, #10
 800c064:	0018      	movs	r0, r3
 800c066:	f000 fe05 	bl	800cc74 <myStrLong>
 800c06a:	0001      	movs	r1, r0
 800c06c:	4a32      	ldr	r2, [pc, #200]	; (800c138 <DataDecrypt+0x5ac>)
 800c06e:	23a0      	movs	r3, #160	; 0xa0
 800c070:	005b      	lsls	r3, r3, #1
 800c072:	50d1      	str	r1, [r2, r3]
			gsmInfo.GPRSinterval *= 60;
 800c074:	4a30      	ldr	r2, [pc, #192]	; (800c138 <DataDecrypt+0x5ac>)
 800c076:	23a0      	movs	r3, #160	; 0xa0
 800c078:	005b      	lsls	r3, r3, #1
 800c07a:	58d2      	ldr	r2, [r2, r3]
 800c07c:	0013      	movs	r3, r2
 800c07e:	011b      	lsls	r3, r3, #4
 800c080:	1a9b      	subs	r3, r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	0019      	movs	r1, r3
 800c086:	4a2c      	ldr	r2, [pc, #176]	; (800c138 <DataDecrypt+0x5ac>)
 800c088:	23a0      	movs	r3, #160	; 0xa0
 800c08a:	005b      	lsls	r3, r3, #1
 800c08c:	50d1      	str	r1, [r2, r3]
			//gsmInfo.vth_f = atof(gsmInfo.vth);


			//gsmInfo.vthFlag = 1;
		}
		if(strncmp((char*)temp,"no user",7)==0){
 800c08e:	4931      	ldr	r1, [pc, #196]	; (800c154 <DataDecrypt+0x5c8>)
 800c090:	238c      	movs	r3, #140	; 0x8c
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	18fb      	adds	r3, r7, r3
 800c096:	2207      	movs	r2, #7
 800c098:	0018      	movs	r0, r3
 800c09a:	f005 fd76 	bl	8011b8a <strncmp>
 800c09e:	1e03      	subs	r3, r0, #0
 800c0a0:	d102      	bne.n	800c0a8 <DataDecrypt+0x51c>
			//LED = 1;
			gsmInfo.registered = 0;
 800c0a2:	4b25      	ldr	r3, [pc, #148]	; (800c138 <DataDecrypt+0x5ac>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	67da      	str	r2, [r3, #124]	; 0x7c
		}
		index++;
 800c0a8:	22ea      	movs	r2, #234	; 0xea
 800c0aa:	0052      	lsls	r2, r2, #1
 800c0ac:	18bb      	adds	r3, r7, r2
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	18b9      	adds	r1, r7, r2
 800c0b4:	600b      	str	r3, [r1, #0]
		myStrSection(receive, temp ,160,';',index);
 800c0b6:	18bb      	adds	r3, r7, r2
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	228c      	movs	r2, #140	; 0x8c
 800c0be:	0052      	lsls	r2, r2, #1
 800c0c0:	18b9      	adds	r1, r7, r2
 800c0c2:	222c      	movs	r2, #44	; 0x2c
 800c0c4:	18b8      	adds	r0, r7, r2
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	233b      	movs	r3, #59	; 0x3b
 800c0ca:	22a0      	movs	r2, #160	; 0xa0
 800c0cc:	f000 fc45 	bl	800c95a <myStrSection>
	while (strlen(temp) > 1){
 800c0d0:	238c      	movs	r3, #140	; 0x8c
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	18fb      	adds	r3, r7, r3
 800c0d6:	0018      	movs	r0, r3
 800c0d8:	f7fd f820 	bl	800911c <strlen>
 800c0dc:	0003      	movs	r3, r0
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d900      	bls.n	800c0e4 <DataDecrypt+0x558>
 800c0e2:	e585      	b.n	800bbf0 <DataDecrypt+0x64>
	}
	//if(strncmp((char*)temp,"vth",3)==0){
	gsmInfo.updateFlag = 0;
 800c0e4:	4a14      	ldr	r2, [pc, #80]	; (800c138 <DataDecrypt+0x5ac>)
 800c0e6:	2392      	movs	r3, #146	; 0x92
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	50d1      	str	r1, [r2, r3]
	//}
	//Debug_Send(receive);
	//Debug_Send("\r\n");
	receive[0] = 0;
 800c0ee:	4b1a      	ldr	r3, [pc, #104]	; (800c158 <DataDecrypt+0x5cc>)
 800c0f0:	22ec      	movs	r2, #236	; 0xec
 800c0f2:	0052      	lsls	r2, r2, #1
 800c0f4:	4694      	mov	ip, r2
 800c0f6:	44bc      	add	ip, r7
 800c0f8:	4463      	add	r3, ip
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	701a      	strb	r2, [r3, #0]
	gsmState = SocketClose;
 800c0fe:	4b17      	ldr	r3, [pc, #92]	; (800c15c <DataDecrypt+0x5d0>)
 800c100:	2216      	movs	r2, #22
 800c102:	701a      	strb	r2, [r3, #0]
	gsmInfo.GPRS_Rec = 0;
 800c104:	4a0c      	ldr	r2, [pc, #48]	; (800c138 <DataDecrypt+0x5ac>)
 800c106:	23ac      	movs	r3, #172	; 0xac
 800c108:	005b      	lsls	r3, r3, #1
 800c10a:	2100      	movs	r1, #0
 800c10c:	50d1      	str	r1, [r2, r3]
	gsmState = 0;
 800c10e:	4b13      	ldr	r3, [pc, #76]	; (800c15c <DataDecrypt+0x5d0>)
 800c110:	2200      	movs	r2, #0
 800c112:	701a      	strb	r2, [r3, #0]
}
 800c114:	46c0      	nop			; (mov r8, r8)
 800c116:	46bd      	mov	sp, r7
 800c118:	b076      	add	sp, #472	; 0x1d8
 800c11a:	bdb0      	pop	{r4, r5, r7, pc}
 800c11c:	08013090 	.word	0x08013090
 800c120:	080130a4 	.word	0x080130a4
 800c124:	08012fa4 	.word	0x08012fa4
 800c128:	08013058 	.word	0x08013058
 800c12c:	08013068 	.word	0x08013068
 800c130:	080130ac 	.word	0x080130ac
 800c134:	080130b4 	.word	0x080130b4
 800c138:	20001720 	.word	0x20001720
 800c13c:	080130c8 	.word	0x080130c8
 800c140:	080130e0 	.word	0x080130e0
 800c144:	080130e8 	.word	0x080130e8
 800c148:	08013104 	.word	0x08013104
 800c14c:	08013124 	.word	0x08013124
 800c150:	20001864 	.word	0x20001864
 800c154:	08013128 	.word	0x08013128
 800c158:	fffffe54 	.word	0xfffffe54
 800c15c:	200000c0 	.word	0x200000c0

0800c160 <GSM_Receive>:
	 //sendData(testS,UART0);
	return count;
}


void GSM_Receive(char in){
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	0002      	movs	r2, r0
 800c168:	1dfb      	adds	r3, r7, #7
 800c16a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800c16c:	2380      	movs	r3, #128	; 0x80
 800c16e:	01db      	lsls	r3, r3, #7
 800c170:	4a20      	ldr	r2, [pc, #128]	; (800c1f4 <GSM_Receive+0x94>)
 800c172:	0019      	movs	r1, r3
 800c174:	0010      	movs	r0, r2
 800c176:	f001 fb0e 	bl	800d796 <HAL_GPIO_TogglePin>
	gsmInfo.Timeout = 0;
 800c17a:	4a1f      	ldr	r2, [pc, #124]	; (800c1f8 <GSM_Receive+0x98>)
 800c17c:	23b0      	movs	r3, #176	; 0xb0
 800c17e:	005b      	lsls	r3, r3, #1
 800c180:	2100      	movs	r1, #0
 800c182:	50d1      	str	r1, [r2, r3]
	//HAL_UART_Receive_IT(&huart2, temp, 50);

	if (ftpinc < 60){
 800c184:	4b1d      	ldr	r3, [pc, #116]	; (800c1fc <GSM_Receive+0x9c>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b3b      	cmp	r3, #59	; 0x3b
 800c18a:	dc11      	bgt.n	800c1b0 <GSM_Receive+0x50>
		ftpReceived[ftpinc] = in;
 800c18c:	4b1b      	ldr	r3, [pc, #108]	; (800c1fc <GSM_Receive+0x9c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a1b      	ldr	r2, [pc, #108]	; (800c200 <GSM_Receive+0xa0>)
 800c192:	1df9      	adds	r1, r7, #7
 800c194:	7809      	ldrb	r1, [r1, #0]
 800c196:	54d1      	strb	r1, [r2, r3]
		//HAL_UART_Transmit(&huart1, ftpReceived[ftpinc], 1, 10);
		ftpinc++;
 800c198:	4b18      	ldr	r3, [pc, #96]	; (800c1fc <GSM_Receive+0x9c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	1c5a      	adds	r2, r3, #1
 800c19e:	4b17      	ldr	r3, [pc, #92]	; (800c1fc <GSM_Receive+0x9c>)
 800c1a0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800c1a2:	2380      	movs	r3, #128	; 0x80
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	4a17      	ldr	r2, [pc, #92]	; (800c204 <GSM_Receive+0xa4>)
 800c1a8:	0019      	movs	r1, r3
 800c1aa:	0010      	movs	r0, r2
 800c1ac:	f001 faf3 	bl	800d796 <HAL_GPIO_TogglePin>
	}
	//else{
		if (in == '>') gsmInfo.Prompt = 1;
 800c1b0:	1dfb      	adds	r3, r7, #7
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	2b3e      	cmp	r3, #62	; 0x3e
 800c1b6:	d104      	bne.n	800c1c2 <GSM_Receive+0x62>
 800c1b8:	4a0f      	ldr	r2, [pc, #60]	; (800c1f8 <GSM_Receive+0x98>)
 800c1ba:	23ae      	movs	r3, #174	; 0xae
 800c1bc:	005b      	lsls	r3, r3, #1
 800c1be:	2101      	movs	r1, #1
 800c1c0:	50d1      	str	r1, [r2, r3]
		//if (in != 0x0A){
			recBuffDebug[recBuffPointerWrite] = in;
 800c1c2:	4b11      	ldr	r3, [pc, #68]	; (800c208 <GSM_Receive+0xa8>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a11      	ldr	r2, [pc, #68]	; (800c20c <GSM_Receive+0xac>)
 800c1c8:	1df9      	adds	r1, r7, #7
 800c1ca:	7809      	ldrb	r1, [r1, #0]
 800c1cc:	54d1      	strb	r1, [r2, r3]
			//HAL_UART_Transmit(&huart1, recBuff[recBuffPointerWrite], 2, 10);
			//huart1.Instance->TDR = in;
			recBuffPointerWrite++;
 800c1ce:	4b0e      	ldr	r3, [pc, #56]	; (800c208 <GSM_Receive+0xa8>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	1c5a      	adds	r2, r3, #1
 800c1d4:	4b0c      	ldr	r3, [pc, #48]	; (800c208 <GSM_Receive+0xa8>)
 800c1d6:	601a      	str	r2, [r3, #0]
			if (recBuffPointerWrite > recBuffSize) recBuffPointerWrite = 0;
 800c1d8:	4b0b      	ldr	r3, [pc, #44]	; (800c208 <GSM_Receive+0xa8>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	2396      	movs	r3, #150	; 0x96
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	dd02      	ble.n	800c1ea <GSM_Receive+0x8a>
 800c1e4:	4b08      	ldr	r3, [pc, #32]	; (800c208 <GSM_Receive+0xa8>)
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	601a      	str	r2, [r3, #0]
		//}
	//}

}
 800c1ea:	46c0      	nop			; (mov r8, r8)
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	b002      	add	sp, #8
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	48000800 	.word	0x48000800
 800c1f8:	20001720 	.word	0x20001720
 800c1fc:	200000c8 	.word	0x200000c8
 800c200:	200018e0 	.word	0x200018e0
 800c204:	48000400 	.word	0x48000400
 800c208:	20000168 	.word	0x20000168
 800c20c:	2000115c 	.word	0x2000115c

0800c210 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	4a06      	ldr	r2, [pc, #24]	; (800c238 <vApplicationGetIdleTaskMemory+0x28>)
 800c220:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	4a05      	ldr	r2, [pc, #20]	; (800c23c <vApplicationGetIdleTaskMemory+0x2c>)
 800c226:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2280      	movs	r2, #128	; 0x80
 800c22c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800c22e:	46c0      	nop			; (mov r8, r8)
 800c230:	46bd      	mov	sp, r7
 800c232:	b004      	add	sp, #16
 800c234:	bd80      	pop	{r7, pc}
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	20000188 	.word	0x20000188
 800c23c:	200001dc 	.word	0x200001dc

0800c240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c240:	b5b0      	push	{r4, r5, r7, lr}
 800c242:	b08e      	sub	sp, #56	; 0x38
 800c244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	remap();
 800c246:	f000 f9cb 	bl	800c5e0 <remap>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c24a:	f000 ff2b 	bl	800d0a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c24e:	f000 f83f 	bl	800c2d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c252:	f000 f933 	bl	800c4bc <MX_GPIO_Init>
  MX_SPI2_Init();
 800c256:	f000 f893 	bl	800c380 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800c25a:	f000 f8cf 	bl	800c3fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800c25e:	f000 f8fd 	bl	800c45c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_SET);
 800c262:	2380      	movs	r3, #128	; 0x80
 800c264:	0059      	lsls	r1, r3, #1
 800c266:	2390      	movs	r3, #144	; 0x90
 800c268:	05db      	lsls	r3, r3, #23
 800c26a:	2201      	movs	r2, #1
 800c26c:	0018      	movs	r0, r3
 800c26e:	f001 fa75 	bl	800d75c <HAL_GPIO_WritePin>
  GSM_Init();
 800c272:	f7fd f803 	bl	800927c <GSM_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800c276:	211c      	movs	r1, #28
 800c278:	187b      	adds	r3, r7, r1
 800c27a:	4a11      	ldr	r2, [pc, #68]	; (800c2c0 <main+0x80>)
 800c27c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800c27e:	c331      	stmia	r3!, {r0, r4, r5}
 800c280:	ca31      	ldmia	r2!, {r0, r4, r5}
 800c282:	c331      	stmia	r3!, {r0, r4, r5}
 800c284:	6812      	ldr	r2, [r2, #0]
 800c286:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800c288:	187b      	adds	r3, r7, r1
 800c28a:	2100      	movs	r1, #0
 800c28c:	0018      	movs	r0, r3
 800c28e:	f004 fb62 	bl	8010956 <osThreadCreate>
 800c292:	0002      	movs	r2, r0
 800c294:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <main+0x84>)
 800c296:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800c298:	003b      	movs	r3, r7
 800c29a:	4a0b      	ldr	r2, [pc, #44]	; (800c2c8 <main+0x88>)
 800c29c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800c29e:	c313      	stmia	r3!, {r0, r1, r4}
 800c2a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 800c2a2:	c313      	stmia	r3!, {r0, r1, r4}
 800c2a4:	6812      	ldr	r2, [r2, #0]
 800c2a6:	601a      	str	r2, [r3, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800c2a8:	003b      	movs	r3, r7
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	0018      	movs	r0, r3
 800c2ae:	f004 fb52 	bl	8010956 <osThreadCreate>
 800c2b2:	0002      	movs	r2, r0
 800c2b4:	4b05      	ldr	r3, [pc, #20]	; (800c2cc <main+0x8c>)
 800c2b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800c2b8:	f004 fb45 	bl	8010946 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800c2bc:	e7fe      	b.n	800c2bc <main+0x7c>
 800c2be:	46c0      	nop			; (mov r8, r8)
 800c2c0:	08013148 	.word	0x08013148
 800c2c4:	200019a0 	.word	0x200019a0
 800c2c8:	08013164 	.word	0x08013164
 800c2cc:	20001a8c 	.word	0x20001a8c

0800c2d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b099      	sub	sp, #100	; 0x64
 800c2d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c2d6:	242c      	movs	r4, #44	; 0x2c
 800c2d8:	193b      	adds	r3, r7, r4
 800c2da:	0018      	movs	r0, r3
 800c2dc:	2334      	movs	r3, #52	; 0x34
 800c2de:	001a      	movs	r2, r3
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	f005 fc14 	bl	8011b0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c2e6:	231c      	movs	r3, #28
 800c2e8:	18fb      	adds	r3, r7, r3
 800c2ea:	0018      	movs	r0, r3
 800c2ec:	2310      	movs	r3, #16
 800c2ee:	001a      	movs	r2, r3
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	f005 fc0c 	bl	8011b0e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c2f6:	003b      	movs	r3, r7
 800c2f8:	0018      	movs	r0, r3
 800c2fa:	231c      	movs	r3, #28
 800c2fc:	001a      	movs	r2, r3
 800c2fe:	2100      	movs	r1, #0
 800c300:	f005 fc05 	bl	8011b0e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800c304:	193b      	adds	r3, r7, r4
 800c306:	2220      	movs	r2, #32
 800c308:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c30a:	193b      	adds	r3, r7, r4
 800c30c:	2201      	movs	r2, #1
 800c30e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c310:	193b      	adds	r3, r7, r4
 800c312:	2200      	movs	r2, #0
 800c314:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c316:	193b      	adds	r3, r7, r4
 800c318:	0018      	movs	r0, r3
 800c31a:	f001 fa57 	bl	800d7cc <HAL_RCC_OscConfig>
 800c31e:	1e03      	subs	r3, r0, #0
 800c320:	d001      	beq.n	800c326 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800c322:	f000 fb15 	bl	800c950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c326:	211c      	movs	r1, #28
 800c328:	187b      	adds	r3, r7, r1
 800c32a:	2207      	movs	r2, #7
 800c32c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800c32e:	187b      	adds	r3, r7, r1
 800c330:	2203      	movs	r2, #3
 800c332:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c334:	187b      	adds	r3, r7, r1
 800c336:	2200      	movs	r2, #0
 800c338:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c33a:	187b      	adds	r3, r7, r1
 800c33c:	2280      	movs	r2, #128	; 0x80
 800c33e:	00d2      	lsls	r2, r2, #3
 800c340:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800c342:	187b      	adds	r3, r7, r1
 800c344:	2101      	movs	r1, #1
 800c346:	0018      	movs	r0, r3
 800c348:	f001 fdc6 	bl	800ded8 <HAL_RCC_ClockConfig>
 800c34c:	1e03      	subs	r3, r0, #0
 800c34e:	d001      	beq.n	800c354 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800c350:	f000 fafe 	bl	800c950 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800c354:	003b      	movs	r3, r7
 800c356:	2203      	movs	r2, #3
 800c358:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800c35a:	003b      	movs	r3, r7
 800c35c:	2200      	movs	r2, #0
 800c35e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c360:	003b      	movs	r3, r7
 800c362:	2200      	movs	r2, #0
 800c364:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c366:	003b      	movs	r3, r7
 800c368:	0018      	movs	r0, r3
 800c36a:	f001 ff2f 	bl	800e1cc <HAL_RCCEx_PeriphCLKConfig>
 800c36e:	1e03      	subs	r3, r0, #0
 800c370:	d001      	beq.n	800c376 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800c372:	f000 faed 	bl	800c950 <Error_Handler>
  }
}
 800c376:	46c0      	nop			; (mov r8, r8)
 800c378:	46bd      	mov	sp, r7
 800c37a:	b019      	add	sp, #100	; 0x64
 800c37c:	bd90      	pop	{r4, r7, pc}
	...

0800c380 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800c384:	4b1b      	ldr	r3, [pc, #108]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c386:	4a1c      	ldr	r2, [pc, #112]	; (800c3f8 <MX_SPI2_Init+0x78>)
 800c388:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800c38a:	4b1a      	ldr	r3, [pc, #104]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c38c:	2282      	movs	r2, #130	; 0x82
 800c38e:	0052      	lsls	r2, r2, #1
 800c390:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800c392:	4b18      	ldr	r3, [pc, #96]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c394:	2200      	movs	r2, #0
 800c396:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800c398:	4b16      	ldr	r3, [pc, #88]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c39a:	22e0      	movs	r2, #224	; 0xe0
 800c39c:	00d2      	lsls	r2, r2, #3
 800c39e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c3a0:	4b14      	ldr	r3, [pc, #80]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c3a6:	4b13      	ldr	r3, [pc, #76]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800c3ac:	4b11      	ldr	r3, [pc, #68]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3ae:	2280      	movs	r2, #128	; 0x80
 800c3b0:	0092      	lsls	r2, r2, #2
 800c3b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800c3b4:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3b6:	2220      	movs	r2, #32
 800c3b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c3ba:	4b0e      	ldr	r3, [pc, #56]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3bc:	2200      	movs	r2, #0
 800c3be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800c3c0:	4b0c      	ldr	r3, [pc, #48]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3c6:	4b0b      	ldr	r3, [pc, #44]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800c3cc:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3ce:	2207      	movs	r2, #7
 800c3d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800c3d2:	4b08      	ldr	r3, [pc, #32]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800c3d8:	4b06      	ldr	r3, [pc, #24]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3da:	2208      	movs	r2, #8
 800c3dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800c3de:	4b05      	ldr	r3, [pc, #20]	; (800c3f4 <MX_SPI2_Init+0x74>)
 800c3e0:	0018      	movs	r0, r3
 800c3e2:	f001 fff1 	bl	800e3c8 <HAL_SPI_Init>
 800c3e6:	1e03      	subs	r3, r0, #0
 800c3e8:	d001      	beq.n	800c3ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800c3ea:	f000 fab1 	bl	800c950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800c3ee:	46c0      	nop			; (mov r8, r8)
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	200019a4 	.word	0x200019a4
 800c3f8:	40003800 	.word	0x40003800

0800c3fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800c400:	4b14      	ldr	r3, [pc, #80]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c402:	4a15      	ldr	r2, [pc, #84]	; (800c458 <MX_USART1_UART_Init+0x5c>)
 800c404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800c406:	4b13      	ldr	r3, [pc, #76]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c408:	22e1      	movs	r2, #225	; 0xe1
 800c40a:	0252      	lsls	r2, r2, #9
 800c40c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800c40e:	4b11      	ldr	r3, [pc, #68]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c410:	2200      	movs	r2, #0
 800c412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800c414:	4b0f      	ldr	r3, [pc, #60]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c416:	2200      	movs	r2, #0
 800c418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800c41a:	4b0e      	ldr	r3, [pc, #56]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800c420:	4b0c      	ldr	r3, [pc, #48]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c422:	220c      	movs	r2, #12
 800c424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c426:	4b0b      	ldr	r3, [pc, #44]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c428:	2200      	movs	r2, #0
 800c42a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800c42c:	4b09      	ldr	r3, [pc, #36]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c42e:	2200      	movs	r2, #0
 800c430:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c432:	4b08      	ldr	r3, [pc, #32]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c434:	2200      	movs	r2, #0
 800c436:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c438:	4b06      	ldr	r3, [pc, #24]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800c43e:	4b05      	ldr	r3, [pc, #20]	; (800c454 <MX_USART1_UART_Init+0x58>)
 800c440:	0018      	movs	r0, r3
 800c442:	f002 fec3 	bl	800f1cc <HAL_UART_Init>
 800c446:	1e03      	subs	r3, r0, #0
 800c448:	d001      	beq.n	800c44e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800c44a:	f000 fa81 	bl	800c950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800c44e:	46c0      	nop			; (mov r8, r8)
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	20001a08 	.word	0x20001a08
 800c458:	40013800 	.word	0x40013800

0800c45c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800c460:	4b14      	ldr	r3, [pc, #80]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c462:	4a15      	ldr	r2, [pc, #84]	; (800c4b8 <MX_USART2_UART_Init+0x5c>)
 800c464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800c466:	4b13      	ldr	r3, [pc, #76]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c468:	22e1      	movs	r2, #225	; 0xe1
 800c46a:	0252      	lsls	r2, r2, #9
 800c46c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800c46e:	4b11      	ldr	r3, [pc, #68]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c470:	2200      	movs	r2, #0
 800c472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800c474:	4b0f      	ldr	r3, [pc, #60]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c476:	2200      	movs	r2, #0
 800c478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800c47a:	4b0e      	ldr	r3, [pc, #56]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800c480:	4b0c      	ldr	r3, [pc, #48]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c482:	220c      	movs	r2, #12
 800c484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c486:	4b0b      	ldr	r3, [pc, #44]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c488:	2200      	movs	r2, #0
 800c48a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800c48c:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c48e:	2200      	movs	r2, #0
 800c490:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c492:	4b08      	ldr	r3, [pc, #32]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c494:	2200      	movs	r2, #0
 800c496:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c498:	4b06      	ldr	r3, [pc, #24]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800c49e:	4b05      	ldr	r3, [pc, #20]	; (800c4b4 <MX_USART2_UART_Init+0x58>)
 800c4a0:	0018      	movs	r0, r3
 800c4a2:	f002 fe93 	bl	800f1cc <HAL_UART_Init>
 800c4a6:	1e03      	subs	r3, r0, #0
 800c4a8:	d001      	beq.n	800c4ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800c4aa:	f000 fa51 	bl	800c950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800c4ae:	46c0      	nop			; (mov r8, r8)
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	20001a90 	.word	0x20001a90
 800c4b8:	40004400 	.word	0x40004400

0800c4bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800c4bc:	b590      	push	{r4, r7, lr}
 800c4be:	b089      	sub	sp, #36	; 0x24
 800c4c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4c2:	240c      	movs	r4, #12
 800c4c4:	193b      	adds	r3, r7, r4
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	2314      	movs	r3, #20
 800c4ca:	001a      	movs	r2, r3
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	f005 fb1e 	bl	8011b0e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c4d2:	4b40      	ldr	r3, [pc, #256]	; (800c5d4 <MX_GPIO_Init+0x118>)
 800c4d4:	695a      	ldr	r2, [r3, #20]
 800c4d6:	4b3f      	ldr	r3, [pc, #252]	; (800c5d4 <MX_GPIO_Init+0x118>)
 800c4d8:	2180      	movs	r1, #128	; 0x80
 800c4da:	0309      	lsls	r1, r1, #12
 800c4dc:	430a      	orrs	r2, r1
 800c4de:	615a      	str	r2, [r3, #20]
 800c4e0:	4b3c      	ldr	r3, [pc, #240]	; (800c5d4 <MX_GPIO_Init+0x118>)
 800c4e2:	695a      	ldr	r2, [r3, #20]
 800c4e4:	2380      	movs	r3, #128	; 0x80
 800c4e6:	031b      	lsls	r3, r3, #12
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	60bb      	str	r3, [r7, #8]
 800c4ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4ee:	4b39      	ldr	r3, [pc, #228]	; (800c5d4 <MX_GPIO_Init+0x118>)
 800c4f0:	695a      	ldr	r2, [r3, #20]
 800c4f2:	4b38      	ldr	r3, [pc, #224]	; (800c5d4 <MX_GPIO_Init+0x118>)
 800c4f4:	2180      	movs	r1, #128	; 0x80
 800c4f6:	0289      	lsls	r1, r1, #10
 800c4f8:	430a      	orrs	r2, r1
 800c4fa:	615a      	str	r2, [r3, #20]
 800c4fc:	4b35      	ldr	r3, [pc, #212]	; (800c5d4 <MX_GPIO_Init+0x118>)
 800c4fe:	695a      	ldr	r2, [r3, #20]
 800c500:	2380      	movs	r3, #128	; 0x80
 800c502:	029b      	lsls	r3, r3, #10
 800c504:	4013      	ands	r3, r2
 800c506:	607b      	str	r3, [r7, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c50a:	4b32      	ldr	r3, [pc, #200]	; (800c5d4 <MX_GPIO_Init+0x118>)
 800c50c:	695a      	ldr	r2, [r3, #20]
 800c50e:	4b31      	ldr	r3, [pc, #196]	; (800c5d4 <MX_GPIO_Init+0x118>)
 800c510:	2180      	movs	r1, #128	; 0x80
 800c512:	02c9      	lsls	r1, r1, #11
 800c514:	430a      	orrs	r2, r1
 800c516:	615a      	str	r2, [r3, #20]
 800c518:	4b2e      	ldr	r3, [pc, #184]	; (800c5d4 <MX_GPIO_Init+0x118>)
 800c51a:	695a      	ldr	r2, [r3, #20]
 800c51c:	2380      	movs	r3, #128	; 0x80
 800c51e:	02db      	lsls	r3, r3, #11
 800c520:	4013      	ands	r3, r2
 800c522:	603b      	str	r3, [r7, #0]
 800c524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|GSM_Enable_Pin, GPIO_PIN_RESET);
 800c526:	23e0      	movs	r3, #224	; 0xe0
 800c528:	021b      	lsls	r3, r3, #8
 800c52a:	482b      	ldr	r0, [pc, #172]	; (800c5d8 <MX_GPIO_Init+0x11c>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	0019      	movs	r1, r3
 800c530:	f001 f914 	bl	800d75c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GSM_On_Pin|LED5_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 800c534:	23c3      	movs	r3, #195	; 0xc3
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	4828      	ldr	r0, [pc, #160]	; (800c5dc <MX_GPIO_Init+0x120>)
 800c53a:	2200      	movs	r2, #0
 800c53c:	0019      	movs	r1, r3
 800c53e:	f001 f90d 	bl	800d75c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800c542:	2380      	movs	r3, #128	; 0x80
 800c544:	0059      	lsls	r1, r3, #1
 800c546:	2390      	movs	r3, #144	; 0x90
 800c548:	05db      	lsls	r3, r3, #23
 800c54a:	2200      	movs	r2, #0
 800c54c:	0018      	movs	r0, r3
 800c54e:	f001 f905 	bl	800d75c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin GSM_Enable_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GSM_Enable_Pin;
 800c552:	193b      	adds	r3, r7, r4
 800c554:	22e0      	movs	r2, #224	; 0xe0
 800c556:	0212      	lsls	r2, r2, #8
 800c558:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c55a:	193b      	adds	r3, r7, r4
 800c55c:	2201      	movs	r2, #1
 800c55e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c560:	193b      	adds	r3, r7, r4
 800c562:	2200      	movs	r2, #0
 800c564:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c566:	193b      	adds	r3, r7, r4
 800c568:	2200      	movs	r2, #0
 800c56a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c56c:	193b      	adds	r3, r7, r4
 800c56e:	4a1a      	ldr	r2, [pc, #104]	; (800c5d8 <MX_GPIO_Init+0x11c>)
 800c570:	0019      	movs	r1, r3
 800c572:	0010      	movs	r0, r2
 800c574:	f000 ff7a 	bl	800d46c <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_On_Pin LED5_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = GSM_On_Pin|LED5_Pin|LED4_Pin|LED3_Pin;
 800c578:	0021      	movs	r1, r4
 800c57a:	187b      	adds	r3, r7, r1
 800c57c:	22c3      	movs	r2, #195	; 0xc3
 800c57e:	0092      	lsls	r2, r2, #2
 800c580:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c582:	000c      	movs	r4, r1
 800c584:	193b      	adds	r3, r7, r4
 800c586:	2201      	movs	r2, #1
 800c588:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c58a:	193b      	adds	r3, r7, r4
 800c58c:	2200      	movs	r2, #0
 800c58e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c590:	193b      	adds	r3, r7, r4
 800c592:	2200      	movs	r2, #0
 800c594:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c596:	193b      	adds	r3, r7, r4
 800c598:	4a10      	ldr	r2, [pc, #64]	; (800c5dc <MX_GPIO_Init+0x120>)
 800c59a:	0019      	movs	r1, r3
 800c59c:	0010      	movs	r0, r2
 800c59e:	f000 ff65 	bl	800d46c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800c5a2:	0021      	movs	r1, r4
 800c5a4:	187b      	adds	r3, r7, r1
 800c5a6:	2280      	movs	r2, #128	; 0x80
 800c5a8:	0052      	lsls	r2, r2, #1
 800c5aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c5ac:	187b      	adds	r3, r7, r1
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5b2:	187b      	adds	r3, r7, r1
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5b8:	187b      	adds	r3, r7, r1
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800c5be:	187a      	adds	r2, r7, r1
 800c5c0:	2390      	movs	r3, #144	; 0x90
 800c5c2:	05db      	lsls	r3, r3, #23
 800c5c4:	0011      	movs	r1, r2
 800c5c6:	0018      	movs	r0, r3
 800c5c8:	f000 ff50 	bl	800d46c <HAL_GPIO_Init>

}
 800c5cc:	46c0      	nop			; (mov r8, r8)
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	b009      	add	sp, #36	; 0x24
 800c5d2:	bd90      	pop	{r4, r7, pc}
 800c5d4:	40021000 	.word	0x40021000
 800c5d8:	48000800 	.word	0x48000800
 800c5dc:	48000400 	.word	0x48000400

0800c5e0 <remap>:
	 //Debug_Send(flash);
	 Debug_Send("\r\n");

 }*/

void remap(){
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
	 // Copy interrupt vector table to the RAM.
	 volatile uint32_t *VectorTable = (volatile uint32_t *)0x20000000;
 800c5e6:	2380      	movs	r3, #128	; 0x80
 800c5e8:	059b      	lsls	r3, r3, #22
 800c5ea:	60bb      	str	r3, [r7, #8]
	 uint32_t ui32_VectorIndex = 0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	60fb      	str	r3, [r7, #12]

	 for(ui32_VectorIndex = 0; ui32_VectorIndex < 48; ui32_VectorIndex++)
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	60fb      	str	r3, [r7, #12]
 800c5f4:	e00e      	b.n	800c614 <remap+0x34>
	 {
		 VectorTable[ui32_VectorIndex] = *(__IO uint32_t*)((uint32_t) 0x8009000 + (ui32_VectorIndex << 2));
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	4a1c      	ldr	r2, [pc, #112]	; (800c66c <remap+0x8c>)
 800c5fc:	4694      	mov	ip, r2
 800c5fe:	4463      	add	r3, ip
 800c600:	001a      	movs	r2, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	68b9      	ldr	r1, [r7, #8]
 800c608:	18cb      	adds	r3, r1, r3
 800c60a:	6812      	ldr	r2, [r2, #0]
 800c60c:	601a      	str	r2, [r3, #0]
	 for(ui32_VectorIndex = 0; ui32_VectorIndex < 48; ui32_VectorIndex++)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3301      	adds	r3, #1
 800c612:	60fb      	str	r3, [r7, #12]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b2f      	cmp	r3, #47	; 0x2f
 800c618:	d9ed      	bls.n	800c5f6 <remap+0x16>
	 }

	 __HAL_RCC_AHB_FORCE_RESET();
 800c61a:	4b15      	ldr	r3, [pc, #84]	; (800c670 <remap+0x90>)
 800c61c:	2201      	movs	r2, #1
 800c61e:	4252      	negs	r2, r2
 800c620:	629a      	str	r2, [r3, #40]	; 0x28

	 //  Enable SYSCFG peripheral clock
	 __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c622:	4b13      	ldr	r3, [pc, #76]	; (800c670 <remap+0x90>)
 800c624:	699a      	ldr	r2, [r3, #24]
 800c626:	4b12      	ldr	r3, [pc, #72]	; (800c670 <remap+0x90>)
 800c628:	2101      	movs	r1, #1
 800c62a:	430a      	orrs	r2, r1
 800c62c:	619a      	str	r2, [r3, #24]
 800c62e:	4b10      	ldr	r3, [pc, #64]	; (800c670 <remap+0x90>)
 800c630:	699b      	ldr	r3, [r3, #24]
 800c632:	2201      	movs	r2, #1
 800c634:	4013      	ands	r3, r2
 800c636:	607b      	str	r3, [r7, #4]
 800c638:	687b      	ldr	r3, [r7, #4]

	 __HAL_RCC_AHB_RELEASE_RESET();
 800c63a:	4b0d      	ldr	r3, [pc, #52]	; (800c670 <remap+0x90>)
 800c63c:	2200      	movs	r2, #0
 800c63e:	629a      	str	r2, [r3, #40]	; 0x28

	 // Remap RAM into 0x0000 0000
	 __HAL_SYSCFG_REMAPMEMORY_SRAM();
 800c640:	4b0c      	ldr	r3, [pc, #48]	; (800c674 <remap+0x94>)
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	4b0b      	ldr	r3, [pc, #44]	; (800c674 <remap+0x94>)
 800c646:	2103      	movs	r1, #3
 800c648:	438a      	bics	r2, r1
 800c64a:	601a      	str	r2, [r3, #0]
 800c64c:	4b09      	ldr	r3, [pc, #36]	; (800c674 <remap+0x94>)
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	4b08      	ldr	r3, [pc, #32]	; (800c674 <remap+0x94>)
 800c652:	2103      	movs	r1, #3
 800c654:	430a      	orrs	r2, r1
 800c656:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800c658:	b662      	cpsie	i
}
 800c65a:	46c0      	nop			; (mov r8, r8)

	 __enable_irq();
	 Debug_Send("test Vector table remapped\r\n");
 800c65c:	4b06      	ldr	r3, [pc, #24]	; (800c678 <remap+0x98>)
 800c65e:	0018      	movs	r0, r3
 800c660:	f7fd ffc0 	bl	800a5e4 <Debug_Send>
}
 800c664:	46c0      	nop			; (mov r8, r8)
 800c666:	46bd      	mov	sp, r7
 800c668:	b004      	add	sp, #16
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	08009000 	.word	0x08009000
 800c670:	40021000 	.word	0x40021000
 800c674:	40010000 	.word	0x40010000
 800c678:	08013180 	.word	0x08013180

0800c67c <flashPut>:

void flashPut(uint32_t p_addr,char* data, uint32_t size){
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b08d      	sub	sp, #52	; 0x34
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
	 unsigned char temp[30];
	 Debug_Send("Flash write: ");
 800c688:	4b3c      	ldr	r3, [pc, #240]	; (800c77c <flashPut+0x100>)
 800c68a:	0018      	movs	r0, r3
 800c68c:	f7fd ffaa 	bl	800a5e4 <Debug_Send>
	 /*Debug_Send(data);
	 if(data[0] == 0x0a) Debug_Send("a");
	 if(*data == 0x0a) Debug_Send("A");
	 if(data[0] == 0x0d) Debug_Send("d");
	 if(*data == 0x0d) Debug_Send("D");*/
	 Debug_Send(" at: ");
 800c690:	4b3b      	ldr	r3, [pc, #236]	; (800c780 <flashPut+0x104>)
 800c692:	0018      	movs	r0, r3
 800c694:	f7fd ffa6 	bl	800a5e4 <Debug_Send>
	 myLongStr(p_addr,temp,10,10);
 800c698:	2410      	movs	r4, #16
 800c69a:	1939      	adds	r1, r7, r4
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	230a      	movs	r3, #10
 800c6a0:	220a      	movs	r2, #10
 800c6a2:	f000 f9ef 	bl	800ca84 <myLongStr>
	 Debug_Send(temp);
 800c6a6:	193b      	adds	r3, r7, r4
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	f7fd ff9b 	bl	800a5e4 <Debug_Send>
	 Debug_Send(" , ");
 800c6ae:	4b35      	ldr	r3, [pc, #212]	; (800c784 <flashPut+0x108>)
 800c6b0:	0018      	movs	r0, r3
 800c6b2:	f7fd ff97 	bl	800a5e4 <Debug_Send>
	 myLongStr(size,temp,10,10);
 800c6b6:	1939      	adds	r1, r7, r4
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	230a      	movs	r3, #10
 800c6bc:	220a      	movs	r2, #10
 800c6be:	f000 f9e1 	bl	800ca84 <myLongStr>
	 Debug_Send(temp);
 800c6c2:	193b      	adds	r3, r7, r4
 800c6c4:	0018      	movs	r0, r3
 800c6c6:	f7fd ff8d 	bl	800a5e4 <Debug_Send>
	 Debug_Send("\r\n");
 800c6ca:	4b2f      	ldr	r3, [pc, #188]	; (800c788 <flashPut+0x10c>)
 800c6cc:	0018      	movs	r0, r3
 800c6ce:	f7fd ff89 	bl	800a5e4 <Debug_Send>
	 flashBusy();
 800c6d2:	f000 f8f1 	bl	800c8b8 <flashBusy>
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);	//set write enable flag
 800c6d6:	2380      	movs	r3, #128	; 0x80
 800c6d8:	0059      	lsls	r1, r3, #1
 800c6da:	2390      	movs	r3, #144	; 0x90
 800c6dc:	05db      	lsls	r3, r3, #23
 800c6de:	2200      	movs	r2, #0
 800c6e0:	0018      	movs	r0, r3
 800c6e2:	f001 f83b 	bl	800d75c <HAL_GPIO_WritePin>
	 temp[0] = M95_WRITE_EN;
 800c6e6:	193b      	adds	r3, r7, r4
 800c6e8:	2206      	movs	r2, #6
 800c6ea:	701a      	strb	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi2,temp,1,100);
 800c6ec:	1939      	adds	r1, r7, r4
 800c6ee:	4827      	ldr	r0, [pc, #156]	; (800c78c <flashPut+0x110>)
 800c6f0:	2364      	movs	r3, #100	; 0x64
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f001 ff20 	bl	800e538 <HAL_SPI_Transmit>
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800c6f8:	2380      	movs	r3, #128	; 0x80
 800c6fa:	0059      	lsls	r1, r3, #1
 800c6fc:	2390      	movs	r3, #144	; 0x90
 800c6fe:	05db      	lsls	r3, r3, #23
 800c700:	2201      	movs	r2, #1
 800c702:	0018      	movs	r0, r3
 800c704:	f001 f82a 	bl	800d75c <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 800c708:	2001      	movs	r0, #1
 800c70a:	f000 fd2f 	bl	800d16c <HAL_Delay>

	 //uint32_t p_addr = 30;

	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);	//load address
 800c70e:	2380      	movs	r3, #128	; 0x80
 800c710:	0059      	lsls	r1, r3, #1
 800c712:	2390      	movs	r3, #144	; 0x90
 800c714:	05db      	lsls	r3, r3, #23
 800c716:	2200      	movs	r2, #0
 800c718:	0018      	movs	r0, r3
 800c71a:	f001 f81f 	bl	800d75c <HAL_GPIO_WritePin>
	 temp[0] = M95_WRITE;
 800c71e:	193b      	adds	r3, r7, r4
 800c720:	2202      	movs	r2, #2
 800c722:	701a      	strb	r2, [r3, #0]
	 temp[1] = (p_addr>>16)&0xff;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	0c1b      	lsrs	r3, r3, #16
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	193b      	adds	r3, r7, r4
 800c72c:	705a      	strb	r2, [r3, #1]
	 temp[2] = (p_addr>>8)&0xff;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	0a1b      	lsrs	r3, r3, #8
 800c732:	b2da      	uxtb	r2, r3
 800c734:	193b      	adds	r3, r7, r4
 800c736:	709a      	strb	r2, [r3, #2]
	 temp[3] = p_addr&0xff;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	b2da      	uxtb	r2, r3
 800c73c:	193b      	adds	r3, r7, r4
 800c73e:	70da      	strb	r2, [r3, #3]

	 HAL_SPI_Transmit(&hspi2,temp,4,100);						//transmit address
 800c740:	1939      	adds	r1, r7, r4
 800c742:	4812      	ldr	r0, [pc, #72]	; (800c78c <flashPut+0x110>)
 800c744:	2364      	movs	r3, #100	; 0x64
 800c746:	2204      	movs	r2, #4
 800c748:	f001 fef6 	bl	800e538 <HAL_SPI_Transmit>

	 temp[0] = 68;
 800c74c:	193b      	adds	r3, r7, r4
 800c74e:	2244      	movs	r2, #68	; 0x44
 800c750:	701a      	strb	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi2,data,size,100);						//transmit data
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	b29a      	uxth	r2, r3
 800c756:	68b9      	ldr	r1, [r7, #8]
 800c758:	480c      	ldr	r0, [pc, #48]	; (800c78c <flashPut+0x110>)
 800c75a:	2364      	movs	r3, #100	; 0x64
 800c75c:	f001 feec 	bl	800e538 <HAL_SPI_Transmit>
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800c760:	2380      	movs	r3, #128	; 0x80
 800c762:	0059      	lsls	r1, r3, #1
 800c764:	2390      	movs	r3, #144	; 0x90
 800c766:	05db      	lsls	r3, r3, #23
 800c768:	2201      	movs	r2, #1
 800c76a:	0018      	movs	r0, r3
 800c76c:	f000 fff6 	bl	800d75c <HAL_GPIO_WritePin>

	 flashBusy();
 800c770:	f000 f8a2 	bl	800c8b8 <flashBusy>

}
 800c774:	46c0      	nop			; (mov r8, r8)
 800c776:	46bd      	mov	sp, r7
 800c778:	b00d      	add	sp, #52	; 0x34
 800c77a:	bd90      	pop	{r4, r7, pc}
 800c77c:	080131a0 	.word	0x080131a0
 800c780:	080131b0 	.word	0x080131b0
 800c784:	080131b8 	.word	0x080131b8
 800c788:	080131bc 	.word	0x080131bc
 800c78c:	200019a4 	.word	0x200019a4

0800c790 <flashWrite>:

void flashWrite( unsigned long p_addr,const char *p_buffer,unsigned short p_size){
 800c790:	b590      	push	{r4, r7, lr}
 800c792:	b087      	sub	sp, #28
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	1dbb      	adds	r3, r7, #6
 800c79c:	801a      	strh	r2, [r3, #0]
	//Flash_CS_Low();

	//myTRACE_Print(p_buffer);
	//myTRACE_Print(" p_buffer\n");
	//flash_struct.isBusy = 1;
	m95_size=p_size;
 800c79e:	2314      	movs	r3, #20
 800c7a0:	18fb      	adds	r3, r7, r3
 800c7a2:	1dba      	adds	r2, r7, #6
 800c7a4:	8812      	ldrh	r2, [r2, #0]
 800c7a6:	801a      	strh	r2, [r3, #0]
	//m95_tmp=p_addr/256;
	//m95_page_size=256-(p_addr-(m95_tmp*256));

	m95_page_size =256 - ( p_addr % 256);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	22ff      	movs	r2, #255	; 0xff
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	2316      	movs	r3, #22
 800c7b4:	18fb      	adds	r3, r7, r3
 800c7b6:	2180      	movs	r1, #128	; 0x80
 800c7b8:	0049      	lsls	r1, r1, #1
 800c7ba:	1a8a      	subs	r2, r1, r2
 800c7bc:	801a      	strh	r2, [r3, #0]
	while(m95_size){
 800c7be:	e032      	b.n	800c826 <flashWrite+0x96>
		if(m95_size>m95_page_size)
 800c7c0:	2314      	movs	r3, #20
 800c7c2:	18fa      	adds	r2, r7, r3
 800c7c4:	2116      	movs	r1, #22
 800c7c6:	187b      	adds	r3, r7, r1
 800c7c8:	8812      	ldrh	r2, [r2, #0]
 800c7ca:	881b      	ldrh	r3, [r3, #0]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d905      	bls.n	800c7dc <flashWrite+0x4c>
			m95_write_size=m95_page_size;
 800c7d0:	2312      	movs	r3, #18
 800c7d2:	18fb      	adds	r3, r7, r3
 800c7d4:	187a      	adds	r2, r7, r1
 800c7d6:	8812      	ldrh	r2, [r2, #0]
 800c7d8:	801a      	strh	r2, [r3, #0]
 800c7da:	e005      	b.n	800c7e8 <flashWrite+0x58>
		else
			m95_write_size=m95_size;
 800c7dc:	2312      	movs	r3, #18
 800c7de:	18fb      	adds	r3, r7, r3
 800c7e0:	2214      	movs	r2, #20
 800c7e2:	18ba      	adds	r2, r7, r2
 800c7e4:	8812      	ldrh	r2, [r2, #0]
 800c7e6:	801a      	strh	r2, [r3, #0]
		flashPut(p_addr,p_buffer,m95_write_size);
 800c7e8:	2412      	movs	r4, #18
 800c7ea:	193b      	adds	r3, r7, r4
 800c7ec:	881a      	ldrh	r2, [r3, #0]
 800c7ee:	68b9      	ldr	r1, [r7, #8]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	0018      	movs	r0, r3
 800c7f4:	f7ff ff42 	bl	800c67c <flashPut>
		m95_size-=m95_write_size;
 800c7f8:	2214      	movs	r2, #20
 800c7fa:	18bb      	adds	r3, r7, r2
 800c7fc:	18b9      	adds	r1, r7, r2
 800c7fe:	193a      	adds	r2, r7, r4
 800c800:	8809      	ldrh	r1, [r1, #0]
 800c802:	8812      	ldrh	r2, [r2, #0]
 800c804:	1a8a      	subs	r2, r1, r2
 800c806:	801a      	strh	r2, [r3, #0]
		p_buffer+=m95_write_size;
 800c808:	193b      	adds	r3, r7, r4
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	18d3      	adds	r3, r2, r3
 800c810:	60bb      	str	r3, [r7, #8]
		p_addr+=m95_write_size;
 800c812:	193b      	adds	r3, r7, r4
 800c814:	881b      	ldrh	r3, [r3, #0]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	18d3      	adds	r3, r2, r3
 800c81a:	60fb      	str	r3, [r7, #12]
		m95_page_size=256;
 800c81c:	2316      	movs	r3, #22
 800c81e:	18fb      	adds	r3, r7, r3
 800c820:	2280      	movs	r2, #128	; 0x80
 800c822:	0052      	lsls	r2, r2, #1
 800c824:	801a      	strh	r2, [r3, #0]
	while(m95_size){
 800c826:	2314      	movs	r3, #20
 800c828:	18fb      	adds	r3, r7, r3
 800c82a:	881b      	ldrh	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d1c7      	bne.n	800c7c0 <flashWrite+0x30>
	}
	//flash_struct.isBusy = 0;
	//Flash_CS_Hi();

}
 800c830:	46c0      	nop			; (mov r8, r8)
 800c832:	46c0      	nop			; (mov r8, r8)
 800c834:	46bd      	mov	sp, r7
 800c836:	b007      	add	sp, #28
 800c838:	bd90      	pop	{r4, r7, pc}
	...

0800c83c <flashRead>:

void flashRead(uint32_t p_addr, char* data, uint32_t size){
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08a      	sub	sp, #40	; 0x28
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
	 /*Debug_Send("Flash read at: ");
	 myLongStr(p_addr,temp,10,10);
	 Debug_Send(temp);
	 Debug_Send("\r\n");*/

	flashBusy();
 800c848:	f000 f836 	bl	800c8b8 <flashBusy>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800c84c:	2380      	movs	r3, #128	; 0x80
 800c84e:	0059      	lsls	r1, r3, #1
 800c850:	2390      	movs	r3, #144	; 0x90
 800c852:	05db      	lsls	r3, r3, #23
 800c854:	2200      	movs	r2, #0
 800c856:	0018      	movs	r0, r3
 800c858:	f000 ff80 	bl	800d75c <HAL_GPIO_WritePin>
	//uint32_t p_addr = 30;
	 temp[0] = M95_READ;
 800c85c:	2114      	movs	r1, #20
 800c85e:	187b      	adds	r3, r7, r1
 800c860:	2203      	movs	r2, #3
 800c862:	701a      	strb	r2, [r3, #0]
	 temp[1] = (p_addr>>16)&0xff;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	0c1b      	lsrs	r3, r3, #16
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	187b      	adds	r3, r7, r1
 800c86c:	705a      	strb	r2, [r3, #1]
	 temp[2] = (p_addr>>8)&0xff;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	0a1b      	lsrs	r3, r3, #8
 800c872:	b2da      	uxtb	r2, r3
 800c874:	187b      	adds	r3, r7, r1
 800c876:	709a      	strb	r2, [r3, #2]
	 temp[3] = p_addr&0xff;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	187b      	adds	r3, r7, r1
 800c87e:	70da      	strb	r2, [r3, #3]

	HAL_SPI_Transmit(&hspi2,temp,4,100);
 800c880:	1879      	adds	r1, r7, r1
 800c882:	480c      	ldr	r0, [pc, #48]	; (800c8b4 <flashRead+0x78>)
 800c884:	2364      	movs	r3, #100	; 0x64
 800c886:	2204      	movs	r2, #4
 800c888:	f001 fe56 	bl	800e538 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi2,data,size,100);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	b29a      	uxth	r2, r3
 800c890:	68b9      	ldr	r1, [r7, #8]
 800c892:	4808      	ldr	r0, [pc, #32]	; (800c8b4 <flashRead+0x78>)
 800c894:	2364      	movs	r3, #100	; 0x64
 800c896:	f001 ffa7 	bl	800e7e8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800c89a:	2380      	movs	r3, #128	; 0x80
 800c89c:	0059      	lsls	r1, r3, #1
 800c89e:	2390      	movs	r3, #144	; 0x90
 800c8a0:	05db      	lsls	r3, r3, #23
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	0018      	movs	r0, r3
 800c8a6:	f000 ff59 	bl	800d75c <HAL_GPIO_WritePin>
	 Debug_Send(temp);
	 Debug_Send(" , ");
	 myLongStr(size,temp,10,10);
	 Debug_Send(temp);
	 Debug_Send("\r\n");*/
}
 800c8aa:	46c0      	nop			; (mov r8, r8)
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	b00a      	add	sp, #40	; 0x28
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	46c0      	nop			; (mov r8, r8)
 800c8b4:	200019a4 	.word	0x200019a4

0800c8b8 <flashBusy>:

void flashBusy(){
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b086      	sub	sp, #24
 800c8bc:	af00      	add	r7, sp, #0
	 char temp[20];
	 temp[0] = M95_STATUS;
 800c8be:	1d3b      	adds	r3, r7, #4
 800c8c0:	2205      	movs	r2, #5
 800c8c2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800c8c4:	2380      	movs	r3, #128	; 0x80
 800c8c6:	0059      	lsls	r1, r3, #1
 800c8c8:	2390      	movs	r3, #144	; 0x90
 800c8ca:	05db      	lsls	r3, r3, #23
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	0018      	movs	r0, r3
 800c8d0:	f000 ff44 	bl	800d75c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,temp,1,100);
 800c8d4:	1d39      	adds	r1, r7, #4
 800c8d6:	4812      	ldr	r0, [pc, #72]	; (800c920 <flashBusy+0x68>)
 800c8d8:	2364      	movs	r3, #100	; 0x64
 800c8da:	2201      	movs	r2, #1
 800c8dc:	f001 fe2c 	bl	800e538 <HAL_SPI_Transmit>
	//SPI_Write(M95_STATUS);
	HAL_SPI_Receive(&hspi2,temp,1,100);
 800c8e0:	1d39      	adds	r1, r7, #4
 800c8e2:	480f      	ldr	r0, [pc, #60]	; (800c920 <flashBusy+0x68>)
 800c8e4:	2364      	movs	r3, #100	; 0x64
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f001 ff7e 	bl	800e7e8 <HAL_SPI_Receive>
	//m95_status=SPI_Write(0);
	while(temp[0]&0x01){
 800c8ec:	e005      	b.n	800c8fa <flashBusy+0x42>
		//SET_ROLL();
		//ROLL_UP();
		HAL_SPI_Receive(&hspi2,temp,1,100);
 800c8ee:	1d39      	adds	r1, r7, #4
 800c8f0:	480b      	ldr	r0, [pc, #44]	; (800c920 <flashBusy+0x68>)
 800c8f2:	2364      	movs	r3, #100	; 0x64
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f001 ff77 	bl	800e7e8 <HAL_SPI_Receive>
	while(temp[0]&0x01){
 800c8fa:	1d3b      	adds	r3, r7, #4
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	001a      	movs	r2, r3
 800c900:	2301      	movs	r3, #1
 800c902:	4013      	ands	r3, r2
 800c904:	d1f3      	bne.n	800c8ee <flashBusy+0x36>
		//DWT_Delay_us(20);
		//m95_status=SPI_Write(0);
		//if(Boot_Bit)
		//	HAL_IWDG_Refresh(&hiwdg);						// RELOAD WDT WHILE FLASH IS BUSY
	}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800c906:	2380      	movs	r3, #128	; 0x80
 800c908:	0059      	lsls	r1, r3, #1
 800c90a:	2390      	movs	r3, #144	; 0x90
 800c90c:	05db      	lsls	r3, r3, #23
 800c90e:	2201      	movs	r2, #1
 800c910:	0018      	movs	r0, r3
 800c912:	f000 ff23 	bl	800d75c <HAL_GPIO_WritePin>
}
 800c916:	46c0      	nop			; (mov r8, r8)
 800c918:	46bd      	mov	sp, r7
 800c91a:	b006      	add	sp, #24
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	46c0      	nop			; (mov r8, r8)
 800c920:	200019a4 	.word	0x200019a4

0800c924 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800c92c:	23fa      	movs	r3, #250	; 0xfa
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	0018      	movs	r0, r3
 800c932:	f004 f85d 	bl	80109f0 <osDelay>
    //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    //Debug_Send("M0 test running\r\n");
    GSM_Service();
 800c936:	f7fc fdb1 	bl	800949c <GSM_Service>
  {
 800c93a:	e7f7      	b.n	800c92c <StartDefaultTask+0x8>

0800c93c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 800c944:	200a      	movs	r0, #10
 800c946:	f004 f853 	bl	80109f0 <osDelay>
    recData();
 800c94a:	f7fd fe65 	bl	800a618 <recData>
  {
 800c94e:	e7f9      	b.n	800c944 <StartTask02+0x8>

0800c950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c954:	b672      	cpsid	i
}
 800c956:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800c958:	e7fe      	b.n	800c958 <Error_Handler+0x8>

0800c95a <myStrSection>:
//#include "GSM.h"

//volatile unsigned char msisdn[80];
const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

short myStrSection(char *p_str,char *p_result,unsigned char p_size,char p_char,char p_pos){
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b086      	sub	sp, #24
 800c95e:	af00      	add	r7, sp, #0
 800c960:	60f8      	str	r0, [r7, #12]
 800c962:	60b9      	str	r1, [r7, #8]
 800c964:	0019      	movs	r1, r3
 800c966:	1dfb      	adds	r3, r7, #7
 800c968:	701a      	strb	r2, [r3, #0]
 800c96a:	1dbb      	adds	r3, r7, #6
 800c96c:	1c0a      	adds	r2, r1, #0
 800c96e:	701a      	strb	r2, [r3, #0]
	short string_index;
	short result_index;
	char tmp_pos;

	string_index=0;
 800c970:	2316      	movs	r3, #22
 800c972:	18fb      	adds	r3, r7, r3
 800c974:	2200      	movs	r2, #0
 800c976:	801a      	strh	r2, [r3, #0]
	result_index=0;
 800c978:	2314      	movs	r3, #20
 800c97a:	18fb      	adds	r3, r7, r3
 800c97c:	2200      	movs	r2, #0
 800c97e:	801a      	strh	r2, [r3, #0]
	tmp_pos=0;
 800c980:	2313      	movs	r3, #19
 800c982:	18fb      	adds	r3, r7, r3
 800c984:	2200      	movs	r2, #0
 800c986:	701a      	strb	r2, [r3, #0]
	p_size--;
 800c988:	1dfb      	adds	r3, r7, #7
 800c98a:	781a      	ldrb	r2, [r3, #0]
 800c98c:	1dfb      	adds	r3, r7, #7
 800c98e:	3a01      	subs	r2, #1
 800c990:	701a      	strb	r2, [r3, #0]
	while(p_str[string_index]!=0){
 800c992:	e04a      	b.n	800ca2a <myStrSection+0xd0>
		if(p_str[string_index]==p_char){
 800c994:	2316      	movs	r3, #22
 800c996:	18fb      	adds	r3, r7, r3
 800c998:	2200      	movs	r2, #0
 800c99a:	5e9b      	ldrsh	r3, [r3, r2]
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	18d3      	adds	r3, r2, r3
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	1dba      	adds	r2, r7, #6
 800c9a4:	7812      	ldrb	r2, [r2, #0]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d111      	bne.n	800c9ce <myStrSection+0x74>

			if(tmp_pos==p_pos)break;
 800c9aa:	2113      	movs	r1, #19
 800c9ac:	187a      	adds	r2, r7, r1
 800c9ae:	2320      	movs	r3, #32
 800c9b0:	18fb      	adds	r3, r7, r3
 800c9b2:	7812      	ldrb	r2, [r2, #0]
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d041      	beq.n	800ca3e <myStrSection+0xe4>
			tmp_pos++;
 800c9ba:	187b      	adds	r3, r7, r1
 800c9bc:	781a      	ldrb	r2, [r3, #0]
 800c9be:	187b      	adds	r3, r7, r1
 800c9c0:	3201      	adds	r2, #1
 800c9c2:	701a      	strb	r2, [r3, #0]
			result_index=0;
 800c9c4:	2314      	movs	r3, #20
 800c9c6:	18fb      	adds	r3, r7, r3
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	801a      	strh	r2, [r3, #0]
 800c9cc:	e024      	b.n	800ca18 <myStrSection+0xbe>
		}else{
			if(p_str[string_index]>=' '){
 800c9ce:	2116      	movs	r1, #22
 800c9d0:	187b      	adds	r3, r7, r1
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	5e9b      	ldrsh	r3, [r3, r2]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	18d3      	adds	r3, r2, r3
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	2b1f      	cmp	r3, #31
 800c9de:	d91b      	bls.n	800ca18 <myStrSection+0xbe>
				p_result[result_index]=p_str[string_index];				if(result_index<p_size)result_index++;
 800c9e0:	187b      	adds	r3, r7, r1
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	5e9b      	ldrsh	r3, [r3, r2]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	18d2      	adds	r2, r2, r3
 800c9ea:	2014      	movs	r0, #20
 800c9ec:	183b      	adds	r3, r7, r0
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	5e5b      	ldrsh	r3, [r3, r1]
 800c9f2:	68b9      	ldr	r1, [r7, #8]
 800c9f4:	18cb      	adds	r3, r1, r3
 800c9f6:	7812      	ldrb	r2, [r2, #0]
 800c9f8:	701a      	strb	r2, [r3, #0]
 800c9fa:	183b      	adds	r3, r7, r0
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	5e9a      	ldrsh	r2, [r3, r2]
 800ca00:	1dfb      	adds	r3, r7, #7
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	da07      	bge.n	800ca18 <myStrSection+0xbe>
 800ca08:	183b      	adds	r3, r7, r0
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	5e9b      	ldrsh	r3, [r3, r2]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	3301      	adds	r3, #1
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	183b      	adds	r3, r7, r0
 800ca16:	801a      	strh	r2, [r3, #0]
			}
		}
		string_index++;
 800ca18:	2116      	movs	r1, #22
 800ca1a:	187b      	adds	r3, r7, r1
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	5e9b      	ldrsh	r3, [r3, r2]
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	3301      	adds	r3, #1
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	187b      	adds	r3, r7, r1
 800ca28:	801a      	strh	r2, [r3, #0]
	while(p_str[string_index]!=0){
 800ca2a:	2316      	movs	r3, #22
 800ca2c:	18fb      	adds	r3, r7, r3
 800ca2e:	2200      	movs	r2, #0
 800ca30:	5e9b      	ldrsh	r3, [r3, r2]
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	18d3      	adds	r3, r2, r3
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1ab      	bne.n	800c994 <myStrSection+0x3a>
 800ca3c:	e000      	b.n	800ca40 <myStrSection+0xe6>
			if(tmp_pos==p_pos)break;
 800ca3e:	46c0      	nop			; (mov r8, r8)
	}
	if(tmp_pos!=p_pos){
 800ca40:	2313      	movs	r3, #19
 800ca42:	18fa      	adds	r2, r7, r3
 800ca44:	2320      	movs	r3, #32
 800ca46:	18fb      	adds	r3, r7, r3
 800ca48:	7812      	ldrb	r2, [r2, #0]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d008      	beq.n	800ca62 <myStrSection+0x108>
		result_index=0;
 800ca50:	2314      	movs	r3, #20
 800ca52:	18fb      	adds	r3, r7, r3
 800ca54:	2200      	movs	r2, #0
 800ca56:	801a      	strh	r2, [r3, #0]
		string_index=-1;
 800ca58:	2316      	movs	r3, #22
 800ca5a:	18fb      	adds	r3, r7, r3
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	4252      	negs	r2, r2
 800ca60:	801a      	strh	r2, [r3, #0]
	}
	p_result[result_index]=0;
 800ca62:	2314      	movs	r3, #20
 800ca64:	18fb      	adds	r3, r7, r3
 800ca66:	2200      	movs	r2, #0
 800ca68:	5e9b      	ldrsh	r3, [r3, r2]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	18d3      	adds	r3, r2, r3
 800ca6e:	2200      	movs	r2, #0
 800ca70:	701a      	strb	r2, [r3, #0]

	return string_index;
 800ca72:	2316      	movs	r3, #22
 800ca74:	18fb      	adds	r3, r7, r3
 800ca76:	2200      	movs	r2, #0
 800ca78:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ca7a:	0018      	movs	r0, r3
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	b006      	add	sp, #24
 800ca80:	bd80      	pop	{r7, pc}
	...

0800ca84 <myLongStr>:


char* myLongStr(signed long p_val,char *p_dest,short p_size,char p_base){
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b086      	sub	sp, #24
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	0019      	movs	r1, r3
 800ca90:	1dbb      	adds	r3, r7, #6
 800ca92:	801a      	strh	r2, [r3, #0]
 800ca94:	1d7b      	adds	r3, r7, #5
 800ca96:	1c0a      	adds	r2, r1, #0
 800ca98:	701a      	strb	r2, [r3, #0]
	unsigned long tmp_index;
	short tmp_size;
	char tmp_val;
	char tmp_iszero;

	tmp_size=0;
 800ca9a:	2112      	movs	r1, #18
 800ca9c:	187b      	adds	r3, r7, r1
 800ca9e:	2200      	movs	r2, #0
 800caa0:	801a      	strh	r2, [r3, #0]
	tmp_iszero=1;
 800caa2:	2311      	movs	r3, #17
 800caa4:	18fb      	adds	r3, r7, r3
 800caa6:	2201      	movs	r2, #1
 800caa8:	701a      	strb	r2, [r3, #0]

	if(p_base==10){
 800caaa:	1d7b      	adds	r3, r7, #5
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b0a      	cmp	r3, #10
 800cab0:	d15f      	bne.n	800cb72 <myLongStr+0xee>
		tmp_index=1000000000;
 800cab2:	4b6f      	ldr	r3, [pc, #444]	; (800cc70 <myLongStr+0x1ec>)
 800cab4:	617b      	str	r3, [r7, #20]

		if(p_val<0){
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	da56      	bge.n	800cb6a <myLongStr+0xe6>
			p_val*=-1;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	425b      	negs	r3, r3
 800cac0:	60fb      	str	r3, [r7, #12]
			p_dest[tmp_size]='-';
 800cac2:	187b      	adds	r3, r7, r1
 800cac4:	2200      	movs	r2, #0
 800cac6:	5e9b      	ldrsh	r3, [r3, r2]
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	18d3      	adds	r3, r2, r3
 800cacc:	222d      	movs	r2, #45	; 0x2d
 800cace:	701a      	strb	r2, [r3, #0]
			tmp_size++;
 800cad0:	187b      	adds	r3, r7, r1
 800cad2:	2200      	movs	r2, #0
 800cad4:	5e9b      	ldrsh	r3, [r3, r2]
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	3301      	adds	r3, #1
 800cada:	b29a      	uxth	r2, r3
 800cadc:	187b      	adds	r3, r7, r1
 800cade:	801a      	strh	r2, [r3, #0]
		}

		while(tmp_index>0){
 800cae0:	e043      	b.n	800cb6a <myLongStr+0xe6>
			tmp_val=p_val/tmp_index;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6979      	ldr	r1, [r7, #20]
 800cae6:	0018      	movs	r0, r3
 800cae8:	f7fc fb2a 	bl	8009140 <__udivsi3>
 800caec:	0003      	movs	r3, r0
 800caee:	001a      	movs	r2, r3
 800caf0:	2110      	movs	r1, #16
 800caf2:	187b      	adds	r3, r7, r1
 800caf4:	701a      	strb	r2, [r3, #0]
			if(tmp_val>0)tmp_iszero=0;
 800caf6:	187b      	adds	r3, r7, r1
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d003      	beq.n	800cb06 <myLongStr+0x82>
 800cafe:	2311      	movs	r3, #17
 800cb00:	18fb      	adds	r3, r7, r3
 800cb02:	2200      	movs	r2, #0
 800cb04:	701a      	strb	r2, [r3, #0]
			if(tmp_iszero==0){
 800cb06:	2311      	movs	r3, #17
 800cb08:	18fb      	adds	r3, r7, r3
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d113      	bne.n	800cb38 <myLongStr+0xb4>
				p_dest[tmp_size]=tmp_val+0x30;
 800cb10:	2112      	movs	r1, #18
 800cb12:	187b      	adds	r3, r7, r1
 800cb14:	2200      	movs	r2, #0
 800cb16:	5e9b      	ldrsh	r3, [r3, r2]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	18d3      	adds	r3, r2, r3
 800cb1c:	2210      	movs	r2, #16
 800cb1e:	18ba      	adds	r2, r7, r2
 800cb20:	7812      	ldrb	r2, [r2, #0]
 800cb22:	3230      	adds	r2, #48	; 0x30
 800cb24:	b2d2      	uxtb	r2, r2
 800cb26:	701a      	strb	r2, [r3, #0]
				tmp_size++;
 800cb28:	187b      	adds	r3, r7, r1
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	5e9b      	ldrsh	r3, [r3, r2]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	3301      	adds	r3, #1
 800cb32:	b29a      	uxth	r2, r3
 800cb34:	187b      	adds	r3, r7, r1
 800cb36:	801a      	strh	r2, [r3, #0]
			}
			p_val=p_val-(tmp_val*tmp_index);
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	2310      	movs	r3, #16
 800cb3c:	18fb      	adds	r3, r7, r3
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	6979      	ldr	r1, [r7, #20]
 800cb42:	434b      	muls	r3, r1
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	60fb      	str	r3, [r7, #12]
			tmp_index/=10;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	210a      	movs	r1, #10
 800cb4c:	0018      	movs	r0, r3
 800cb4e:	f7fc faf7 	bl	8009140 <__udivsi3>
 800cb52:	0003      	movs	r3, r0
 800cb54:	617b      	str	r3, [r7, #20]
			if(tmp_size>=(p_size-1))break;
 800cb56:	2312      	movs	r3, #18
 800cb58:	18fb      	adds	r3, r7, r3
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	5e9a      	ldrsh	r2, [r3, r2]
 800cb5e:	1dbb      	adds	r3, r7, #6
 800cb60:	2100      	movs	r1, #0
 800cb62:	5e5b      	ldrsh	r3, [r3, r1]
 800cb64:	3b01      	subs	r3, #1
 800cb66:	429a      	cmp	r2, r3
 800cb68:	da5d      	bge.n	800cc26 <myLongStr+0x1a2>
		while(tmp_index>0){
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1b8      	bne.n	800cae2 <myLongStr+0x5e>
 800cb70:	e05c      	b.n	800cc2c <myLongStr+0x1a8>
		}

	}
	else if(p_base==16){
 800cb72:	1d7b      	adds	r3, r7, #5
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	2b10      	cmp	r3, #16
 800cb78:	d158      	bne.n	800cc2c <myLongStr+0x1a8>
		tmp_index=32;
 800cb7a:	2320      	movs	r3, #32
 800cb7c:	617b      	str	r3, [r7, #20]
		while(tmp_index>0){
 800cb7e:	e04e      	b.n	800cc1e <myLongStr+0x19a>
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	3b04      	subs	r3, #4
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	411a      	asrs	r2, r3
 800cb88:	0013      	movs	r3, r2
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	2010      	movs	r0, #16
 800cb8e:	183b      	adds	r3, r7, r0
 800cb90:	210f      	movs	r1, #15
 800cb92:	400a      	ands	r2, r1
 800cb94:	701a      	strb	r2, [r3, #0]

			if(tmp_val>0)tmp_iszero=0;
 800cb96:	183b      	adds	r3, r7, r0
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d003      	beq.n	800cba6 <myLongStr+0x122>
 800cb9e:	2311      	movs	r3, #17
 800cba0:	18fb      	adds	r3, r7, r3
 800cba2:	2200      	movs	r2, #0
 800cba4:	701a      	strb	r2, [r3, #0]
			if(tmp_iszero==0){
 800cba6:	2311      	movs	r3, #17
 800cba8:	18fb      	adds	r3, r7, r3
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d129      	bne.n	800cc04 <myLongStr+0x180>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 800cbb0:	2110      	movs	r1, #16
 800cbb2:	187b      	adds	r3, r7, r1
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	2b09      	cmp	r3, #9
 800cbb8:	d80b      	bhi.n	800cbd2 <myLongStr+0x14e>
 800cbba:	2312      	movs	r3, #18
 800cbbc:	18fb      	adds	r3, r7, r3
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	5e9b      	ldrsh	r3, [r3, r2]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	18d3      	adds	r3, r2, r3
 800cbc6:	187a      	adds	r2, r7, r1
 800cbc8:	7812      	ldrb	r2, [r2, #0]
 800cbca:	3230      	adds	r2, #48	; 0x30
 800cbcc:	b2d2      	uxtb	r2, r2
 800cbce:	701a      	strb	r2, [r3, #0]
 800cbd0:	e00f      	b.n	800cbf2 <myLongStr+0x16e>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 800cbd2:	2110      	movs	r1, #16
 800cbd4:	187b      	adds	r3, r7, r1
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b09      	cmp	r3, #9
 800cbda:	d90a      	bls.n	800cbf2 <myLongStr+0x16e>
 800cbdc:	2312      	movs	r3, #18
 800cbde:	18fb      	adds	r3, r7, r3
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	5e9b      	ldrsh	r3, [r3, r2]
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	18d3      	adds	r3, r2, r3
 800cbe8:	187a      	adds	r2, r7, r1
 800cbea:	7812      	ldrb	r2, [r2, #0]
 800cbec:	3237      	adds	r2, #55	; 0x37
 800cbee:	b2d2      	uxtb	r2, r2
 800cbf0:	701a      	strb	r2, [r3, #0]
				tmp_size++;
 800cbf2:	2112      	movs	r1, #18
 800cbf4:	187b      	adds	r3, r7, r1
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	5e9b      	ldrsh	r3, [r3, r2]
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	187b      	adds	r3, r7, r1
 800cc02:	801a      	strh	r2, [r3, #0]
			}

			tmp_index-=4;
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	3b04      	subs	r3, #4
 800cc08:	617b      	str	r3, [r7, #20]
			if(tmp_size>=(p_size-1))break;
 800cc0a:	2312      	movs	r3, #18
 800cc0c:	18fb      	adds	r3, r7, r3
 800cc0e:	2200      	movs	r2, #0
 800cc10:	5e9a      	ldrsh	r2, [r3, r2]
 800cc12:	1dbb      	adds	r3, r7, #6
 800cc14:	2100      	movs	r1, #0
 800cc16:	5e5b      	ldrsh	r3, [r3, r1]
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	da05      	bge.n	800cc2a <myLongStr+0x1a6>
		while(tmp_index>0){
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d1ad      	bne.n	800cb80 <myLongStr+0xfc>
 800cc24:	e002      	b.n	800cc2c <myLongStr+0x1a8>
			if(tmp_size>=(p_size-1))break;
 800cc26:	46c0      	nop			; (mov r8, r8)
 800cc28:	e000      	b.n	800cc2c <myLongStr+0x1a8>
			if(tmp_size>=(p_size-1))break;
 800cc2a:	46c0      	nop			; (mov r8, r8)
		}

	}

	if(tmp_iszero==1){
 800cc2c:	2311      	movs	r3, #17
 800cc2e:	18fb      	adds	r3, r7, r3
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d10f      	bne.n	800cc56 <myLongStr+0x1d2>
		p_dest[tmp_size]='0';
 800cc36:	2112      	movs	r1, #18
 800cc38:	187b      	adds	r3, r7, r1
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	5e9b      	ldrsh	r3, [r3, r2]
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	18d3      	adds	r3, r2, r3
 800cc42:	2230      	movs	r2, #48	; 0x30
 800cc44:	701a      	strb	r2, [r3, #0]
		tmp_size++;
 800cc46:	187b      	adds	r3, r7, r1
 800cc48:	2200      	movs	r2, #0
 800cc4a:	5e9b      	ldrsh	r3, [r3, r2]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	3301      	adds	r3, #1
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	187b      	adds	r3, r7, r1
 800cc54:	801a      	strh	r2, [r3, #0]
	}

	p_dest[tmp_size]=0;
 800cc56:	2312      	movs	r3, #18
 800cc58:	18fb      	adds	r3, r7, r3
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	5e9b      	ldrsh	r3, [r3, r2]
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	18d3      	adds	r3, r2, r3
 800cc62:	2200      	movs	r2, #0
 800cc64:	701a      	strb	r2, [r3, #0]
	return p_dest;
 800cc66:	68bb      	ldr	r3, [r7, #8]
}
 800cc68:	0018      	movs	r0, r3
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	b006      	add	sp, #24
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	3b9aca00 	.word	0x3b9aca00

0800cc74 <myStrLong>:

long myStrLong(char *p_str,char p_base){
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	000a      	movs	r2, r1
 800cc7e:	1cfb      	adds	r3, r7, #3
 800cc80:	701a      	strb	r2, [r3, #0]
	long tmp_long;
	tmp_long=0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	60fb      	str	r3, [r7, #12]
	if(p_base==10){
 800cc86:	1cfb      	adds	r3, r7, #3
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	2b0a      	cmp	r3, #10
 800cc8c:	d120      	bne.n	800ccd0 <myStrLong+0x5c>
		while(*p_str != 0){
 800cc8e:	e01a      	b.n	800ccc6 <myStrLong+0x52>
			if((*p_str>='0')&&(*p_str<='9')){
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	2b2f      	cmp	r3, #47	; 0x2f
 800cc96:	d90f      	bls.n	800ccb8 <myStrLong+0x44>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	2b39      	cmp	r3, #57	; 0x39
 800cc9e:	d80b      	bhi.n	800ccb8 <myStrLong+0x44>
				tmp_long*=10;
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	0013      	movs	r3, r2
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	189b      	adds	r3, r3, r2
 800cca8:	005b      	lsls	r3, r3, #1
 800ccaa:	60fb      	str	r3, [r7, #12]
				tmp_long+=*p_str-0x30;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	3b30      	subs	r3, #48	; 0x30
 800ccb2:	68fa      	ldr	r2, [r7, #12]
 800ccb4:	18d3      	adds	r3, r2, r3
 800ccb6:	60fb      	str	r3, [r7, #12]
			}
			if(*p_str>='.')
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b2d      	cmp	r3, #45	; 0x2d
 800ccbe:	d902      	bls.n	800ccc6 <myStrLong+0x52>
			p_str++;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	607b      	str	r3, [r7, #4]
		while(*p_str != 0){
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1e0      	bne.n	800cc90 <myStrLong+0x1c>
 800ccce:	e03e      	b.n	800cd4e <myStrLong+0xda>
		}
	}
	else if(p_base==16){
 800ccd0:	1cfb      	adds	r3, r7, #3
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	2b10      	cmp	r3, #16
 800ccd6:	d13a      	bne.n	800cd4e <myStrLong+0xda>
		while(*p_str != 0){
 800ccd8:	e035      	b.n	800cd46 <myStrLong+0xd2>
			if(*p_str>='0'){
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	2b2f      	cmp	r3, #47	; 0x2f
 800cce0:	d92e      	bls.n	800cd40 <myStrLong+0xcc>
				tmp_long=tmp_long<<4;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	011b      	lsls	r3, r3, #4
 800cce6:	60fb      	str	r3, [r7, #12]
				if((*p_str>='0')&&(*p_str<='9'))tmp_long|=*p_str-'0';
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	2b2f      	cmp	r3, #47	; 0x2f
 800ccee:	d90a      	bls.n	800cd06 <myStrLong+0x92>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b39      	cmp	r3, #57	; 0x39
 800ccf6:	d806      	bhi.n	800cd06 <myStrLong+0x92>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	3b30      	subs	r3, #48	; 0x30
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	4313      	orrs	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	e01c      	b.n	800cd40 <myStrLong+0xcc>
				else if((*p_str>='a')&&(*p_str<='f'))tmp_long|=(*p_str-'a')+10;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	2b60      	cmp	r3, #96	; 0x60
 800cd0c:	d90a      	bls.n	800cd24 <myStrLong+0xb0>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	2b66      	cmp	r3, #102	; 0x66
 800cd14:	d806      	bhi.n	800cd24 <myStrLong+0xb0>
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	3b57      	subs	r3, #87	; 0x57
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	60fb      	str	r3, [r7, #12]
 800cd22:	e00d      	b.n	800cd40 <myStrLong+0xcc>
				else if((*p_str>='A')&&(*p_str<='F'))tmp_long|=(*p_str-'A')+10;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	2b40      	cmp	r3, #64	; 0x40
 800cd2a:	d909      	bls.n	800cd40 <myStrLong+0xcc>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	2b46      	cmp	r3, #70	; 0x46
 800cd32:	d805      	bhi.n	800cd40 <myStrLong+0xcc>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	3b37      	subs	r3, #55	; 0x37
 800cd3a:	68fa      	ldr	r2, [r7, #12]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	60fb      	str	r3, [r7, #12]
			}
			p_str++;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	3301      	adds	r3, #1
 800cd44:	607b      	str	r3, [r7, #4]
		while(*p_str != 0){
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1c5      	bne.n	800ccda <myStrLong+0x66>
		}
	}
	return tmp_long;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
}
 800cd50:	0018      	movs	r0, r3
 800cd52:	46bd      	mov	sp, r7
 800cd54:	b004      	add	sp, #16
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cd5e:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <HAL_MspInit+0x50>)
 800cd60:	699a      	ldr	r2, [r3, #24]
 800cd62:	4b11      	ldr	r3, [pc, #68]	; (800cda8 <HAL_MspInit+0x50>)
 800cd64:	2101      	movs	r1, #1
 800cd66:	430a      	orrs	r2, r1
 800cd68:	619a      	str	r2, [r3, #24]
 800cd6a:	4b0f      	ldr	r3, [pc, #60]	; (800cda8 <HAL_MspInit+0x50>)
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	4013      	ands	r3, r2
 800cd72:	607b      	str	r3, [r7, #4]
 800cd74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cd76:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <HAL_MspInit+0x50>)
 800cd78:	69da      	ldr	r2, [r3, #28]
 800cd7a:	4b0b      	ldr	r3, [pc, #44]	; (800cda8 <HAL_MspInit+0x50>)
 800cd7c:	2180      	movs	r1, #128	; 0x80
 800cd7e:	0549      	lsls	r1, r1, #21
 800cd80:	430a      	orrs	r2, r1
 800cd82:	61da      	str	r2, [r3, #28]
 800cd84:	4b08      	ldr	r3, [pc, #32]	; (800cda8 <HAL_MspInit+0x50>)
 800cd86:	69da      	ldr	r2, [r3, #28]
 800cd88:	2380      	movs	r3, #128	; 0x80
 800cd8a:	055b      	lsls	r3, r3, #21
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	603b      	str	r3, [r7, #0]
 800cd90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800cd92:	2302      	movs	r3, #2
 800cd94:	425b      	negs	r3, r3
 800cd96:	2200      	movs	r2, #0
 800cd98:	2103      	movs	r1, #3
 800cd9a:	0018      	movs	r0, r3
 800cd9c:	f000 fab6 	bl	800d30c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cda0:	46c0      	nop			; (mov r8, r8)
 800cda2:	46bd      	mov	sp, r7
 800cda4:	b002      	add	sp, #8
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	40021000 	.word	0x40021000

0800cdac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cdac:	b590      	push	{r4, r7, lr}
 800cdae:	b08b      	sub	sp, #44	; 0x2c
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdb4:	2414      	movs	r4, #20
 800cdb6:	193b      	adds	r3, r7, r4
 800cdb8:	0018      	movs	r0, r3
 800cdba:	2314      	movs	r3, #20
 800cdbc:	001a      	movs	r2, r3
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	f004 fea5 	bl	8011b0e <memset>
  if(hspi->Instance==SPI2)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a1c      	ldr	r2, [pc, #112]	; (800ce3c <HAL_SPI_MspInit+0x90>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d132      	bne.n	800ce34 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800cdce:	4b1c      	ldr	r3, [pc, #112]	; (800ce40 <HAL_SPI_MspInit+0x94>)
 800cdd0:	69da      	ldr	r2, [r3, #28]
 800cdd2:	4b1b      	ldr	r3, [pc, #108]	; (800ce40 <HAL_SPI_MspInit+0x94>)
 800cdd4:	2180      	movs	r1, #128	; 0x80
 800cdd6:	01c9      	lsls	r1, r1, #7
 800cdd8:	430a      	orrs	r2, r1
 800cdda:	61da      	str	r2, [r3, #28]
 800cddc:	4b18      	ldr	r3, [pc, #96]	; (800ce40 <HAL_SPI_MspInit+0x94>)
 800cdde:	69da      	ldr	r2, [r3, #28]
 800cde0:	2380      	movs	r3, #128	; 0x80
 800cde2:	01db      	lsls	r3, r3, #7
 800cde4:	4013      	ands	r3, r2
 800cde6:	613b      	str	r3, [r7, #16]
 800cde8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cdea:	4b15      	ldr	r3, [pc, #84]	; (800ce40 <HAL_SPI_MspInit+0x94>)
 800cdec:	695a      	ldr	r2, [r3, #20]
 800cdee:	4b14      	ldr	r3, [pc, #80]	; (800ce40 <HAL_SPI_MspInit+0x94>)
 800cdf0:	2180      	movs	r1, #128	; 0x80
 800cdf2:	02c9      	lsls	r1, r1, #11
 800cdf4:	430a      	orrs	r2, r1
 800cdf6:	615a      	str	r2, [r3, #20]
 800cdf8:	4b11      	ldr	r3, [pc, #68]	; (800ce40 <HAL_SPI_MspInit+0x94>)
 800cdfa:	695a      	ldr	r2, [r3, #20]
 800cdfc:	2380      	movs	r3, #128	; 0x80
 800cdfe:	02db      	lsls	r3, r3, #11
 800ce00:	4013      	ands	r3, r2
 800ce02:	60fb      	str	r3, [r7, #12]
 800ce04:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800ce06:	193b      	adds	r3, r7, r4
 800ce08:	22e0      	movs	r2, #224	; 0xe0
 800ce0a:	0212      	lsls	r2, r2, #8
 800ce0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce0e:	0021      	movs	r1, r4
 800ce10:	187b      	adds	r3, r7, r1
 800ce12:	2202      	movs	r2, #2
 800ce14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce16:	187b      	adds	r3, r7, r1
 800ce18:	2200      	movs	r2, #0
 800ce1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ce1c:	187b      	adds	r3, r7, r1
 800ce1e:	2203      	movs	r2, #3
 800ce20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800ce22:	187b      	adds	r3, r7, r1
 800ce24:	2200      	movs	r2, #0
 800ce26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce28:	187b      	adds	r3, r7, r1
 800ce2a:	4a06      	ldr	r2, [pc, #24]	; (800ce44 <HAL_SPI_MspInit+0x98>)
 800ce2c:	0019      	movs	r1, r3
 800ce2e:	0010      	movs	r0, r2
 800ce30:	f000 fb1c 	bl	800d46c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800ce34:	46c0      	nop			; (mov r8, r8)
 800ce36:	46bd      	mov	sp, r7
 800ce38:	b00b      	add	sp, #44	; 0x2c
 800ce3a:	bd90      	pop	{r4, r7, pc}
 800ce3c:	40003800 	.word	0x40003800
 800ce40:	40021000 	.word	0x40021000
 800ce44:	48000400 	.word	0x48000400

0800ce48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ce48:	b590      	push	{r4, r7, lr}
 800ce4a:	b08d      	sub	sp, #52	; 0x34
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce50:	241c      	movs	r4, #28
 800ce52:	193b      	adds	r3, r7, r4
 800ce54:	0018      	movs	r0, r3
 800ce56:	2314      	movs	r3, #20
 800ce58:	001a      	movs	r2, r3
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	f004 fe57 	bl	8011b0e <memset>
  if(huart->Instance==USART1)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a49      	ldr	r2, [pc, #292]	; (800cf8c <HAL_UART_MspInit+0x144>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d134      	bne.n	800ced4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ce6a:	4b49      	ldr	r3, [pc, #292]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800ce6c:	699a      	ldr	r2, [r3, #24]
 800ce6e:	4b48      	ldr	r3, [pc, #288]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800ce70:	2180      	movs	r1, #128	; 0x80
 800ce72:	01c9      	lsls	r1, r1, #7
 800ce74:	430a      	orrs	r2, r1
 800ce76:	619a      	str	r2, [r3, #24]
 800ce78:	4b45      	ldr	r3, [pc, #276]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800ce7a:	699a      	ldr	r2, [r3, #24]
 800ce7c:	2380      	movs	r3, #128	; 0x80
 800ce7e:	01db      	lsls	r3, r3, #7
 800ce80:	4013      	ands	r3, r2
 800ce82:	61bb      	str	r3, [r7, #24]
 800ce84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce86:	4b42      	ldr	r3, [pc, #264]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800ce88:	695a      	ldr	r2, [r3, #20]
 800ce8a:	4b41      	ldr	r3, [pc, #260]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800ce8c:	2180      	movs	r1, #128	; 0x80
 800ce8e:	0289      	lsls	r1, r1, #10
 800ce90:	430a      	orrs	r2, r1
 800ce92:	615a      	str	r2, [r3, #20]
 800ce94:	4b3e      	ldr	r3, [pc, #248]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800ce96:	695a      	ldr	r2, [r3, #20]
 800ce98:	2380      	movs	r3, #128	; 0x80
 800ce9a:	029b      	lsls	r3, r3, #10
 800ce9c:	4013      	ands	r3, r2
 800ce9e:	617b      	str	r3, [r7, #20]
 800cea0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cea2:	193b      	adds	r3, r7, r4
 800cea4:	22c0      	movs	r2, #192	; 0xc0
 800cea6:	00d2      	lsls	r2, r2, #3
 800cea8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceaa:	0021      	movs	r1, r4
 800ceac:	187b      	adds	r3, r7, r1
 800ceae:	2202      	movs	r2, #2
 800ceb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ceb2:	187b      	adds	r3, r7, r1
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ceb8:	187b      	adds	r3, r7, r1
 800ceba:	2203      	movs	r2, #3
 800cebc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800cebe:	187b      	adds	r3, r7, r1
 800cec0:	2201      	movs	r2, #1
 800cec2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cec4:	187a      	adds	r2, r7, r1
 800cec6:	2390      	movs	r3, #144	; 0x90
 800cec8:	05db      	lsls	r3, r3, #23
 800ceca:	0011      	movs	r1, r2
 800cecc:	0018      	movs	r0, r3
 800cece:	f000 facd 	bl	800d46c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800ced2:	e056      	b.n	800cf82 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a2e      	ldr	r2, [pc, #184]	; (800cf94 <HAL_UART_MspInit+0x14c>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d151      	bne.n	800cf82 <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800cede:	4b2c      	ldr	r3, [pc, #176]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800cee0:	69da      	ldr	r2, [r3, #28]
 800cee2:	4b2b      	ldr	r3, [pc, #172]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800cee4:	2180      	movs	r1, #128	; 0x80
 800cee6:	0289      	lsls	r1, r1, #10
 800cee8:	430a      	orrs	r2, r1
 800ceea:	61da      	str	r2, [r3, #28]
 800ceec:	4b28      	ldr	r3, [pc, #160]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800ceee:	69da      	ldr	r2, [r3, #28]
 800cef0:	2380      	movs	r3, #128	; 0x80
 800cef2:	029b      	lsls	r3, r3, #10
 800cef4:	4013      	ands	r3, r2
 800cef6:	613b      	str	r3, [r7, #16]
 800cef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cefa:	4b25      	ldr	r3, [pc, #148]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800cefc:	695a      	ldr	r2, [r3, #20]
 800cefe:	4b24      	ldr	r3, [pc, #144]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800cf00:	2180      	movs	r1, #128	; 0x80
 800cf02:	0289      	lsls	r1, r1, #10
 800cf04:	430a      	orrs	r2, r1
 800cf06:	615a      	str	r2, [r3, #20]
 800cf08:	4b21      	ldr	r3, [pc, #132]	; (800cf90 <HAL_UART_MspInit+0x148>)
 800cf0a:	695a      	ldr	r2, [r3, #20]
 800cf0c:	2380      	movs	r3, #128	; 0x80
 800cf0e:	029b      	lsls	r3, r3, #10
 800cf10:	4013      	ands	r3, r2
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cf16:	241c      	movs	r4, #28
 800cf18:	193b      	adds	r3, r7, r4
 800cf1a:	2204      	movs	r2, #4
 800cf1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf1e:	193b      	adds	r3, r7, r4
 800cf20:	2202      	movs	r2, #2
 800cf22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf24:	193b      	adds	r3, r7, r4
 800cf26:	2200      	movs	r2, #0
 800cf28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800cf2a:	193b      	adds	r3, r7, r4
 800cf2c:	2203      	movs	r2, #3
 800cf2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800cf30:	193b      	adds	r3, r7, r4
 800cf32:	2201      	movs	r2, #1
 800cf34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf36:	193a      	adds	r2, r7, r4
 800cf38:	2390      	movs	r3, #144	; 0x90
 800cf3a:	05db      	lsls	r3, r3, #23
 800cf3c:	0011      	movs	r1, r2
 800cf3e:	0018      	movs	r0, r3
 800cf40:	f000 fa94 	bl	800d46c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cf44:	0021      	movs	r1, r4
 800cf46:	187b      	adds	r3, r7, r1
 800cf48:	2208      	movs	r2, #8
 800cf4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf4c:	187b      	adds	r3, r7, r1
 800cf4e:	2202      	movs	r2, #2
 800cf50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf52:	187b      	adds	r3, r7, r1
 800cf54:	2201      	movs	r2, #1
 800cf56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800cf58:	187b      	adds	r3, r7, r1
 800cf5a:	2203      	movs	r2, #3
 800cf5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800cf5e:	187b      	adds	r3, r7, r1
 800cf60:	2201      	movs	r2, #1
 800cf62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf64:	187a      	adds	r2, r7, r1
 800cf66:	2390      	movs	r3, #144	; 0x90
 800cf68:	05db      	lsls	r3, r3, #23
 800cf6a:	0011      	movs	r1, r2
 800cf6c:	0018      	movs	r0, r3
 800cf6e:	f000 fa7d 	bl	800d46c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800cf72:	2200      	movs	r2, #0
 800cf74:	2103      	movs	r1, #3
 800cf76:	201c      	movs	r0, #28
 800cf78:	f000 f9c8 	bl	800d30c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cf7c:	201c      	movs	r0, #28
 800cf7e:	f000 f9da 	bl	800d336 <HAL_NVIC_EnableIRQ>
}
 800cf82:	46c0      	nop			; (mov r8, r8)
 800cf84:	46bd      	mov	sp, r7
 800cf86:	b00d      	add	sp, #52	; 0x34
 800cf88:	bd90      	pop	{r4, r7, pc}
 800cf8a:	46c0      	nop			; (mov r8, r8)
 800cf8c:	40013800 	.word	0x40013800
 800cf90:	40021000 	.word	0x40021000
 800cf94:	40004400 	.word	0x40004400

0800cf98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800cf9c:	e7fe      	b.n	800cf9c <NMI_Handler+0x4>

0800cf9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cfa2:	e7fe      	b.n	800cfa2 <HardFault_Handler+0x4>

0800cfa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cfa8:	f000 f8c4 	bl	800d134 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800cfac:	f004 fa2a 	bl	8011404 <xTaskGetSchedulerState>
 800cfb0:	0003      	movs	r3, r0
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d001      	beq.n	800cfba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800cfb6:	f004 fb8f 	bl	80116d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cfba:	46c0      	nop			; (mov r8, r8)
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800cfc4:	4b03      	ldr	r3, [pc, #12]	; (800cfd4 <USART2_IRQHandler+0x14>)
 800cfc6:	0018      	movs	r0, r3
 800cfc8:	f002 fae0 	bl	800f58c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800cfcc:	46c0      	nop			; (mov r8, r8)
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	46c0      	nop			; (mov r8, r8)
 800cfd4:	20001a90 	.word	0x20001a90

0800cfd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b086      	sub	sp, #24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cfe0:	4a14      	ldr	r2, [pc, #80]	; (800d034 <_sbrk+0x5c>)
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <_sbrk+0x60>)
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cfec:	4b13      	ldr	r3, [pc, #76]	; (800d03c <_sbrk+0x64>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d102      	bne.n	800cffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cff4:	4b11      	ldr	r3, [pc, #68]	; (800d03c <_sbrk+0x64>)
 800cff6:	4a12      	ldr	r2, [pc, #72]	; (800d040 <_sbrk+0x68>)
 800cff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cffa:	4b10      	ldr	r3, [pc, #64]	; (800d03c <_sbrk+0x64>)
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	18d3      	adds	r3, r2, r3
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	429a      	cmp	r2, r3
 800d006:	d207      	bcs.n	800d018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d008:	f004 fd4e 	bl	8011aa8 <__errno>
 800d00c:	0003      	movs	r3, r0
 800d00e:	220c      	movs	r2, #12
 800d010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d012:	2301      	movs	r3, #1
 800d014:	425b      	negs	r3, r3
 800d016:	e009      	b.n	800d02c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d018:	4b08      	ldr	r3, [pc, #32]	; (800d03c <_sbrk+0x64>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d01e:	4b07      	ldr	r3, [pc, #28]	; (800d03c <_sbrk+0x64>)
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	18d2      	adds	r2, r2, r3
 800d026:	4b05      	ldr	r3, [pc, #20]	; (800d03c <_sbrk+0x64>)
 800d028:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d02a:	68fb      	ldr	r3, [r7, #12]
}
 800d02c:	0018      	movs	r0, r3
 800d02e:	46bd      	mov	sp, r7
 800d030:	b006      	add	sp, #24
 800d032:	bd80      	pop	{r7, pc}
 800d034:	20004000 	.word	0x20004000
 800d038:	00000400 	.word	0x00000400
 800d03c:	200003dc 	.word	0x200003dc
 800d040:	20001b28 	.word	0x20001b28

0800d044 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800d048:	46c0      	nop			; (mov r8, r8)
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
	...

0800d050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d050:	480d      	ldr	r0, [pc, #52]	; (800d088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800d052:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d054:	480d      	ldr	r0, [pc, #52]	; (800d08c <LoopForever+0x6>)
  ldr r1, =_edata
 800d056:	490e      	ldr	r1, [pc, #56]	; (800d090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800d058:	4a0e      	ldr	r2, [pc, #56]	; (800d094 <LoopForever+0xe>)
  movs r3, #0
 800d05a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d05c:	e002      	b.n	800d064 <LoopCopyDataInit>

0800d05e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d05e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d062:	3304      	adds	r3, #4

0800d064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d068:	d3f9      	bcc.n	800d05e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d06a:	4a0b      	ldr	r2, [pc, #44]	; (800d098 <LoopForever+0x12>)
  ldr r4, =_ebss
 800d06c:	4c0b      	ldr	r4, [pc, #44]	; (800d09c <LoopForever+0x16>)
  movs r3, #0
 800d06e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d070:	e001      	b.n	800d076 <LoopFillZerobss>

0800d072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d074:	3204      	adds	r2, #4

0800d076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d078:	d3fb      	bcc.n	800d072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d07a:	f7ff ffe3 	bl	800d044 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d07e:	f004 fd19 	bl	8011ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d082:	f7ff f8dd 	bl	800c240 <main>

0800d086 <LoopForever>:

LoopForever:
    b LoopForever
 800d086:	e7fe      	b.n	800d086 <LoopForever>
  ldr   r0, =_estack
 800d088:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800d08c:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 800d090:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 800d094:	08013418 	.word	0x08013418
  ldr r2, =_sbss
 800d098:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 800d09c:	20001b28 	.word	0x20001b28

0800d0a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d0a0:	e7fe      	b.n	800d0a0 <ADC1_COMP_IRQHandler>
	...

0800d0a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d0a8:	4b07      	ldr	r3, [pc, #28]	; (800d0c8 <HAL_Init+0x24>)
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	4b06      	ldr	r3, [pc, #24]	; (800d0c8 <HAL_Init+0x24>)
 800d0ae:	2110      	movs	r1, #16
 800d0b0:	430a      	orrs	r2, r1
 800d0b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800d0b4:	2003      	movs	r0, #3
 800d0b6:	f000 f809 	bl	800d0cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d0ba:	f7ff fe4d 	bl	800cd58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	0018      	movs	r0, r3
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	46c0      	nop			; (mov r8, r8)
 800d0c8:	40022000 	.word	0x40022000

0800d0cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d0cc:	b590      	push	{r4, r7, lr}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d0d4:	4b14      	ldr	r3, [pc, #80]	; (800d128 <HAL_InitTick+0x5c>)
 800d0d6:	681c      	ldr	r4, [r3, #0]
 800d0d8:	4b14      	ldr	r3, [pc, #80]	; (800d12c <HAL_InitTick+0x60>)
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	0019      	movs	r1, r3
 800d0de:	23fa      	movs	r3, #250	; 0xfa
 800d0e0:	0098      	lsls	r0, r3, #2
 800d0e2:	f7fc f82d 	bl	8009140 <__udivsi3>
 800d0e6:	0003      	movs	r3, r0
 800d0e8:	0019      	movs	r1, r3
 800d0ea:	0020      	movs	r0, r4
 800d0ec:	f7fc f828 	bl	8009140 <__udivsi3>
 800d0f0:	0003      	movs	r3, r0
 800d0f2:	0018      	movs	r0, r3
 800d0f4:	f000 f92f 	bl	800d356 <HAL_SYSTICK_Config>
 800d0f8:	1e03      	subs	r3, r0, #0
 800d0fa:	d001      	beq.n	800d100 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e00f      	b.n	800d120 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b03      	cmp	r3, #3
 800d104:	d80b      	bhi.n	800d11e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d106:	6879      	ldr	r1, [r7, #4]
 800d108:	2301      	movs	r3, #1
 800d10a:	425b      	negs	r3, r3
 800d10c:	2200      	movs	r2, #0
 800d10e:	0018      	movs	r0, r3
 800d110:	f000 f8fc 	bl	800d30c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d114:	4b06      	ldr	r3, [pc, #24]	; (800d130 <HAL_InitTick+0x64>)
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	e000      	b.n	800d120 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
}
 800d120:	0018      	movs	r0, r3
 800d122:	46bd      	mov	sp, r7
 800d124:	b003      	add	sp, #12
 800d126:	bd90      	pop	{r4, r7, pc}
 800d128:	200000d4 	.word	0x200000d4
 800d12c:	200000dc 	.word	0x200000dc
 800d130:	200000d8 	.word	0x200000d8

0800d134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d138:	4b05      	ldr	r3, [pc, #20]	; (800d150 <HAL_IncTick+0x1c>)
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	001a      	movs	r2, r3
 800d13e:	4b05      	ldr	r3, [pc, #20]	; (800d154 <HAL_IncTick+0x20>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	18d2      	adds	r2, r2, r3
 800d144:	4b03      	ldr	r3, [pc, #12]	; (800d154 <HAL_IncTick+0x20>)
 800d146:	601a      	str	r2, [r3, #0]
}
 800d148:	46c0      	nop			; (mov r8, r8)
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	46c0      	nop			; (mov r8, r8)
 800d150:	200000dc 	.word	0x200000dc
 800d154:	20001b14 	.word	0x20001b14

0800d158 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	af00      	add	r7, sp, #0
  return uwTick;
 800d15c:	4b02      	ldr	r3, [pc, #8]	; (800d168 <HAL_GetTick+0x10>)
 800d15e:	681b      	ldr	r3, [r3, #0]
}
 800d160:	0018      	movs	r0, r3
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	46c0      	nop			; (mov r8, r8)
 800d168:	20001b14 	.word	0x20001b14

0800d16c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d174:	f7ff fff0 	bl	800d158 <HAL_GetTick>
 800d178:	0003      	movs	r3, r0
 800d17a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	3301      	adds	r3, #1
 800d184:	d005      	beq.n	800d192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d186:	4b0a      	ldr	r3, [pc, #40]	; (800d1b0 <HAL_Delay+0x44>)
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	001a      	movs	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	189b      	adds	r3, r3, r2
 800d190:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800d192:	46c0      	nop			; (mov r8, r8)
 800d194:	f7ff ffe0 	bl	800d158 <HAL_GetTick>
 800d198:	0002      	movs	r2, r0
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d8f7      	bhi.n	800d194 <HAL_Delay+0x28>
  {
  }
}
 800d1a4:	46c0      	nop			; (mov r8, r8)
 800d1a6:	46c0      	nop			; (mov r8, r8)
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	b004      	add	sp, #16
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	46c0      	nop			; (mov r8, r8)
 800d1b0:	200000dc 	.word	0x200000dc

0800d1b4 <__NVIC_EnableIRQ>:
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	0002      	movs	r2, r0
 800d1bc:	1dfb      	adds	r3, r7, #7
 800d1be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d1c0:	1dfb      	adds	r3, r7, #7
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b7f      	cmp	r3, #127	; 0x7f
 800d1c6:	d809      	bhi.n	800d1dc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d1c8:	1dfb      	adds	r3, r7, #7
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	001a      	movs	r2, r3
 800d1ce:	231f      	movs	r3, #31
 800d1d0:	401a      	ands	r2, r3
 800d1d2:	4b04      	ldr	r3, [pc, #16]	; (800d1e4 <__NVIC_EnableIRQ+0x30>)
 800d1d4:	2101      	movs	r1, #1
 800d1d6:	4091      	lsls	r1, r2
 800d1d8:	000a      	movs	r2, r1
 800d1da:	601a      	str	r2, [r3, #0]
}
 800d1dc:	46c0      	nop			; (mov r8, r8)
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	b002      	add	sp, #8
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	e000e100 	.word	0xe000e100

0800d1e8 <__NVIC_SetPriority>:
{
 800d1e8:	b590      	push	{r4, r7, lr}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	0002      	movs	r2, r0
 800d1f0:	6039      	str	r1, [r7, #0]
 800d1f2:	1dfb      	adds	r3, r7, #7
 800d1f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d1f6:	1dfb      	adds	r3, r7, #7
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	2b7f      	cmp	r3, #127	; 0x7f
 800d1fc:	d828      	bhi.n	800d250 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d1fe:	4a2f      	ldr	r2, [pc, #188]	; (800d2bc <__NVIC_SetPriority+0xd4>)
 800d200:	1dfb      	adds	r3, r7, #7
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	b25b      	sxtb	r3, r3
 800d206:	089b      	lsrs	r3, r3, #2
 800d208:	33c0      	adds	r3, #192	; 0xc0
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	589b      	ldr	r3, [r3, r2]
 800d20e:	1dfa      	adds	r2, r7, #7
 800d210:	7812      	ldrb	r2, [r2, #0]
 800d212:	0011      	movs	r1, r2
 800d214:	2203      	movs	r2, #3
 800d216:	400a      	ands	r2, r1
 800d218:	00d2      	lsls	r2, r2, #3
 800d21a:	21ff      	movs	r1, #255	; 0xff
 800d21c:	4091      	lsls	r1, r2
 800d21e:	000a      	movs	r2, r1
 800d220:	43d2      	mvns	r2, r2
 800d222:	401a      	ands	r2, r3
 800d224:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	019b      	lsls	r3, r3, #6
 800d22a:	22ff      	movs	r2, #255	; 0xff
 800d22c:	401a      	ands	r2, r3
 800d22e:	1dfb      	adds	r3, r7, #7
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	0018      	movs	r0, r3
 800d234:	2303      	movs	r3, #3
 800d236:	4003      	ands	r3, r0
 800d238:	00db      	lsls	r3, r3, #3
 800d23a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d23c:	481f      	ldr	r0, [pc, #124]	; (800d2bc <__NVIC_SetPriority+0xd4>)
 800d23e:	1dfb      	adds	r3, r7, #7
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	b25b      	sxtb	r3, r3
 800d244:	089b      	lsrs	r3, r3, #2
 800d246:	430a      	orrs	r2, r1
 800d248:	33c0      	adds	r3, #192	; 0xc0
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	501a      	str	r2, [r3, r0]
}
 800d24e:	e031      	b.n	800d2b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d250:	4a1b      	ldr	r2, [pc, #108]	; (800d2c0 <__NVIC_SetPriority+0xd8>)
 800d252:	1dfb      	adds	r3, r7, #7
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	0019      	movs	r1, r3
 800d258:	230f      	movs	r3, #15
 800d25a:	400b      	ands	r3, r1
 800d25c:	3b08      	subs	r3, #8
 800d25e:	089b      	lsrs	r3, r3, #2
 800d260:	3306      	adds	r3, #6
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	18d3      	adds	r3, r2, r3
 800d266:	3304      	adds	r3, #4
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	1dfa      	adds	r2, r7, #7
 800d26c:	7812      	ldrb	r2, [r2, #0]
 800d26e:	0011      	movs	r1, r2
 800d270:	2203      	movs	r2, #3
 800d272:	400a      	ands	r2, r1
 800d274:	00d2      	lsls	r2, r2, #3
 800d276:	21ff      	movs	r1, #255	; 0xff
 800d278:	4091      	lsls	r1, r2
 800d27a:	000a      	movs	r2, r1
 800d27c:	43d2      	mvns	r2, r2
 800d27e:	401a      	ands	r2, r3
 800d280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	019b      	lsls	r3, r3, #6
 800d286:	22ff      	movs	r2, #255	; 0xff
 800d288:	401a      	ands	r2, r3
 800d28a:	1dfb      	adds	r3, r7, #7
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	0018      	movs	r0, r3
 800d290:	2303      	movs	r3, #3
 800d292:	4003      	ands	r3, r0
 800d294:	00db      	lsls	r3, r3, #3
 800d296:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d298:	4809      	ldr	r0, [pc, #36]	; (800d2c0 <__NVIC_SetPriority+0xd8>)
 800d29a:	1dfb      	adds	r3, r7, #7
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	001c      	movs	r4, r3
 800d2a0:	230f      	movs	r3, #15
 800d2a2:	4023      	ands	r3, r4
 800d2a4:	3b08      	subs	r3, #8
 800d2a6:	089b      	lsrs	r3, r3, #2
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	3306      	adds	r3, #6
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	18c3      	adds	r3, r0, r3
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	601a      	str	r2, [r3, #0]
}
 800d2b4:	46c0      	nop			; (mov r8, r8)
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	b003      	add	sp, #12
 800d2ba:	bd90      	pop	{r4, r7, pc}
 800d2bc:	e000e100 	.word	0xe000e100
 800d2c0:	e000ed00 	.word	0xe000ed00

0800d2c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	1e5a      	subs	r2, r3, #1
 800d2d0:	2380      	movs	r3, #128	; 0x80
 800d2d2:	045b      	lsls	r3, r3, #17
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d301      	bcc.n	800d2dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e010      	b.n	800d2fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d2dc:	4b0a      	ldr	r3, [pc, #40]	; (800d308 <SysTick_Config+0x44>)
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	3a01      	subs	r2, #1
 800d2e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	425b      	negs	r3, r3
 800d2e8:	2103      	movs	r1, #3
 800d2ea:	0018      	movs	r0, r3
 800d2ec:	f7ff ff7c 	bl	800d1e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d2f0:	4b05      	ldr	r3, [pc, #20]	; (800d308 <SysTick_Config+0x44>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d2f6:	4b04      	ldr	r3, [pc, #16]	; (800d308 <SysTick_Config+0x44>)
 800d2f8:	2207      	movs	r2, #7
 800d2fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	0018      	movs	r0, r3
 800d300:	46bd      	mov	sp, r7
 800d302:	b002      	add	sp, #8
 800d304:	bd80      	pop	{r7, pc}
 800d306:	46c0      	nop			; (mov r8, r8)
 800d308:	e000e010 	.word	0xe000e010

0800d30c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	60b9      	str	r1, [r7, #8]
 800d314:	607a      	str	r2, [r7, #4]
 800d316:	210f      	movs	r1, #15
 800d318:	187b      	adds	r3, r7, r1
 800d31a:	1c02      	adds	r2, r0, #0
 800d31c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	187b      	adds	r3, r7, r1
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	b25b      	sxtb	r3, r3
 800d326:	0011      	movs	r1, r2
 800d328:	0018      	movs	r0, r3
 800d32a:	f7ff ff5d 	bl	800d1e8 <__NVIC_SetPriority>
}
 800d32e:	46c0      	nop			; (mov r8, r8)
 800d330:	46bd      	mov	sp, r7
 800d332:	b004      	add	sp, #16
 800d334:	bd80      	pop	{r7, pc}

0800d336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b082      	sub	sp, #8
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	0002      	movs	r2, r0
 800d33e:	1dfb      	adds	r3, r7, #7
 800d340:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d342:	1dfb      	adds	r3, r7, #7
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	b25b      	sxtb	r3, r3
 800d348:	0018      	movs	r0, r3
 800d34a:	f7ff ff33 	bl	800d1b4 <__NVIC_EnableIRQ>
}
 800d34e:	46c0      	nop			; (mov r8, r8)
 800d350:	46bd      	mov	sp, r7
 800d352:	b002      	add	sp, #8
 800d354:	bd80      	pop	{r7, pc}

0800d356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b082      	sub	sp, #8
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	0018      	movs	r0, r3
 800d362:	f7ff ffaf 	bl	800d2c4 <SysTick_Config>
 800d366:	0003      	movs	r3, r0
}
 800d368:	0018      	movs	r0, r3
 800d36a:	46bd      	mov	sp, r7
 800d36c:	b002      	add	sp, #8
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2221      	movs	r2, #33	; 0x21
 800d37c:	5c9b      	ldrb	r3, [r3, r2]
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	2b02      	cmp	r3, #2
 800d382:	d008      	beq.n	800d396 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2204      	movs	r2, #4
 800d388:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2220      	movs	r2, #32
 800d38e:	2100      	movs	r1, #0
 800d390:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	e020      	b.n	800d3d8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	210e      	movs	r1, #14
 800d3a2:	438a      	bics	r2, r1
 800d3a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2101      	movs	r1, #1
 800d3b2:	438a      	bics	r2, r1
 800d3b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3be:	2101      	movs	r1, #1
 800d3c0:	4091      	lsls	r1, r2
 800d3c2:	000a      	movs	r2, r1
 800d3c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2221      	movs	r2, #33	; 0x21
 800d3ca:	2101      	movs	r1, #1
 800d3cc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2220      	movs	r2, #32
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	0018      	movs	r0, r3
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	b002      	add	sp, #8
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3e8:	210f      	movs	r1, #15
 800d3ea:	187b      	adds	r3, r7, r1
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2221      	movs	r2, #33	; 0x21
 800d3f4:	5c9b      	ldrb	r3, [r3, r2]
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d006      	beq.n	800d40a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2204      	movs	r2, #4
 800d400:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800d402:	187b      	adds	r3, r7, r1
 800d404:	2201      	movs	r2, #1
 800d406:	701a      	strb	r2, [r3, #0]
 800d408:	e028      	b.n	800d45c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	210e      	movs	r1, #14
 800d416:	438a      	bics	r2, r1
 800d418:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2101      	movs	r1, #1
 800d426:	438a      	bics	r2, r1
 800d428:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d432:	2101      	movs	r1, #1
 800d434:	4091      	lsls	r1, r2
 800d436:	000a      	movs	r2, r1
 800d438:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2221      	movs	r2, #33	; 0x21
 800d43e:	2101      	movs	r1, #1
 800d440:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2220      	movs	r2, #32
 800d446:	2100      	movs	r1, #0
 800d448:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d004      	beq.n	800d45c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	0010      	movs	r0, r2
 800d45a:	4798      	blx	r3
    } 
  }
  return status;
 800d45c:	230f      	movs	r3, #15
 800d45e:	18fb      	adds	r3, r7, r3
 800d460:	781b      	ldrb	r3, [r3, #0]
}
 800d462:	0018      	movs	r0, r3
 800d464:	46bd      	mov	sp, r7
 800d466:	b004      	add	sp, #16
 800d468:	bd80      	pop	{r7, pc}
	...

0800d46c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d476:	2300      	movs	r3, #0
 800d478:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d47a:	e155      	b.n	800d728 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2101      	movs	r1, #1
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	4091      	lsls	r1, r2
 800d486:	000a      	movs	r2, r1
 800d488:	4013      	ands	r3, r2
 800d48a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d100      	bne.n	800d494 <HAL_GPIO_Init+0x28>
 800d492:	e146      	b.n	800d722 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	2203      	movs	r2, #3
 800d49a:	4013      	ands	r3, r2
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d005      	beq.n	800d4ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	2203      	movs	r2, #3
 800d4a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d4a8:	2b02      	cmp	r3, #2
 800d4aa:	d130      	bne.n	800d50e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	005b      	lsls	r3, r3, #1
 800d4b6:	2203      	movs	r2, #3
 800d4b8:	409a      	lsls	r2, r3
 800d4ba:	0013      	movs	r3, r2
 800d4bc:	43da      	mvns	r2, r3
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	4013      	ands	r3, r2
 800d4c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	68da      	ldr	r2, [r3, #12]
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	409a      	lsls	r2, r3
 800d4ce:	0013      	movs	r3, r2
 800d4d0:	693a      	ldr	r2, [r7, #16]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	409a      	lsls	r2, r3
 800d4e8:	0013      	movs	r3, r2
 800d4ea:	43da      	mvns	r2, r3
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	091b      	lsrs	r3, r3, #4
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	401a      	ands	r2, r3
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	409a      	lsls	r2, r3
 800d500:	0013      	movs	r3, r2
 800d502:	693a      	ldr	r2, [r7, #16]
 800d504:	4313      	orrs	r3, r2
 800d506:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	693a      	ldr	r2, [r7, #16]
 800d50c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	2203      	movs	r2, #3
 800d514:	4013      	ands	r3, r2
 800d516:	2b03      	cmp	r3, #3
 800d518:	d017      	beq.n	800d54a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	005b      	lsls	r3, r3, #1
 800d524:	2203      	movs	r2, #3
 800d526:	409a      	lsls	r2, r3
 800d528:	0013      	movs	r3, r2
 800d52a:	43da      	mvns	r2, r3
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	4013      	ands	r3, r2
 800d530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	689a      	ldr	r2, [r3, #8]
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	005b      	lsls	r3, r3, #1
 800d53a:	409a      	lsls	r2, r3
 800d53c:	0013      	movs	r3, r2
 800d53e:	693a      	ldr	r2, [r7, #16]
 800d540:	4313      	orrs	r3, r2
 800d542:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	693a      	ldr	r2, [r7, #16]
 800d548:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	2203      	movs	r2, #3
 800d550:	4013      	ands	r3, r2
 800d552:	2b02      	cmp	r3, #2
 800d554:	d123      	bne.n	800d59e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	08da      	lsrs	r2, r3, #3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	3208      	adds	r2, #8
 800d55e:	0092      	lsls	r2, r2, #2
 800d560:	58d3      	ldr	r3, [r2, r3]
 800d562:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	2207      	movs	r2, #7
 800d568:	4013      	ands	r3, r2
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	220f      	movs	r2, #15
 800d56e:	409a      	lsls	r2, r3
 800d570:	0013      	movs	r3, r2
 800d572:	43da      	mvns	r2, r3
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	4013      	ands	r3, r2
 800d578:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	691a      	ldr	r2, [r3, #16]
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	2107      	movs	r1, #7
 800d582:	400b      	ands	r3, r1
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	409a      	lsls	r2, r3
 800d588:	0013      	movs	r3, r2
 800d58a:	693a      	ldr	r2, [r7, #16]
 800d58c:	4313      	orrs	r3, r2
 800d58e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	08da      	lsrs	r2, r3, #3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3208      	adds	r2, #8
 800d598:	0092      	lsls	r2, r2, #2
 800d59a:	6939      	ldr	r1, [r7, #16]
 800d59c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	005b      	lsls	r3, r3, #1
 800d5a8:	2203      	movs	r2, #3
 800d5aa:	409a      	lsls	r2, r3
 800d5ac:	0013      	movs	r3, r2
 800d5ae:	43da      	mvns	r2, r3
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	4013      	ands	r3, r2
 800d5b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	2203      	movs	r2, #3
 800d5bc:	401a      	ands	r2, r3
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	409a      	lsls	r2, r3
 800d5c4:	0013      	movs	r3, r2
 800d5c6:	693a      	ldr	r2, [r7, #16]
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	693a      	ldr	r2, [r7, #16]
 800d5d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	685a      	ldr	r2, [r3, #4]
 800d5d6:	23c0      	movs	r3, #192	; 0xc0
 800d5d8:	029b      	lsls	r3, r3, #10
 800d5da:	4013      	ands	r3, r2
 800d5dc:	d100      	bne.n	800d5e0 <HAL_GPIO_Init+0x174>
 800d5de:	e0a0      	b.n	800d722 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d5e0:	4b57      	ldr	r3, [pc, #348]	; (800d740 <HAL_GPIO_Init+0x2d4>)
 800d5e2:	699a      	ldr	r2, [r3, #24]
 800d5e4:	4b56      	ldr	r3, [pc, #344]	; (800d740 <HAL_GPIO_Init+0x2d4>)
 800d5e6:	2101      	movs	r1, #1
 800d5e8:	430a      	orrs	r2, r1
 800d5ea:	619a      	str	r2, [r3, #24]
 800d5ec:	4b54      	ldr	r3, [pc, #336]	; (800d740 <HAL_GPIO_Init+0x2d4>)
 800d5ee:	699b      	ldr	r3, [r3, #24]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	4013      	ands	r3, r2
 800d5f4:	60bb      	str	r3, [r7, #8]
 800d5f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800d5f8:	4a52      	ldr	r2, [pc, #328]	; (800d744 <HAL_GPIO_Init+0x2d8>)
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	089b      	lsrs	r3, r3, #2
 800d5fe:	3302      	adds	r3, #2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	589b      	ldr	r3, [r3, r2]
 800d604:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	2203      	movs	r2, #3
 800d60a:	4013      	ands	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	220f      	movs	r2, #15
 800d610:	409a      	lsls	r2, r3
 800d612:	0013      	movs	r3, r2
 800d614:	43da      	mvns	r2, r3
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	4013      	ands	r3, r2
 800d61a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	2390      	movs	r3, #144	; 0x90
 800d620:	05db      	lsls	r3, r3, #23
 800d622:	429a      	cmp	r2, r3
 800d624:	d019      	beq.n	800d65a <HAL_GPIO_Init+0x1ee>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a47      	ldr	r2, [pc, #284]	; (800d748 <HAL_GPIO_Init+0x2dc>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d013      	beq.n	800d656 <HAL_GPIO_Init+0x1ea>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a46      	ldr	r2, [pc, #280]	; (800d74c <HAL_GPIO_Init+0x2e0>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d00d      	beq.n	800d652 <HAL_GPIO_Init+0x1e6>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a45      	ldr	r2, [pc, #276]	; (800d750 <HAL_GPIO_Init+0x2e4>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d007      	beq.n	800d64e <HAL_GPIO_Init+0x1e2>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a44      	ldr	r2, [pc, #272]	; (800d754 <HAL_GPIO_Init+0x2e8>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d101      	bne.n	800d64a <HAL_GPIO_Init+0x1de>
 800d646:	2304      	movs	r3, #4
 800d648:	e008      	b.n	800d65c <HAL_GPIO_Init+0x1f0>
 800d64a:	2305      	movs	r3, #5
 800d64c:	e006      	b.n	800d65c <HAL_GPIO_Init+0x1f0>
 800d64e:	2303      	movs	r3, #3
 800d650:	e004      	b.n	800d65c <HAL_GPIO_Init+0x1f0>
 800d652:	2302      	movs	r3, #2
 800d654:	e002      	b.n	800d65c <HAL_GPIO_Init+0x1f0>
 800d656:	2301      	movs	r3, #1
 800d658:	e000      	b.n	800d65c <HAL_GPIO_Init+0x1f0>
 800d65a:	2300      	movs	r3, #0
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	2103      	movs	r1, #3
 800d660:	400a      	ands	r2, r1
 800d662:	0092      	lsls	r2, r2, #2
 800d664:	4093      	lsls	r3, r2
 800d666:	693a      	ldr	r2, [r7, #16]
 800d668:	4313      	orrs	r3, r2
 800d66a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800d66c:	4935      	ldr	r1, [pc, #212]	; (800d744 <HAL_GPIO_Init+0x2d8>)
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	089b      	lsrs	r3, r3, #2
 800d672:	3302      	adds	r3, #2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	693a      	ldr	r2, [r7, #16]
 800d678:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d67a:	4b37      	ldr	r3, [pc, #220]	; (800d758 <HAL_GPIO_Init+0x2ec>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	43da      	mvns	r2, r3
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	4013      	ands	r3, r2
 800d688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	685a      	ldr	r2, [r3, #4]
 800d68e:	2380      	movs	r3, #128	; 0x80
 800d690:	025b      	lsls	r3, r3, #9
 800d692:	4013      	ands	r3, r2
 800d694:	d003      	beq.n	800d69e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800d69e:	4b2e      	ldr	r3, [pc, #184]	; (800d758 <HAL_GPIO_Init+0x2ec>)
 800d6a0:	693a      	ldr	r2, [r7, #16]
 800d6a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800d6a4:	4b2c      	ldr	r3, [pc, #176]	; (800d758 <HAL_GPIO_Init+0x2ec>)
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	43da      	mvns	r2, r3
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	4013      	ands	r3, r2
 800d6b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	685a      	ldr	r2, [r3, #4]
 800d6b8:	2380      	movs	r3, #128	; 0x80
 800d6ba:	029b      	lsls	r3, r3, #10
 800d6bc:	4013      	ands	r3, r2
 800d6be:	d003      	beq.n	800d6c8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800d6c8:	4b23      	ldr	r3, [pc, #140]	; (800d758 <HAL_GPIO_Init+0x2ec>)
 800d6ca:	693a      	ldr	r2, [r7, #16]
 800d6cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d6ce:	4b22      	ldr	r3, [pc, #136]	; (800d758 <HAL_GPIO_Init+0x2ec>)
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	43da      	mvns	r2, r3
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	4013      	ands	r3, r2
 800d6dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	685a      	ldr	r2, [r3, #4]
 800d6e2:	2380      	movs	r3, #128	; 0x80
 800d6e4:	035b      	lsls	r3, r3, #13
 800d6e6:	4013      	ands	r3, r2
 800d6e8:	d003      	beq.n	800d6f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800d6ea:	693a      	ldr	r2, [r7, #16]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800d6f2:	4b19      	ldr	r3, [pc, #100]	; (800d758 <HAL_GPIO_Init+0x2ec>)
 800d6f4:	693a      	ldr	r2, [r7, #16]
 800d6f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800d6f8:	4b17      	ldr	r3, [pc, #92]	; (800d758 <HAL_GPIO_Init+0x2ec>)
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	43da      	mvns	r2, r3
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	4013      	ands	r3, r2
 800d706:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	2380      	movs	r3, #128	; 0x80
 800d70e:	039b      	lsls	r3, r3, #14
 800d710:	4013      	ands	r3, r2
 800d712:	d003      	beq.n	800d71c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800d714:	693a      	ldr	r2, [r7, #16]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	4313      	orrs	r3, r2
 800d71a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800d71c:	4b0e      	ldr	r3, [pc, #56]	; (800d758 <HAL_GPIO_Init+0x2ec>)
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	3301      	adds	r3, #1
 800d726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	40da      	lsrs	r2, r3
 800d730:	1e13      	subs	r3, r2, #0
 800d732:	d000      	beq.n	800d736 <HAL_GPIO_Init+0x2ca>
 800d734:	e6a2      	b.n	800d47c <HAL_GPIO_Init+0x10>
  } 
}
 800d736:	46c0      	nop			; (mov r8, r8)
 800d738:	46c0      	nop			; (mov r8, r8)
 800d73a:	46bd      	mov	sp, r7
 800d73c:	b006      	add	sp, #24
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	40021000 	.word	0x40021000
 800d744:	40010000 	.word	0x40010000
 800d748:	48000400 	.word	0x48000400
 800d74c:	48000800 	.word	0x48000800
 800d750:	48000c00 	.word	0x48000c00
 800d754:	48001000 	.word	0x48001000
 800d758:	40010400 	.word	0x40010400

0800d75c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	0008      	movs	r0, r1
 800d766:	0011      	movs	r1, r2
 800d768:	1cbb      	adds	r3, r7, #2
 800d76a:	1c02      	adds	r2, r0, #0
 800d76c:	801a      	strh	r2, [r3, #0]
 800d76e:	1c7b      	adds	r3, r7, #1
 800d770:	1c0a      	adds	r2, r1, #0
 800d772:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d774:	1c7b      	adds	r3, r7, #1
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d004      	beq.n	800d786 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d77c:	1cbb      	adds	r3, r7, #2
 800d77e:	881a      	ldrh	r2, [r3, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d784:	e003      	b.n	800d78e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d786:	1cbb      	adds	r3, r7, #2
 800d788:	881a      	ldrh	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d78e:	46c0      	nop			; (mov r8, r8)
 800d790:	46bd      	mov	sp, r7
 800d792:	b002      	add	sp, #8
 800d794:	bd80      	pop	{r7, pc}

0800d796 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b084      	sub	sp, #16
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	6078      	str	r0, [r7, #4]
 800d79e:	000a      	movs	r2, r1
 800d7a0:	1cbb      	adds	r3, r7, #2
 800d7a2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	695b      	ldr	r3, [r3, #20]
 800d7a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d7aa:	1cbb      	adds	r3, r7, #2
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	041a      	lsls	r2, r3, #16
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	43db      	mvns	r3, r3
 800d7b8:	1cb9      	adds	r1, r7, #2
 800d7ba:	8809      	ldrh	r1, [r1, #0]
 800d7bc:	400b      	ands	r3, r1
 800d7be:	431a      	orrs	r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	619a      	str	r2, [r3, #24]
}
 800d7c4:	46c0      	nop			; (mov r8, r8)
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	b004      	add	sp, #16
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b088      	sub	sp, #32
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d102      	bne.n	800d7e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	f000 fb76 	bl	800decc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	d100      	bne.n	800d7ec <HAL_RCC_OscConfig+0x20>
 800d7ea:	e08e      	b.n	800d90a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800d7ec:	4bc5      	ldr	r3, [pc, #788]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	220c      	movs	r2, #12
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	2b04      	cmp	r3, #4
 800d7f6:	d00e      	beq.n	800d816 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800d7f8:	4bc2      	ldr	r3, [pc, #776]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	220c      	movs	r2, #12
 800d7fe:	4013      	ands	r3, r2
 800d800:	2b08      	cmp	r3, #8
 800d802:	d117      	bne.n	800d834 <HAL_RCC_OscConfig+0x68>
 800d804:	4bbf      	ldr	r3, [pc, #764]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d806:	685a      	ldr	r2, [r3, #4]
 800d808:	23c0      	movs	r3, #192	; 0xc0
 800d80a:	025b      	lsls	r3, r3, #9
 800d80c:	401a      	ands	r2, r3
 800d80e:	2380      	movs	r3, #128	; 0x80
 800d810:	025b      	lsls	r3, r3, #9
 800d812:	429a      	cmp	r2, r3
 800d814:	d10e      	bne.n	800d834 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d816:	4bbb      	ldr	r3, [pc, #748]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	2380      	movs	r3, #128	; 0x80
 800d81c:	029b      	lsls	r3, r3, #10
 800d81e:	4013      	ands	r3, r2
 800d820:	d100      	bne.n	800d824 <HAL_RCC_OscConfig+0x58>
 800d822:	e071      	b.n	800d908 <HAL_RCC_OscConfig+0x13c>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d000      	beq.n	800d82e <HAL_RCC_OscConfig+0x62>
 800d82c:	e06c      	b.n	800d908 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	f000 fb4c 	bl	800decc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d107      	bne.n	800d84c <HAL_RCC_OscConfig+0x80>
 800d83c:	4bb1      	ldr	r3, [pc, #708]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	4bb0      	ldr	r3, [pc, #704]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d842:	2180      	movs	r1, #128	; 0x80
 800d844:	0249      	lsls	r1, r1, #9
 800d846:	430a      	orrs	r2, r1
 800d848:	601a      	str	r2, [r3, #0]
 800d84a:	e02f      	b.n	800d8ac <HAL_RCC_OscConfig+0xe0>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10c      	bne.n	800d86e <HAL_RCC_OscConfig+0xa2>
 800d854:	4bab      	ldr	r3, [pc, #684]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	4baa      	ldr	r3, [pc, #680]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d85a:	49ab      	ldr	r1, [pc, #684]	; (800db08 <HAL_RCC_OscConfig+0x33c>)
 800d85c:	400a      	ands	r2, r1
 800d85e:	601a      	str	r2, [r3, #0]
 800d860:	4ba8      	ldr	r3, [pc, #672]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	4ba7      	ldr	r3, [pc, #668]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d866:	49a9      	ldr	r1, [pc, #676]	; (800db0c <HAL_RCC_OscConfig+0x340>)
 800d868:	400a      	ands	r2, r1
 800d86a:	601a      	str	r2, [r3, #0]
 800d86c:	e01e      	b.n	800d8ac <HAL_RCC_OscConfig+0xe0>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	2b05      	cmp	r3, #5
 800d874:	d10e      	bne.n	800d894 <HAL_RCC_OscConfig+0xc8>
 800d876:	4ba3      	ldr	r3, [pc, #652]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	4ba2      	ldr	r3, [pc, #648]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d87c:	2180      	movs	r1, #128	; 0x80
 800d87e:	02c9      	lsls	r1, r1, #11
 800d880:	430a      	orrs	r2, r1
 800d882:	601a      	str	r2, [r3, #0]
 800d884:	4b9f      	ldr	r3, [pc, #636]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	4b9e      	ldr	r3, [pc, #632]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d88a:	2180      	movs	r1, #128	; 0x80
 800d88c:	0249      	lsls	r1, r1, #9
 800d88e:	430a      	orrs	r2, r1
 800d890:	601a      	str	r2, [r3, #0]
 800d892:	e00b      	b.n	800d8ac <HAL_RCC_OscConfig+0xe0>
 800d894:	4b9b      	ldr	r3, [pc, #620]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	4b9a      	ldr	r3, [pc, #616]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d89a:	499b      	ldr	r1, [pc, #620]	; (800db08 <HAL_RCC_OscConfig+0x33c>)
 800d89c:	400a      	ands	r2, r1
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	4b98      	ldr	r3, [pc, #608]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	4b97      	ldr	r3, [pc, #604]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d8a6:	4999      	ldr	r1, [pc, #612]	; (800db0c <HAL_RCC_OscConfig+0x340>)
 800d8a8:	400a      	ands	r2, r1
 800d8aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d014      	beq.n	800d8de <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8b4:	f7ff fc50 	bl	800d158 <HAL_GetTick>
 800d8b8:	0003      	movs	r3, r0
 800d8ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d8bc:	e008      	b.n	800d8d0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d8be:	f7ff fc4b 	bl	800d158 <HAL_GetTick>
 800d8c2:	0002      	movs	r2, r0
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	2b64      	cmp	r3, #100	; 0x64
 800d8ca:	d901      	bls.n	800d8d0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	e2fd      	b.n	800decc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d8d0:	4b8c      	ldr	r3, [pc, #560]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	2380      	movs	r3, #128	; 0x80
 800d8d6:	029b      	lsls	r3, r3, #10
 800d8d8:	4013      	ands	r3, r2
 800d8da:	d0f0      	beq.n	800d8be <HAL_RCC_OscConfig+0xf2>
 800d8dc:	e015      	b.n	800d90a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8de:	f7ff fc3b 	bl	800d158 <HAL_GetTick>
 800d8e2:	0003      	movs	r3, r0
 800d8e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d8e6:	e008      	b.n	800d8fa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d8e8:	f7ff fc36 	bl	800d158 <HAL_GetTick>
 800d8ec:	0002      	movs	r2, r0
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	2b64      	cmp	r3, #100	; 0x64
 800d8f4:	d901      	bls.n	800d8fa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	e2e8      	b.n	800decc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d8fa:	4b82      	ldr	r3, [pc, #520]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	2380      	movs	r3, #128	; 0x80
 800d900:	029b      	lsls	r3, r3, #10
 800d902:	4013      	ands	r3, r2
 800d904:	d1f0      	bne.n	800d8e8 <HAL_RCC_OscConfig+0x11c>
 800d906:	e000      	b.n	800d90a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d908:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2202      	movs	r2, #2
 800d910:	4013      	ands	r3, r2
 800d912:	d100      	bne.n	800d916 <HAL_RCC_OscConfig+0x14a>
 800d914:	e06c      	b.n	800d9f0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800d916:	4b7b      	ldr	r3, [pc, #492]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	220c      	movs	r2, #12
 800d91c:	4013      	ands	r3, r2
 800d91e:	d00e      	beq.n	800d93e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800d920:	4b78      	ldr	r3, [pc, #480]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	220c      	movs	r2, #12
 800d926:	4013      	ands	r3, r2
 800d928:	2b08      	cmp	r3, #8
 800d92a:	d11f      	bne.n	800d96c <HAL_RCC_OscConfig+0x1a0>
 800d92c:	4b75      	ldr	r3, [pc, #468]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d92e:	685a      	ldr	r2, [r3, #4]
 800d930:	23c0      	movs	r3, #192	; 0xc0
 800d932:	025b      	lsls	r3, r3, #9
 800d934:	401a      	ands	r2, r3
 800d936:	2380      	movs	r3, #128	; 0x80
 800d938:	021b      	lsls	r3, r3, #8
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d116      	bne.n	800d96c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d93e:	4b71      	ldr	r3, [pc, #452]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2202      	movs	r2, #2
 800d944:	4013      	ands	r3, r2
 800d946:	d005      	beq.n	800d954 <HAL_RCC_OscConfig+0x188>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d001      	beq.n	800d954 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	e2bb      	b.n	800decc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d954:	4b6b      	ldr	r3, [pc, #428]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	22f8      	movs	r2, #248	; 0xf8
 800d95a:	4393      	bics	r3, r2
 800d95c:	0019      	movs	r1, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	691b      	ldr	r3, [r3, #16]
 800d962:	00da      	lsls	r2, r3, #3
 800d964:	4b67      	ldr	r3, [pc, #412]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d966:	430a      	orrs	r2, r1
 800d968:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d96a:	e041      	b.n	800d9f0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d024      	beq.n	800d9be <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d974:	4b63      	ldr	r3, [pc, #396]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	4b62      	ldr	r3, [pc, #392]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d97a:	2101      	movs	r1, #1
 800d97c:	430a      	orrs	r2, r1
 800d97e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d980:	f7ff fbea 	bl	800d158 <HAL_GetTick>
 800d984:	0003      	movs	r3, r0
 800d986:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d988:	e008      	b.n	800d99c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d98a:	f7ff fbe5 	bl	800d158 <HAL_GetTick>
 800d98e:	0002      	movs	r2, r0
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	2b02      	cmp	r3, #2
 800d996:	d901      	bls.n	800d99c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800d998:	2303      	movs	r3, #3
 800d99a:	e297      	b.n	800decc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d99c:	4b59      	ldr	r3, [pc, #356]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	d0f1      	beq.n	800d98a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d9a6:	4b57      	ldr	r3, [pc, #348]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	22f8      	movs	r2, #248	; 0xf8
 800d9ac:	4393      	bics	r3, r2
 800d9ae:	0019      	movs	r1, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	00da      	lsls	r2, r3, #3
 800d9b6:	4b53      	ldr	r3, [pc, #332]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d9b8:	430a      	orrs	r2, r1
 800d9ba:	601a      	str	r2, [r3, #0]
 800d9bc:	e018      	b.n	800d9f0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d9be:	4b51      	ldr	r3, [pc, #324]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	4b50      	ldr	r3, [pc, #320]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d9c4:	2101      	movs	r1, #1
 800d9c6:	438a      	bics	r2, r1
 800d9c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d9ca:	f7ff fbc5 	bl	800d158 <HAL_GetTick>
 800d9ce:	0003      	movs	r3, r0
 800d9d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d9d2:	e008      	b.n	800d9e6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d9d4:	f7ff fbc0 	bl	800d158 <HAL_GetTick>
 800d9d8:	0002      	movs	r2, r0
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	d901      	bls.n	800d9e6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800d9e2:	2303      	movs	r3, #3
 800d9e4:	e272      	b.n	800decc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d9e6:	4b47      	ldr	r3, [pc, #284]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2202      	movs	r2, #2
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	d1f1      	bne.n	800d9d4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2208      	movs	r2, #8
 800d9f6:	4013      	ands	r3, r2
 800d9f8:	d036      	beq.n	800da68 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	69db      	ldr	r3, [r3, #28]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d019      	beq.n	800da36 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800da02:	4b40      	ldr	r3, [pc, #256]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800da04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da06:	4b3f      	ldr	r3, [pc, #252]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800da08:	2101      	movs	r1, #1
 800da0a:	430a      	orrs	r2, r1
 800da0c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800da0e:	f7ff fba3 	bl	800d158 <HAL_GetTick>
 800da12:	0003      	movs	r3, r0
 800da14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da16:	e008      	b.n	800da2a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800da18:	f7ff fb9e 	bl	800d158 <HAL_GetTick>
 800da1c:	0002      	movs	r2, r0
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	2b02      	cmp	r3, #2
 800da24:	d901      	bls.n	800da2a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800da26:	2303      	movs	r3, #3
 800da28:	e250      	b.n	800decc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800da2a:	4b36      	ldr	r3, [pc, #216]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800da2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da2e:	2202      	movs	r2, #2
 800da30:	4013      	ands	r3, r2
 800da32:	d0f1      	beq.n	800da18 <HAL_RCC_OscConfig+0x24c>
 800da34:	e018      	b.n	800da68 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800da36:	4b33      	ldr	r3, [pc, #204]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800da38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da3a:	4b32      	ldr	r3, [pc, #200]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800da3c:	2101      	movs	r1, #1
 800da3e:	438a      	bics	r2, r1
 800da40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800da42:	f7ff fb89 	bl	800d158 <HAL_GetTick>
 800da46:	0003      	movs	r3, r0
 800da48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da4a:	e008      	b.n	800da5e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800da4c:	f7ff fb84 	bl	800d158 <HAL_GetTick>
 800da50:	0002      	movs	r2, r0
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	2b02      	cmp	r3, #2
 800da58:	d901      	bls.n	800da5e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800da5a:	2303      	movs	r3, #3
 800da5c:	e236      	b.n	800decc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800da5e:	4b29      	ldr	r3, [pc, #164]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800da60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da62:	2202      	movs	r2, #2
 800da64:	4013      	ands	r3, r2
 800da66:	d1f1      	bne.n	800da4c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2204      	movs	r2, #4
 800da6e:	4013      	ands	r3, r2
 800da70:	d100      	bne.n	800da74 <HAL_RCC_OscConfig+0x2a8>
 800da72:	e0b5      	b.n	800dbe0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800da74:	201f      	movs	r0, #31
 800da76:	183b      	adds	r3, r7, r0
 800da78:	2200      	movs	r2, #0
 800da7a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800da7c:	4b21      	ldr	r3, [pc, #132]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800da7e:	69da      	ldr	r2, [r3, #28]
 800da80:	2380      	movs	r3, #128	; 0x80
 800da82:	055b      	lsls	r3, r3, #21
 800da84:	4013      	ands	r3, r2
 800da86:	d110      	bne.n	800daaa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800da88:	4b1e      	ldr	r3, [pc, #120]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800da8a:	69da      	ldr	r2, [r3, #28]
 800da8c:	4b1d      	ldr	r3, [pc, #116]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800da8e:	2180      	movs	r1, #128	; 0x80
 800da90:	0549      	lsls	r1, r1, #21
 800da92:	430a      	orrs	r2, r1
 800da94:	61da      	str	r2, [r3, #28]
 800da96:	4b1b      	ldr	r3, [pc, #108]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800da98:	69da      	ldr	r2, [r3, #28]
 800da9a:	2380      	movs	r3, #128	; 0x80
 800da9c:	055b      	lsls	r3, r3, #21
 800da9e:	4013      	ands	r3, r2
 800daa0:	60fb      	str	r3, [r7, #12]
 800daa2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800daa4:	183b      	adds	r3, r7, r0
 800daa6:	2201      	movs	r2, #1
 800daa8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800daaa:	4b19      	ldr	r3, [pc, #100]	; (800db10 <HAL_RCC_OscConfig+0x344>)
 800daac:	681a      	ldr	r2, [r3, #0]
 800daae:	2380      	movs	r3, #128	; 0x80
 800dab0:	005b      	lsls	r3, r3, #1
 800dab2:	4013      	ands	r3, r2
 800dab4:	d11a      	bne.n	800daec <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800dab6:	4b16      	ldr	r3, [pc, #88]	; (800db10 <HAL_RCC_OscConfig+0x344>)
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	4b15      	ldr	r3, [pc, #84]	; (800db10 <HAL_RCC_OscConfig+0x344>)
 800dabc:	2180      	movs	r1, #128	; 0x80
 800dabe:	0049      	lsls	r1, r1, #1
 800dac0:	430a      	orrs	r2, r1
 800dac2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dac4:	f7ff fb48 	bl	800d158 <HAL_GetTick>
 800dac8:	0003      	movs	r3, r0
 800daca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dacc:	e008      	b.n	800dae0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dace:	f7ff fb43 	bl	800d158 <HAL_GetTick>
 800dad2:	0002      	movs	r2, r0
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	1ad3      	subs	r3, r2, r3
 800dad8:	2b64      	cmp	r3, #100	; 0x64
 800dada:	d901      	bls.n	800dae0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800dadc:	2303      	movs	r3, #3
 800dade:	e1f5      	b.n	800decc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800dae0:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <HAL_RCC_OscConfig+0x344>)
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	2380      	movs	r3, #128	; 0x80
 800dae6:	005b      	lsls	r3, r3, #1
 800dae8:	4013      	ands	r3, r2
 800daea:	d0f0      	beq.n	800dace <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d10f      	bne.n	800db14 <HAL_RCC_OscConfig+0x348>
 800daf4:	4b03      	ldr	r3, [pc, #12]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800daf6:	6a1a      	ldr	r2, [r3, #32]
 800daf8:	4b02      	ldr	r3, [pc, #8]	; (800db04 <HAL_RCC_OscConfig+0x338>)
 800dafa:	2101      	movs	r1, #1
 800dafc:	430a      	orrs	r2, r1
 800dafe:	621a      	str	r2, [r3, #32]
 800db00:	e036      	b.n	800db70 <HAL_RCC_OscConfig+0x3a4>
 800db02:	46c0      	nop			; (mov r8, r8)
 800db04:	40021000 	.word	0x40021000
 800db08:	fffeffff 	.word	0xfffeffff
 800db0c:	fffbffff 	.word	0xfffbffff
 800db10:	40007000 	.word	0x40007000
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d10c      	bne.n	800db36 <HAL_RCC_OscConfig+0x36a>
 800db1c:	4bca      	ldr	r3, [pc, #808]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db1e:	6a1a      	ldr	r2, [r3, #32]
 800db20:	4bc9      	ldr	r3, [pc, #804]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db22:	2101      	movs	r1, #1
 800db24:	438a      	bics	r2, r1
 800db26:	621a      	str	r2, [r3, #32]
 800db28:	4bc7      	ldr	r3, [pc, #796]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db2a:	6a1a      	ldr	r2, [r3, #32]
 800db2c:	4bc6      	ldr	r3, [pc, #792]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db2e:	2104      	movs	r1, #4
 800db30:	438a      	bics	r2, r1
 800db32:	621a      	str	r2, [r3, #32]
 800db34:	e01c      	b.n	800db70 <HAL_RCC_OscConfig+0x3a4>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	2b05      	cmp	r3, #5
 800db3c:	d10c      	bne.n	800db58 <HAL_RCC_OscConfig+0x38c>
 800db3e:	4bc2      	ldr	r3, [pc, #776]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db40:	6a1a      	ldr	r2, [r3, #32]
 800db42:	4bc1      	ldr	r3, [pc, #772]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db44:	2104      	movs	r1, #4
 800db46:	430a      	orrs	r2, r1
 800db48:	621a      	str	r2, [r3, #32]
 800db4a:	4bbf      	ldr	r3, [pc, #764]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db4c:	6a1a      	ldr	r2, [r3, #32]
 800db4e:	4bbe      	ldr	r3, [pc, #760]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db50:	2101      	movs	r1, #1
 800db52:	430a      	orrs	r2, r1
 800db54:	621a      	str	r2, [r3, #32]
 800db56:	e00b      	b.n	800db70 <HAL_RCC_OscConfig+0x3a4>
 800db58:	4bbb      	ldr	r3, [pc, #748]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db5a:	6a1a      	ldr	r2, [r3, #32]
 800db5c:	4bba      	ldr	r3, [pc, #744]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db5e:	2101      	movs	r1, #1
 800db60:	438a      	bics	r2, r1
 800db62:	621a      	str	r2, [r3, #32]
 800db64:	4bb8      	ldr	r3, [pc, #736]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db66:	6a1a      	ldr	r2, [r3, #32]
 800db68:	4bb7      	ldr	r3, [pc, #732]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db6a:	2104      	movs	r1, #4
 800db6c:	438a      	bics	r2, r1
 800db6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d014      	beq.n	800dba2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800db78:	f7ff faee 	bl	800d158 <HAL_GetTick>
 800db7c:	0003      	movs	r3, r0
 800db7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db80:	e009      	b.n	800db96 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800db82:	f7ff fae9 	bl	800d158 <HAL_GetTick>
 800db86:	0002      	movs	r2, r0
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	1ad3      	subs	r3, r2, r3
 800db8c:	4aaf      	ldr	r2, [pc, #700]	; (800de4c <HAL_RCC_OscConfig+0x680>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d901      	bls.n	800db96 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800db92:	2303      	movs	r3, #3
 800db94:	e19a      	b.n	800decc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800db96:	4bac      	ldr	r3, [pc, #688]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	2202      	movs	r2, #2
 800db9c:	4013      	ands	r3, r2
 800db9e:	d0f0      	beq.n	800db82 <HAL_RCC_OscConfig+0x3b6>
 800dba0:	e013      	b.n	800dbca <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dba2:	f7ff fad9 	bl	800d158 <HAL_GetTick>
 800dba6:	0003      	movs	r3, r0
 800dba8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dbaa:	e009      	b.n	800dbc0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dbac:	f7ff fad4 	bl	800d158 <HAL_GetTick>
 800dbb0:	0002      	movs	r2, r0
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	1ad3      	subs	r3, r2, r3
 800dbb6:	4aa5      	ldr	r2, [pc, #660]	; (800de4c <HAL_RCC_OscConfig+0x680>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d901      	bls.n	800dbc0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800dbbc:	2303      	movs	r3, #3
 800dbbe:	e185      	b.n	800decc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dbc0:	4ba1      	ldr	r3, [pc, #644]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
 800dbc4:	2202      	movs	r2, #2
 800dbc6:	4013      	ands	r3, r2
 800dbc8:	d1f0      	bne.n	800dbac <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800dbca:	231f      	movs	r3, #31
 800dbcc:	18fb      	adds	r3, r7, r3
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d105      	bne.n	800dbe0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbd4:	4b9c      	ldr	r3, [pc, #624]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dbd6:	69da      	ldr	r2, [r3, #28]
 800dbd8:	4b9b      	ldr	r3, [pc, #620]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dbda:	499d      	ldr	r1, [pc, #628]	; (800de50 <HAL_RCC_OscConfig+0x684>)
 800dbdc:	400a      	ands	r2, r1
 800dbde:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2210      	movs	r2, #16
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	d063      	beq.n	800dcb2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	695b      	ldr	r3, [r3, #20]
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d12a      	bne.n	800dc48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800dbf2:	4b95      	ldr	r3, [pc, #596]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dbf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbf6:	4b94      	ldr	r3, [pc, #592]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dbf8:	2104      	movs	r1, #4
 800dbfa:	430a      	orrs	r2, r1
 800dbfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800dbfe:	4b92      	ldr	r3, [pc, #584]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc02:	4b91      	ldr	r3, [pc, #580]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc04:	2101      	movs	r1, #1
 800dc06:	430a      	orrs	r2, r1
 800dc08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dc0a:	f7ff faa5 	bl	800d158 <HAL_GetTick>
 800dc0e:	0003      	movs	r3, r0
 800dc10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800dc12:	e008      	b.n	800dc26 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800dc14:	f7ff faa0 	bl	800d158 <HAL_GetTick>
 800dc18:	0002      	movs	r2, r0
 800dc1a:	69bb      	ldr	r3, [r7, #24]
 800dc1c:	1ad3      	subs	r3, r2, r3
 800dc1e:	2b02      	cmp	r3, #2
 800dc20:	d901      	bls.n	800dc26 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800dc22:	2303      	movs	r3, #3
 800dc24:	e152      	b.n	800decc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800dc26:	4b88      	ldr	r3, [pc, #544]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc2a:	2202      	movs	r2, #2
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	d0f1      	beq.n	800dc14 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800dc30:	4b85      	ldr	r3, [pc, #532]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc34:	22f8      	movs	r2, #248	; 0xf8
 800dc36:	4393      	bics	r3, r2
 800dc38:	0019      	movs	r1, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	699b      	ldr	r3, [r3, #24]
 800dc3e:	00da      	lsls	r2, r3, #3
 800dc40:	4b81      	ldr	r3, [pc, #516]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc42:	430a      	orrs	r2, r1
 800dc44:	635a      	str	r2, [r3, #52]	; 0x34
 800dc46:	e034      	b.n	800dcb2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	695b      	ldr	r3, [r3, #20]
 800dc4c:	3305      	adds	r3, #5
 800dc4e:	d111      	bne.n	800dc74 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800dc50:	4b7d      	ldr	r3, [pc, #500]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc54:	4b7c      	ldr	r3, [pc, #496]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc56:	2104      	movs	r1, #4
 800dc58:	438a      	bics	r2, r1
 800dc5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800dc5c:	4b7a      	ldr	r3, [pc, #488]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc60:	22f8      	movs	r2, #248	; 0xf8
 800dc62:	4393      	bics	r3, r2
 800dc64:	0019      	movs	r1, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	699b      	ldr	r3, [r3, #24]
 800dc6a:	00da      	lsls	r2, r3, #3
 800dc6c:	4b76      	ldr	r3, [pc, #472]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc6e:	430a      	orrs	r2, r1
 800dc70:	635a      	str	r2, [r3, #52]	; 0x34
 800dc72:	e01e      	b.n	800dcb2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800dc74:	4b74      	ldr	r3, [pc, #464]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc78:	4b73      	ldr	r3, [pc, #460]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc7a:	2104      	movs	r1, #4
 800dc7c:	430a      	orrs	r2, r1
 800dc7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800dc80:	4b71      	ldr	r3, [pc, #452]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc84:	4b70      	ldr	r3, [pc, #448]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dc86:	2101      	movs	r1, #1
 800dc88:	438a      	bics	r2, r1
 800dc8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800dc8c:	f7ff fa64 	bl	800d158 <HAL_GetTick>
 800dc90:	0003      	movs	r3, r0
 800dc92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800dc94:	e008      	b.n	800dca8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800dc96:	f7ff fa5f 	bl	800d158 <HAL_GetTick>
 800dc9a:	0002      	movs	r2, r0
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	2b02      	cmp	r3, #2
 800dca2:	d901      	bls.n	800dca8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800dca4:	2303      	movs	r3, #3
 800dca6:	e111      	b.n	800decc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800dca8:	4b67      	ldr	r3, [pc, #412]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dcaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcac:	2202      	movs	r2, #2
 800dcae:	4013      	ands	r3, r2
 800dcb0:	d1f1      	bne.n	800dc96 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2220      	movs	r2, #32
 800dcb8:	4013      	ands	r3, r2
 800dcba:	d05c      	beq.n	800dd76 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800dcbc:	4b62      	ldr	r3, [pc, #392]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	220c      	movs	r2, #12
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	2b0c      	cmp	r3, #12
 800dcc6:	d00e      	beq.n	800dce6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800dcc8:	4b5f      	ldr	r3, [pc, #380]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	220c      	movs	r2, #12
 800dcce:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800dcd0:	2b08      	cmp	r3, #8
 800dcd2:	d114      	bne.n	800dcfe <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800dcd4:	4b5c      	ldr	r3, [pc, #368]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dcd6:	685a      	ldr	r2, [r3, #4]
 800dcd8:	23c0      	movs	r3, #192	; 0xc0
 800dcda:	025b      	lsls	r3, r3, #9
 800dcdc:	401a      	ands	r2, r3
 800dcde:	23c0      	movs	r3, #192	; 0xc0
 800dce0:	025b      	lsls	r3, r3, #9
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d10b      	bne.n	800dcfe <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800dce6:	4b58      	ldr	r3, [pc, #352]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcea:	2380      	movs	r3, #128	; 0x80
 800dcec:	025b      	lsls	r3, r3, #9
 800dcee:	4013      	ands	r3, r2
 800dcf0:	d040      	beq.n	800dd74 <HAL_RCC_OscConfig+0x5a8>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a1b      	ldr	r3, [r3, #32]
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d03c      	beq.n	800dd74 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	e0e6      	b.n	800decc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6a1b      	ldr	r3, [r3, #32]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d01b      	beq.n	800dd3e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800dd06:	4b50      	ldr	r3, [pc, #320]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dd08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd0a:	4b4f      	ldr	r3, [pc, #316]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dd0c:	2180      	movs	r1, #128	; 0x80
 800dd0e:	0249      	lsls	r1, r1, #9
 800dd10:	430a      	orrs	r2, r1
 800dd12:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd14:	f7ff fa20 	bl	800d158 <HAL_GetTick>
 800dd18:	0003      	movs	r3, r0
 800dd1a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800dd1c:	e008      	b.n	800dd30 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd1e:	f7ff fa1b 	bl	800d158 <HAL_GetTick>
 800dd22:	0002      	movs	r2, r0
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d901      	bls.n	800dd30 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800dd2c:	2303      	movs	r3, #3
 800dd2e:	e0cd      	b.n	800decc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800dd30:	4b45      	ldr	r3, [pc, #276]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dd32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd34:	2380      	movs	r3, #128	; 0x80
 800dd36:	025b      	lsls	r3, r3, #9
 800dd38:	4013      	ands	r3, r2
 800dd3a:	d0f0      	beq.n	800dd1e <HAL_RCC_OscConfig+0x552>
 800dd3c:	e01b      	b.n	800dd76 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800dd3e:	4b42      	ldr	r3, [pc, #264]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dd40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd42:	4b41      	ldr	r3, [pc, #260]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dd44:	4943      	ldr	r1, [pc, #268]	; (800de54 <HAL_RCC_OscConfig+0x688>)
 800dd46:	400a      	ands	r2, r1
 800dd48:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd4a:	f7ff fa05 	bl	800d158 <HAL_GetTick>
 800dd4e:	0003      	movs	r3, r0
 800dd50:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800dd52:	e008      	b.n	800dd66 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd54:	f7ff fa00 	bl	800d158 <HAL_GetTick>
 800dd58:	0002      	movs	r2, r0
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	1ad3      	subs	r3, r2, r3
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d901      	bls.n	800dd66 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800dd62:	2303      	movs	r3, #3
 800dd64:	e0b2      	b.n	800decc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800dd66:	4b38      	ldr	r3, [pc, #224]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dd68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd6a:	2380      	movs	r3, #128	; 0x80
 800dd6c:	025b      	lsls	r3, r3, #9
 800dd6e:	4013      	ands	r3, r2
 800dd70:	d1f0      	bne.n	800dd54 <HAL_RCC_OscConfig+0x588>
 800dd72:	e000      	b.n	800dd76 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800dd74:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d100      	bne.n	800dd80 <HAL_RCC_OscConfig+0x5b4>
 800dd7e:	e0a4      	b.n	800deca <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dd80:	4b31      	ldr	r3, [pc, #196]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	220c      	movs	r2, #12
 800dd86:	4013      	ands	r3, r2
 800dd88:	2b08      	cmp	r3, #8
 800dd8a:	d100      	bne.n	800dd8e <HAL_RCC_OscConfig+0x5c2>
 800dd8c:	e078      	b.n	800de80 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd92:	2b02      	cmp	r3, #2
 800dd94:	d14c      	bne.n	800de30 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dd96:	4b2c      	ldr	r3, [pc, #176]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	4b2b      	ldr	r3, [pc, #172]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dd9c:	492e      	ldr	r1, [pc, #184]	; (800de58 <HAL_RCC_OscConfig+0x68c>)
 800dd9e:	400a      	ands	r2, r1
 800dda0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dda2:	f7ff f9d9 	bl	800d158 <HAL_GetTick>
 800dda6:	0003      	movs	r3, r0
 800dda8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ddaa:	e008      	b.n	800ddbe <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ddac:	f7ff f9d4 	bl	800d158 <HAL_GetTick>
 800ddb0:	0002      	movs	r2, r0
 800ddb2:	69bb      	ldr	r3, [r7, #24]
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d901      	bls.n	800ddbe <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800ddba:	2303      	movs	r3, #3
 800ddbc:	e086      	b.n	800decc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ddbe:	4b22      	ldr	r3, [pc, #136]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	2380      	movs	r3, #128	; 0x80
 800ddc4:	049b      	lsls	r3, r3, #18
 800ddc6:	4013      	ands	r3, r2
 800ddc8:	d1f0      	bne.n	800ddac <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ddca:	4b1f      	ldr	r3, [pc, #124]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800ddcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddce:	220f      	movs	r2, #15
 800ddd0:	4393      	bics	r3, r2
 800ddd2:	0019      	movs	r1, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddd8:	4b1b      	ldr	r3, [pc, #108]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800ddda:	430a      	orrs	r2, r1
 800dddc:	62da      	str	r2, [r3, #44]	; 0x2c
 800ddde:	4b1a      	ldr	r3, [pc, #104]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	4a1e      	ldr	r2, [pc, #120]	; (800de5c <HAL_RCC_OscConfig+0x690>)
 800dde4:	4013      	ands	r3, r2
 800dde6:	0019      	movs	r1, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf0:	431a      	orrs	r2, r3
 800ddf2:	4b15      	ldr	r3, [pc, #84]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800ddf4:	430a      	orrs	r2, r1
 800ddf6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ddf8:	4b13      	ldr	r3, [pc, #76]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	4b12      	ldr	r3, [pc, #72]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800ddfe:	2180      	movs	r1, #128	; 0x80
 800de00:	0449      	lsls	r1, r1, #17
 800de02:	430a      	orrs	r2, r1
 800de04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de06:	f7ff f9a7 	bl	800d158 <HAL_GetTick>
 800de0a:	0003      	movs	r3, r0
 800de0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800de0e:	e008      	b.n	800de22 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800de10:	f7ff f9a2 	bl	800d158 <HAL_GetTick>
 800de14:	0002      	movs	r2, r0
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	1ad3      	subs	r3, r2, r3
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d901      	bls.n	800de22 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800de1e:	2303      	movs	r3, #3
 800de20:	e054      	b.n	800decc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800de22:	4b09      	ldr	r3, [pc, #36]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	2380      	movs	r3, #128	; 0x80
 800de28:	049b      	lsls	r3, r3, #18
 800de2a:	4013      	ands	r3, r2
 800de2c:	d0f0      	beq.n	800de10 <HAL_RCC_OscConfig+0x644>
 800de2e:	e04c      	b.n	800deca <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800de30:	4b05      	ldr	r3, [pc, #20]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	4b04      	ldr	r3, [pc, #16]	; (800de48 <HAL_RCC_OscConfig+0x67c>)
 800de36:	4908      	ldr	r1, [pc, #32]	; (800de58 <HAL_RCC_OscConfig+0x68c>)
 800de38:	400a      	ands	r2, r1
 800de3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800de3c:	f7ff f98c 	bl	800d158 <HAL_GetTick>
 800de40:	0003      	movs	r3, r0
 800de42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800de44:	e015      	b.n	800de72 <HAL_RCC_OscConfig+0x6a6>
 800de46:	46c0      	nop			; (mov r8, r8)
 800de48:	40021000 	.word	0x40021000
 800de4c:	00001388 	.word	0x00001388
 800de50:	efffffff 	.word	0xefffffff
 800de54:	fffeffff 	.word	0xfffeffff
 800de58:	feffffff 	.word	0xfeffffff
 800de5c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800de60:	f7ff f97a 	bl	800d158 <HAL_GetTick>
 800de64:	0002      	movs	r2, r0
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	2b02      	cmp	r3, #2
 800de6c:	d901      	bls.n	800de72 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800de6e:	2303      	movs	r3, #3
 800de70:	e02c      	b.n	800decc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800de72:	4b18      	ldr	r3, [pc, #96]	; (800ded4 <HAL_RCC_OscConfig+0x708>)
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	2380      	movs	r3, #128	; 0x80
 800de78:	049b      	lsls	r3, r3, #18
 800de7a:	4013      	ands	r3, r2
 800de7c:	d1f0      	bne.n	800de60 <HAL_RCC_OscConfig+0x694>
 800de7e:	e024      	b.n	800deca <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de84:	2b01      	cmp	r3, #1
 800de86:	d101      	bne.n	800de8c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800de88:	2301      	movs	r3, #1
 800de8a:	e01f      	b.n	800decc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800de8c:	4b11      	ldr	r3, [pc, #68]	; (800ded4 <HAL_RCC_OscConfig+0x708>)
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800de92:	4b10      	ldr	r3, [pc, #64]	; (800ded4 <HAL_RCC_OscConfig+0x708>)
 800de94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de96:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	23c0      	movs	r3, #192	; 0xc0
 800de9c:	025b      	lsls	r3, r3, #9
 800de9e:	401a      	ands	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d10e      	bne.n	800dec6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	220f      	movs	r2, #15
 800deac:	401a      	ands	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d107      	bne.n	800dec6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	23f0      	movs	r3, #240	; 0xf0
 800deba:	039b      	lsls	r3, r3, #14
 800debc:	401a      	ands	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d001      	beq.n	800deca <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e000      	b.n	800decc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	0018      	movs	r0, r3
 800dece:	46bd      	mov	sp, r7
 800ded0:	b008      	add	sp, #32
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	40021000 	.word	0x40021000

0800ded8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d101      	bne.n	800deec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dee8:	2301      	movs	r3, #1
 800deea:	e0bf      	b.n	800e06c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800deec:	4b61      	ldr	r3, [pc, #388]	; (800e074 <HAL_RCC_ClockConfig+0x19c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2201      	movs	r2, #1
 800def2:	4013      	ands	r3, r2
 800def4:	683a      	ldr	r2, [r7, #0]
 800def6:	429a      	cmp	r2, r3
 800def8:	d911      	bls.n	800df1e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800defa:	4b5e      	ldr	r3, [pc, #376]	; (800e074 <HAL_RCC_ClockConfig+0x19c>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2201      	movs	r2, #1
 800df00:	4393      	bics	r3, r2
 800df02:	0019      	movs	r1, r3
 800df04:	4b5b      	ldr	r3, [pc, #364]	; (800e074 <HAL_RCC_ClockConfig+0x19c>)
 800df06:	683a      	ldr	r2, [r7, #0]
 800df08:	430a      	orrs	r2, r1
 800df0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df0c:	4b59      	ldr	r3, [pc, #356]	; (800e074 <HAL_RCC_ClockConfig+0x19c>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2201      	movs	r2, #1
 800df12:	4013      	ands	r3, r2
 800df14:	683a      	ldr	r2, [r7, #0]
 800df16:	429a      	cmp	r2, r3
 800df18:	d001      	beq.n	800df1e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800df1a:	2301      	movs	r3, #1
 800df1c:	e0a6      	b.n	800e06c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2202      	movs	r2, #2
 800df24:	4013      	ands	r3, r2
 800df26:	d015      	beq.n	800df54 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2204      	movs	r2, #4
 800df2e:	4013      	ands	r3, r2
 800df30:	d006      	beq.n	800df40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800df32:	4b51      	ldr	r3, [pc, #324]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800df34:	685a      	ldr	r2, [r3, #4]
 800df36:	4b50      	ldr	r3, [pc, #320]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800df38:	21e0      	movs	r1, #224	; 0xe0
 800df3a:	00c9      	lsls	r1, r1, #3
 800df3c:	430a      	orrs	r2, r1
 800df3e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df40:	4b4d      	ldr	r3, [pc, #308]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	22f0      	movs	r2, #240	; 0xf0
 800df46:	4393      	bics	r3, r2
 800df48:	0019      	movs	r1, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	689a      	ldr	r2, [r3, #8]
 800df4e:	4b4a      	ldr	r3, [pc, #296]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800df50:	430a      	orrs	r2, r1
 800df52:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2201      	movs	r2, #1
 800df5a:	4013      	ands	r3, r2
 800df5c:	d04c      	beq.n	800dff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	2b01      	cmp	r3, #1
 800df64:	d107      	bne.n	800df76 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800df66:	4b44      	ldr	r3, [pc, #272]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	2380      	movs	r3, #128	; 0x80
 800df6c:	029b      	lsls	r3, r3, #10
 800df6e:	4013      	ands	r3, r2
 800df70:	d120      	bne.n	800dfb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800df72:	2301      	movs	r3, #1
 800df74:	e07a      	b.n	800e06c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	d107      	bne.n	800df8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800df7e:	4b3e      	ldr	r3, [pc, #248]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	2380      	movs	r3, #128	; 0x80
 800df84:	049b      	lsls	r3, r3, #18
 800df86:	4013      	ands	r3, r2
 800df88:	d114      	bne.n	800dfb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800df8a:	2301      	movs	r3, #1
 800df8c:	e06e      	b.n	800e06c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	2b03      	cmp	r3, #3
 800df94:	d107      	bne.n	800dfa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800df96:	4b38      	ldr	r3, [pc, #224]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800df98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df9a:	2380      	movs	r3, #128	; 0x80
 800df9c:	025b      	lsls	r3, r3, #9
 800df9e:	4013      	ands	r3, r2
 800dfa0:	d108      	bne.n	800dfb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e062      	b.n	800e06c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dfa6:	4b34      	ldr	r3, [pc, #208]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2202      	movs	r2, #2
 800dfac:	4013      	ands	r3, r2
 800dfae:	d101      	bne.n	800dfb4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e05b      	b.n	800e06c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dfb4:	4b30      	ldr	r3, [pc, #192]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	2203      	movs	r2, #3
 800dfba:	4393      	bics	r3, r2
 800dfbc:	0019      	movs	r1, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	685a      	ldr	r2, [r3, #4]
 800dfc2:	4b2d      	ldr	r3, [pc, #180]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800dfc4:	430a      	orrs	r2, r1
 800dfc6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dfc8:	f7ff f8c6 	bl	800d158 <HAL_GetTick>
 800dfcc:	0003      	movs	r3, r0
 800dfce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dfd0:	e009      	b.n	800dfe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dfd2:	f7ff f8c1 	bl	800d158 <HAL_GetTick>
 800dfd6:	0002      	movs	r2, r0
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	1ad3      	subs	r3, r2, r3
 800dfdc:	4a27      	ldr	r2, [pc, #156]	; (800e07c <HAL_RCC_ClockConfig+0x1a4>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d901      	bls.n	800dfe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dfe2:	2303      	movs	r3, #3
 800dfe4:	e042      	b.n	800e06c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dfe6:	4b24      	ldr	r3, [pc, #144]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	220c      	movs	r2, #12
 800dfec:	401a      	ands	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d1ec      	bne.n	800dfd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dff8:	4b1e      	ldr	r3, [pc, #120]	; (800e074 <HAL_RCC_ClockConfig+0x19c>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2201      	movs	r2, #1
 800dffe:	4013      	ands	r3, r2
 800e000:	683a      	ldr	r2, [r7, #0]
 800e002:	429a      	cmp	r2, r3
 800e004:	d211      	bcs.n	800e02a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e006:	4b1b      	ldr	r3, [pc, #108]	; (800e074 <HAL_RCC_ClockConfig+0x19c>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2201      	movs	r2, #1
 800e00c:	4393      	bics	r3, r2
 800e00e:	0019      	movs	r1, r3
 800e010:	4b18      	ldr	r3, [pc, #96]	; (800e074 <HAL_RCC_ClockConfig+0x19c>)
 800e012:	683a      	ldr	r2, [r7, #0]
 800e014:	430a      	orrs	r2, r1
 800e016:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e018:	4b16      	ldr	r3, [pc, #88]	; (800e074 <HAL_RCC_ClockConfig+0x19c>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2201      	movs	r2, #1
 800e01e:	4013      	ands	r3, r2
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	429a      	cmp	r2, r3
 800e024:	d001      	beq.n	800e02a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800e026:	2301      	movs	r3, #1
 800e028:	e020      	b.n	800e06c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2204      	movs	r2, #4
 800e030:	4013      	ands	r3, r2
 800e032:	d009      	beq.n	800e048 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800e034:	4b10      	ldr	r3, [pc, #64]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	4a11      	ldr	r2, [pc, #68]	; (800e080 <HAL_RCC_ClockConfig+0x1a8>)
 800e03a:	4013      	ands	r3, r2
 800e03c:	0019      	movs	r1, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	68da      	ldr	r2, [r3, #12]
 800e042:	4b0d      	ldr	r3, [pc, #52]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800e044:	430a      	orrs	r2, r1
 800e046:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800e048:	f000 f820 	bl	800e08c <HAL_RCC_GetSysClockFreq>
 800e04c:	0001      	movs	r1, r0
 800e04e:	4b0a      	ldr	r3, [pc, #40]	; (800e078 <HAL_RCC_ClockConfig+0x1a0>)
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	091b      	lsrs	r3, r3, #4
 800e054:	220f      	movs	r2, #15
 800e056:	4013      	ands	r3, r2
 800e058:	4a0a      	ldr	r2, [pc, #40]	; (800e084 <HAL_RCC_ClockConfig+0x1ac>)
 800e05a:	5cd3      	ldrb	r3, [r2, r3]
 800e05c:	000a      	movs	r2, r1
 800e05e:	40da      	lsrs	r2, r3
 800e060:	4b09      	ldr	r3, [pc, #36]	; (800e088 <HAL_RCC_ClockConfig+0x1b0>)
 800e062:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800e064:	2003      	movs	r0, #3
 800e066:	f7ff f831 	bl	800d0cc <HAL_InitTick>
  
  return HAL_OK;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	0018      	movs	r0, r3
 800e06e:	46bd      	mov	sp, r7
 800e070:	b004      	add	sp, #16
 800e072:	bd80      	pop	{r7, pc}
 800e074:	40022000 	.word	0x40022000
 800e078:	40021000 	.word	0x40021000
 800e07c:	00001388 	.word	0x00001388
 800e080:	fffff8ff 	.word	0xfffff8ff
 800e084:	080132c4 	.word	0x080132c4
 800e088:	200000d4 	.word	0x200000d4

0800e08c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e08c:	b590      	push	{r4, r7, lr}
 800e08e:	b08f      	sub	sp, #60	; 0x3c
 800e090:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800e092:	2314      	movs	r3, #20
 800e094:	18fb      	adds	r3, r7, r3
 800e096:	4a38      	ldr	r2, [pc, #224]	; (800e178 <HAL_RCC_GetSysClockFreq+0xec>)
 800e098:	ca13      	ldmia	r2!, {r0, r1, r4}
 800e09a:	c313      	stmia	r3!, {r0, r1, r4}
 800e09c:	6812      	ldr	r2, [r2, #0]
 800e09e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800e0a0:	1d3b      	adds	r3, r7, #4
 800e0a2:	4a36      	ldr	r2, [pc, #216]	; (800e17c <HAL_RCC_GetSysClockFreq+0xf0>)
 800e0a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 800e0a6:	c313      	stmia	r3!, {r0, r1, r4}
 800e0a8:	6812      	ldr	r2, [r2, #0]
 800e0aa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800e0c0:	4b2f      	ldr	r3, [pc, #188]	; (800e180 <HAL_RCC_GetSysClockFreq+0xf4>)
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800e0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c8:	220c      	movs	r2, #12
 800e0ca:	4013      	ands	r3, r2
 800e0cc:	2b0c      	cmp	r3, #12
 800e0ce:	d047      	beq.n	800e160 <HAL_RCC_GetSysClockFreq+0xd4>
 800e0d0:	d849      	bhi.n	800e166 <HAL_RCC_GetSysClockFreq+0xda>
 800e0d2:	2b04      	cmp	r3, #4
 800e0d4:	d002      	beq.n	800e0dc <HAL_RCC_GetSysClockFreq+0x50>
 800e0d6:	2b08      	cmp	r3, #8
 800e0d8:	d003      	beq.n	800e0e2 <HAL_RCC_GetSysClockFreq+0x56>
 800e0da:	e044      	b.n	800e166 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800e0dc:	4b29      	ldr	r3, [pc, #164]	; (800e184 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e0de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e0e0:	e044      	b.n	800e16c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800e0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e4:	0c9b      	lsrs	r3, r3, #18
 800e0e6:	220f      	movs	r2, #15
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	2214      	movs	r2, #20
 800e0ec:	18ba      	adds	r2, r7, r2
 800e0ee:	5cd3      	ldrb	r3, [r2, r3]
 800e0f0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800e0f2:	4b23      	ldr	r3, [pc, #140]	; (800e180 <HAL_RCC_GetSysClockFreq+0xf4>)
 800e0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f6:	220f      	movs	r2, #15
 800e0f8:	4013      	ands	r3, r2
 800e0fa:	1d3a      	adds	r2, r7, #4
 800e0fc:	5cd3      	ldrb	r3, [r2, r3]
 800e0fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800e100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e102:	23c0      	movs	r3, #192	; 0xc0
 800e104:	025b      	lsls	r3, r3, #9
 800e106:	401a      	ands	r2, r3
 800e108:	2380      	movs	r3, #128	; 0x80
 800e10a:	025b      	lsls	r3, r3, #9
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d109      	bne.n	800e124 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800e110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e112:	481c      	ldr	r0, [pc, #112]	; (800e184 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e114:	f7fb f814 	bl	8009140 <__udivsi3>
 800e118:	0003      	movs	r3, r0
 800e11a:	001a      	movs	r2, r3
 800e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11e:	4353      	muls	r3, r2
 800e120:	637b      	str	r3, [r7, #52]	; 0x34
 800e122:	e01a      	b.n	800e15a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800e124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e126:	23c0      	movs	r3, #192	; 0xc0
 800e128:	025b      	lsls	r3, r3, #9
 800e12a:	401a      	ands	r2, r3
 800e12c:	23c0      	movs	r3, #192	; 0xc0
 800e12e:	025b      	lsls	r3, r3, #9
 800e130:	429a      	cmp	r2, r3
 800e132:	d109      	bne.n	800e148 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800e134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e136:	4814      	ldr	r0, [pc, #80]	; (800e188 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e138:	f7fb f802 	bl	8009140 <__udivsi3>
 800e13c:	0003      	movs	r3, r0
 800e13e:	001a      	movs	r2, r3
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e142:	4353      	muls	r3, r2
 800e144:	637b      	str	r3, [r7, #52]	; 0x34
 800e146:	e008      	b.n	800e15a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800e148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e14a:	480e      	ldr	r0, [pc, #56]	; (800e184 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e14c:	f7fa fff8 	bl	8009140 <__udivsi3>
 800e150:	0003      	movs	r3, r0
 800e152:	001a      	movs	r2, r3
 800e154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e156:	4353      	muls	r3, r2
 800e158:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800e15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e15c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e15e:	e005      	b.n	800e16c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800e160:	4b09      	ldr	r3, [pc, #36]	; (800e188 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e162:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e164:	e002      	b.n	800e16c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800e166:	4b07      	ldr	r3, [pc, #28]	; (800e184 <HAL_RCC_GetSysClockFreq+0xf8>)
 800e168:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800e16a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800e16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800e16e:	0018      	movs	r0, r3
 800e170:	46bd      	mov	sp, r7
 800e172:	b00f      	add	sp, #60	; 0x3c
 800e174:	bd90      	pop	{r4, r7, pc}
 800e176:	46c0      	nop			; (mov r8, r8)
 800e178:	080131c0 	.word	0x080131c0
 800e17c:	080131d0 	.word	0x080131d0
 800e180:	40021000 	.word	0x40021000
 800e184:	007a1200 	.word	0x007a1200
 800e188:	02dc6c00 	.word	0x02dc6c00

0800e18c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e190:	4b02      	ldr	r3, [pc, #8]	; (800e19c <HAL_RCC_GetHCLKFreq+0x10>)
 800e192:	681b      	ldr	r3, [r3, #0]
}
 800e194:	0018      	movs	r0, r3
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	46c0      	nop			; (mov r8, r8)
 800e19c:	200000d4 	.word	0x200000d4

0800e1a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800e1a4:	f7ff fff2 	bl	800e18c <HAL_RCC_GetHCLKFreq>
 800e1a8:	0001      	movs	r1, r0
 800e1aa:	4b06      	ldr	r3, [pc, #24]	; (800e1c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	0a1b      	lsrs	r3, r3, #8
 800e1b0:	2207      	movs	r2, #7
 800e1b2:	4013      	ands	r3, r2
 800e1b4:	4a04      	ldr	r2, [pc, #16]	; (800e1c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e1b6:	5cd3      	ldrb	r3, [r2, r3]
 800e1b8:	40d9      	lsrs	r1, r3
 800e1ba:	000b      	movs	r3, r1
}    
 800e1bc:	0018      	movs	r0, r3
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	46c0      	nop			; (mov r8, r8)
 800e1c4:	40021000 	.word	0x40021000
 800e1c8:	080132d4 	.word	0x080132d4

0800e1cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b086      	sub	sp, #24
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	2380      	movs	r3, #128	; 0x80
 800e1e2:	025b      	lsls	r3, r3, #9
 800e1e4:	4013      	ands	r3, r2
 800e1e6:	d100      	bne.n	800e1ea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800e1e8:	e08e      	b.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800e1ea:	2017      	movs	r0, #23
 800e1ec:	183b      	adds	r3, r7, r0
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e1f2:	4b6e      	ldr	r3, [pc, #440]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e1f4:	69da      	ldr	r2, [r3, #28]
 800e1f6:	2380      	movs	r3, #128	; 0x80
 800e1f8:	055b      	lsls	r3, r3, #21
 800e1fa:	4013      	ands	r3, r2
 800e1fc:	d110      	bne.n	800e220 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800e1fe:	4b6b      	ldr	r3, [pc, #428]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e200:	69da      	ldr	r2, [r3, #28]
 800e202:	4b6a      	ldr	r3, [pc, #424]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e204:	2180      	movs	r1, #128	; 0x80
 800e206:	0549      	lsls	r1, r1, #21
 800e208:	430a      	orrs	r2, r1
 800e20a:	61da      	str	r2, [r3, #28]
 800e20c:	4b67      	ldr	r3, [pc, #412]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e20e:	69da      	ldr	r2, [r3, #28]
 800e210:	2380      	movs	r3, #128	; 0x80
 800e212:	055b      	lsls	r3, r3, #21
 800e214:	4013      	ands	r3, r2
 800e216:	60bb      	str	r3, [r7, #8]
 800e218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e21a:	183b      	adds	r3, r7, r0
 800e21c:	2201      	movs	r2, #1
 800e21e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e220:	4b63      	ldr	r3, [pc, #396]	; (800e3b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	2380      	movs	r3, #128	; 0x80
 800e226:	005b      	lsls	r3, r3, #1
 800e228:	4013      	ands	r3, r2
 800e22a:	d11a      	bne.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e22c:	4b60      	ldr	r3, [pc, #384]	; (800e3b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800e22e:	681a      	ldr	r2, [r3, #0]
 800e230:	4b5f      	ldr	r3, [pc, #380]	; (800e3b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800e232:	2180      	movs	r1, #128	; 0x80
 800e234:	0049      	lsls	r1, r1, #1
 800e236:	430a      	orrs	r2, r1
 800e238:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e23a:	f7fe ff8d 	bl	800d158 <HAL_GetTick>
 800e23e:	0003      	movs	r3, r0
 800e240:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e242:	e008      	b.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e244:	f7fe ff88 	bl	800d158 <HAL_GetTick>
 800e248:	0002      	movs	r2, r0
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	2b64      	cmp	r3, #100	; 0x64
 800e250:	d901      	bls.n	800e256 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800e252:	2303      	movs	r3, #3
 800e254:	e0a6      	b.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e256:	4b56      	ldr	r3, [pc, #344]	; (800e3b0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	2380      	movs	r3, #128	; 0x80
 800e25c:	005b      	lsls	r3, r3, #1
 800e25e:	4013      	ands	r3, r2
 800e260:	d0f0      	beq.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e262:	4b52      	ldr	r3, [pc, #328]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e264:	6a1a      	ldr	r2, [r3, #32]
 800e266:	23c0      	movs	r3, #192	; 0xc0
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4013      	ands	r3, r2
 800e26c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d034      	beq.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x112>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685a      	ldr	r2, [r3, #4]
 800e278:	23c0      	movs	r3, #192	; 0xc0
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4013      	ands	r3, r2
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	429a      	cmp	r2, r3
 800e282:	d02c      	beq.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e284:	4b49      	ldr	r3, [pc, #292]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e286:	6a1b      	ldr	r3, [r3, #32]
 800e288:	4a4a      	ldr	r2, [pc, #296]	; (800e3b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800e28a:	4013      	ands	r3, r2
 800e28c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e28e:	4b47      	ldr	r3, [pc, #284]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e290:	6a1a      	ldr	r2, [r3, #32]
 800e292:	4b46      	ldr	r3, [pc, #280]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e294:	2180      	movs	r1, #128	; 0x80
 800e296:	0249      	lsls	r1, r1, #9
 800e298:	430a      	orrs	r2, r1
 800e29a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e29c:	4b43      	ldr	r3, [pc, #268]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e29e:	6a1a      	ldr	r2, [r3, #32]
 800e2a0:	4b42      	ldr	r3, [pc, #264]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e2a2:	4945      	ldr	r1, [pc, #276]	; (800e3b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800e2a4:	400a      	ands	r2, r1
 800e2a6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800e2a8:	4b40      	ldr	r3, [pc, #256]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	4013      	ands	r3, r2
 800e2b4:	d013      	beq.n	800e2de <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e2b6:	f7fe ff4f 	bl	800d158 <HAL_GetTick>
 800e2ba:	0003      	movs	r3, r0
 800e2bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2be:	e009      	b.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e2c0:	f7fe ff4a 	bl	800d158 <HAL_GetTick>
 800e2c4:	0002      	movs	r2, r0
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	1ad3      	subs	r3, r2, r3
 800e2ca:	4a3c      	ldr	r2, [pc, #240]	; (800e3bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d901      	bls.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	e067      	b.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e2d4:	4b35      	ldr	r3, [pc, #212]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	2202      	movs	r2, #2
 800e2da:	4013      	ands	r3, r2
 800e2dc:	d0f0      	beq.n	800e2c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e2de:	4b33      	ldr	r3, [pc, #204]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e2e0:	6a1b      	ldr	r3, [r3, #32]
 800e2e2:	4a34      	ldr	r2, [pc, #208]	; (800e3b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	0019      	movs	r1, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	685a      	ldr	r2, [r3, #4]
 800e2ec:	4b2f      	ldr	r3, [pc, #188]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e2ee:	430a      	orrs	r2, r1
 800e2f0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800e2f2:	2317      	movs	r3, #23
 800e2f4:	18fb      	adds	r3, r7, r3
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d105      	bne.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e2fc:	4b2b      	ldr	r3, [pc, #172]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e2fe:	69da      	ldr	r2, [r3, #28]
 800e300:	4b2a      	ldr	r3, [pc, #168]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e302:	492f      	ldr	r1, [pc, #188]	; (800e3c0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800e304:	400a      	ands	r2, r1
 800e306:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2201      	movs	r2, #1
 800e30e:	4013      	ands	r3, r2
 800e310:	d009      	beq.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e312:	4b26      	ldr	r3, [pc, #152]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e316:	2203      	movs	r2, #3
 800e318:	4393      	bics	r3, r2
 800e31a:	0019      	movs	r1, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	689a      	ldr	r2, [r3, #8]
 800e320:	4b22      	ldr	r3, [pc, #136]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e322:	430a      	orrs	r2, r1
 800e324:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2202      	movs	r2, #2
 800e32c:	4013      	ands	r3, r2
 800e32e:	d009      	beq.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e330:	4b1e      	ldr	r3, [pc, #120]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e334:	4a23      	ldr	r2, [pc, #140]	; (800e3c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800e336:	4013      	ands	r3, r2
 800e338:	0019      	movs	r1, r3
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	68da      	ldr	r2, [r3, #12]
 800e33e:	4b1b      	ldr	r3, [pc, #108]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e340:	430a      	orrs	r2, r1
 800e342:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2220      	movs	r2, #32
 800e34a:	4013      	ands	r3, r2
 800e34c:	d009      	beq.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e34e:	4b17      	ldr	r3, [pc, #92]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e352:	2210      	movs	r2, #16
 800e354:	4393      	bics	r3, r2
 800e356:	0019      	movs	r1, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	691a      	ldr	r2, [r3, #16]
 800e35c:	4b13      	ldr	r3, [pc, #76]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e35e:	430a      	orrs	r2, r1
 800e360:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	2380      	movs	r3, #128	; 0x80
 800e368:	029b      	lsls	r3, r3, #10
 800e36a:	4013      	ands	r3, r2
 800e36c:	d009      	beq.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e36e:	4b0f      	ldr	r3, [pc, #60]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e372:	2280      	movs	r2, #128	; 0x80
 800e374:	4393      	bics	r3, r2
 800e376:	0019      	movs	r1, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	699a      	ldr	r2, [r3, #24]
 800e37c:	4b0b      	ldr	r3, [pc, #44]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e37e:	430a      	orrs	r2, r1
 800e380:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	2380      	movs	r3, #128	; 0x80
 800e388:	00db      	lsls	r3, r3, #3
 800e38a:	4013      	ands	r3, r2
 800e38c:	d009      	beq.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e38e:	4b07      	ldr	r3, [pc, #28]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e392:	2240      	movs	r2, #64	; 0x40
 800e394:	4393      	bics	r3, r2
 800e396:	0019      	movs	r1, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	695a      	ldr	r2, [r3, #20]
 800e39c:	4b03      	ldr	r3, [pc, #12]	; (800e3ac <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800e39e:	430a      	orrs	r2, r1
 800e3a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	0018      	movs	r0, r3
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	b006      	add	sp, #24
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	40021000 	.word	0x40021000
 800e3b0:	40007000 	.word	0x40007000
 800e3b4:	fffffcff 	.word	0xfffffcff
 800e3b8:	fffeffff 	.word	0xfffeffff
 800e3bc:	00001388 	.word	0x00001388
 800e3c0:	efffffff 	.word	0xefffffff
 800e3c4:	fffcffff 	.word	0xfffcffff

0800e3c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d101      	bne.n	800e3da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	e0a8      	b.n	800e52c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d109      	bne.n	800e3f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	685a      	ldr	r2, [r3, #4]
 800e3e6:	2382      	movs	r3, #130	; 0x82
 800e3e8:	005b      	lsls	r3, r3, #1
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d009      	beq.n	800e402 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	61da      	str	r2, [r3, #28]
 800e3f4:	e005      	b.n	800e402 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2200      	movs	r2, #0
 800e400:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	225d      	movs	r2, #93	; 0x5d
 800e40c:	5c9b      	ldrb	r3, [r3, r2]
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	2b00      	cmp	r3, #0
 800e412:	d107      	bne.n	800e424 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	225c      	movs	r2, #92	; 0x5c
 800e418:	2100      	movs	r1, #0
 800e41a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	0018      	movs	r0, r3
 800e420:	f7fe fcc4 	bl	800cdac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	225d      	movs	r2, #93	; 0x5d
 800e428:	2102      	movs	r1, #2
 800e42a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2140      	movs	r1, #64	; 0x40
 800e438:	438a      	bics	r2, r1
 800e43a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	68da      	ldr	r2, [r3, #12]
 800e440:	23e0      	movs	r3, #224	; 0xe0
 800e442:	00db      	lsls	r3, r3, #3
 800e444:	429a      	cmp	r2, r3
 800e446:	d902      	bls.n	800e44e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e448:	2300      	movs	r3, #0
 800e44a:	60fb      	str	r3, [r7, #12]
 800e44c:	e002      	b.n	800e454 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e44e:	2380      	movs	r3, #128	; 0x80
 800e450:	015b      	lsls	r3, r3, #5
 800e452:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	68da      	ldr	r2, [r3, #12]
 800e458:	23f0      	movs	r3, #240	; 0xf0
 800e45a:	011b      	lsls	r3, r3, #4
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d008      	beq.n	800e472 <HAL_SPI_Init+0xaa>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	68da      	ldr	r2, [r3, #12]
 800e464:	23e0      	movs	r3, #224	; 0xe0
 800e466:	00db      	lsls	r3, r3, #3
 800e468:	429a      	cmp	r2, r3
 800e46a:	d002      	beq.n	800e472 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	685a      	ldr	r2, [r3, #4]
 800e476:	2382      	movs	r3, #130	; 0x82
 800e478:	005b      	lsls	r3, r3, #1
 800e47a:	401a      	ands	r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6899      	ldr	r1, [r3, #8]
 800e480:	2384      	movs	r3, #132	; 0x84
 800e482:	021b      	lsls	r3, r3, #8
 800e484:	400b      	ands	r3, r1
 800e486:	431a      	orrs	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	2102      	movs	r1, #2
 800e48e:	400b      	ands	r3, r1
 800e490:	431a      	orrs	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	695b      	ldr	r3, [r3, #20]
 800e496:	2101      	movs	r1, #1
 800e498:	400b      	ands	r3, r1
 800e49a:	431a      	orrs	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6999      	ldr	r1, [r3, #24]
 800e4a0:	2380      	movs	r3, #128	; 0x80
 800e4a2:	009b      	lsls	r3, r3, #2
 800e4a4:	400b      	ands	r3, r1
 800e4a6:	431a      	orrs	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	69db      	ldr	r3, [r3, #28]
 800e4ac:	2138      	movs	r1, #56	; 0x38
 800e4ae:	400b      	ands	r3, r1
 800e4b0:	431a      	orrs	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6a1b      	ldr	r3, [r3, #32]
 800e4b6:	2180      	movs	r1, #128	; 0x80
 800e4b8:	400b      	ands	r3, r1
 800e4ba:	431a      	orrs	r2, r3
 800e4bc:	0011      	movs	r1, r2
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4c2:	2380      	movs	r3, #128	; 0x80
 800e4c4:	019b      	lsls	r3, r3, #6
 800e4c6:	401a      	ands	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	430a      	orrs	r2, r1
 800e4ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	699b      	ldr	r3, [r3, #24]
 800e4d4:	0c1b      	lsrs	r3, r3, #16
 800e4d6:	2204      	movs	r2, #4
 800e4d8:	401a      	ands	r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4de:	2110      	movs	r1, #16
 800e4e0:	400b      	ands	r3, r1
 800e4e2:	431a      	orrs	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e8:	2108      	movs	r1, #8
 800e4ea:	400b      	ands	r3, r1
 800e4ec:	431a      	orrs	r2, r3
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68d9      	ldr	r1, [r3, #12]
 800e4f2:	23f0      	movs	r3, #240	; 0xf0
 800e4f4:	011b      	lsls	r3, r3, #4
 800e4f6:	400b      	ands	r3, r1
 800e4f8:	431a      	orrs	r2, r3
 800e4fa:	0011      	movs	r1, r2
 800e4fc:	68fa      	ldr	r2, [r7, #12]
 800e4fe:	2380      	movs	r3, #128	; 0x80
 800e500:	015b      	lsls	r3, r3, #5
 800e502:	401a      	ands	r2, r3
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	430a      	orrs	r2, r1
 800e50a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	69da      	ldr	r2, [r3, #28]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4907      	ldr	r1, [pc, #28]	; (800e534 <HAL_SPI_Init+0x16c>)
 800e518:	400a      	ands	r2, r1
 800e51a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2200      	movs	r2, #0
 800e520:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	225d      	movs	r2, #93	; 0x5d
 800e526:	2101      	movs	r1, #1
 800e528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e52a:	2300      	movs	r3, #0
}
 800e52c:	0018      	movs	r0, r3
 800e52e:	46bd      	mov	sp, r7
 800e530:	b004      	add	sp, #16
 800e532:	bd80      	pop	{r7, pc}
 800e534:	fffff7ff 	.word	0xfffff7ff

0800e538 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b088      	sub	sp, #32
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	603b      	str	r3, [r7, #0]
 800e544:	1dbb      	adds	r3, r7, #6
 800e546:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e548:	231f      	movs	r3, #31
 800e54a:	18fb      	adds	r3, r7, r3
 800e54c:	2200      	movs	r2, #0
 800e54e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	225c      	movs	r2, #92	; 0x5c
 800e554:	5c9b      	ldrb	r3, [r3, r2]
 800e556:	2b01      	cmp	r3, #1
 800e558:	d101      	bne.n	800e55e <HAL_SPI_Transmit+0x26>
 800e55a:	2302      	movs	r3, #2
 800e55c:	e140      	b.n	800e7e0 <HAL_SPI_Transmit+0x2a8>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	225c      	movs	r2, #92	; 0x5c
 800e562:	2101      	movs	r1, #1
 800e564:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e566:	f7fe fdf7 	bl	800d158 <HAL_GetTick>
 800e56a:	0003      	movs	r3, r0
 800e56c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e56e:	2316      	movs	r3, #22
 800e570:	18fb      	adds	r3, r7, r3
 800e572:	1dba      	adds	r2, r7, #6
 800e574:	8812      	ldrh	r2, [r2, #0]
 800e576:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	225d      	movs	r2, #93	; 0x5d
 800e57c:	5c9b      	ldrb	r3, [r3, r2]
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	2b01      	cmp	r3, #1
 800e582:	d004      	beq.n	800e58e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800e584:	231f      	movs	r3, #31
 800e586:	18fb      	adds	r3, r7, r3
 800e588:	2202      	movs	r2, #2
 800e58a:	701a      	strb	r2, [r3, #0]
    goto error;
 800e58c:	e11d      	b.n	800e7ca <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d003      	beq.n	800e59c <HAL_SPI_Transmit+0x64>
 800e594:	1dbb      	adds	r3, r7, #6
 800e596:	881b      	ldrh	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d104      	bne.n	800e5a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800e59c:	231f      	movs	r3, #31
 800e59e:	18fb      	adds	r3, r7, r3
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	701a      	strb	r2, [r3, #0]
    goto error;
 800e5a4:	e111      	b.n	800e7ca <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	225d      	movs	r2, #93	; 0x5d
 800e5aa:	2103      	movs	r1, #3
 800e5ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	68ba      	ldr	r2, [r7, #8]
 800e5b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	1dba      	adds	r2, r7, #6
 800e5be:	8812      	ldrh	r2, [r2, #0]
 800e5c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	1dba      	adds	r2, r7, #6
 800e5c6:	8812      	ldrh	r2, [r2, #0]
 800e5c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2244      	movs	r2, #68	; 0x44
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2246      	movs	r2, #70	; 0x46
 800e5dc:	2100      	movs	r1, #0
 800e5de:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	689a      	ldr	r2, [r3, #8]
 800e5f0:	2380      	movs	r3, #128	; 0x80
 800e5f2:	021b      	lsls	r3, r3, #8
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d110      	bne.n	800e61a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2140      	movs	r1, #64	; 0x40
 800e604:	438a      	bics	r2, r1
 800e606:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2180      	movs	r1, #128	; 0x80
 800e614:	01c9      	lsls	r1, r1, #7
 800e616:	430a      	orrs	r2, r1
 800e618:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2240      	movs	r2, #64	; 0x40
 800e622:	4013      	ands	r3, r2
 800e624:	2b40      	cmp	r3, #64	; 0x40
 800e626:	d007      	beq.n	800e638 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2140      	movs	r1, #64	; 0x40
 800e634:	430a      	orrs	r2, r1
 800e636:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	68da      	ldr	r2, [r3, #12]
 800e63c:	23e0      	movs	r3, #224	; 0xe0
 800e63e:	00db      	lsls	r3, r3, #3
 800e640:	429a      	cmp	r2, r3
 800e642:	d94e      	bls.n	800e6e2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d004      	beq.n	800e656 <HAL_SPI_Transmit+0x11e>
 800e64c:	2316      	movs	r3, #22
 800e64e:	18fb      	adds	r3, r7, r3
 800e650:	881b      	ldrh	r3, [r3, #0]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d13f      	bne.n	800e6d6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e65a:	881a      	ldrh	r2, [r3, #0]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e666:	1c9a      	adds	r2, r3, #2
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e670:	b29b      	uxth	r3, r3
 800e672:	3b01      	subs	r3, #1
 800e674:	b29a      	uxth	r2, r3
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e67a:	e02c      	b.n	800e6d6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	2202      	movs	r2, #2
 800e684:	4013      	ands	r3, r2
 800e686:	2b02      	cmp	r3, #2
 800e688:	d112      	bne.n	800e6b0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e68e:	881a      	ldrh	r2, [r3, #0]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e69a:	1c9a      	adds	r2, r3, #2
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	3b01      	subs	r3, #1
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e6ae:	e012      	b.n	800e6d6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6b0:	f7fe fd52 	bl	800d158 <HAL_GetTick>
 800e6b4:	0002      	movs	r2, r0
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	683a      	ldr	r2, [r7, #0]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d802      	bhi.n	800e6c6 <HAL_SPI_Transmit+0x18e>
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	d102      	bne.n	800e6cc <HAL_SPI_Transmit+0x194>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d104      	bne.n	800e6d6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800e6cc:	231f      	movs	r3, #31
 800e6ce:	18fb      	adds	r3, r7, r3
 800e6d0:	2203      	movs	r2, #3
 800e6d2:	701a      	strb	r2, [r3, #0]
          goto error;
 800e6d4:	e079      	b.n	800e7ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d1cd      	bne.n	800e67c <HAL_SPI_Transmit+0x144>
 800e6e0:	e04f      	b.n	800e782 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d004      	beq.n	800e6f4 <HAL_SPI_Transmit+0x1bc>
 800e6ea:	2316      	movs	r3, #22
 800e6ec:	18fb      	adds	r3, r7, r3
 800e6ee:	881b      	ldrh	r3, [r3, #0]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d141      	bne.n	800e778 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	330c      	adds	r3, #12
 800e6fe:	7812      	ldrb	r2, [r2, #0]
 800e700:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e706:	1c5a      	adds	r2, r3, #1
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e710:	b29b      	uxth	r3, r3
 800e712:	3b01      	subs	r3, #1
 800e714:	b29a      	uxth	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800e71a:	e02d      	b.n	800e778 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	689b      	ldr	r3, [r3, #8]
 800e722:	2202      	movs	r2, #2
 800e724:	4013      	ands	r3, r2
 800e726:	2b02      	cmp	r3, #2
 800e728:	d113      	bne.n	800e752 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	330c      	adds	r3, #12
 800e734:	7812      	ldrb	r2, [r2, #0]
 800e736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e73c:	1c5a      	adds	r2, r3, #1
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e746:	b29b      	uxth	r3, r3
 800e748:	3b01      	subs	r3, #1
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e750:	e012      	b.n	800e778 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e752:	f7fe fd01 	bl	800d158 <HAL_GetTick>
 800e756:	0002      	movs	r2, r0
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	1ad3      	subs	r3, r2, r3
 800e75c:	683a      	ldr	r2, [r7, #0]
 800e75e:	429a      	cmp	r2, r3
 800e760:	d802      	bhi.n	800e768 <HAL_SPI_Transmit+0x230>
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	3301      	adds	r3, #1
 800e766:	d102      	bne.n	800e76e <HAL_SPI_Transmit+0x236>
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d104      	bne.n	800e778 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800e76e:	231f      	movs	r3, #31
 800e770:	18fb      	adds	r3, r7, r3
 800e772:	2203      	movs	r2, #3
 800e774:	701a      	strb	r2, [r3, #0]
          goto error;
 800e776:	e028      	b.n	800e7ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1cc      	bne.n	800e71c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e782:	69ba      	ldr	r2, [r7, #24]
 800e784:	6839      	ldr	r1, [r7, #0]
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	0018      	movs	r0, r3
 800e78a:	f000 fcd9 	bl	800f140 <SPI_EndRxTxTransaction>
 800e78e:	1e03      	subs	r3, r0, #0
 800e790:	d002      	beq.n	800e798 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2220      	movs	r2, #32
 800e796:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10a      	bne.n	800e7b6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	613b      	str	r3, [r7, #16]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	613b      	str	r3, [r7, #16]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	613b      	str	r3, [r7, #16]
 800e7b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d004      	beq.n	800e7c8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800e7be:	231f      	movs	r3, #31
 800e7c0:	18fb      	adds	r3, r7, r3
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	701a      	strb	r2, [r3, #0]
 800e7c6:	e000      	b.n	800e7ca <HAL_SPI_Transmit+0x292>
  }

error:
 800e7c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	225d      	movs	r2, #93	; 0x5d
 800e7ce:	2101      	movs	r1, #1
 800e7d0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	225c      	movs	r2, #92	; 0x5c
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800e7da:	231f      	movs	r3, #31
 800e7dc:	18fb      	adds	r3, r7, r3
 800e7de:	781b      	ldrb	r3, [r3, #0]
}
 800e7e0:	0018      	movs	r0, r3
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	b008      	add	sp, #32
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e7e8:	b590      	push	{r4, r7, lr}
 800e7ea:	b089      	sub	sp, #36	; 0x24
 800e7ec:	af02      	add	r7, sp, #8
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	603b      	str	r3, [r7, #0]
 800e7f4:	1dbb      	adds	r3, r7, #6
 800e7f6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e7f8:	2317      	movs	r3, #23
 800e7fa:	18fb      	adds	r3, r7, r3
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	685a      	ldr	r2, [r3, #4]
 800e804:	2382      	movs	r3, #130	; 0x82
 800e806:	005b      	lsls	r3, r3, #1
 800e808:	429a      	cmp	r2, r3
 800e80a:	d113      	bne.n	800e834 <HAL_SPI_Receive+0x4c>
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10f      	bne.n	800e834 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	225d      	movs	r2, #93	; 0x5d
 800e818:	2104      	movs	r1, #4
 800e81a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e81c:	1dbb      	adds	r3, r7, #6
 800e81e:	881c      	ldrh	r4, [r3, #0]
 800e820:	68ba      	ldr	r2, [r7, #8]
 800e822:	68b9      	ldr	r1, [r7, #8]
 800e824:	68f8      	ldr	r0, [r7, #12]
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	9300      	str	r3, [sp, #0]
 800e82a:	0023      	movs	r3, r4
 800e82c:	f000 f928 	bl	800ea80 <HAL_SPI_TransmitReceive>
 800e830:	0003      	movs	r3, r0
 800e832:	e11c      	b.n	800ea6e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	225c      	movs	r2, #92	; 0x5c
 800e838:	5c9b      	ldrb	r3, [r3, r2]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d101      	bne.n	800e842 <HAL_SPI_Receive+0x5a>
 800e83e:	2302      	movs	r3, #2
 800e840:	e115      	b.n	800ea6e <HAL_SPI_Receive+0x286>
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	225c      	movs	r2, #92	; 0x5c
 800e846:	2101      	movs	r1, #1
 800e848:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e84a:	f7fe fc85 	bl	800d158 <HAL_GetTick>
 800e84e:	0003      	movs	r3, r0
 800e850:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	225d      	movs	r2, #93	; 0x5d
 800e856:	5c9b      	ldrb	r3, [r3, r2]
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d004      	beq.n	800e868 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800e85e:	2317      	movs	r3, #23
 800e860:	18fb      	adds	r3, r7, r3
 800e862:	2202      	movs	r2, #2
 800e864:	701a      	strb	r2, [r3, #0]
    goto error;
 800e866:	e0f7      	b.n	800ea58 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d003      	beq.n	800e876 <HAL_SPI_Receive+0x8e>
 800e86e:	1dbb      	adds	r3, r7, #6
 800e870:	881b      	ldrh	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d104      	bne.n	800e880 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800e876:	2317      	movs	r3, #23
 800e878:	18fb      	adds	r3, r7, r3
 800e87a:	2201      	movs	r2, #1
 800e87c:	701a      	strb	r2, [r3, #0]
    goto error;
 800e87e:	e0eb      	b.n	800ea58 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	225d      	movs	r2, #93	; 0x5d
 800e884:	2104      	movs	r1, #4
 800e886:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2200      	movs	r2, #0
 800e88c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	1dba      	adds	r2, r7, #6
 800e898:	2144      	movs	r1, #68	; 0x44
 800e89a:	8812      	ldrh	r2, [r2, #0]
 800e89c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	1dba      	adds	r2, r7, #6
 800e8a2:	2146      	movs	r1, #70	; 0x46
 800e8a4:	8812      	ldrh	r2, [r2, #0]
 800e8a6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	68da      	ldr	r2, [r3, #12]
 800e8ca:	23e0      	movs	r3, #224	; 0xe0
 800e8cc:	00db      	lsls	r3, r3, #3
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d908      	bls.n	800e8e4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	685a      	ldr	r2, [r3, #4]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	4966      	ldr	r1, [pc, #408]	; (800ea78 <HAL_SPI_Receive+0x290>)
 800e8de:	400a      	ands	r2, r1
 800e8e0:	605a      	str	r2, [r3, #4]
 800e8e2:	e008      	b.n	800e8f6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	685a      	ldr	r2, [r3, #4]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2180      	movs	r1, #128	; 0x80
 800e8f0:	0149      	lsls	r1, r1, #5
 800e8f2:	430a      	orrs	r2, r1
 800e8f4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	689a      	ldr	r2, [r3, #8]
 800e8fa:	2380      	movs	r3, #128	; 0x80
 800e8fc:	021b      	lsls	r3, r3, #8
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d10f      	bne.n	800e922 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2140      	movs	r1, #64	; 0x40
 800e90e:	438a      	bics	r2, r1
 800e910:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4957      	ldr	r1, [pc, #348]	; (800ea7c <HAL_SPI_Receive+0x294>)
 800e91e:	400a      	ands	r2, r1
 800e920:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2240      	movs	r2, #64	; 0x40
 800e92a:	4013      	ands	r3, r2
 800e92c:	2b40      	cmp	r3, #64	; 0x40
 800e92e:	d007      	beq.n	800e940 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	2140      	movs	r1, #64	; 0x40
 800e93c:	430a      	orrs	r2, r1
 800e93e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	68da      	ldr	r2, [r3, #12]
 800e944:	23e0      	movs	r3, #224	; 0xe0
 800e946:	00db      	lsls	r3, r3, #3
 800e948:	429a      	cmp	r2, r3
 800e94a:	d900      	bls.n	800e94e <HAL_SPI_Receive+0x166>
 800e94c:	e069      	b.n	800ea22 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e94e:	e031      	b.n	800e9b4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	2201      	movs	r2, #1
 800e958:	4013      	ands	r3, r2
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d117      	bne.n	800e98e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	330c      	adds	r3, #12
 800e964:	001a      	movs	r2, r3
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e96a:	7812      	ldrb	r2, [r2, #0]
 800e96c:	b2d2      	uxtb	r2, r2
 800e96e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e974:	1c5a      	adds	r2, r3, #1
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2246      	movs	r2, #70	; 0x46
 800e97e:	5a9b      	ldrh	r3, [r3, r2]
 800e980:	b29b      	uxth	r3, r3
 800e982:	3b01      	subs	r3, #1
 800e984:	b299      	uxth	r1, r3
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2246      	movs	r2, #70	; 0x46
 800e98a:	5299      	strh	r1, [r3, r2]
 800e98c:	e012      	b.n	800e9b4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e98e:	f7fe fbe3 	bl	800d158 <HAL_GetTick>
 800e992:	0002      	movs	r2, r0
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	683a      	ldr	r2, [r7, #0]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d802      	bhi.n	800e9a4 <HAL_SPI_Receive+0x1bc>
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	d102      	bne.n	800e9aa <HAL_SPI_Receive+0x1c2>
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d104      	bne.n	800e9b4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800e9aa:	2317      	movs	r3, #23
 800e9ac:	18fb      	adds	r3, r7, r3
 800e9ae:	2203      	movs	r2, #3
 800e9b0:	701a      	strb	r2, [r3, #0]
          goto error;
 800e9b2:	e051      	b.n	800ea58 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2246      	movs	r2, #70	; 0x46
 800e9b8:	5a9b      	ldrh	r3, [r3, r2]
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d1c7      	bne.n	800e950 <HAL_SPI_Receive+0x168>
 800e9c0:	e035      	b.n	800ea2e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	2201      	movs	r2, #1
 800e9ca:	4013      	ands	r3, r2
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d115      	bne.n	800e9fc <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	68da      	ldr	r2, [r3, #12]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9da:	b292      	uxth	r2, r2
 800e9dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9e2:	1c9a      	adds	r2, r3, #2
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2246      	movs	r2, #70	; 0x46
 800e9ec:	5a9b      	ldrh	r3, [r3, r2]
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	b299      	uxth	r1, r3
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2246      	movs	r2, #70	; 0x46
 800e9f8:	5299      	strh	r1, [r3, r2]
 800e9fa:	e012      	b.n	800ea22 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9fc:	f7fe fbac 	bl	800d158 <HAL_GetTick>
 800ea00:	0002      	movs	r2, r0
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	1ad3      	subs	r3, r2, r3
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d802      	bhi.n	800ea12 <HAL_SPI_Receive+0x22a>
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	3301      	adds	r3, #1
 800ea10:	d102      	bne.n	800ea18 <HAL_SPI_Receive+0x230>
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d104      	bne.n	800ea22 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800ea18:	2317      	movs	r3, #23
 800ea1a:	18fb      	adds	r3, r7, r3
 800ea1c:	2203      	movs	r2, #3
 800ea1e:	701a      	strb	r2, [r3, #0]
          goto error;
 800ea20:	e01a      	b.n	800ea58 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2246      	movs	r2, #70	; 0x46
 800ea26:	5a9b      	ldrh	r3, [r3, r2]
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d1c9      	bne.n	800e9c2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea2e:	693a      	ldr	r2, [r7, #16]
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	0018      	movs	r0, r3
 800ea36:	f000 fb25 	bl	800f084 <SPI_EndRxTransaction>
 800ea3a:	1e03      	subs	r3, r0, #0
 800ea3c:	d002      	beq.n	800ea44 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2220      	movs	r2, #32
 800ea42:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d004      	beq.n	800ea56 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800ea4c:	2317      	movs	r3, #23
 800ea4e:	18fb      	adds	r3, r7, r3
 800ea50:	2201      	movs	r2, #1
 800ea52:	701a      	strb	r2, [r3, #0]
 800ea54:	e000      	b.n	800ea58 <HAL_SPI_Receive+0x270>
  }

error :
 800ea56:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	225d      	movs	r2, #93	; 0x5d
 800ea5c:	2101      	movs	r1, #1
 800ea5e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	225c      	movs	r2, #92	; 0x5c
 800ea64:	2100      	movs	r1, #0
 800ea66:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ea68:	2317      	movs	r3, #23
 800ea6a:	18fb      	adds	r3, r7, r3
 800ea6c:	781b      	ldrb	r3, [r3, #0]
}
 800ea6e:	0018      	movs	r0, r3
 800ea70:	46bd      	mov	sp, r7
 800ea72:	b007      	add	sp, #28
 800ea74:	bd90      	pop	{r4, r7, pc}
 800ea76:	46c0      	nop			; (mov r8, r8)
 800ea78:	ffffefff 	.word	0xffffefff
 800ea7c:	ffffbfff 	.word	0xffffbfff

0800ea80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b08a      	sub	sp, #40	; 0x28
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
 800ea8c:	001a      	movs	r2, r3
 800ea8e:	1cbb      	adds	r3, r7, #2
 800ea90:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ea92:	2301      	movs	r3, #1
 800ea94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ea96:	2323      	movs	r3, #35	; 0x23
 800ea98:	18fb      	adds	r3, r7, r3
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	225c      	movs	r2, #92	; 0x5c
 800eaa2:	5c9b      	ldrb	r3, [r3, r2]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d101      	bne.n	800eaac <HAL_SPI_TransmitReceive+0x2c>
 800eaa8:	2302      	movs	r3, #2
 800eaaa:	e1b5      	b.n	800ee18 <HAL_SPI_TransmitReceive+0x398>
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	225c      	movs	r2, #92	; 0x5c
 800eab0:	2101      	movs	r1, #1
 800eab2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eab4:	f7fe fb50 	bl	800d158 <HAL_GetTick>
 800eab8:	0003      	movs	r3, r0
 800eaba:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eabc:	201b      	movs	r0, #27
 800eabe:	183b      	adds	r3, r7, r0
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	215d      	movs	r1, #93	; 0x5d
 800eac4:	5c52      	ldrb	r2, [r2, r1]
 800eac6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800eace:	2312      	movs	r3, #18
 800ead0:	18fb      	adds	r3, r7, r3
 800ead2:	1cba      	adds	r2, r7, #2
 800ead4:	8812      	ldrh	r2, [r2, #0]
 800ead6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ead8:	183b      	adds	r3, r7, r0
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d011      	beq.n	800eb04 <HAL_SPI_TransmitReceive+0x84>
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	2382      	movs	r3, #130	; 0x82
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d107      	bne.n	800eafa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d103      	bne.n	800eafa <HAL_SPI_TransmitReceive+0x7a>
 800eaf2:	183b      	adds	r3, r7, r0
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	2b04      	cmp	r3, #4
 800eaf8:	d004      	beq.n	800eb04 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800eafa:	2323      	movs	r3, #35	; 0x23
 800eafc:	18fb      	adds	r3, r7, r3
 800eafe:	2202      	movs	r2, #2
 800eb00:	701a      	strb	r2, [r3, #0]
    goto error;
 800eb02:	e17e      	b.n	800ee02 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d006      	beq.n	800eb18 <HAL_SPI_TransmitReceive+0x98>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d003      	beq.n	800eb18 <HAL_SPI_TransmitReceive+0x98>
 800eb10:	1cbb      	adds	r3, r7, #2
 800eb12:	881b      	ldrh	r3, [r3, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d104      	bne.n	800eb22 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800eb18:	2323      	movs	r3, #35	; 0x23
 800eb1a:	18fb      	adds	r3, r7, r3
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	701a      	strb	r2, [r3, #0]
    goto error;
 800eb20:	e16f      	b.n	800ee02 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	225d      	movs	r2, #93	; 0x5d
 800eb26:	5c9b      	ldrb	r3, [r3, r2]
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	2b04      	cmp	r3, #4
 800eb2c:	d003      	beq.n	800eb36 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	225d      	movs	r2, #93	; 0x5d
 800eb32:	2105      	movs	r1, #5
 800eb34:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	1cba      	adds	r2, r7, #2
 800eb46:	2146      	movs	r1, #70	; 0x46
 800eb48:	8812      	ldrh	r2, [r2, #0]
 800eb4a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	1cba      	adds	r2, r7, #2
 800eb50:	2144      	movs	r1, #68	; 0x44
 800eb52:	8812      	ldrh	r2, [r2, #0]
 800eb54:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	1cba      	adds	r2, r7, #2
 800eb60:	8812      	ldrh	r2, [r2, #0]
 800eb62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	1cba      	adds	r2, r7, #2
 800eb68:	8812      	ldrh	r2, [r2, #0]
 800eb6a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	68da      	ldr	r2, [r3, #12]
 800eb7c:	23e0      	movs	r3, #224	; 0xe0
 800eb7e:	00db      	lsls	r3, r3, #3
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d908      	bls.n	800eb96 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	685a      	ldr	r2, [r3, #4]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	49a4      	ldr	r1, [pc, #656]	; (800ee20 <HAL_SPI_TransmitReceive+0x3a0>)
 800eb90:	400a      	ands	r2, r1
 800eb92:	605a      	str	r2, [r3, #4]
 800eb94:	e008      	b.n	800eba8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	685a      	ldr	r2, [r3, #4]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2180      	movs	r1, #128	; 0x80
 800eba2:	0149      	lsls	r1, r1, #5
 800eba4:	430a      	orrs	r2, r1
 800eba6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2240      	movs	r2, #64	; 0x40
 800ebb0:	4013      	ands	r3, r2
 800ebb2:	2b40      	cmp	r3, #64	; 0x40
 800ebb4:	d007      	beq.n	800ebc6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2140      	movs	r1, #64	; 0x40
 800ebc2:	430a      	orrs	r2, r1
 800ebc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	68da      	ldr	r2, [r3, #12]
 800ebca:	23e0      	movs	r3, #224	; 0xe0
 800ebcc:	00db      	lsls	r3, r3, #3
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d800      	bhi.n	800ebd4 <HAL_SPI_TransmitReceive+0x154>
 800ebd2:	e07f      	b.n	800ecd4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d005      	beq.n	800ebe8 <HAL_SPI_TransmitReceive+0x168>
 800ebdc:	2312      	movs	r3, #18
 800ebde:	18fb      	adds	r3, r7, r3
 800ebe0:	881b      	ldrh	r3, [r3, #0]
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d000      	beq.n	800ebe8 <HAL_SPI_TransmitReceive+0x168>
 800ebe6:	e069      	b.n	800ecbc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebec:	881a      	ldrh	r2, [r3, #0]
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf8:	1c9a      	adds	r2, r3, #2
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	3b01      	subs	r3, #1
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec0c:	e056      	b.n	800ecbc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	2202      	movs	r2, #2
 800ec16:	4013      	ands	r3, r2
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d11b      	bne.n	800ec54 <HAL_SPI_TransmitReceive+0x1d4>
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec20:	b29b      	uxth	r3, r3
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d016      	beq.n	800ec54 <HAL_SPI_TransmitReceive+0x1d4>
 800ec26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d113      	bne.n	800ec54 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec30:	881a      	ldrh	r2, [r3, #0]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec3c:	1c9a      	adds	r2, r3, #2
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	3b01      	subs	r3, #1
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ec50:	2300      	movs	r3, #0
 800ec52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	689b      	ldr	r3, [r3, #8]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	4013      	ands	r3, r2
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d11c      	bne.n	800ec9c <HAL_SPI_TransmitReceive+0x21c>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2246      	movs	r2, #70	; 0x46
 800ec66:	5a9b      	ldrh	r3, [r3, r2]
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d016      	beq.n	800ec9c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	68da      	ldr	r2, [r3, #12]
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec78:	b292      	uxth	r2, r2
 800ec7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec80:	1c9a      	adds	r2, r3, #2
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2246      	movs	r2, #70	; 0x46
 800ec8a:	5a9b      	ldrh	r3, [r3, r2]
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	b299      	uxth	r1, r3
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2246      	movs	r2, #70	; 0x46
 800ec96:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ec9c:	f7fe fa5c 	bl	800d158 <HAL_GetTick>
 800eca0:	0002      	movs	r2, r0
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	1ad3      	subs	r3, r2, r3
 800eca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d807      	bhi.n	800ecbc <HAL_SPI_TransmitReceive+0x23c>
 800ecac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecae:	3301      	adds	r3, #1
 800ecb0:	d004      	beq.n	800ecbc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800ecb2:	2323      	movs	r3, #35	; 0x23
 800ecb4:	18fb      	adds	r3, r7, r3
 800ecb6:	2203      	movs	r2, #3
 800ecb8:	701a      	strb	r2, [r3, #0]
        goto error;
 800ecba:	e0a2      	b.n	800ee02 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1a3      	bne.n	800ec0e <HAL_SPI_TransmitReceive+0x18e>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2246      	movs	r2, #70	; 0x46
 800ecca:	5a9b      	ldrh	r3, [r3, r2]
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d19d      	bne.n	800ec0e <HAL_SPI_TransmitReceive+0x18e>
 800ecd2:	e085      	b.n	800ede0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d005      	beq.n	800ece8 <HAL_SPI_TransmitReceive+0x268>
 800ecdc:	2312      	movs	r3, #18
 800ecde:	18fb      	adds	r3, r7, r3
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d000      	beq.n	800ece8 <HAL_SPI_TransmitReceive+0x268>
 800ece6:	e070      	b.n	800edca <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	330c      	adds	r3, #12
 800ecf2:	7812      	ldrb	r2, [r2, #0]
 800ecf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecfa:	1c5a      	adds	r2, r3, #1
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	3b01      	subs	r3, #1
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed0e:	e05c      	b.n	800edca <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	2202      	movs	r2, #2
 800ed18:	4013      	ands	r3, r2
 800ed1a:	2b02      	cmp	r3, #2
 800ed1c:	d11c      	bne.n	800ed58 <HAL_SPI_TransmitReceive+0x2d8>
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d017      	beq.n	800ed58 <HAL_SPI_TransmitReceive+0x2d8>
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d114      	bne.n	800ed58 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	330c      	adds	r3, #12
 800ed38:	7812      	ldrb	r2, [r2, #0]
 800ed3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed40:	1c5a      	adds	r2, r3, #1
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	b29a      	uxth	r2, r3
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ed54:	2300      	movs	r3, #0
 800ed56:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	4013      	ands	r3, r2
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d11e      	bne.n	800eda4 <HAL_SPI_TransmitReceive+0x324>
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2246      	movs	r2, #70	; 0x46
 800ed6a:	5a9b      	ldrh	r3, [r3, r2]
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d018      	beq.n	800eda4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	330c      	adds	r3, #12
 800ed78:	001a      	movs	r2, r3
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed7e:	7812      	ldrb	r2, [r2, #0]
 800ed80:	b2d2      	uxtb	r2, r2
 800ed82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed88:	1c5a      	adds	r2, r3, #1
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2246      	movs	r2, #70	; 0x46
 800ed92:	5a9b      	ldrh	r3, [r3, r2]
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	3b01      	subs	r3, #1
 800ed98:	b299      	uxth	r1, r3
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2246      	movs	r2, #70	; 0x46
 800ed9e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eda0:	2301      	movs	r3, #1
 800eda2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eda4:	f7fe f9d8 	bl	800d158 <HAL_GetTick>
 800eda8:	0002      	movs	r2, r0
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	1ad3      	subs	r3, r2, r3
 800edae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d802      	bhi.n	800edba <HAL_SPI_TransmitReceive+0x33a>
 800edb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb6:	3301      	adds	r3, #1
 800edb8:	d102      	bne.n	800edc0 <HAL_SPI_TransmitReceive+0x340>
 800edba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d104      	bne.n	800edca <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800edc0:	2323      	movs	r3, #35	; 0x23
 800edc2:	18fb      	adds	r3, r7, r3
 800edc4:	2203      	movs	r2, #3
 800edc6:	701a      	strb	r2, [r3, #0]
        goto error;
 800edc8:	e01b      	b.n	800ee02 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edce:	b29b      	uxth	r3, r3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d19d      	bne.n	800ed10 <HAL_SPI_TransmitReceive+0x290>
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2246      	movs	r2, #70	; 0x46
 800edd8:	5a9b      	ldrh	r3, [r3, r2]
 800edda:	b29b      	uxth	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d197      	bne.n	800ed10 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ede0:	69fa      	ldr	r2, [r7, #28]
 800ede2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	0018      	movs	r0, r3
 800ede8:	f000 f9aa 	bl	800f140 <SPI_EndRxTxTransaction>
 800edec:	1e03      	subs	r3, r0, #0
 800edee:	d007      	beq.n	800ee00 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800edf0:	2323      	movs	r3, #35	; 0x23
 800edf2:	18fb      	adds	r3, r7, r3
 800edf4:	2201      	movs	r2, #1
 800edf6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2220      	movs	r2, #32
 800edfc:	661a      	str	r2, [r3, #96]	; 0x60
 800edfe:	e000      	b.n	800ee02 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800ee00:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	225d      	movs	r2, #93	; 0x5d
 800ee06:	2101      	movs	r1, #1
 800ee08:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	225c      	movs	r2, #92	; 0x5c
 800ee0e:	2100      	movs	r1, #0
 800ee10:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ee12:	2323      	movs	r3, #35	; 0x23
 800ee14:	18fb      	adds	r3, r7, r3
 800ee16:	781b      	ldrb	r3, [r3, #0]
}
 800ee18:	0018      	movs	r0, r3
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	b00a      	add	sp, #40	; 0x28
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	ffffefff 	.word	0xffffefff

0800ee24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b088      	sub	sp, #32
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	603b      	str	r3, [r7, #0]
 800ee30:	1dfb      	adds	r3, r7, #7
 800ee32:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ee34:	f7fe f990 	bl	800d158 <HAL_GetTick>
 800ee38:	0002      	movs	r2, r0
 800ee3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3c:	1a9b      	subs	r3, r3, r2
 800ee3e:	683a      	ldr	r2, [r7, #0]
 800ee40:	18d3      	adds	r3, r2, r3
 800ee42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ee44:	f7fe f988 	bl	800d158 <HAL_GetTick>
 800ee48:	0003      	movs	r3, r0
 800ee4a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ee4c:	4b3a      	ldr	r3, [pc, #232]	; (800ef38 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	015b      	lsls	r3, r3, #5
 800ee52:	0d1b      	lsrs	r3, r3, #20
 800ee54:	69fa      	ldr	r2, [r7, #28]
 800ee56:	4353      	muls	r3, r2
 800ee58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee5a:	e058      	b.n	800ef0e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	d055      	beq.n	800ef0e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ee62:	f7fe f979 	bl	800d158 <HAL_GetTick>
 800ee66:	0002      	movs	r2, r0
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	69fa      	ldr	r2, [r7, #28]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d902      	bls.n	800ee78 <SPI_WaitFlagStateUntilTimeout+0x54>
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d142      	bne.n	800eefe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	685a      	ldr	r2, [r3, #4]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	21e0      	movs	r1, #224	; 0xe0
 800ee84:	438a      	bics	r2, r1
 800ee86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	685a      	ldr	r2, [r3, #4]
 800ee8c:	2382      	movs	r3, #130	; 0x82
 800ee8e:	005b      	lsls	r3, r3, #1
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d113      	bne.n	800eebc <SPI_WaitFlagStateUntilTimeout+0x98>
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	689a      	ldr	r2, [r3, #8]
 800ee98:	2380      	movs	r3, #128	; 0x80
 800ee9a:	021b      	lsls	r3, r3, #8
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d005      	beq.n	800eeac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	689a      	ldr	r2, [r3, #8]
 800eea4:	2380      	movs	r3, #128	; 0x80
 800eea6:	00db      	lsls	r3, r3, #3
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d107      	bne.n	800eebc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2140      	movs	r1, #64	; 0x40
 800eeb8:	438a      	bics	r2, r1
 800eeba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eec0:	2380      	movs	r3, #128	; 0x80
 800eec2:	019b      	lsls	r3, r3, #6
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d110      	bne.n	800eeea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	491a      	ldr	r1, [pc, #104]	; (800ef3c <SPI_WaitFlagStateUntilTimeout+0x118>)
 800eed4:	400a      	ands	r2, r1
 800eed6:	601a      	str	r2, [r3, #0]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2180      	movs	r1, #128	; 0x80
 800eee4:	0189      	lsls	r1, r1, #6
 800eee6:	430a      	orrs	r2, r1
 800eee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	225d      	movs	r2, #93	; 0x5d
 800eeee:	2101      	movs	r1, #1
 800eef0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	225c      	movs	r2, #92	; 0x5c
 800eef6:	2100      	movs	r1, #0
 800eef8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800eefa:	2303      	movs	r3, #3
 800eefc:	e017      	b.n	800ef2e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d101      	bne.n	800ef08 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800ef04:	2300      	movs	r3, #0
 800ef06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	3b01      	subs	r3, #1
 800ef0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	4013      	ands	r3, r2
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	1ad3      	subs	r3, r2, r3
 800ef1c:	425a      	negs	r2, r3
 800ef1e:	4153      	adcs	r3, r2
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	001a      	movs	r2, r3
 800ef24:	1dfb      	adds	r3, r7, #7
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d197      	bne.n	800ee5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	0018      	movs	r0, r3
 800ef30:	46bd      	mov	sp, r7
 800ef32:	b008      	add	sp, #32
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	46c0      	nop			; (mov r8, r8)
 800ef38:	200000d4 	.word	0x200000d4
 800ef3c:	ffffdfff 	.word	0xffffdfff

0800ef40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b08a      	sub	sp, #40	; 0x28
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	607a      	str	r2, [r7, #4]
 800ef4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ef4e:	2317      	movs	r3, #23
 800ef50:	18fb      	adds	r3, r7, r3
 800ef52:	2200      	movs	r2, #0
 800ef54:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ef56:	f7fe f8ff 	bl	800d158 <HAL_GetTick>
 800ef5a:	0002      	movs	r2, r0
 800ef5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5e:	1a9b      	subs	r3, r3, r2
 800ef60:	683a      	ldr	r2, [r7, #0]
 800ef62:	18d3      	adds	r3, r2, r3
 800ef64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ef66:	f7fe f8f7 	bl	800d158 <HAL_GetTick>
 800ef6a:	0003      	movs	r3, r0
 800ef6c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	330c      	adds	r3, #12
 800ef74:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ef76:	4b41      	ldr	r3, [pc, #260]	; (800f07c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	0013      	movs	r3, r2
 800ef7c:	009b      	lsls	r3, r3, #2
 800ef7e:	189b      	adds	r3, r3, r2
 800ef80:	00da      	lsls	r2, r3, #3
 800ef82:	1ad3      	subs	r3, r2, r3
 800ef84:	0d1b      	lsrs	r3, r3, #20
 800ef86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef88:	4353      	muls	r3, r2
 800ef8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ef8c:	e068      	b.n	800f060 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	23c0      	movs	r3, #192	; 0xc0
 800ef92:	00db      	lsls	r3, r3, #3
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d10a      	bne.n	800efae <SPI_WaitFifoStateUntilTimeout+0x6e>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d107      	bne.n	800efae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	b2da      	uxtb	r2, r3
 800efa4:	2117      	movs	r1, #23
 800efa6:	187b      	adds	r3, r7, r1
 800efa8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800efaa:	187b      	adds	r3, r7, r1
 800efac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	3301      	adds	r3, #1
 800efb2:	d055      	beq.n	800f060 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800efb4:	f7fe f8d0 	bl	800d158 <HAL_GetTick>
 800efb8:	0002      	movs	r2, r0
 800efba:	6a3b      	ldr	r3, [r7, #32]
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d902      	bls.n	800efca <SPI_WaitFifoStateUntilTimeout+0x8a>
 800efc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d142      	bne.n	800f050 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	685a      	ldr	r2, [r3, #4]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	21e0      	movs	r1, #224	; 0xe0
 800efd6:	438a      	bics	r2, r1
 800efd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	685a      	ldr	r2, [r3, #4]
 800efde:	2382      	movs	r3, #130	; 0x82
 800efe0:	005b      	lsls	r3, r3, #1
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d113      	bne.n	800f00e <SPI_WaitFifoStateUntilTimeout+0xce>
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	689a      	ldr	r2, [r3, #8]
 800efea:	2380      	movs	r3, #128	; 0x80
 800efec:	021b      	lsls	r3, r3, #8
 800efee:	429a      	cmp	r2, r3
 800eff0:	d005      	beq.n	800effe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	689a      	ldr	r2, [r3, #8]
 800eff6:	2380      	movs	r3, #128	; 0x80
 800eff8:	00db      	lsls	r3, r3, #3
 800effa:	429a      	cmp	r2, r3
 800effc:	d107      	bne.n	800f00e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	681a      	ldr	r2, [r3, #0]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	2140      	movs	r1, #64	; 0x40
 800f00a:	438a      	bics	r2, r1
 800f00c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f012:	2380      	movs	r3, #128	; 0x80
 800f014:	019b      	lsls	r3, r3, #6
 800f016:	429a      	cmp	r2, r3
 800f018:	d110      	bne.n	800f03c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4916      	ldr	r1, [pc, #88]	; (800f080 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800f026:	400a      	ands	r2, r1
 800f028:	601a      	str	r2, [r3, #0]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2180      	movs	r1, #128	; 0x80
 800f036:	0189      	lsls	r1, r1, #6
 800f038:	430a      	orrs	r2, r1
 800f03a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	225d      	movs	r2, #93	; 0x5d
 800f040:	2101      	movs	r1, #1
 800f042:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	225c      	movs	r2, #92	; 0x5c
 800f048:	2100      	movs	r1, #0
 800f04a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f04c:	2303      	movs	r3, #3
 800f04e:	e010      	b.n	800f072 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800f050:	69bb      	ldr	r3, [r7, #24]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d101      	bne.n	800f05a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800f056:	2300      	movs	r3, #0
 800f058:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	3b01      	subs	r3, #1
 800f05e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	689b      	ldr	r3, [r3, #8]
 800f066:	68ba      	ldr	r2, [r7, #8]
 800f068:	4013      	ands	r3, r2
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d18e      	bne.n	800ef8e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800f070:	2300      	movs	r3, #0
}
 800f072:	0018      	movs	r0, r3
 800f074:	46bd      	mov	sp, r7
 800f076:	b00a      	add	sp, #40	; 0x28
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	46c0      	nop			; (mov r8, r8)
 800f07c:	200000d4 	.word	0x200000d4
 800f080:	ffffdfff 	.word	0xffffdfff

0800f084 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b086      	sub	sp, #24
 800f088:	af02      	add	r7, sp, #8
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	2382      	movs	r3, #130	; 0x82
 800f096:	005b      	lsls	r3, r3, #1
 800f098:	429a      	cmp	r2, r3
 800f09a:	d113      	bne.n	800f0c4 <SPI_EndRxTransaction+0x40>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	689a      	ldr	r2, [r3, #8]
 800f0a0:	2380      	movs	r3, #128	; 0x80
 800f0a2:	021b      	lsls	r3, r3, #8
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d005      	beq.n	800f0b4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	689a      	ldr	r2, [r3, #8]
 800f0ac:	2380      	movs	r3, #128	; 0x80
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d107      	bne.n	800f0c4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2140      	movs	r1, #64	; 0x40
 800f0c0:	438a      	bics	r2, r1
 800f0c2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f0c4:	68ba      	ldr	r2, [r7, #8]
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	0013      	movs	r3, r2
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	2180      	movs	r1, #128	; 0x80
 800f0d2:	f7ff fea7 	bl	800ee24 <SPI_WaitFlagStateUntilTimeout>
 800f0d6:	1e03      	subs	r3, r0, #0
 800f0d8:	d007      	beq.n	800f0ea <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0de:	2220      	movs	r2, #32
 800f0e0:	431a      	orrs	r2, r3
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e026      	b.n	800f138 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	685a      	ldr	r2, [r3, #4]
 800f0ee:	2382      	movs	r3, #130	; 0x82
 800f0f0:	005b      	lsls	r3, r3, #1
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d11f      	bne.n	800f136 <SPI_EndRxTransaction+0xb2>
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	689a      	ldr	r2, [r3, #8]
 800f0fa:	2380      	movs	r3, #128	; 0x80
 800f0fc:	021b      	lsls	r3, r3, #8
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d005      	beq.n	800f10e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	689a      	ldr	r2, [r3, #8]
 800f106:	2380      	movs	r3, #128	; 0x80
 800f108:	00db      	lsls	r3, r3, #3
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d113      	bne.n	800f136 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	23c0      	movs	r3, #192	; 0xc0
 800f112:	00d9      	lsls	r1, r3, #3
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	0013      	movs	r3, r2
 800f11c:	2200      	movs	r2, #0
 800f11e:	f7ff ff0f 	bl	800ef40 <SPI_WaitFifoStateUntilTimeout>
 800f122:	1e03      	subs	r3, r0, #0
 800f124:	d007      	beq.n	800f136 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f12a:	2220      	movs	r2, #32
 800f12c:	431a      	orrs	r2, r3
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800f132:	2303      	movs	r3, #3
 800f134:	e000      	b.n	800f138 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800f136:	2300      	movs	r3, #0
}
 800f138:	0018      	movs	r0, r3
 800f13a:	46bd      	mov	sp, r7
 800f13c:	b004      	add	sp, #16
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af02      	add	r7, sp, #8
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	23c0      	movs	r3, #192	; 0xc0
 800f150:	0159      	lsls	r1, r3, #5
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	0013      	movs	r3, r2
 800f15a:	2200      	movs	r2, #0
 800f15c:	f7ff fef0 	bl	800ef40 <SPI_WaitFifoStateUntilTimeout>
 800f160:	1e03      	subs	r3, r0, #0
 800f162:	d007      	beq.n	800f174 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f168:	2220      	movs	r2, #32
 800f16a:	431a      	orrs	r2, r3
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f170:	2303      	movs	r3, #3
 800f172:	e027      	b.n	800f1c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f174:	68ba      	ldr	r2, [r7, #8]
 800f176:	68f8      	ldr	r0, [r7, #12]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	0013      	movs	r3, r2
 800f17e:	2200      	movs	r2, #0
 800f180:	2180      	movs	r1, #128	; 0x80
 800f182:	f7ff fe4f 	bl	800ee24 <SPI_WaitFlagStateUntilTimeout>
 800f186:	1e03      	subs	r3, r0, #0
 800f188:	d007      	beq.n	800f19a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f18e:	2220      	movs	r2, #32
 800f190:	431a      	orrs	r2, r3
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f196:	2303      	movs	r3, #3
 800f198:	e014      	b.n	800f1c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	23c0      	movs	r3, #192	; 0xc0
 800f19e:	00d9      	lsls	r1, r3, #3
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	9300      	str	r3, [sp, #0]
 800f1a6:	0013      	movs	r3, r2
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f7ff fec9 	bl	800ef40 <SPI_WaitFifoStateUntilTimeout>
 800f1ae:	1e03      	subs	r3, r0, #0
 800f1b0:	d007      	beq.n	800f1c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1b6:	2220      	movs	r2, #32
 800f1b8:	431a      	orrs	r2, r3
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f1be:	2303      	movs	r3, #3
 800f1c0:	e000      	b.n	800f1c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f1c2:	2300      	movs	r3, #0
}
 800f1c4:	0018      	movs	r0, r3
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	b004      	add	sp, #16
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d101      	bne.n	800f1de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e044      	b.n	800f268 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d107      	bne.n	800f1f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2274      	movs	r2, #116	; 0x74
 800f1ea:	2100      	movs	r1, #0
 800f1ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	0018      	movs	r0, r3
 800f1f2:	f7fd fe29 	bl	800ce48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2224      	movs	r2, #36	; 0x24
 800f1fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	681a      	ldr	r2, [r3, #0]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2101      	movs	r1, #1
 800f208:	438a      	bics	r2, r1
 800f20a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	0018      	movs	r0, r3
 800f210:	f000 fcb8 	bl	800fb84 <UART_SetConfig>
 800f214:	0003      	movs	r3, r0
 800f216:	2b01      	cmp	r3, #1
 800f218:	d101      	bne.n	800f21e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f21a:	2301      	movs	r3, #1
 800f21c:	e024      	b.n	800f268 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f222:	2b00      	cmp	r3, #0
 800f224:	d003      	beq.n	800f22e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	0018      	movs	r0, r3
 800f22a:	f000 fe33 	bl	800fe94 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	685a      	ldr	r2, [r3, #4]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	490d      	ldr	r1, [pc, #52]	; (800f270 <HAL_UART_Init+0xa4>)
 800f23a:	400a      	ands	r2, r1
 800f23c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	689a      	ldr	r2, [r3, #8]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	212a      	movs	r1, #42	; 0x2a
 800f24a:	438a      	bics	r2, r1
 800f24c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2101      	movs	r1, #1
 800f25a:	430a      	orrs	r2, r1
 800f25c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	0018      	movs	r0, r3
 800f262:	f000 fecb 	bl	800fffc <UART_CheckIdleState>
 800f266:	0003      	movs	r3, r0
}
 800f268:	0018      	movs	r0, r3
 800f26a:	46bd      	mov	sp, r7
 800f26c:	b002      	add	sp, #8
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	ffffb7ff 	.word	0xffffb7ff

0800f274 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b08a      	sub	sp, #40	; 0x28
 800f278:	af02      	add	r7, sp, #8
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	1dbb      	adds	r3, r7, #6
 800f282:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f288:	2b20      	cmp	r3, #32
 800f28a:	d000      	beq.n	800f28e <HAL_UART_Transmit+0x1a>
 800f28c:	e096      	b.n	800f3bc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d003      	beq.n	800f29c <HAL_UART_Transmit+0x28>
 800f294:	1dbb      	adds	r3, r7, #6
 800f296:	881b      	ldrh	r3, [r3, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d101      	bne.n	800f2a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f29c:	2301      	movs	r3, #1
 800f29e:	e08e      	b.n	800f3be <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	689a      	ldr	r2, [r3, #8]
 800f2a4:	2380      	movs	r3, #128	; 0x80
 800f2a6:	015b      	lsls	r3, r3, #5
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d109      	bne.n	800f2c0 <HAL_UART_Transmit+0x4c>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	691b      	ldr	r3, [r3, #16]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d105      	bne.n	800f2c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	4013      	ands	r3, r2
 800f2ba:	d001      	beq.n	800f2c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800f2bc:	2301      	movs	r3, #1
 800f2be:	e07e      	b.n	800f3be <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2274      	movs	r2, #116	; 0x74
 800f2c4:	5c9b      	ldrb	r3, [r3, r2]
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d101      	bne.n	800f2ce <HAL_UART_Transmit+0x5a>
 800f2ca:	2302      	movs	r3, #2
 800f2cc:	e077      	b.n	800f3be <HAL_UART_Transmit+0x14a>
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2274      	movs	r2, #116	; 0x74
 800f2d2:	2101      	movs	r1, #1
 800f2d4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2280      	movs	r2, #128	; 0x80
 800f2da:	2100      	movs	r1, #0
 800f2dc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2221      	movs	r2, #33	; 0x21
 800f2e2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f2e4:	f7fd ff38 	bl	800d158 <HAL_GetTick>
 800f2e8:	0003      	movs	r3, r0
 800f2ea:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	1dba      	adds	r2, r7, #6
 800f2f0:	2150      	movs	r1, #80	; 0x50
 800f2f2:	8812      	ldrh	r2, [r2, #0]
 800f2f4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	1dba      	adds	r2, r7, #6
 800f2fa:	2152      	movs	r1, #82	; 0x52
 800f2fc:	8812      	ldrh	r2, [r2, #0]
 800f2fe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	689a      	ldr	r2, [r3, #8]
 800f304:	2380      	movs	r3, #128	; 0x80
 800f306:	015b      	lsls	r3, r3, #5
 800f308:	429a      	cmp	r2, r3
 800f30a:	d108      	bne.n	800f31e <HAL_UART_Transmit+0xaa>
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	691b      	ldr	r3, [r3, #16]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d104      	bne.n	800f31e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800f314:	2300      	movs	r3, #0
 800f316:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	61bb      	str	r3, [r7, #24]
 800f31c:	e003      	b.n	800f326 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f322:	2300      	movs	r3, #0
 800f324:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2274      	movs	r2, #116	; 0x74
 800f32a:	2100      	movs	r1, #0
 800f32c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800f32e:	e02d      	b.n	800f38c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f330:	697a      	ldr	r2, [r7, #20]
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	9300      	str	r3, [sp, #0]
 800f338:	0013      	movs	r3, r2
 800f33a:	2200      	movs	r2, #0
 800f33c:	2180      	movs	r1, #128	; 0x80
 800f33e:	f000 fea5 	bl	801008c <UART_WaitOnFlagUntilTimeout>
 800f342:	1e03      	subs	r3, r0, #0
 800f344:	d001      	beq.n	800f34a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800f346:	2303      	movs	r3, #3
 800f348:	e039      	b.n	800f3be <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d10b      	bne.n	800f368 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	881a      	ldrh	r2, [r3, #0]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	05d2      	lsls	r2, r2, #23
 800f35a:	0dd2      	lsrs	r2, r2, #23
 800f35c:	b292      	uxth	r2, r2
 800f35e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	3302      	adds	r3, #2
 800f364:	61bb      	str	r3, [r7, #24]
 800f366:	e008      	b.n	800f37a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	781a      	ldrb	r2, [r3, #0]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	b292      	uxth	r2, r2
 800f372:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	3301      	adds	r3, #1
 800f378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2252      	movs	r2, #82	; 0x52
 800f37e:	5a9b      	ldrh	r3, [r3, r2]
 800f380:	b29b      	uxth	r3, r3
 800f382:	3b01      	subs	r3, #1
 800f384:	b299      	uxth	r1, r3
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2252      	movs	r2, #82	; 0x52
 800f38a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2252      	movs	r2, #82	; 0x52
 800f390:	5a9b      	ldrh	r3, [r3, r2]
 800f392:	b29b      	uxth	r3, r3
 800f394:	2b00      	cmp	r3, #0
 800f396:	d1cb      	bne.n	800f330 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f398:	697a      	ldr	r2, [r7, #20]
 800f39a:	68f8      	ldr	r0, [r7, #12]
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	0013      	movs	r3, r2
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	2140      	movs	r1, #64	; 0x40
 800f3a6:	f000 fe71 	bl	801008c <UART_WaitOnFlagUntilTimeout>
 800f3aa:	1e03      	subs	r3, r0, #0
 800f3ac:	d001      	beq.n	800f3b2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800f3ae:	2303      	movs	r3, #3
 800f3b0:	e005      	b.n	800f3be <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2220      	movs	r2, #32
 800f3b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	e000      	b.n	800f3be <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800f3bc:	2302      	movs	r3, #2
  }
}
 800f3be:	0018      	movs	r0, r3
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	b008      	add	sp, #32
 800f3c4:	bd80      	pop	{r7, pc}
	...

0800f3c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b088      	sub	sp, #32
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	1dbb      	adds	r3, r7, #6
 800f3d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3da:	2b20      	cmp	r3, #32
 800f3dc:	d000      	beq.n	800f3e0 <HAL_UART_Transmit_IT+0x18>
 800f3de:	e06a      	b.n	800f4b6 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d003      	beq.n	800f3ee <HAL_UART_Transmit_IT+0x26>
 800f3e6:	1dbb      	adds	r3, r7, #6
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d101      	bne.n	800f3f2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e062      	b.n	800f4b8 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	689a      	ldr	r2, [r3, #8]
 800f3f6:	2380      	movs	r3, #128	; 0x80
 800f3f8:	015b      	lsls	r3, r3, #5
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d109      	bne.n	800f412 <HAL_UART_Transmit_IT+0x4a>
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	691b      	ldr	r3, [r3, #16]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d105      	bne.n	800f412 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2201      	movs	r2, #1
 800f40a:	4013      	ands	r3, r2
 800f40c:	d001      	beq.n	800f412 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 800f40e:	2301      	movs	r3, #1
 800f410:	e052      	b.n	800f4b8 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2274      	movs	r2, #116	; 0x74
 800f416:	5c9b      	ldrb	r3, [r3, r2]
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d101      	bne.n	800f420 <HAL_UART_Transmit_IT+0x58>
 800f41c:	2302      	movs	r3, #2
 800f41e:	e04b      	b.n	800f4b8 <HAL_UART_Transmit_IT+0xf0>
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2274      	movs	r2, #116	; 0x74
 800f424:	2101      	movs	r1, #1
 800f426:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	68ba      	ldr	r2, [r7, #8]
 800f42c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	1dba      	adds	r2, r7, #6
 800f432:	2150      	movs	r1, #80	; 0x50
 800f434:	8812      	ldrh	r2, [r2, #0]
 800f436:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	1dba      	adds	r2, r7, #6
 800f43c:	2152      	movs	r1, #82	; 0x52
 800f43e:	8812      	ldrh	r2, [r2, #0]
 800f440:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2200      	movs	r2, #0
 800f446:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2280      	movs	r2, #128	; 0x80
 800f44c:	2100      	movs	r1, #0
 800f44e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2221      	movs	r2, #33	; 0x21
 800f454:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	689a      	ldr	r2, [r3, #8]
 800f45a:	2380      	movs	r3, #128	; 0x80
 800f45c:	015b      	lsls	r3, r3, #5
 800f45e:	429a      	cmp	r2, r3
 800f460:	d107      	bne.n	800f472 <HAL_UART_Transmit_IT+0xaa>
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d103      	bne.n	800f472 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	4a14      	ldr	r2, [pc, #80]	; (800f4c0 <HAL_UART_Transmit_IT+0xf8>)
 800f46e:	669a      	str	r2, [r3, #104]	; 0x68
 800f470:	e002      	b.n	800f478 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	4a13      	ldr	r2, [pc, #76]	; (800f4c4 <HAL_UART_Transmit_IT+0xfc>)
 800f476:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2274      	movs	r2, #116	; 0x74
 800f47c:	2100      	movs	r1, #0
 800f47e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f480:	f3ef 8310 	mrs	r3, PRIMASK
 800f484:	613b      	str	r3, [r7, #16]
  return(result);
 800f486:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f488:	61fb      	str	r3, [r7, #28]
 800f48a:	2301      	movs	r3, #1
 800f48c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	f383 8810 	msr	PRIMASK, r3
}
 800f494:	46c0      	nop			; (mov r8, r8)
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2180      	movs	r1, #128	; 0x80
 800f4a2:	430a      	orrs	r2, r1
 800f4a4:	601a      	str	r2, [r3, #0]
 800f4a6:	69fb      	ldr	r3, [r7, #28]
 800f4a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	f383 8810 	msr	PRIMASK, r3
}
 800f4b0:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	e000      	b.n	800f4b8 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 800f4b6:	2302      	movs	r3, #2
  }
}
 800f4b8:	0018      	movs	r0, r3
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	b008      	add	sp, #32
 800f4be:	bd80      	pop	{r7, pc}
 800f4c0:	0801051b 	.word	0x0801051b
 800f4c4:	08010467 	.word	0x08010467

0800f4c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b088      	sub	sp, #32
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	1dbb      	adds	r3, r7, #6
 800f4d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4da:	2b20      	cmp	r3, #32
 800f4dc:	d150      	bne.n	800f580 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d003      	beq.n	800f4ec <HAL_UART_Receive_IT+0x24>
 800f4e4:	1dbb      	adds	r3, r7, #6
 800f4e6:	881b      	ldrh	r3, [r3, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d101      	bne.n	800f4f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	e048      	b.n	800f582 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	689a      	ldr	r2, [r3, #8]
 800f4f4:	2380      	movs	r3, #128	; 0x80
 800f4f6:	015b      	lsls	r3, r3, #5
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d109      	bne.n	800f510 <HAL_UART_Receive_IT+0x48>
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	691b      	ldr	r3, [r3, #16]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d105      	bne.n	800f510 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	2201      	movs	r2, #1
 800f508:	4013      	ands	r3, r2
 800f50a:	d001      	beq.n	800f510 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800f50c:	2301      	movs	r3, #1
 800f50e:	e038      	b.n	800f582 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2274      	movs	r2, #116	; 0x74
 800f514:	5c9b      	ldrb	r3, [r3, r2]
 800f516:	2b01      	cmp	r3, #1
 800f518:	d101      	bne.n	800f51e <HAL_UART_Receive_IT+0x56>
 800f51a:	2302      	movs	r3, #2
 800f51c:	e031      	b.n	800f582 <HAL_UART_Receive_IT+0xba>
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2274      	movs	r2, #116	; 0x74
 800f522:	2101      	movs	r1, #1
 800f524:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	2200      	movs	r2, #0
 800f52a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	685a      	ldr	r2, [r3, #4]
 800f532:	2380      	movs	r3, #128	; 0x80
 800f534:	041b      	lsls	r3, r3, #16
 800f536:	4013      	ands	r3, r2
 800f538:	d019      	beq.n	800f56e <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f53a:	f3ef 8310 	mrs	r3, PRIMASK
 800f53e:	613b      	str	r3, [r7, #16]
  return(result);
 800f540:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f542:	61fb      	str	r3, [r7, #28]
 800f544:	2301      	movs	r3, #1
 800f546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	f383 8810 	msr	PRIMASK, r3
}
 800f54e:	46c0      	nop			; (mov r8, r8)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2180      	movs	r1, #128	; 0x80
 800f55c:	04c9      	lsls	r1, r1, #19
 800f55e:	430a      	orrs	r2, r1
 800f560:	601a      	str	r2, [r3, #0]
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f566:	69bb      	ldr	r3, [r7, #24]
 800f568:	f383 8810 	msr	PRIMASK, r3
}
 800f56c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f56e:	1dbb      	adds	r3, r7, #6
 800f570:	881a      	ldrh	r2, [r3, #0]
 800f572:	68b9      	ldr	r1, [r7, #8]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	0018      	movs	r0, r3
 800f578:	f000 fe4c 	bl	8010214 <UART_Start_Receive_IT>
 800f57c:	0003      	movs	r3, r0
 800f57e:	e000      	b.n	800f582 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800f580:	2302      	movs	r3, #2
  }
}
 800f582:	0018      	movs	r0, r3
 800f584:	46bd      	mov	sp, r7
 800f586:	b008      	add	sp, #32
 800f588:	bd80      	pop	{r7, pc}
	...

0800f58c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f58c:	b590      	push	{r4, r7, lr}
 800f58e:	b0ab      	sub	sp, #172	; 0xac
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	69db      	ldr	r3, [r3, #28]
 800f59a:	22a4      	movs	r2, #164	; 0xa4
 800f59c:	18b9      	adds	r1, r7, r2
 800f59e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	20a0      	movs	r0, #160	; 0xa0
 800f5a8:	1839      	adds	r1, r7, r0
 800f5aa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	219c      	movs	r1, #156	; 0x9c
 800f5b4:	1879      	adds	r1, r7, r1
 800f5b6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f5b8:	0011      	movs	r1, r2
 800f5ba:	18bb      	adds	r3, r7, r2
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	4a99      	ldr	r2, [pc, #612]	; (800f824 <HAL_UART_IRQHandler+0x298>)
 800f5c0:	4013      	ands	r3, r2
 800f5c2:	2298      	movs	r2, #152	; 0x98
 800f5c4:	18bc      	adds	r4, r7, r2
 800f5c6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800f5c8:	18bb      	adds	r3, r7, r2
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d114      	bne.n	800f5fa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f5d0:	187b      	adds	r3, r7, r1
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2220      	movs	r2, #32
 800f5d6:	4013      	ands	r3, r2
 800f5d8:	d00f      	beq.n	800f5fa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f5da:	183b      	adds	r3, r7, r0
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2220      	movs	r2, #32
 800f5e0:	4013      	ands	r3, r2
 800f5e2:	d00a      	beq.n	800f5fa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d100      	bne.n	800f5ee <HAL_UART_IRQHandler+0x62>
 800f5ec:	e296      	b.n	800fb1c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	0010      	movs	r0, r2
 800f5f6:	4798      	blx	r3
      }
      return;
 800f5f8:	e290      	b.n	800fb1c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f5fa:	2398      	movs	r3, #152	; 0x98
 800f5fc:	18fb      	adds	r3, r7, r3
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d100      	bne.n	800f606 <HAL_UART_IRQHandler+0x7a>
 800f604:	e114      	b.n	800f830 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f606:	239c      	movs	r3, #156	; 0x9c
 800f608:	18fb      	adds	r3, r7, r3
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2201      	movs	r2, #1
 800f60e:	4013      	ands	r3, r2
 800f610:	d106      	bne.n	800f620 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f612:	23a0      	movs	r3, #160	; 0xa0
 800f614:	18fb      	adds	r3, r7, r3
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	4a83      	ldr	r2, [pc, #524]	; (800f828 <HAL_UART_IRQHandler+0x29c>)
 800f61a:	4013      	ands	r3, r2
 800f61c:	d100      	bne.n	800f620 <HAL_UART_IRQHandler+0x94>
 800f61e:	e107      	b.n	800f830 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f620:	23a4      	movs	r3, #164	; 0xa4
 800f622:	18fb      	adds	r3, r7, r3
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2201      	movs	r2, #1
 800f628:	4013      	ands	r3, r2
 800f62a:	d012      	beq.n	800f652 <HAL_UART_IRQHandler+0xc6>
 800f62c:	23a0      	movs	r3, #160	; 0xa0
 800f62e:	18fb      	adds	r3, r7, r3
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	2380      	movs	r3, #128	; 0x80
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	4013      	ands	r3, r2
 800f638:	d00b      	beq.n	800f652 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2201      	movs	r2, #1
 800f640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2280      	movs	r2, #128	; 0x80
 800f646:	589b      	ldr	r3, [r3, r2]
 800f648:	2201      	movs	r2, #1
 800f64a:	431a      	orrs	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2180      	movs	r1, #128	; 0x80
 800f650:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f652:	23a4      	movs	r3, #164	; 0xa4
 800f654:	18fb      	adds	r3, r7, r3
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2202      	movs	r2, #2
 800f65a:	4013      	ands	r3, r2
 800f65c:	d011      	beq.n	800f682 <HAL_UART_IRQHandler+0xf6>
 800f65e:	239c      	movs	r3, #156	; 0x9c
 800f660:	18fb      	adds	r3, r7, r3
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	2201      	movs	r2, #1
 800f666:	4013      	ands	r3, r2
 800f668:	d00b      	beq.n	800f682 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	2202      	movs	r2, #2
 800f670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2280      	movs	r2, #128	; 0x80
 800f676:	589b      	ldr	r3, [r3, r2]
 800f678:	2204      	movs	r2, #4
 800f67a:	431a      	orrs	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2180      	movs	r1, #128	; 0x80
 800f680:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f682:	23a4      	movs	r3, #164	; 0xa4
 800f684:	18fb      	adds	r3, r7, r3
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2204      	movs	r2, #4
 800f68a:	4013      	ands	r3, r2
 800f68c:	d011      	beq.n	800f6b2 <HAL_UART_IRQHandler+0x126>
 800f68e:	239c      	movs	r3, #156	; 0x9c
 800f690:	18fb      	adds	r3, r7, r3
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2201      	movs	r2, #1
 800f696:	4013      	ands	r3, r2
 800f698:	d00b      	beq.n	800f6b2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2204      	movs	r2, #4
 800f6a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2280      	movs	r2, #128	; 0x80
 800f6a6:	589b      	ldr	r3, [r3, r2]
 800f6a8:	2202      	movs	r2, #2
 800f6aa:	431a      	orrs	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2180      	movs	r1, #128	; 0x80
 800f6b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f6b2:	23a4      	movs	r3, #164	; 0xa4
 800f6b4:	18fb      	adds	r3, r7, r3
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2208      	movs	r2, #8
 800f6ba:	4013      	ands	r3, r2
 800f6bc:	d017      	beq.n	800f6ee <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f6be:	23a0      	movs	r3, #160	; 0xa0
 800f6c0:	18fb      	adds	r3, r7, r3
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2220      	movs	r2, #32
 800f6c6:	4013      	ands	r3, r2
 800f6c8:	d105      	bne.n	800f6d6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f6ca:	239c      	movs	r3, #156	; 0x9c
 800f6cc:	18fb      	adds	r3, r7, r3
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f6d4:	d00b      	beq.n	800f6ee <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2208      	movs	r2, #8
 800f6dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2280      	movs	r2, #128	; 0x80
 800f6e2:	589b      	ldr	r3, [r3, r2]
 800f6e4:	2208      	movs	r2, #8
 800f6e6:	431a      	orrs	r2, r3
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2180      	movs	r1, #128	; 0x80
 800f6ec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f6ee:	23a4      	movs	r3, #164	; 0xa4
 800f6f0:	18fb      	adds	r3, r7, r3
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	2380      	movs	r3, #128	; 0x80
 800f6f6:	011b      	lsls	r3, r3, #4
 800f6f8:	4013      	ands	r3, r2
 800f6fa:	d013      	beq.n	800f724 <HAL_UART_IRQHandler+0x198>
 800f6fc:	23a0      	movs	r3, #160	; 0xa0
 800f6fe:	18fb      	adds	r3, r7, r3
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	2380      	movs	r3, #128	; 0x80
 800f704:	04db      	lsls	r3, r3, #19
 800f706:	4013      	ands	r3, r2
 800f708:	d00c      	beq.n	800f724 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2280      	movs	r2, #128	; 0x80
 800f710:	0112      	lsls	r2, r2, #4
 800f712:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2280      	movs	r2, #128	; 0x80
 800f718:	589b      	ldr	r3, [r3, r2]
 800f71a:	2220      	movs	r2, #32
 800f71c:	431a      	orrs	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2180      	movs	r1, #128	; 0x80
 800f722:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2280      	movs	r2, #128	; 0x80
 800f728:	589b      	ldr	r3, [r3, r2]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d100      	bne.n	800f730 <HAL_UART_IRQHandler+0x1a4>
 800f72e:	e1f7      	b.n	800fb20 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f730:	23a4      	movs	r3, #164	; 0xa4
 800f732:	18fb      	adds	r3, r7, r3
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2220      	movs	r2, #32
 800f738:	4013      	ands	r3, r2
 800f73a:	d00e      	beq.n	800f75a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f73c:	23a0      	movs	r3, #160	; 0xa0
 800f73e:	18fb      	adds	r3, r7, r3
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2220      	movs	r2, #32
 800f744:	4013      	ands	r3, r2
 800f746:	d008      	beq.n	800f75a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d004      	beq.n	800f75a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	0010      	movs	r0, r2
 800f758:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2280      	movs	r2, #128	; 0x80
 800f75e:	589b      	ldr	r3, [r3, r2]
 800f760:	2194      	movs	r1, #148	; 0x94
 800f762:	187a      	adds	r2, r7, r1
 800f764:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	689b      	ldr	r3, [r3, #8]
 800f76c:	2240      	movs	r2, #64	; 0x40
 800f76e:	4013      	ands	r3, r2
 800f770:	2b40      	cmp	r3, #64	; 0x40
 800f772:	d004      	beq.n	800f77e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f774:	187b      	adds	r3, r7, r1
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2228      	movs	r2, #40	; 0x28
 800f77a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f77c:	d047      	beq.n	800f80e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	0018      	movs	r0, r3
 800f782:	f000 fdf7 	bl	8010374 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	689b      	ldr	r3, [r3, #8]
 800f78c:	2240      	movs	r2, #64	; 0x40
 800f78e:	4013      	ands	r3, r2
 800f790:	2b40      	cmp	r3, #64	; 0x40
 800f792:	d137      	bne.n	800f804 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f794:	f3ef 8310 	mrs	r3, PRIMASK
 800f798:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800f79a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f79c:	2090      	movs	r0, #144	; 0x90
 800f79e:	183a      	adds	r2, r7, r0
 800f7a0:	6013      	str	r3, [r2, #0]
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7a8:	f383 8810 	msr	PRIMASK, r3
}
 800f7ac:	46c0      	nop			; (mov r8, r8)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	689a      	ldr	r2, [r3, #8]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2140      	movs	r1, #64	; 0x40
 800f7ba:	438a      	bics	r2, r1
 800f7bc:	609a      	str	r2, [r3, #8]
 800f7be:	183b      	adds	r3, r7, r0
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7c6:	f383 8810 	msr	PRIMASK, r3
}
 800f7ca:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d012      	beq.n	800f7fa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d8:	4a14      	ldr	r2, [pc, #80]	; (800f82c <HAL_UART_IRQHandler+0x2a0>)
 800f7da:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7e0:	0018      	movs	r0, r3
 800f7e2:	f7fd fdfd 	bl	800d3e0 <HAL_DMA_Abort_IT>
 800f7e6:	1e03      	subs	r3, r0, #0
 800f7e8:	d01a      	beq.n	800f820 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7f4:	0018      	movs	r0, r3
 800f7f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7f8:	e012      	b.n	800f820 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	0018      	movs	r0, r3
 800f7fe:	f000 f9ad 	bl	800fb5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f802:	e00d      	b.n	800f820 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	0018      	movs	r0, r3
 800f808:	f000 f9a8 	bl	800fb5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f80c:	e008      	b.n	800f820 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	0018      	movs	r0, r3
 800f812:	f000 f9a3 	bl	800fb5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2280      	movs	r2, #128	; 0x80
 800f81a:	2100      	movs	r1, #0
 800f81c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800f81e:	e17f      	b.n	800fb20 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f820:	46c0      	nop			; (mov r8, r8)
    return;
 800f822:	e17d      	b.n	800fb20 <HAL_UART_IRQHandler+0x594>
 800f824:	0000080f 	.word	0x0000080f
 800f828:	04000120 	.word	0x04000120
 800f82c:	08010439 	.word	0x08010439

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f834:	2b01      	cmp	r3, #1
 800f836:	d000      	beq.n	800f83a <HAL_UART_IRQHandler+0x2ae>
 800f838:	e131      	b.n	800fa9e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f83a:	23a4      	movs	r3, #164	; 0xa4
 800f83c:	18fb      	adds	r3, r7, r3
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2210      	movs	r2, #16
 800f842:	4013      	ands	r3, r2
 800f844:	d100      	bne.n	800f848 <HAL_UART_IRQHandler+0x2bc>
 800f846:	e12a      	b.n	800fa9e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f848:	23a0      	movs	r3, #160	; 0xa0
 800f84a:	18fb      	adds	r3, r7, r3
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2210      	movs	r2, #16
 800f850:	4013      	ands	r3, r2
 800f852:	d100      	bne.n	800f856 <HAL_UART_IRQHandler+0x2ca>
 800f854:	e123      	b.n	800fa9e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2210      	movs	r2, #16
 800f85c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	2240      	movs	r2, #64	; 0x40
 800f866:	4013      	ands	r3, r2
 800f868:	2b40      	cmp	r3, #64	; 0x40
 800f86a:	d000      	beq.n	800f86e <HAL_UART_IRQHandler+0x2e2>
 800f86c:	e09b      	b.n	800f9a6 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	685a      	ldr	r2, [r3, #4]
 800f876:	217e      	movs	r1, #126	; 0x7e
 800f878:	187b      	adds	r3, r7, r1
 800f87a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800f87c:	187b      	adds	r3, r7, r1
 800f87e:	881b      	ldrh	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d100      	bne.n	800f886 <HAL_UART_IRQHandler+0x2fa>
 800f884:	e14e      	b.n	800fb24 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2258      	movs	r2, #88	; 0x58
 800f88a:	5a9b      	ldrh	r3, [r3, r2]
 800f88c:	187a      	adds	r2, r7, r1
 800f88e:	8812      	ldrh	r2, [r2, #0]
 800f890:	429a      	cmp	r2, r3
 800f892:	d300      	bcc.n	800f896 <HAL_UART_IRQHandler+0x30a>
 800f894:	e146      	b.n	800fb24 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	187a      	adds	r2, r7, r1
 800f89a:	215a      	movs	r1, #90	; 0x5a
 800f89c:	8812      	ldrh	r2, [r2, #0]
 800f89e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8a4:	699b      	ldr	r3, [r3, #24]
 800f8a6:	2b20      	cmp	r3, #32
 800f8a8:	d06e      	beq.n	800f988 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8aa:	f3ef 8310 	mrs	r3, PRIMASK
 800f8ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800f8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8b2:	67bb      	str	r3, [r7, #120]	; 0x78
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ba:	f383 8810 	msr	PRIMASK, r3
}
 800f8be:	46c0      	nop			; (mov r8, r8)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	499a      	ldr	r1, [pc, #616]	; (800fb34 <HAL_UART_IRQHandler+0x5a8>)
 800f8cc:	400a      	ands	r2, r1
 800f8ce:	601a      	str	r2, [r3, #0]
 800f8d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d6:	f383 8810 	msr	PRIMASK, r3
}
 800f8da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800f8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800f8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8e4:	677b      	str	r3, [r7, #116]	; 0x74
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ec:	f383 8810 	msr	PRIMASK, r3
}
 800f8f0:	46c0      	nop			; (mov r8, r8)
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	689a      	ldr	r2, [r3, #8]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2101      	movs	r1, #1
 800f8fe:	438a      	bics	r2, r1
 800f900:	609a      	str	r2, [r3, #8]
 800f902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f904:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f908:	f383 8810 	msr	PRIMASK, r3
}
 800f90c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f90e:	f3ef 8310 	mrs	r3, PRIMASK
 800f912:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800f914:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f916:	673b      	str	r3, [r7, #112]	; 0x70
 800f918:	2301      	movs	r3, #1
 800f91a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f91e:	f383 8810 	msr	PRIMASK, r3
}
 800f922:	46c0      	nop			; (mov r8, r8)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	689a      	ldr	r2, [r3, #8]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2140      	movs	r1, #64	; 0x40
 800f930:	438a      	bics	r2, r1
 800f932:	609a      	str	r2, [r3, #8]
 800f934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f936:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f93a:	f383 8810 	msr	PRIMASK, r3
}
 800f93e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2220      	movs	r2, #32
 800f944:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f94c:	f3ef 8310 	mrs	r3, PRIMASK
 800f950:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800f952:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f954:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f956:	2301      	movs	r3, #1
 800f958:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f95a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f95c:	f383 8810 	msr	PRIMASK, r3
}
 800f960:	46c0      	nop			; (mov r8, r8)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2110      	movs	r1, #16
 800f96e:	438a      	bics	r2, r1
 800f970:	601a      	str	r2, [r3, #0]
 800f972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f974:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f978:	f383 8810 	msr	PRIMASK, r3
}
 800f97c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f982:	0018      	movs	r0, r3
 800f984:	f7fd fcf4 	bl	800d370 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2258      	movs	r2, #88	; 0x58
 800f98c:	5a9a      	ldrh	r2, [r3, r2]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	215a      	movs	r1, #90	; 0x5a
 800f992:	5a5b      	ldrh	r3, [r3, r1]
 800f994:	b29b      	uxth	r3, r3
 800f996:	1ad3      	subs	r3, r2, r3
 800f998:	b29a      	uxth	r2, r3
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	0011      	movs	r1, r2
 800f99e:	0018      	movs	r0, r3
 800f9a0:	f000 f8e4 	bl	800fb6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f9a4:	e0be      	b.n	800fb24 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2258      	movs	r2, #88	; 0x58
 800f9aa:	5a99      	ldrh	r1, [r3, r2]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	225a      	movs	r2, #90	; 0x5a
 800f9b0:	5a9b      	ldrh	r3, [r3, r2]
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	208e      	movs	r0, #142	; 0x8e
 800f9b6:	183b      	adds	r3, r7, r0
 800f9b8:	1a8a      	subs	r2, r1, r2
 800f9ba:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	225a      	movs	r2, #90	; 0x5a
 800f9c0:	5a9b      	ldrh	r3, [r3, r2]
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d100      	bne.n	800f9ca <HAL_UART_IRQHandler+0x43e>
 800f9c8:	e0ae      	b.n	800fb28 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800f9ca:	183b      	adds	r3, r7, r0
 800f9cc:	881b      	ldrh	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d100      	bne.n	800f9d4 <HAL_UART_IRQHandler+0x448>
 800f9d2:	e0a9      	b.n	800fb28 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9d4:	f3ef 8310 	mrs	r3, PRIMASK
 800f9d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f9da:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f9dc:	2488      	movs	r4, #136	; 0x88
 800f9de:	193a      	adds	r2, r7, r4
 800f9e0:	6013      	str	r3, [r2, #0]
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	f383 8810 	msr	PRIMASK, r3
}
 800f9ec:	46c0      	nop			; (mov r8, r8)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	494f      	ldr	r1, [pc, #316]	; (800fb38 <HAL_UART_IRQHandler+0x5ac>)
 800f9fa:	400a      	ands	r2, r1
 800f9fc:	601a      	str	r2, [r3, #0]
 800f9fe:	193b      	adds	r3, r7, r4
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	f383 8810 	msr	PRIMASK, r3
}
 800fa0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa0c:	f3ef 8310 	mrs	r3, PRIMASK
 800fa10:	61bb      	str	r3, [r7, #24]
  return(result);
 800fa12:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa14:	2484      	movs	r4, #132	; 0x84
 800fa16:	193a      	adds	r2, r7, r4
 800fa18:	6013      	str	r3, [r2, #0]
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	f383 8810 	msr	PRIMASK, r3
}
 800fa24:	46c0      	nop			; (mov r8, r8)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	689a      	ldr	r2, [r3, #8]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2101      	movs	r1, #1
 800fa32:	438a      	bics	r2, r1
 800fa34:	609a      	str	r2, [r3, #8]
 800fa36:	193b      	adds	r3, r7, r4
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa3c:	6a3b      	ldr	r3, [r7, #32]
 800fa3e:	f383 8810 	msr	PRIMASK, r3
}
 800fa42:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2220      	movs	r2, #32
 800fa48:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2200      	movs	r2, #0
 800fa54:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa56:	f3ef 8310 	mrs	r3, PRIMASK
 800fa5a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa5e:	2480      	movs	r4, #128	; 0x80
 800fa60:	193a      	adds	r2, r7, r4
 800fa62:	6013      	str	r3, [r2, #0]
 800fa64:	2301      	movs	r3, #1
 800fa66:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6a:	f383 8810 	msr	PRIMASK, r3
}
 800fa6e:	46c0      	nop			; (mov r8, r8)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2110      	movs	r1, #16
 800fa7c:	438a      	bics	r2, r1
 800fa7e:	601a      	str	r2, [r3, #0]
 800fa80:	193b      	adds	r3, r7, r4
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa88:	f383 8810 	msr	PRIMASK, r3
}
 800fa8c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fa8e:	183b      	adds	r3, r7, r0
 800fa90:	881a      	ldrh	r2, [r3, #0]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	0011      	movs	r1, r2
 800fa96:	0018      	movs	r0, r3
 800fa98:	f000 f868 	bl	800fb6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fa9c:	e044      	b.n	800fb28 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fa9e:	23a4      	movs	r3, #164	; 0xa4
 800faa0:	18fb      	adds	r3, r7, r3
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	2380      	movs	r3, #128	; 0x80
 800faa6:	035b      	lsls	r3, r3, #13
 800faa8:	4013      	ands	r3, r2
 800faaa:	d010      	beq.n	800face <HAL_UART_IRQHandler+0x542>
 800faac:	239c      	movs	r3, #156	; 0x9c
 800faae:	18fb      	adds	r3, r7, r3
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	2380      	movs	r3, #128	; 0x80
 800fab4:	03db      	lsls	r3, r3, #15
 800fab6:	4013      	ands	r3, r2
 800fab8:	d009      	beq.n	800face <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2280      	movs	r2, #128	; 0x80
 800fac0:	0352      	lsls	r2, r2, #13
 800fac2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	0018      	movs	r0, r3
 800fac8:	f000 ff1c 	bl	8010904 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800facc:	e02f      	b.n	800fb2e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800face:	23a4      	movs	r3, #164	; 0xa4
 800fad0:	18fb      	adds	r3, r7, r3
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2280      	movs	r2, #128	; 0x80
 800fad6:	4013      	ands	r3, r2
 800fad8:	d00f      	beq.n	800fafa <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fada:	23a0      	movs	r3, #160	; 0xa0
 800fadc:	18fb      	adds	r3, r7, r3
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2280      	movs	r2, #128	; 0x80
 800fae2:	4013      	ands	r3, r2
 800fae4:	d009      	beq.n	800fafa <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800faea:	2b00      	cmp	r3, #0
 800faec:	d01e      	beq.n	800fb2c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800faf2:	687a      	ldr	r2, [r7, #4]
 800faf4:	0010      	movs	r0, r2
 800faf6:	4798      	blx	r3
    }
    return;
 800faf8:	e018      	b.n	800fb2c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fafa:	23a4      	movs	r3, #164	; 0xa4
 800fafc:	18fb      	adds	r3, r7, r3
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2240      	movs	r2, #64	; 0x40
 800fb02:	4013      	ands	r3, r2
 800fb04:	d013      	beq.n	800fb2e <HAL_UART_IRQHandler+0x5a2>
 800fb06:	23a0      	movs	r3, #160	; 0xa0
 800fb08:	18fb      	adds	r3, r7, r3
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	2240      	movs	r2, #64	; 0x40
 800fb0e:	4013      	ands	r3, r2
 800fb10:	d00d      	beq.n	800fb2e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	0018      	movs	r0, r3
 800fb16:	f000 fd5e 	bl	80105d6 <UART_EndTransmit_IT>
    return;
 800fb1a:	e008      	b.n	800fb2e <HAL_UART_IRQHandler+0x5a2>
      return;
 800fb1c:	46c0      	nop			; (mov r8, r8)
 800fb1e:	e006      	b.n	800fb2e <HAL_UART_IRQHandler+0x5a2>
    return;
 800fb20:	46c0      	nop			; (mov r8, r8)
 800fb22:	e004      	b.n	800fb2e <HAL_UART_IRQHandler+0x5a2>
      return;
 800fb24:	46c0      	nop			; (mov r8, r8)
 800fb26:	e002      	b.n	800fb2e <HAL_UART_IRQHandler+0x5a2>
      return;
 800fb28:	46c0      	nop			; (mov r8, r8)
 800fb2a:	e000      	b.n	800fb2e <HAL_UART_IRQHandler+0x5a2>
    return;
 800fb2c:	46c0      	nop			; (mov r8, r8)
  }

}
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	b02b      	add	sp, #172	; 0xac
 800fb32:	bd90      	pop	{r4, r7, pc}
 800fb34:	fffffeff 	.word	0xfffffeff
 800fb38:	fffffedf 	.word	0xfffffedf

0800fb3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fb44:	46c0      	nop			; (mov r8, r8)
 800fb46:	46bd      	mov	sp, r7
 800fb48:	b002      	add	sp, #8
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fb54:	46c0      	nop			; (mov r8, r8)
 800fb56:	46bd      	mov	sp, r7
 800fb58:	b002      	add	sp, #8
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fb64:	46c0      	nop			; (mov r8, r8)
 800fb66:	46bd      	mov	sp, r7
 800fb68:	b002      	add	sp, #8
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	000a      	movs	r2, r1
 800fb76:	1cbb      	adds	r3, r7, #2
 800fb78:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fb7a:	46c0      	nop			; (mov r8, r8)
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	b002      	add	sp, #8
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b088      	sub	sp, #32
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fb8c:	231e      	movs	r3, #30
 800fb8e:	18fb      	adds	r3, r7, r3
 800fb90:	2200      	movs	r2, #0
 800fb92:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	689a      	ldr	r2, [r3, #8]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	691b      	ldr	r3, [r3, #16]
 800fb9c:	431a      	orrs	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	695b      	ldr	r3, [r3, #20]
 800fba2:	431a      	orrs	r2, r3
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	69db      	ldr	r3, [r3, #28]
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4aaf      	ldr	r2, [pc, #700]	; (800fe70 <UART_SetConfig+0x2ec>)
 800fbb4:	4013      	ands	r3, r2
 800fbb6:	0019      	movs	r1, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	697a      	ldr	r2, [r7, #20]
 800fbbe:	430a      	orrs	r2, r1
 800fbc0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	685b      	ldr	r3, [r3, #4]
 800fbc8:	4aaa      	ldr	r2, [pc, #680]	; (800fe74 <UART_SetConfig+0x2f0>)
 800fbca:	4013      	ands	r3, r2
 800fbcc:	0019      	movs	r1, r3
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	68da      	ldr	r2, [r3, #12]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	430a      	orrs	r2, r1
 800fbd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	699b      	ldr	r3, [r3, #24]
 800fbde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6a1b      	ldr	r3, [r3, #32]
 800fbe4:	697a      	ldr	r2, [r7, #20]
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	689b      	ldr	r3, [r3, #8]
 800fbf0:	4aa1      	ldr	r2, [pc, #644]	; (800fe78 <UART_SetConfig+0x2f4>)
 800fbf2:	4013      	ands	r3, r2
 800fbf4:	0019      	movs	r1, r3
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	697a      	ldr	r2, [r7, #20]
 800fbfc:	430a      	orrs	r2, r1
 800fbfe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4a9d      	ldr	r2, [pc, #628]	; (800fe7c <UART_SetConfig+0x2f8>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d127      	bne.n	800fc5a <UART_SetConfig+0xd6>
 800fc0a:	4b9d      	ldr	r3, [pc, #628]	; (800fe80 <UART_SetConfig+0x2fc>)
 800fc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc0e:	2203      	movs	r2, #3
 800fc10:	4013      	ands	r3, r2
 800fc12:	2b03      	cmp	r3, #3
 800fc14:	d00d      	beq.n	800fc32 <UART_SetConfig+0xae>
 800fc16:	d81b      	bhi.n	800fc50 <UART_SetConfig+0xcc>
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d014      	beq.n	800fc46 <UART_SetConfig+0xc2>
 800fc1c:	d818      	bhi.n	800fc50 <UART_SetConfig+0xcc>
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d002      	beq.n	800fc28 <UART_SetConfig+0xa4>
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d00a      	beq.n	800fc3c <UART_SetConfig+0xb8>
 800fc26:	e013      	b.n	800fc50 <UART_SetConfig+0xcc>
 800fc28:	231f      	movs	r3, #31
 800fc2a:	18fb      	adds	r3, r7, r3
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	701a      	strb	r2, [r3, #0]
 800fc30:	e065      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fc32:	231f      	movs	r3, #31
 800fc34:	18fb      	adds	r3, r7, r3
 800fc36:	2202      	movs	r2, #2
 800fc38:	701a      	strb	r2, [r3, #0]
 800fc3a:	e060      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fc3c:	231f      	movs	r3, #31
 800fc3e:	18fb      	adds	r3, r7, r3
 800fc40:	2204      	movs	r2, #4
 800fc42:	701a      	strb	r2, [r3, #0]
 800fc44:	e05b      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fc46:	231f      	movs	r3, #31
 800fc48:	18fb      	adds	r3, r7, r3
 800fc4a:	2208      	movs	r2, #8
 800fc4c:	701a      	strb	r2, [r3, #0]
 800fc4e:	e056      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fc50:	231f      	movs	r3, #31
 800fc52:	18fb      	adds	r3, r7, r3
 800fc54:	2210      	movs	r2, #16
 800fc56:	701a      	strb	r2, [r3, #0]
 800fc58:	e051      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	4a89      	ldr	r2, [pc, #548]	; (800fe84 <UART_SetConfig+0x300>)
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d134      	bne.n	800fcce <UART_SetConfig+0x14a>
 800fc64:	4b86      	ldr	r3, [pc, #536]	; (800fe80 <UART_SetConfig+0x2fc>)
 800fc66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc68:	23c0      	movs	r3, #192	; 0xc0
 800fc6a:	029b      	lsls	r3, r3, #10
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	22c0      	movs	r2, #192	; 0xc0
 800fc70:	0292      	lsls	r2, r2, #10
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d017      	beq.n	800fca6 <UART_SetConfig+0x122>
 800fc76:	22c0      	movs	r2, #192	; 0xc0
 800fc78:	0292      	lsls	r2, r2, #10
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d822      	bhi.n	800fcc4 <UART_SetConfig+0x140>
 800fc7e:	2280      	movs	r2, #128	; 0x80
 800fc80:	0292      	lsls	r2, r2, #10
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d019      	beq.n	800fcba <UART_SetConfig+0x136>
 800fc86:	2280      	movs	r2, #128	; 0x80
 800fc88:	0292      	lsls	r2, r2, #10
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d81a      	bhi.n	800fcc4 <UART_SetConfig+0x140>
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d004      	beq.n	800fc9c <UART_SetConfig+0x118>
 800fc92:	2280      	movs	r2, #128	; 0x80
 800fc94:	0252      	lsls	r2, r2, #9
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d00a      	beq.n	800fcb0 <UART_SetConfig+0x12c>
 800fc9a:	e013      	b.n	800fcc4 <UART_SetConfig+0x140>
 800fc9c:	231f      	movs	r3, #31
 800fc9e:	18fb      	adds	r3, r7, r3
 800fca0:	2200      	movs	r2, #0
 800fca2:	701a      	strb	r2, [r3, #0]
 800fca4:	e02b      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fca6:	231f      	movs	r3, #31
 800fca8:	18fb      	adds	r3, r7, r3
 800fcaa:	2202      	movs	r2, #2
 800fcac:	701a      	strb	r2, [r3, #0]
 800fcae:	e026      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fcb0:	231f      	movs	r3, #31
 800fcb2:	18fb      	adds	r3, r7, r3
 800fcb4:	2204      	movs	r2, #4
 800fcb6:	701a      	strb	r2, [r3, #0]
 800fcb8:	e021      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fcba:	231f      	movs	r3, #31
 800fcbc:	18fb      	adds	r3, r7, r3
 800fcbe:	2208      	movs	r2, #8
 800fcc0:	701a      	strb	r2, [r3, #0]
 800fcc2:	e01c      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fcc4:	231f      	movs	r3, #31
 800fcc6:	18fb      	adds	r3, r7, r3
 800fcc8:	2210      	movs	r2, #16
 800fcca:	701a      	strb	r2, [r3, #0]
 800fccc:	e017      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a6d      	ldr	r2, [pc, #436]	; (800fe88 <UART_SetConfig+0x304>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d104      	bne.n	800fce2 <UART_SetConfig+0x15e>
 800fcd8:	231f      	movs	r3, #31
 800fcda:	18fb      	adds	r3, r7, r3
 800fcdc:	2200      	movs	r2, #0
 800fcde:	701a      	strb	r2, [r3, #0]
 800fce0:	e00d      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4a69      	ldr	r2, [pc, #420]	; (800fe8c <UART_SetConfig+0x308>)
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d104      	bne.n	800fcf6 <UART_SetConfig+0x172>
 800fcec:	231f      	movs	r3, #31
 800fcee:	18fb      	adds	r3, r7, r3
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	701a      	strb	r2, [r3, #0]
 800fcf4:	e003      	b.n	800fcfe <UART_SetConfig+0x17a>
 800fcf6:	231f      	movs	r3, #31
 800fcf8:	18fb      	adds	r3, r7, r3
 800fcfa:	2210      	movs	r2, #16
 800fcfc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	69da      	ldr	r2, [r3, #28]
 800fd02:	2380      	movs	r3, #128	; 0x80
 800fd04:	021b      	lsls	r3, r3, #8
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d15d      	bne.n	800fdc6 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800fd0a:	231f      	movs	r3, #31
 800fd0c:	18fb      	adds	r3, r7, r3
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	2b08      	cmp	r3, #8
 800fd12:	d015      	beq.n	800fd40 <UART_SetConfig+0x1bc>
 800fd14:	dc18      	bgt.n	800fd48 <UART_SetConfig+0x1c4>
 800fd16:	2b04      	cmp	r3, #4
 800fd18:	d00d      	beq.n	800fd36 <UART_SetConfig+0x1b2>
 800fd1a:	dc15      	bgt.n	800fd48 <UART_SetConfig+0x1c4>
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d002      	beq.n	800fd26 <UART_SetConfig+0x1a2>
 800fd20:	2b02      	cmp	r3, #2
 800fd22:	d005      	beq.n	800fd30 <UART_SetConfig+0x1ac>
 800fd24:	e010      	b.n	800fd48 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd26:	f7fe fa3b 	bl	800e1a0 <HAL_RCC_GetPCLK1Freq>
 800fd2a:	0003      	movs	r3, r0
 800fd2c:	61bb      	str	r3, [r7, #24]
        break;
 800fd2e:	e012      	b.n	800fd56 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fd30:	4b57      	ldr	r3, [pc, #348]	; (800fe90 <UART_SetConfig+0x30c>)
 800fd32:	61bb      	str	r3, [r7, #24]
        break;
 800fd34:	e00f      	b.n	800fd56 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fd36:	f7fe f9a9 	bl	800e08c <HAL_RCC_GetSysClockFreq>
 800fd3a:	0003      	movs	r3, r0
 800fd3c:	61bb      	str	r3, [r7, #24]
        break;
 800fd3e:	e00a      	b.n	800fd56 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd40:	2380      	movs	r3, #128	; 0x80
 800fd42:	021b      	lsls	r3, r3, #8
 800fd44:	61bb      	str	r3, [r7, #24]
        break;
 800fd46:	e006      	b.n	800fd56 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fd4c:	231e      	movs	r3, #30
 800fd4e:	18fb      	adds	r3, r7, r3
 800fd50:	2201      	movs	r2, #1
 800fd52:	701a      	strb	r2, [r3, #0]
        break;
 800fd54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd56:	69bb      	ldr	r3, [r7, #24]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d100      	bne.n	800fd5e <UART_SetConfig+0x1da>
 800fd5c:	e07b      	b.n	800fe56 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fd5e:	69bb      	ldr	r3, [r7, #24]
 800fd60:	005a      	lsls	r2, r3, #1
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	085b      	lsrs	r3, r3, #1
 800fd68:	18d2      	adds	r2, r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	0019      	movs	r1, r3
 800fd70:	0010      	movs	r0, r2
 800fd72:	f7f9 f9e5 	bl	8009140 <__udivsi3>
 800fd76:	0003      	movs	r3, r0
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	2b0f      	cmp	r3, #15
 800fd80:	d91c      	bls.n	800fdbc <UART_SetConfig+0x238>
 800fd82:	693a      	ldr	r2, [r7, #16]
 800fd84:	2380      	movs	r3, #128	; 0x80
 800fd86:	025b      	lsls	r3, r3, #9
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d217      	bcs.n	800fdbc <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	b29a      	uxth	r2, r3
 800fd90:	200e      	movs	r0, #14
 800fd92:	183b      	adds	r3, r7, r0
 800fd94:	210f      	movs	r1, #15
 800fd96:	438a      	bics	r2, r1
 800fd98:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	085b      	lsrs	r3, r3, #1
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	2207      	movs	r2, #7
 800fda2:	4013      	ands	r3, r2
 800fda4:	b299      	uxth	r1, r3
 800fda6:	183b      	adds	r3, r7, r0
 800fda8:	183a      	adds	r2, r7, r0
 800fdaa:	8812      	ldrh	r2, [r2, #0]
 800fdac:	430a      	orrs	r2, r1
 800fdae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	183a      	adds	r2, r7, r0
 800fdb6:	8812      	ldrh	r2, [r2, #0]
 800fdb8:	60da      	str	r2, [r3, #12]
 800fdba:	e04c      	b.n	800fe56 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800fdbc:	231e      	movs	r3, #30
 800fdbe:	18fb      	adds	r3, r7, r3
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	701a      	strb	r2, [r3, #0]
 800fdc4:	e047      	b.n	800fe56 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fdc6:	231f      	movs	r3, #31
 800fdc8:	18fb      	adds	r3, r7, r3
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	2b08      	cmp	r3, #8
 800fdce:	d015      	beq.n	800fdfc <UART_SetConfig+0x278>
 800fdd0:	dc18      	bgt.n	800fe04 <UART_SetConfig+0x280>
 800fdd2:	2b04      	cmp	r3, #4
 800fdd4:	d00d      	beq.n	800fdf2 <UART_SetConfig+0x26e>
 800fdd6:	dc15      	bgt.n	800fe04 <UART_SetConfig+0x280>
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d002      	beq.n	800fde2 <UART_SetConfig+0x25e>
 800fddc:	2b02      	cmp	r3, #2
 800fdde:	d005      	beq.n	800fdec <UART_SetConfig+0x268>
 800fde0:	e010      	b.n	800fe04 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fde2:	f7fe f9dd 	bl	800e1a0 <HAL_RCC_GetPCLK1Freq>
 800fde6:	0003      	movs	r3, r0
 800fde8:	61bb      	str	r3, [r7, #24]
        break;
 800fdea:	e012      	b.n	800fe12 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fdec:	4b28      	ldr	r3, [pc, #160]	; (800fe90 <UART_SetConfig+0x30c>)
 800fdee:	61bb      	str	r3, [r7, #24]
        break;
 800fdf0:	e00f      	b.n	800fe12 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fdf2:	f7fe f94b 	bl	800e08c <HAL_RCC_GetSysClockFreq>
 800fdf6:	0003      	movs	r3, r0
 800fdf8:	61bb      	str	r3, [r7, #24]
        break;
 800fdfa:	e00a      	b.n	800fe12 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fdfc:	2380      	movs	r3, #128	; 0x80
 800fdfe:	021b      	lsls	r3, r3, #8
 800fe00:	61bb      	str	r3, [r7, #24]
        break;
 800fe02:	e006      	b.n	800fe12 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 800fe04:	2300      	movs	r3, #0
 800fe06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fe08:	231e      	movs	r3, #30
 800fe0a:	18fb      	adds	r3, r7, r3
 800fe0c:	2201      	movs	r2, #1
 800fe0e:	701a      	strb	r2, [r3, #0]
        break;
 800fe10:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800fe12:	69bb      	ldr	r3, [r7, #24]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d01e      	beq.n	800fe56 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	085a      	lsrs	r2, r3, #1
 800fe1e:	69bb      	ldr	r3, [r7, #24]
 800fe20:	18d2      	adds	r2, r2, r3
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	685b      	ldr	r3, [r3, #4]
 800fe26:	0019      	movs	r1, r3
 800fe28:	0010      	movs	r0, r2
 800fe2a:	f7f9 f989 	bl	8009140 <__udivsi3>
 800fe2e:	0003      	movs	r3, r0
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	2b0f      	cmp	r3, #15
 800fe38:	d909      	bls.n	800fe4e <UART_SetConfig+0x2ca>
 800fe3a:	693a      	ldr	r2, [r7, #16]
 800fe3c:	2380      	movs	r3, #128	; 0x80
 800fe3e:	025b      	lsls	r3, r3, #9
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d204      	bcs.n	800fe4e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	693a      	ldr	r2, [r7, #16]
 800fe4a:	60da      	str	r2, [r3, #12]
 800fe4c:	e003      	b.n	800fe56 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 800fe4e:	231e      	movs	r3, #30
 800fe50:	18fb      	adds	r3, r7, r3
 800fe52:	2201      	movs	r2, #1
 800fe54:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800fe62:	231e      	movs	r3, #30
 800fe64:	18fb      	adds	r3, r7, r3
 800fe66:	781b      	ldrb	r3, [r3, #0]
}
 800fe68:	0018      	movs	r0, r3
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	b008      	add	sp, #32
 800fe6e:	bd80      	pop	{r7, pc}
 800fe70:	efff69f3 	.word	0xefff69f3
 800fe74:	ffffcfff 	.word	0xffffcfff
 800fe78:	fffff4ff 	.word	0xfffff4ff
 800fe7c:	40013800 	.word	0x40013800
 800fe80:	40021000 	.word	0x40021000
 800fe84:	40004400 	.word	0x40004400
 800fe88:	40004800 	.word	0x40004800
 800fe8c:	40004c00 	.word	0x40004c00
 800fe90:	007a1200 	.word	0x007a1200

0800fe94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea0:	2201      	movs	r2, #1
 800fea2:	4013      	ands	r3, r2
 800fea4:	d00b      	beq.n	800febe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	4a4a      	ldr	r2, [pc, #296]	; (800ffd8 <UART_AdvFeatureConfig+0x144>)
 800feae:	4013      	ands	r3, r2
 800feb0:	0019      	movs	r1, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	430a      	orrs	r2, r1
 800febc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec2:	2202      	movs	r2, #2
 800fec4:	4013      	ands	r3, r2
 800fec6:	d00b      	beq.n	800fee0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	4a43      	ldr	r2, [pc, #268]	; (800ffdc <UART_AdvFeatureConfig+0x148>)
 800fed0:	4013      	ands	r3, r2
 800fed2:	0019      	movs	r1, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	430a      	orrs	r2, r1
 800fede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee4:	2204      	movs	r2, #4
 800fee6:	4013      	ands	r3, r2
 800fee8:	d00b      	beq.n	800ff02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	4a3b      	ldr	r2, [pc, #236]	; (800ffe0 <UART_AdvFeatureConfig+0x14c>)
 800fef2:	4013      	ands	r3, r2
 800fef4:	0019      	movs	r1, r3
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	430a      	orrs	r2, r1
 800ff00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff06:	2208      	movs	r2, #8
 800ff08:	4013      	ands	r3, r2
 800ff0a:	d00b      	beq.n	800ff24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	4a34      	ldr	r2, [pc, #208]	; (800ffe4 <UART_AdvFeatureConfig+0x150>)
 800ff14:	4013      	ands	r3, r2
 800ff16:	0019      	movs	r1, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	430a      	orrs	r2, r1
 800ff22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff28:	2210      	movs	r2, #16
 800ff2a:	4013      	ands	r3, r2
 800ff2c:	d00b      	beq.n	800ff46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	689b      	ldr	r3, [r3, #8]
 800ff34:	4a2c      	ldr	r2, [pc, #176]	; (800ffe8 <UART_AdvFeatureConfig+0x154>)
 800ff36:	4013      	ands	r3, r2
 800ff38:	0019      	movs	r1, r3
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	430a      	orrs	r2, r1
 800ff44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4a:	2220      	movs	r2, #32
 800ff4c:	4013      	ands	r3, r2
 800ff4e:	d00b      	beq.n	800ff68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	689b      	ldr	r3, [r3, #8]
 800ff56:	4a25      	ldr	r2, [pc, #148]	; (800ffec <UART_AdvFeatureConfig+0x158>)
 800ff58:	4013      	ands	r3, r2
 800ff5a:	0019      	movs	r1, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	430a      	orrs	r2, r1
 800ff66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff6c:	2240      	movs	r2, #64	; 0x40
 800ff6e:	4013      	ands	r3, r2
 800ff70:	d01d      	beq.n	800ffae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	4a1d      	ldr	r2, [pc, #116]	; (800fff0 <UART_AdvFeatureConfig+0x15c>)
 800ff7a:	4013      	ands	r3, r2
 800ff7c:	0019      	movs	r1, r3
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	430a      	orrs	r2, r1
 800ff88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff8e:	2380      	movs	r3, #128	; 0x80
 800ff90:	035b      	lsls	r3, r3, #13
 800ff92:	429a      	cmp	r2, r3
 800ff94:	d10b      	bne.n	800ffae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	4a15      	ldr	r2, [pc, #84]	; (800fff4 <UART_AdvFeatureConfig+0x160>)
 800ff9e:	4013      	ands	r3, r2
 800ffa0:	0019      	movs	r1, r3
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	430a      	orrs	r2, r1
 800ffac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb2:	2280      	movs	r2, #128	; 0x80
 800ffb4:	4013      	ands	r3, r2
 800ffb6:	d00b      	beq.n	800ffd0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	4a0e      	ldr	r2, [pc, #56]	; (800fff8 <UART_AdvFeatureConfig+0x164>)
 800ffc0:	4013      	ands	r3, r2
 800ffc2:	0019      	movs	r1, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	430a      	orrs	r2, r1
 800ffce:	605a      	str	r2, [r3, #4]
  }
}
 800ffd0:	46c0      	nop			; (mov r8, r8)
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	b002      	add	sp, #8
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	fffdffff 	.word	0xfffdffff
 800ffdc:	fffeffff 	.word	0xfffeffff
 800ffe0:	fffbffff 	.word	0xfffbffff
 800ffe4:	ffff7fff 	.word	0xffff7fff
 800ffe8:	ffffefff 	.word	0xffffefff
 800ffec:	ffffdfff 	.word	0xffffdfff
 800fff0:	ffefffff 	.word	0xffefffff
 800fff4:	ff9fffff 	.word	0xff9fffff
 800fff8:	fff7ffff 	.word	0xfff7ffff

0800fffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b086      	sub	sp, #24
 8010000:	af02      	add	r7, sp, #8
 8010002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2280      	movs	r2, #128	; 0x80
 8010008:	2100      	movs	r1, #0
 801000a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801000c:	f7fd f8a4 	bl	800d158 <HAL_GetTick>
 8010010:	0003      	movs	r3, r0
 8010012:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2208      	movs	r2, #8
 801001c:	4013      	ands	r3, r2
 801001e:	2b08      	cmp	r3, #8
 8010020:	d10c      	bne.n	801003c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2280      	movs	r2, #128	; 0x80
 8010026:	0391      	lsls	r1, r2, #14
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	4a17      	ldr	r2, [pc, #92]	; (8010088 <UART_CheckIdleState+0x8c>)
 801002c:	9200      	str	r2, [sp, #0]
 801002e:	2200      	movs	r2, #0
 8010030:	f000 f82c 	bl	801008c <UART_WaitOnFlagUntilTimeout>
 8010034:	1e03      	subs	r3, r0, #0
 8010036:	d001      	beq.n	801003c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010038:	2303      	movs	r3, #3
 801003a:	e021      	b.n	8010080 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	2204      	movs	r2, #4
 8010044:	4013      	ands	r3, r2
 8010046:	2b04      	cmp	r3, #4
 8010048:	d10c      	bne.n	8010064 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2280      	movs	r2, #128	; 0x80
 801004e:	03d1      	lsls	r1, r2, #15
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	4a0d      	ldr	r2, [pc, #52]	; (8010088 <UART_CheckIdleState+0x8c>)
 8010054:	9200      	str	r2, [sp, #0]
 8010056:	2200      	movs	r2, #0
 8010058:	f000 f818 	bl	801008c <UART_WaitOnFlagUntilTimeout>
 801005c:	1e03      	subs	r3, r0, #0
 801005e:	d001      	beq.n	8010064 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010060:	2303      	movs	r3, #3
 8010062:	e00d      	b.n	8010080 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2220      	movs	r2, #32
 8010068:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2220      	movs	r2, #32
 801006e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2274      	movs	r2, #116	; 0x74
 801007a:	2100      	movs	r1, #0
 801007c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801007e:	2300      	movs	r3, #0
}
 8010080:	0018      	movs	r0, r3
 8010082:	46bd      	mov	sp, r7
 8010084:	b004      	add	sp, #16
 8010086:	bd80      	pop	{r7, pc}
 8010088:	01ffffff 	.word	0x01ffffff

0801008c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b094      	sub	sp, #80	; 0x50
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	603b      	str	r3, [r7, #0]
 8010098:	1dfb      	adds	r3, r7, #7
 801009a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801009c:	e0a3      	b.n	80101e6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801009e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100a0:	3301      	adds	r3, #1
 80100a2:	d100      	bne.n	80100a6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80100a4:	e09f      	b.n	80101e6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80100a6:	f7fd f857 	bl	800d158 <HAL_GetTick>
 80100aa:	0002      	movs	r2, r0
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d302      	bcc.n	80100bc <UART_WaitOnFlagUntilTimeout+0x30>
 80100b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d13d      	bne.n	8010138 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100bc:	f3ef 8310 	mrs	r3, PRIMASK
 80100c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80100c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80100c4:	647b      	str	r3, [r7, #68]	; 0x44
 80100c6:	2301      	movs	r3, #1
 80100c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100cc:	f383 8810 	msr	PRIMASK, r3
}
 80100d0:	46c0      	nop			; (mov r8, r8)
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	494c      	ldr	r1, [pc, #304]	; (8010210 <UART_WaitOnFlagUntilTimeout+0x184>)
 80100de:	400a      	ands	r2, r1
 80100e0:	601a      	str	r2, [r3, #0]
 80100e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100e4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e8:	f383 8810 	msr	PRIMASK, r3
}
 80100ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100ee:	f3ef 8310 	mrs	r3, PRIMASK
 80100f2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80100f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100f6:	643b      	str	r3, [r7, #64]	; 0x40
 80100f8:	2301      	movs	r3, #1
 80100fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fe:	f383 8810 	msr	PRIMASK, r3
}
 8010102:	46c0      	nop			; (mov r8, r8)
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	689a      	ldr	r2, [r3, #8]
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2101      	movs	r1, #1
 8010110:	438a      	bics	r2, r1
 8010112:	609a      	str	r2, [r3, #8]
 8010114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010116:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801011a:	f383 8810 	msr	PRIMASK, r3
}
 801011e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2220      	movs	r2, #32
 8010124:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2220      	movs	r2, #32
 801012a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2274      	movs	r2, #116	; 0x74
 8010130:	2100      	movs	r1, #0
 8010132:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8010134:	2303      	movs	r3, #3
 8010136:	e067      	b.n	8010208 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	2204      	movs	r2, #4
 8010140:	4013      	ands	r3, r2
 8010142:	d050      	beq.n	80101e6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	69da      	ldr	r2, [r3, #28]
 801014a:	2380      	movs	r3, #128	; 0x80
 801014c:	011b      	lsls	r3, r3, #4
 801014e:	401a      	ands	r2, r3
 8010150:	2380      	movs	r3, #128	; 0x80
 8010152:	011b      	lsls	r3, r3, #4
 8010154:	429a      	cmp	r2, r3
 8010156:	d146      	bne.n	80101e6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2280      	movs	r2, #128	; 0x80
 801015e:	0112      	lsls	r2, r2, #4
 8010160:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010162:	f3ef 8310 	mrs	r3, PRIMASK
 8010166:	613b      	str	r3, [r7, #16]
  return(result);
 8010168:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801016a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801016c:	2301      	movs	r3, #1
 801016e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	f383 8810 	msr	PRIMASK, r3
}
 8010176:	46c0      	nop			; (mov r8, r8)
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	681a      	ldr	r2, [r3, #0]
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4923      	ldr	r1, [pc, #140]	; (8010210 <UART_WaitOnFlagUntilTimeout+0x184>)
 8010184:	400a      	ands	r2, r1
 8010186:	601a      	str	r2, [r3, #0]
 8010188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801018a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	f383 8810 	msr	PRIMASK, r3
}
 8010192:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010194:	f3ef 8310 	mrs	r3, PRIMASK
 8010198:	61fb      	str	r3, [r7, #28]
  return(result);
 801019a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801019c:	64bb      	str	r3, [r7, #72]	; 0x48
 801019e:	2301      	movs	r3, #1
 80101a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101a2:	6a3b      	ldr	r3, [r7, #32]
 80101a4:	f383 8810 	msr	PRIMASK, r3
}
 80101a8:	46c0      	nop			; (mov r8, r8)
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	689a      	ldr	r2, [r3, #8]
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2101      	movs	r1, #1
 80101b6:	438a      	bics	r2, r1
 80101b8:	609a      	str	r2, [r3, #8]
 80101ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c0:	f383 8810 	msr	PRIMASK, r3
}
 80101c4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2220      	movs	r2, #32
 80101ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2220      	movs	r2, #32
 80101d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2280      	movs	r2, #128	; 0x80
 80101d6:	2120      	movs	r1, #32
 80101d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2274      	movs	r2, #116	; 0x74
 80101de:	2100      	movs	r1, #0
 80101e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80101e2:	2303      	movs	r3, #3
 80101e4:	e010      	b.n	8010208 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	69db      	ldr	r3, [r3, #28]
 80101ec:	68ba      	ldr	r2, [r7, #8]
 80101ee:	4013      	ands	r3, r2
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	1ad3      	subs	r3, r2, r3
 80101f4:	425a      	negs	r2, r3
 80101f6:	4153      	adcs	r3, r2
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	001a      	movs	r2, r3
 80101fc:	1dfb      	adds	r3, r7, #7
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	429a      	cmp	r2, r3
 8010202:	d100      	bne.n	8010206 <UART_WaitOnFlagUntilTimeout+0x17a>
 8010204:	e74b      	b.n	801009e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010206:	2300      	movs	r3, #0
}
 8010208:	0018      	movs	r0, r3
 801020a:	46bd      	mov	sp, r7
 801020c:	b014      	add	sp, #80	; 0x50
 801020e:	bd80      	pop	{r7, pc}
 8010210:	fffffe5f 	.word	0xfffffe5f

08010214 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b08c      	sub	sp, #48	; 0x30
 8010218:	af00      	add	r7, sp, #0
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	1dbb      	adds	r3, r7, #6
 8010220:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	68ba      	ldr	r2, [r7, #8]
 8010226:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	1dba      	adds	r2, r7, #6
 801022c:	2158      	movs	r1, #88	; 0x58
 801022e:	8812      	ldrh	r2, [r2, #0]
 8010230:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	1dba      	adds	r2, r7, #6
 8010236:	215a      	movs	r1, #90	; 0x5a
 8010238:	8812      	ldrh	r2, [r2, #0]
 801023a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2200      	movs	r2, #0
 8010240:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	689a      	ldr	r2, [r3, #8]
 8010246:	2380      	movs	r3, #128	; 0x80
 8010248:	015b      	lsls	r3, r3, #5
 801024a:	429a      	cmp	r2, r3
 801024c:	d10d      	bne.n	801026a <UART_Start_Receive_IT+0x56>
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	691b      	ldr	r3, [r3, #16]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d104      	bne.n	8010260 <UART_Start_Receive_IT+0x4c>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	225c      	movs	r2, #92	; 0x5c
 801025a:	4943      	ldr	r1, [pc, #268]	; (8010368 <UART_Start_Receive_IT+0x154>)
 801025c:	5299      	strh	r1, [r3, r2]
 801025e:	e02e      	b.n	80102be <UART_Start_Receive_IT+0xaa>
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	225c      	movs	r2, #92	; 0x5c
 8010264:	21ff      	movs	r1, #255	; 0xff
 8010266:	5299      	strh	r1, [r3, r2]
 8010268:	e029      	b.n	80102be <UART_Start_Receive_IT+0xaa>
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d10d      	bne.n	801028e <UART_Start_Receive_IT+0x7a>
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	691b      	ldr	r3, [r3, #16]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d104      	bne.n	8010284 <UART_Start_Receive_IT+0x70>
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	225c      	movs	r2, #92	; 0x5c
 801027e:	21ff      	movs	r1, #255	; 0xff
 8010280:	5299      	strh	r1, [r3, r2]
 8010282:	e01c      	b.n	80102be <UART_Start_Receive_IT+0xaa>
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	225c      	movs	r2, #92	; 0x5c
 8010288:	217f      	movs	r1, #127	; 0x7f
 801028a:	5299      	strh	r1, [r3, r2]
 801028c:	e017      	b.n	80102be <UART_Start_Receive_IT+0xaa>
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	689a      	ldr	r2, [r3, #8]
 8010292:	2380      	movs	r3, #128	; 0x80
 8010294:	055b      	lsls	r3, r3, #21
 8010296:	429a      	cmp	r2, r3
 8010298:	d10d      	bne.n	80102b6 <UART_Start_Receive_IT+0xa2>
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	691b      	ldr	r3, [r3, #16]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d104      	bne.n	80102ac <UART_Start_Receive_IT+0x98>
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	225c      	movs	r2, #92	; 0x5c
 80102a6:	217f      	movs	r1, #127	; 0x7f
 80102a8:	5299      	strh	r1, [r3, r2]
 80102aa:	e008      	b.n	80102be <UART_Start_Receive_IT+0xaa>
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	225c      	movs	r2, #92	; 0x5c
 80102b0:	213f      	movs	r1, #63	; 0x3f
 80102b2:	5299      	strh	r1, [r3, r2]
 80102b4:	e003      	b.n	80102be <UART_Start_Receive_IT+0xaa>
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	225c      	movs	r2, #92	; 0x5c
 80102ba:	2100      	movs	r1, #0
 80102bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2280      	movs	r2, #128	; 0x80
 80102c2:	2100      	movs	r1, #0
 80102c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	2222      	movs	r2, #34	; 0x22
 80102ca:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102cc:	f3ef 8310 	mrs	r3, PRIMASK
 80102d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80102d2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102d6:	2301      	movs	r3, #1
 80102d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102da:	6a3b      	ldr	r3, [r7, #32]
 80102dc:	f383 8810 	msr	PRIMASK, r3
}
 80102e0:	46c0      	nop			; (mov r8, r8)
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	689a      	ldr	r2, [r3, #8]
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2101      	movs	r1, #1
 80102ee:	430a      	orrs	r2, r1
 80102f0:	609a      	str	r2, [r3, #8]
 80102f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f8:	f383 8810 	msr	PRIMASK, r3
}
 80102fc:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	689a      	ldr	r2, [r3, #8]
 8010302:	2380      	movs	r3, #128	; 0x80
 8010304:	015b      	lsls	r3, r3, #5
 8010306:	429a      	cmp	r2, r3
 8010308:	d107      	bne.n	801031a <UART_Start_Receive_IT+0x106>
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	691b      	ldr	r3, [r3, #16]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d103      	bne.n	801031a <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	4a15      	ldr	r2, [pc, #84]	; (801036c <UART_Start_Receive_IT+0x158>)
 8010316:	665a      	str	r2, [r3, #100]	; 0x64
 8010318:	e002      	b.n	8010320 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	4a14      	ldr	r2, [pc, #80]	; (8010370 <UART_Start_Receive_IT+0x15c>)
 801031e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2274      	movs	r2, #116	; 0x74
 8010324:	2100      	movs	r1, #0
 8010326:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010328:	f3ef 8310 	mrs	r3, PRIMASK
 801032c:	613b      	str	r3, [r7, #16]
  return(result);
 801032e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8010330:	62bb      	str	r3, [r7, #40]	; 0x28
 8010332:	2301      	movs	r3, #1
 8010334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	f383 8810 	msr	PRIMASK, r3
}
 801033c:	46c0      	nop			; (mov r8, r8)
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2190      	movs	r1, #144	; 0x90
 801034a:	0049      	lsls	r1, r1, #1
 801034c:	430a      	orrs	r2, r1
 801034e:	601a      	str	r2, [r3, #0]
 8010350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010352:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	f383 8810 	msr	PRIMASK, r3
}
 801035a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 801035c:	2300      	movs	r3, #0
}
 801035e:	0018      	movs	r0, r3
 8010360:	46bd      	mov	sp, r7
 8010362:	b00c      	add	sp, #48	; 0x30
 8010364:	bd80      	pop	{r7, pc}
 8010366:	46c0      	nop			; (mov r8, r8)
 8010368:	000001ff 	.word	0x000001ff
 801036c:	0801079d 	.word	0x0801079d
 8010370:	0801062d 	.word	0x0801062d

08010374 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b08e      	sub	sp, #56	; 0x38
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801037c:	f3ef 8310 	mrs	r3, PRIMASK
 8010380:	617b      	str	r3, [r7, #20]
  return(result);
 8010382:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010384:	637b      	str	r3, [r7, #52]	; 0x34
 8010386:	2301      	movs	r3, #1
 8010388:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	f383 8810 	msr	PRIMASK, r3
}
 8010390:	46c0      	nop			; (mov r8, r8)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4925      	ldr	r1, [pc, #148]	; (8010434 <UART_EndRxTransfer+0xc0>)
 801039e:	400a      	ands	r2, r1
 80103a0:	601a      	str	r2, [r3, #0]
 80103a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	f383 8810 	msr	PRIMASK, r3
}
 80103ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103ae:	f3ef 8310 	mrs	r3, PRIMASK
 80103b2:	623b      	str	r3, [r7, #32]
  return(result);
 80103b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103b6:	633b      	str	r3, [r7, #48]	; 0x30
 80103b8:	2301      	movs	r3, #1
 80103ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103be:	f383 8810 	msr	PRIMASK, r3
}
 80103c2:	46c0      	nop			; (mov r8, r8)
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	689a      	ldr	r2, [r3, #8]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2101      	movs	r1, #1
 80103d0:	438a      	bics	r2, r1
 80103d2:	609a      	str	r2, [r3, #8]
 80103d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103da:	f383 8810 	msr	PRIMASK, r3
}
 80103de:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d118      	bne.n	801041a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103e8:	f3ef 8310 	mrs	r3, PRIMASK
 80103ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80103ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80103f2:	2301      	movs	r3, #1
 80103f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f383 8810 	msr	PRIMASK, r3
}
 80103fc:	46c0      	nop			; (mov r8, r8)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	2110      	movs	r1, #16
 801040a:	438a      	bics	r2, r1
 801040c:	601a      	str	r2, [r3, #0]
 801040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010410:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	f383 8810 	msr	PRIMASK, r3
}
 8010418:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2220      	movs	r2, #32
 801041e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2200      	movs	r2, #0
 801042a:	665a      	str	r2, [r3, #100]	; 0x64
}
 801042c:	46c0      	nop			; (mov r8, r8)
 801042e:	46bd      	mov	sp, r7
 8010430:	b00e      	add	sp, #56	; 0x38
 8010432:	bd80      	pop	{r7, pc}
 8010434:	fffffedf 	.word	0xfffffedf

08010438 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010444:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	225a      	movs	r2, #90	; 0x5a
 801044a:	2100      	movs	r1, #0
 801044c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2252      	movs	r2, #82	; 0x52
 8010452:	2100      	movs	r1, #0
 8010454:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	0018      	movs	r0, r3
 801045a:	f7ff fb7f 	bl	800fb5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801045e:	46c0      	nop			; (mov r8, r8)
 8010460:	46bd      	mov	sp, r7
 8010462:	b004      	add	sp, #16
 8010464:	bd80      	pop	{r7, pc}

08010466 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b08a      	sub	sp, #40	; 0x28
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010472:	2b21      	cmp	r3, #33	; 0x21
 8010474:	d14d      	bne.n	8010512 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2252      	movs	r2, #82	; 0x52
 801047a:	5a9b      	ldrh	r3, [r3, r2]
 801047c:	b29b      	uxth	r3, r3
 801047e:	2b00      	cmp	r3, #0
 8010480:	d132      	bne.n	80104e8 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010482:	f3ef 8310 	mrs	r3, PRIMASK
 8010486:	60bb      	str	r3, [r7, #8]
  return(result);
 8010488:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801048a:	627b      	str	r3, [r7, #36]	; 0x24
 801048c:	2301      	movs	r3, #1
 801048e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f383 8810 	msr	PRIMASK, r3
}
 8010496:	46c0      	nop			; (mov r8, r8)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2180      	movs	r1, #128	; 0x80
 80104a4:	438a      	bics	r2, r1
 80104a6:	601a      	str	r2, [r3, #0]
 80104a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	f383 8810 	msr	PRIMASK, r3
}
 80104b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104b4:	f3ef 8310 	mrs	r3, PRIMASK
 80104b8:	617b      	str	r3, [r7, #20]
  return(result);
 80104ba:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80104bc:	623b      	str	r3, [r7, #32]
 80104be:	2301      	movs	r3, #1
 80104c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104c2:	69bb      	ldr	r3, [r7, #24]
 80104c4:	f383 8810 	msr	PRIMASK, r3
}
 80104c8:	46c0      	nop			; (mov r8, r8)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2140      	movs	r1, #64	; 0x40
 80104d6:	430a      	orrs	r2, r1
 80104d8:	601a      	str	r2, [r3, #0]
 80104da:	6a3b      	ldr	r3, [r7, #32]
 80104dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	f383 8810 	msr	PRIMASK, r3
}
 80104e4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80104e6:	e014      	b.n	8010512 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104ec:	781a      	ldrb	r2, [r3, #0]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	b292      	uxth	r2, r2
 80104f4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104fa:	1c5a      	adds	r2, r3, #1
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2252      	movs	r2, #82	; 0x52
 8010504:	5a9b      	ldrh	r3, [r3, r2]
 8010506:	b29b      	uxth	r3, r3
 8010508:	3b01      	subs	r3, #1
 801050a:	b299      	uxth	r1, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2252      	movs	r2, #82	; 0x52
 8010510:	5299      	strh	r1, [r3, r2]
}
 8010512:	46c0      	nop			; (mov r8, r8)
 8010514:	46bd      	mov	sp, r7
 8010516:	b00a      	add	sp, #40	; 0x28
 8010518:	bd80      	pop	{r7, pc}

0801051a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 801051a:	b580      	push	{r7, lr}
 801051c:	b08c      	sub	sp, #48	; 0x30
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010526:	2b21      	cmp	r3, #33	; 0x21
 8010528:	d151      	bne.n	80105ce <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2252      	movs	r2, #82	; 0x52
 801052e:	5a9b      	ldrh	r3, [r3, r2]
 8010530:	b29b      	uxth	r3, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	d132      	bne.n	801059c <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010536:	f3ef 8310 	mrs	r3, PRIMASK
 801053a:	60fb      	str	r3, [r7, #12]
  return(result);
 801053c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801053e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010540:	2301      	movs	r3, #1
 8010542:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	f383 8810 	msr	PRIMASK, r3
}
 801054a:	46c0      	nop			; (mov r8, r8)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2180      	movs	r1, #128	; 0x80
 8010558:	438a      	bics	r2, r1
 801055a:	601a      	str	r2, [r3, #0]
 801055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	f383 8810 	msr	PRIMASK, r3
}
 8010566:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010568:	f3ef 8310 	mrs	r3, PRIMASK
 801056c:	61bb      	str	r3, [r7, #24]
  return(result);
 801056e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010570:	627b      	str	r3, [r7, #36]	; 0x24
 8010572:	2301      	movs	r3, #1
 8010574:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	f383 8810 	msr	PRIMASK, r3
}
 801057c:	46c0      	nop			; (mov r8, r8)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	2140      	movs	r1, #64	; 0x40
 801058a:	430a      	orrs	r2, r1
 801058c:	601a      	str	r2, [r3, #0]
 801058e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010590:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010592:	6a3b      	ldr	r3, [r7, #32]
 8010594:	f383 8810 	msr	PRIMASK, r3
}
 8010598:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801059a:	e018      	b.n	80105ce <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80105a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a4:	881a      	ldrh	r2, [r3, #0]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	05d2      	lsls	r2, r2, #23
 80105ac:	0dd2      	lsrs	r2, r2, #23
 80105ae:	b292      	uxth	r2, r2
 80105b0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105b6:	1c9a      	adds	r2, r3, #2
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2252      	movs	r2, #82	; 0x52
 80105c0:	5a9b      	ldrh	r3, [r3, r2]
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	3b01      	subs	r3, #1
 80105c6:	b299      	uxth	r1, r3
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2252      	movs	r2, #82	; 0x52
 80105cc:	5299      	strh	r1, [r3, r2]
}
 80105ce:	46c0      	nop			; (mov r8, r8)
 80105d0:	46bd      	mov	sp, r7
 80105d2:	b00c      	add	sp, #48	; 0x30
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b086      	sub	sp, #24
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105de:	f3ef 8310 	mrs	r3, PRIMASK
 80105e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80105e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80105e6:	617b      	str	r3, [r7, #20]
 80105e8:	2301      	movs	r3, #1
 80105ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f383 8810 	msr	PRIMASK, r3
}
 80105f2:	46c0      	nop			; (mov r8, r8)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	2140      	movs	r1, #64	; 0x40
 8010600:	438a      	bics	r2, r1
 8010602:	601a      	str	r2, [r3, #0]
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	f383 8810 	msr	PRIMASK, r3
}
 801060e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2220      	movs	r2, #32
 8010614:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2200      	movs	r2, #0
 801061a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	0018      	movs	r0, r3
 8010620:	f7ff fa8c 	bl	800fb3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010624:	46c0      	nop			; (mov r8, r8)
 8010626:	46bd      	mov	sp, r7
 8010628:	b006      	add	sp, #24
 801062a:	bd80      	pop	{r7, pc}

0801062c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801062c:	b590      	push	{r4, r7, lr}
 801062e:	b091      	sub	sp, #68	; 0x44
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010634:	203e      	movs	r0, #62	; 0x3e
 8010636:	183b      	adds	r3, r7, r0
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	215c      	movs	r1, #92	; 0x5c
 801063c:	5a52      	ldrh	r2, [r2, r1]
 801063e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010644:	2b22      	cmp	r3, #34	; 0x22
 8010646:	d000      	beq.n	801064a <UART_RxISR_8BIT+0x1e>
 8010648:	e097      	b.n	801077a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	243c      	movs	r4, #60	; 0x3c
 8010650:	193b      	adds	r3, r7, r4
 8010652:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8010654:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010656:	193b      	adds	r3, r7, r4
 8010658:	881b      	ldrh	r3, [r3, #0]
 801065a:	b2da      	uxtb	r2, r3
 801065c:	183b      	adds	r3, r7, r0
 801065e:	881b      	ldrh	r3, [r3, #0]
 8010660:	b2d9      	uxtb	r1, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010666:	400a      	ands	r2, r1
 8010668:	b2d2      	uxtb	r2, r2
 801066a:	701a      	strb	r2, [r3, #0]
    //huart->pRxBuffPtr++;
    //huart->RxXferCount--;
    if (huart->Instance == USART2) GSM_Receive((uint8_t)(uhdata & (uint8_t)uhMask));
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a48      	ldr	r2, [pc, #288]	; (8010794 <UART_RxISR_8BIT+0x168>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d10a      	bne.n	801068c <UART_RxISR_8BIT+0x60>
 8010676:	193b      	adds	r3, r7, r4
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	b2db      	uxtb	r3, r3
 801067c:	183a      	adds	r2, r7, r0
 801067e:	8812      	ldrh	r2, [r2, #0]
 8010680:	b2d2      	uxtb	r2, r2
 8010682:	4013      	ands	r3, r2
 8010684:	b2db      	uxtb	r3, r3
 8010686:	0018      	movs	r0, r3
 8010688:	f7fb fd6a 	bl	800c160 <GSM_Receive>

    if (huart->RxXferCount == 0U)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	225a      	movs	r2, #90	; 0x5a
 8010690:	5a9b      	ldrh	r3, [r3, r2]
 8010692:	b29b      	uxth	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	d178      	bne.n	801078a <UART_RxISR_8BIT+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010698:	f3ef 8310 	mrs	r3, PRIMASK
 801069c:	61bb      	str	r3, [r7, #24]
  return(result);
 801069e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80106a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80106a2:	2301      	movs	r3, #1
 80106a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106a6:	69fb      	ldr	r3, [r7, #28]
 80106a8:	f383 8810 	msr	PRIMASK, r3
}
 80106ac:	46c0      	nop			; (mov r8, r8)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	681a      	ldr	r2, [r3, #0]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4937      	ldr	r1, [pc, #220]	; (8010798 <UART_RxISR_8BIT+0x16c>)
 80106ba:	400a      	ands	r2, r1
 80106bc:	601a      	str	r2, [r3, #0]
 80106be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106c2:	6a3b      	ldr	r3, [r7, #32]
 80106c4:	f383 8810 	msr	PRIMASK, r3
}
 80106c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106ca:	f3ef 8310 	mrs	r3, PRIMASK
 80106ce:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80106d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106d2:	637b      	str	r3, [r7, #52]	; 0x34
 80106d4:	2301      	movs	r3, #1
 80106d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106da:	f383 8810 	msr	PRIMASK, r3
}
 80106de:	46c0      	nop			; (mov r8, r8)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	689a      	ldr	r2, [r3, #8]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2101      	movs	r1, #1
 80106ec:	438a      	bics	r2, r1
 80106ee:	609a      	str	r2, [r3, #8]
 80106f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f6:	f383 8810 	msr	PRIMASK, r3
}
 80106fa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2220      	movs	r2, #32
 8010700:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2200      	movs	r2, #0
 8010706:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801070c:	2b01      	cmp	r3, #1
 801070e:	d12f      	bne.n	8010770 <UART_RxISR_8BIT+0x144>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2200      	movs	r2, #0
 8010714:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010716:	f3ef 8310 	mrs	r3, PRIMASK
 801071a:	60fb      	str	r3, [r7, #12]
  return(result);
 801071c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801071e:	633b      	str	r3, [r7, #48]	; 0x30
 8010720:	2301      	movs	r3, #1
 8010722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	f383 8810 	msr	PRIMASK, r3
}
 801072a:	46c0      	nop			; (mov r8, r8)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	2110      	movs	r1, #16
 8010738:	438a      	bics	r2, r1
 801073a:	601a      	str	r2, [r3, #0]
 801073c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	f383 8810 	msr	PRIMASK, r3
}
 8010746:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	69db      	ldr	r3, [r3, #28]
 801074e:	2210      	movs	r2, #16
 8010750:	4013      	ands	r3, r2
 8010752:	2b10      	cmp	r3, #16
 8010754:	d103      	bne.n	801075e <UART_RxISR_8BIT+0x132>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2210      	movs	r2, #16
 801075c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2258      	movs	r2, #88	; 0x58
 8010762:	5a9a      	ldrh	r2, [r3, r2]
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	0011      	movs	r1, r2
 8010768:	0018      	movs	r0, r3
 801076a:	f7ff f9ff 	bl	800fb6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801076e:	e00c      	b.n	801078a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	0018      	movs	r0, r3
 8010774:	f7ff f9ea 	bl	800fb4c <HAL_UART_RxCpltCallback>
}
 8010778:	e007      	b.n	801078a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	699a      	ldr	r2, [r3, #24]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2108      	movs	r1, #8
 8010786:	430a      	orrs	r2, r1
 8010788:	619a      	str	r2, [r3, #24]
}
 801078a:	46c0      	nop			; (mov r8, r8)
 801078c:	46bd      	mov	sp, r7
 801078e:	b011      	add	sp, #68	; 0x44
 8010790:	bd90      	pop	{r4, r7, pc}
 8010792:	46c0      	nop			; (mov r8, r8)
 8010794:	40004400 	.word	0x40004400
 8010798:	fffffedf 	.word	0xfffffedf

0801079c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b090      	sub	sp, #64	; 0x40
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80107a4:	203e      	movs	r0, #62	; 0x3e
 80107a6:	183b      	adds	r3, r7, r0
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	215c      	movs	r1, #92	; 0x5c
 80107ac:	5a52      	ldrh	r2, [r2, r1]
 80107ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107b4:	2b22      	cmp	r3, #34	; 0x22
 80107b6:	d000      	beq.n	80107ba <UART_RxISR_16BIT+0x1e>
 80107b8:	e095      	b.n	80108e6 <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	213c      	movs	r1, #60	; 0x3c
 80107c0:	187b      	adds	r3, r7, r1
 80107c2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80107c4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107ca:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80107cc:	187b      	adds	r3, r7, r1
 80107ce:	183a      	adds	r2, r7, r0
 80107d0:	881b      	ldrh	r3, [r3, #0]
 80107d2:	8812      	ldrh	r2, [r2, #0]
 80107d4:	4013      	ands	r3, r2
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107e0:	1c9a      	adds	r2, r3, #2
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	225a      	movs	r2, #90	; 0x5a
 80107ea:	5a9b      	ldrh	r3, [r3, r2]
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	3b01      	subs	r3, #1
 80107f0:	b299      	uxth	r1, r3
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	225a      	movs	r2, #90	; 0x5a
 80107f6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	225a      	movs	r2, #90	; 0x5a
 80107fc:	5a9b      	ldrh	r3, [r3, r2]
 80107fe:	b29b      	uxth	r3, r3
 8010800:	2b00      	cmp	r3, #0
 8010802:	d178      	bne.n	80108f6 <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010804:	f3ef 8310 	mrs	r3, PRIMASK
 8010808:	617b      	str	r3, [r7, #20]
  return(result);
 801080a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801080c:	637b      	str	r3, [r7, #52]	; 0x34
 801080e:	2301      	movs	r3, #1
 8010810:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010812:	69bb      	ldr	r3, [r7, #24]
 8010814:	f383 8810 	msr	PRIMASK, r3
}
 8010818:	46c0      	nop			; (mov r8, r8)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	4936      	ldr	r1, [pc, #216]	; (8010900 <UART_RxISR_16BIT+0x164>)
 8010826:	400a      	ands	r2, r1
 8010828:	601a      	str	r2, [r3, #0]
 801082a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801082c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801082e:	69fb      	ldr	r3, [r7, #28]
 8010830:	f383 8810 	msr	PRIMASK, r3
}
 8010834:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010836:	f3ef 8310 	mrs	r3, PRIMASK
 801083a:	623b      	str	r3, [r7, #32]
  return(result);
 801083c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801083e:	633b      	str	r3, [r7, #48]	; 0x30
 8010840:	2301      	movs	r3, #1
 8010842:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010846:	f383 8810 	msr	PRIMASK, r3
}
 801084a:	46c0      	nop			; (mov r8, r8)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	689a      	ldr	r2, [r3, #8]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2101      	movs	r1, #1
 8010858:	438a      	bics	r2, r1
 801085a:	609a      	str	r2, [r3, #8]
 801085c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010862:	f383 8810 	msr	PRIMASK, r3
}
 8010866:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2220      	movs	r2, #32
 801086c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2200      	movs	r2, #0
 8010872:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010878:	2b01      	cmp	r3, #1
 801087a:	d12f      	bne.n	80108dc <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010882:	f3ef 8310 	mrs	r3, PRIMASK
 8010886:	60bb      	str	r3, [r7, #8]
  return(result);
 8010888:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801088a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801088c:	2301      	movs	r3, #1
 801088e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	f383 8810 	msr	PRIMASK, r3
}
 8010896:	46c0      	nop			; (mov r8, r8)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2110      	movs	r1, #16
 80108a4:	438a      	bics	r2, r1
 80108a6:	601a      	str	r2, [r3, #0]
 80108a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	f383 8810 	msr	PRIMASK, r3
}
 80108b2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	69db      	ldr	r3, [r3, #28]
 80108ba:	2210      	movs	r2, #16
 80108bc:	4013      	ands	r3, r2
 80108be:	2b10      	cmp	r3, #16
 80108c0:	d103      	bne.n	80108ca <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	2210      	movs	r2, #16
 80108c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2258      	movs	r2, #88	; 0x58
 80108ce:	5a9a      	ldrh	r2, [r3, r2]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	0011      	movs	r1, r2
 80108d4:	0018      	movs	r0, r3
 80108d6:	f7ff f949 	bl	800fb6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80108da:	e00c      	b.n	80108f6 <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	0018      	movs	r0, r3
 80108e0:	f7ff f934 	bl	800fb4c <HAL_UART_RxCpltCallback>
}
 80108e4:	e007      	b.n	80108f6 <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	699a      	ldr	r2, [r3, #24]
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2108      	movs	r1, #8
 80108f2:	430a      	orrs	r2, r1
 80108f4:	619a      	str	r2, [r3, #24]
}
 80108f6:	46c0      	nop			; (mov r8, r8)
 80108f8:	46bd      	mov	sp, r7
 80108fa:	b010      	add	sp, #64	; 0x40
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	46c0      	nop			; (mov r8, r8)
 8010900:	fffffedf 	.word	0xfffffedf

08010904 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801090c:	46c0      	nop			; (mov r8, r8)
 801090e:	46bd      	mov	sp, r7
 8010910:	b002      	add	sp, #8
 8010912:	bd80      	pop	{r7, pc}

08010914 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b084      	sub	sp, #16
 8010918:	af00      	add	r7, sp, #0
 801091a:	0002      	movs	r2, r0
 801091c:	1dbb      	adds	r3, r7, #6
 801091e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010920:	2300      	movs	r3, #0
 8010922:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010924:	1dbb      	adds	r3, r7, #6
 8010926:	2200      	movs	r2, #0
 8010928:	5e9b      	ldrsh	r3, [r3, r2]
 801092a:	2b84      	cmp	r3, #132	; 0x84
 801092c:	d006      	beq.n	801093c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 801092e:	1dbb      	adds	r3, r7, #6
 8010930:	2200      	movs	r2, #0
 8010932:	5e9a      	ldrsh	r2, [r3, r2]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	18d3      	adds	r3, r2, r3
 8010938:	3303      	adds	r3, #3
 801093a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801093c:	68fb      	ldr	r3, [r7, #12]
}
 801093e:	0018      	movs	r0, r3
 8010940:	46bd      	mov	sp, r7
 8010942:	b004      	add	sp, #16
 8010944:	bd80      	pop	{r7, pc}

08010946 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801094a:	f000 faa1 	bl	8010e90 <vTaskStartScheduler>
  
  return osOK;
 801094e:	2300      	movs	r3, #0
}
 8010950:	0018      	movs	r0, r3
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}

08010956 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010956:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010958:	b089      	sub	sp, #36	; 0x24
 801095a:	af04      	add	r7, sp, #16
 801095c:	6078      	str	r0, [r7, #4]
 801095e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	695b      	ldr	r3, [r3, #20]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d020      	beq.n	80109aa <osThreadCreate+0x54>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	699b      	ldr	r3, [r3, #24]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d01c      	beq.n	80109aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	685c      	ldr	r4, [r3, #4]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681d      	ldr	r5, [r3, #0]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	691e      	ldr	r6, [r3, #16]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2208      	movs	r2, #8
 8010980:	5e9b      	ldrsh	r3, [r3, r2]
 8010982:	0018      	movs	r0, r3
 8010984:	f7ff ffc6 	bl	8010914 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	695a      	ldr	r2, [r3, #20]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010990:	6839      	ldr	r1, [r7, #0]
 8010992:	9302      	str	r3, [sp, #8]
 8010994:	9201      	str	r2, [sp, #4]
 8010996:	9000      	str	r0, [sp, #0]
 8010998:	000b      	movs	r3, r1
 801099a:	0032      	movs	r2, r6
 801099c:	0029      	movs	r1, r5
 801099e:	0020      	movs	r0, r4
 80109a0:	f000 f8e3 	bl	8010b6a <xTaskCreateStatic>
 80109a4:	0003      	movs	r3, r0
 80109a6:	60fb      	str	r3, [r7, #12]
 80109a8:	e01d      	b.n	80109e6 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	685c      	ldr	r4, [r3, #4]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80109b6:	b29e      	uxth	r6, r3
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2208      	movs	r2, #8
 80109bc:	5e9b      	ldrsh	r3, [r3, r2]
 80109be:	0018      	movs	r0, r3
 80109c0:	f7ff ffa8 	bl	8010914 <makeFreeRtosPriority>
 80109c4:	0001      	movs	r1, r0
 80109c6:	683a      	ldr	r2, [r7, #0]
 80109c8:	230c      	movs	r3, #12
 80109ca:	18fb      	adds	r3, r7, r3
 80109cc:	9301      	str	r3, [sp, #4]
 80109ce:	9100      	str	r1, [sp, #0]
 80109d0:	0013      	movs	r3, r2
 80109d2:	0032      	movs	r2, r6
 80109d4:	0029      	movs	r1, r5
 80109d6:	0020      	movs	r0, r4
 80109d8:	f000 f90a 	bl	8010bf0 <xTaskCreate>
 80109dc:	0003      	movs	r3, r0
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d001      	beq.n	80109e6 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80109e2:	2300      	movs	r3, #0
 80109e4:	e000      	b.n	80109e8 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80109e6:	68fb      	ldr	r3, [r7, #12]
}
 80109e8:	0018      	movs	r0, r3
 80109ea:	46bd      	mov	sp, r7
 80109ec:	b005      	add	sp, #20
 80109ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109f0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b084      	sub	sp, #16
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d001      	beq.n	8010a06 <osDelay+0x16>
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	e000      	b.n	8010a08 <osDelay+0x18>
 8010a06:	2301      	movs	r3, #1
 8010a08:	0018      	movs	r0, r3
 8010a0a:	f000 fa1b 	bl	8010e44 <vTaskDelay>
  
  return osOK;
 8010a0e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010a10:	0018      	movs	r0, r3
 8010a12:	46bd      	mov	sp, r7
 8010a14:	b004      	add	sp, #16
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	3308      	adds	r3, #8
 8010a24:	001a      	movs	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	4252      	negs	r2, r2
 8010a30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	3308      	adds	r3, #8
 8010a36:	001a      	movs	r2, r3
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	3308      	adds	r3, #8
 8010a40:	001a      	movs	r2, r3
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a4c:	46c0      	nop			; (mov r8, r8)
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	b002      	add	sp, #8
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010a62:	46c0      	nop			; (mov r8, r8)
 8010a64:	46bd      	mov	sp, r7
 8010a66:	b002      	add	sp, #8
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b084      	sub	sp, #16
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
 8010a72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	689a      	ldr	r2, [r3, #8]
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	683a      	ldr	r2, [r7, #0]
 8010a94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	1c5a      	adds	r2, r3, #1
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	601a      	str	r2, [r3, #0]
}
 8010aa6:	46c0      	nop			; (mov r8, r8)
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	b004      	add	sp, #16
 8010aac:	bd80      	pop	{r7, pc}

08010aae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b084      	sub	sp, #16
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
 8010ab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	d103      	bne.n	8010acc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	691b      	ldr	r3, [r3, #16]
 8010ac8:	60fb      	str	r3, [r7, #12]
 8010aca:	e00c      	b.n	8010ae6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	3308      	adds	r3, #8
 8010ad0:	60fb      	str	r3, [r7, #12]
 8010ad2:	e002      	b.n	8010ada <vListInsert+0x2c>
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	60fb      	str	r3, [r7, #12]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	68ba      	ldr	r2, [r7, #8]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d2f6      	bcs.n	8010ad4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	685a      	ldr	r2, [r3, #4]
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	683a      	ldr	r2, [r7, #0]
 8010af4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	68fa      	ldr	r2, [r7, #12]
 8010afa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	683a      	ldr	r2, [r7, #0]
 8010b00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	1c5a      	adds	r2, r3, #1
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	601a      	str	r2, [r3, #0]
}
 8010b12:	46c0      	nop			; (mov r8, r8)
 8010b14:	46bd      	mov	sp, r7
 8010b16:	b004      	add	sp, #16
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b084      	sub	sp, #16
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	691b      	ldr	r3, [r3, #16]
 8010b26:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	6892      	ldr	r2, [r2, #8]
 8010b30:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	689b      	ldr	r3, [r3, #8]
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	6852      	ldr	r2, [r2, #4]
 8010b3a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	685b      	ldr	r3, [r3, #4]
 8010b40:	687a      	ldr	r2, [r7, #4]
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d103      	bne.n	8010b4e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	689a      	ldr	r2, [r3, #8]
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2200      	movs	r2, #0
 8010b52:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	1e5a      	subs	r2, r3, #1
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
}
 8010b62:	0018      	movs	r0, r3
 8010b64:	46bd      	mov	sp, r7
 8010b66:	b004      	add	sp, #16
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010b6a:	b590      	push	{r4, r7, lr}
 8010b6c:	b08d      	sub	sp, #52	; 0x34
 8010b6e:	af04      	add	r7, sp, #16
 8010b70:	60f8      	str	r0, [r7, #12]
 8010b72:	60b9      	str	r1, [r7, #8]
 8010b74:	607a      	str	r2, [r7, #4]
 8010b76:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d101      	bne.n	8010b82 <xTaskCreateStatic+0x18>
 8010b7e:	b672      	cpsid	i
 8010b80:	e7fe      	b.n	8010b80 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8010b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d101      	bne.n	8010b8c <xTaskCreateStatic+0x22>
 8010b88:	b672      	cpsid	i
 8010b8a:	e7fe      	b.n	8010b8a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010b8c:	2354      	movs	r3, #84	; 0x54
 8010b8e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	2b54      	cmp	r3, #84	; 0x54
 8010b94:	d001      	beq.n	8010b9a <xTaskCreateStatic+0x30>
 8010b96:	b672      	cpsid	i
 8010b98:	e7fe      	b.n	8010b98 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d020      	beq.n	8010be2 <xTaskCreateStatic+0x78>
 8010ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d01d      	beq.n	8010be2 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010bb0:	69fb      	ldr	r3, [r7, #28]
 8010bb2:	2251      	movs	r2, #81	; 0x51
 8010bb4:	2102      	movs	r1, #2
 8010bb6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010bb8:	683c      	ldr	r4, [r7, #0]
 8010bba:	687a      	ldr	r2, [r7, #4]
 8010bbc:	68b9      	ldr	r1, [r7, #8]
 8010bbe:	68f8      	ldr	r0, [r7, #12]
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	9303      	str	r3, [sp, #12]
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	9302      	str	r3, [sp, #8]
 8010bc8:	2318      	movs	r3, #24
 8010bca:	18fb      	adds	r3, r7, r3
 8010bcc:	9301      	str	r3, [sp, #4]
 8010bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd0:	9300      	str	r3, [sp, #0]
 8010bd2:	0023      	movs	r3, r4
 8010bd4:	f000 f858 	bl	8010c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	0018      	movs	r0, r3
 8010bdc:	f000 f8ce 	bl	8010d7c <prvAddNewTaskToReadyList>
 8010be0:	e001      	b.n	8010be6 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8010be2:	2300      	movs	r3, #0
 8010be4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010be6:	69bb      	ldr	r3, [r7, #24]
	}
 8010be8:	0018      	movs	r0, r3
 8010bea:	46bd      	mov	sp, r7
 8010bec:	b009      	add	sp, #36	; 0x24
 8010bee:	bd90      	pop	{r4, r7, pc}

08010bf0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010bf0:	b590      	push	{r4, r7, lr}
 8010bf2:	b08d      	sub	sp, #52	; 0x34
 8010bf4:	af04      	add	r7, sp, #16
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	603b      	str	r3, [r7, #0]
 8010bfc:	1dbb      	adds	r3, r7, #6
 8010bfe:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c00:	1dbb      	adds	r3, r7, #6
 8010c02:	881b      	ldrh	r3, [r3, #0]
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	0018      	movs	r0, r3
 8010c08:	f000 fda2 	bl	8011750 <pvPortMalloc>
 8010c0c:	0003      	movs	r3, r0
 8010c0e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d010      	beq.n	8010c38 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010c16:	2054      	movs	r0, #84	; 0x54
 8010c18:	f000 fd9a 	bl	8011750 <pvPortMalloc>
 8010c1c:	0003      	movs	r3, r0
 8010c1e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d003      	beq.n	8010c2e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010c26:	69fb      	ldr	r3, [r7, #28]
 8010c28:	697a      	ldr	r2, [r7, #20]
 8010c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8010c2c:	e006      	b.n	8010c3c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	0018      	movs	r0, r3
 8010c32:	f000 fe33 	bl	801189c <vPortFree>
 8010c36:	e001      	b.n	8010c3c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d01a      	beq.n	8010c78 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010c42:	69fb      	ldr	r3, [r7, #28]
 8010c44:	2251      	movs	r2, #81	; 0x51
 8010c46:	2100      	movs	r1, #0
 8010c48:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010c4a:	1dbb      	adds	r3, r7, #6
 8010c4c:	881a      	ldrh	r2, [r3, #0]
 8010c4e:	683c      	ldr	r4, [r7, #0]
 8010c50:	68b9      	ldr	r1, [r7, #8]
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	2300      	movs	r3, #0
 8010c56:	9303      	str	r3, [sp, #12]
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	9302      	str	r3, [sp, #8]
 8010c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c5e:	9301      	str	r3, [sp, #4]
 8010c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c62:	9300      	str	r3, [sp, #0]
 8010c64:	0023      	movs	r3, r4
 8010c66:	f000 f80f 	bl	8010c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	0018      	movs	r0, r3
 8010c6e:	f000 f885 	bl	8010d7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010c72:	2301      	movs	r3, #1
 8010c74:	61bb      	str	r3, [r7, #24]
 8010c76:	e002      	b.n	8010c7e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010c78:	2301      	movs	r3, #1
 8010c7a:	425b      	negs	r3, r3
 8010c7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8010c80:	0018      	movs	r0, r3
 8010c82:	46bd      	mov	sp, r7
 8010c84:	b009      	add	sp, #36	; 0x24
 8010c86:	bd90      	pop	{r4, r7, pc}

08010c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b086      	sub	sp, #24
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	607a      	str	r2, [r7, #4]
 8010c94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	4936      	ldr	r1, [pc, #216]	; (8010d78 <prvInitialiseNewTask+0xf0>)
 8010c9e:	468c      	mov	ip, r1
 8010ca0:	4463      	add	r3, ip
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	18d3      	adds	r3, r2, r3
 8010ca6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	2207      	movs	r2, #7
 8010cac:	4393      	bics	r3, r2
 8010cae:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	2207      	movs	r2, #7
 8010cb4:	4013      	ands	r3, r2
 8010cb6:	d001      	beq.n	8010cbc <prvInitialiseNewTask+0x34>
 8010cb8:	b672      	cpsid	i
 8010cba:	e7fe      	b.n	8010cba <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	617b      	str	r3, [r7, #20]
 8010cc0:	e013      	b.n	8010cea <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010cc2:	68ba      	ldr	r2, [r7, #8]
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	18d3      	adds	r3, r2, r3
 8010cc8:	7818      	ldrb	r0, [r3, #0]
 8010cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ccc:	2134      	movs	r1, #52	; 0x34
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	18d3      	adds	r3, r2, r3
 8010cd2:	185b      	adds	r3, r3, r1
 8010cd4:	1c02      	adds	r2, r0, #0
 8010cd6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010cd8:	68ba      	ldr	r2, [r7, #8]
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	18d3      	adds	r3, r2, r3
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d006      	beq.n	8010cf2 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	617b      	str	r3, [r7, #20]
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	2b0f      	cmp	r3, #15
 8010cee:	d9e8      	bls.n	8010cc2 <prvInitialiseNewTask+0x3a>
 8010cf0:	e000      	b.n	8010cf4 <prvInitialiseNewTask+0x6c>
		{
			break;
 8010cf2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf6:	2243      	movs	r2, #67	; 0x43
 8010cf8:	2100      	movs	r1, #0
 8010cfa:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010cfc:	6a3b      	ldr	r3, [r7, #32]
 8010cfe:	2b06      	cmp	r3, #6
 8010d00:	d901      	bls.n	8010d06 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010d02:	2306      	movs	r3, #6
 8010d04:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d08:	6a3a      	ldr	r2, [r7, #32]
 8010d0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0e:	6a3a      	ldr	r2, [r7, #32]
 8010d10:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d14:	2200      	movs	r2, #0
 8010d16:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1a:	3304      	adds	r3, #4
 8010d1c:	0018      	movs	r0, r3
 8010d1e:	f7ff fe99 	bl	8010a54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d24:	3318      	adds	r3, #24
 8010d26:	0018      	movs	r0, r3
 8010d28:	f7ff fe94 	bl	8010a54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d32:	6a3b      	ldr	r3, [r7, #32]
 8010d34:	2207      	movs	r2, #7
 8010d36:	1ad2      	subs	r2, r2, r3
 8010d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d44:	2200      	movs	r2, #0
 8010d46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4a:	2250      	movs	r2, #80	; 0x50
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010d50:	683a      	ldr	r2, [r7, #0]
 8010d52:	68f9      	ldr	r1, [r7, #12]
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	0018      	movs	r0, r3
 8010d58:	f000 fbc4 	bl	80114e4 <pxPortInitialiseStack>
 8010d5c:	0002      	movs	r2, r0
 8010d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d60:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8010d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d002      	beq.n	8010d6e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d6e:	46c0      	nop			; (mov r8, r8)
 8010d70:	46bd      	mov	sp, r7
 8010d72:	b006      	add	sp, #24
 8010d74:	bd80      	pop	{r7, pc}
 8010d76:	46c0      	nop			; (mov r8, r8)
 8010d78:	3fffffff 	.word	0x3fffffff

08010d7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010d84:	f000 fc4c 	bl	8011620 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010d88:	4b28      	ldr	r3, [pc, #160]	; (8010e2c <prvAddNewTaskToReadyList+0xb0>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	1c5a      	adds	r2, r3, #1
 8010d8e:	4b27      	ldr	r3, [pc, #156]	; (8010e2c <prvAddNewTaskToReadyList+0xb0>)
 8010d90:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8010d92:	4b27      	ldr	r3, [pc, #156]	; (8010e30 <prvAddNewTaskToReadyList+0xb4>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d109      	bne.n	8010dae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010d9a:	4b25      	ldr	r3, [pc, #148]	; (8010e30 <prvAddNewTaskToReadyList+0xb4>)
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010da0:	4b22      	ldr	r3, [pc, #136]	; (8010e2c <prvAddNewTaskToReadyList+0xb0>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d110      	bne.n	8010dca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010da8:	f000 fa6e 	bl	8011288 <prvInitialiseTaskLists>
 8010dac:	e00d      	b.n	8010dca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010dae:	4b21      	ldr	r3, [pc, #132]	; (8010e34 <prvAddNewTaskToReadyList+0xb8>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d109      	bne.n	8010dca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010db6:	4b1e      	ldr	r3, [pc, #120]	; (8010e30 <prvAddNewTaskToReadyList+0xb4>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d802      	bhi.n	8010dca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010dc4:	4b1a      	ldr	r3, [pc, #104]	; (8010e30 <prvAddNewTaskToReadyList+0xb4>)
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010dca:	4b1b      	ldr	r3, [pc, #108]	; (8010e38 <prvAddNewTaskToReadyList+0xbc>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	1c5a      	adds	r2, r3, #1
 8010dd0:	4b19      	ldr	r3, [pc, #100]	; (8010e38 <prvAddNewTaskToReadyList+0xbc>)
 8010dd2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dd8:	4b18      	ldr	r3, [pc, #96]	; (8010e3c <prvAddNewTaskToReadyList+0xc0>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d903      	bls.n	8010de8 <prvAddNewTaskToReadyList+0x6c>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010de4:	4b15      	ldr	r3, [pc, #84]	; (8010e3c <prvAddNewTaskToReadyList+0xc0>)
 8010de6:	601a      	str	r2, [r3, #0]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dec:	0013      	movs	r3, r2
 8010dee:	009b      	lsls	r3, r3, #2
 8010df0:	189b      	adds	r3, r3, r2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	4a12      	ldr	r2, [pc, #72]	; (8010e40 <prvAddNewTaskToReadyList+0xc4>)
 8010df6:	189a      	adds	r2, r3, r2
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	3304      	adds	r3, #4
 8010dfc:	0019      	movs	r1, r3
 8010dfe:	0010      	movs	r0, r2
 8010e00:	f7ff fe33 	bl	8010a6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010e04:	f000 fc1e 	bl	8011644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010e08:	4b0a      	ldr	r3, [pc, #40]	; (8010e34 <prvAddNewTaskToReadyList+0xb8>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d008      	beq.n	8010e22 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010e10:	4b07      	ldr	r3, [pc, #28]	; (8010e30 <prvAddNewTaskToReadyList+0xb4>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d201      	bcs.n	8010e22 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010e1e:	f000 fbef 	bl	8011600 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e22:	46c0      	nop			; (mov r8, r8)
 8010e24:	46bd      	mov	sp, r7
 8010e26:	b002      	add	sp, #8
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	46c0      	nop			; (mov r8, r8)
 8010e2c:	200004e0 	.word	0x200004e0
 8010e30:	200003e0 	.word	0x200003e0
 8010e34:	200004ec 	.word	0x200004ec
 8010e38:	200004fc 	.word	0x200004fc
 8010e3c:	200004e8 	.word	0x200004e8
 8010e40:	200003e4 	.word	0x200003e4

08010e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d010      	beq.n	8010e78 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010e56:	4b0d      	ldr	r3, [pc, #52]	; (8010e8c <vTaskDelay+0x48>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d001      	beq.n	8010e62 <vTaskDelay+0x1e>
 8010e5e:	b672      	cpsid	i
 8010e60:	e7fe      	b.n	8010e60 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8010e62:	f000 f863 	bl	8010f2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2100      	movs	r1, #0
 8010e6a:	0018      	movs	r0, r3
 8010e6c:	f000 fae6 	bl	801143c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010e70:	f000 f868 	bl	8010f44 <xTaskResumeAll>
 8010e74:	0003      	movs	r3, r0
 8010e76:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d101      	bne.n	8010e82 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8010e7e:	f000 fbbf 	bl	8011600 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e82:	46c0      	nop			; (mov r8, r8)
 8010e84:	46bd      	mov	sp, r7
 8010e86:	b004      	add	sp, #16
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	46c0      	nop			; (mov r8, r8)
 8010e8c:	20000508 	.word	0x20000508

08010e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010e90:	b590      	push	{r4, r7, lr}
 8010e92:	b089      	sub	sp, #36	; 0x24
 8010e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010e96:	2300      	movs	r3, #0
 8010e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010e9e:	003a      	movs	r2, r7
 8010ea0:	1d39      	adds	r1, r7, #4
 8010ea2:	2308      	movs	r3, #8
 8010ea4:	18fb      	adds	r3, r7, r3
 8010ea6:	0018      	movs	r0, r3
 8010ea8:	f7fb f9b2 	bl	800c210 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010eac:	683c      	ldr	r4, [r7, #0]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	4918      	ldr	r1, [pc, #96]	; (8010f14 <vTaskStartScheduler+0x84>)
 8010eb4:	4818      	ldr	r0, [pc, #96]	; (8010f18 <vTaskStartScheduler+0x88>)
 8010eb6:	9202      	str	r2, [sp, #8]
 8010eb8:	9301      	str	r3, [sp, #4]
 8010eba:	2300      	movs	r3, #0
 8010ebc:	9300      	str	r3, [sp, #0]
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	0022      	movs	r2, r4
 8010ec2:	f7ff fe52 	bl	8010b6a <xTaskCreateStatic>
 8010ec6:	0002      	movs	r2, r0
 8010ec8:	4b14      	ldr	r3, [pc, #80]	; (8010f1c <vTaskStartScheduler+0x8c>)
 8010eca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ecc:	4b13      	ldr	r3, [pc, #76]	; (8010f1c <vTaskStartScheduler+0x8c>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	60fb      	str	r3, [r7, #12]
 8010ed8:	e001      	b.n	8010ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010eda:	2300      	movs	r3, #0
 8010edc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d10d      	bne.n	8010f00 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8010ee4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010ee6:	4b0e      	ldr	r3, [pc, #56]	; (8010f20 <vTaskStartScheduler+0x90>)
 8010ee8:	2201      	movs	r2, #1
 8010eea:	4252      	negs	r2, r2
 8010eec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010eee:	4b0d      	ldr	r3, [pc, #52]	; (8010f24 <vTaskStartScheduler+0x94>)
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8010ef4:	4b0c      	ldr	r3, [pc, #48]	; (8010f28 <vTaskStartScheduler+0x98>)
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010efa:	f000 fb5d 	bl	80115b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010efe:	e004      	b.n	8010f0a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	3301      	adds	r3, #1
 8010f04:	d101      	bne.n	8010f0a <vTaskStartScheduler+0x7a>
 8010f06:	b672      	cpsid	i
 8010f08:	e7fe      	b.n	8010f08 <vTaskStartScheduler+0x78>
}
 8010f0a:	46c0      	nop			; (mov r8, r8)
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	b005      	add	sp, #20
 8010f10:	bd90      	pop	{r4, r7, pc}
 8010f12:	46c0      	nop			; (mov r8, r8)
 8010f14:	080131e0 	.word	0x080131e0
 8010f18:	08011269 	.word	0x08011269
 8010f1c:	20000504 	.word	0x20000504
 8010f20:	20000500 	.word	0x20000500
 8010f24:	200004ec 	.word	0x200004ec
 8010f28:	200004e4 	.word	0x200004e4

08010f2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010f30:	4b03      	ldr	r3, [pc, #12]	; (8010f40 <vTaskSuspendAll+0x14>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	1c5a      	adds	r2, r3, #1
 8010f36:	4b02      	ldr	r3, [pc, #8]	; (8010f40 <vTaskSuspendAll+0x14>)
 8010f38:	601a      	str	r2, [r3, #0]
}
 8010f3a:	46c0      	nop			; (mov r8, r8)
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	20000508 	.word	0x20000508

08010f44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b084      	sub	sp, #16
 8010f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010f52:	4b3a      	ldr	r3, [pc, #232]	; (801103c <xTaskResumeAll+0xf8>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d101      	bne.n	8010f5e <xTaskResumeAll+0x1a>
 8010f5a:	b672      	cpsid	i
 8010f5c:	e7fe      	b.n	8010f5c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010f5e:	f000 fb5f 	bl	8011620 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010f62:	4b36      	ldr	r3, [pc, #216]	; (801103c <xTaskResumeAll+0xf8>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	1e5a      	subs	r2, r3, #1
 8010f68:	4b34      	ldr	r3, [pc, #208]	; (801103c <xTaskResumeAll+0xf8>)
 8010f6a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f6c:	4b33      	ldr	r3, [pc, #204]	; (801103c <xTaskResumeAll+0xf8>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d15b      	bne.n	801102c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010f74:	4b32      	ldr	r3, [pc, #200]	; (8011040 <xTaskResumeAll+0xfc>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d057      	beq.n	801102c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f7c:	e02f      	b.n	8010fde <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8010f7e:	4b31      	ldr	r3, [pc, #196]	; (8011044 <xTaskResumeAll+0x100>)
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	68db      	ldr	r3, [r3, #12]
 8010f84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	3318      	adds	r3, #24
 8010f8a:	0018      	movs	r0, r3
 8010f8c:	f7ff fdc5 	bl	8010b1a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	3304      	adds	r3, #4
 8010f94:	0018      	movs	r0, r3
 8010f96:	f7ff fdc0 	bl	8010b1a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f9e:	4b2a      	ldr	r3, [pc, #168]	; (8011048 <xTaskResumeAll+0x104>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d903      	bls.n	8010fae <xTaskResumeAll+0x6a>
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010faa:	4b27      	ldr	r3, [pc, #156]	; (8011048 <xTaskResumeAll+0x104>)
 8010fac:	601a      	str	r2, [r3, #0]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fb2:	0013      	movs	r3, r2
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	189b      	adds	r3, r3, r2
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	4a24      	ldr	r2, [pc, #144]	; (801104c <xTaskResumeAll+0x108>)
 8010fbc:	189a      	adds	r2, r3, r2
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	3304      	adds	r3, #4
 8010fc2:	0019      	movs	r1, r3
 8010fc4:	0010      	movs	r0, r2
 8010fc6:	f7ff fd50 	bl	8010a6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fce:	4b20      	ldr	r3, [pc, #128]	; (8011050 <xTaskResumeAll+0x10c>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d302      	bcc.n	8010fde <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8010fd8:	4b1e      	ldr	r3, [pc, #120]	; (8011054 <xTaskResumeAll+0x110>)
 8010fda:	2201      	movs	r2, #1
 8010fdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010fde:	4b19      	ldr	r3, [pc, #100]	; (8011044 <xTaskResumeAll+0x100>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d1cb      	bne.n	8010f7e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d001      	beq.n	8010ff0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010fec:	f000 f9e6 	bl	80113bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010ff0:	4b19      	ldr	r3, [pc, #100]	; (8011058 <xTaskResumeAll+0x114>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00f      	beq.n	801101c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010ffc:	f000 f82e 	bl	801105c <xTaskIncrementTick>
 8011000:	1e03      	subs	r3, r0, #0
 8011002:	d002      	beq.n	801100a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8011004:	4b13      	ldr	r3, [pc, #76]	; (8011054 <xTaskResumeAll+0x110>)
 8011006:	2201      	movs	r2, #1
 8011008:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	3b01      	subs	r3, #1
 801100e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d1f2      	bne.n	8010ffc <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8011016:	4b10      	ldr	r3, [pc, #64]	; (8011058 <xTaskResumeAll+0x114>)
 8011018:	2200      	movs	r2, #0
 801101a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801101c:	4b0d      	ldr	r3, [pc, #52]	; (8011054 <xTaskResumeAll+0x110>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d003      	beq.n	801102c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011024:	2301      	movs	r3, #1
 8011026:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011028:	f000 faea 	bl	8011600 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801102c:	f000 fb0a 	bl	8011644 <vPortExitCritical>

	return xAlreadyYielded;
 8011030:	68bb      	ldr	r3, [r7, #8]
}
 8011032:	0018      	movs	r0, r3
 8011034:	46bd      	mov	sp, r7
 8011036:	b004      	add	sp, #16
 8011038:	bd80      	pop	{r7, pc}
 801103a:	46c0      	nop			; (mov r8, r8)
 801103c:	20000508 	.word	0x20000508
 8011040:	200004e0 	.word	0x200004e0
 8011044:	200004a0 	.word	0x200004a0
 8011048:	200004e8 	.word	0x200004e8
 801104c:	200003e4 	.word	0x200003e4
 8011050:	200003e0 	.word	0x200003e0
 8011054:	200004f4 	.word	0x200004f4
 8011058:	200004f0 	.word	0x200004f0

0801105c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b086      	sub	sp, #24
 8011060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011062:	2300      	movs	r3, #0
 8011064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011066:	4b4c      	ldr	r3, [pc, #304]	; (8011198 <xTaskIncrementTick+0x13c>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d000      	beq.n	8011070 <xTaskIncrementTick+0x14>
 801106e:	e083      	b.n	8011178 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011070:	4b4a      	ldr	r3, [pc, #296]	; (801119c <xTaskIncrementTick+0x140>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	3301      	adds	r3, #1
 8011076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011078:	4b48      	ldr	r3, [pc, #288]	; (801119c <xTaskIncrementTick+0x140>)
 801107a:	693a      	ldr	r2, [r7, #16]
 801107c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d117      	bne.n	80110b4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8011084:	4b46      	ldr	r3, [pc, #280]	; (80111a0 <xTaskIncrementTick+0x144>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d001      	beq.n	8011092 <xTaskIncrementTick+0x36>
 801108e:	b672      	cpsid	i
 8011090:	e7fe      	b.n	8011090 <xTaskIncrementTick+0x34>
 8011092:	4b43      	ldr	r3, [pc, #268]	; (80111a0 <xTaskIncrementTick+0x144>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	60fb      	str	r3, [r7, #12]
 8011098:	4b42      	ldr	r3, [pc, #264]	; (80111a4 <xTaskIncrementTick+0x148>)
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	4b40      	ldr	r3, [pc, #256]	; (80111a0 <xTaskIncrementTick+0x144>)
 801109e:	601a      	str	r2, [r3, #0]
 80110a0:	4b40      	ldr	r3, [pc, #256]	; (80111a4 <xTaskIncrementTick+0x148>)
 80110a2:	68fa      	ldr	r2, [r7, #12]
 80110a4:	601a      	str	r2, [r3, #0]
 80110a6:	4b40      	ldr	r3, [pc, #256]	; (80111a8 <xTaskIncrementTick+0x14c>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	1c5a      	adds	r2, r3, #1
 80110ac:	4b3e      	ldr	r3, [pc, #248]	; (80111a8 <xTaskIncrementTick+0x14c>)
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	f000 f984 	bl	80113bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80110b4:	4b3d      	ldr	r3, [pc, #244]	; (80111ac <xTaskIncrementTick+0x150>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d34e      	bcc.n	801115c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80110be:	4b38      	ldr	r3, [pc, #224]	; (80111a0 <xTaskIncrementTick+0x144>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d101      	bne.n	80110cc <xTaskIncrementTick+0x70>
 80110c8:	2301      	movs	r3, #1
 80110ca:	e000      	b.n	80110ce <xTaskIncrementTick+0x72>
 80110cc:	2300      	movs	r3, #0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d004      	beq.n	80110dc <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110d2:	4b36      	ldr	r3, [pc, #216]	; (80111ac <xTaskIncrementTick+0x150>)
 80110d4:	2201      	movs	r2, #1
 80110d6:	4252      	negs	r2, r2
 80110d8:	601a      	str	r2, [r3, #0]
					break;
 80110da:	e03f      	b.n	801115c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80110dc:	4b30      	ldr	r3, [pc, #192]	; (80111a0 <xTaskIncrementTick+0x144>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	68db      	ldr	r3, [r3, #12]
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80110ec:	693a      	ldr	r2, [r7, #16]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d203      	bcs.n	80110fc <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80110f4:	4b2d      	ldr	r3, [pc, #180]	; (80111ac <xTaskIncrementTick+0x150>)
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	601a      	str	r2, [r3, #0]
						break;
 80110fa:	e02f      	b.n	801115c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	3304      	adds	r3, #4
 8011100:	0018      	movs	r0, r3
 8011102:	f7ff fd0a 	bl	8010b1a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801110a:	2b00      	cmp	r3, #0
 801110c:	d004      	beq.n	8011118 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	3318      	adds	r3, #24
 8011112:	0018      	movs	r0, r3
 8011114:	f7ff fd01 	bl	8010b1a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801111c:	4b24      	ldr	r3, [pc, #144]	; (80111b0 <xTaskIncrementTick+0x154>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	429a      	cmp	r2, r3
 8011122:	d903      	bls.n	801112c <xTaskIncrementTick+0xd0>
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011128:	4b21      	ldr	r3, [pc, #132]	; (80111b0 <xTaskIncrementTick+0x154>)
 801112a:	601a      	str	r2, [r3, #0]
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011130:	0013      	movs	r3, r2
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	189b      	adds	r3, r3, r2
 8011136:	009b      	lsls	r3, r3, #2
 8011138:	4a1e      	ldr	r2, [pc, #120]	; (80111b4 <xTaskIncrementTick+0x158>)
 801113a:	189a      	adds	r2, r3, r2
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	3304      	adds	r3, #4
 8011140:	0019      	movs	r1, r3
 8011142:	0010      	movs	r0, r2
 8011144:	f7ff fc91 	bl	8010a6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801114c:	4b1a      	ldr	r3, [pc, #104]	; (80111b8 <xTaskIncrementTick+0x15c>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011152:	429a      	cmp	r2, r3
 8011154:	d3b3      	bcc.n	80110be <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8011156:	2301      	movs	r3, #1
 8011158:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801115a:	e7b0      	b.n	80110be <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801115c:	4b16      	ldr	r3, [pc, #88]	; (80111b8 <xTaskIncrementTick+0x15c>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011162:	4914      	ldr	r1, [pc, #80]	; (80111b4 <xTaskIncrementTick+0x158>)
 8011164:	0013      	movs	r3, r2
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	189b      	adds	r3, r3, r2
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	585b      	ldr	r3, [r3, r1]
 801116e:	2b01      	cmp	r3, #1
 8011170:	d907      	bls.n	8011182 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8011172:	2301      	movs	r3, #1
 8011174:	617b      	str	r3, [r7, #20]
 8011176:	e004      	b.n	8011182 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011178:	4b10      	ldr	r3, [pc, #64]	; (80111bc <xTaskIncrementTick+0x160>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	1c5a      	adds	r2, r3, #1
 801117e:	4b0f      	ldr	r3, [pc, #60]	; (80111bc <xTaskIncrementTick+0x160>)
 8011180:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011182:	4b0f      	ldr	r3, [pc, #60]	; (80111c0 <xTaskIncrementTick+0x164>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d001      	beq.n	801118e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 801118a:	2301      	movs	r3, #1
 801118c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801118e:	697b      	ldr	r3, [r7, #20]
}
 8011190:	0018      	movs	r0, r3
 8011192:	46bd      	mov	sp, r7
 8011194:	b006      	add	sp, #24
 8011196:	bd80      	pop	{r7, pc}
 8011198:	20000508 	.word	0x20000508
 801119c:	200004e4 	.word	0x200004e4
 80111a0:	20000498 	.word	0x20000498
 80111a4:	2000049c 	.word	0x2000049c
 80111a8:	200004f8 	.word	0x200004f8
 80111ac:	20000500 	.word	0x20000500
 80111b0:	200004e8 	.word	0x200004e8
 80111b4:	200003e4 	.word	0x200003e4
 80111b8:	200003e0 	.word	0x200003e0
 80111bc:	200004f0 	.word	0x200004f0
 80111c0:	200004f4 	.word	0x200004f4

080111c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80111ca:	4b22      	ldr	r3, [pc, #136]	; (8011254 <vTaskSwitchContext+0x90>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d003      	beq.n	80111da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80111d2:	4b21      	ldr	r3, [pc, #132]	; (8011258 <vTaskSwitchContext+0x94>)
 80111d4:	2201      	movs	r2, #1
 80111d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80111d8:	e037      	b.n	801124a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80111da:	4b1f      	ldr	r3, [pc, #124]	; (8011258 <vTaskSwitchContext+0x94>)
 80111dc:	2200      	movs	r2, #0
 80111de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80111e0:	4b1e      	ldr	r3, [pc, #120]	; (801125c <vTaskSwitchContext+0x98>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	607b      	str	r3, [r7, #4]
 80111e6:	e007      	b.n	80111f8 <vTaskSwitchContext+0x34>
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d101      	bne.n	80111f2 <vTaskSwitchContext+0x2e>
 80111ee:	b672      	cpsid	i
 80111f0:	e7fe      	b.n	80111f0 <vTaskSwitchContext+0x2c>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	3b01      	subs	r3, #1
 80111f6:	607b      	str	r3, [r7, #4]
 80111f8:	4919      	ldr	r1, [pc, #100]	; (8011260 <vTaskSwitchContext+0x9c>)
 80111fa:	687a      	ldr	r2, [r7, #4]
 80111fc:	0013      	movs	r3, r2
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	189b      	adds	r3, r3, r2
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	585b      	ldr	r3, [r3, r1]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d0ee      	beq.n	80111e8 <vTaskSwitchContext+0x24>
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	0013      	movs	r3, r2
 801120e:	009b      	lsls	r3, r3, #2
 8011210:	189b      	adds	r3, r3, r2
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	4a12      	ldr	r2, [pc, #72]	; (8011260 <vTaskSwitchContext+0x9c>)
 8011216:	189b      	adds	r3, r3, r2
 8011218:	603b      	str	r3, [r7, #0]
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	685a      	ldr	r2, [r3, #4]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	605a      	str	r2, [r3, #4]
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	685a      	ldr	r2, [r3, #4]
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	3308      	adds	r3, #8
 801122c:	429a      	cmp	r2, r3
 801122e:	d104      	bne.n	801123a <vTaskSwitchContext+0x76>
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	685b      	ldr	r3, [r3, #4]
 8011234:	685a      	ldr	r2, [r3, #4]
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	605a      	str	r2, [r3, #4]
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	68da      	ldr	r2, [r3, #12]
 8011240:	4b08      	ldr	r3, [pc, #32]	; (8011264 <vTaskSwitchContext+0xa0>)
 8011242:	601a      	str	r2, [r3, #0]
 8011244:	4b05      	ldr	r3, [pc, #20]	; (801125c <vTaskSwitchContext+0x98>)
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	601a      	str	r2, [r3, #0]
}
 801124a:	46c0      	nop			; (mov r8, r8)
 801124c:	46bd      	mov	sp, r7
 801124e:	b002      	add	sp, #8
 8011250:	bd80      	pop	{r7, pc}
 8011252:	46c0      	nop			; (mov r8, r8)
 8011254:	20000508 	.word	0x20000508
 8011258:	200004f4 	.word	0x200004f4
 801125c:	200004e8 	.word	0x200004e8
 8011260:	200003e4 	.word	0x200003e4
 8011264:	200003e0 	.word	0x200003e0

08011268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011270:	f000 f84e 	bl	8011310 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011274:	4b03      	ldr	r3, [pc, #12]	; (8011284 <prvIdleTask+0x1c>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	2b01      	cmp	r3, #1
 801127a:	d9f9      	bls.n	8011270 <prvIdleTask+0x8>
			{
				taskYIELD();
 801127c:	f000 f9c0 	bl	8011600 <vPortYield>
		prvCheckTasksWaitingTermination();
 8011280:	e7f6      	b.n	8011270 <prvIdleTask+0x8>
 8011282:	46c0      	nop			; (mov r8, r8)
 8011284:	200003e4 	.word	0x200003e4

08011288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801128e:	2300      	movs	r3, #0
 8011290:	607b      	str	r3, [r7, #4]
 8011292:	e00c      	b.n	80112ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	0013      	movs	r3, r2
 8011298:	009b      	lsls	r3, r3, #2
 801129a:	189b      	adds	r3, r3, r2
 801129c:	009b      	lsls	r3, r3, #2
 801129e:	4a14      	ldr	r2, [pc, #80]	; (80112f0 <prvInitialiseTaskLists+0x68>)
 80112a0:	189b      	adds	r3, r3, r2
 80112a2:	0018      	movs	r0, r3
 80112a4:	f7ff fbb8 	bl	8010a18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	3301      	adds	r3, #1
 80112ac:	607b      	str	r3, [r7, #4]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2b06      	cmp	r3, #6
 80112b2:	d9ef      	bls.n	8011294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80112b4:	4b0f      	ldr	r3, [pc, #60]	; (80112f4 <prvInitialiseTaskLists+0x6c>)
 80112b6:	0018      	movs	r0, r3
 80112b8:	f7ff fbae 	bl	8010a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80112bc:	4b0e      	ldr	r3, [pc, #56]	; (80112f8 <prvInitialiseTaskLists+0x70>)
 80112be:	0018      	movs	r0, r3
 80112c0:	f7ff fbaa 	bl	8010a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80112c4:	4b0d      	ldr	r3, [pc, #52]	; (80112fc <prvInitialiseTaskLists+0x74>)
 80112c6:	0018      	movs	r0, r3
 80112c8:	f7ff fba6 	bl	8010a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80112cc:	4b0c      	ldr	r3, [pc, #48]	; (8011300 <prvInitialiseTaskLists+0x78>)
 80112ce:	0018      	movs	r0, r3
 80112d0:	f7ff fba2 	bl	8010a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80112d4:	4b0b      	ldr	r3, [pc, #44]	; (8011304 <prvInitialiseTaskLists+0x7c>)
 80112d6:	0018      	movs	r0, r3
 80112d8:	f7ff fb9e 	bl	8010a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80112dc:	4b0a      	ldr	r3, [pc, #40]	; (8011308 <prvInitialiseTaskLists+0x80>)
 80112de:	4a05      	ldr	r2, [pc, #20]	; (80112f4 <prvInitialiseTaskLists+0x6c>)
 80112e0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80112e2:	4b0a      	ldr	r3, [pc, #40]	; (801130c <prvInitialiseTaskLists+0x84>)
 80112e4:	4a04      	ldr	r2, [pc, #16]	; (80112f8 <prvInitialiseTaskLists+0x70>)
 80112e6:	601a      	str	r2, [r3, #0]
}
 80112e8:	46c0      	nop			; (mov r8, r8)
 80112ea:	46bd      	mov	sp, r7
 80112ec:	b002      	add	sp, #8
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	200003e4 	.word	0x200003e4
 80112f4:	20000470 	.word	0x20000470
 80112f8:	20000484 	.word	0x20000484
 80112fc:	200004a0 	.word	0x200004a0
 8011300:	200004b4 	.word	0x200004b4
 8011304:	200004cc 	.word	0x200004cc
 8011308:	20000498 	.word	0x20000498
 801130c:	2000049c 	.word	0x2000049c

08011310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011316:	e01a      	b.n	801134e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8011318:	f000 f982 	bl	8011620 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 801131c:	4b10      	ldr	r3, [pc, #64]	; (8011360 <prvCheckTasksWaitingTermination+0x50>)
 801131e:	68db      	ldr	r3, [r3, #12]
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	3304      	adds	r3, #4
 8011328:	0018      	movs	r0, r3
 801132a:	f7ff fbf6 	bl	8010b1a <uxListRemove>
				--uxCurrentNumberOfTasks;
 801132e:	4b0d      	ldr	r3, [pc, #52]	; (8011364 <prvCheckTasksWaitingTermination+0x54>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	1e5a      	subs	r2, r3, #1
 8011334:	4b0b      	ldr	r3, [pc, #44]	; (8011364 <prvCheckTasksWaitingTermination+0x54>)
 8011336:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011338:	4b0b      	ldr	r3, [pc, #44]	; (8011368 <prvCheckTasksWaitingTermination+0x58>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	1e5a      	subs	r2, r3, #1
 801133e:	4b0a      	ldr	r3, [pc, #40]	; (8011368 <prvCheckTasksWaitingTermination+0x58>)
 8011340:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8011342:	f000 f97f 	bl	8011644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	0018      	movs	r0, r3
 801134a:	f000 f80f 	bl	801136c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801134e:	4b06      	ldr	r3, [pc, #24]	; (8011368 <prvCheckTasksWaitingTermination+0x58>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d1e0      	bne.n	8011318 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011356:	46c0      	nop			; (mov r8, r8)
 8011358:	46c0      	nop			; (mov r8, r8)
 801135a:	46bd      	mov	sp, r7
 801135c:	b002      	add	sp, #8
 801135e:	bd80      	pop	{r7, pc}
 8011360:	200004b4 	.word	0x200004b4
 8011364:	200004e0 	.word	0x200004e0
 8011368:	200004c8 	.word	0x200004c8

0801136c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2251      	movs	r2, #81	; 0x51
 8011378:	5c9b      	ldrb	r3, [r3, r2]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d109      	bne.n	8011392 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011382:	0018      	movs	r0, r3
 8011384:	f000 fa8a 	bl	801189c <vPortFree>
				vPortFree( pxTCB );
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	0018      	movs	r0, r3
 801138c:	f000 fa86 	bl	801189c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011390:	e010      	b.n	80113b4 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	2251      	movs	r2, #81	; 0x51
 8011396:	5c9b      	ldrb	r3, [r3, r2]
 8011398:	2b01      	cmp	r3, #1
 801139a:	d104      	bne.n	80113a6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	0018      	movs	r0, r3
 80113a0:	f000 fa7c 	bl	801189c <vPortFree>
	}
 80113a4:	e006      	b.n	80113b4 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2251      	movs	r2, #81	; 0x51
 80113aa:	5c9b      	ldrb	r3, [r3, r2]
 80113ac:	2b02      	cmp	r3, #2
 80113ae:	d001      	beq.n	80113b4 <prvDeleteTCB+0x48>
 80113b0:	b672      	cpsid	i
 80113b2:	e7fe      	b.n	80113b2 <prvDeleteTCB+0x46>
	}
 80113b4:	46c0      	nop			; (mov r8, r8)
 80113b6:	46bd      	mov	sp, r7
 80113b8:	b002      	add	sp, #8
 80113ba:	bd80      	pop	{r7, pc}

080113bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113c2:	4b0e      	ldr	r3, [pc, #56]	; (80113fc <prvResetNextTaskUnblockTime+0x40>)
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d101      	bne.n	80113d0 <prvResetNextTaskUnblockTime+0x14>
 80113cc:	2301      	movs	r3, #1
 80113ce:	e000      	b.n	80113d2 <prvResetNextTaskUnblockTime+0x16>
 80113d0:	2300      	movs	r3, #0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d004      	beq.n	80113e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80113d6:	4b0a      	ldr	r3, [pc, #40]	; (8011400 <prvResetNextTaskUnblockTime+0x44>)
 80113d8:	2201      	movs	r2, #1
 80113da:	4252      	negs	r2, r2
 80113dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80113de:	e008      	b.n	80113f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80113e0:	4b06      	ldr	r3, [pc, #24]	; (80113fc <prvResetNextTaskUnblockTime+0x40>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	68db      	ldr	r3, [r3, #12]
 80113e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	685a      	ldr	r2, [r3, #4]
 80113ee:	4b04      	ldr	r3, [pc, #16]	; (8011400 <prvResetNextTaskUnblockTime+0x44>)
 80113f0:	601a      	str	r2, [r3, #0]
}
 80113f2:	46c0      	nop			; (mov r8, r8)
 80113f4:	46bd      	mov	sp, r7
 80113f6:	b002      	add	sp, #8
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	46c0      	nop			; (mov r8, r8)
 80113fc:	20000498 	.word	0x20000498
 8011400:	20000500 	.word	0x20000500

08011404 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801140a:	4b0a      	ldr	r3, [pc, #40]	; (8011434 <xTaskGetSchedulerState+0x30>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d102      	bne.n	8011418 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011412:	2301      	movs	r3, #1
 8011414:	607b      	str	r3, [r7, #4]
 8011416:	e008      	b.n	801142a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011418:	4b07      	ldr	r3, [pc, #28]	; (8011438 <xTaskGetSchedulerState+0x34>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d102      	bne.n	8011426 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011420:	2302      	movs	r3, #2
 8011422:	607b      	str	r3, [r7, #4]
 8011424:	e001      	b.n	801142a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011426:	2300      	movs	r3, #0
 8011428:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801142a:	687b      	ldr	r3, [r7, #4]
	}
 801142c:	0018      	movs	r0, r3
 801142e:	46bd      	mov	sp, r7
 8011430:	b002      	add	sp, #8
 8011432:	bd80      	pop	{r7, pc}
 8011434:	200004ec 	.word	0x200004ec
 8011438:	20000508 	.word	0x20000508

0801143c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b084      	sub	sp, #16
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011446:	4b21      	ldr	r3, [pc, #132]	; (80114cc <prvAddCurrentTaskToDelayedList+0x90>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801144c:	4b20      	ldr	r3, [pc, #128]	; (80114d0 <prvAddCurrentTaskToDelayedList+0x94>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	3304      	adds	r3, #4
 8011452:	0018      	movs	r0, r3
 8011454:	f7ff fb61 	bl	8010b1a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	3301      	adds	r3, #1
 801145c:	d10b      	bne.n	8011476 <prvAddCurrentTaskToDelayedList+0x3a>
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d008      	beq.n	8011476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011464:	4b1a      	ldr	r3, [pc, #104]	; (80114d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	1d1a      	adds	r2, r3, #4
 801146a:	4b1a      	ldr	r3, [pc, #104]	; (80114d4 <prvAddCurrentTaskToDelayedList+0x98>)
 801146c:	0011      	movs	r1, r2
 801146e:	0018      	movs	r0, r3
 8011470:	f7ff fafb 	bl	8010a6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011474:	e026      	b.n	80114c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011476:	68fa      	ldr	r2, [r7, #12]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	18d3      	adds	r3, r2, r3
 801147c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801147e:	4b14      	ldr	r3, [pc, #80]	; (80114d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	68ba      	ldr	r2, [r7, #8]
 8011484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011486:	68ba      	ldr	r2, [r7, #8]
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	429a      	cmp	r2, r3
 801148c:	d209      	bcs.n	80114a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801148e:	4b12      	ldr	r3, [pc, #72]	; (80114d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	4b0f      	ldr	r3, [pc, #60]	; (80114d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	3304      	adds	r3, #4
 8011498:	0019      	movs	r1, r3
 801149a:	0010      	movs	r0, r2
 801149c:	f7ff fb07 	bl	8010aae <vListInsert>
}
 80114a0:	e010      	b.n	80114c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114a2:	4b0e      	ldr	r3, [pc, #56]	; (80114dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	4b0a      	ldr	r3, [pc, #40]	; (80114d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	3304      	adds	r3, #4
 80114ac:	0019      	movs	r1, r3
 80114ae:	0010      	movs	r0, r2
 80114b0:	f7ff fafd 	bl	8010aae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80114b4:	4b0a      	ldr	r3, [pc, #40]	; (80114e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	68ba      	ldr	r2, [r7, #8]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d202      	bcs.n	80114c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80114be:	4b08      	ldr	r3, [pc, #32]	; (80114e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80114c0:	68ba      	ldr	r2, [r7, #8]
 80114c2:	601a      	str	r2, [r3, #0]
}
 80114c4:	46c0      	nop			; (mov r8, r8)
 80114c6:	46bd      	mov	sp, r7
 80114c8:	b004      	add	sp, #16
 80114ca:	bd80      	pop	{r7, pc}
 80114cc:	200004e4 	.word	0x200004e4
 80114d0:	200003e0 	.word	0x200003e0
 80114d4:	200004cc 	.word	0x200004cc
 80114d8:	2000049c 	.word	0x2000049c
 80114dc:	20000498 	.word	0x20000498
 80114e0:	20000500 	.word	0x20000500

080114e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	3b04      	subs	r3, #4
 80114f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	2280      	movs	r2, #128	; 0x80
 80114fa:	0452      	lsls	r2, r2, #17
 80114fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	3b04      	subs	r3, #4
 8011502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8011504:	68ba      	ldr	r2, [r7, #8]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	3b04      	subs	r3, #4
 801150e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011510:	4a08      	ldr	r2, [pc, #32]	; (8011534 <pxPortInitialiseStack+0x50>)
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	3b14      	subs	r3, #20
 801151a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	3b20      	subs	r3, #32
 8011526:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011528:	68fb      	ldr	r3, [r7, #12]
}
 801152a:	0018      	movs	r0, r3
 801152c:	46bd      	mov	sp, r7
 801152e:	b004      	add	sp, #16
 8011530:	bd80      	pop	{r7, pc}
 8011532:	46c0      	nop			; (mov r8, r8)
 8011534:	08011539 	.word	0x08011539

08011538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801153e:	2300      	movs	r3, #0
 8011540:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011542:	4b08      	ldr	r3, [pc, #32]	; (8011564 <prvTaskExitError+0x2c>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	3301      	adds	r3, #1
 8011548:	d001      	beq.n	801154e <prvTaskExitError+0x16>
 801154a:	b672      	cpsid	i
 801154c:	e7fe      	b.n	801154c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 801154e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8011550:	46c0      	nop			; (mov r8, r8)
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d0fc      	beq.n	8011552 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011558:	46c0      	nop			; (mov r8, r8)
 801155a:	46c0      	nop			; (mov r8, r8)
 801155c:	46bd      	mov	sp, r7
 801155e:	b002      	add	sp, #8
 8011560:	bd80      	pop	{r7, pc}
 8011562:	46c0      	nop			; (mov r8, r8)
 8011564:	200000e0 	.word	0x200000e0

08011568 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8011568:	b580      	push	{r7, lr}
 801156a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 801156c:	46c0      	nop			; (mov r8, r8)
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}
	...

08011580 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8011580:	4a0b      	ldr	r2, [pc, #44]	; (80115b0 <pxCurrentTCBConst2>)
 8011582:	6813      	ldr	r3, [r2, #0]
 8011584:	6818      	ldr	r0, [r3, #0]
 8011586:	3020      	adds	r0, #32
 8011588:	f380 8809 	msr	PSP, r0
 801158c:	2002      	movs	r0, #2
 801158e:	f380 8814 	msr	CONTROL, r0
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8011598:	46ae      	mov	lr, r5
 801159a:	bc08      	pop	{r3}
 801159c:	bc04      	pop	{r2}
 801159e:	b662      	cpsie	i
 80115a0:	4718      	bx	r3
 80115a2:	46c0      	nop			; (mov r8, r8)
 80115a4:	46c0      	nop			; (mov r8, r8)
 80115a6:	46c0      	nop			; (mov r8, r8)
 80115a8:	46c0      	nop			; (mov r8, r8)
 80115aa:	46c0      	nop			; (mov r8, r8)
 80115ac:	46c0      	nop			; (mov r8, r8)
 80115ae:	46c0      	nop			; (mov r8, r8)

080115b0 <pxCurrentTCBConst2>:
 80115b0:	200003e0 	.word	0x200003e0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80115b4:	46c0      	nop			; (mov r8, r8)
 80115b6:	46c0      	nop			; (mov r8, r8)

080115b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80115bc:	4b0e      	ldr	r3, [pc, #56]	; (80115f8 <xPortStartScheduler+0x40>)
 80115be:	681a      	ldr	r2, [r3, #0]
 80115c0:	4b0d      	ldr	r3, [pc, #52]	; (80115f8 <xPortStartScheduler+0x40>)
 80115c2:	21ff      	movs	r1, #255	; 0xff
 80115c4:	0409      	lsls	r1, r1, #16
 80115c6:	430a      	orrs	r2, r1
 80115c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80115ca:	4b0b      	ldr	r3, [pc, #44]	; (80115f8 <xPortStartScheduler+0x40>)
 80115cc:	681a      	ldr	r2, [r3, #0]
 80115ce:	4b0a      	ldr	r3, [pc, #40]	; (80115f8 <xPortStartScheduler+0x40>)
 80115d0:	21ff      	movs	r1, #255	; 0xff
 80115d2:	0609      	lsls	r1, r1, #24
 80115d4:	430a      	orrs	r2, r1
 80115d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80115d8:	f000 f898 	bl	801170c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80115dc:	4b07      	ldr	r3, [pc, #28]	; (80115fc <xPortStartScheduler+0x44>)
 80115de:	2200      	movs	r2, #0
 80115e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80115e2:	f7ff ffcd 	bl	8011580 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80115e6:	f7ff fded 	bl	80111c4 <vTaskSwitchContext>
	prvTaskExitError();
 80115ea:	f7ff ffa5 	bl	8011538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80115ee:	2300      	movs	r3, #0
}
 80115f0:	0018      	movs	r0, r3
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	46c0      	nop			; (mov r8, r8)
 80115f8:	e000ed20 	.word	0xe000ed20
 80115fc:	200000e0 	.word	0x200000e0

08011600 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8011600:	b580      	push	{r7, lr}
 8011602:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8011604:	4b05      	ldr	r3, [pc, #20]	; (801161c <vPortYield+0x1c>)
 8011606:	2280      	movs	r2, #128	; 0x80
 8011608:	0552      	lsls	r2, r2, #21
 801160a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801160c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011610:	f3bf 8f6f 	isb	sy
}
 8011614:	46c0      	nop			; (mov r8, r8)
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	46c0      	nop			; (mov r8, r8)
 801161c:	e000ed04 	.word	0xe000ed04

08011620 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011620:	b580      	push	{r7, lr}
 8011622:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8011624:	b672      	cpsid	i
    uxCriticalNesting++;
 8011626:	4b06      	ldr	r3, [pc, #24]	; (8011640 <vPortEnterCritical+0x20>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	1c5a      	adds	r2, r3, #1
 801162c:	4b04      	ldr	r3, [pc, #16]	; (8011640 <vPortEnterCritical+0x20>)
 801162e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8011630:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8011634:	f3bf 8f6f 	isb	sy
}
 8011638:	46c0      	nop			; (mov r8, r8)
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	46c0      	nop			; (mov r8, r8)
 8011640:	200000e0 	.word	0x200000e0

08011644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011644:	b580      	push	{r7, lr}
 8011646:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011648:	4b09      	ldr	r3, [pc, #36]	; (8011670 <vPortExitCritical+0x2c>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d101      	bne.n	8011654 <vPortExitCritical+0x10>
 8011650:	b672      	cpsid	i
 8011652:	e7fe      	b.n	8011652 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8011654:	4b06      	ldr	r3, [pc, #24]	; (8011670 <vPortExitCritical+0x2c>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	1e5a      	subs	r2, r3, #1
 801165a:	4b05      	ldr	r3, [pc, #20]	; (8011670 <vPortExitCritical+0x2c>)
 801165c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 801165e:	4b04      	ldr	r3, [pc, #16]	; (8011670 <vPortExitCritical+0x2c>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d100      	bne.n	8011668 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8011666:	b662      	cpsie	i
    }
}
 8011668:	46c0      	nop			; (mov r8, r8)
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	46c0      	nop			; (mov r8, r8)
 8011670:	200000e0 	.word	0x200000e0

08011674 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8011674:	f3ef 8010 	mrs	r0, PRIMASK
 8011678:	b672      	cpsid	i
 801167a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 801167c:	46c0      	nop			; (mov r8, r8)
 801167e:	0018      	movs	r0, r3

08011680 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8011680:	f380 8810 	msr	PRIMASK, r0
 8011684:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8011686:	46c0      	nop			; (mov r8, r8)
	...

08011690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011690:	f3ef 8009 	mrs	r0, PSP
 8011694:	4b0e      	ldr	r3, [pc, #56]	; (80116d0 <pxCurrentTCBConst>)
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	3820      	subs	r0, #32
 801169a:	6010      	str	r0, [r2, #0]
 801169c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801169e:	4644      	mov	r4, r8
 80116a0:	464d      	mov	r5, r9
 80116a2:	4656      	mov	r6, sl
 80116a4:	465f      	mov	r7, fp
 80116a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80116a8:	b508      	push	{r3, lr}
 80116aa:	b672      	cpsid	i
 80116ac:	f7ff fd8a 	bl	80111c4 <vTaskSwitchContext>
 80116b0:	b662      	cpsie	i
 80116b2:	bc0c      	pop	{r2, r3}
 80116b4:	6811      	ldr	r1, [r2, #0]
 80116b6:	6808      	ldr	r0, [r1, #0]
 80116b8:	3010      	adds	r0, #16
 80116ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80116bc:	46a0      	mov	r8, r4
 80116be:	46a9      	mov	r9, r5
 80116c0:	46b2      	mov	sl, r6
 80116c2:	46bb      	mov	fp, r7
 80116c4:	f380 8809 	msr	PSP, r0
 80116c8:	3820      	subs	r0, #32
 80116ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80116cc:	4718      	bx	r3
 80116ce:	46c0      	nop			; (mov r8, r8)

080116d0 <pxCurrentTCBConst>:
 80116d0:	200003e0 	.word	0x200003e0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80116d4:	46c0      	nop			; (mov r8, r8)
 80116d6:	46c0      	nop			; (mov r8, r8)

080116d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80116de:	f7ff ffc9 	bl	8011674 <ulSetInterruptMaskFromISR>
 80116e2:	0003      	movs	r3, r0
 80116e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80116e6:	f7ff fcb9 	bl	801105c <xTaskIncrementTick>
 80116ea:	1e03      	subs	r3, r0, #0
 80116ec:	d003      	beq.n	80116f6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80116ee:	4b06      	ldr	r3, [pc, #24]	; (8011708 <xPortSysTickHandler+0x30>)
 80116f0:	2280      	movs	r2, #128	; 0x80
 80116f2:	0552      	lsls	r2, r2, #21
 80116f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	0018      	movs	r0, r3
 80116fa:	f7ff ffc1 	bl	8011680 <vClearInterruptMaskFromISR>
}
 80116fe:	46c0      	nop			; (mov r8, r8)
 8011700:	46bd      	mov	sp, r7
 8011702:	b002      	add	sp, #8
 8011704:	bd80      	pop	{r7, pc}
 8011706:	46c0      	nop			; (mov r8, r8)
 8011708:	e000ed04 	.word	0xe000ed04

0801170c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 801170c:	b580      	push	{r7, lr}
 801170e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8011710:	4b0b      	ldr	r3, [pc, #44]	; (8011740 <prvSetupTimerInterrupt+0x34>)
 8011712:	2200      	movs	r2, #0
 8011714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8011716:	4b0b      	ldr	r3, [pc, #44]	; (8011744 <prvSetupTimerInterrupt+0x38>)
 8011718:	2200      	movs	r2, #0
 801171a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801171c:	4b0a      	ldr	r3, [pc, #40]	; (8011748 <prvSetupTimerInterrupt+0x3c>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	22fa      	movs	r2, #250	; 0xfa
 8011722:	0091      	lsls	r1, r2, #2
 8011724:	0018      	movs	r0, r3
 8011726:	f7f7 fd0b 	bl	8009140 <__udivsi3>
 801172a:	0003      	movs	r3, r0
 801172c:	001a      	movs	r2, r3
 801172e:	4b07      	ldr	r3, [pc, #28]	; (801174c <prvSetupTimerInterrupt+0x40>)
 8011730:	3a01      	subs	r2, #1
 8011732:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8011734:	4b02      	ldr	r3, [pc, #8]	; (8011740 <prvSetupTimerInterrupt+0x34>)
 8011736:	2207      	movs	r2, #7
 8011738:	601a      	str	r2, [r3, #0]
}
 801173a:	46c0      	nop			; (mov r8, r8)
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	e000e010 	.word	0xe000e010
 8011744:	e000e018 	.word	0xe000e018
 8011748:	200000d4 	.word	0x200000d4
 801174c:	e000e014 	.word	0xe000e014

08011750 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b086      	sub	sp, #24
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011758:	2300      	movs	r3, #0
 801175a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801175c:	f7ff fbe6 	bl	8010f2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011760:	4b49      	ldr	r3, [pc, #292]	; (8011888 <pvPortMalloc+0x138>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d101      	bne.n	801176c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011768:	f000 f8e0 	bl	801192c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801176c:	4b47      	ldr	r3, [pc, #284]	; (801188c <pvPortMalloc+0x13c>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	4013      	ands	r3, r2
 8011774:	d000      	beq.n	8011778 <pvPortMalloc+0x28>
 8011776:	e079      	b.n	801186c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d012      	beq.n	80117a4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 801177e:	2208      	movs	r2, #8
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	189b      	adds	r3, r3, r2
 8011784:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2207      	movs	r2, #7
 801178a:	4013      	ands	r3, r2
 801178c:	d00a      	beq.n	80117a4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2207      	movs	r2, #7
 8011792:	4393      	bics	r3, r2
 8011794:	3308      	adds	r3, #8
 8011796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2207      	movs	r2, #7
 801179c:	4013      	ands	r3, r2
 801179e:	d001      	beq.n	80117a4 <pvPortMalloc+0x54>
 80117a0:	b672      	cpsid	i
 80117a2:	e7fe      	b.n	80117a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d060      	beq.n	801186c <pvPortMalloc+0x11c>
 80117aa:	4b39      	ldr	r3, [pc, #228]	; (8011890 <pvPortMalloc+0x140>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d85b      	bhi.n	801186c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80117b4:	4b37      	ldr	r3, [pc, #220]	; (8011894 <pvPortMalloc+0x144>)
 80117b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80117b8:	4b36      	ldr	r3, [pc, #216]	; (8011894 <pvPortMalloc+0x144>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80117be:	e004      	b.n	80117ca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	687a      	ldr	r2, [r7, #4]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d903      	bls.n	80117dc <pvPortMalloc+0x8c>
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d1f1      	bne.n	80117c0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80117dc:	4b2a      	ldr	r3, [pc, #168]	; (8011888 <pvPortMalloc+0x138>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	697a      	ldr	r2, [r7, #20]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d042      	beq.n	801186c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	2208      	movs	r2, #8
 80117ec:	189b      	adds	r3, r3, r2
 80117ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	685a      	ldr	r2, [r3, #4]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	1ad2      	subs	r2, r2, r3
 8011800:	2308      	movs	r3, #8
 8011802:	005b      	lsls	r3, r3, #1
 8011804:	429a      	cmp	r2, r3
 8011806:	d916      	bls.n	8011836 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011808:	697a      	ldr	r2, [r7, #20]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	18d3      	adds	r3, r2, r3
 801180e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	2207      	movs	r2, #7
 8011814:	4013      	ands	r3, r2
 8011816:	d001      	beq.n	801181c <pvPortMalloc+0xcc>
 8011818:	b672      	cpsid	i
 801181a:	e7fe      	b.n	801181a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	685a      	ldr	r2, [r3, #4]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	1ad2      	subs	r2, r2, r3
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	0018      	movs	r0, r3
 8011832:	f000 f8db 	bl	80119ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011836:	4b16      	ldr	r3, [pc, #88]	; (8011890 <pvPortMalloc+0x140>)
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	1ad2      	subs	r2, r2, r3
 8011840:	4b13      	ldr	r3, [pc, #76]	; (8011890 <pvPortMalloc+0x140>)
 8011842:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011844:	4b12      	ldr	r3, [pc, #72]	; (8011890 <pvPortMalloc+0x140>)
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	4b13      	ldr	r3, [pc, #76]	; (8011898 <pvPortMalloc+0x148>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	429a      	cmp	r2, r3
 801184e:	d203      	bcs.n	8011858 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011850:	4b0f      	ldr	r3, [pc, #60]	; (8011890 <pvPortMalloc+0x140>)
 8011852:	681a      	ldr	r2, [r3, #0]
 8011854:	4b10      	ldr	r3, [pc, #64]	; (8011898 <pvPortMalloc+0x148>)
 8011856:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	685a      	ldr	r2, [r3, #4]
 801185c:	4b0b      	ldr	r3, [pc, #44]	; (801188c <pvPortMalloc+0x13c>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	431a      	orrs	r2, r3
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	2200      	movs	r2, #0
 801186a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801186c:	f7ff fb6a 	bl	8010f44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2207      	movs	r2, #7
 8011874:	4013      	ands	r3, r2
 8011876:	d001      	beq.n	801187c <pvPortMalloc+0x12c>
 8011878:	b672      	cpsid	i
 801187a:	e7fe      	b.n	801187a <pvPortMalloc+0x12a>
	return pvReturn;
 801187c:	68fb      	ldr	r3, [r7, #12]
}
 801187e:	0018      	movs	r0, r3
 8011880:	46bd      	mov	sp, r7
 8011882:	b006      	add	sp, #24
 8011884:	bd80      	pop	{r7, pc}
 8011886:	46c0      	nop			; (mov r8, r8)
 8011888:	20001114 	.word	0x20001114
 801188c:	20001120 	.word	0x20001120
 8011890:	20001118 	.word	0x20001118
 8011894:	2000110c 	.word	0x2000110c
 8011898:	2000111c 	.word	0x2000111c

0801189c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b084      	sub	sp, #16
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d035      	beq.n	801191a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80118ae:	2308      	movs	r3, #8
 80118b0:	425b      	negs	r3, r3
 80118b2:	68fa      	ldr	r2, [r7, #12]
 80118b4:	18d3      	adds	r3, r2, r3
 80118b6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	685a      	ldr	r2, [r3, #4]
 80118c0:	4b18      	ldr	r3, [pc, #96]	; (8011924 <vPortFree+0x88>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	4013      	ands	r3, r2
 80118c6:	d101      	bne.n	80118cc <vPortFree+0x30>
 80118c8:	b672      	cpsid	i
 80118ca:	e7fe      	b.n	80118ca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d001      	beq.n	80118d8 <vPortFree+0x3c>
 80118d4:	b672      	cpsid	i
 80118d6:	e7fe      	b.n	80118d6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	685a      	ldr	r2, [r3, #4]
 80118dc:	4b11      	ldr	r3, [pc, #68]	; (8011924 <vPortFree+0x88>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4013      	ands	r3, r2
 80118e2:	d01a      	beq.n	801191a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d116      	bne.n	801191a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	685a      	ldr	r2, [r3, #4]
 80118f0:	4b0c      	ldr	r3, [pc, #48]	; (8011924 <vPortFree+0x88>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	43db      	mvns	r3, r3
 80118f6:	401a      	ands	r2, r3
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80118fc:	f7ff fb16 	bl	8010f2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	685a      	ldr	r2, [r3, #4]
 8011904:	4b08      	ldr	r3, [pc, #32]	; (8011928 <vPortFree+0x8c>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	18d2      	adds	r2, r2, r3
 801190a:	4b07      	ldr	r3, [pc, #28]	; (8011928 <vPortFree+0x8c>)
 801190c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	0018      	movs	r0, r3
 8011912:	f000 f86b 	bl	80119ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011916:	f7ff fb15 	bl	8010f44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801191a:	46c0      	nop			; (mov r8, r8)
 801191c:	46bd      	mov	sp, r7
 801191e:	b004      	add	sp, #16
 8011920:	bd80      	pop	{r7, pc}
 8011922:	46c0      	nop			; (mov r8, r8)
 8011924:	20001120 	.word	0x20001120
 8011928:	20001118 	.word	0x20001118

0801192c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b084      	sub	sp, #16
 8011930:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011932:	23c0      	movs	r3, #192	; 0xc0
 8011934:	011b      	lsls	r3, r3, #4
 8011936:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011938:	4b26      	ldr	r3, [pc, #152]	; (80119d4 <prvHeapInit+0xa8>)
 801193a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	2207      	movs	r2, #7
 8011940:	4013      	ands	r3, r2
 8011942:	d00c      	beq.n	801195e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	3307      	adds	r3, #7
 8011948:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	2207      	movs	r2, #7
 801194e:	4393      	bics	r3, r2
 8011950:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011952:	68ba      	ldr	r2, [r7, #8]
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	1ad2      	subs	r2, r2, r3
 8011958:	4b1e      	ldr	r3, [pc, #120]	; (80119d4 <prvHeapInit+0xa8>)
 801195a:	18d3      	adds	r3, r2, r3
 801195c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011962:	4b1d      	ldr	r3, [pc, #116]	; (80119d8 <prvHeapInit+0xac>)
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011968:	4b1b      	ldr	r3, [pc, #108]	; (80119d8 <prvHeapInit+0xac>)
 801196a:	2200      	movs	r2, #0
 801196c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	68ba      	ldr	r2, [r7, #8]
 8011972:	18d3      	adds	r3, r2, r3
 8011974:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011976:	2208      	movs	r2, #8
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	1a9b      	subs	r3, r3, r2
 801197c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2207      	movs	r2, #7
 8011982:	4393      	bics	r3, r2
 8011984:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011986:	68fa      	ldr	r2, [r7, #12]
 8011988:	4b14      	ldr	r3, [pc, #80]	; (80119dc <prvHeapInit+0xb0>)
 801198a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 801198c:	4b13      	ldr	r3, [pc, #76]	; (80119dc <prvHeapInit+0xb0>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2200      	movs	r2, #0
 8011992:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011994:	4b11      	ldr	r3, [pc, #68]	; (80119dc <prvHeapInit+0xb0>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2200      	movs	r2, #0
 801199a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	68fa      	ldr	r2, [r7, #12]
 80119a4:	1ad2      	subs	r2, r2, r3
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80119aa:	4b0c      	ldr	r3, [pc, #48]	; (80119dc <prvHeapInit+0xb0>)
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	685a      	ldr	r2, [r3, #4]
 80119b6:	4b0a      	ldr	r3, [pc, #40]	; (80119e0 <prvHeapInit+0xb4>)
 80119b8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	685a      	ldr	r2, [r3, #4]
 80119be:	4b09      	ldr	r3, [pc, #36]	; (80119e4 <prvHeapInit+0xb8>)
 80119c0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80119c2:	4b09      	ldr	r3, [pc, #36]	; (80119e8 <prvHeapInit+0xbc>)
 80119c4:	2280      	movs	r2, #128	; 0x80
 80119c6:	0612      	lsls	r2, r2, #24
 80119c8:	601a      	str	r2, [r3, #0]
}
 80119ca:	46c0      	nop			; (mov r8, r8)
 80119cc:	46bd      	mov	sp, r7
 80119ce:	b004      	add	sp, #16
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	46c0      	nop			; (mov r8, r8)
 80119d4:	2000050c 	.word	0x2000050c
 80119d8:	2000110c 	.word	0x2000110c
 80119dc:	20001114 	.word	0x20001114
 80119e0:	2000111c 	.word	0x2000111c
 80119e4:	20001118 	.word	0x20001118
 80119e8:	20001120 	.word	0x20001120

080119ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80119f4:	4b27      	ldr	r3, [pc, #156]	; (8011a94 <prvInsertBlockIntoFreeList+0xa8>)
 80119f6:	60fb      	str	r3, [r7, #12]
 80119f8:	e002      	b.n	8011a00 <prvInsertBlockIntoFreeList+0x14>
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	60fb      	str	r3, [r7, #12]
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d8f7      	bhi.n	80119fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	68ba      	ldr	r2, [r7, #8]
 8011a14:	18d3      	adds	r3, r2, r3
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d108      	bne.n	8011a2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	685a      	ldr	r2, [r3, #4]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	18d2      	adds	r2, r2, r3
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	68ba      	ldr	r2, [r7, #8]
 8011a38:	18d2      	adds	r2, r2, r3
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d118      	bne.n	8011a74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	4b14      	ldr	r3, [pc, #80]	; (8011a98 <prvInsertBlockIntoFreeList+0xac>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d00d      	beq.n	8011a6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	685a      	ldr	r2, [r3, #4]
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	18d2      	adds	r2, r2, r3
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	601a      	str	r2, [r3, #0]
 8011a68:	e008      	b.n	8011a7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011a6a:	4b0b      	ldr	r3, [pc, #44]	; (8011a98 <prvInsertBlockIntoFreeList+0xac>)
 8011a6c:	681a      	ldr	r2, [r3, #0]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	601a      	str	r2, [r3, #0]
 8011a72:	e003      	b.n	8011a7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681a      	ldr	r2, [r3, #0]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011a7c:	68fa      	ldr	r2, [r7, #12]
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d002      	beq.n	8011a8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	687a      	ldr	r2, [r7, #4]
 8011a88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a8a:	46c0      	nop			; (mov r8, r8)
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	b004      	add	sp, #16
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	46c0      	nop			; (mov r8, r8)
 8011a94:	2000110c 	.word	0x2000110c
 8011a98:	20001114 	.word	0x20001114

08011a9c <atoi>:
 8011a9c:	b510      	push	{r4, lr}
 8011a9e:	220a      	movs	r2, #10
 8011aa0:	2100      	movs	r1, #0
 8011aa2:	f000 f911 	bl	8011cc8 <strtol>
 8011aa6:	bd10      	pop	{r4, pc}

08011aa8 <__errno>:
 8011aa8:	4b01      	ldr	r3, [pc, #4]	; (8011ab0 <__errno+0x8>)
 8011aaa:	6818      	ldr	r0, [r3, #0]
 8011aac:	4770      	bx	lr
 8011aae:	46c0      	nop			; (mov r8, r8)
 8011ab0:	200000e4 	.word	0x200000e4

08011ab4 <__libc_init_array>:
 8011ab4:	b570      	push	{r4, r5, r6, lr}
 8011ab6:	2600      	movs	r6, #0
 8011ab8:	4d0c      	ldr	r5, [pc, #48]	; (8011aec <__libc_init_array+0x38>)
 8011aba:	4c0d      	ldr	r4, [pc, #52]	; (8011af0 <__libc_init_array+0x3c>)
 8011abc:	1b64      	subs	r4, r4, r5
 8011abe:	10a4      	asrs	r4, r4, #2
 8011ac0:	42a6      	cmp	r6, r4
 8011ac2:	d109      	bne.n	8011ad8 <__libc_init_array+0x24>
 8011ac4:	2600      	movs	r6, #0
 8011ac6:	f000 fd07 	bl	80124d8 <_init>
 8011aca:	4d0a      	ldr	r5, [pc, #40]	; (8011af4 <__libc_init_array+0x40>)
 8011acc:	4c0a      	ldr	r4, [pc, #40]	; (8011af8 <__libc_init_array+0x44>)
 8011ace:	1b64      	subs	r4, r4, r5
 8011ad0:	10a4      	asrs	r4, r4, #2
 8011ad2:	42a6      	cmp	r6, r4
 8011ad4:	d105      	bne.n	8011ae2 <__libc_init_array+0x2e>
 8011ad6:	bd70      	pop	{r4, r5, r6, pc}
 8011ad8:	00b3      	lsls	r3, r6, #2
 8011ada:	58eb      	ldr	r3, [r5, r3]
 8011adc:	4798      	blx	r3
 8011ade:	3601      	adds	r6, #1
 8011ae0:	e7ee      	b.n	8011ac0 <__libc_init_array+0xc>
 8011ae2:	00b3      	lsls	r3, r6, #2
 8011ae4:	58eb      	ldr	r3, [r5, r3]
 8011ae6:	4798      	blx	r3
 8011ae8:	3601      	adds	r6, #1
 8011aea:	e7f2      	b.n	8011ad2 <__libc_init_array+0x1e>
 8011aec:	08013410 	.word	0x08013410
 8011af0:	08013410 	.word	0x08013410
 8011af4:	08013410 	.word	0x08013410
 8011af8:	08013414 	.word	0x08013414

08011afc <memcpy>:
 8011afc:	2300      	movs	r3, #0
 8011afe:	b510      	push	{r4, lr}
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d100      	bne.n	8011b06 <memcpy+0xa>
 8011b04:	bd10      	pop	{r4, pc}
 8011b06:	5ccc      	ldrb	r4, [r1, r3]
 8011b08:	54c4      	strb	r4, [r0, r3]
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	e7f8      	b.n	8011b00 <memcpy+0x4>

08011b0e <memset>:
 8011b0e:	0003      	movs	r3, r0
 8011b10:	1882      	adds	r2, r0, r2
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d100      	bne.n	8011b18 <memset+0xa>
 8011b16:	4770      	bx	lr
 8011b18:	7019      	strb	r1, [r3, #0]
 8011b1a:	3301      	adds	r3, #1
 8011b1c:	e7f9      	b.n	8011b12 <memset+0x4>
	...

08011b20 <siprintf>:
 8011b20:	b40e      	push	{r1, r2, r3}
 8011b22:	b500      	push	{lr}
 8011b24:	490b      	ldr	r1, [pc, #44]	; (8011b54 <siprintf+0x34>)
 8011b26:	b09c      	sub	sp, #112	; 0x70
 8011b28:	ab1d      	add	r3, sp, #116	; 0x74
 8011b2a:	9002      	str	r0, [sp, #8]
 8011b2c:	9006      	str	r0, [sp, #24]
 8011b2e:	9107      	str	r1, [sp, #28]
 8011b30:	9104      	str	r1, [sp, #16]
 8011b32:	4809      	ldr	r0, [pc, #36]	; (8011b58 <siprintf+0x38>)
 8011b34:	4909      	ldr	r1, [pc, #36]	; (8011b5c <siprintf+0x3c>)
 8011b36:	cb04      	ldmia	r3!, {r2}
 8011b38:	9105      	str	r1, [sp, #20]
 8011b3a:	6800      	ldr	r0, [r0, #0]
 8011b3c:	a902      	add	r1, sp, #8
 8011b3e:	9301      	str	r3, [sp, #4]
 8011b40:	f000 f930 	bl	8011da4 <_svfiprintf_r>
 8011b44:	2300      	movs	r3, #0
 8011b46:	9a02      	ldr	r2, [sp, #8]
 8011b48:	7013      	strb	r3, [r2, #0]
 8011b4a:	b01c      	add	sp, #112	; 0x70
 8011b4c:	bc08      	pop	{r3}
 8011b4e:	b003      	add	sp, #12
 8011b50:	4718      	bx	r3
 8011b52:	46c0      	nop			; (mov r8, r8)
 8011b54:	7fffffff 	.word	0x7fffffff
 8011b58:	200000e4 	.word	0x200000e4
 8011b5c:	ffff0208 	.word	0xffff0208

08011b60 <strcat>:
 8011b60:	0002      	movs	r2, r0
 8011b62:	b510      	push	{r4, lr}
 8011b64:	7813      	ldrb	r3, [r2, #0]
 8011b66:	0014      	movs	r4, r2
 8011b68:	3201      	adds	r2, #1
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d1fa      	bne.n	8011b64 <strcat+0x4>
 8011b6e:	5cca      	ldrb	r2, [r1, r3]
 8011b70:	54e2      	strb	r2, [r4, r3]
 8011b72:	3301      	adds	r3, #1
 8011b74:	2a00      	cmp	r2, #0
 8011b76:	d1fa      	bne.n	8011b6e <strcat+0xe>
 8011b78:	bd10      	pop	{r4, pc}

08011b7a <strcpy>:
 8011b7a:	0003      	movs	r3, r0
 8011b7c:	780a      	ldrb	r2, [r1, #0]
 8011b7e:	3101      	adds	r1, #1
 8011b80:	701a      	strb	r2, [r3, #0]
 8011b82:	3301      	adds	r3, #1
 8011b84:	2a00      	cmp	r2, #0
 8011b86:	d1f9      	bne.n	8011b7c <strcpy+0x2>
 8011b88:	4770      	bx	lr

08011b8a <strncmp>:
 8011b8a:	b530      	push	{r4, r5, lr}
 8011b8c:	0005      	movs	r5, r0
 8011b8e:	1e10      	subs	r0, r2, #0
 8011b90:	d00b      	beq.n	8011baa <strncmp+0x20>
 8011b92:	2400      	movs	r4, #0
 8011b94:	3a01      	subs	r2, #1
 8011b96:	5d2b      	ldrb	r3, [r5, r4]
 8011b98:	5d08      	ldrb	r0, [r1, r4]
 8011b9a:	4283      	cmp	r3, r0
 8011b9c:	d104      	bne.n	8011ba8 <strncmp+0x1e>
 8011b9e:	4294      	cmp	r4, r2
 8011ba0:	d002      	beq.n	8011ba8 <strncmp+0x1e>
 8011ba2:	3401      	adds	r4, #1
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d1f6      	bne.n	8011b96 <strncmp+0xc>
 8011ba8:	1a18      	subs	r0, r3, r0
 8011baa:	bd30      	pop	{r4, r5, pc}

08011bac <_strtol_l.isra.0>:
 8011bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bae:	b087      	sub	sp, #28
 8011bb0:	001e      	movs	r6, r3
 8011bb2:	9005      	str	r0, [sp, #20]
 8011bb4:	9101      	str	r1, [sp, #4]
 8011bb6:	9202      	str	r2, [sp, #8]
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d045      	beq.n	8011c48 <_strtol_l.isra.0+0x9c>
 8011bbc:	0008      	movs	r0, r1
 8011bbe:	2b24      	cmp	r3, #36	; 0x24
 8011bc0:	d842      	bhi.n	8011c48 <_strtol_l.isra.0+0x9c>
 8011bc2:	4b3f      	ldr	r3, [pc, #252]	; (8011cc0 <_strtol_l.isra.0+0x114>)
 8011bc4:	2208      	movs	r2, #8
 8011bc6:	469c      	mov	ip, r3
 8011bc8:	0003      	movs	r3, r0
 8011bca:	4661      	mov	r1, ip
 8011bcc:	781c      	ldrb	r4, [r3, #0]
 8011bce:	1c45      	adds	r5, r0, #1
 8011bd0:	5d09      	ldrb	r1, [r1, r4]
 8011bd2:	0028      	movs	r0, r5
 8011bd4:	000f      	movs	r7, r1
 8011bd6:	4017      	ands	r7, r2
 8011bd8:	4211      	tst	r1, r2
 8011bda:	d1f5      	bne.n	8011bc8 <_strtol_l.isra.0+0x1c>
 8011bdc:	2c2d      	cmp	r4, #45	; 0x2d
 8011bde:	d13a      	bne.n	8011c56 <_strtol_l.isra.0+0xaa>
 8011be0:	2701      	movs	r7, #1
 8011be2:	782c      	ldrb	r4, [r5, #0]
 8011be4:	1c9d      	adds	r5, r3, #2
 8011be6:	2e00      	cmp	r6, #0
 8011be8:	d065      	beq.n	8011cb6 <_strtol_l.isra.0+0x10a>
 8011bea:	2e10      	cmp	r6, #16
 8011bec:	d109      	bne.n	8011c02 <_strtol_l.isra.0+0x56>
 8011bee:	2c30      	cmp	r4, #48	; 0x30
 8011bf0:	d107      	bne.n	8011c02 <_strtol_l.isra.0+0x56>
 8011bf2:	2220      	movs	r2, #32
 8011bf4:	782b      	ldrb	r3, [r5, #0]
 8011bf6:	4393      	bics	r3, r2
 8011bf8:	2b58      	cmp	r3, #88	; 0x58
 8011bfa:	d157      	bne.n	8011cac <_strtol_l.isra.0+0x100>
 8011bfc:	2610      	movs	r6, #16
 8011bfe:	786c      	ldrb	r4, [r5, #1]
 8011c00:	3502      	adds	r5, #2
 8011c02:	4b30      	ldr	r3, [pc, #192]	; (8011cc4 <_strtol_l.isra.0+0x118>)
 8011c04:	0031      	movs	r1, r6
 8011c06:	18fb      	adds	r3, r7, r3
 8011c08:	0018      	movs	r0, r3
 8011c0a:	9303      	str	r3, [sp, #12]
 8011c0c:	f7f7 fb1e 	bl	800924c <__aeabi_uidivmod>
 8011c10:	2300      	movs	r3, #0
 8011c12:	2201      	movs	r2, #1
 8011c14:	4684      	mov	ip, r0
 8011c16:	0018      	movs	r0, r3
 8011c18:	9104      	str	r1, [sp, #16]
 8011c1a:	4252      	negs	r2, r2
 8011c1c:	0021      	movs	r1, r4
 8011c1e:	3930      	subs	r1, #48	; 0x30
 8011c20:	2909      	cmp	r1, #9
 8011c22:	d81d      	bhi.n	8011c60 <_strtol_l.isra.0+0xb4>
 8011c24:	000c      	movs	r4, r1
 8011c26:	42a6      	cmp	r6, r4
 8011c28:	dd28      	ble.n	8011c7c <_strtol_l.isra.0+0xd0>
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	db24      	blt.n	8011c78 <_strtol_l.isra.0+0xcc>
 8011c2e:	0013      	movs	r3, r2
 8011c30:	4584      	cmp	ip, r0
 8011c32:	d306      	bcc.n	8011c42 <_strtol_l.isra.0+0x96>
 8011c34:	d102      	bne.n	8011c3c <_strtol_l.isra.0+0x90>
 8011c36:	9904      	ldr	r1, [sp, #16]
 8011c38:	42a1      	cmp	r1, r4
 8011c3a:	db02      	blt.n	8011c42 <_strtol_l.isra.0+0x96>
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	4370      	muls	r0, r6
 8011c40:	1820      	adds	r0, r4, r0
 8011c42:	782c      	ldrb	r4, [r5, #0]
 8011c44:	3501      	adds	r5, #1
 8011c46:	e7e9      	b.n	8011c1c <_strtol_l.isra.0+0x70>
 8011c48:	f7ff ff2e 	bl	8011aa8 <__errno>
 8011c4c:	2316      	movs	r3, #22
 8011c4e:	6003      	str	r3, [r0, #0]
 8011c50:	2000      	movs	r0, #0
 8011c52:	b007      	add	sp, #28
 8011c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c56:	2c2b      	cmp	r4, #43	; 0x2b
 8011c58:	d1c5      	bne.n	8011be6 <_strtol_l.isra.0+0x3a>
 8011c5a:	782c      	ldrb	r4, [r5, #0]
 8011c5c:	1c9d      	adds	r5, r3, #2
 8011c5e:	e7c2      	b.n	8011be6 <_strtol_l.isra.0+0x3a>
 8011c60:	0021      	movs	r1, r4
 8011c62:	3941      	subs	r1, #65	; 0x41
 8011c64:	2919      	cmp	r1, #25
 8011c66:	d801      	bhi.n	8011c6c <_strtol_l.isra.0+0xc0>
 8011c68:	3c37      	subs	r4, #55	; 0x37
 8011c6a:	e7dc      	b.n	8011c26 <_strtol_l.isra.0+0x7a>
 8011c6c:	0021      	movs	r1, r4
 8011c6e:	3961      	subs	r1, #97	; 0x61
 8011c70:	2919      	cmp	r1, #25
 8011c72:	d803      	bhi.n	8011c7c <_strtol_l.isra.0+0xd0>
 8011c74:	3c57      	subs	r4, #87	; 0x57
 8011c76:	e7d6      	b.n	8011c26 <_strtol_l.isra.0+0x7a>
 8011c78:	0013      	movs	r3, r2
 8011c7a:	e7e2      	b.n	8011c42 <_strtol_l.isra.0+0x96>
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	da09      	bge.n	8011c94 <_strtol_l.isra.0+0xe8>
 8011c80:	2322      	movs	r3, #34	; 0x22
 8011c82:	9a05      	ldr	r2, [sp, #20]
 8011c84:	9803      	ldr	r0, [sp, #12]
 8011c86:	6013      	str	r3, [r2, #0]
 8011c88:	9b02      	ldr	r3, [sp, #8]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d0e1      	beq.n	8011c52 <_strtol_l.isra.0+0xa6>
 8011c8e:	1e6b      	subs	r3, r5, #1
 8011c90:	9301      	str	r3, [sp, #4]
 8011c92:	e007      	b.n	8011ca4 <_strtol_l.isra.0+0xf8>
 8011c94:	2f00      	cmp	r7, #0
 8011c96:	d000      	beq.n	8011c9a <_strtol_l.isra.0+0xee>
 8011c98:	4240      	negs	r0, r0
 8011c9a:	9a02      	ldr	r2, [sp, #8]
 8011c9c:	2a00      	cmp	r2, #0
 8011c9e:	d0d8      	beq.n	8011c52 <_strtol_l.isra.0+0xa6>
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d1f4      	bne.n	8011c8e <_strtol_l.isra.0+0xe2>
 8011ca4:	9b02      	ldr	r3, [sp, #8]
 8011ca6:	9a01      	ldr	r2, [sp, #4]
 8011ca8:	601a      	str	r2, [r3, #0]
 8011caa:	e7d2      	b.n	8011c52 <_strtol_l.isra.0+0xa6>
 8011cac:	2430      	movs	r4, #48	; 0x30
 8011cae:	2e00      	cmp	r6, #0
 8011cb0:	d1a7      	bne.n	8011c02 <_strtol_l.isra.0+0x56>
 8011cb2:	3608      	adds	r6, #8
 8011cb4:	e7a5      	b.n	8011c02 <_strtol_l.isra.0+0x56>
 8011cb6:	2c30      	cmp	r4, #48	; 0x30
 8011cb8:	d09b      	beq.n	8011bf2 <_strtol_l.isra.0+0x46>
 8011cba:	260a      	movs	r6, #10
 8011cbc:	e7a1      	b.n	8011c02 <_strtol_l.isra.0+0x56>
 8011cbe:	46c0      	nop			; (mov r8, r8)
 8011cc0:	080132dd 	.word	0x080132dd
 8011cc4:	7fffffff 	.word	0x7fffffff

08011cc8 <strtol>:
 8011cc8:	b510      	push	{r4, lr}
 8011cca:	0013      	movs	r3, r2
 8011ccc:	000a      	movs	r2, r1
 8011cce:	0001      	movs	r1, r0
 8011cd0:	4802      	ldr	r0, [pc, #8]	; (8011cdc <strtol+0x14>)
 8011cd2:	6800      	ldr	r0, [r0, #0]
 8011cd4:	f7ff ff6a 	bl	8011bac <_strtol_l.isra.0>
 8011cd8:	bd10      	pop	{r4, pc}
 8011cda:	46c0      	nop			; (mov r8, r8)
 8011cdc:	200000e4 	.word	0x200000e4

08011ce0 <__ssputs_r>:
 8011ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ce2:	688e      	ldr	r6, [r1, #8]
 8011ce4:	b085      	sub	sp, #20
 8011ce6:	0007      	movs	r7, r0
 8011ce8:	000c      	movs	r4, r1
 8011cea:	9203      	str	r2, [sp, #12]
 8011cec:	9301      	str	r3, [sp, #4]
 8011cee:	429e      	cmp	r6, r3
 8011cf0:	d83c      	bhi.n	8011d6c <__ssputs_r+0x8c>
 8011cf2:	2390      	movs	r3, #144	; 0x90
 8011cf4:	898a      	ldrh	r2, [r1, #12]
 8011cf6:	00db      	lsls	r3, r3, #3
 8011cf8:	421a      	tst	r2, r3
 8011cfa:	d034      	beq.n	8011d66 <__ssputs_r+0x86>
 8011cfc:	2503      	movs	r5, #3
 8011cfe:	6909      	ldr	r1, [r1, #16]
 8011d00:	6823      	ldr	r3, [r4, #0]
 8011d02:	1a5b      	subs	r3, r3, r1
 8011d04:	9302      	str	r3, [sp, #8]
 8011d06:	6963      	ldr	r3, [r4, #20]
 8011d08:	9802      	ldr	r0, [sp, #8]
 8011d0a:	435d      	muls	r5, r3
 8011d0c:	0feb      	lsrs	r3, r5, #31
 8011d0e:	195d      	adds	r5, r3, r5
 8011d10:	9b01      	ldr	r3, [sp, #4]
 8011d12:	106d      	asrs	r5, r5, #1
 8011d14:	3301      	adds	r3, #1
 8011d16:	181b      	adds	r3, r3, r0
 8011d18:	42ab      	cmp	r3, r5
 8011d1a:	d900      	bls.n	8011d1e <__ssputs_r+0x3e>
 8011d1c:	001d      	movs	r5, r3
 8011d1e:	0553      	lsls	r3, r2, #21
 8011d20:	d532      	bpl.n	8011d88 <__ssputs_r+0xa8>
 8011d22:	0029      	movs	r1, r5
 8011d24:	0038      	movs	r0, r7
 8011d26:	f000 fb27 	bl	8012378 <_malloc_r>
 8011d2a:	1e06      	subs	r6, r0, #0
 8011d2c:	d109      	bne.n	8011d42 <__ssputs_r+0x62>
 8011d2e:	230c      	movs	r3, #12
 8011d30:	603b      	str	r3, [r7, #0]
 8011d32:	2340      	movs	r3, #64	; 0x40
 8011d34:	2001      	movs	r0, #1
 8011d36:	89a2      	ldrh	r2, [r4, #12]
 8011d38:	4240      	negs	r0, r0
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	81a3      	strh	r3, [r4, #12]
 8011d3e:	b005      	add	sp, #20
 8011d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d42:	9a02      	ldr	r2, [sp, #8]
 8011d44:	6921      	ldr	r1, [r4, #16]
 8011d46:	f7ff fed9 	bl	8011afc <memcpy>
 8011d4a:	89a3      	ldrh	r3, [r4, #12]
 8011d4c:	4a14      	ldr	r2, [pc, #80]	; (8011da0 <__ssputs_r+0xc0>)
 8011d4e:	401a      	ands	r2, r3
 8011d50:	2380      	movs	r3, #128	; 0x80
 8011d52:	4313      	orrs	r3, r2
 8011d54:	81a3      	strh	r3, [r4, #12]
 8011d56:	9b02      	ldr	r3, [sp, #8]
 8011d58:	6126      	str	r6, [r4, #16]
 8011d5a:	18f6      	adds	r6, r6, r3
 8011d5c:	6026      	str	r6, [r4, #0]
 8011d5e:	6165      	str	r5, [r4, #20]
 8011d60:	9e01      	ldr	r6, [sp, #4]
 8011d62:	1aed      	subs	r5, r5, r3
 8011d64:	60a5      	str	r5, [r4, #8]
 8011d66:	9b01      	ldr	r3, [sp, #4]
 8011d68:	429e      	cmp	r6, r3
 8011d6a:	d900      	bls.n	8011d6e <__ssputs_r+0x8e>
 8011d6c:	9e01      	ldr	r6, [sp, #4]
 8011d6e:	0032      	movs	r2, r6
 8011d70:	9903      	ldr	r1, [sp, #12]
 8011d72:	6820      	ldr	r0, [r4, #0]
 8011d74:	f000 faa3 	bl	80122be <memmove>
 8011d78:	68a3      	ldr	r3, [r4, #8]
 8011d7a:	2000      	movs	r0, #0
 8011d7c:	1b9b      	subs	r3, r3, r6
 8011d7e:	60a3      	str	r3, [r4, #8]
 8011d80:	6823      	ldr	r3, [r4, #0]
 8011d82:	199e      	adds	r6, r3, r6
 8011d84:	6026      	str	r6, [r4, #0]
 8011d86:	e7da      	b.n	8011d3e <__ssputs_r+0x5e>
 8011d88:	002a      	movs	r2, r5
 8011d8a:	0038      	movs	r0, r7
 8011d8c:	f000 fb52 	bl	8012434 <_realloc_r>
 8011d90:	1e06      	subs	r6, r0, #0
 8011d92:	d1e0      	bne.n	8011d56 <__ssputs_r+0x76>
 8011d94:	0038      	movs	r0, r7
 8011d96:	6921      	ldr	r1, [r4, #16]
 8011d98:	f000 faa4 	bl	80122e4 <_free_r>
 8011d9c:	e7c7      	b.n	8011d2e <__ssputs_r+0x4e>
 8011d9e:	46c0      	nop			; (mov r8, r8)
 8011da0:	fffffb7f 	.word	0xfffffb7f

08011da4 <_svfiprintf_r>:
 8011da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011da6:	b0a1      	sub	sp, #132	; 0x84
 8011da8:	9003      	str	r0, [sp, #12]
 8011daa:	001d      	movs	r5, r3
 8011dac:	898b      	ldrh	r3, [r1, #12]
 8011dae:	000f      	movs	r7, r1
 8011db0:	0016      	movs	r6, r2
 8011db2:	061b      	lsls	r3, r3, #24
 8011db4:	d511      	bpl.n	8011dda <_svfiprintf_r+0x36>
 8011db6:	690b      	ldr	r3, [r1, #16]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d10e      	bne.n	8011dda <_svfiprintf_r+0x36>
 8011dbc:	2140      	movs	r1, #64	; 0x40
 8011dbe:	f000 fadb 	bl	8012378 <_malloc_r>
 8011dc2:	6038      	str	r0, [r7, #0]
 8011dc4:	6138      	str	r0, [r7, #16]
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	d105      	bne.n	8011dd6 <_svfiprintf_r+0x32>
 8011dca:	230c      	movs	r3, #12
 8011dcc:	9a03      	ldr	r2, [sp, #12]
 8011dce:	3801      	subs	r0, #1
 8011dd0:	6013      	str	r3, [r2, #0]
 8011dd2:	b021      	add	sp, #132	; 0x84
 8011dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dd6:	2340      	movs	r3, #64	; 0x40
 8011dd8:	617b      	str	r3, [r7, #20]
 8011dda:	2300      	movs	r3, #0
 8011ddc:	ac08      	add	r4, sp, #32
 8011dde:	6163      	str	r3, [r4, #20]
 8011de0:	3320      	adds	r3, #32
 8011de2:	7663      	strb	r3, [r4, #25]
 8011de4:	3310      	adds	r3, #16
 8011de6:	76a3      	strb	r3, [r4, #26]
 8011de8:	9507      	str	r5, [sp, #28]
 8011dea:	0035      	movs	r5, r6
 8011dec:	782b      	ldrb	r3, [r5, #0]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d001      	beq.n	8011df6 <_svfiprintf_r+0x52>
 8011df2:	2b25      	cmp	r3, #37	; 0x25
 8011df4:	d147      	bne.n	8011e86 <_svfiprintf_r+0xe2>
 8011df6:	1bab      	subs	r3, r5, r6
 8011df8:	9305      	str	r3, [sp, #20]
 8011dfa:	42b5      	cmp	r5, r6
 8011dfc:	d00c      	beq.n	8011e18 <_svfiprintf_r+0x74>
 8011dfe:	0032      	movs	r2, r6
 8011e00:	0039      	movs	r1, r7
 8011e02:	9803      	ldr	r0, [sp, #12]
 8011e04:	f7ff ff6c 	bl	8011ce0 <__ssputs_r>
 8011e08:	1c43      	adds	r3, r0, #1
 8011e0a:	d100      	bne.n	8011e0e <_svfiprintf_r+0x6a>
 8011e0c:	e0ae      	b.n	8011f6c <_svfiprintf_r+0x1c8>
 8011e0e:	6962      	ldr	r2, [r4, #20]
 8011e10:	9b05      	ldr	r3, [sp, #20]
 8011e12:	4694      	mov	ip, r2
 8011e14:	4463      	add	r3, ip
 8011e16:	6163      	str	r3, [r4, #20]
 8011e18:	782b      	ldrb	r3, [r5, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d100      	bne.n	8011e20 <_svfiprintf_r+0x7c>
 8011e1e:	e0a5      	b.n	8011f6c <_svfiprintf_r+0x1c8>
 8011e20:	2201      	movs	r2, #1
 8011e22:	2300      	movs	r3, #0
 8011e24:	4252      	negs	r2, r2
 8011e26:	6062      	str	r2, [r4, #4]
 8011e28:	a904      	add	r1, sp, #16
 8011e2a:	3254      	adds	r2, #84	; 0x54
 8011e2c:	1852      	adds	r2, r2, r1
 8011e2e:	1c6e      	adds	r6, r5, #1
 8011e30:	6023      	str	r3, [r4, #0]
 8011e32:	60e3      	str	r3, [r4, #12]
 8011e34:	60a3      	str	r3, [r4, #8]
 8011e36:	7013      	strb	r3, [r2, #0]
 8011e38:	65a3      	str	r3, [r4, #88]	; 0x58
 8011e3a:	2205      	movs	r2, #5
 8011e3c:	7831      	ldrb	r1, [r6, #0]
 8011e3e:	4854      	ldr	r0, [pc, #336]	; (8011f90 <_svfiprintf_r+0x1ec>)
 8011e40:	f000 fa32 	bl	80122a8 <memchr>
 8011e44:	1c75      	adds	r5, r6, #1
 8011e46:	2800      	cmp	r0, #0
 8011e48:	d11f      	bne.n	8011e8a <_svfiprintf_r+0xe6>
 8011e4a:	6822      	ldr	r2, [r4, #0]
 8011e4c:	06d3      	lsls	r3, r2, #27
 8011e4e:	d504      	bpl.n	8011e5a <_svfiprintf_r+0xb6>
 8011e50:	2353      	movs	r3, #83	; 0x53
 8011e52:	a904      	add	r1, sp, #16
 8011e54:	185b      	adds	r3, r3, r1
 8011e56:	2120      	movs	r1, #32
 8011e58:	7019      	strb	r1, [r3, #0]
 8011e5a:	0713      	lsls	r3, r2, #28
 8011e5c:	d504      	bpl.n	8011e68 <_svfiprintf_r+0xc4>
 8011e5e:	2353      	movs	r3, #83	; 0x53
 8011e60:	a904      	add	r1, sp, #16
 8011e62:	185b      	adds	r3, r3, r1
 8011e64:	212b      	movs	r1, #43	; 0x2b
 8011e66:	7019      	strb	r1, [r3, #0]
 8011e68:	7833      	ldrb	r3, [r6, #0]
 8011e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8011e6c:	d016      	beq.n	8011e9c <_svfiprintf_r+0xf8>
 8011e6e:	0035      	movs	r5, r6
 8011e70:	2100      	movs	r1, #0
 8011e72:	200a      	movs	r0, #10
 8011e74:	68e3      	ldr	r3, [r4, #12]
 8011e76:	782a      	ldrb	r2, [r5, #0]
 8011e78:	1c6e      	adds	r6, r5, #1
 8011e7a:	3a30      	subs	r2, #48	; 0x30
 8011e7c:	2a09      	cmp	r2, #9
 8011e7e:	d94e      	bls.n	8011f1e <_svfiprintf_r+0x17a>
 8011e80:	2900      	cmp	r1, #0
 8011e82:	d111      	bne.n	8011ea8 <_svfiprintf_r+0x104>
 8011e84:	e017      	b.n	8011eb6 <_svfiprintf_r+0x112>
 8011e86:	3501      	adds	r5, #1
 8011e88:	e7b0      	b.n	8011dec <_svfiprintf_r+0x48>
 8011e8a:	4b41      	ldr	r3, [pc, #260]	; (8011f90 <_svfiprintf_r+0x1ec>)
 8011e8c:	6822      	ldr	r2, [r4, #0]
 8011e8e:	1ac0      	subs	r0, r0, r3
 8011e90:	2301      	movs	r3, #1
 8011e92:	4083      	lsls	r3, r0
 8011e94:	4313      	orrs	r3, r2
 8011e96:	002e      	movs	r6, r5
 8011e98:	6023      	str	r3, [r4, #0]
 8011e9a:	e7ce      	b.n	8011e3a <_svfiprintf_r+0x96>
 8011e9c:	9b07      	ldr	r3, [sp, #28]
 8011e9e:	1d19      	adds	r1, r3, #4
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	9107      	str	r1, [sp, #28]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	db01      	blt.n	8011eac <_svfiprintf_r+0x108>
 8011ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011eaa:	e004      	b.n	8011eb6 <_svfiprintf_r+0x112>
 8011eac:	425b      	negs	r3, r3
 8011eae:	60e3      	str	r3, [r4, #12]
 8011eb0:	2302      	movs	r3, #2
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	6023      	str	r3, [r4, #0]
 8011eb6:	782b      	ldrb	r3, [r5, #0]
 8011eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8011eba:	d10a      	bne.n	8011ed2 <_svfiprintf_r+0x12e>
 8011ebc:	786b      	ldrb	r3, [r5, #1]
 8011ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8011ec0:	d135      	bne.n	8011f2e <_svfiprintf_r+0x18a>
 8011ec2:	9b07      	ldr	r3, [sp, #28]
 8011ec4:	3502      	adds	r5, #2
 8011ec6:	1d1a      	adds	r2, r3, #4
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	9207      	str	r2, [sp, #28]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	db2b      	blt.n	8011f28 <_svfiprintf_r+0x184>
 8011ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ed2:	4e30      	ldr	r6, [pc, #192]	; (8011f94 <_svfiprintf_r+0x1f0>)
 8011ed4:	2203      	movs	r2, #3
 8011ed6:	0030      	movs	r0, r6
 8011ed8:	7829      	ldrb	r1, [r5, #0]
 8011eda:	f000 f9e5 	bl	80122a8 <memchr>
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	d006      	beq.n	8011ef0 <_svfiprintf_r+0x14c>
 8011ee2:	2340      	movs	r3, #64	; 0x40
 8011ee4:	1b80      	subs	r0, r0, r6
 8011ee6:	4083      	lsls	r3, r0
 8011ee8:	6822      	ldr	r2, [r4, #0]
 8011eea:	3501      	adds	r5, #1
 8011eec:	4313      	orrs	r3, r2
 8011eee:	6023      	str	r3, [r4, #0]
 8011ef0:	7829      	ldrb	r1, [r5, #0]
 8011ef2:	2206      	movs	r2, #6
 8011ef4:	4828      	ldr	r0, [pc, #160]	; (8011f98 <_svfiprintf_r+0x1f4>)
 8011ef6:	1c6e      	adds	r6, r5, #1
 8011ef8:	7621      	strb	r1, [r4, #24]
 8011efa:	f000 f9d5 	bl	80122a8 <memchr>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d03c      	beq.n	8011f7c <_svfiprintf_r+0x1d8>
 8011f02:	4b26      	ldr	r3, [pc, #152]	; (8011f9c <_svfiprintf_r+0x1f8>)
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d125      	bne.n	8011f54 <_svfiprintf_r+0x1b0>
 8011f08:	2207      	movs	r2, #7
 8011f0a:	9b07      	ldr	r3, [sp, #28]
 8011f0c:	3307      	adds	r3, #7
 8011f0e:	4393      	bics	r3, r2
 8011f10:	3308      	adds	r3, #8
 8011f12:	9307      	str	r3, [sp, #28]
 8011f14:	6963      	ldr	r3, [r4, #20]
 8011f16:	9a04      	ldr	r2, [sp, #16]
 8011f18:	189b      	adds	r3, r3, r2
 8011f1a:	6163      	str	r3, [r4, #20]
 8011f1c:	e765      	b.n	8011dea <_svfiprintf_r+0x46>
 8011f1e:	4343      	muls	r3, r0
 8011f20:	0035      	movs	r5, r6
 8011f22:	2101      	movs	r1, #1
 8011f24:	189b      	adds	r3, r3, r2
 8011f26:	e7a6      	b.n	8011e76 <_svfiprintf_r+0xd2>
 8011f28:	2301      	movs	r3, #1
 8011f2a:	425b      	negs	r3, r3
 8011f2c:	e7d0      	b.n	8011ed0 <_svfiprintf_r+0x12c>
 8011f2e:	2300      	movs	r3, #0
 8011f30:	200a      	movs	r0, #10
 8011f32:	001a      	movs	r2, r3
 8011f34:	3501      	adds	r5, #1
 8011f36:	6063      	str	r3, [r4, #4]
 8011f38:	7829      	ldrb	r1, [r5, #0]
 8011f3a:	1c6e      	adds	r6, r5, #1
 8011f3c:	3930      	subs	r1, #48	; 0x30
 8011f3e:	2909      	cmp	r1, #9
 8011f40:	d903      	bls.n	8011f4a <_svfiprintf_r+0x1a6>
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d0c5      	beq.n	8011ed2 <_svfiprintf_r+0x12e>
 8011f46:	9209      	str	r2, [sp, #36]	; 0x24
 8011f48:	e7c3      	b.n	8011ed2 <_svfiprintf_r+0x12e>
 8011f4a:	4342      	muls	r2, r0
 8011f4c:	0035      	movs	r5, r6
 8011f4e:	2301      	movs	r3, #1
 8011f50:	1852      	adds	r2, r2, r1
 8011f52:	e7f1      	b.n	8011f38 <_svfiprintf_r+0x194>
 8011f54:	ab07      	add	r3, sp, #28
 8011f56:	9300      	str	r3, [sp, #0]
 8011f58:	003a      	movs	r2, r7
 8011f5a:	0021      	movs	r1, r4
 8011f5c:	4b10      	ldr	r3, [pc, #64]	; (8011fa0 <_svfiprintf_r+0x1fc>)
 8011f5e:	9803      	ldr	r0, [sp, #12]
 8011f60:	e000      	b.n	8011f64 <_svfiprintf_r+0x1c0>
 8011f62:	bf00      	nop
 8011f64:	9004      	str	r0, [sp, #16]
 8011f66:	9b04      	ldr	r3, [sp, #16]
 8011f68:	3301      	adds	r3, #1
 8011f6a:	d1d3      	bne.n	8011f14 <_svfiprintf_r+0x170>
 8011f6c:	89bb      	ldrh	r3, [r7, #12]
 8011f6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011f70:	065b      	lsls	r3, r3, #25
 8011f72:	d400      	bmi.n	8011f76 <_svfiprintf_r+0x1d2>
 8011f74:	e72d      	b.n	8011dd2 <_svfiprintf_r+0x2e>
 8011f76:	2001      	movs	r0, #1
 8011f78:	4240      	negs	r0, r0
 8011f7a:	e72a      	b.n	8011dd2 <_svfiprintf_r+0x2e>
 8011f7c:	ab07      	add	r3, sp, #28
 8011f7e:	9300      	str	r3, [sp, #0]
 8011f80:	003a      	movs	r2, r7
 8011f82:	0021      	movs	r1, r4
 8011f84:	4b06      	ldr	r3, [pc, #24]	; (8011fa0 <_svfiprintf_r+0x1fc>)
 8011f86:	9803      	ldr	r0, [sp, #12]
 8011f88:	f000 f87c 	bl	8012084 <_printf_i>
 8011f8c:	e7ea      	b.n	8011f64 <_svfiprintf_r+0x1c0>
 8011f8e:	46c0      	nop			; (mov r8, r8)
 8011f90:	080133dd 	.word	0x080133dd
 8011f94:	080133e3 	.word	0x080133e3
 8011f98:	080133e7 	.word	0x080133e7
 8011f9c:	00000000 	.word	0x00000000
 8011fa0:	08011ce1 	.word	0x08011ce1

08011fa4 <_printf_common>:
 8011fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fa6:	0015      	movs	r5, r2
 8011fa8:	9301      	str	r3, [sp, #4]
 8011faa:	688a      	ldr	r2, [r1, #8]
 8011fac:	690b      	ldr	r3, [r1, #16]
 8011fae:	000c      	movs	r4, r1
 8011fb0:	9000      	str	r0, [sp, #0]
 8011fb2:	4293      	cmp	r3, r2
 8011fb4:	da00      	bge.n	8011fb8 <_printf_common+0x14>
 8011fb6:	0013      	movs	r3, r2
 8011fb8:	0022      	movs	r2, r4
 8011fba:	602b      	str	r3, [r5, #0]
 8011fbc:	3243      	adds	r2, #67	; 0x43
 8011fbe:	7812      	ldrb	r2, [r2, #0]
 8011fc0:	2a00      	cmp	r2, #0
 8011fc2:	d001      	beq.n	8011fc8 <_printf_common+0x24>
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	602b      	str	r3, [r5, #0]
 8011fc8:	6823      	ldr	r3, [r4, #0]
 8011fca:	069b      	lsls	r3, r3, #26
 8011fcc:	d502      	bpl.n	8011fd4 <_printf_common+0x30>
 8011fce:	682b      	ldr	r3, [r5, #0]
 8011fd0:	3302      	adds	r3, #2
 8011fd2:	602b      	str	r3, [r5, #0]
 8011fd4:	6822      	ldr	r2, [r4, #0]
 8011fd6:	2306      	movs	r3, #6
 8011fd8:	0017      	movs	r7, r2
 8011fda:	401f      	ands	r7, r3
 8011fdc:	421a      	tst	r2, r3
 8011fde:	d027      	beq.n	8012030 <_printf_common+0x8c>
 8011fe0:	0023      	movs	r3, r4
 8011fe2:	3343      	adds	r3, #67	; 0x43
 8011fe4:	781b      	ldrb	r3, [r3, #0]
 8011fe6:	1e5a      	subs	r2, r3, #1
 8011fe8:	4193      	sbcs	r3, r2
 8011fea:	6822      	ldr	r2, [r4, #0]
 8011fec:	0692      	lsls	r2, r2, #26
 8011fee:	d430      	bmi.n	8012052 <_printf_common+0xae>
 8011ff0:	0022      	movs	r2, r4
 8011ff2:	9901      	ldr	r1, [sp, #4]
 8011ff4:	9800      	ldr	r0, [sp, #0]
 8011ff6:	9e08      	ldr	r6, [sp, #32]
 8011ff8:	3243      	adds	r2, #67	; 0x43
 8011ffa:	47b0      	blx	r6
 8011ffc:	1c43      	adds	r3, r0, #1
 8011ffe:	d025      	beq.n	801204c <_printf_common+0xa8>
 8012000:	2306      	movs	r3, #6
 8012002:	6820      	ldr	r0, [r4, #0]
 8012004:	682a      	ldr	r2, [r5, #0]
 8012006:	68e1      	ldr	r1, [r4, #12]
 8012008:	2500      	movs	r5, #0
 801200a:	4003      	ands	r3, r0
 801200c:	2b04      	cmp	r3, #4
 801200e:	d103      	bne.n	8012018 <_printf_common+0x74>
 8012010:	1a8d      	subs	r5, r1, r2
 8012012:	43eb      	mvns	r3, r5
 8012014:	17db      	asrs	r3, r3, #31
 8012016:	401d      	ands	r5, r3
 8012018:	68a3      	ldr	r3, [r4, #8]
 801201a:	6922      	ldr	r2, [r4, #16]
 801201c:	4293      	cmp	r3, r2
 801201e:	dd01      	ble.n	8012024 <_printf_common+0x80>
 8012020:	1a9b      	subs	r3, r3, r2
 8012022:	18ed      	adds	r5, r5, r3
 8012024:	2700      	movs	r7, #0
 8012026:	42bd      	cmp	r5, r7
 8012028:	d120      	bne.n	801206c <_printf_common+0xc8>
 801202a:	2000      	movs	r0, #0
 801202c:	e010      	b.n	8012050 <_printf_common+0xac>
 801202e:	3701      	adds	r7, #1
 8012030:	68e3      	ldr	r3, [r4, #12]
 8012032:	682a      	ldr	r2, [r5, #0]
 8012034:	1a9b      	subs	r3, r3, r2
 8012036:	42bb      	cmp	r3, r7
 8012038:	ddd2      	ble.n	8011fe0 <_printf_common+0x3c>
 801203a:	0022      	movs	r2, r4
 801203c:	2301      	movs	r3, #1
 801203e:	9901      	ldr	r1, [sp, #4]
 8012040:	9800      	ldr	r0, [sp, #0]
 8012042:	9e08      	ldr	r6, [sp, #32]
 8012044:	3219      	adds	r2, #25
 8012046:	47b0      	blx	r6
 8012048:	1c43      	adds	r3, r0, #1
 801204a:	d1f0      	bne.n	801202e <_printf_common+0x8a>
 801204c:	2001      	movs	r0, #1
 801204e:	4240      	negs	r0, r0
 8012050:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012052:	2030      	movs	r0, #48	; 0x30
 8012054:	18e1      	adds	r1, r4, r3
 8012056:	3143      	adds	r1, #67	; 0x43
 8012058:	7008      	strb	r0, [r1, #0]
 801205a:	0021      	movs	r1, r4
 801205c:	1c5a      	adds	r2, r3, #1
 801205e:	3145      	adds	r1, #69	; 0x45
 8012060:	7809      	ldrb	r1, [r1, #0]
 8012062:	18a2      	adds	r2, r4, r2
 8012064:	3243      	adds	r2, #67	; 0x43
 8012066:	3302      	adds	r3, #2
 8012068:	7011      	strb	r1, [r2, #0]
 801206a:	e7c1      	b.n	8011ff0 <_printf_common+0x4c>
 801206c:	0022      	movs	r2, r4
 801206e:	2301      	movs	r3, #1
 8012070:	9901      	ldr	r1, [sp, #4]
 8012072:	9800      	ldr	r0, [sp, #0]
 8012074:	9e08      	ldr	r6, [sp, #32]
 8012076:	321a      	adds	r2, #26
 8012078:	47b0      	blx	r6
 801207a:	1c43      	adds	r3, r0, #1
 801207c:	d0e6      	beq.n	801204c <_printf_common+0xa8>
 801207e:	3701      	adds	r7, #1
 8012080:	e7d1      	b.n	8012026 <_printf_common+0x82>
	...

08012084 <_printf_i>:
 8012084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012086:	b08b      	sub	sp, #44	; 0x2c
 8012088:	9206      	str	r2, [sp, #24]
 801208a:	000a      	movs	r2, r1
 801208c:	3243      	adds	r2, #67	; 0x43
 801208e:	9307      	str	r3, [sp, #28]
 8012090:	9005      	str	r0, [sp, #20]
 8012092:	9204      	str	r2, [sp, #16]
 8012094:	7e0a      	ldrb	r2, [r1, #24]
 8012096:	000c      	movs	r4, r1
 8012098:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801209a:	2a78      	cmp	r2, #120	; 0x78
 801209c:	d806      	bhi.n	80120ac <_printf_i+0x28>
 801209e:	2a62      	cmp	r2, #98	; 0x62
 80120a0:	d808      	bhi.n	80120b4 <_printf_i+0x30>
 80120a2:	2a00      	cmp	r2, #0
 80120a4:	d100      	bne.n	80120a8 <_printf_i+0x24>
 80120a6:	e0c0      	b.n	801222a <_printf_i+0x1a6>
 80120a8:	2a58      	cmp	r2, #88	; 0x58
 80120aa:	d052      	beq.n	8012152 <_printf_i+0xce>
 80120ac:	0026      	movs	r6, r4
 80120ae:	3642      	adds	r6, #66	; 0x42
 80120b0:	7032      	strb	r2, [r6, #0]
 80120b2:	e022      	b.n	80120fa <_printf_i+0x76>
 80120b4:	0010      	movs	r0, r2
 80120b6:	3863      	subs	r0, #99	; 0x63
 80120b8:	2815      	cmp	r0, #21
 80120ba:	d8f7      	bhi.n	80120ac <_printf_i+0x28>
 80120bc:	f7f7 f836 	bl	800912c <__gnu_thumb1_case_shi>
 80120c0:	001f0016 	.word	0x001f0016
 80120c4:	fff6fff6 	.word	0xfff6fff6
 80120c8:	fff6fff6 	.word	0xfff6fff6
 80120cc:	fff6001f 	.word	0xfff6001f
 80120d0:	fff6fff6 	.word	0xfff6fff6
 80120d4:	00a8fff6 	.word	0x00a8fff6
 80120d8:	009a0036 	.word	0x009a0036
 80120dc:	fff6fff6 	.word	0xfff6fff6
 80120e0:	fff600b9 	.word	0xfff600b9
 80120e4:	fff60036 	.word	0xfff60036
 80120e8:	009efff6 	.word	0x009efff6
 80120ec:	0026      	movs	r6, r4
 80120ee:	681a      	ldr	r2, [r3, #0]
 80120f0:	3642      	adds	r6, #66	; 0x42
 80120f2:	1d11      	adds	r1, r2, #4
 80120f4:	6019      	str	r1, [r3, #0]
 80120f6:	6813      	ldr	r3, [r2, #0]
 80120f8:	7033      	strb	r3, [r6, #0]
 80120fa:	2301      	movs	r3, #1
 80120fc:	e0a7      	b.n	801224e <_printf_i+0x1ca>
 80120fe:	6808      	ldr	r0, [r1, #0]
 8012100:	6819      	ldr	r1, [r3, #0]
 8012102:	1d0a      	adds	r2, r1, #4
 8012104:	0605      	lsls	r5, r0, #24
 8012106:	d50b      	bpl.n	8012120 <_printf_i+0x9c>
 8012108:	680d      	ldr	r5, [r1, #0]
 801210a:	601a      	str	r2, [r3, #0]
 801210c:	2d00      	cmp	r5, #0
 801210e:	da03      	bge.n	8012118 <_printf_i+0x94>
 8012110:	232d      	movs	r3, #45	; 0x2d
 8012112:	9a04      	ldr	r2, [sp, #16]
 8012114:	426d      	negs	r5, r5
 8012116:	7013      	strb	r3, [r2, #0]
 8012118:	4b61      	ldr	r3, [pc, #388]	; (80122a0 <_printf_i+0x21c>)
 801211a:	270a      	movs	r7, #10
 801211c:	9303      	str	r3, [sp, #12]
 801211e:	e032      	b.n	8012186 <_printf_i+0x102>
 8012120:	680d      	ldr	r5, [r1, #0]
 8012122:	601a      	str	r2, [r3, #0]
 8012124:	0641      	lsls	r1, r0, #25
 8012126:	d5f1      	bpl.n	801210c <_printf_i+0x88>
 8012128:	b22d      	sxth	r5, r5
 801212a:	e7ef      	b.n	801210c <_printf_i+0x88>
 801212c:	680d      	ldr	r5, [r1, #0]
 801212e:	6819      	ldr	r1, [r3, #0]
 8012130:	1d08      	adds	r0, r1, #4
 8012132:	6018      	str	r0, [r3, #0]
 8012134:	062e      	lsls	r6, r5, #24
 8012136:	d501      	bpl.n	801213c <_printf_i+0xb8>
 8012138:	680d      	ldr	r5, [r1, #0]
 801213a:	e003      	b.n	8012144 <_printf_i+0xc0>
 801213c:	066d      	lsls	r5, r5, #25
 801213e:	d5fb      	bpl.n	8012138 <_printf_i+0xb4>
 8012140:	680d      	ldr	r5, [r1, #0]
 8012142:	b2ad      	uxth	r5, r5
 8012144:	4b56      	ldr	r3, [pc, #344]	; (80122a0 <_printf_i+0x21c>)
 8012146:	270a      	movs	r7, #10
 8012148:	9303      	str	r3, [sp, #12]
 801214a:	2a6f      	cmp	r2, #111	; 0x6f
 801214c:	d117      	bne.n	801217e <_printf_i+0xfa>
 801214e:	2708      	movs	r7, #8
 8012150:	e015      	b.n	801217e <_printf_i+0xfa>
 8012152:	3145      	adds	r1, #69	; 0x45
 8012154:	700a      	strb	r2, [r1, #0]
 8012156:	4a52      	ldr	r2, [pc, #328]	; (80122a0 <_printf_i+0x21c>)
 8012158:	9203      	str	r2, [sp, #12]
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	6821      	ldr	r1, [r4, #0]
 801215e:	ca20      	ldmia	r2!, {r5}
 8012160:	601a      	str	r2, [r3, #0]
 8012162:	0608      	lsls	r0, r1, #24
 8012164:	d550      	bpl.n	8012208 <_printf_i+0x184>
 8012166:	07cb      	lsls	r3, r1, #31
 8012168:	d502      	bpl.n	8012170 <_printf_i+0xec>
 801216a:	2320      	movs	r3, #32
 801216c:	4319      	orrs	r1, r3
 801216e:	6021      	str	r1, [r4, #0]
 8012170:	2710      	movs	r7, #16
 8012172:	2d00      	cmp	r5, #0
 8012174:	d103      	bne.n	801217e <_printf_i+0xfa>
 8012176:	2320      	movs	r3, #32
 8012178:	6822      	ldr	r2, [r4, #0]
 801217a:	439a      	bics	r2, r3
 801217c:	6022      	str	r2, [r4, #0]
 801217e:	0023      	movs	r3, r4
 8012180:	2200      	movs	r2, #0
 8012182:	3343      	adds	r3, #67	; 0x43
 8012184:	701a      	strb	r2, [r3, #0]
 8012186:	6863      	ldr	r3, [r4, #4]
 8012188:	60a3      	str	r3, [r4, #8]
 801218a:	2b00      	cmp	r3, #0
 801218c:	db03      	blt.n	8012196 <_printf_i+0x112>
 801218e:	2204      	movs	r2, #4
 8012190:	6821      	ldr	r1, [r4, #0]
 8012192:	4391      	bics	r1, r2
 8012194:	6021      	str	r1, [r4, #0]
 8012196:	2d00      	cmp	r5, #0
 8012198:	d102      	bne.n	80121a0 <_printf_i+0x11c>
 801219a:	9e04      	ldr	r6, [sp, #16]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d00c      	beq.n	80121ba <_printf_i+0x136>
 80121a0:	9e04      	ldr	r6, [sp, #16]
 80121a2:	0028      	movs	r0, r5
 80121a4:	0039      	movs	r1, r7
 80121a6:	f7f7 f851 	bl	800924c <__aeabi_uidivmod>
 80121aa:	9b03      	ldr	r3, [sp, #12]
 80121ac:	3e01      	subs	r6, #1
 80121ae:	5c5b      	ldrb	r3, [r3, r1]
 80121b0:	7033      	strb	r3, [r6, #0]
 80121b2:	002b      	movs	r3, r5
 80121b4:	0005      	movs	r5, r0
 80121b6:	429f      	cmp	r7, r3
 80121b8:	d9f3      	bls.n	80121a2 <_printf_i+0x11e>
 80121ba:	2f08      	cmp	r7, #8
 80121bc:	d109      	bne.n	80121d2 <_printf_i+0x14e>
 80121be:	6823      	ldr	r3, [r4, #0]
 80121c0:	07db      	lsls	r3, r3, #31
 80121c2:	d506      	bpl.n	80121d2 <_printf_i+0x14e>
 80121c4:	6863      	ldr	r3, [r4, #4]
 80121c6:	6922      	ldr	r2, [r4, #16]
 80121c8:	4293      	cmp	r3, r2
 80121ca:	dc02      	bgt.n	80121d2 <_printf_i+0x14e>
 80121cc:	2330      	movs	r3, #48	; 0x30
 80121ce:	3e01      	subs	r6, #1
 80121d0:	7033      	strb	r3, [r6, #0]
 80121d2:	9b04      	ldr	r3, [sp, #16]
 80121d4:	1b9b      	subs	r3, r3, r6
 80121d6:	6123      	str	r3, [r4, #16]
 80121d8:	9b07      	ldr	r3, [sp, #28]
 80121da:	0021      	movs	r1, r4
 80121dc:	9300      	str	r3, [sp, #0]
 80121de:	9805      	ldr	r0, [sp, #20]
 80121e0:	9b06      	ldr	r3, [sp, #24]
 80121e2:	aa09      	add	r2, sp, #36	; 0x24
 80121e4:	f7ff fede 	bl	8011fa4 <_printf_common>
 80121e8:	1c43      	adds	r3, r0, #1
 80121ea:	d135      	bne.n	8012258 <_printf_i+0x1d4>
 80121ec:	2001      	movs	r0, #1
 80121ee:	4240      	negs	r0, r0
 80121f0:	b00b      	add	sp, #44	; 0x2c
 80121f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121f4:	2220      	movs	r2, #32
 80121f6:	6809      	ldr	r1, [r1, #0]
 80121f8:	430a      	orrs	r2, r1
 80121fa:	6022      	str	r2, [r4, #0]
 80121fc:	0022      	movs	r2, r4
 80121fe:	2178      	movs	r1, #120	; 0x78
 8012200:	3245      	adds	r2, #69	; 0x45
 8012202:	7011      	strb	r1, [r2, #0]
 8012204:	4a27      	ldr	r2, [pc, #156]	; (80122a4 <_printf_i+0x220>)
 8012206:	e7a7      	b.n	8012158 <_printf_i+0xd4>
 8012208:	0648      	lsls	r0, r1, #25
 801220a:	d5ac      	bpl.n	8012166 <_printf_i+0xe2>
 801220c:	b2ad      	uxth	r5, r5
 801220e:	e7aa      	b.n	8012166 <_printf_i+0xe2>
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	680d      	ldr	r5, [r1, #0]
 8012214:	1d10      	adds	r0, r2, #4
 8012216:	6949      	ldr	r1, [r1, #20]
 8012218:	6018      	str	r0, [r3, #0]
 801221a:	6813      	ldr	r3, [r2, #0]
 801221c:	062e      	lsls	r6, r5, #24
 801221e:	d501      	bpl.n	8012224 <_printf_i+0x1a0>
 8012220:	6019      	str	r1, [r3, #0]
 8012222:	e002      	b.n	801222a <_printf_i+0x1a6>
 8012224:	066d      	lsls	r5, r5, #25
 8012226:	d5fb      	bpl.n	8012220 <_printf_i+0x19c>
 8012228:	8019      	strh	r1, [r3, #0]
 801222a:	2300      	movs	r3, #0
 801222c:	9e04      	ldr	r6, [sp, #16]
 801222e:	6123      	str	r3, [r4, #16]
 8012230:	e7d2      	b.n	80121d8 <_printf_i+0x154>
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	1d11      	adds	r1, r2, #4
 8012236:	6019      	str	r1, [r3, #0]
 8012238:	6816      	ldr	r6, [r2, #0]
 801223a:	2100      	movs	r1, #0
 801223c:	0030      	movs	r0, r6
 801223e:	6862      	ldr	r2, [r4, #4]
 8012240:	f000 f832 	bl	80122a8 <memchr>
 8012244:	2800      	cmp	r0, #0
 8012246:	d001      	beq.n	801224c <_printf_i+0x1c8>
 8012248:	1b80      	subs	r0, r0, r6
 801224a:	6060      	str	r0, [r4, #4]
 801224c:	6863      	ldr	r3, [r4, #4]
 801224e:	6123      	str	r3, [r4, #16]
 8012250:	2300      	movs	r3, #0
 8012252:	9a04      	ldr	r2, [sp, #16]
 8012254:	7013      	strb	r3, [r2, #0]
 8012256:	e7bf      	b.n	80121d8 <_printf_i+0x154>
 8012258:	6923      	ldr	r3, [r4, #16]
 801225a:	0032      	movs	r2, r6
 801225c:	9906      	ldr	r1, [sp, #24]
 801225e:	9805      	ldr	r0, [sp, #20]
 8012260:	9d07      	ldr	r5, [sp, #28]
 8012262:	47a8      	blx	r5
 8012264:	1c43      	adds	r3, r0, #1
 8012266:	d0c1      	beq.n	80121ec <_printf_i+0x168>
 8012268:	6823      	ldr	r3, [r4, #0]
 801226a:	079b      	lsls	r3, r3, #30
 801226c:	d415      	bmi.n	801229a <_printf_i+0x216>
 801226e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012270:	68e0      	ldr	r0, [r4, #12]
 8012272:	4298      	cmp	r0, r3
 8012274:	dabc      	bge.n	80121f0 <_printf_i+0x16c>
 8012276:	0018      	movs	r0, r3
 8012278:	e7ba      	b.n	80121f0 <_printf_i+0x16c>
 801227a:	0022      	movs	r2, r4
 801227c:	2301      	movs	r3, #1
 801227e:	9906      	ldr	r1, [sp, #24]
 8012280:	9805      	ldr	r0, [sp, #20]
 8012282:	9e07      	ldr	r6, [sp, #28]
 8012284:	3219      	adds	r2, #25
 8012286:	47b0      	blx	r6
 8012288:	1c43      	adds	r3, r0, #1
 801228a:	d0af      	beq.n	80121ec <_printf_i+0x168>
 801228c:	3501      	adds	r5, #1
 801228e:	68e3      	ldr	r3, [r4, #12]
 8012290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012292:	1a9b      	subs	r3, r3, r2
 8012294:	42ab      	cmp	r3, r5
 8012296:	dcf0      	bgt.n	801227a <_printf_i+0x1f6>
 8012298:	e7e9      	b.n	801226e <_printf_i+0x1ea>
 801229a:	2500      	movs	r5, #0
 801229c:	e7f7      	b.n	801228e <_printf_i+0x20a>
 801229e:	46c0      	nop			; (mov r8, r8)
 80122a0:	080133ee 	.word	0x080133ee
 80122a4:	080133ff 	.word	0x080133ff

080122a8 <memchr>:
 80122a8:	b2c9      	uxtb	r1, r1
 80122aa:	1882      	adds	r2, r0, r2
 80122ac:	4290      	cmp	r0, r2
 80122ae:	d101      	bne.n	80122b4 <memchr+0xc>
 80122b0:	2000      	movs	r0, #0
 80122b2:	4770      	bx	lr
 80122b4:	7803      	ldrb	r3, [r0, #0]
 80122b6:	428b      	cmp	r3, r1
 80122b8:	d0fb      	beq.n	80122b2 <memchr+0xa>
 80122ba:	3001      	adds	r0, #1
 80122bc:	e7f6      	b.n	80122ac <memchr+0x4>

080122be <memmove>:
 80122be:	b510      	push	{r4, lr}
 80122c0:	4288      	cmp	r0, r1
 80122c2:	d902      	bls.n	80122ca <memmove+0xc>
 80122c4:	188b      	adds	r3, r1, r2
 80122c6:	4298      	cmp	r0, r3
 80122c8:	d303      	bcc.n	80122d2 <memmove+0x14>
 80122ca:	2300      	movs	r3, #0
 80122cc:	e007      	b.n	80122de <memmove+0x20>
 80122ce:	5c8b      	ldrb	r3, [r1, r2]
 80122d0:	5483      	strb	r3, [r0, r2]
 80122d2:	3a01      	subs	r2, #1
 80122d4:	d2fb      	bcs.n	80122ce <memmove+0x10>
 80122d6:	bd10      	pop	{r4, pc}
 80122d8:	5ccc      	ldrb	r4, [r1, r3]
 80122da:	54c4      	strb	r4, [r0, r3]
 80122dc:	3301      	adds	r3, #1
 80122de:	429a      	cmp	r2, r3
 80122e0:	d1fa      	bne.n	80122d8 <memmove+0x1a>
 80122e2:	e7f8      	b.n	80122d6 <memmove+0x18>

080122e4 <_free_r>:
 80122e4:	b570      	push	{r4, r5, r6, lr}
 80122e6:	0005      	movs	r5, r0
 80122e8:	2900      	cmp	r1, #0
 80122ea:	d010      	beq.n	801230e <_free_r+0x2a>
 80122ec:	1f0c      	subs	r4, r1, #4
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	da00      	bge.n	80122f6 <_free_r+0x12>
 80122f4:	18e4      	adds	r4, r4, r3
 80122f6:	0028      	movs	r0, r5
 80122f8:	f000 f8d4 	bl	80124a4 <__malloc_lock>
 80122fc:	4a1d      	ldr	r2, [pc, #116]	; (8012374 <_free_r+0x90>)
 80122fe:	6813      	ldr	r3, [r2, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d105      	bne.n	8012310 <_free_r+0x2c>
 8012304:	6063      	str	r3, [r4, #4]
 8012306:	6014      	str	r4, [r2, #0]
 8012308:	0028      	movs	r0, r5
 801230a:	f000 f8d3 	bl	80124b4 <__malloc_unlock>
 801230e:	bd70      	pop	{r4, r5, r6, pc}
 8012310:	42a3      	cmp	r3, r4
 8012312:	d908      	bls.n	8012326 <_free_r+0x42>
 8012314:	6821      	ldr	r1, [r4, #0]
 8012316:	1860      	adds	r0, r4, r1
 8012318:	4283      	cmp	r3, r0
 801231a:	d1f3      	bne.n	8012304 <_free_r+0x20>
 801231c:	6818      	ldr	r0, [r3, #0]
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	1841      	adds	r1, r0, r1
 8012322:	6021      	str	r1, [r4, #0]
 8012324:	e7ee      	b.n	8012304 <_free_r+0x20>
 8012326:	001a      	movs	r2, r3
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d001      	beq.n	8012332 <_free_r+0x4e>
 801232e:	42a3      	cmp	r3, r4
 8012330:	d9f9      	bls.n	8012326 <_free_r+0x42>
 8012332:	6811      	ldr	r1, [r2, #0]
 8012334:	1850      	adds	r0, r2, r1
 8012336:	42a0      	cmp	r0, r4
 8012338:	d10b      	bne.n	8012352 <_free_r+0x6e>
 801233a:	6820      	ldr	r0, [r4, #0]
 801233c:	1809      	adds	r1, r1, r0
 801233e:	1850      	adds	r0, r2, r1
 8012340:	6011      	str	r1, [r2, #0]
 8012342:	4283      	cmp	r3, r0
 8012344:	d1e0      	bne.n	8012308 <_free_r+0x24>
 8012346:	6818      	ldr	r0, [r3, #0]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	1841      	adds	r1, r0, r1
 801234c:	6011      	str	r1, [r2, #0]
 801234e:	6053      	str	r3, [r2, #4]
 8012350:	e7da      	b.n	8012308 <_free_r+0x24>
 8012352:	42a0      	cmp	r0, r4
 8012354:	d902      	bls.n	801235c <_free_r+0x78>
 8012356:	230c      	movs	r3, #12
 8012358:	602b      	str	r3, [r5, #0]
 801235a:	e7d5      	b.n	8012308 <_free_r+0x24>
 801235c:	6821      	ldr	r1, [r4, #0]
 801235e:	1860      	adds	r0, r4, r1
 8012360:	4283      	cmp	r3, r0
 8012362:	d103      	bne.n	801236c <_free_r+0x88>
 8012364:	6818      	ldr	r0, [r3, #0]
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	1841      	adds	r1, r0, r1
 801236a:	6021      	str	r1, [r4, #0]
 801236c:	6063      	str	r3, [r4, #4]
 801236e:	6054      	str	r4, [r2, #4]
 8012370:	e7ca      	b.n	8012308 <_free_r+0x24>
 8012372:	46c0      	nop			; (mov r8, r8)
 8012374:	20001124 	.word	0x20001124

08012378 <_malloc_r>:
 8012378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801237a:	2303      	movs	r3, #3
 801237c:	1ccd      	adds	r5, r1, #3
 801237e:	439d      	bics	r5, r3
 8012380:	3508      	adds	r5, #8
 8012382:	0006      	movs	r6, r0
 8012384:	2d0c      	cmp	r5, #12
 8012386:	d21f      	bcs.n	80123c8 <_malloc_r+0x50>
 8012388:	250c      	movs	r5, #12
 801238a:	42a9      	cmp	r1, r5
 801238c:	d81e      	bhi.n	80123cc <_malloc_r+0x54>
 801238e:	0030      	movs	r0, r6
 8012390:	f000 f888 	bl	80124a4 <__malloc_lock>
 8012394:	4925      	ldr	r1, [pc, #148]	; (801242c <_malloc_r+0xb4>)
 8012396:	680a      	ldr	r2, [r1, #0]
 8012398:	0014      	movs	r4, r2
 801239a:	2c00      	cmp	r4, #0
 801239c:	d11a      	bne.n	80123d4 <_malloc_r+0x5c>
 801239e:	4f24      	ldr	r7, [pc, #144]	; (8012430 <_malloc_r+0xb8>)
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d104      	bne.n	80123b0 <_malloc_r+0x38>
 80123a6:	0021      	movs	r1, r4
 80123a8:	0030      	movs	r0, r6
 80123aa:	f000 f869 	bl	8012480 <_sbrk_r>
 80123ae:	6038      	str	r0, [r7, #0]
 80123b0:	0029      	movs	r1, r5
 80123b2:	0030      	movs	r0, r6
 80123b4:	f000 f864 	bl	8012480 <_sbrk_r>
 80123b8:	1c43      	adds	r3, r0, #1
 80123ba:	d12b      	bne.n	8012414 <_malloc_r+0x9c>
 80123bc:	230c      	movs	r3, #12
 80123be:	0030      	movs	r0, r6
 80123c0:	6033      	str	r3, [r6, #0]
 80123c2:	f000 f877 	bl	80124b4 <__malloc_unlock>
 80123c6:	e003      	b.n	80123d0 <_malloc_r+0x58>
 80123c8:	2d00      	cmp	r5, #0
 80123ca:	dade      	bge.n	801238a <_malloc_r+0x12>
 80123cc:	230c      	movs	r3, #12
 80123ce:	6033      	str	r3, [r6, #0]
 80123d0:	2000      	movs	r0, #0
 80123d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123d4:	6823      	ldr	r3, [r4, #0]
 80123d6:	1b5b      	subs	r3, r3, r5
 80123d8:	d419      	bmi.n	801240e <_malloc_r+0x96>
 80123da:	2b0b      	cmp	r3, #11
 80123dc:	d903      	bls.n	80123e6 <_malloc_r+0x6e>
 80123de:	6023      	str	r3, [r4, #0]
 80123e0:	18e4      	adds	r4, r4, r3
 80123e2:	6025      	str	r5, [r4, #0]
 80123e4:	e003      	b.n	80123ee <_malloc_r+0x76>
 80123e6:	6863      	ldr	r3, [r4, #4]
 80123e8:	42a2      	cmp	r2, r4
 80123ea:	d10e      	bne.n	801240a <_malloc_r+0x92>
 80123ec:	600b      	str	r3, [r1, #0]
 80123ee:	0030      	movs	r0, r6
 80123f0:	f000 f860 	bl	80124b4 <__malloc_unlock>
 80123f4:	0020      	movs	r0, r4
 80123f6:	2207      	movs	r2, #7
 80123f8:	300b      	adds	r0, #11
 80123fa:	1d23      	adds	r3, r4, #4
 80123fc:	4390      	bics	r0, r2
 80123fe:	1ac2      	subs	r2, r0, r3
 8012400:	4298      	cmp	r0, r3
 8012402:	d0e6      	beq.n	80123d2 <_malloc_r+0x5a>
 8012404:	1a1b      	subs	r3, r3, r0
 8012406:	50a3      	str	r3, [r4, r2]
 8012408:	e7e3      	b.n	80123d2 <_malloc_r+0x5a>
 801240a:	6053      	str	r3, [r2, #4]
 801240c:	e7ef      	b.n	80123ee <_malloc_r+0x76>
 801240e:	0022      	movs	r2, r4
 8012410:	6864      	ldr	r4, [r4, #4]
 8012412:	e7c2      	b.n	801239a <_malloc_r+0x22>
 8012414:	2303      	movs	r3, #3
 8012416:	1cc4      	adds	r4, r0, #3
 8012418:	439c      	bics	r4, r3
 801241a:	42a0      	cmp	r0, r4
 801241c:	d0e1      	beq.n	80123e2 <_malloc_r+0x6a>
 801241e:	1a21      	subs	r1, r4, r0
 8012420:	0030      	movs	r0, r6
 8012422:	f000 f82d 	bl	8012480 <_sbrk_r>
 8012426:	1c43      	adds	r3, r0, #1
 8012428:	d1db      	bne.n	80123e2 <_malloc_r+0x6a>
 801242a:	e7c7      	b.n	80123bc <_malloc_r+0x44>
 801242c:	20001124 	.word	0x20001124
 8012430:	20001128 	.word	0x20001128

08012434 <_realloc_r>:
 8012434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012436:	0007      	movs	r7, r0
 8012438:	000d      	movs	r5, r1
 801243a:	0016      	movs	r6, r2
 801243c:	2900      	cmp	r1, #0
 801243e:	d105      	bne.n	801244c <_realloc_r+0x18>
 8012440:	0011      	movs	r1, r2
 8012442:	f7ff ff99 	bl	8012378 <_malloc_r>
 8012446:	0004      	movs	r4, r0
 8012448:	0020      	movs	r0, r4
 801244a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801244c:	2a00      	cmp	r2, #0
 801244e:	d103      	bne.n	8012458 <_realloc_r+0x24>
 8012450:	f7ff ff48 	bl	80122e4 <_free_r>
 8012454:	0034      	movs	r4, r6
 8012456:	e7f7      	b.n	8012448 <_realloc_r+0x14>
 8012458:	f000 f834 	bl	80124c4 <_malloc_usable_size_r>
 801245c:	002c      	movs	r4, r5
 801245e:	42b0      	cmp	r0, r6
 8012460:	d2f2      	bcs.n	8012448 <_realloc_r+0x14>
 8012462:	0031      	movs	r1, r6
 8012464:	0038      	movs	r0, r7
 8012466:	f7ff ff87 	bl	8012378 <_malloc_r>
 801246a:	1e04      	subs	r4, r0, #0
 801246c:	d0ec      	beq.n	8012448 <_realloc_r+0x14>
 801246e:	0029      	movs	r1, r5
 8012470:	0032      	movs	r2, r6
 8012472:	f7ff fb43 	bl	8011afc <memcpy>
 8012476:	0029      	movs	r1, r5
 8012478:	0038      	movs	r0, r7
 801247a:	f7ff ff33 	bl	80122e4 <_free_r>
 801247e:	e7e3      	b.n	8012448 <_realloc_r+0x14>

08012480 <_sbrk_r>:
 8012480:	2300      	movs	r3, #0
 8012482:	b570      	push	{r4, r5, r6, lr}
 8012484:	4d06      	ldr	r5, [pc, #24]	; (80124a0 <_sbrk_r+0x20>)
 8012486:	0004      	movs	r4, r0
 8012488:	0008      	movs	r0, r1
 801248a:	602b      	str	r3, [r5, #0]
 801248c:	f7fa fda4 	bl	800cfd8 <_sbrk>
 8012490:	1c43      	adds	r3, r0, #1
 8012492:	d103      	bne.n	801249c <_sbrk_r+0x1c>
 8012494:	682b      	ldr	r3, [r5, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d000      	beq.n	801249c <_sbrk_r+0x1c>
 801249a:	6023      	str	r3, [r4, #0]
 801249c:	bd70      	pop	{r4, r5, r6, pc}
 801249e:	46c0      	nop			; (mov r8, r8)
 80124a0:	20001b18 	.word	0x20001b18

080124a4 <__malloc_lock>:
 80124a4:	b510      	push	{r4, lr}
 80124a6:	4802      	ldr	r0, [pc, #8]	; (80124b0 <__malloc_lock+0xc>)
 80124a8:	f000 f814 	bl	80124d4 <__retarget_lock_acquire_recursive>
 80124ac:	bd10      	pop	{r4, pc}
 80124ae:	46c0      	nop			; (mov r8, r8)
 80124b0:	20001b20 	.word	0x20001b20

080124b4 <__malloc_unlock>:
 80124b4:	b510      	push	{r4, lr}
 80124b6:	4802      	ldr	r0, [pc, #8]	; (80124c0 <__malloc_unlock+0xc>)
 80124b8:	f000 f80d 	bl	80124d6 <__retarget_lock_release_recursive>
 80124bc:	bd10      	pop	{r4, pc}
 80124be:	46c0      	nop			; (mov r8, r8)
 80124c0:	20001b20 	.word	0x20001b20

080124c4 <_malloc_usable_size_r>:
 80124c4:	1f0b      	subs	r3, r1, #4
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	1f18      	subs	r0, r3, #4
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	da01      	bge.n	80124d2 <_malloc_usable_size_r+0xe>
 80124ce:	580b      	ldr	r3, [r1, r0]
 80124d0:	18c0      	adds	r0, r0, r3
 80124d2:	4770      	bx	lr

080124d4 <__retarget_lock_acquire_recursive>:
 80124d4:	4770      	bx	lr

080124d6 <__retarget_lock_release_recursive>:
 80124d6:	4770      	bx	lr

080124d8 <_init>:
 80124d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124da:	46c0      	nop			; (mov r8, r8)
 80124dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124de:	bc08      	pop	{r3}
 80124e0:	469e      	mov	lr, r3
 80124e2:	4770      	bx	lr

080124e4 <_fini>:
 80124e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e6:	46c0      	nop			; (mov r8, r8)
 80124e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ea:	bc08      	pop	{r3}
 80124ec:	469e      	mov	lr, r3
 80124ee:	4770      	bx	lr
