
M0_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08009000  08009000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc88  080090c0  080090c0  000090c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015c8  08018d48  08018d48  00018d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a310  0801a310  000202b8  2**0
                  CONTENTS
  4 .ARM          00000000  0801a310  0801a310  000202b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a310  0801a310  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a310  0801a310  0001a310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a314  0801a314  0001a314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  200000c0  0801a318  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000334c  200002b8  0801a510  000202b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003604  0801a510  00023604  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000252fd  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005346  00000000  00000000  000455dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  0004a928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  0004bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007739  00000000  00000000  0004d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e57a  00000000  00000000  00054bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1a30  00000000  00000000  0007316b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00114b9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b8  00000000  00000000  00114bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080090c0 <__do_global_dtors_aux>:
 80090c0:	b510      	push	{r4, lr}
 80090c2:	4c06      	ldr	r4, [pc, #24]	; (80090dc <__do_global_dtors_aux+0x1c>)
 80090c4:	7823      	ldrb	r3, [r4, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d107      	bne.n	80090da <__do_global_dtors_aux+0x1a>
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <__do_global_dtors_aux+0x20>)
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <__do_global_dtors_aux+0x16>
 80090d0:	4804      	ldr	r0, [pc, #16]	; (80090e4 <__do_global_dtors_aux+0x24>)
 80090d2:	e000      	b.n	80090d6 <__do_global_dtors_aux+0x16>
 80090d4:	bf00      	nop
 80090d6:	2301      	movs	r3, #1
 80090d8:	7023      	strb	r3, [r4, #0]
 80090da:	bd10      	pop	{r4, pc}
 80090dc:	200002b8 	.word	0x200002b8
 80090e0:	00000000 	.word	0x00000000
 80090e4:	08018d30 	.word	0x08018d30

080090e8 <frame_dummy>:
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <frame_dummy+0x14>)
 80090ea:	b510      	push	{r4, lr}
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <frame_dummy+0x10>
 80090f0:	4903      	ldr	r1, [pc, #12]	; (8009100 <frame_dummy+0x18>)
 80090f2:	4804      	ldr	r0, [pc, #16]	; (8009104 <frame_dummy+0x1c>)
 80090f4:	e000      	b.n	80090f8 <frame_dummy+0x10>
 80090f6:	bf00      	nop
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	00000000 	.word	0x00000000
 8009100:	200002bc 	.word	0x200002bc
 8009104:	08018d30 	.word	0x08018d30

08009108 <strcmp>:
 8009108:	7802      	ldrb	r2, [r0, #0]
 800910a:	780b      	ldrb	r3, [r1, #0]
 800910c:	2a00      	cmp	r2, #0
 800910e:	d003      	beq.n	8009118 <strcmp+0x10>
 8009110:	3001      	adds	r0, #1
 8009112:	3101      	adds	r1, #1
 8009114:	429a      	cmp	r2, r3
 8009116:	d0f7      	beq.n	8009108 <strcmp>
 8009118:	1ad0      	subs	r0, r2, r3
 800911a:	4770      	bx	lr

0800911c <strlen>:
 800911c:	2300      	movs	r3, #0
 800911e:	5cc2      	ldrb	r2, [r0, r3]
 8009120:	3301      	adds	r3, #1
 8009122:	2a00      	cmp	r2, #0
 8009124:	d1fb      	bne.n	800911e <strlen+0x2>
 8009126:	1e58      	subs	r0, r3, #1
 8009128:	4770      	bx	lr
	...

0800912c <__gnu_thumb1_case_shi>:
 800912c:	b403      	push	{r0, r1}
 800912e:	4671      	mov	r1, lr
 8009130:	0849      	lsrs	r1, r1, #1
 8009132:	0040      	lsls	r0, r0, #1
 8009134:	0049      	lsls	r1, r1, #1
 8009136:	5e09      	ldrsh	r1, [r1, r0]
 8009138:	0049      	lsls	r1, r1, #1
 800913a:	448e      	add	lr, r1
 800913c:	bc03      	pop	{r0, r1}
 800913e:	4770      	bx	lr

08009140 <__udivsi3>:
 8009140:	2200      	movs	r2, #0
 8009142:	0843      	lsrs	r3, r0, #1
 8009144:	428b      	cmp	r3, r1
 8009146:	d374      	bcc.n	8009232 <__udivsi3+0xf2>
 8009148:	0903      	lsrs	r3, r0, #4
 800914a:	428b      	cmp	r3, r1
 800914c:	d35f      	bcc.n	800920e <__udivsi3+0xce>
 800914e:	0a03      	lsrs	r3, r0, #8
 8009150:	428b      	cmp	r3, r1
 8009152:	d344      	bcc.n	80091de <__udivsi3+0x9e>
 8009154:	0b03      	lsrs	r3, r0, #12
 8009156:	428b      	cmp	r3, r1
 8009158:	d328      	bcc.n	80091ac <__udivsi3+0x6c>
 800915a:	0c03      	lsrs	r3, r0, #16
 800915c:	428b      	cmp	r3, r1
 800915e:	d30d      	bcc.n	800917c <__udivsi3+0x3c>
 8009160:	22ff      	movs	r2, #255	; 0xff
 8009162:	0209      	lsls	r1, r1, #8
 8009164:	ba12      	rev	r2, r2
 8009166:	0c03      	lsrs	r3, r0, #16
 8009168:	428b      	cmp	r3, r1
 800916a:	d302      	bcc.n	8009172 <__udivsi3+0x32>
 800916c:	1212      	asrs	r2, r2, #8
 800916e:	0209      	lsls	r1, r1, #8
 8009170:	d065      	beq.n	800923e <__udivsi3+0xfe>
 8009172:	0b03      	lsrs	r3, r0, #12
 8009174:	428b      	cmp	r3, r1
 8009176:	d319      	bcc.n	80091ac <__udivsi3+0x6c>
 8009178:	e000      	b.n	800917c <__udivsi3+0x3c>
 800917a:	0a09      	lsrs	r1, r1, #8
 800917c:	0bc3      	lsrs	r3, r0, #15
 800917e:	428b      	cmp	r3, r1
 8009180:	d301      	bcc.n	8009186 <__udivsi3+0x46>
 8009182:	03cb      	lsls	r3, r1, #15
 8009184:	1ac0      	subs	r0, r0, r3
 8009186:	4152      	adcs	r2, r2
 8009188:	0b83      	lsrs	r3, r0, #14
 800918a:	428b      	cmp	r3, r1
 800918c:	d301      	bcc.n	8009192 <__udivsi3+0x52>
 800918e:	038b      	lsls	r3, r1, #14
 8009190:	1ac0      	subs	r0, r0, r3
 8009192:	4152      	adcs	r2, r2
 8009194:	0b43      	lsrs	r3, r0, #13
 8009196:	428b      	cmp	r3, r1
 8009198:	d301      	bcc.n	800919e <__udivsi3+0x5e>
 800919a:	034b      	lsls	r3, r1, #13
 800919c:	1ac0      	subs	r0, r0, r3
 800919e:	4152      	adcs	r2, r2
 80091a0:	0b03      	lsrs	r3, r0, #12
 80091a2:	428b      	cmp	r3, r1
 80091a4:	d301      	bcc.n	80091aa <__udivsi3+0x6a>
 80091a6:	030b      	lsls	r3, r1, #12
 80091a8:	1ac0      	subs	r0, r0, r3
 80091aa:	4152      	adcs	r2, r2
 80091ac:	0ac3      	lsrs	r3, r0, #11
 80091ae:	428b      	cmp	r3, r1
 80091b0:	d301      	bcc.n	80091b6 <__udivsi3+0x76>
 80091b2:	02cb      	lsls	r3, r1, #11
 80091b4:	1ac0      	subs	r0, r0, r3
 80091b6:	4152      	adcs	r2, r2
 80091b8:	0a83      	lsrs	r3, r0, #10
 80091ba:	428b      	cmp	r3, r1
 80091bc:	d301      	bcc.n	80091c2 <__udivsi3+0x82>
 80091be:	028b      	lsls	r3, r1, #10
 80091c0:	1ac0      	subs	r0, r0, r3
 80091c2:	4152      	adcs	r2, r2
 80091c4:	0a43      	lsrs	r3, r0, #9
 80091c6:	428b      	cmp	r3, r1
 80091c8:	d301      	bcc.n	80091ce <__udivsi3+0x8e>
 80091ca:	024b      	lsls	r3, r1, #9
 80091cc:	1ac0      	subs	r0, r0, r3
 80091ce:	4152      	adcs	r2, r2
 80091d0:	0a03      	lsrs	r3, r0, #8
 80091d2:	428b      	cmp	r3, r1
 80091d4:	d301      	bcc.n	80091da <__udivsi3+0x9a>
 80091d6:	020b      	lsls	r3, r1, #8
 80091d8:	1ac0      	subs	r0, r0, r3
 80091da:	4152      	adcs	r2, r2
 80091dc:	d2cd      	bcs.n	800917a <__udivsi3+0x3a>
 80091de:	09c3      	lsrs	r3, r0, #7
 80091e0:	428b      	cmp	r3, r1
 80091e2:	d301      	bcc.n	80091e8 <__udivsi3+0xa8>
 80091e4:	01cb      	lsls	r3, r1, #7
 80091e6:	1ac0      	subs	r0, r0, r3
 80091e8:	4152      	adcs	r2, r2
 80091ea:	0983      	lsrs	r3, r0, #6
 80091ec:	428b      	cmp	r3, r1
 80091ee:	d301      	bcc.n	80091f4 <__udivsi3+0xb4>
 80091f0:	018b      	lsls	r3, r1, #6
 80091f2:	1ac0      	subs	r0, r0, r3
 80091f4:	4152      	adcs	r2, r2
 80091f6:	0943      	lsrs	r3, r0, #5
 80091f8:	428b      	cmp	r3, r1
 80091fa:	d301      	bcc.n	8009200 <__udivsi3+0xc0>
 80091fc:	014b      	lsls	r3, r1, #5
 80091fe:	1ac0      	subs	r0, r0, r3
 8009200:	4152      	adcs	r2, r2
 8009202:	0903      	lsrs	r3, r0, #4
 8009204:	428b      	cmp	r3, r1
 8009206:	d301      	bcc.n	800920c <__udivsi3+0xcc>
 8009208:	010b      	lsls	r3, r1, #4
 800920a:	1ac0      	subs	r0, r0, r3
 800920c:	4152      	adcs	r2, r2
 800920e:	08c3      	lsrs	r3, r0, #3
 8009210:	428b      	cmp	r3, r1
 8009212:	d301      	bcc.n	8009218 <__udivsi3+0xd8>
 8009214:	00cb      	lsls	r3, r1, #3
 8009216:	1ac0      	subs	r0, r0, r3
 8009218:	4152      	adcs	r2, r2
 800921a:	0883      	lsrs	r3, r0, #2
 800921c:	428b      	cmp	r3, r1
 800921e:	d301      	bcc.n	8009224 <__udivsi3+0xe4>
 8009220:	008b      	lsls	r3, r1, #2
 8009222:	1ac0      	subs	r0, r0, r3
 8009224:	4152      	adcs	r2, r2
 8009226:	0843      	lsrs	r3, r0, #1
 8009228:	428b      	cmp	r3, r1
 800922a:	d301      	bcc.n	8009230 <__udivsi3+0xf0>
 800922c:	004b      	lsls	r3, r1, #1
 800922e:	1ac0      	subs	r0, r0, r3
 8009230:	4152      	adcs	r2, r2
 8009232:	1a41      	subs	r1, r0, r1
 8009234:	d200      	bcs.n	8009238 <__udivsi3+0xf8>
 8009236:	4601      	mov	r1, r0
 8009238:	4152      	adcs	r2, r2
 800923a:	4610      	mov	r0, r2
 800923c:	4770      	bx	lr
 800923e:	e7ff      	b.n	8009240 <__udivsi3+0x100>
 8009240:	b501      	push	{r0, lr}
 8009242:	2000      	movs	r0, #0
 8009244:	f000 f806 	bl	8009254 <__aeabi_idiv0>
 8009248:	bd02      	pop	{r1, pc}
 800924a:	46c0      	nop			; (mov r8, r8)

0800924c <__aeabi_uidivmod>:
 800924c:	2900      	cmp	r1, #0
 800924e:	d0f7      	beq.n	8009240 <__udivsi3+0x100>
 8009250:	e776      	b.n	8009140 <__udivsi3>
 8009252:	4770      	bx	lr

08009254 <__aeabi_idiv0>:
 8009254:	4770      	bx	lr
 8009256:	46c0      	nop			; (mov r8, r8)

08009258 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800925c:	f3bf 8f4f 	dsb	sy
}
 8009260:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009262:	4b04      	ldr	r3, [pc, #16]	; (8009274 <__NVIC_SystemReset+0x1c>)
 8009264:	4a04      	ldr	r2, [pc, #16]	; (8009278 <__NVIC_SystemReset+0x20>)
 8009266:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009268:	f3bf 8f4f 	dsb	sy
}
 800926c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	e7fd      	b.n	800926e <__NVIC_SystemReset+0x16>
 8009272:	46c0      	nop			; (mov r8, r8)
 8009274:	e000ed00 	.word	0xe000ed00
 8009278:	05fa0004 	.word	0x05fa0004

0800927c <GSM_Init>:
	//sendData("\r\n",UART0);
	//return pec;
}


void GSM_Init(){
 800927c:	b5b0      	push	{r4, r5, r7, lr}
 800927e:	af00      	add	r7, sp, #0
	//gsmState = AutoBaud;
	Debug_Send("GSM Init\r\n");
 8009280:	4b6f      	ldr	r3, [pc, #444]	; (8009440 <GSM_Init+0x1c4>)
 8009282:	0018      	movs	r0, r3
 8009284:	f001 f98c 	bl	800a5a0 <Debug_Send>
	//gsmInfo.GPRSinterval = 180;
	gsmInfo.GPRSinterval = 30;
 8009288:	4a6e      	ldr	r2, [pc, #440]	; (8009444 <GSM_Init+0x1c8>)
 800928a:	23a0      	movs	r3, #160	; 0xa0
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	211e      	movs	r1, #30
 8009290:	50d1      	str	r1, [r2, r3]
	strcpy(gsmInfo.urlport,"5008");
 8009292:	4a6d      	ldr	r2, [pc, #436]	; (8009448 <GSM_Init+0x1cc>)
 8009294:	4b6d      	ldr	r3, [pc, #436]	; (800944c <GSM_Init+0x1d0>)
 8009296:	0010      	movs	r0, r2
 8009298:	0019      	movs	r1, r3
 800929a:	2305      	movs	r3, #5
 800929c:	001a      	movs	r2, r3
 800929e:	f00f f845 	bl	801832c <memcpy>
	strcpy(gsmInfo.urlport,"5007");
 80092a2:	4a69      	ldr	r2, [pc, #420]	; (8009448 <GSM_Init+0x1cc>)
 80092a4:	4b6a      	ldr	r3, [pc, #424]	; (8009450 <GSM_Init+0x1d4>)
 80092a6:	0010      	movs	r0, r2
 80092a8:	0019      	movs	r1, r3
 80092aa:	2305      	movs	r3, #5
 80092ac:	001a      	movs	r2, r3
 80092ae:	f00f f83d 	bl	801832c <memcpy>
	strcpy(gsmInfo.urlport,"1883");
 80092b2:	4a65      	ldr	r2, [pc, #404]	; (8009448 <GSM_Init+0x1cc>)
 80092b4:	4b67      	ldr	r3, [pc, #412]	; (8009454 <GSM_Init+0x1d8>)
 80092b6:	0010      	movs	r0, r2
 80092b8:	0019      	movs	r1, r3
 80092ba:	2305      	movs	r3, #5
 80092bc:	001a      	movs	r2, r3
 80092be:	f00f f835 	bl	801832c <memcpy>
	//strcpy(gsmInfo.urlport,"5010");
	//strcpy(gsmInfo.urlport,"80");
	strcpy(gsmInfo.url,"escorsocket.ddns.net");
 80092c2:	4b60      	ldr	r3, [pc, #384]	; (8009444 <GSM_Init+0x1c8>)
 80092c4:	4a64      	ldr	r2, [pc, #400]	; (8009458 <GSM_Init+0x1dc>)
 80092c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80092c8:	c313      	stmia	r3!, {r0, r1, r4}
 80092ca:	ca03      	ldmia	r2!, {r0, r1}
 80092cc:	c303      	stmia	r3!, {r0, r1}
 80092ce:	7812      	ldrb	r2, [r2, #0]
 80092d0:	701a      	strb	r2, [r3, #0]
	strcpy(gsmInfo.url,"196.40.108.169");
 80092d2:	4b5c      	ldr	r3, [pc, #368]	; (8009444 <GSM_Init+0x1c8>)
 80092d4:	4a61      	ldr	r2, [pc, #388]	; (800945c <GSM_Init+0x1e0>)
 80092d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80092d8:	c313      	stmia	r3!, {r0, r1, r4}
 80092da:	8811      	ldrh	r1, [r2, #0]
 80092dc:	8019      	strh	r1, [r3, #0]
 80092de:	7892      	ldrb	r2, [r2, #2]
 80092e0:	709a      	strb	r2, [r3, #2]
	//sprintf(temp, "URL:%s, port:%s\r\n",gsmInfo.url,gsmInfo.urlport);
	//Debug_Send(temp);
	//strcpy(gsmInfo.url,"197.94.242.65");
	//strcpy(gsmInfo.url,"102.129.99.123");
	restartTimer = 0;
 80092e2:	4b5f      	ldr	r3, [pc, #380]	; (8009460 <GSM_Init+0x1e4>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
	onTimer = 0;
 80092e8:	4b5e      	ldr	r3, [pc, #376]	; (8009464 <GSM_Init+0x1e8>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, temp1, 20);
 80092ee:	495e      	ldr	r1, [pc, #376]	; (8009468 <GSM_Init+0x1ec>)
 80092f0:	4b5e      	ldr	r3, [pc, #376]	; (800946c <GSM_Init+0x1f0>)
 80092f2:	2214      	movs	r2, #20
 80092f4:	0018      	movs	r0, r3
 80092f6:	f008 fac1 	bl	801187c <HAL_UART_Receive_IT>
	//SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
	SET_BIT(huart2.Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80092fa:	4b5c      	ldr	r3, [pc, #368]	; (800946c <GSM_Init+0x1f0>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	4b5a      	ldr	r3, [pc, #360]	; (800946c <GSM_Init+0x1f0>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2190      	movs	r1, #144	; 0x90
 8009306:	0049      	lsls	r1, r1, #1
 8009308:	430a      	orrs	r2, r1
 800930a:	601a      	str	r2, [r3, #0]
	//HAL_UART_Receive_IT(&huart1, temp, 50);

	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800930c:	4b58      	ldr	r3, [pc, #352]	; (8009470 <GSM_Init+0x1f4>)
 800930e:	2201      	movs	r2, #1
 8009310:	2108      	movs	r1, #8
 8009312:	0018      	movs	r0, r3
 8009314:	f004 fd8a 	bl	800de2c <HAL_GPIO_WritePin>
	smsFlags.gprsActive = 0;
 8009318:	4b56      	ldr	r3, [pc, #344]	; (8009474 <GSM_Init+0x1f8>)
 800931a:	2200      	movs	r2, #0
 800931c:	61da      	str	r2, [r3, #28]
	gsmInfo.socket = 0;
 800931e:	4b49      	ldr	r3, [pc, #292]	; (8009444 <GSM_Init+0x1c8>)
 8009320:	2200      	movs	r2, #0
 8009322:	679a      	str	r2, [r3, #120]	; 0x78
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8009324:	4b52      	ldr	r3, [pc, #328]	; (8009470 <GSM_Init+0x1f4>)
 8009326:	2201      	movs	r2, #1
 8009328:	2108      	movs	r1, #8
 800932a:	0018      	movs	r0, r3
 800932c:	f004 fd7e 	bl	800de2c <HAL_GPIO_WritePin>
	gsmInfo.FTP_Open = 0;
 8009330:	4a44      	ldr	r2, [pc, #272]	; (8009444 <GSM_Init+0x1c8>)
 8009332:	23b2      	movs	r3, #178	; 0xb2
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	2100      	movs	r1, #0
 8009338:	50d1      	str	r1, [r2, r3]
	gsmInfo.FS_SeekFlag = 0;
 800933a:	4a42      	ldr	r2, [pc, #264]	; (8009444 <GSM_Init+0x1c8>)
 800933c:	23b4      	movs	r3, #180	; 0xb4
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	2100      	movs	r1, #0
 8009342:	50d1      	str	r1, [r2, r3]
	gsmInfo.FS_Connect = 0;
 8009344:	4a3f      	ldr	r2, [pc, #252]	; (8009444 <GSM_Init+0x1c8>)
 8009346:	23b6      	movs	r3, #182	; 0xb6
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	2100      	movs	r1, #0
 800934c:	50d1      	str	r1, [r2, r3]
	gsmInfo.FTP_Data = 0;
 800934e:	4a3d      	ldr	r2, [pc, #244]	; (8009444 <GSM_Init+0x1c8>)
 8009350:	23b8      	movs	r3, #184	; 0xb8
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	2100      	movs	r1, #0
 8009356:	50d1      	str	r1, [r2, r3]
	gsmInfo.FTP_Save_Addr = eepromOrigin + 1000;
 8009358:	4a3a      	ldr	r2, [pc, #232]	; (8009444 <GSM_Init+0x1c8>)
 800935a:	23ba      	movs	r3, #186	; 0xba
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	4946      	ldr	r1, [pc, #280]	; (8009478 <GSM_Init+0x1fc>)
 8009360:	50d1      	str	r1, [r2, r3]
	gsmInfo.FTP_Size = 0;
 8009362:	4a38      	ldr	r2, [pc, #224]	; (8009444 <GSM_Init+0x1c8>)
 8009364:	23bc      	movs	r3, #188	; 0xbc
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	2100      	movs	r1, #0
 800936a:	50d1      	str	r1, [r2, r3]
	gsmInfo.MQTT = 1;
 800936c:	4a35      	ldr	r2, [pc, #212]	; (8009444 <GSM_Init+0x1c8>)
 800936e:	23be      	movs	r3, #190	; 0xbe
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	2101      	movs	r1, #1
 8009374:	50d1      	str	r1, [r2, r3]
	gsmTimer = 0;
 8009376:	4b41      	ldr	r3, [pc, #260]	; (800947c <GSM_Init+0x200>)
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
	ftpseek = 0;
 800937c:	4b40      	ldr	r3, [pc, #256]	; (8009480 <GSM_Init+0x204>)
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
	myLongStr(ftpseek,temp1,10,10);
 8009382:	4b3f      	ldr	r3, [pc, #252]	; (8009480 <GSM_Init+0x204>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	0018      	movs	r0, r3
 8009388:	4937      	ldr	r1, [pc, #220]	; (8009468 <GSM_Init+0x1ec>)
 800938a:	230a      	movs	r3, #10
 800938c:	220a      	movs	r2, #10
 800938e:	f003 fed5 	bl	800d13c <myLongStr>
	strcpy(temp,"FTP seek init");
 8009392:	4a3c      	ldr	r2, [pc, #240]	; (8009484 <GSM_Init+0x208>)
 8009394:	4b3c      	ldr	r3, [pc, #240]	; (8009488 <GSM_Init+0x20c>)
 8009396:	0010      	movs	r0, r2
 8009398:	0019      	movs	r1, r3
 800939a:	230e      	movs	r3, #14
 800939c:	001a      	movs	r2, r3
 800939e:	f00e ffc5 	bl	801832c <memcpy>
	strcat(temp,temp1);
 80093a2:	4a31      	ldr	r2, [pc, #196]	; (8009468 <GSM_Init+0x1ec>)
 80093a4:	4b37      	ldr	r3, [pc, #220]	; (8009484 <GSM_Init+0x208>)
 80093a6:	0011      	movs	r1, r2
 80093a8:	0018      	movs	r0, r3
 80093aa:	f00e fff1 	bl	8018390 <strcat>
	strcat(temp,"\r\n");
 80093ae:	4b35      	ldr	r3, [pc, #212]	; (8009484 <GSM_Init+0x208>)
 80093b0:	0018      	movs	r0, r3
 80093b2:	f7ff feb3 	bl	800911c <strlen>
 80093b6:	0003      	movs	r3, r0
 80093b8:	001a      	movs	r2, r3
 80093ba:	4b32      	ldr	r3, [pc, #200]	; (8009484 <GSM_Init+0x208>)
 80093bc:	18d2      	adds	r2, r2, r3
 80093be:	4b33      	ldr	r3, [pc, #204]	; (800948c <GSM_Init+0x210>)
 80093c0:	0010      	movs	r0, r2
 80093c2:	0019      	movs	r1, r3
 80093c4:	2303      	movs	r3, #3
 80093c6:	001a      	movs	r2, r3
 80093c8:	f00e ffb0 	bl	801832c <memcpy>
	Debug_Send(temp);
 80093cc:	4b2d      	ldr	r3, [pc, #180]	; (8009484 <GSM_Init+0x208>)
 80093ce:	0018      	movs	r0, r3
 80093d0:	f001 f8e6 	bl	800a5a0 <Debug_Send>
	strcpy(temp,"M95 address");
 80093d4:	4a2b      	ldr	r2, [pc, #172]	; (8009484 <GSM_Init+0x208>)
 80093d6:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <GSM_Init+0x214>)
 80093d8:	0010      	movs	r0, r2
 80093da:	0019      	movs	r1, r3
 80093dc:	230c      	movs	r3, #12
 80093de:	001a      	movs	r2, r3
 80093e0:	f00e ffa4 	bl	801832c <memcpy>
	myLongStr(gsmInfo.FTP_Save_Addr,temp1,10,10);
 80093e4:	4a17      	ldr	r2, [pc, #92]	; (8009444 <GSM_Init+0x1c8>)
 80093e6:	23ba      	movs	r3, #186	; 0xba
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	58d0      	ldr	r0, [r2, r3]
 80093ec:	491e      	ldr	r1, [pc, #120]	; (8009468 <GSM_Init+0x1ec>)
 80093ee:	230a      	movs	r3, #10
 80093f0:	220a      	movs	r2, #10
 80093f2:	f003 fea3 	bl	800d13c <myLongStr>
	strcat(temp,temp1);
 80093f6:	4a1c      	ldr	r2, [pc, #112]	; (8009468 <GSM_Init+0x1ec>)
 80093f8:	4b22      	ldr	r3, [pc, #136]	; (8009484 <GSM_Init+0x208>)
 80093fa:	0011      	movs	r1, r2
 80093fc:	0018      	movs	r0, r3
 80093fe:	f00e ffc7 	bl	8018390 <strcat>
	strcat(temp,"\r\n");
 8009402:	4b20      	ldr	r3, [pc, #128]	; (8009484 <GSM_Init+0x208>)
 8009404:	0018      	movs	r0, r3
 8009406:	f7ff fe89 	bl	800911c <strlen>
 800940a:	0003      	movs	r3, r0
 800940c:	001a      	movs	r2, r3
 800940e:	4b1d      	ldr	r3, [pc, #116]	; (8009484 <GSM_Init+0x208>)
 8009410:	18d2      	adds	r2, r2, r3
 8009412:	4b1e      	ldr	r3, [pc, #120]	; (800948c <GSM_Init+0x210>)
 8009414:	0010      	movs	r0, r2
 8009416:	0019      	movs	r1, r3
 8009418:	2303      	movs	r3, #3
 800941a:	001a      	movs	r2, r3
 800941c:	f00e ff86 	bl	801832c <memcpy>
	Debug_Send(temp);
 8009420:	4b18      	ldr	r3, [pc, #96]	; (8009484 <GSM_Init+0x208>)
 8009422:	0018      	movs	r0, r3
 8009424:	f001 f8bc 	bl	800a5a0 <Debug_Send>
	gsmInfo.MQTT_Subscribe = 0;
 8009428:	4a06      	ldr	r2, [pc, #24]	; (8009444 <GSM_Init+0x1c8>)
 800942a:	23c4      	movs	r3, #196	; 0xc4
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	2100      	movs	r1, #0
 8009430:	50d1      	str	r1, [r2, r3]
	mqttState = Connect;
 8009432:	4b18      	ldr	r3, [pc, #96]	; (8009494 <GSM_Init+0x218>)
 8009434:	2201      	movs	r2, #1
 8009436:	701a      	strb	r2, [r3, #0]
}
 8009438:	46c0      	nop			; (mov r8, r8)
 800943a:	46bd      	mov	sp, r7
 800943c:	bdb0      	pop	{r4, r5, r7, pc}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	08018d48 	.word	0x08018d48
 8009444:	200019a8 	.word	0x200019a8
 8009448:	200019c6 	.word	0x200019c6
 800944c:	08018d54 	.word	0x08018d54
 8009450:	08018d5c 	.word	0x08018d5c
 8009454:	08018d64 	.word	0x08018d64
 8009458:	08018d6c 	.word	0x08018d6c
 800945c:	08018d84 	.word	0x08018d84
 8009460:	200002ec 	.word	0x200002ec
 8009464:	200002d4 	.word	0x200002d4
 8009468:	20002224 	.word	0x20002224
 800946c:	200025e4 	.word	0x200025e4
 8009470:	48000400 	.word	0x48000400
 8009474:	200014c4 	.word	0x200014c4
 8009478:	0000ee48 	.word	0x0000ee48
 800947c:	20001878 	.word	0x20001878
 8009480:	200000c4 	.word	0x200000c4
 8009484:	200021a0 	.word	0x200021a0
 8009488:	08018d94 	.word	0x08018d94
 800948c:	08018da4 	.word	0x08018da4
 8009490:	08018da8 	.word	0x08018da8
 8009494:	200000d0 	.word	0x200000d0

08009498 <GSM_Service>:

void GSM_Service(){
 8009498:	b590      	push	{r4, r7, lr}
 800949a:	b0c7      	sub	sp, #284	; 0x11c
 800949c:	af00      	add	r7, sp, #0
	//Debug_Send("GSM\r\n");
	char temp[60];
	int tempI;

	//voltage = getVolt();
	myLongStr(voltage,temp1,10,10);
 800949e:	4bf0      	ldr	r3, [pc, #960]	; (8009860 <GSM_Service+0x3c8>)
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	49f0      	ldr	r1, [pc, #960]	; (8009864 <GSM_Service+0x3cc>)
 80094a4:	230a      	movs	r3, #10
 80094a6:	220a      	movs	r2, #10
 80094a8:	f003 fe48 	bl	800d13c <myLongStr>
	strcat(temp,",");
 80094ac:	24dc      	movs	r4, #220	; 0xdc
 80094ae:	193b      	adds	r3, r7, r4
 80094b0:	0018      	movs	r0, r3
 80094b2:	f7ff fe33 	bl	800911c <strlen>
 80094b6:	0003      	movs	r3, r0
 80094b8:	001a      	movs	r2, r3
 80094ba:	193b      	adds	r3, r7, r4
 80094bc:	189a      	adds	r2, r3, r2
 80094be:	4bea      	ldr	r3, [pc, #936]	; (8009868 <GSM_Service+0x3d0>)
 80094c0:	0010      	movs	r0, r2
 80094c2:	0019      	movs	r1, r3
 80094c4:	2302      	movs	r3, #2
 80094c6:	001a      	movs	r2, r3
 80094c8:	f00e ff30 	bl	801832c <memcpy>
	strcat(temp,temp1);
 80094cc:	4ae5      	ldr	r2, [pc, #916]	; (8009864 <GSM_Service+0x3cc>)
 80094ce:	193b      	adds	r3, r7, r4
 80094d0:	0011      	movs	r1, r2
 80094d2:	0018      	movs	r0, r3
 80094d4:	f00e ff5c 	bl	8018390 <strcat>
	//LineSelect(0x80);
	//LCD_Print(temp);

	//tempI = getVolt();
	//tempI = getCurrent();
	switch(gsmState){
 80094d8:	4be4      	ldr	r3, [pc, #912]	; (800986c <GSM_Service+0x3d4>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b37      	cmp	r3, #55	; 0x37
 80094de:	d901      	bls.n	80094e4 <GSM_Service+0x4c>
 80094e0:	f000 fecd 	bl	800a27e <GSM_Service+0xde6>
 80094e4:	009a      	lsls	r2, r3, #2
 80094e6:	4be2      	ldr	r3, [pc, #904]	; (8009870 <GSM_Service+0x3d8>)
 80094e8:	18d3      	adds	r3, r2, r3
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	469f      	mov	pc, r3
	case GSM_Off:
		//Debug_Send("GSM off1\r\n");
		//gsmState = FTP_Close;			//check jumping to bootloader
		if (onTimer < 3){
 80094ee:	4be1      	ldr	r3, [pc, #900]	; (8009874 <GSM_Service+0x3dc>)
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d80e      	bhi.n	8009514 <GSM_Service+0x7c>
			HAL_GPIO_WritePin(GSM_Enable_GPIO_Port, GSM_Enable_Pin, GPIO_PIN_RESET);
 80094f6:	2380      	movs	r3, #128	; 0x80
 80094f8:	021b      	lsls	r3, r3, #8
 80094fa:	48df      	ldr	r0, [pc, #892]	; (8009878 <GSM_Service+0x3e0>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	0019      	movs	r1, r3
 8009500:	f004 fc94 	bl	800de2c <HAL_GPIO_WritePin>
			onTimer++;
 8009504:	4bdb      	ldr	r3, [pc, #876]	; (8009874 <GSM_Service+0x3dc>)
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	3301      	adds	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	4bd9      	ldr	r3, [pc, #868]	; (8009874 <GSM_Service+0x3dc>)
 800950e:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_RESET);
			gsmState = GSM_On;
			//gsmState = AutoBaud;
		}

		break;
 8009510:	f000 fefd 	bl	800a30e <GSM_Service+0xe76>
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_RESET);
 8009514:	4bd9      	ldr	r3, [pc, #868]	; (800987c <GSM_Service+0x3e4>)
 8009516:	2200      	movs	r2, #0
 8009518:	2104      	movs	r1, #4
 800951a:	0018      	movs	r0, r3
 800951c:	f004 fc86 	bl	800de2c <HAL_GPIO_WritePin>
			gsmState = GSM_On;
 8009520:	4bd2      	ldr	r3, [pc, #840]	; (800986c <GSM_Service+0x3d4>)
 8009522:	2202      	movs	r2, #2
 8009524:	701a      	strb	r2, [r3, #0]
		break;
 8009526:	f000 fef2 	bl	800a30e <GSM_Service+0xe76>
	case GSM_On:
		Debug_Send("GSM on\r\n");
 800952a:	4bd5      	ldr	r3, [pc, #852]	; (8009880 <GSM_Service+0x3e8>)
 800952c:	0018      	movs	r0, r3
 800952e:	f001 f837 	bl	800a5a0 <Debug_Send>
		HAL_GPIO_WritePin(GSM_Enable_GPIO_Port, GSM_Enable_Pin, GPIO_PIN_SET);
 8009532:	2380      	movs	r3, #128	; 0x80
 8009534:	021b      	lsls	r3, r3, #8
 8009536:	48d0      	ldr	r0, [pc, #832]	; (8009878 <GSM_Service+0x3e0>)
 8009538:	2201      	movs	r2, #1
 800953a:	0019      	movs	r1, r3
 800953c:	f004 fc76 	bl	800de2c <HAL_GPIO_WritePin>
		//HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
		onTimer = 0;
 8009540:	4bcc      	ldr	r3, [pc, #816]	; (8009874 <GSM_Service+0x3dc>)
 8009542:	2200      	movs	r2, #0
 8009544:	801a      	strh	r2, [r3, #0]
		gsmState = GSM_Enable;
 8009546:	4bc9      	ldr	r3, [pc, #804]	; (800986c <GSM_Service+0x3d4>)
 8009548:	2203      	movs	r2, #3
 800954a:	701a      	strb	r2, [r3, #0]
		break;
 800954c:	f000 fedf 	bl	800a30e <GSM_Service+0xe76>
	case GSM_Enable:
		Debug_Send("GSM enable\r\n");
 8009550:	4bcc      	ldr	r3, [pc, #816]	; (8009884 <GSM_Service+0x3ec>)
 8009552:	0018      	movs	r0, r3
 8009554:	f001 f824 	bl	800a5a0 <Debug_Send>
		if (onTimer < 4){
 8009558:	4bc6      	ldr	r3, [pc, #792]	; (8009874 <GSM_Service+0x3dc>)
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	2b03      	cmp	r3, #3
 800955e:	d811      	bhi.n	8009584 <GSM_Service+0xec>
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_SET);
 8009560:	4bc6      	ldr	r3, [pc, #792]	; (800987c <GSM_Service+0x3e4>)
 8009562:	2201      	movs	r2, #1
 8009564:	2104      	movs	r1, #4
 8009566:	0018      	movs	r0, r3
 8009568:	f004 fc60 	bl	800de2c <HAL_GPIO_WritePin>
			onTimer++;
 800956c:	4bc1      	ldr	r3, [pc, #772]	; (8009874 <GSM_Service+0x3dc>)
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	3301      	adds	r3, #1
 8009572:	b29a      	uxth	r2, r3
 8009574:	4bbf      	ldr	r3, [pc, #764]	; (8009874 <GSM_Service+0x3dc>)
 8009576:	801a      	strh	r2, [r3, #0]
			Debug_Send("GSM on set\r\n");
 8009578:	4bc3      	ldr	r3, [pc, #780]	; (8009888 <GSM_Service+0x3f0>)
 800957a:	0018      	movs	r0, r3
 800957c:	f001 f810 	bl	800a5a0 <Debug_Send>
			gsmState = Search;
			//onTimer = 0;
			Debug_Send("GSM reset\r\n");
			//gsmState = AutoBaud;
		}
		break;
 8009580:	f000 fec5 	bl	800a30e <GSM_Service+0xe76>
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_RESET);
 8009584:	4bbd      	ldr	r3, [pc, #756]	; (800987c <GSM_Service+0x3e4>)
 8009586:	2200      	movs	r2, #0
 8009588:	2104      	movs	r1, #4
 800958a:	0018      	movs	r0, r3
 800958c:	f004 fc4e 	bl	800de2c <HAL_GPIO_WritePin>
			gsmState = Search;
 8009590:	4bb6      	ldr	r3, [pc, #728]	; (800986c <GSM_Service+0x3d4>)
 8009592:	2204      	movs	r2, #4
 8009594:	701a      	strb	r2, [r3, #0]
			Debug_Send("GSM reset\r\n");
 8009596:	4bbd      	ldr	r3, [pc, #756]	; (800988c <GSM_Service+0x3f4>)
 8009598:	0018      	movs	r0, r3
 800959a:	f001 f801 	bl	800a5a0 <Debug_Send>
		break;
 800959e:	f000 feb6 	bl	800a30e <GSM_Service+0xe76>
	case Search:
		//smsFlags.send = 1;	//test sms function
		//Debug_Send("Search\r\n");
		//GSM_Send("AT+CREG?\r\n");
		GSM_Send("AT+CREG=1\r");
 80095a2:	4bbb      	ldr	r3, [pc, #748]	; (8009890 <GSM_Service+0x3f8>)
 80095a4:	0018      	movs	r0, r3
 80095a6:	f000 ffa9 	bl	800a4fc <GSM_Send>
		gsmState = GPRS_Search;
 80095aa:	4bb0      	ldr	r3, [pc, #704]	; (800986c <GSM_Service+0x3d4>)
 80095ac:	2205      	movs	r2, #5
 80095ae:	701a      	strb	r2, [r3, #0]
		break;
 80095b0:	f000 fead 	bl	800a30e <GSM_Service+0xe76>
	case GPRS_Search:
		GSM_Send("AT+CGREG=1\r");
 80095b4:	4bb7      	ldr	r3, [pc, #732]	; (8009894 <GSM_Service+0x3fc>)
 80095b6:	0018      	movs	r0, r3
 80095b8:	f000 ffa0 	bl	800a4fc <GSM_Send>
		gsmState = 0;
 80095bc:	4bab      	ldr	r3, [pc, #684]	; (800986c <GSM_Service+0x3d4>)
 80095be:	2200      	movs	r2, #0
 80095c0:	701a      	strb	r2, [r3, #0]
		break;
 80095c2:	f000 fea4 	bl	800a30e <GSM_Service+0xe76>
	case SMSconfig:
		Debug_Send("testing\r\n");
 80095c6:	4bb4      	ldr	r3, [pc, #720]	; (8009898 <GSM_Service+0x400>)
 80095c8:	0018      	movs	r0, r3
 80095ca:	f000 ffe9 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT+CMGF=1\r\n");
 80095ce:	4bb3      	ldr	r3, [pc, #716]	; (800989c <GSM_Service+0x404>)
 80095d0:	0018      	movs	r0, r3
 80095d2:	f000 ff93 	bl	800a4fc <GSM_Send>
		smsFlags.config = 1;
 80095d6:	4bb2      	ldr	r3, [pc, #712]	; (80098a0 <GSM_Service+0x408>)
 80095d8:	2201      	movs	r2, #1
 80095da:	605a      	str	r2, [r3, #4]
		smsFlags.signal = 1;
 80095dc:	4bb0      	ldr	r3, [pc, #704]	; (80098a0 <GSM_Service+0x408>)
 80095de:	2201      	movs	r2, #1
 80095e0:	601a      	str	r2, [r3, #0]
		//sendData(gsmInfo.vth,UART0);
		//gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
		//gsmInfo.vth_l *= 100;

		//gsmState = Imei;
		gsmState = Operator;
 80095e2:	4ba2      	ldr	r3, [pc, #648]	; (800986c <GSM_Service+0x3d4>)
 80095e4:	2207      	movs	r2, #7
 80095e6:	701a      	strb	r2, [r3, #0]
		break;
 80095e8:	f000 fe91 	bl	800a30e <GSM_Service+0xe76>
	case Operator:
		GSM_Send("AT+COPS?\r");
 80095ec:	4bad      	ldr	r3, [pc, #692]	; (80098a4 <GSM_Service+0x40c>)
 80095ee:	0018      	movs	r0, r3
 80095f0:	f000 ff84 	bl	800a4fc <GSM_Send>
		gsmState = Imei;
 80095f4:	4b9d      	ldr	r3, [pc, #628]	; (800986c <GSM_Service+0x3d4>)
 80095f6:	2208      	movs	r2, #8
 80095f8:	701a      	strb	r2, [r3, #0]
		//gsmState = GPRS_Send;
		//gsmState = SMS_Send;
		break;
 80095fa:	f000 fe88 	bl	800a30e <GSM_Service+0xe76>
	case Imei:
		GSM_Send("AT+CGSN\r\n");
 80095fe:	4baa      	ldr	r3, [pc, #680]	; (80098a8 <GSM_Service+0x410>)
 8009600:	0018      	movs	r0, r3
 8009602:	f000 ff7b 	bl	800a4fc <GSM_Send>
		//GSM_Send("AT+CGSN?\r\n");
		gsmInfo.imeiFlag = 5;
 8009606:	4aa9      	ldr	r2, [pc, #676]	; (80098ac <GSM_Service+0x414>)
 8009608:	23a8      	movs	r3, #168	; 0xa8
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	2105      	movs	r1, #5
 800960e:	50d1      	str	r1, [r2, r3]
		gsmState = Ccid;
 8009610:	4b96      	ldr	r3, [pc, #600]	; (800986c <GSM_Service+0x3d4>)
 8009612:	2209      	movs	r2, #9
 8009614:	701a      	strb	r2, [r3, #0]

		//gsmState = GPRS_Send;
		gsmState = GprsContext;
 8009616:	4b95      	ldr	r3, [pc, #596]	; (800986c <GSM_Service+0x3d4>)
 8009618:	220a      	movs	r2, #10
 800961a:	701a      	strb	r2, [r3, #0]
		//gsmState = 0;
		break;
 800961c:	f000 fe77 	bl	800a30e <GSM_Service+0xe76>
	case Ccid:
		GSM_Send("AT+CCID\r\n");
 8009620:	4ba3      	ldr	r3, [pc, #652]	; (80098b0 <GSM_Service+0x418>)
 8009622:	0018      	movs	r0, r3
 8009624:	f000 ff6a 	bl	800a4fc <GSM_Send>
		gsmState = GprsContext;
 8009628:	4b90      	ldr	r3, [pc, #576]	; (800986c <GSM_Service+0x3d4>)
 800962a:	220a      	movs	r2, #10
 800962c:	701a      	strb	r2, [r3, #0]
		gsmState = GPRS_Attach;
 800962e:	4b8f      	ldr	r3, [pc, #572]	; (800986c <GSM_Service+0x3d4>)
 8009630:	2211      	movs	r2, #17
 8009632:	701a      	strb	r2, [r3, #0]
		break;
 8009634:	f000 fe6b 	bl	800a30e <GSM_Service+0xe76>
	case GprsContext:
		//GSM_Send("AT+CGDCONT=1,\"IP\",\"INTERNET\"\r\n");
		GSM_Send("AT+CGDCONT=1,\"ip\",\"internet\"\r\n");
 8009638:	4b9e      	ldr	r3, [pc, #632]	; (80098b4 <GSM_Service+0x41c>)
 800963a:	0018      	movs	r0, r3
 800963c:	f000 ff5e 	bl	800a4fc <GSM_Send>
		//strcpy(gsmInfo.url,"www.google.com");
		//strcpy(gsmInfo.urlport,"80");
		gsmState = DataMode;
 8009640:	4b8a      	ldr	r3, [pc, #552]	; (800986c <GSM_Service+0x3d4>)
 8009642:	2220      	movs	r2, #32
 8009644:	701a      	strb	r2, [r3, #0]

		//sendSMS("0720631005", smsInfo.build);
		//gsmState = CallerID;
		//gsmState = USSD_Config;
		//gsmState = 0;
		gsmState = FTP_User;
 8009646:	4b89      	ldr	r3, [pc, #548]	; (800986c <GSM_Service+0x3d4>)
 8009648:	2222      	movs	r2, #34	; 0x22
 800964a:	701a      	strb	r2, [r3, #0]
		break;
 800964c:	f000 fe5f 	bl	800a30e <GSM_Service+0xe76>
	case DataMode:
		Debug_Send("Check FTP\r\n");
 8009650:	4b99      	ldr	r3, [pc, #612]	; (80098b8 <GSM_Service+0x420>)
 8009652:	0018      	movs	r0, r3
 8009654:	f000 ffa4 	bl	800a5a0 <Debug_Send>
		//GSM_Send("AT+QIMODE=0\r\n");
		//GSM_Send("AT+QIMODE?\r\n");
		//Debug_Send("Build SMS\r\n");
		BuildPower();
 8009658:	f002 fbb0 	bl	800bdbc <BuildPower>
		//sendSMS("0720631005", smsInfo.build);
		//GSM_Send("AT+CGDCONT=1,\"ip\",\"internet\"\r\n");
		GSM_Send("AT+QFTPOPEN=?\r\n");
 800965c:	4b97      	ldr	r3, [pc, #604]	; (80098bc <GSM_Service+0x424>)
 800965e:	0018      	movs	r0, r3
 8009660:	f000 ff4c 	bl	800a4fc <GSM_Send>
		gsmState = FTP_Open;
 8009664:	4b81      	ldr	r3, [pc, #516]	; (800986c <GSM_Service+0x3d4>)
 8009666:	2224      	movs	r2, #36	; 0x24
 8009668:	701a      	strb	r2, [r3, #0]

		gsmState = 0;
 800966a:	4b80      	ldr	r3, [pc, #512]	; (800986c <GSM_Service+0x3d4>)
 800966c:	2200      	movs	r2, #0
 800966e:	701a      	strb	r2, [r3, #0]
		gsmState = FTP_User;
 8009670:	4b7e      	ldr	r3, [pc, #504]	; (800986c <GSM_Service+0x3d4>)
 8009672:	2222      	movs	r2, #34	; 0x22
 8009674:	701a      	strb	r2, [r3, #0]
		break;
 8009676:	f000 fe4a 	bl	800a30e <GSM_Service+0xe76>
	case CallerID:
		GSM_Send("AT+CLIP=1\r\n");
 800967a:	4b91      	ldr	r3, [pc, #580]	; (80098c0 <GSM_Service+0x428>)
 800967c:	0018      	movs	r0, r3
 800967e:	f000 ff3d 	bl	800a4fc <GSM_Send>
		//+CLIP: "+27733507155",145,,,"",0
		gsmState = USSD;		//test
 8009682:	4b7a      	ldr	r3, [pc, #488]	; (800986c <GSM_Service+0x3d4>)
 8009684:	220c      	movs	r2, #12
 8009686:	701a      	strb	r2, [r3, #0]
		gsmState = SMS_Check;
 8009688:	4b78      	ldr	r3, [pc, #480]	; (800986c <GSM_Service+0x3d4>)
 800968a:	220e      	movs	r2, #14
 800968c:	701a      	strb	r2, [r3, #0]
		break;
 800968e:	f000 fe3e 	bl	800a30e <GSM_Service+0xe76>
	case USSD:
		if(strncmp(gsmInfo.network,"VodaCom",7)==0)GSM_Send("AT+CUSD=1,\"*100#\"\r\n");
 8009692:	498c      	ldr	r1, [pc, #560]	; (80098c4 <GSM_Service+0x42c>)
 8009694:	4b8c      	ldr	r3, [pc, #560]	; (80098c8 <GSM_Service+0x430>)
 8009696:	2207      	movs	r2, #7
 8009698:	0018      	movs	r0, r3
 800969a:	f00e fe8e 	bl	80183ba <strncmp>
 800969e:	1e03      	subs	r3, r0, #0
 80096a0:	d104      	bne.n	80096ac <GSM_Service+0x214>
 80096a2:	4b8a      	ldr	r3, [pc, #552]	; (80098cc <GSM_Service+0x434>)
 80096a4:	0018      	movs	r0, r3
 80096a6:	f000 ff29 	bl	800a4fc <GSM_Send>
 80096aa:	e00b      	b.n	80096c4 <GSM_Service+0x22c>
		else if(strncmp(gsmInfo.network,"MTN",3)==0)GSM_Send("AT+CUSD=1,\"*141#\"\r\n");
 80096ac:	4988      	ldr	r1, [pc, #544]	; (80098d0 <GSM_Service+0x438>)
 80096ae:	4b86      	ldr	r3, [pc, #536]	; (80098c8 <GSM_Service+0x430>)
 80096b0:	2203      	movs	r2, #3
 80096b2:	0018      	movs	r0, r3
 80096b4:	f00e fe81 	bl	80183ba <strncmp>
 80096b8:	1e03      	subs	r3, r0, #0
 80096ba:	d103      	bne.n	80096c4 <GSM_Service+0x22c>
 80096bc:	4b85      	ldr	r3, [pc, #532]	; (80098d4 <GSM_Service+0x43c>)
 80096be:	0018      	movs	r0, r3
 80096c0:	f000 ff1c 	bl	800a4fc <GSM_Send>
		//tempState = USSD;
		gsmInfo.balanceFlag = 0;
 80096c4:	4a79      	ldr	r2, [pc, #484]	; (80098ac <GSM_Service+0x414>)
 80096c6:	239a      	movs	r3, #154	; 0x9a
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	2100      	movs	r1, #0
 80096cc:	50d1      	str	r1, [r2, r3]
		gsmInfo.balancePending = 1;
 80096ce:	4a77      	ldr	r2, [pc, #476]	; (80098ac <GSM_Service+0x414>)
 80096d0:	239c      	movs	r3, #156	; 0x9c
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	2101      	movs	r1, #1
 80096d6:	50d1      	str	r1, [r2, r3]
		gsmState = 0;
 80096d8:	4b64      	ldr	r3, [pc, #400]	; (800986c <GSM_Service+0x3d4>)
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]

		break;
 80096de:	f000 fe16 	bl	800a30e <GSM_Service+0xe76>

	case SMS_Check:
		GSM_Send("AT+CMGL=\"ALL\"\r\n");
 80096e2:	4b7d      	ldr	r3, [pc, #500]	; (80098d8 <GSM_Service+0x440>)
 80096e4:	0018      	movs	r0, r3
 80096e6:	f000 ff09 	bl	800a4fc <GSM_Send>
		smsInfo.count = 0;
 80096ea:	4b7c      	ldr	r3, [pc, #496]	; (80098dc <GSM_Service+0x444>)
 80096ec:	22f8      	movs	r2, #248	; 0xf8
 80096ee:	2100      	movs	r1, #0
 80096f0:	5099      	str	r1, [r3, r2]
		//if (gsmInfo.registered == 1) sendData("Unit registered!!!\r\n",UART0);
		gsmState = Signal;		//check signal
 80096f2:	4b5e      	ldr	r3, [pc, #376]	; (800986c <GSM_Service+0x3d4>)
 80096f4:	2218      	movs	r2, #24
 80096f6:	701a      	strb	r2, [r3, #0]
		break;
 80096f8:	f000 fe09 	bl	800a30e <GSM_Service+0xe76>
	case Signal:
		GSM_Send("AT+CSQ\r\n");
 80096fc:	4b78      	ldr	r3, [pc, #480]	; (80098e0 <GSM_Service+0x448>)
 80096fe:	0018      	movs	r0, r3
 8009700:	f000 fefc 	bl	800a4fc <GSM_Send>
		//else if (smsFlags.gprsActive == 1)gsmState = SocketOpen;
		//else if (smsFlags.gprsPending == 1) gsmState = GPRS_Off;		//switch off gsm if previous socket dial failed
		//else if (gsmInfo.gprsDataPending == 1) gsmInfo.gprsDataPending = 0;
		//else if (gsmInfo.gprsDataPending == 0) gsmState = SocketOpen;
		//else if (gsmInfo.registered == 1) gsmState = SocketOpen;
		/*else */gsmState = 0;
 8009704:	4b59      	ldr	r3, [pc, #356]	; (800986c <GSM_Service+0x3d4>)
 8009706:	2200      	movs	r2, #0
 8009708:	701a      	strb	r2, [r3, #0]
		if (gsmInfo.balanceFlag == 1) gsmState = USSD;
 800970a:	4a68      	ldr	r2, [pc, #416]	; (80098ac <GSM_Service+0x414>)
 800970c:	239a      	movs	r3, #154	; 0x9a
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	58d3      	ldr	r3, [r2, r3]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d001      	beq.n	800971a <GSM_Service+0x282>
 8009716:	f000 fdf9 	bl	800a30c <GSM_Service+0xe74>
 800971a:	4b54      	ldr	r3, [pc, #336]	; (800986c <GSM_Service+0x3d4>)
 800971c:	220c      	movs	r2, #12
 800971e:	701a      	strb	r2, [r3, #0]

		//buildInfo();
		break;
 8009720:	f000 fdf4 	bl	800a30c <GSM_Service+0xe74>
	case SMS_Send:
		smsFlags.send = 1;
 8009724:	4b5e      	ldr	r3, [pc, #376]	; (80098a0 <GSM_Service+0x408>)
 8009726:	2201      	movs	r2, #1
 8009728:	609a      	str	r2, [r3, #8]
		Debug_Send("Send SMS\r\n");
 800972a:	4b6e      	ldr	r3, [pc, #440]	; (80098e4 <GSM_Service+0x44c>)
 800972c:	0018      	movs	r0, r3
 800972e:	f000 ff37 	bl	800a5a0 <Debug_Send>
		if (CheckUser() == 0){ //if there is no user registered
 8009732:	f002 f9e9 	bl	800bb08 <CheckUser>
 8009736:	1e03      	subs	r3, r0, #0
 8009738:	d108      	bne.n	800974c <GSM_Service+0x2b4>
			strcpy(smsInfo.recMSISDN, "0720631005");		//return all sms to admin
 800973a:	4b6b      	ldr	r3, [pc, #428]	; (80098e8 <GSM_Service+0x450>)
 800973c:	4a6b      	ldr	r2, [pc, #428]	; (80098ec <GSM_Service+0x454>)
 800973e:	ca03      	ldmia	r2!, {r0, r1}
 8009740:	c303      	stmia	r3!, {r0, r1}
 8009742:	8811      	ldrh	r1, [r2, #0]
 8009744:	8019      	strh	r1, [r3, #0]
 8009746:	7892      	ldrb	r2, [r2, #2]
 8009748:	709a      	strb	r2, [r3, #2]
 800974a:	e005      	b.n	8009758 <GSM_Service+0x2c0>
		}
		else strcpy(smsInfo.recMSISDN, gsmInfo.msisdn);
 800974c:	4a68      	ldr	r2, [pc, #416]	; (80098f0 <GSM_Service+0x458>)
 800974e:	4b66      	ldr	r3, [pc, #408]	; (80098e8 <GSM_Service+0x450>)
 8009750:	0011      	movs	r1, r2
 8009752:	0018      	movs	r0, r3
 8009754:	f00e fe29 	bl	80183aa <strcpy>
		strcpy(smsInfo.recMSISDN, "0720631005");	//debug
 8009758:	4b63      	ldr	r3, [pc, #396]	; (80098e8 <GSM_Service+0x450>)
 800975a:	4a64      	ldr	r2, [pc, #400]	; (80098ec <GSM_Service+0x454>)
 800975c:	ca03      	ldmia	r2!, {r0, r1}
 800975e:	c303      	stmia	r3!, {r0, r1}
 8009760:	8811      	ldrh	r1, [r2, #0]
 8009762:	8019      	strh	r1, [r3, #0]
 8009764:	7892      	ldrb	r2, [r2, #2]
 8009766:	709a      	strb	r2, [r3, #2]
		Debug_Send("MSISDN:");
 8009768:	4b62      	ldr	r3, [pc, #392]	; (80098f4 <GSM_Service+0x45c>)
 800976a:	0018      	movs	r0, r3
 800976c:	f000 ff18 	bl	800a5a0 <Debug_Send>
		Debug_Send(smsInfo.recMSISDN);
 8009770:	4b5d      	ldr	r3, [pc, #372]	; (80098e8 <GSM_Service+0x450>)
 8009772:	0018      	movs	r0, r3
 8009774:	f000 ff14 	bl	800a5a0 <Debug_Send>
		Debug_Send("\r\n");
 8009778:	4b5f      	ldr	r3, [pc, #380]	; (80098f8 <GSM_Service+0x460>)
 800977a:	0018      	movs	r0, r3
 800977c:	f000 ff10 	bl	800a5a0 <Debug_Send>
		//sendSMS(smsInfo.recMSISDN, smsInfo.build);
		sendSMS("0720631005", smsInfo.build);
 8009780:	4a5e      	ldr	r2, [pc, #376]	; (80098fc <GSM_Service+0x464>)
 8009782:	4b5a      	ldr	r3, [pc, #360]	; (80098ec <GSM_Service+0x454>)
 8009784:	0011      	movs	r1, r2
 8009786:	0018      	movs	r0, r3
 8009788:	f002 f886 	bl	800b898 <sendSMS>
		gsmInfo.balanceFlag = 1;
 800978c:	4a47      	ldr	r2, [pc, #284]	; (80098ac <GSM_Service+0x414>)
 800978e:	239a      	movs	r3, #154	; 0x9a
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	2101      	movs	r1, #1
 8009794:	50d1      	str	r1, [r2, r3]
		//sendSMS("0720631005", "TEST");
		gsmState = 0;
 8009796:	4b35      	ldr	r3, [pc, #212]	; (800986c <GSM_Service+0x3d4>)
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
		break;
 800979c:	f000 fdb7 	bl	800a30e <GSM_Service+0xe76>
	case SMS_Text:
		//sendData("Insert SMS text\r\n",UART0);
		Debug_Send("SMS\r\n");
 80097a0:	4b57      	ldr	r3, [pc, #348]	; (8009900 <GSM_Service+0x468>)
 80097a2:	0018      	movs	r0, r3
 80097a4:	f000 fefc 	bl	800a5a0 <Debug_Send>
		strcpy(temp,smsInfo.content1);
 80097a8:	4a56      	ldr	r2, [pc, #344]	; (8009904 <GSM_Service+0x46c>)
 80097aa:	24dc      	movs	r4, #220	; 0xdc
 80097ac:	193b      	adds	r3, r7, r4
 80097ae:	0011      	movs	r1, r2
 80097b0:	0018      	movs	r0, r3
 80097b2:	f00e fdfa 	bl	80183aa <strcpy>
		strcat(temp,"\032\r");
 80097b6:	193b      	adds	r3, r7, r4
 80097b8:	0018      	movs	r0, r3
 80097ba:	f7ff fcaf 	bl	800911c <strlen>
 80097be:	0003      	movs	r3, r0
 80097c0:	001a      	movs	r2, r3
 80097c2:	193b      	adds	r3, r7, r4
 80097c4:	189a      	adds	r2, r3, r2
 80097c6:	4b50      	ldr	r3, [pc, #320]	; (8009908 <GSM_Service+0x470>)
 80097c8:	0010      	movs	r0, r2
 80097ca:	0019      	movs	r1, r3
 80097cc:	2303      	movs	r3, #3
 80097ce:	001a      	movs	r2, r3
 80097d0:	f00e fdac 	bl	801832c <memcpy>
		GSM_Send(temp);
 80097d4:	193b      	adds	r3, r7, r4
 80097d6:	0018      	movs	r0, r3
 80097d8:	f000 fe90 	bl	800a4fc <GSM_Send>
		//GSM_Send(SMScontent);
		//sendByte('1A', UART1);
		//GSM_Send("\032\r");		//1A HEX
		smsFlags.reply = 0;
 80097dc:	4b30      	ldr	r3, [pc, #192]	; (80098a0 <GSM_Service+0x408>)
 80097de:	2200      	movs	r2, #0
 80097e0:	625a      	str	r2, [r3, #36]	; 0x24
		gsmState = 0;
 80097e2:	4b22      	ldr	r3, [pc, #136]	; (800986c <GSM_Service+0x3d4>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	701a      	strb	r2, [r3, #0]
		break;
 80097e8:	f000 fd91 	bl	800a30e <GSM_Service+0xe76>
	case GPRS_Attach:
		GSM_Send("AT+CGATT=1\r\n");
 80097ec:	4b47      	ldr	r3, [pc, #284]	; (800990c <GSM_Service+0x474>)
 80097ee:	0018      	movs	r0, r3
 80097f0:	f000 fe84 	bl	800a4fc <GSM_Send>
		gsmState = 0;
 80097f4:	4b1d      	ldr	r3, [pc, #116]	; (800986c <GSM_Service+0x3d4>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	701a      	strb	r2, [r3, #0]
		gsmState = GprsContext;
 80097fa:	4b1c      	ldr	r3, [pc, #112]	; (800986c <GSM_Service+0x3d4>)
 80097fc:	220a      	movs	r2, #10
 80097fe:	701a      	strb	r2, [r3, #0]
		break;
 8009800:	f000 fd85 	bl	800a30e <GSM_Service+0xe76>
	case GPRS_On:
		GSM_Send("AT+CGACT=1,1\r\n");
 8009804:	4b42      	ldr	r3, [pc, #264]	; (8009910 <GSM_Service+0x478>)
 8009806:	0018      	movs	r0, r3
 8009808:	f000 fe78 	bl	800a4fc <GSM_Send>
		smsFlags.gprsPending = 1;
 800980c:	4b24      	ldr	r3, [pc, #144]	; (80098a0 <GSM_Service+0x408>)
 800980e:	2201      	movs	r2, #1
 8009810:	619a      	str	r2, [r3, #24]
		gsmInfo.socket = 0;
 8009812:	4b26      	ldr	r3, [pc, #152]	; (80098ac <GSM_Service+0x414>)
 8009814:	2200      	movs	r2, #0
 8009816:	679a      	str	r2, [r3, #120]	; 0x78
		//gsmState = 0;
		//gsmState = 10;
		gsmState = GPRS_IP;
 8009818:	4b14      	ldr	r3, [pc, #80]	; (800986c <GSM_Service+0x3d4>)
 800981a:	2213      	movs	r2, #19
 800981c:	701a      	strb	r2, [r3, #0]
		break;
 800981e:	f000 fd76 	bl	800a30e <GSM_Service+0xe76>
	case GPRS_IP:
		GSM_Send("AT+CGPADDR=1\r\n");
 8009822:	4b3c      	ldr	r3, [pc, #240]	; (8009914 <GSM_Service+0x47c>)
 8009824:	0018      	movs	r0, r3
 8009826:	f000 fe69 	bl	800a4fc <GSM_Send>
		gsmState = 0;
 800982a:	4b10      	ldr	r3, [pc, #64]	; (800986c <GSM_Service+0x3d4>)
 800982c:	2200      	movs	r2, #0
 800982e:	701a      	strb	r2, [r3, #0]
		break;
 8009830:	f000 fd6d 	bl	800a30e <GSM_Service+0xe76>
	case GPRS_Off:
		//GSM_Send("AT+MIPCALL=0\r\n");

		HAL_Delay(1);
 8009834:	2001      	movs	r0, #1
 8009836:	f004 f801 	bl	800d83c <HAL_Delay>
		GSM_Send("AT+CGACT=0,1\r\n");
 800983a:	4b37      	ldr	r3, [pc, #220]	; (8009918 <GSM_Service+0x480>)
 800983c:	0018      	movs	r0, r3
 800983e:	f000 fe5d 	bl	800a4fc <GSM_Send>
		gsmInfo.socket = 0;
 8009842:	4b1a      	ldr	r3, [pc, #104]	; (80098ac <GSM_Service+0x414>)
 8009844:	2200      	movs	r2, #0
 8009846:	679a      	str	r2, [r3, #120]	; 0x78
		smsFlags.gprsActive = 0;
 8009848:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <GSM_Service+0x408>)
 800984a:	2200      	movs	r2, #0
 800984c:	61da      	str	r2, [r3, #28]
		gsmInfo.gprsDataPending = 0;
 800984e:	4b17      	ldr	r3, [pc, #92]	; (80098ac <GSM_Service+0x414>)
 8009850:	2280      	movs	r2, #128	; 0x80
 8009852:	2100      	movs	r1, #0
 8009854:	5099      	str	r1, [r3, r2]
		gsmState = 0;
 8009856:	4b05      	ldr	r3, [pc, #20]	; (800986c <GSM_Service+0x3d4>)
 8009858:	2200      	movs	r2, #0
 800985a:	701a      	strb	r2, [r3, #0]
		//go2boot();
		break;
 800985c:	f000 fd57 	bl	800a30e <GSM_Service+0xe76>
 8009860:	20001880 	.word	0x20001880
 8009864:	20002224 	.word	0x20002224
 8009868:	08018db4 	.word	0x08018db4
 800986c:	200000c0 	.word	0x200000c0
 8009870:	08019fdc 	.word	0x08019fdc
 8009874:	200002d4 	.word	0x200002d4
 8009878:	48000800 	.word	0x48000800
 800987c:	48000400 	.word	0x48000400
 8009880:	08018db8 	.word	0x08018db8
 8009884:	08018dc4 	.word	0x08018dc4
 8009888:	08018dd4 	.word	0x08018dd4
 800988c:	08018de4 	.word	0x08018de4
 8009890:	08018df0 	.word	0x08018df0
 8009894:	08018dfc 	.word	0x08018dfc
 8009898:	08018e08 	.word	0x08018e08
 800989c:	08018e14 	.word	0x08018e14
 80098a0:	200014c4 	.word	0x200014c4
 80098a4:	08018e20 	.word	0x08018e20
 80098a8:	08018e2c 	.word	0x08018e2c
 80098ac:	200019a8 	.word	0x200019a8
 80098b0:	08018e38 	.word	0x08018e38
 80098b4:	08018e44 	.word	0x08018e44
 80098b8:	08018e64 	.word	0x08018e64
 80098bc:	08018e70 	.word	0x08018e70
 80098c0:	08018e80 	.word	0x08018e80
 80098c4:	08018e8c 	.word	0x08018e8c
 80098c8:	20001a7d 	.word	0x20001a7d
 80098cc:	08018e94 	.word	0x08018e94
 80098d0:	08018ea8 	.word	0x08018ea8
 80098d4:	08018eac 	.word	0x08018eac
 80098d8:	08018ec0 	.word	0x08018ec0
 80098dc:	200016a8 	.word	0x200016a8
 80098e0:	08018ed0 	.word	0x08018ed0
 80098e4:	08018edc 	.word	0x08018edc
 80098e8:	200016ac 	.word	0x200016ac
 80098ec:	08018ee8 	.word	0x08018ee8
 80098f0:	20001a5a 	.word	0x20001a5a
 80098f4:	08018ef4 	.word	0x08018ef4
 80098f8:	08018da4 	.word	0x08018da4
 80098fc:	200017a4 	.word	0x200017a4
 8009900:	08018efc 	.word	0x08018efc
 8009904:	200016cc 	.word	0x200016cc
 8009908:	08018f04 	.word	0x08018f04
 800990c:	08018f08 	.word	0x08018f08
 8009910:	08018f18 	.word	0x08018f18
 8009914:	08018f28 	.word	0x08018f28
 8009918:	08018f38 	.word	0x08018f38
	case SocketOpen:
		gsmState = 0;
 800991c:	4b78      	ldr	r3, [pc, #480]	; (8009b00 <GSM_Service+0x668>)
 800991e:	2200      	movs	r2, #0
 8009920:	701a      	strb	r2, [r3, #0]
		//sendData("AT+MIPOPEN=1,10,\"139.130.4.5\",80,0\r\n",UART1);		//connect to remote server
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"216.58.223.4\",80,0\r\n",UART1);		//connect to remote server
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"197.159.49.78\",5001,0\r\n",UART1);
		gsmInfo.gprsDataPending = 1;
 8009922:	4b78      	ldr	r3, [pc, #480]	; (8009b04 <GSM_Service+0x66c>)
 8009924:	2280      	movs	r2, #128	; 0x80
 8009926:	2101      	movs	r1, #1
 8009928:	5099      	str	r1, [r3, r2]
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"196.40.183.39\",5001,0\r\n",UART1);
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"102.129.99.123\",5001,0\r\n",UART1);

		char temp[200];
		//strcpy(temp,"AT+MIPOPEN=1,5001,\"");
		strcpy(temp,"AT+QIOPEN=1,\"TCP\",\"");
 800992a:	003b      	movs	r3, r7
 800992c:	4a76      	ldr	r2, [pc, #472]	; (8009b08 <GSM_Service+0x670>)
 800992e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8009930:	c313      	stmia	r3!, {r0, r1, r4}
 8009932:	ca03      	ldmia	r2!, {r0, r1}
 8009934:	c303      	stmia	r3!, {r0, r1}
		strcpy(temp,"AT+QIOPEN=\"TCP\",\"");
 8009936:	003b      	movs	r3, r7
 8009938:	4a74      	ldr	r2, [pc, #464]	; (8009b0c <GSM_Service+0x674>)
 800993a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800993c:	c313      	stmia	r3!, {r0, r1, r4}
 800993e:	6811      	ldr	r1, [r2, #0]
 8009940:	6019      	str	r1, [r3, #0]
 8009942:	8892      	ldrh	r2, [r2, #4]
 8009944:	809a      	strh	r2, [r3, #4]
		strcat(temp,gsmInfo.url);
 8009946:	4a6f      	ldr	r2, [pc, #444]	; (8009b04 <GSM_Service+0x66c>)
 8009948:	003b      	movs	r3, r7
 800994a:	0011      	movs	r1, r2
 800994c:	0018      	movs	r0, r3
 800994e:	f00e fd1f 	bl	8018390 <strcat>
		strcat(temp,"\",");
 8009952:	003b      	movs	r3, r7
 8009954:	0018      	movs	r0, r3
 8009956:	f7ff fbe1 	bl	800911c <strlen>
 800995a:	0003      	movs	r3, r0
 800995c:	001a      	movs	r2, r3
 800995e:	003b      	movs	r3, r7
 8009960:	189a      	adds	r2, r3, r2
 8009962:	4b6b      	ldr	r3, [pc, #428]	; (8009b10 <GSM_Service+0x678>)
 8009964:	0010      	movs	r0, r2
 8009966:	0019      	movs	r1, r3
 8009968:	2303      	movs	r3, #3
 800996a:	001a      	movs	r2, r3
 800996c:	f00e fcde 	bl	801832c <memcpy>
		strcat(temp,gsmInfo.urlport);
 8009970:	4a68      	ldr	r2, [pc, #416]	; (8009b14 <GSM_Service+0x67c>)
 8009972:	003b      	movs	r3, r7
 8009974:	0011      	movs	r1, r2
 8009976:	0018      	movs	r0, r3
 8009978:	f00e fd0a 	bl	8018390 <strcat>
		strcat (temp,"\r\n");
 800997c:	003b      	movs	r3, r7
 800997e:	0018      	movs	r0, r3
 8009980:	f7ff fbcc 	bl	800911c <strlen>
 8009984:	0003      	movs	r3, r0
 8009986:	001a      	movs	r2, r3
 8009988:	003b      	movs	r3, r7
 800998a:	189a      	adds	r2, r3, r2
 800998c:	4b62      	ldr	r3, [pc, #392]	; (8009b18 <GSM_Service+0x680>)
 800998e:	0010      	movs	r0, r2
 8009990:	0019      	movs	r1, r3
 8009992:	2303      	movs	r3, #3
 8009994:	001a      	movs	r2, r3
 8009996:	f00e fcc9 	bl	801832c <memcpy>
		Debug_Send("build socket\r\n");
 800999a:	4b60      	ldr	r3, [pc, #384]	; (8009b1c <GSM_Service+0x684>)
 800999c:	0018      	movs	r0, r3
 800999e:	f000 fdff 	bl	800a5a0 <Debug_Send>
		//strcat (temp,",0\r\n");
		if (gsmInfo.socket == 0){
 80099a2:	4b58      	ldr	r3, [pc, #352]	; (8009b04 <GSM_Service+0x66c>)
 80099a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10d      	bne.n	80099c6 <GSM_Service+0x52e>
			//sendData("AT+MIPOPEN=1,5001,\"102.129.99.123\",5000,0\r\n",UART1);
			Debug_Send("Open socket\r\n");
 80099aa:	4b5d      	ldr	r3, [pc, #372]	; (8009b20 <GSM_Service+0x688>)
 80099ac:	0018      	movs	r0, r3
 80099ae:	f000 fdf7 	bl	800a5a0 <Debug_Send>
			Debug_Send(temp);
 80099b2:	003b      	movs	r3, r7
 80099b4:	0018      	movs	r0, r3
 80099b6:	f000 fdf3 	bl	800a5a0 <Debug_Send>
			GSM_Send(temp);
 80099ba:	003b      	movs	r3, r7
 80099bc:	0018      	movs	r0, r3
 80099be:	f000 fd9d 	bl	800a4fc <GSM_Send>
			//sendData("Socket open\r\n",UART0);
		}
		//sendData("AT+MIPOPEN=?\r\n",UART1);
		//gsmState = GPRS_Write;
		//if (gsmInfo.gprsDataPending == 0) gsmState = 0;
		break;
 80099c2:	f000 fca4 	bl	800a30e <GSM_Service+0xe76>
			gsmState = SocketClose;
 80099c6:	4b4e      	ldr	r3, [pc, #312]	; (8009b00 <GSM_Service+0x668>)
 80099c8:	2216      	movs	r2, #22
 80099ca:	701a      	strb	r2, [r3, #0]
		break;
 80099cc:	f000 fc9f 	bl	800a30e <GSM_Service+0xe76>
	case SocketClose:
		//GSM_Send("AT+MIPCLOSE=1\r\n");
		Debug_Send("Close socket\r\n");
 80099d0:	4b54      	ldr	r3, [pc, #336]	; (8009b24 <GSM_Service+0x68c>)
 80099d2:	0018      	movs	r0, r3
 80099d4:	f000 fde4 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT+QICLOSE\r\n");
 80099d8:	4b53      	ldr	r3, [pc, #332]	; (8009b28 <GSM_Service+0x690>)
 80099da:	0018      	movs	r0, r3
 80099dc:	f000 fd8e 	bl	800a4fc <GSM_Send>
		gsmInfo.gprsDataPending = 0;
 80099e0:	4b48      	ldr	r3, [pc, #288]	; (8009b04 <GSM_Service+0x66c>)
 80099e2:	2280      	movs	r2, #128	; 0x80
 80099e4:	2100      	movs	r1, #0
 80099e6:	5099      	str	r1, [r3, r2]
		gsmState = 0;
 80099e8:	4b45      	ldr	r3, [pc, #276]	; (8009b00 <GSM_Service+0x668>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	701a      	strb	r2, [r3, #0]
		break;
 80099ee:	f000 fc8e 	bl	800a30e <GSM_Service+0xe76>
	case SMS_Del:
		//smsFlags.send = 1;
		//GSM_Send("AT+CMGD=");
		//GSM_Send(smsInfo.index);
		strcpy(temp,"AT+CMGD=");
 80099f2:	003b      	movs	r3, r7
 80099f4:	4a4d      	ldr	r2, [pc, #308]	; (8009b2c <GSM_Service+0x694>)
 80099f6:	ca03      	ldmia	r2!, {r0, r1}
 80099f8:	c303      	stmia	r3!, {r0, r1}
 80099fa:	7812      	ldrb	r2, [r2, #0]
 80099fc:	701a      	strb	r2, [r3, #0]
		strcat(temp,smsInfo.index);
 80099fe:	4a4c      	ldr	r2, [pc, #304]	; (8009b30 <GSM_Service+0x698>)
 8009a00:	003b      	movs	r3, r7
 8009a02:	0011      	movs	r1, r2
 8009a04:	0018      	movs	r0, r3
 8009a06:	f00e fcc3 	bl	8018390 <strcat>
		strcat(temp,"\r\n");
 8009a0a:	003b      	movs	r3, r7
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f7ff fb85 	bl	800911c <strlen>
 8009a12:	0003      	movs	r3, r0
 8009a14:	001a      	movs	r2, r3
 8009a16:	003b      	movs	r3, r7
 8009a18:	189a      	adds	r2, r3, r2
 8009a1a:	4b3f      	ldr	r3, [pc, #252]	; (8009b18 <GSM_Service+0x680>)
 8009a1c:	0010      	movs	r0, r2
 8009a1e:	0019      	movs	r1, r3
 8009a20:	2303      	movs	r3, #3
 8009a22:	001a      	movs	r2, r3
 8009a24:	f00e fc82 	bl	801832c <memcpy>
		//sendData("4",UART1);
		//GSM_Send("\r\n");
		GSM_Send(temp);
 8009a28:	003b      	movs	r3, r7
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f000 fd66 	bl	800a4fc <GSM_Send>
		smsFlags.del = 0;
 8009a30:	4b40      	ldr	r3, [pc, #256]	; (8009b34 <GSM_Service+0x69c>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	621a      	str	r2, [r3, #32]
		gsmState = 0;
 8009a36:	4b32      	ldr	r3, [pc, #200]	; (8009b00 <GSM_Service+0x668>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	701a      	strb	r2, [r3, #0]
		break;
 8009a3c:	f000 fc67 	bl	800a30e <GSM_Service+0xe76>
		//sendData("AT+MIPOPEN=?\r\n",UART1);

		gsmState = 0;
		break;*/
	case GPRS_Write:
		gsmInfo.dataFlag = 1;
 8009a40:	4a30      	ldr	r2, [pc, #192]	; (8009b04 <GSM_Service+0x66c>)
 8009a42:	23aa      	movs	r3, #170	; 0xaa
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	2101      	movs	r1, #1
 8009a48:	50d1      	str	r1, [r2, r3]
		Debug_Send("GPRS write\r\n");
 8009a4a:	4b3b      	ldr	r3, [pc, #236]	; (8009b38 <GSM_Service+0x6a0>)
 8009a4c:	0018      	movs	r0, r3
 8009a4e:	f000 fda7 	bl	800a5a0 <Debug_Send>
		if (gsmInfo.MQTT == 0){
 8009a52:	4a2c      	ldr	r2, [pc, #176]	; (8009b04 <GSM_Service+0x66c>)
 8009a54:	23be      	movs	r3, #190	; 0xbe
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	58d3      	ldr	r3, [r2, r3]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d000      	beq.n	8009a60 <GSM_Service+0x5c8>
 8009a5e:	e19b      	b.n	8009d98 <GSM_Service+0x900>
			if (gsmInfo.registered == 0){
 8009a60:	4b28      	ldr	r3, [pc, #160]	; (8009b04 <GSM_Service+0x66c>)
 8009a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d179      	bne.n	8009b5c <GSM_Service+0x6c4>
				Debug_Send("unregistered\r\n");
 8009a68:	4b34      	ldr	r3, [pc, #208]	; (8009b3c <GSM_Service+0x6a4>)
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f000 fd98 	bl	800a5a0 <Debug_Send>
				strcpy(tempGPRS,"imei:");
 8009a70:	4a33      	ldr	r2, [pc, #204]	; (8009b40 <GSM_Service+0x6a8>)
 8009a72:	4b34      	ldr	r3, [pc, #208]	; (8009b44 <GSM_Service+0x6ac>)
 8009a74:	0010      	movs	r0, r2
 8009a76:	0019      	movs	r1, r3
 8009a78:	2306      	movs	r3, #6
 8009a7a:	001a      	movs	r2, r3
 8009a7c:	f00e fc56 	bl	801832c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.imei);
 8009a80:	4a31      	ldr	r2, [pc, #196]	; (8009b48 <GSM_Service+0x6b0>)
 8009a82:	4b2f      	ldr	r3, [pc, #188]	; (8009b40 <GSM_Service+0x6a8>)
 8009a84:	0011      	movs	r1, r2
 8009a86:	0018      	movs	r0, r3
 8009a88:	f00e fc82 	bl	8018390 <strcat>

				int temp3;
				char temp2[20];
				//temp3 = getVolt();
				myLongStr(voltage,temp2,10,10);
 8009a8c:	4b2f      	ldr	r3, [pc, #188]	; (8009b4c <GSM_Service+0x6b4>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	24c8      	movs	r4, #200	; 0xc8
 8009a92:	1939      	adds	r1, r7, r4
 8009a94:	230a      	movs	r3, #10
 8009a96:	220a      	movs	r2, #10
 8009a98:	f003 fb50 	bl	800d13c <myLongStr>
				strcat(tempGPRS,",v:");
 8009a9c:	4b28      	ldr	r3, [pc, #160]	; (8009b40 <GSM_Service+0x6a8>)
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	f7ff fb3c 	bl	800911c <strlen>
 8009aa4:	0003      	movs	r3, r0
 8009aa6:	001a      	movs	r2, r3
 8009aa8:	4b25      	ldr	r3, [pc, #148]	; (8009b40 <GSM_Service+0x6a8>)
 8009aaa:	18d2      	adds	r2, r2, r3
 8009aac:	4b28      	ldr	r3, [pc, #160]	; (8009b50 <GSM_Service+0x6b8>)
 8009aae:	0010      	movs	r0, r2
 8009ab0:	0019      	movs	r1, r3
 8009ab2:	2304      	movs	r3, #4
 8009ab4:	001a      	movs	r2, r3
 8009ab6:	f00e fc39 	bl	801832c <memcpy>
				strcat(tempGPRS,temp2);
 8009aba:	193a      	adds	r2, r7, r4
 8009abc:	4b20      	ldr	r3, [pc, #128]	; (8009b40 <GSM_Service+0x6a8>)
 8009abe:	0011      	movs	r1, r2
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f00e fc65 	bl	8018390 <strcat>
				//temp3 = getCurrent();
				myLongStr(current1,temp2,10,10);
 8009ac6:	4b23      	ldr	r3, [pc, #140]	; (8009b54 <GSM_Service+0x6bc>)
 8009ac8:	6818      	ldr	r0, [r3, #0]
 8009aca:	1939      	adds	r1, r7, r4
 8009acc:	230a      	movs	r3, #10
 8009ace:	220a      	movs	r2, #10
 8009ad0:	f003 fb34 	bl	800d13c <myLongStr>
				strcat(tempGPRS,",c:");
 8009ad4:	4b1a      	ldr	r3, [pc, #104]	; (8009b40 <GSM_Service+0x6a8>)
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f7ff fb20 	bl	800911c <strlen>
 8009adc:	0003      	movs	r3, r0
 8009ade:	001a      	movs	r2, r3
 8009ae0:	4b17      	ldr	r3, [pc, #92]	; (8009b40 <GSM_Service+0x6a8>)
 8009ae2:	18d2      	adds	r2, r2, r3
 8009ae4:	4b1c      	ldr	r3, [pc, #112]	; (8009b58 <GSM_Service+0x6c0>)
 8009ae6:	0010      	movs	r0, r2
 8009ae8:	0019      	movs	r1, r3
 8009aea:	2304      	movs	r3, #4
 8009aec:	001a      	movs	r2, r3
 8009aee:	f00e fc1d 	bl	801832c <memcpy>
				strcat(tempGPRS,temp2);
 8009af2:	193a      	adds	r2, r7, r4
 8009af4:	4b12      	ldr	r3, [pc, #72]	; (8009b40 <GSM_Service+0x6a8>)
 8009af6:	0011      	movs	r1, r2
 8009af8:	0018      	movs	r0, r3
 8009afa:	f00e fc49 	bl	8018390 <strcat>
 8009afe:	e03b      	b.n	8009b78 <GSM_Service+0x6e0>
 8009b00:	200000c0 	.word	0x200000c0
 8009b04:	200019a8 	.word	0x200019a8
 8009b08:	08018f48 	.word	0x08018f48
 8009b0c:	08018f5c 	.word	0x08018f5c
 8009b10:	08018f70 	.word	0x08018f70
 8009b14:	200019c6 	.word	0x200019c6
 8009b18:	08018da4 	.word	0x08018da4
 8009b1c:	08018f74 	.word	0x08018f74
 8009b20:	08018f84 	.word	0x08018f84
 8009b24:	08018f94 	.word	0x08018f94
 8009b28:	08018fa4 	.word	0x08018fa4
 8009b2c:	08018fb4 	.word	0x08018fb4
 8009b30:	200016a8 	.word	0x200016a8
 8009b34:	200014c4 	.word	0x200014c4
 8009b38:	08018fc0 	.word	0x08018fc0
 8009b3c:	08018fd0 	.word	0x08018fd0
 8009b40:	2000184c 	.word	0x2000184c
 8009b44:	08018fe0 	.word	0x08018fe0
 8009b48:	200019cc 	.word	0x200019cc
 8009b4c:	20001880 	.word	0x20001880
 8009b50:	08018fe8 	.word	0x08018fe8
 8009b54:	20001c20 	.word	0x20001c20
 8009b58:	08018fec 	.word	0x08018fec
			}
			else {
				strcpy(tempGPRS,"user:");
 8009b5c:	4aeb      	ldr	r2, [pc, #940]	; (8009f0c <GSM_Service+0xa74>)
 8009b5e:	4bec      	ldr	r3, [pc, #944]	; (8009f10 <GSM_Service+0xa78>)
 8009b60:	0010      	movs	r0, r2
 8009b62:	0019      	movs	r1, r3
 8009b64:	2306      	movs	r3, #6
 8009b66:	001a      	movs	r2, r3
 8009b68:	f00e fbe0 	bl	801832c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.user);
 8009b6c:	4ae9      	ldr	r2, [pc, #932]	; (8009f14 <GSM_Service+0xa7c>)
 8009b6e:	4be7      	ldr	r3, [pc, #924]	; (8009f0c <GSM_Service+0xa74>)
 8009b70:	0011      	movs	r1, r2
 8009b72:	0018      	movs	r0, r3
 8009b74:	f00e fc0c 	bl	8018390 <strcat>
					sprintf (tempv,".%d", owData[3]);
					strcat(tempGPRS,tempv);
				}*/
			}
			//GPRS_SendData(tempGPRS);
			if (gsmInfo.userFlag == 1){
 8009b78:	4be7      	ldr	r3, [pc, #924]	; (8009f18 <GSM_Service+0xa80>)
 8009b7a:	2284      	movs	r2, #132	; 0x84
 8009b7c:	589b      	ldr	r3, [r3, r2]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d124      	bne.n	8009bcc <GSM_Service+0x734>
				gsmInfo.userFlag = 0;
 8009b82:	4be5      	ldr	r3, [pc, #916]	; (8009f18 <GSM_Service+0xa80>)
 8009b84:	2284      	movs	r2, #132	; 0x84
 8009b86:	2100      	movs	r1, #0
 8009b88:	5099      	str	r1, [r3, r2]
				strcpy(tempGPRS,",");
 8009b8a:	4ae0      	ldr	r2, [pc, #896]	; (8009f0c <GSM_Service+0xa74>)
 8009b8c:	4be3      	ldr	r3, [pc, #908]	; (8009f1c <GSM_Service+0xa84>)
 8009b8e:	0010      	movs	r0, r2
 8009b90:	0019      	movs	r1, r3
 8009b92:	2302      	movs	r3, #2
 8009b94:	001a      	movs	r2, r3
 8009b96:	f00e fbc9 	bl	801832c <memcpy>
				strcat(tempGPRS,"user:");
 8009b9a:	4bdc      	ldr	r3, [pc, #880]	; (8009f0c <GSM_Service+0xa74>)
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	f7ff fabd 	bl	800911c <strlen>
 8009ba2:	0003      	movs	r3, r0
 8009ba4:	001a      	movs	r2, r3
 8009ba6:	4bd9      	ldr	r3, [pc, #868]	; (8009f0c <GSM_Service+0xa74>)
 8009ba8:	18d2      	adds	r2, r2, r3
 8009baa:	4bd9      	ldr	r3, [pc, #868]	; (8009f10 <GSM_Service+0xa78>)
 8009bac:	0010      	movs	r0, r2
 8009bae:	0019      	movs	r1, r3
 8009bb0:	2306      	movs	r3, #6
 8009bb2:	001a      	movs	r2, r3
 8009bb4:	f00e fbba 	bl	801832c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.user);
 8009bb8:	4ad6      	ldr	r2, [pc, #856]	; (8009f14 <GSM_Service+0xa7c>)
 8009bba:	4bd4      	ldr	r3, [pc, #848]	; (8009f0c <GSM_Service+0xa74>)
 8009bbc:	0011      	movs	r1, r2
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	f00e fbe6 	bl	8018390 <strcat>


				//strcat(tempGPRS,",");
				//sendData(tempGPRS,UART0);
				GPRS_SendData(tempGPRS);
 8009bc4:	4bd1      	ldr	r3, [pc, #836]	; (8009f0c <GSM_Service+0xa74>)
 8009bc6:	0018      	movs	r0, r3
 8009bc8:	f002 fa72 	bl	800c0b0 <GPRS_SendData>
			}

			if (gsmInfo.msisdnFlag == 1){
 8009bcc:	4bd2      	ldr	r3, [pc, #840]	; (8009f18 <GSM_Service+0xa80>)
 8009bce:	2288      	movs	r2, #136	; 0x88
 8009bd0:	589b      	ldr	r3, [r3, r2]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d124      	bne.n	8009c20 <GSM_Service+0x788>
				gsmInfo.msisdnFlag = 0;
 8009bd6:	4bd0      	ldr	r3, [pc, #832]	; (8009f18 <GSM_Service+0xa80>)
 8009bd8:	2288      	movs	r2, #136	; 0x88
 8009bda:	2100      	movs	r1, #0
 8009bdc:	5099      	str	r1, [r3, r2]
				strcpy(tempGPRS,",");
 8009bde:	4acb      	ldr	r2, [pc, #812]	; (8009f0c <GSM_Service+0xa74>)
 8009be0:	4bce      	ldr	r3, [pc, #824]	; (8009f1c <GSM_Service+0xa84>)
 8009be2:	0010      	movs	r0, r2
 8009be4:	0019      	movs	r1, r3
 8009be6:	2302      	movs	r3, #2
 8009be8:	001a      	movs	r2, r3
 8009bea:	f00e fb9f 	bl	801832c <memcpy>
				strcat(tempGPRS,"msisdn:");
 8009bee:	4bc7      	ldr	r3, [pc, #796]	; (8009f0c <GSM_Service+0xa74>)
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f7ff fa93 	bl	800911c <strlen>
 8009bf6:	0003      	movs	r3, r0
 8009bf8:	001a      	movs	r2, r3
 8009bfa:	4bc4      	ldr	r3, [pc, #784]	; (8009f0c <GSM_Service+0xa74>)
 8009bfc:	18d2      	adds	r2, r2, r3
 8009bfe:	4bc8      	ldr	r3, [pc, #800]	; (8009f20 <GSM_Service+0xa88>)
 8009c00:	0010      	movs	r0, r2
 8009c02:	0019      	movs	r1, r3
 8009c04:	2308      	movs	r3, #8
 8009c06:	001a      	movs	r2, r3
 8009c08:	f00e fb90 	bl	801832c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.msisdn);
 8009c0c:	4ac5      	ldr	r2, [pc, #788]	; (8009f24 <GSM_Service+0xa8c>)
 8009c0e:	4bbf      	ldr	r3, [pc, #764]	; (8009f0c <GSM_Service+0xa74>)
 8009c10:	0011      	movs	r1, r2
 8009c12:	0018      	movs	r0, r3
 8009c14:	f00e fbbc 	bl	8018390 <strcat>
				//sendData(tempGPRS,UART0);
				GPRS_SendData(tempGPRS);
 8009c18:	4bbc      	ldr	r3, [pc, #752]	; (8009f0c <GSM_Service+0xa74>)
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	f002 fa48 	bl	800c0b0 <GPRS_SendData>
			}

			if (gsmInfo.passwordFlag == 1){
 8009c20:	4bbd      	ldr	r3, [pc, #756]	; (8009f18 <GSM_Service+0xa80>)
 8009c22:	228c      	movs	r2, #140	; 0x8c
 8009c24:	589b      	ldr	r3, [r3, r2]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d124      	bne.n	8009c74 <GSM_Service+0x7dc>
				gsmInfo.passwordFlag = 0;
 8009c2a:	4bbb      	ldr	r3, [pc, #748]	; (8009f18 <GSM_Service+0xa80>)
 8009c2c:	228c      	movs	r2, #140	; 0x8c
 8009c2e:	2100      	movs	r1, #0
 8009c30:	5099      	str	r1, [r3, r2]
				strcpy(tempGPRS,",");
 8009c32:	4ab6      	ldr	r2, [pc, #728]	; (8009f0c <GSM_Service+0xa74>)
 8009c34:	4bb9      	ldr	r3, [pc, #740]	; (8009f1c <GSM_Service+0xa84>)
 8009c36:	0010      	movs	r0, r2
 8009c38:	0019      	movs	r1, r3
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	001a      	movs	r2, r3
 8009c3e:	f00e fb75 	bl	801832c <memcpy>
				strcat(tempGPRS,"password:");
 8009c42:	4bb2      	ldr	r3, [pc, #712]	; (8009f0c <GSM_Service+0xa74>)
 8009c44:	0018      	movs	r0, r3
 8009c46:	f7ff fa69 	bl	800911c <strlen>
 8009c4a:	0003      	movs	r3, r0
 8009c4c:	001a      	movs	r2, r3
 8009c4e:	4baf      	ldr	r3, [pc, #700]	; (8009f0c <GSM_Service+0xa74>)
 8009c50:	18d2      	adds	r2, r2, r3
 8009c52:	4bb5      	ldr	r3, [pc, #724]	; (8009f28 <GSM_Service+0xa90>)
 8009c54:	0010      	movs	r0, r2
 8009c56:	0019      	movs	r1, r3
 8009c58:	230a      	movs	r3, #10
 8009c5a:	001a      	movs	r2, r3
 8009c5c:	f00e fb66 	bl	801832c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.password);
 8009c60:	4ab2      	ldr	r2, [pc, #712]	; (8009f2c <GSM_Service+0xa94>)
 8009c62:	4baa      	ldr	r3, [pc, #680]	; (8009f0c <GSM_Service+0xa74>)
 8009c64:	0011      	movs	r1, r2
 8009c66:	0018      	movs	r0, r3
 8009c68:	f00e fb92 	bl	8018390 <strcat>
				//sendData(tempGPRS,UART0);
				GPRS_SendData(tempGPRS);
 8009c6c:	4ba7      	ldr	r3, [pc, #668]	; (8009f0c <GSM_Service+0xa74>)
 8009c6e:	0018      	movs	r0, r3
 8009c70:	f002 fa1e 	bl	800c0b0 <GPRS_SendData>
			}
			if (gsmInfo.relayFlag == 1){
 8009c74:	4aa8      	ldr	r2, [pc, #672]	; (8009f18 <GSM_Service+0xa80>)
 8009c76:	238c      	movs	r3, #140	; 0x8c
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	58d3      	ldr	r3, [r2, r3]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d11f      	bne.n	8009cc0 <GSM_Service+0x828>
				gsmInfo.relayFlag = 0;
 8009c80:	4aa5      	ldr	r2, [pc, #660]	; (8009f18 <GSM_Service+0xa80>)
 8009c82:	238c      	movs	r3, #140	; 0x8c
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	2100      	movs	r1, #0
 8009c88:	50d1      	str	r1, [r2, r3]
				strcpy(tempGPRS,",");
 8009c8a:	4aa0      	ldr	r2, [pc, #640]	; (8009f0c <GSM_Service+0xa74>)
 8009c8c:	4ba3      	ldr	r3, [pc, #652]	; (8009f1c <GSM_Service+0xa84>)
 8009c8e:	0010      	movs	r0, r2
 8009c90:	0019      	movs	r1, r3
 8009c92:	2302      	movs	r3, #2
 8009c94:	001a      	movs	r2, r3
 8009c96:	f00e fb49 	bl	801832c <memcpy>
				strcat(tempGPRS,"relay:");
 8009c9a:	4b9c      	ldr	r3, [pc, #624]	; (8009f0c <GSM_Service+0xa74>)
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	f7ff fa3d 	bl	800911c <strlen>
 8009ca2:	0003      	movs	r3, r0
 8009ca4:	001a      	movs	r2, r3
 8009ca6:	4b99      	ldr	r3, [pc, #612]	; (8009f0c <GSM_Service+0xa74>)
 8009ca8:	18d2      	adds	r2, r2, r3
 8009caa:	4ba1      	ldr	r3, [pc, #644]	; (8009f30 <GSM_Service+0xa98>)
 8009cac:	0010      	movs	r0, r2
 8009cae:	0019      	movs	r1, r3
 8009cb0:	2307      	movs	r3, #7
 8009cb2:	001a      	movs	r2, r3
 8009cb4:	f00e fb3a 	bl	801832c <memcpy>
				//if (RELAY == 1) strcat(tempGPRS,"ON");
				//else strcat(tempGPRS,"OFF");
				GPRS_SendData(tempGPRS);
 8009cb8:	4b94      	ldr	r3, [pc, #592]	; (8009f0c <GSM_Service+0xa74>)
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f002 f9f8 	bl	800c0b0 <GPRS_SendData>
			}
			if (gsmInfo.vthFlag == 1){
 8009cc0:	4a95      	ldr	r2, [pc, #596]	; (8009f18 <GSM_Service+0xa80>)
 8009cc2:	238a      	movs	r3, #138	; 0x8a
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	58d3      	ldr	r3, [r2, r3]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d125      	bne.n	8009d18 <GSM_Service+0x880>
				gsmInfo.vthFlag = 0;
 8009ccc:	4a92      	ldr	r2, [pc, #584]	; (8009f18 <GSM_Service+0xa80>)
 8009cce:	238a      	movs	r3, #138	; 0x8a
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	50d1      	str	r1, [r2, r3]
				strcpy(tempGPRS,",");
 8009cd6:	4a8d      	ldr	r2, [pc, #564]	; (8009f0c <GSM_Service+0xa74>)
 8009cd8:	4b90      	ldr	r3, [pc, #576]	; (8009f1c <GSM_Service+0xa84>)
 8009cda:	0010      	movs	r0, r2
 8009cdc:	0019      	movs	r1, r3
 8009cde:	2302      	movs	r3, #2
 8009ce0:	001a      	movs	r2, r3
 8009ce2:	f00e fb23 	bl	801832c <memcpy>
				strcat(tempGPRS,"vth:");
 8009ce6:	4b89      	ldr	r3, [pc, #548]	; (8009f0c <GSM_Service+0xa74>)
 8009ce8:	0018      	movs	r0, r3
 8009cea:	f7ff fa17 	bl	800911c <strlen>
 8009cee:	0003      	movs	r3, r0
 8009cf0:	001a      	movs	r2, r3
 8009cf2:	4b86      	ldr	r3, [pc, #536]	; (8009f0c <GSM_Service+0xa74>)
 8009cf4:	18d2      	adds	r2, r2, r3
 8009cf6:	4b8f      	ldr	r3, [pc, #572]	; (8009f34 <GSM_Service+0xa9c>)
 8009cf8:	0010      	movs	r0, r2
 8009cfa:	0019      	movs	r1, r3
 8009cfc:	2305      	movs	r3, #5
 8009cfe:	001a      	movs	r2, r3
 8009d00:	f00e fb14 	bl	801832c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.vth);
 8009d04:	4a8c      	ldr	r2, [pc, #560]	; (8009f38 <GSM_Service+0xaa0>)
 8009d06:	4b81      	ldr	r3, [pc, #516]	; (8009f0c <GSM_Service+0xa74>)
 8009d08:	0011      	movs	r1, r2
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f00e fb40 	bl	8018390 <strcat>
				GPRS_SendData(tempGPRS);
 8009d10:	4b7e      	ldr	r3, [pc, #504]	; (8009f0c <GSM_Service+0xa74>)
 8009d12:	0018      	movs	r0, r3
 8009d14:	f002 f9cc 	bl	800c0b0 <GPRS_SendData>
			}
			if (gsmInfo.ccidFlag == 1){
 8009d18:	4a7f      	ldr	r2, [pc, #508]	; (8009f18 <GSM_Service+0xa80>)
 8009d1a:	238e      	movs	r3, #142	; 0x8e
 8009d1c:	005b      	lsls	r3, r3, #1
 8009d1e:	58d3      	ldr	r3, [r2, r3]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d125      	bne.n	8009d70 <GSM_Service+0x8d8>
				gsmInfo.ccidFlag = 0;
 8009d24:	4a7c      	ldr	r2, [pc, #496]	; (8009f18 <GSM_Service+0xa80>)
 8009d26:	238e      	movs	r3, #142	; 0x8e
 8009d28:	005b      	lsls	r3, r3, #1
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	50d1      	str	r1, [r2, r3]
				strcpy(tempGPRS,",");
 8009d2e:	4a77      	ldr	r2, [pc, #476]	; (8009f0c <GSM_Service+0xa74>)
 8009d30:	4b7a      	ldr	r3, [pc, #488]	; (8009f1c <GSM_Service+0xa84>)
 8009d32:	0010      	movs	r0, r2
 8009d34:	0019      	movs	r1, r3
 8009d36:	2302      	movs	r3, #2
 8009d38:	001a      	movs	r2, r3
 8009d3a:	f00e faf7 	bl	801832c <memcpy>
				strcat(tempGPRS,"ccid:");
 8009d3e:	4b73      	ldr	r3, [pc, #460]	; (8009f0c <GSM_Service+0xa74>)
 8009d40:	0018      	movs	r0, r3
 8009d42:	f7ff f9eb 	bl	800911c <strlen>
 8009d46:	0003      	movs	r3, r0
 8009d48:	001a      	movs	r2, r3
 8009d4a:	4b70      	ldr	r3, [pc, #448]	; (8009f0c <GSM_Service+0xa74>)
 8009d4c:	18d2      	adds	r2, r2, r3
 8009d4e:	4b7b      	ldr	r3, [pc, #492]	; (8009f3c <GSM_Service+0xaa4>)
 8009d50:	0010      	movs	r0, r2
 8009d52:	0019      	movs	r1, r3
 8009d54:	2306      	movs	r3, #6
 8009d56:	001a      	movs	r2, r3
 8009d58:	f00e fae8 	bl	801832c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.ccid);
 8009d5c:	4a78      	ldr	r2, [pc, #480]	; (8009f40 <GSM_Service+0xaa8>)
 8009d5e:	4b6b      	ldr	r3, [pc, #428]	; (8009f0c <GSM_Service+0xa74>)
 8009d60:	0011      	movs	r1, r2
 8009d62:	0018      	movs	r0, r3
 8009d64:	f00e fb14 	bl	8018390 <strcat>
				GPRS_SendData(tempGPRS);
 8009d68:	4b68      	ldr	r3, [pc, #416]	; (8009f0c <GSM_Service+0xa74>)
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f002 f9a0 	bl	800c0b0 <GPRS_SendData>
			}
			strcat(tempGPRS,"\32\r");
 8009d70:	4b66      	ldr	r3, [pc, #408]	; (8009f0c <GSM_Service+0xa74>)
 8009d72:	0018      	movs	r0, r3
 8009d74:	f7ff f9d2 	bl	800911c <strlen>
 8009d78:	0003      	movs	r3, r0
 8009d7a:	001a      	movs	r2, r3
 8009d7c:	4b63      	ldr	r3, [pc, #396]	; (8009f0c <GSM_Service+0xa74>)
 8009d7e:	18d2      	adds	r2, r2, r3
 8009d80:	4b70      	ldr	r3, [pc, #448]	; (8009f44 <GSM_Service+0xaac>)
 8009d82:	0010      	movs	r0, r2
 8009d84:	0019      	movs	r1, r3
 8009d86:	2303      	movs	r3, #3
 8009d88:	001a      	movs	r2, r3
 8009d8a:	f00e facf 	bl	801832c <memcpy>
			//GSM_Send(tempGPRS);
			GSM_Send(tempGPRS);
 8009d8e:	4b5f      	ldr	r3, [pc, #380]	; (8009f0c <GSM_Service+0xa74>)
 8009d90:	0018      	movs	r0, r3
 8009d92:	f000 fbb3 	bl	800a4fc <GSM_Send>
 8009d96:	e04a      	b.n	8009e2e <GSM_Service+0x996>
		}
		else{
			//connect("test2");
			//connect1("test2",temp);
			//gsmInfo.MQTT_Data = 1;
			Debug_Send("Send MQTT data\n");
 8009d98:	4b6b      	ldr	r3, [pc, #428]	; (8009f48 <GSM_Service+0xab0>)
 8009d9a:	0018      	movs	r0, r3
 8009d9c:	f000 fc00 	bl	800a5a0 <Debug_Send>

			switch(mqttState){
 8009da0:	4b6a      	ldr	r3, [pc, #424]	; (8009f4c <GSM_Service+0xab4>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b05      	cmp	r3, #5
 8009da6:	d83b      	bhi.n	8009e20 <GSM_Service+0x988>
 8009da8:	009a      	lsls	r2, r3, #2
 8009daa:	4b69      	ldr	r3, [pc, #420]	; (8009f50 <GSM_Service+0xab8>)
 8009dac:	18d3      	adds	r3, r2, r3
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	469f      	mov	pc, r3
			case Connect:
				Debug_Send("Send connect-\r\n");
 8009db2:	4b68      	ldr	r3, [pc, #416]	; (8009f54 <GSM_Service+0xabc>)
 8009db4:	0018      	movs	r0, r3
 8009db6:	f000 fbf3 	bl	800a5a0 <Debug_Send>
				MQTT_ConnectF();
 8009dba:	f000 fd79 	bl	800a8b0 <MQTT_ConnectF>
				mqttCounter = 0;
 8009dbe:	4b66      	ldr	r3, [pc, #408]	; (8009f58 <GSM_Service+0xac0>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	601a      	str	r2, [r3, #0]
				//mqttState++;
				break;
 8009dc4:	e02c      	b.n	8009e20 <GSM_Service+0x988>
			case Subscribe:
				Debug_Send("Send subscribe-\r\n");
 8009dc6:	4b65      	ldr	r3, [pc, #404]	; (8009f5c <GSM_Service+0xac4>)
 8009dc8:	0018      	movs	r0, r3
 8009dca:	f000 fbe9 	bl	800a5a0 <Debug_Send>
				MQTT_SuscribeF();
 8009dce:	f000 fdb7 	bl	800a940 <MQTT_SuscribeF>
				break;
 8009dd2:	e025      	b.n	8009e20 <GSM_Service+0x988>
			case Publish:

				//MQTT_Publish_F();
				//GSM_Send_Bin(tempGPRS, mqttInfo.length);

				strcpy(msg,"GSM:");
 8009dd4:	4a62      	ldr	r2, [pc, #392]	; (8009f60 <GSM_Service+0xac8>)
 8009dd6:	4b63      	ldr	r3, [pc, #396]	; (8009f64 <GSM_Service+0xacc>)
 8009dd8:	0010      	movs	r0, r2
 8009dda:	0019      	movs	r1, r3
 8009ddc:	2305      	movs	r3, #5
 8009dde:	001a      	movs	r2, r3
 8009de0:	f00e faa4 	bl	801832c <memcpy>
				myLongStr(mCounter,tempCount,10,10);
 8009de4:	4b60      	ldr	r3, [pc, #384]	; (8009f68 <GSM_Service+0xad0>)
 8009de6:	6818      	ldr	r0, [r3, #0]
 8009de8:	4960      	ldr	r1, [pc, #384]	; (8009f6c <GSM_Service+0xad4>)
 8009dea:	230a      	movs	r3, #10
 8009dec:	220a      	movs	r2, #10
 8009dee:	f003 f9a5 	bl	800d13c <myLongStr>
				strcat(msg,tempCount);
 8009df2:	4a5e      	ldr	r2, [pc, #376]	; (8009f6c <GSM_Service+0xad4>)
 8009df4:	4b5a      	ldr	r3, [pc, #360]	; (8009f60 <GSM_Service+0xac8>)
 8009df6:	0011      	movs	r1, r2
 8009df8:	0018      	movs	r0, r3
 8009dfa:	f00e fac9 	bl	8018390 <strcat>
				MQTT_Publish_F(msg);
 8009dfe:	4b58      	ldr	r3, [pc, #352]	; (8009f60 <GSM_Service+0xac8>)
 8009e00:	0018      	movs	r0, r3
 8009e02:	f000 fdd7 	bl	800a9b4 <MQTT_Publish_F>
				mCounter++;
 8009e06:	4b58      	ldr	r3, [pc, #352]	; (8009f68 <GSM_Service+0xad0>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	4b56      	ldr	r3, [pc, #344]	; (8009f68 <GSM_Service+0xad0>)
 8009e0e:	601a      	str	r2, [r3, #0]
				//MQTT_Publish_F("test");
				break;
 8009e10:	e006      	b.n	8009e20 <GSM_Service+0x988>
			case Unsubscribe:


				break;
			case Ping:
				Debug_Send("Send ping-\r\n");
 8009e12:	4b57      	ldr	r3, [pc, #348]	; (8009f70 <GSM_Service+0xad8>)
 8009e14:	0018      	movs	r0, r3
 8009e16:	f000 fbc3 	bl	800a5a0 <Debug_Send>
				MQTT_Ping_F();
 8009e1a:	f000 fe59 	bl	800aad0 <MQTT_Ping_F>

				break;
 8009e1e:	46c0      	nop			; (mov r8, r8)
			}

			Debug_Send("done\n");
 8009e20:	4b54      	ldr	r3, [pc, #336]	; (8009f74 <GSM_Service+0xadc>)
 8009e22:	0018      	movs	r0, r3
 8009e24:	f000 fbbc 	bl	800a5a0 <Debug_Send>
			//GSM_Send("MQTT\r\n");
			mqttSend = 1;
 8009e28:	4b53      	ldr	r3, [pc, #332]	; (8009f78 <GSM_Service+0xae0>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]
		}

		//GSM_Send("\032\r");
		gsmState = 0;
 8009e2e:	4b53      	ldr	r3, [pc, #332]	; (8009f7c <GSM_Service+0xae4>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
		GSM_Send("\"\r\n");
		gsmState = GPRS_Send;*/
		//sprintf (tempGPRS,"GPRS Write:GSM state-%d\r\n", gsmState);
		//sendData(tempGPRS,UART0);
		//sendData("-gprs\r\n",UART0);
		break;
 8009e34:	e26b      	b.n	800a30e <GSM_Service+0xe76>
	case AT:
		Debug_Send("Get MQTT data\n");
 8009e36:	4b52      	ldr	r3, [pc, #328]	; (8009f80 <GSM_Service+0xae8>)
 8009e38:	0018      	movs	r0, r3
 8009e3a:	f000 fbb1 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT\r");
 8009e3e:	4b51      	ldr	r3, [pc, #324]	; (8009f84 <GSM_Service+0xaec>)
 8009e40:	0018      	movs	r0, r3
 8009e42:	f000 fb5b 	bl	800a4fc <GSM_Send>
		gsmState = 0;
 8009e46:	4b4d      	ldr	r3, [pc, #308]	; (8009f7c <GSM_Service+0xae4>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	701a      	strb	r2, [r3, #0]
		break;
 8009e4c:	e25f      	b.n	800a30e <GSM_Service+0xe76>
	case GPRS_Send:
		//GSM_Send("AT+MIPPUSH=1\r\n");	//listen for incoming connections
		if (gsmInfo.socket == 1){
 8009e4e:	4b32      	ldr	r3, [pc, #200]	; (8009f18 <GSM_Service+0xa80>)
 8009e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d110      	bne.n	8009e78 <GSM_Service+0x9e0>
			Debug_Send("Push GPRS data!\n");
 8009e56:	4b4c      	ldr	r3, [pc, #304]	; (8009f88 <GSM_Service+0xaf0>)
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f000 fba1 	bl	800a5a0 <Debug_Send>
			GSM_Send("AT+QISEND\r");
 8009e5e:	4b4b      	ldr	r3, [pc, #300]	; (8009f8c <GSM_Service+0xaf4>)
 8009e60:	0018      	movs	r0, r3
 8009e62:	f000 fb4b 	bl	800a4fc <GSM_Send>

			/*GSM_Send(tempGPRS);
			GSM_Send("\032\r");*/
			gsmInfo.dataFlag = 0;
 8009e66:	4a2c      	ldr	r2, [pc, #176]	; (8009f18 <GSM_Service+0xa80>)
 8009e68:	23aa      	movs	r3, #170	; 0xaa
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	50d1      	str	r1, [r2, r3]
			gsmState = 0;
 8009e70:	4b42      	ldr	r3, [pc, #264]	; (8009f7c <GSM_Service+0xae4>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	701a      	strb	r2, [r3, #0]
		}
		else{
			gsmState = GPRS_Off;
		}
		break;
 8009e76:	e24a      	b.n	800a30e <GSM_Service+0xe76>
			gsmState = GPRS_Off;
 8009e78:	4b40      	ldr	r3, [pc, #256]	; (8009f7c <GSM_Service+0xae4>)
 8009e7a:	2214      	movs	r2, #20
 8009e7c:	701a      	strb	r2, [r3, #0]
		break;
 8009e7e:	e246      	b.n	800a30e <GSM_Service+0xe76>
	case GPRS_SendMode:
		GSM_Send("AT+ATO\r");
 8009e80:	4b43      	ldr	r3, [pc, #268]	; (8009f90 <GSM_Service+0xaf8>)
 8009e82:	0018      	movs	r0, r3
 8009e84:	f000 fb3a 	bl	800a4fc <GSM_Send>

		break;
 8009e88:	e241      	b.n	800a30e <GSM_Service+0xe76>
	case GPRS_SendModeTRans:
		GSM_Send("test\r");
 8009e8a:	4b42      	ldr	r3, [pc, #264]	; (8009f94 <GSM_Service+0xafc>)
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	f000 fb35 	bl	800a4fc <GSM_Send>

		break;
 8009e92:	e23c      	b.n	800a30e <GSM_Service+0xe76>
	case AutoBaud:
		Debug_Send("Auto baud\r\n");
 8009e94:	4b40      	ldr	r3, [pc, #256]	; (8009f98 <GSM_Service+0xb00>)
 8009e96:	0018      	movs	r0, r3
 8009e98:	f000 fb82 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT\r\n");
 8009e9c:	4b3f      	ldr	r3, [pc, #252]	; (8009f9c <GSM_Service+0xb04>)
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f000 fb2c 	bl	800a4fc <GSM_Send>

		break;
 8009ea4:	e233      	b.n	800a30e <GSM_Service+0xe76>
			gsmState = Search;
			GSM_ON = 0;
		}
		break;*/
	case FTP_User:
		Debug_Send("Set FTP user\r\n");
 8009ea6:	4b3e      	ldr	r3, [pc, #248]	; (8009fa0 <GSM_Service+0xb08>)
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f000 fb79 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT+QFTPUSER=\"testuser\"\r\n");
 8009eae:	4b3d      	ldr	r3, [pc, #244]	; (8009fa4 <GSM_Service+0xb0c>)
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	f000 fb23 	bl	800a4fc <GSM_Send>
		gsmState = FTP_Password;
 8009eb6:	4b31      	ldr	r3, [pc, #196]	; (8009f7c <GSM_Service+0xae4>)
 8009eb8:	2223      	movs	r2, #35	; 0x23
 8009eba:	701a      	strb	r2, [r3, #0]

		break;
 8009ebc:	e227      	b.n	800a30e <GSM_Service+0xe76>
	case FTP_Password:
		Debug_Send("Set FTP password\r\n");
 8009ebe:	4b3a      	ldr	r3, [pc, #232]	; (8009fa8 <GSM_Service+0xb10>)
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	f000 fb6d 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT+QFTPPASS=\"admin\"\r\n");
 8009ec6:	4b39      	ldr	r3, [pc, #228]	; (8009fac <GSM_Service+0xb14>)
 8009ec8:	0018      	movs	r0, r3
 8009eca:	f000 fb17 	bl	800a4fc <GSM_Send>
		gsmState = FTP_Config;
 8009ece:	4b2b      	ldr	r3, [pc, #172]	; (8009f7c <GSM_Service+0xae4>)
 8009ed0:	222a      	movs	r2, #42	; 0x2a
 8009ed2:	701a      	strb	r2, [r3, #0]
		//sendSMS("0720631005", "test SIM IMC");
		gsmState = 0;
 8009ed4:	4b29      	ldr	r3, [pc, #164]	; (8009f7c <GSM_Service+0xae4>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	701a      	strb	r2, [r3, #0]
		//gsmState = SMS_Send;
		break;
 8009eda:	e218      	b.n	800a30e <GSM_Service+0xe76>
	case FTP_Config:
		Debug_Send("FTP config\r\n");
 8009edc:	4b34      	ldr	r3, [pc, #208]	; (8009fb0 <GSM_Service+0xb18>)
 8009ede:	0018      	movs	r0, r3
 8009ee0:	f000 fb5e 	bl	800a5a0 <Debug_Send>
		//GSM_Send("AT+QFTPCFG=4,\"/COM/\"\r\n");
		GSM_Send("AT+QFTPCFG=4,\"/RAM/\"\r\n");
 8009ee4:	4b33      	ldr	r3, [pc, #204]	; (8009fb4 <GSM_Service+0xb1c>)
 8009ee6:	0018      	movs	r0, r3
 8009ee8:	f000 fb08 	bl	800a4fc <GSM_Send>
		//GSM_Send("AT+QFTPCFG=3\r\n");
		gsmState = FTP_Config1;
 8009eec:	4b23      	ldr	r3, [pc, #140]	; (8009f7c <GSM_Service+0xae4>)
 8009eee:	222b      	movs	r2, #43	; 0x2b
 8009ef0:	701a      	strb	r2, [r3, #0]
		break;
 8009ef2:	e20c      	b.n	800a30e <GSM_Service+0xe76>
	case FTP_Config1:
		Debug_Send("FTP config1\r\n");
 8009ef4:	4b30      	ldr	r3, [pc, #192]	; (8009fb8 <GSM_Service+0xb20>)
 8009ef6:	0018      	movs	r0, r3
 8009ef8:	f000 fb52 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT+QFTPCFG=1,1\r\n");
 8009efc:	4b2f      	ldr	r3, [pc, #188]	; (8009fbc <GSM_Service+0xb24>)
 8009efe:	0018      	movs	r0, r3
 8009f00:	f000 fafc 	bl	800a4fc <GSM_Send>
		gsmState = FTP_Download;
 8009f04:	4b1d      	ldr	r3, [pc, #116]	; (8009f7c <GSM_Service+0xae4>)
 8009f06:	2227      	movs	r2, #39	; 0x27
 8009f08:	701a      	strb	r2, [r3, #0]
		break;
 8009f0a:	e200      	b.n	800a30e <GSM_Service+0xe76>
 8009f0c:	2000184c 	.word	0x2000184c
 8009f10:	08018ff0 	.word	0x08018ff0
 8009f14:	20001a3c 	.word	0x20001a3c
 8009f18:	200019a8 	.word	0x200019a8
 8009f1c:	08018db4 	.word	0x08018db4
 8009f20:	08018ff8 	.word	0x08018ff8
 8009f24:	20001a5a 	.word	0x20001a5a
 8009f28:	08019000 	.word	0x08019000
 8009f2c:	20001a6e 	.word	0x20001a6e
 8009f30:	0801900c 	.word	0x0801900c
 8009f34:	08019014 	.word	0x08019014
 8009f38:	20001aac 	.word	0x20001aac
 8009f3c:	0801901c 	.word	0x0801901c
 8009f40:	200019f4 	.word	0x200019f4
 8009f44:	08018f04 	.word	0x08018f04
 8009f48:	08019024 	.word	0x08019024
 8009f4c:	200000d0 	.word	0x200000d0
 8009f50:	0801a0bc 	.word	0x0801a0bc
 8009f54:	08019034 	.word	0x08019034
 8009f58:	20001874 	.word	0x20001874
 8009f5c:	08019044 	.word	0x08019044
 8009f60:	20001694 	.word	0x20001694
 8009f64:	08019058 	.word	0x08019058
 8009f68:	2000187c 	.word	0x2000187c
 8009f6c:	200019a0 	.word	0x200019a0
 8009f70:	08019060 	.word	0x08019060
 8009f74:	08019070 	.word	0x08019070
 8009f78:	200002f8 	.word	0x200002f8
 8009f7c:	200000c0 	.word	0x200000c0
 8009f80:	08019078 	.word	0x08019078
 8009f84:	08019088 	.word	0x08019088
 8009f88:	0801908c 	.word	0x0801908c
 8009f8c:	080190a0 	.word	0x080190a0
 8009f90:	080190ac 	.word	0x080190ac
 8009f94:	080190b4 	.word	0x080190b4
 8009f98:	080190bc 	.word	0x080190bc
 8009f9c:	080190c8 	.word	0x080190c8
 8009fa0:	080190d0 	.word	0x080190d0
 8009fa4:	080190e0 	.word	0x080190e0
 8009fa8:	080190fc 	.word	0x080190fc
 8009fac:	08019110 	.word	0x08019110
 8009fb0:	08019128 	.word	0x08019128
 8009fb4:	08019138 	.word	0x08019138
 8009fb8:	08019150 	.word	0x08019150
 8009fbc:	08019160 	.word	0x08019160
	case FTP_Open:
		Debug_Send("FTP open\r\n");
 8009fc0:	4bb0      	ldr	r3, [pc, #704]	; (800a284 <GSM_Service+0xdec>)
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	f000 faec 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT+QFTPOPEN=\"196.40.108.169\",\"21\"\r\n");
 8009fc8:	4baf      	ldr	r3, [pc, #700]	; (800a288 <GSM_Service+0xdf0>)
 8009fca:	0018      	movs	r0, r3
 8009fcc:	f000 fa96 	bl	800a4fc <GSM_Send>
		gsmInfo.FTP_Open = 1;
 8009fd0:	4aae      	ldr	r2, [pc, #696]	; (800a28c <GSM_Service+0xdf4>)
 8009fd2:	23b2      	movs	r3, #178	; 0xb2
 8009fd4:	005b      	lsls	r3, r3, #1
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	50d1      	str	r1, [r2, r3]
		gsmState = FTP_Status;
 8009fda:	4bad      	ldr	r3, [pc, #692]	; (800a290 <GSM_Service+0xdf8>)
 8009fdc:	2225      	movs	r2, #37	; 0x25
 8009fde:	701a      	strb	r2, [r3, #0]
		//gsmState = 0;
		break;
 8009fe0:	e195      	b.n	800a30e <GSM_Service+0xe76>
	case FTP_Status:
		Debug_Send("FTP status\r\n");
 8009fe2:	4bac      	ldr	r3, [pc, #688]	; (800a294 <GSM_Service+0xdfc>)
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f000 fadb 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT+QFTPSTAT\r\n");
 8009fea:	4bab      	ldr	r3, [pc, #684]	; (800a298 <GSM_Service+0xe00>)
 8009fec:	0018      	movs	r0, r3
 8009fee:	f000 fa85 	bl	800a4fc <GSM_Send>
		gsmState = 0;
 8009ff2:	4ba7      	ldr	r3, [pc, #668]	; (800a290 <GSM_Service+0xdf8>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
		break;
 8009ff8:	e189      	b.n	800a30e <GSM_Service+0xe76>
	case FTP_Path:
		Debug_Send("FTP path\r\n");
 8009ffa:	4ba8      	ldr	r3, [pc, #672]	; (800a29c <GSM_Service+0xe04>)
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f000 facf 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT+QFTPPATH=\"/srv/ftp/\"\r\n");
 800a002:	4ba7      	ldr	r3, [pc, #668]	; (800a2a0 <GSM_Service+0xe08>)
 800a004:	0018      	movs	r0, r3
 800a006:	f000 fa79 	bl	800a4fc <GSM_Send>
		gsmState = FTP_List;
 800a00a:	4ba1      	ldr	r3, [pc, #644]	; (800a290 <GSM_Service+0xdf8>)
 800a00c:	2229      	movs	r2, #41	; 0x29
 800a00e:	701a      	strb	r2, [r3, #0]
		gsmState = FTP_Config;
 800a010:	4b9f      	ldr	r3, [pc, #636]	; (800a290 <GSM_Service+0xdf8>)
 800a012:	222a      	movs	r2, #42	; 0x2a
 800a014:	701a      	strb	r2, [r3, #0]
		break;
 800a016:	e17a      	b.n	800a30e <GSM_Service+0xe76>
	case FTP_List:
		Debug_Send("FTP list\r\n");
 800a018:	4ba2      	ldr	r3, [pc, #648]	; (800a2a4 <GSM_Service+0xe0c>)
 800a01a:	0018      	movs	r0, r3
 800a01c:	f000 fac0 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT+QFTPNLST\r\n");
 800a020:	4ba1      	ldr	r3, [pc, #644]	; (800a2a8 <GSM_Service+0xe10>)
 800a022:	0018      	movs	r0, r3
 800a024:	f000 fa6a 	bl	800a4fc <GSM_Send>
		gsmState = 0;
 800a028:	4b99      	ldr	r3, [pc, #612]	; (800a290 <GSM_Service+0xdf8>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	701a      	strb	r2, [r3, #0]
		break;
 800a02e:	e16e      	b.n	800a30e <GSM_Service+0xe76>
	case FTP_Size:
		Debug_Send("FTP size\r\n");
 800a030:	4b9e      	ldr	r3, [pc, #632]	; (800a2ac <GSM_Service+0xe14>)
 800a032:	0018      	movs	r0, r3
 800a034:	f000 fab4 	bl	800a5a0 <Debug_Send>
		//GSM_Send("AT+QFTPSIZE=\"/srv/ftp/Test.csv\"\r\n");
		//GSM_Send("AT+QFTPSIZE=\"/srv/ftp/GSM_Test.bin\"\r\n");
		GSM_Send("AT+QFTPSIZE=\"/srv/ftp/M0_Test.hex\"\r\n");
 800a038:	4b9d      	ldr	r3, [pc, #628]	; (800a2b0 <GSM_Service+0xe18>)
 800a03a:	0018      	movs	r0, r3
 800a03c:	f000 fa5e 	bl	800a4fc <GSM_Send>
		gsmState = 0;
 800a040:	4b93      	ldr	r3, [pc, #588]	; (800a290 <GSM_Service+0xdf8>)
 800a042:	2200      	movs	r2, #0
 800a044:	701a      	strb	r2, [r3, #0]
		break;
 800a046:	e162      	b.n	800a30e <GSM_Service+0xe76>
	case FTP_Download:
		Debug_Send("Get FTP\r\n");
 800a048:	4b9a      	ldr	r3, [pc, #616]	; (800a2b4 <GSM_Service+0xe1c>)
 800a04a:	0018      	movs	r0, r3
 800a04c:	f000 faa8 	bl	800a5a0 <Debug_Send>
		//GSM_Send("AT+QFTPGET=\"Test.csv\"\r\n");
		//GSM_Send("AT+QFTPGET=\"/srv/ftp/GSM_Test.bin\",50000\r\n");
		GSM_Send("AT+QFTPGET=\"GSM_Test2.bin\"\r\n");
 800a050:	4b99      	ldr	r3, [pc, #612]	; (800a2b8 <GSM_Service+0xe20>)
 800a052:	0018      	movs	r0, r3
 800a054:	f000 fa52 	bl	800a4fc <GSM_Send>
		//GSM_Send("AT+QFTPGET=\"M0_Test.hex\"\r\n");
		//GSM_Send("AT+QFTPGET=\"M0_Test.bin\"\r\n");
		//GSM_Send("AT+QFTPGET=\"M0_Test-B611.hex\"\r\n");
		//GSM_Send("AT+QFTPGET=\"hexTest.hex\"\r\n");
		gsmState = FS_Storage;
 800a058:	4b8d      	ldr	r3, [pc, #564]	; (800a290 <GSM_Service+0xdf8>)
 800a05a:	222d      	movs	r2, #45	; 0x2d
 800a05c:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 800a05e:	4b8c      	ldr	r3, [pc, #560]	; (800a290 <GSM_Service+0xdf8>)
 800a060:	2200      	movs	r2, #0
 800a062:	701a      	strb	r2, [r3, #0]
		break;
 800a064:	e153      	b.n	800a30e <GSM_Service+0xe76>
	case FTP_Close:
		Debug_Send("FTP close\r\n");
 800a066:	4b95      	ldr	r3, [pc, #596]	; (800a2bc <GSM_Service+0xe24>)
 800a068:	0018      	movs	r0, r3
 800a06a:	f000 fa99 	bl	800a5a0 <Debug_Send>
		GSM_Send("AT+QFTPCLOSE\r\n");
 800a06e:	4b94      	ldr	r3, [pc, #592]	; (800a2c0 <GSM_Service+0xe28>)
 800a070:	0018      	movs	r0, r3
 800a072:	f000 fa43 	bl	800a4fc <GSM_Send>
		//Debug_Send("Jump to bootloader\r\n");
		gsmState = 0;
 800a076:	4b86      	ldr	r3, [pc, #536]	; (800a290 <GSM_Service+0xdf8>)
 800a078:	2200      	movs	r2, #0
 800a07a:	701a      	strb	r2, [r3, #0]
		//NVIC_SystemReset();
		/*uint32_t addr = *(uint32_t*) (resetAddr + 4);	//get PC location
		resetFunc = (fPointer) addr;
		__set_MSP(*(uint32_t*) resetAddr);
		resetFunc();*/
		break;
 800a07c:	e147      	b.n	800a30e <GSM_Service+0xe76>
	case FS_Storage:
		gsmInfo.FTP_Data = 0;
 800a07e:	4a83      	ldr	r2, [pc, #524]	; (800a28c <GSM_Service+0xdf4>)
 800a080:	23b8      	movs	r3, #184	; 0xb8
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	2100      	movs	r1, #0
 800a086:	50d1      	str	r1, [r2, r3]
		GSM_Send("AT+QFLDS=\"RAM\"\r\n");
 800a088:	4b8e      	ldr	r3, [pc, #568]	; (800a2c4 <GSM_Service+0xe2c>)
 800a08a:	0018      	movs	r0, r3
 800a08c:	f000 fa36 	bl	800a4fc <GSM_Send>
		gsmState = 0;
 800a090:	4b7f      	ldr	r3, [pc, #508]	; (800a290 <GSM_Service+0xdf8>)
 800a092:	2200      	movs	r2, #0
 800a094:	701a      	strb	r2, [r3, #0]
		break;
 800a096:	e13a      	b.n	800a30e <GSM_Service+0xe76>
	case FS_SList:

		GSM_Send("AT+QFLST=\"RAM:*\"\r\n");
 800a098:	4b8b      	ldr	r3, [pc, #556]	; (800a2c8 <GSM_Service+0xe30>)
 800a09a:	0018      	movs	r0, r3
 800a09c:	f000 fa2e 	bl	800a4fc <GSM_Send>
		gsmState = 0;
 800a0a0:	4b7b      	ldr	r3, [pc, #492]	; (800a290 <GSM_Service+0xdf8>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
		break;
 800a0a6:	e132      	b.n	800a30e <GSM_Service+0xe76>
	case FS_Download:
		//GSM_Send("AT+QFDWL=\"RAM:Test.csv\"\r\n");
		GSM_Send("AT+QFDWL=\"RAM:M0_Test.bin\"\r\n");
 800a0a8:	4b88      	ldr	r3, [pc, #544]	; (800a2cc <GSM_Service+0xe34>)
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	f000 fa26 	bl	800a4fc <GSM_Send>
		gsmState = 0;
 800a0b0:	4b77      	ldr	r3, [pc, #476]	; (800a290 <GSM_Service+0xdf8>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	701a      	strb	r2, [r3, #0]
		break;
 800a0b6:	e12a      	b.n	800a30e <GSM_Service+0xe76>
	case FS_Open:
		//GSM_Send("AT+QFOPEN=\"RAM:Test.csv\",0\r\n");
		//GSM_Send("AT+QFOPEN=\"RAM:M0_Test.hex\",0\r\n");
		//GSM_Send("AT+QFOPEN=\"M0_Test.bin\"\r\n");
		GSM_Send("AT+QFOPEN=\"GSM_Test2.bin\"\r\n");
 800a0b8:	4b85      	ldr	r3, [pc, #532]	; (800a2d0 <GSM_Service+0xe38>)
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	f000 fa1e 	bl	800a4fc <GSM_Send>
		//GSM_Send("AT+QFOPEN=\"RAM:M0_Test-B611.hex\",0\r\n");
		//GSM_Send("AT+QFOPEN=\"hexTest.hex\",0\r\n");
		gsmState = 0;
 800a0c0:	4b73      	ldr	r3, [pc, #460]	; (800a290 <GSM_Service+0xdf8>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	701a      	strb	r2, [r3, #0]
		break;
 800a0c6:	e122      	b.n	800a30e <GSM_Service+0xe76>
	case FS_Seek:
		Debug_Send("Seek file\r\n");
 800a0c8:	4b82      	ldr	r3, [pc, #520]	; (800a2d4 <GSM_Service+0xe3c>)
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	f000 fa68 	bl	800a5a0 <Debug_Send>
		//Debug_Send("AT+QFSEEK=");
		//Debug_Send(FID);
		//Debug_Send(",0,0\r\n");
		strcpy(temp,"AT+QFSEEK=");
 800a0d0:	003b      	movs	r3, r7
 800a0d2:	4a81      	ldr	r2, [pc, #516]	; (800a2d8 <GSM_Service+0xe40>)
 800a0d4:	ca03      	ldmia	r2!, {r0, r1}
 800a0d6:	c303      	stmia	r3!, {r0, r1}
 800a0d8:	8811      	ldrh	r1, [r2, #0]
 800a0da:	8019      	strh	r1, [r3, #0]
 800a0dc:	7892      	ldrb	r2, [r2, #2]
 800a0de:	709a      	strb	r2, [r3, #2]
		strcat(temp,FID);
 800a0e0:	4a7e      	ldr	r2, [pc, #504]	; (800a2dc <GSM_Service+0xe44>)
 800a0e2:	003b      	movs	r3, r7
 800a0e4:	0011      	movs	r1, r2
 800a0e6:	0018      	movs	r0, r3
 800a0e8:	f00e f952 	bl	8018390 <strcat>
		strcat(temp,",");
 800a0ec:	003b      	movs	r3, r7
 800a0ee:	0018      	movs	r0, r3
 800a0f0:	f7ff f814 	bl	800911c <strlen>
 800a0f4:	0003      	movs	r3, r0
 800a0f6:	001a      	movs	r2, r3
 800a0f8:	003b      	movs	r3, r7
 800a0fa:	189a      	adds	r2, r3, r2
 800a0fc:	4b78      	ldr	r3, [pc, #480]	; (800a2e0 <GSM_Service+0xe48>)
 800a0fe:	0010      	movs	r0, r2
 800a100:	0019      	movs	r1, r3
 800a102:	2302      	movs	r3, #2
 800a104:	001a      	movs	r2, r3
 800a106:	f00e f911 	bl	801832c <memcpy>
		myLongStr((long)ftpseek,temp1,11,10);
 800a10a:	4b76      	ldr	r3, [pc, #472]	; (800a2e4 <GSM_Service+0xe4c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	0018      	movs	r0, r3
 800a110:	4975      	ldr	r1, [pc, #468]	; (800a2e8 <GSM_Service+0xe50>)
 800a112:	230a      	movs	r3, #10
 800a114:	220b      	movs	r2, #11
 800a116:	f003 f811 	bl	800d13c <myLongStr>
		strcat(temp,temp1);
 800a11a:	4a73      	ldr	r2, [pc, #460]	; (800a2e8 <GSM_Service+0xe50>)
 800a11c:	003b      	movs	r3, r7
 800a11e:	0011      	movs	r1, r2
 800a120:	0018      	movs	r0, r3
 800a122:	f00e f935 	bl	8018390 <strcat>
		//strcat(temp,",0\r\n");

		strcat(temp,"\r\n");
 800a126:	003b      	movs	r3, r7
 800a128:	0018      	movs	r0, r3
 800a12a:	f7fe fff7 	bl	800911c <strlen>
 800a12e:	0003      	movs	r3, r0
 800a130:	001a      	movs	r2, r3
 800a132:	003b      	movs	r3, r7
 800a134:	189a      	adds	r2, r3, r2
 800a136:	4b6d      	ldr	r3, [pc, #436]	; (800a2ec <GSM_Service+0xe54>)
 800a138:	0010      	movs	r0, r2
 800a13a:	0019      	movs	r1, r3
 800a13c:	2303      	movs	r3, #3
 800a13e:	001a      	movs	r2, r3
 800a140:	f00e f8f4 	bl	801832c <memcpy>
		//sprintf(temp, "AT+QFSEEK=%s,%i\r\n",FID,(int)ftpseek);
		//Debug_Send(temp);
		GSM_Send(temp);
 800a144:	003b      	movs	r3, r7
 800a146:	0018      	movs	r0, r3
 800a148:	f000 f9d8 	bl	800a4fc <GSM_Send>
		/*GSM_Send("AT+QFSEEK=");
		GSM_Send(FID);
		GSM_Send(",0\r\n");*/
		gsmInfo.FS_SeekFlag = 1;
 800a14c:	4a4f      	ldr	r2, [pc, #316]	; (800a28c <GSM_Service+0xdf4>)
 800a14e:	23b4      	movs	r3, #180	; 0xb4
 800a150:	005b      	lsls	r3, r3, #1
 800a152:	2101      	movs	r1, #1
 800a154:	50d1      	str	r1, [r2, r3]
		gsmState = 0;
 800a156:	4b4e      	ldr	r3, [pc, #312]	; (800a290 <GSM_Service+0xdf8>)
 800a158:	2200      	movs	r2, #0
 800a15a:	701a      	strb	r2, [r3, #0]
		break;
 800a15c:	e0d7      	b.n	800a30e <GSM_Service+0xe76>
	case FS_Read:
		//Debug_Send("Read file\r\n");
		//GSM_Send("AT+QFREAD=");
		//GSM_Send(FID);
		strcpy(temp,"AT+QFREAD=");
 800a15e:	003b      	movs	r3, r7
 800a160:	4a63      	ldr	r2, [pc, #396]	; (800a2f0 <GSM_Service+0xe58>)
 800a162:	ca03      	ldmia	r2!, {r0, r1}
 800a164:	c303      	stmia	r3!, {r0, r1}
 800a166:	8811      	ldrh	r1, [r2, #0]
 800a168:	8019      	strh	r1, [r3, #0]
 800a16a:	7892      	ldrb	r2, [r2, #2]
 800a16c:	709a      	strb	r2, [r3, #2]
		strcat(temp,FID);
 800a16e:	4a5b      	ldr	r2, [pc, #364]	; (800a2dc <GSM_Service+0xe44>)
 800a170:	003b      	movs	r3, r7
 800a172:	0011      	movs	r1, r2
 800a174:	0018      	movs	r0, r3
 800a176:	f00e f90b 	bl	8018390 <strcat>
		strcat(temp,",");
 800a17a:	003b      	movs	r3, r7
 800a17c:	0018      	movs	r0, r3
 800a17e:	f7fe ffcd 	bl	800911c <strlen>
 800a182:	0003      	movs	r3, r0
 800a184:	001a      	movs	r2, r3
 800a186:	003b      	movs	r3, r7
 800a188:	189a      	adds	r2, r3, r2
 800a18a:	4b55      	ldr	r3, [pc, #340]	; (800a2e0 <GSM_Service+0xe48>)
 800a18c:	0010      	movs	r0, r2
 800a18e:	0019      	movs	r1, r3
 800a190:	2302      	movs	r3, #2
 800a192:	001a      	movs	r2, r3
 800a194:	f00e f8ca 	bl	801832c <memcpy>
		myLongStr(ftpPacket,temp1,10,10);
 800a198:	4b56      	ldr	r3, [pc, #344]	; (800a2f4 <GSM_Service+0xe5c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	0018      	movs	r0, r3
 800a19e:	4952      	ldr	r1, [pc, #328]	; (800a2e8 <GSM_Service+0xe50>)
 800a1a0:	230a      	movs	r3, #10
 800a1a2:	220a      	movs	r2, #10
 800a1a4:	f002 ffca 	bl	800d13c <myLongStr>
		strcat(temp,temp1);
 800a1a8:	4a4f      	ldr	r2, [pc, #316]	; (800a2e8 <GSM_Service+0xe50>)
 800a1aa:	003b      	movs	r3, r7
 800a1ac:	0011      	movs	r1, r2
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f00e f8ee 	bl	8018390 <strcat>
		strcat(temp,"\r\n");
 800a1b4:	003b      	movs	r3, r7
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f7fe ffb0 	bl	800911c <strlen>
 800a1bc:	0003      	movs	r3, r0
 800a1be:	001a      	movs	r2, r3
 800a1c0:	003b      	movs	r3, r7
 800a1c2:	189a      	adds	r2, r3, r2
 800a1c4:	4b49      	ldr	r3, [pc, #292]	; (800a2ec <GSM_Service+0xe54>)
 800a1c6:	0010      	movs	r0, r2
 800a1c8:	0019      	movs	r1, r3
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	001a      	movs	r2, r3
 800a1ce:	f00e f8ad 	bl	801832c <memcpy>
		//Debug_Send(temp);
		GSM_Send(temp);
 800a1d2:	003b      	movs	r3, r7
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f000 f991 	bl	800a4fc <GSM_Send>


		ftpRead = 1;
 800a1da:	4b47      	ldr	r3, [pc, #284]	; (800a2f8 <GSM_Service+0xe60>)
 800a1dc:	2201      	movs	r2, #1
 800a1de:	701a      	strb	r2, [r3, #0]
		//if ((filesize - ftpseek) < 60)
		//if ((filesize - ftpseek) < 60)
		gsmState = 0;
 800a1e0:	4b2b      	ldr	r3, [pc, #172]	; (800a290 <GSM_Service+0xdf8>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	701a      	strb	r2, [r3, #0]
		gsmState = FS_Seek;
 800a1e6:	4b2a      	ldr	r3, [pc, #168]	; (800a290 <GSM_Service+0xdf8>)
 800a1e8:	2230      	movs	r2, #48	; 0x30
 800a1ea:	701a      	strb	r2, [r3, #0]
		//ftpseek += ftpinc;
		ftpseek += ftpPacket;
 800a1ec:	4b3d      	ldr	r3, [pc, #244]	; (800a2e4 <GSM_Service+0xe4c>)
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	4b40      	ldr	r3, [pc, #256]	; (800a2f4 <GSM_Service+0xe5c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	18d2      	adds	r2, r2, r3
 800a1f6:	4b3b      	ldr	r3, [pc, #236]	; (800a2e4 <GSM_Service+0xe4c>)
 800a1f8:	601a      	str	r2, [r3, #0]
		/*if (ftpseek > filesize) {
			ftpseek -= ftpinc;
			ftpPacket = filesize - ftpseek;
			gsmState = 0;
		}*/
		break;
 800a1fa:	e088      	b.n	800a30e <GSM_Service+0xe76>
	case FS_Close:
		Debug_Send("Close file\r\n");
 800a1fc:	4b3f      	ldr	r3, [pc, #252]	; (800a2fc <GSM_Service+0xe64>)
 800a1fe:	0018      	movs	r0, r3
 800a200:	f000 f9ce 	bl	800a5a0 <Debug_Send>
		strcpy(temp,"AT+QFCLOSE=");
 800a204:	003b      	movs	r3, r7
 800a206:	4a3e      	ldr	r2, [pc, #248]	; (800a300 <GSM_Service+0xe68>)
 800a208:	ca13      	ldmia	r2!, {r0, r1, r4}
 800a20a:	c313      	stmia	r3!, {r0, r1, r4}
		strcat(temp,FID);
 800a20c:	4a33      	ldr	r2, [pc, #204]	; (800a2dc <GSM_Service+0xe44>)
 800a20e:	003b      	movs	r3, r7
 800a210:	0011      	movs	r1, r2
 800a212:	0018      	movs	r0, r3
 800a214:	f00e f8bc 	bl	8018390 <strcat>
		strcat(temp,"\r\n");
 800a218:	003b      	movs	r3, r7
 800a21a:	0018      	movs	r0, r3
 800a21c:	f7fe ff7e 	bl	800911c <strlen>
 800a220:	0003      	movs	r3, r0
 800a222:	001a      	movs	r2, r3
 800a224:	003b      	movs	r3, r7
 800a226:	189a      	adds	r2, r3, r2
 800a228:	4b30      	ldr	r3, [pc, #192]	; (800a2ec <GSM_Service+0xe54>)
 800a22a:	0010      	movs	r0, r2
 800a22c:	0019      	movs	r1, r3
 800a22e:	2303      	movs	r3, #3
 800a230:	001a      	movs	r2, r3
 800a232:	f00e f87b 	bl	801832c <memcpy>
		Debug_Send(temp);
 800a236:	003b      	movs	r3, r7
 800a238:	0018      	movs	r0, r3
 800a23a:	f000 f9b1 	bl	800a5a0 <Debug_Send>
		GSM_Send(temp);
 800a23e:	003b      	movs	r3, r7
 800a240:	0018      	movs	r0, r3
 800a242:	f000 f95b 	bl	800a4fc <GSM_Send>
		ftpseek = 0;
 800a246:	4b27      	ldr	r3, [pc, #156]	; (800a2e4 <GSM_Service+0xe4c>)
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]
		/*flashRead(1000, temp, gsmInfo.FTP_Size);	//Service , Message , Max , Min , Average , Count , frequency ,Timed
		Debug_Send("Flash:");
		Debug_Send(temp);
		Debug_Send("\r\n");*/
		//flashWrite(900,"U",1);
		gsmInfo.FTP_Size = 0;
 800a24c:	4a0f      	ldr	r2, [pc, #60]	; (800a28c <GSM_Service+0xdf4>)
 800a24e:	23bc      	movs	r3, #188	; 0xbc
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	2100      	movs	r1, #0
 800a254:	50d1      	str	r1, [r2, r3]

		gsmState = FlashWrite;
 800a256:	4b0e      	ldr	r3, [pc, #56]	; (800a290 <GSM_Service+0xdf8>)
 800a258:	2234      	movs	r2, #52	; 0x34
 800a25a:	701a      	strb	r2, [r3, #0]
		break;
 800a25c:	e057      	b.n	800a30e <GSM_Service+0xe76>
	case FlashWrite:
		Debug_Send("Set flash flag\r\n");
 800a25e:	4b29      	ldr	r3, [pc, #164]	; (800a304 <GSM_Service+0xe6c>)
 800a260:	0018      	movs	r0, r3
 800a262:	f000 f99d 	bl	800a5a0 <Debug_Send>
		//flashWrite(900,"UL",2);
		Debug_Send("Done\r\n");
 800a266:	4b28      	ldr	r3, [pc, #160]	; (800a308 <GSM_Service+0xe70>)
 800a268:	0018      	movs	r0, r3
 800a26a:	f000 f999 	bl	800a5a0 <Debug_Send>
		gsmState = FTP_Close;
 800a26e:	4b08      	ldr	r3, [pc, #32]	; (800a290 <GSM_Service+0xdf8>)
 800a270:	2226      	movs	r2, #38	; 0x26
 800a272:	701a      	strb	r2, [r3, #0]
		break;
 800a274:	e04b      	b.n	800a30e <GSM_Service+0xe76>
	case MQTT_Connect:
		//connect("test1");
		gsmState = 0;
 800a276:	4b06      	ldr	r3, [pc, #24]	; (800a290 <GSM_Service+0xdf8>)
 800a278:	2200      	movs	r2, #0
 800a27a:	701a      	strb	r2, [r3, #0]
		break;
 800a27c:	e047      	b.n	800a30e <GSM_Service+0xe76>


		break;
	default:

		break;
 800a27e:	46c0      	nop			; (mov r8, r8)
 800a280:	e045      	b.n	800a30e <GSM_Service+0xe76>
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	08019174 	.word	0x08019174
 800a288:	08019180 	.word	0x08019180
 800a28c:	200019a8 	.word	0x200019a8
 800a290:	200000c0 	.word	0x200000c0
 800a294:	080191a4 	.word	0x080191a4
 800a298:	080191b4 	.word	0x080191b4
 800a29c:	080191c4 	.word	0x080191c4
 800a2a0:	080191d0 	.word	0x080191d0
 800a2a4:	080191ec 	.word	0x080191ec
 800a2a8:	080191f8 	.word	0x080191f8
 800a2ac:	08019208 	.word	0x08019208
 800a2b0:	08019214 	.word	0x08019214
 800a2b4:	0801923c 	.word	0x0801923c
 800a2b8:	08019248 	.word	0x08019248
 800a2bc:	08019268 	.word	0x08019268
 800a2c0:	08019274 	.word	0x08019274
 800a2c4:	08019284 	.word	0x08019284
 800a2c8:	08019298 	.word	0x08019298
 800a2cc:	080192ac 	.word	0x080192ac
 800a2d0:	080192cc 	.word	0x080192cc
 800a2d4:	080192e8 	.word	0x080192e8
 800a2d8:	080192f4 	.word	0x080192f4
 800a2dc:	20001c0c 	.word	0x20001c0c
 800a2e0:	08018db4 	.word	0x08018db4
 800a2e4:	200000c4 	.word	0x200000c4
 800a2e8:	20002224 	.word	0x20002224
 800a2ec:	08018da4 	.word	0x08018da4
 800a2f0:	08019300 	.word	0x08019300
 800a2f4:	200000cc 	.word	0x200000cc
 800a2f8:	20001c04 	.word	0x20001c04
 800a2fc:	0801930c 	.word	0x0801930c
 800a300:	0801931c 	.word	0x0801931c
 800a304:	08019328 	.word	0x08019328
 800a308:	0801933c 	.word	0x0801933c
		break;
 800a30c:	46c0      	nop			; (mov r8, r8)
	//if (smsFlags.prompt == 1){

	//	smsFlags.prompt = 0;
	//}
	//if ((gsmTimer < 20)&&(smsFlags.signal == 1)){			//restarts cycle
		if (gsmInfo.socket == 0)gsmTimer++;
 800a30e:	4b6d      	ldr	r3, [pc, #436]	; (800a4c4 <GSM_Service+0x102c>)
 800a310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a312:	2b00      	cmp	r3, #0
 800a314:	d104      	bne.n	800a320 <GSM_Service+0xe88>
 800a316:	4b6c      	ldr	r3, [pc, #432]	; (800a4c8 <GSM_Service+0x1030>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	1c5a      	adds	r2, r3, #1
 800a31c:	4b6a      	ldr	r3, [pc, #424]	; (800a4c8 <GSM_Service+0x1030>)
 800a31e:	601a      	str	r2, [r3, #0]
		//strcat(count,"\r\n");
		//sprintf(count, "%d", gsmTimer);
		//sprintf(count, "%d", gsmState);
		//sendData(count,UART0);
		//sendData("\r\n",UART0);
		if (mqttFlag.subscribe == 1){
 800a320:	4b6a      	ldr	r3, [pc, #424]	; (800a4cc <GSM_Service+0x1034>)
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d104      	bne.n	800a332 <GSM_Service+0xe9a>
			mqttInfo.timer++;
 800a328:	4b69      	ldr	r3, [pc, #420]	; (800a4d0 <GSM_Service+0x1038>)
 800a32a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a32c:	1c5a      	adds	r2, r3, #1
 800a32e:	4b68      	ldr	r3, [pc, #416]	; (800a4d0 <GSM_Service+0x1038>)
 800a330:	661a      	str	r2, [r3, #96]	; 0x60
		}
		if ((mqttInfo.timer > 30)&&(gsmInfo.MQTT_Data == 0)){
 800a332:	4b67      	ldr	r3, [pc, #412]	; (800a4d0 <GSM_Service+0x1038>)
 800a334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a336:	2b1e      	cmp	r3, #30
 800a338:	dd12      	ble.n	800a360 <GSM_Service+0xec8>
 800a33a:	4a62      	ldr	r2, [pc, #392]	; (800a4c4 <GSM_Service+0x102c>)
 800a33c:	23c0      	movs	r3, #192	; 0xc0
 800a33e:	005b      	lsls	r3, r3, #1
 800a340:	58d3      	ldr	r3, [r2, r3]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10c      	bne.n	800a360 <GSM_Service+0xec8>

			mqttInfo.timer = 0;
 800a346:	4b62      	ldr	r3, [pc, #392]	; (800a4d0 <GSM_Service+0x1038>)
 800a348:	2200      	movs	r2, #0
 800a34a:	661a      	str	r2, [r3, #96]	; 0x60
			//mqttState = Publish;
			//gsmState = GPRS_Send;
			//MQTT_Publish_F("tes1");

			mqttState = Publish;
 800a34c:	4b61      	ldr	r3, [pc, #388]	; (800a4d4 <GSM_Service+0x103c>)
 800a34e:	2203      	movs	r2, #3
 800a350:	701a      	strb	r2, [r3, #0]
			//mqttState = Ping;
			gsmState = GPRS_Send;
 800a352:	4b61      	ldr	r3, [pc, #388]	; (800a4d8 <GSM_Service+0x1040>)
 800a354:	221c      	movs	r2, #28
 800a356:	701a      	strb	r2, [r3, #0]
			Debug_Send("MQTT Recy1\n");
 800a358:	4b60      	ldr	r3, [pc, #384]	; (800a4dc <GSM_Service+0x1044>)
 800a35a:	0018      	movs	r0, r3
 800a35c:	f000 f920 	bl	800a5a0 <Debug_Send>
		}
		//if ((gsmTimer >= 20)&&(smsFlags.config == 1)&&(gsmInfo.socket == 0)){
		if ((gsmTimer >= 20)&&(smsFlags.config == 1)&&(gsmInfo.FTP_Open == 0)){
 800a360:	4b59      	ldr	r3, [pc, #356]	; (800a4c8 <GSM_Service+0x1030>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b13      	cmp	r3, #19
 800a366:	dd19      	ble.n	800a39c <GSM_Service+0xf04>
 800a368:	4b5d      	ldr	r3, [pc, #372]	; (800a4e0 <GSM_Service+0x1048>)
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d115      	bne.n	800a39c <GSM_Service+0xf04>
 800a370:	4a54      	ldr	r2, [pc, #336]	; (800a4c4 <GSM_Service+0x102c>)
 800a372:	23b2      	movs	r3, #178	; 0xb2
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	58d3      	ldr	r3, [r2, r3]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10f      	bne.n	800a39c <GSM_Service+0xf04>
			gsmTimer = 0;
 800a37c:	4b52      	ldr	r3, [pc, #328]	; (800a4c8 <GSM_Service+0x1030>)
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]
			Debug_Send("Recy\n");
 800a382:	4b58      	ldr	r3, [pc, #352]	; (800a4e4 <GSM_Service+0x104c>)
 800a384:	0018      	movs	r0, r3
 800a386:	f000 f90b 	bl	800a5a0 <Debug_Send>
			//gsmState = SMS_Check;
			gsmState = USSD;		//test
 800a38a:	4b53      	ldr	r3, [pc, #332]	; (800a4d8 <GSM_Service+0x1040>)
 800a38c:	220c      	movs	r2, #12
 800a38e:	701a      	strb	r2, [r3, #0]
			gsmState = SMS_Check;
 800a390:	4b51      	ldr	r3, [pc, #324]	; (800a4d8 <GSM_Service+0x1040>)
 800a392:	220e      	movs	r2, #14
 800a394:	701a      	strb	r2, [r3, #0]
			gsmState = Signal;
 800a396:	4b50      	ldr	r3, [pc, #320]	; (800a4d8 <GSM_Service+0x1040>)
 800a398:	2218      	movs	r2, #24
 800a39a:	701a      	strb	r2, [r3, #0]

		}
		if ((smsFlags.gprsActive == 0)&&(smsFlags.signal == 1))gsmInfo.GPRStimer++;
 800a39c:	4b50      	ldr	r3, [pc, #320]	; (800a4e0 <GSM_Service+0x1048>)
 800a39e:	69db      	ldr	r3, [r3, #28]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10c      	bne.n	800a3be <GSM_Service+0xf26>
 800a3a4:	4b4e      	ldr	r3, [pc, #312]	; (800a4e0 <GSM_Service+0x1048>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d108      	bne.n	800a3be <GSM_Service+0xf26>
 800a3ac:	4a45      	ldr	r2, [pc, #276]	; (800a4c4 <GSM_Service+0x102c>)
 800a3ae:	239e      	movs	r3, #158	; 0x9e
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	58d3      	ldr	r3, [r2, r3]
 800a3b4:	1c59      	adds	r1, r3, #1
 800a3b6:	4a43      	ldr	r2, [pc, #268]	; (800a4c4 <GSM_Service+0x102c>)
 800a3b8:	239e      	movs	r3, #158	; 0x9e
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	50d1      	str	r1, [r2, r3]
		//sprintf(temp, "gprs %i state %i v:%i c %i T:%i\r\n",gsmInfo.GPRStimer, gsmState, smsFlags.send, smsFlags.signal, gsmTimeout);

		if ((gsmInfo.GPRStimer >= gsmInfo.GPRSinterval)&&(gsmState == 0)&&(smsFlags.send == 0)&&(smsFlags.signal == 1)&&(gsmInfo.FTP_Open == 0)){
 800a3be:	4a41      	ldr	r2, [pc, #260]	; (800a4c4 <GSM_Service+0x102c>)
 800a3c0:	239e      	movs	r3, #158	; 0x9e
 800a3c2:	005b      	lsls	r3, r3, #1
 800a3c4:	58d2      	ldr	r2, [r2, r3]
 800a3c6:	493f      	ldr	r1, [pc, #252]	; (800a4c4 <GSM_Service+0x102c>)
 800a3c8:	23a0      	movs	r3, #160	; 0xa0
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	58cb      	ldr	r3, [r1, r3]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	db2d      	blt.n	800a42e <GSM_Service+0xf96>
 800a3d2:	4b41      	ldr	r3, [pc, #260]	; (800a4d8 <GSM_Service+0x1040>)
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d129      	bne.n	800a42e <GSM_Service+0xf96>
 800a3da:	4b41      	ldr	r3, [pc, #260]	; (800a4e0 <GSM_Service+0x1048>)
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d125      	bne.n	800a42e <GSM_Service+0xf96>
 800a3e2:	4b3f      	ldr	r3, [pc, #252]	; (800a4e0 <GSM_Service+0x1048>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d121      	bne.n	800a42e <GSM_Service+0xf96>
 800a3ea:	4a36      	ldr	r2, [pc, #216]	; (800a4c4 <GSM_Service+0x102c>)
 800a3ec:	23b2      	movs	r3, #178	; 0xb2
 800a3ee:	005b      	lsls	r3, r3, #1
 800a3f0:	58d3      	ldr	r3, [r2, r3]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d11b      	bne.n	800a42e <GSM_Service+0xf96>
			gsmInfo.GPRStimer = 0;
 800a3f6:	4a33      	ldr	r2, [pc, #204]	; (800a4c4 <GSM_Service+0x102c>)
 800a3f8:	239e      	movs	r3, #158	; 0x9e
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	50d1      	str	r1, [r2, r3]
			if (smsFlags.gprsActive == 0) gsmState = GPRS_On;
 800a400:	4b37      	ldr	r3, [pc, #220]	; (800a4e0 <GSM_Service+0x1048>)
 800a402:	69db      	ldr	r3, [r3, #28]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d103      	bne.n	800a410 <GSM_Service+0xf78>
 800a408:	4b33      	ldr	r3, [pc, #204]	; (800a4d8 <GSM_Service+0x1040>)
 800a40a:	2212      	movs	r2, #18
 800a40c:	701a      	strb	r2, [r3, #0]
 800a40e:	e00e      	b.n	800a42e <GSM_Service+0xf96>
			else if (smsFlags.gprsActive == 1)gsmState = SocketOpen;
 800a410:	4b33      	ldr	r3, [pc, #204]	; (800a4e0 <GSM_Service+0x1048>)
 800a412:	69db      	ldr	r3, [r3, #28]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d103      	bne.n	800a420 <GSM_Service+0xf88>
 800a418:	4b2f      	ldr	r3, [pc, #188]	; (800a4d8 <GSM_Service+0x1040>)
 800a41a:	2215      	movs	r2, #21
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	e006      	b.n	800a42e <GSM_Service+0xf96>
			else if (smsFlags.gprsPending == 1) gsmState = GPRS_Off;		//switch off gsm if previous
 800a420:	4b2f      	ldr	r3, [pc, #188]	; (800a4e0 <GSM_Service+0x1048>)
 800a422:	699b      	ldr	r3, [r3, #24]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d102      	bne.n	800a42e <GSM_Service+0xf96>
 800a428:	4b2b      	ldr	r3, [pc, #172]	; (800a4d8 <GSM_Service+0x1040>)
 800a42a:	2214      	movs	r2, #20
 800a42c:	701a      	strb	r2, [r3, #0]
		}

		//if (gsmState == 0) gsmInfo.Timeout++;
		if(gsmInfo.Timeout >= 60){
 800a42e:	4a25      	ldr	r2, [pc, #148]	; (800a4c4 <GSM_Service+0x102c>)
 800a430:	23b0      	movs	r3, #176	; 0xb0
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	58d3      	ldr	r3, [r2, r3]
 800a436:	2b3b      	cmp	r3, #59	; 0x3b
 800a438:	dd09      	ble.n	800a44e <GSM_Service+0xfb6>
			gsmInfo.Timeout = 0;
 800a43a:	4a22      	ldr	r2, [pc, #136]	; (800a4c4 <GSM_Service+0x102c>)
 800a43c:	23b0      	movs	r3, #176	; 0xb0
 800a43e:	005b      	lsls	r3, r3, #1
 800a440:	2100      	movs	r1, #0
 800a442:	50d1      	str	r1, [r2, r3]
			GSM_Init();
 800a444:	f7fe ff1a 	bl	800927c <GSM_Init>
			gsmState = GSM_Off;
 800a448:	4b23      	ldr	r3, [pc, #140]	; (800a4d8 <GSM_Service+0x1040>)
 800a44a:	2201      	movs	r2, #1
 800a44c:	701a      	strb	r2, [r3, #0]

		}
		//smsTimer++;
		if ((smsTimer >= 3600)&&(gsmState == 0)&&(gsmInfo.socket == 0)&&(smsFlags.signal == 1)){
 800a44e:	4b26      	ldr	r3, [pc, #152]	; (800a4e8 <GSM_Service+0x1050>)
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	23e1      	movs	r3, #225	; 0xe1
 800a454:	011b      	lsls	r3, r3, #4
 800a456:	429a      	cmp	r2, r3
 800a458:	db19      	blt.n	800a48e <GSM_Service+0xff6>
 800a45a:	4b1f      	ldr	r3, [pc, #124]	; (800a4d8 <GSM_Service+0x1040>)
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d115      	bne.n	800a48e <GSM_Service+0xff6>
 800a462:	4b18      	ldr	r3, [pc, #96]	; (800a4c4 <GSM_Service+0x102c>)
 800a464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a466:	2b00      	cmp	r3, #0
 800a468:	d111      	bne.n	800a48e <GSM_Service+0xff6>
 800a46a:	4b1d      	ldr	r3, [pc, #116]	; (800a4e0 <GSM_Service+0x1048>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d10d      	bne.n	800a48e <GSM_Service+0xff6>
			smsTimer = 0;
 800a472:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <GSM_Service+0x1050>)
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]
			strcpy(smsInfo.build,"test");
 800a478:	4b1c      	ldr	r3, [pc, #112]	; (800a4ec <GSM_Service+0x1054>)
 800a47a:	4a1d      	ldr	r2, [pc, #116]	; (800a4f0 <GSM_Service+0x1058>)
 800a47c:	6811      	ldr	r1, [r2, #0]
 800a47e:	6019      	str	r1, [r3, #0]
 800a480:	7912      	ldrb	r2, [r2, #4]
 800a482:	711a      	strb	r2, [r3, #4]
			BuildPower();
 800a484:	f001 fc9a 	bl	800bdbc <BuildPower>
			gsmState = SMS_Send;
 800a488:	4b13      	ldr	r3, [pc, #76]	; (800a4d8 <GSM_Service+0x1040>)
 800a48a:	220f      	movs	r2, #15
 800a48c:	701a      	strb	r2, [r3, #0]
		}
		if ((gsmInfo.GPRStimer >= 30) && (smsFlags.signal== 0)){
 800a48e:	4a0d      	ldr	r2, [pc, #52]	; (800a4c4 <GSM_Service+0x102c>)
 800a490:	239e      	movs	r3, #158	; 0x9e
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	58d3      	ldr	r3, [r2, r3]
 800a496:	2b1d      	cmp	r3, #29
 800a498:	dd06      	ble.n	800a4a8 <GSM_Service+0x1010>
 800a49a:	4b11      	ldr	r3, [pc, #68]	; (800a4e0 <GSM_Service+0x1048>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d102      	bne.n	800a4a8 <GSM_Service+0x1010>
			gsmTimeout =  10;
 800a4a2:	4b14      	ldr	r3, [pc, #80]	; (800a4f4 <GSM_Service+0x105c>)
 800a4a4:	220a      	movs	r2, #10
 800a4a6:	601a      	str	r2, [r3, #0]
		//restartTimer = 0;
		//gsmState = 30;
	//}
		//buildInfo();
	//}
		if (gsmSend == 1) gsmTimeout++;
 800a4a8:	4b13      	ldr	r3, [pc, #76]	; (800a4f8 <GSM_Service+0x1060>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d104      	bne.n	800a4ba <GSM_Service+0x1022>
 800a4b0:	4b10      	ldr	r3, [pc, #64]	; (800a4f4 <GSM_Service+0x105c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	1c5a      	adds	r2, r3, #1
 800a4b6:	4b0f      	ldr	r3, [pc, #60]	; (800a4f4 <GSM_Service+0x105c>)
 800a4b8:	601a      	str	r2, [r3, #0]
		//Debug_Send(temp);

}
 800a4ba:	46c0      	nop			; (mov r8, r8)
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	b047      	add	sp, #284	; 0x11c
 800a4c0:	bd90      	pop	{r4, r7, pc}
 800a4c2:	46c0      	nop			; (mov r8, r8)
 800a4c4:	200019a8 	.word	0x200019a8
 800a4c8:	20001878 	.word	0x20001878
 800a4cc:	20001998 	.word	0x20001998
 800a4d0:	20001620 	.word	0x20001620
 800a4d4:	200000d0 	.word	0x200000d0
 800a4d8:	200000c0 	.word	0x200000c0
 800a4dc:	08019344 	.word	0x08019344
 800a4e0:	200014c4 	.word	0x200014c4
 800a4e4:	08019350 	.word	0x08019350
 800a4e8:	20001c08 	.word	0x20001c08
 800a4ec:	200017a4 	.word	0x200017a4
 800a4f0:	08019358 	.word	0x08019358
 800a4f4:	200002f0 	.word	0x200002f0
 800a4f8:	200002f4 	.word	0x200002f4

0800a4fc <GSM_Send>:
	GSM_Send(",0\r\n");*/
	gsmInfo.FS_SeekFlag = 1;
	gsmState = 0;
}

void GSM_Send(char* data){
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
	int size;
	int timeout = 5;
 800a504:	2305      	movs	r3, #5
 800a506:	60fb      	str	r3, [r7, #12]
	size = strlen(data);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	0018      	movs	r0, r3
 800a50c:	f7fe fe06 	bl	800911c <strlen>
 800a510:	0003      	movs	r3, r0
 800a512:	60bb      	str	r3, [r7, #8]
	//HAL_UART_Transmit(&huart2, (uint8_t*)data, size, timeout);

	HAL_UART_Transmit_IT(&huart2, data, size);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	b29a      	uxth	r2, r3
 800a518:	6879      	ldr	r1, [r7, #4]
 800a51a:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <GSM_Send+0x48>)
 800a51c:	0018      	movs	r0, r3
 800a51e:	f007 f92d 	bl	801177c <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 50);
 800a522:	4909      	ldr	r1, [pc, #36]	; (800a548 <GSM_Send+0x4c>)
 800a524:	4b07      	ldr	r3, [pc, #28]	; (800a544 <GSM_Send+0x48>)
 800a526:	2232      	movs	r2, #50	; 0x32
 800a528:	0018      	movs	r0, r3
 800a52a:	f007 f9a7 	bl	801187c <HAL_UART_Receive_IT>
	gsmTimeout = 0;
 800a52e:	4b07      	ldr	r3, [pc, #28]	; (800a54c <GSM_Send+0x50>)
 800a530:	2200      	movs	r2, #0
 800a532:	601a      	str	r2, [r3, #0]
	gsmSend = 1;
 800a534:	4b06      	ldr	r3, [pc, #24]	; (800a550 <GSM_Send+0x54>)
 800a536:	2201      	movs	r2, #1
 800a538:	601a      	str	r2, [r3, #0]
}
 800a53a:	46c0      	nop			; (mov r8, r8)
 800a53c:	46bd      	mov	sp, r7
 800a53e:	b004      	add	sp, #16
 800a540:	bd80      	pop	{r7, pc}
 800a542:	46c0      	nop			; (mov r8, r8)
 800a544:	200025e4 	.word	0x200025e4
 800a548:	20001b34 	.word	0x20001b34
 800a54c:	200002f0 	.word	0x200002f0
 800a550:	200002f4 	.word	0x200002f4

0800a554 <GSM_Send_Bin>:

void GSM_Send_Bin(char* data, int size){
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
	//int size;
	int timeout = 5;
 800a55e:	2305      	movs	r3, #5
 800a560:	60fb      	str	r3, [r7, #12]
	//size = strlen(data);
	//HAL_UART_Transmit(&huart2, (uint8_t*)data, size, timeout);

	HAL_UART_Transmit_IT(&huart2, data, size);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	b29a      	uxth	r2, r3
 800a566:	6879      	ldr	r1, [r7, #4]
 800a568:	4b09      	ldr	r3, [pc, #36]	; (800a590 <GSM_Send_Bin+0x3c>)
 800a56a:	0018      	movs	r0, r3
 800a56c:	f007 f906 	bl	801177c <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 50);
 800a570:	4908      	ldr	r1, [pc, #32]	; (800a594 <GSM_Send_Bin+0x40>)
 800a572:	4b07      	ldr	r3, [pc, #28]	; (800a590 <GSM_Send_Bin+0x3c>)
 800a574:	2232      	movs	r2, #50	; 0x32
 800a576:	0018      	movs	r0, r3
 800a578:	f007 f980 	bl	801187c <HAL_UART_Receive_IT>
	gsmTimeout = 0;
 800a57c:	4b06      	ldr	r3, [pc, #24]	; (800a598 <GSM_Send_Bin+0x44>)
 800a57e:	2200      	movs	r2, #0
 800a580:	601a      	str	r2, [r3, #0]
	gsmSend = 1;
 800a582:	4b06      	ldr	r3, [pc, #24]	; (800a59c <GSM_Send_Bin+0x48>)
 800a584:	2201      	movs	r2, #1
 800a586:	601a      	str	r2, [r3, #0]
}
 800a588:	46c0      	nop			; (mov r8, r8)
 800a58a:	46bd      	mov	sp, r7
 800a58c:	b004      	add	sp, #16
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	200025e4 	.word	0x200025e4
 800a594:	20001b34 	.word	0x20001b34
 800a598:	200002f0 	.word	0x200002f0
 800a59c:	200002f4 	.word	0x200002f4

0800a5a0 <Debug_Send>:

void Debug_Send(char* data){
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
	int size;
	int timeout = 25;
 800a5a8:	2319      	movs	r3, #25
 800a5aa:	60fb      	str	r3, [r7, #12]
	size = strlen(data);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	f7fe fdb4 	bl	800911c <strlen>
 800a5b4:	0003      	movs	r3, r0
 800a5b6:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (uint8_t*)data, size, timeout);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	4803      	ldr	r0, [pc, #12]	; (800a5d0 <Debug_Send+0x30>)
 800a5c2:	f007 f831 	bl	8011628 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, data, size);
}
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	b004      	add	sp, #16
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	46c0      	nop			; (mov r8, r8)
 800a5d0:	2000255c 	.word	0x2000255c

0800a5d4 <recData>:
	  }
	huart1.Instance->TDR = (data & (uint8_t)0xFFU);

}

void recData(){
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800a5d8:	2380      	movs	r3, #128	; 0x80
 800a5da:	019b      	lsls	r3, r3, #6
 800a5dc:	4aa0      	ldr	r2, [pc, #640]	; (800a860 <recData+0x28c>)
 800a5de:	0019      	movs	r1, r3
 800a5e0:	0010      	movs	r0, r2
 800a5e2:	f003 fc40 	bl	800de66 <HAL_GPIO_TogglePin>
		gsmInfo.Prompt = 0;
		Debug_Send("got prompt2\r\n");
		if (gsmInfo.socket == 1) gsmState = GPRS_Write;
		else gsmState = SMS_Text;
	}*/
		if (recBuffPointerWrite != recBuffPointerRead){
 800a5e6:	4b9f      	ldr	r3, [pc, #636]	; (800a864 <recData+0x290>)
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	4b9f      	ldr	r3, [pc, #636]	; (800a868 <recData+0x294>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d100      	bne.n	800a5f4 <recData+0x20>
 800a5f2:	e132      	b.n	800a85a <recData+0x286>
			//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			gsmSend = 0;
 800a5f4:	4b9d      	ldr	r3, [pc, #628]	; (800a86c <recData+0x298>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	601a      	str	r2, [r3, #0]
			//if (recBuffDebug[recBuffPointerRead] != 0x0A){
				procBuff[procBuffpointer] = recBuffDebug[recBuffPointerRead];
 800a5fa:	4b9b      	ldr	r3, [pc, #620]	; (800a868 <recData+0x294>)
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	4b9c      	ldr	r3, [pc, #624]	; (800a870 <recData+0x29c>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	499c      	ldr	r1, [pc, #624]	; (800a874 <recData+0x2a0>)
 800a604:	5c89      	ldrb	r1, [r1, r2]
 800a606:	4a9c      	ldr	r2, [pc, #624]	; (800a878 <recData+0x2a4>)
 800a608:	54d1      	strb	r1, [r2, r3]
				//HAL_UART_Transmit(&huart1, procBuff[procBuffpointer], 1, 10);
				/*if (recBuff[recBuffPointerRead] != 0x0A)*/ //SendChar(procBuff[procBuffpointer]);
				recBuffPointerRead++;
 800a60a:	4b97      	ldr	r3, [pc, #604]	; (800a868 <recData+0x294>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	4b95      	ldr	r3, [pc, #596]	; (800a868 <recData+0x294>)
 800a612:	601a      	str	r2, [r3, #0]
				if (recBuffPointerRead > recBuffSize) recBuffPointerRead = 0;
 800a614:	4b94      	ldr	r3, [pc, #592]	; (800a868 <recData+0x294>)
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	2396      	movs	r3, #150	; 0x96
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	429a      	cmp	r2, r3
 800a61e:	dd02      	ble.n	800a626 <recData+0x52>
 800a620:	4b91      	ldr	r3, [pc, #580]	; (800a868 <recData+0x294>)
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]
				procBuffpointer++;
 800a626:	4b92      	ldr	r3, [pc, #584]	; (800a870 <recData+0x29c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	4b90      	ldr	r3, [pc, #576]	; (800a870 <recData+0x29c>)
 800a62e:	601a      	str	r2, [r3, #0]
				if (procBuffpointer > procBuffSize) procBuffpointer = 0;
 800a630:	4b8f      	ldr	r3, [pc, #572]	; (800a870 <recData+0x29c>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b64      	cmp	r3, #100	; 0x64
 800a636:	dd02      	ble.n	800a63e <recData+0x6a>
 800a638:	4b8d      	ldr	r3, [pc, #564]	; (800a870 <recData+0x29c>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
			//}

			//if (procBuff[procBuffpointer - 1] == '>'){
			if (procBuff[procBuffpointer - 1] == 62){
 800a63e:	4b8c      	ldr	r3, [pc, #560]	; (800a870 <recData+0x29c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3b01      	subs	r3, #1
 800a644:	4a8c      	ldr	r2, [pc, #560]	; (800a878 <recData+0x2a4>)
 800a646:	5cd3      	ldrb	r3, [r2, r3]
 800a648:	2b3e      	cmp	r3, #62	; 0x3e
 800a64a:	d10a      	bne.n	800a662 <recData+0x8e>
			//if (procBuff[procBuffpointer] == '>'){
				//Debug_Send("got prompt\r\n");
				if (gsmInfo.socket == 1) gsmState = GPRS_Write;
 800a64c:	4b8b      	ldr	r3, [pc, #556]	; (800a87c <recData+0x2a8>)
 800a64e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a650:	2b01      	cmp	r3, #1
 800a652:	d103      	bne.n	800a65c <recData+0x88>
 800a654:	4b8a      	ldr	r3, [pc, #552]	; (800a880 <recData+0x2ac>)
 800a656:	221b      	movs	r2, #27
 800a658:	701a      	strb	r2, [r3, #0]
 800a65a:	e002      	b.n	800a662 <recData+0x8e>
				else gsmState = SMS_Text;
 800a65c:	4b88      	ldr	r3, [pc, #544]	; (800a880 <recData+0x2ac>)
 800a65e:	2210      	movs	r2, #16
 800a660:	701a      	strb	r2, [r3, #0]
				//Debug_Send("conn\r\n");
				//gsmInfo.MQTT_Data = 1;
				//MQTTBuffpointer = 0;

			}
			if (procBuff[procBuffpointer - 1] == 0x90){
 800a662:	4b83      	ldr	r3, [pc, #524]	; (800a870 <recData+0x29c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3b01      	subs	r3, #1
 800a668:	4a83      	ldr	r2, [pc, #524]	; (800a878 <recData+0x2a4>)
 800a66a:	5cd3      	ldrb	r3, [r2, r3]
 800a66c:	2b90      	cmp	r3, #144	; 0x90
 800a66e:	d116      	bne.n	800a69e <recData+0xca>
				Debug_Send("subscribed!!!!\r\n");
 800a670:	4b84      	ldr	r3, [pc, #528]	; (800a884 <recData+0x2b0>)
 800a672:	0018      	movs	r0, r3
 800a674:	f7ff ff94 	bl	800a5a0 <Debug_Send>
				MQTTBuffpointer = 0;
 800a678:	4b83      	ldr	r3, [pc, #524]	; (800a888 <recData+0x2b4>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
				gsmInfo.MQTT_Data = 1;
 800a67e:	4a7f      	ldr	r2, [pc, #508]	; (800a87c <recData+0x2a8>)
 800a680:	23c0      	movs	r3, #192	; 0xc0
 800a682:	005b      	lsls	r3, r3, #1
 800a684:	2101      	movs	r1, #1
 800a686:	50d1      	str	r1, [r2, r3]
				gsmInfo.MQTT_Subscribe = 1;
 800a688:	4a7c      	ldr	r2, [pc, #496]	; (800a87c <recData+0x2a8>)
 800a68a:	23c4      	movs	r3, #196	; 0xc4
 800a68c:	005b      	lsls	r3, r3, #1
 800a68e:	2101      	movs	r1, #1
 800a690:	50d1      	str	r1, [r2, r3]
				mqttFlag.subscribe = 1;
 800a692:	4b7e      	ldr	r3, [pc, #504]	; (800a88c <recData+0x2b8>)
 800a694:	2201      	movs	r2, #1
 800a696:	705a      	strb	r2, [r3, #1]
				mqttState = Publish;
 800a698:	4b7d      	ldr	r3, [pc, #500]	; (800a890 <recData+0x2bc>)
 800a69a:	2203      	movs	r2, #3
 800a69c:	701a      	strb	r2, [r3, #0]
			}
			if ((procBuff[procBuffpointer - 1] == '1')&&(mqttFlag.subscribe == 1)&&(mqttFlag.busy == 0)){
 800a69e:	4b74      	ldr	r3, [pc, #464]	; (800a870 <recData+0x29c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	4a74      	ldr	r2, [pc, #464]	; (800a878 <recData+0x2a4>)
 800a6a6:	5cd3      	ldrb	r3, [r2, r3]
 800a6a8:	2b31      	cmp	r3, #49	; 0x31
 800a6aa:	d112      	bne.n	800a6d2 <recData+0xfe>
 800a6ac:	4b77      	ldr	r3, [pc, #476]	; (800a88c <recData+0x2b8>)
 800a6ae:	785b      	ldrb	r3, [r3, #1]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d10e      	bne.n	800a6d2 <recData+0xfe>
 800a6b4:	4b75      	ldr	r3, [pc, #468]	; (800a88c <recData+0x2b8>)
 800a6b6:	79db      	ldrb	r3, [r3, #7]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10a      	bne.n	800a6d2 <recData+0xfe>
				//Debug_Send("pusblish retain!!!\r\n");
				gsmInfo.MQTT_Data = 1;
 800a6bc:	4a6f      	ldr	r2, [pc, #444]	; (800a87c <recData+0x2a8>)
 800a6be:	23c0      	movs	r3, #192	; 0xc0
 800a6c0:	005b      	lsls	r3, r3, #1
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	50d1      	str	r1, [r2, r3]
				MQTTBuffpointer = 0;
 800a6c6:	4b70      	ldr	r3, [pc, #448]	; (800a888 <recData+0x2b4>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	601a      	str	r2, [r3, #0]
				mqttFlag.busy = 1;
 800a6cc:	4b6f      	ldr	r3, [pc, #444]	; (800a88c <recData+0x2b8>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	71da      	strb	r2, [r3, #7]
			}
			if ((procBuff[procBuffpointer - 1] == '0')&&(mqttFlag.subscribe == 1)&&(mqttFlag.busy == 0)){
 800a6d2:	4b67      	ldr	r3, [pc, #412]	; (800a870 <recData+0x29c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	4a67      	ldr	r2, [pc, #412]	; (800a878 <recData+0x2a4>)
 800a6da:	5cd3      	ldrb	r3, [r2, r3]
 800a6dc:	2b30      	cmp	r3, #48	; 0x30
 800a6de:	d112      	bne.n	800a706 <recData+0x132>
 800a6e0:	4b6a      	ldr	r3, [pc, #424]	; (800a88c <recData+0x2b8>)
 800a6e2:	785b      	ldrb	r3, [r3, #1]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d10e      	bne.n	800a706 <recData+0x132>
 800a6e8:	4b68      	ldr	r3, [pc, #416]	; (800a88c <recData+0x2b8>)
 800a6ea:	79db      	ldrb	r3, [r3, #7]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <recData+0x132>
				//Debug_Send("pusblish normal!!!\r\n");
				gsmInfo.MQTT_Data = 1;
 800a6f0:	4a62      	ldr	r2, [pc, #392]	; (800a87c <recData+0x2a8>)
 800a6f2:	23c0      	movs	r3, #192	; 0xc0
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	2101      	movs	r1, #1
 800a6f8:	50d1      	str	r1, [r2, r3]
				MQTTBuffpointer = 0;
 800a6fa:	4b63      	ldr	r3, [pc, #396]	; (800a888 <recData+0x2b4>)
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
				mqttFlag.busy = 1;
 800a700:	4b62      	ldr	r3, [pc, #392]	; (800a88c <recData+0x2b8>)
 800a702:	2201      	movs	r2, #1
 800a704:	71da      	strb	r2, [r3, #7]
			}
			if (gsmInfo.MQTT_Data == 1){
 800a706:	4a5d      	ldr	r2, [pc, #372]	; (800a87c <recData+0x2a8>)
 800a708:	23c0      	movs	r3, #192	; 0xc0
 800a70a:	005b      	lsls	r3, r3, #1
 800a70c:	58d3      	ldr	r3, [r2, r3]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d000      	beq.n	800a714 <recData+0x140>
 800a712:	e083      	b.n	800a81c <recData+0x248>
				mqttReceived[MQTTBuffpointer] = procBuff[procBuffpointer - 1];
 800a714:	4b56      	ldr	r3, [pc, #344]	; (800a870 <recData+0x29c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	1e5a      	subs	r2, r3, #1
 800a71a:	4b5b      	ldr	r3, [pc, #364]	; (800a888 <recData+0x2b4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4956      	ldr	r1, [pc, #344]	; (800a878 <recData+0x2a4>)
 800a720:	5c89      	ldrb	r1, [r1, r2]
 800a722:	4a5c      	ldr	r2, [pc, #368]	; (800a894 <recData+0x2c0>)
 800a724:	54d1      	strb	r1, [r2, r3]
				myLongStr(MQTTBuffpointer,temp1,10,10);
 800a726:	4b58      	ldr	r3, [pc, #352]	; (800a888 <recData+0x2b4>)
 800a728:	6818      	ldr	r0, [r3, #0]
 800a72a:	495b      	ldr	r1, [pc, #364]	; (800a898 <recData+0x2c4>)
 800a72c:	230a      	movs	r3, #10
 800a72e:	220a      	movs	r2, #10
 800a730:	f002 fd04 	bl	800d13c <myLongStr>
				Debug_Send("pos: ");
 800a734:	4b59      	ldr	r3, [pc, #356]	; (800a89c <recData+0x2c8>)
 800a736:	0018      	movs	r0, r3
 800a738:	f7ff ff32 	bl	800a5a0 <Debug_Send>
				Debug_Send(temp1);
 800a73c:	4b56      	ldr	r3, [pc, #344]	; (800a898 <recData+0x2c4>)
 800a73e:	0018      	movs	r0, r3
 800a740:	f7ff ff2e 	bl	800a5a0 <Debug_Send>
				//Debug_Send("\r\n");
				myLongStr(mqttReceived[MQTTBuffpointer],temp1,10,10);
 800a744:	4b50      	ldr	r3, [pc, #320]	; (800a888 <recData+0x2b4>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a52      	ldr	r2, [pc, #328]	; (800a894 <recData+0x2c0>)
 800a74a:	5cd3      	ldrb	r3, [r2, r3]
 800a74c:	0018      	movs	r0, r3
 800a74e:	4952      	ldr	r1, [pc, #328]	; (800a898 <recData+0x2c4>)
 800a750:	230a      	movs	r3, #10
 800a752:	220a      	movs	r2, #10
 800a754:	f002 fcf2 	bl	800d13c <myLongStr>
				Debug_Send(" ");
 800a758:	4b51      	ldr	r3, [pc, #324]	; (800a8a0 <recData+0x2cc>)
 800a75a:	0018      	movs	r0, r3
 800a75c:	f7ff ff20 	bl	800a5a0 <Debug_Send>
				Debug_Send(temp1);
 800a760:	4b4d      	ldr	r3, [pc, #308]	; (800a898 <recData+0x2c4>)
 800a762:	0018      	movs	r0, r3
 800a764:	f7ff ff1c 	bl	800a5a0 <Debug_Send>
				Debug_Send("\r\n");
 800a768:	4b4e      	ldr	r3, [pc, #312]	; (800a8a4 <recData+0x2d0>)
 800a76a:	0018      	movs	r0, r3
 800a76c:	f7ff ff18 	bl	800a5a0 <Debug_Send>
				if ((mqttReceived[MQTTBuffpointer] == 0x02)&&(mqttFlag.connect == 2)){
 800a770:	4b45      	ldr	r3, [pc, #276]	; (800a888 <recData+0x2b4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a47      	ldr	r2, [pc, #284]	; (800a894 <recData+0x2c0>)
 800a776:	5cd3      	ldrb	r3, [r2, r3]
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d10c      	bne.n	800a796 <recData+0x1c2>
 800a77c:	4b43      	ldr	r3, [pc, #268]	; (800a88c <recData+0x2b8>)
 800a77e:	78db      	ldrb	r3, [r3, #3]
 800a780:	2b02      	cmp	r3, #2
 800a782:	d108      	bne.n	800a796 <recData+0x1c2>
					//Debug_Send("Connected\r\n");
					mqttState = Subscribe;
 800a784:	4b42      	ldr	r3, [pc, #264]	; (800a890 <recData+0x2bc>)
 800a786:	2202      	movs	r2, #2
 800a788:	701a      	strb	r2, [r3, #0]
					mqttFlag.connect = 3;
 800a78a:	4b40      	ldr	r3, [pc, #256]	; (800a88c <recData+0x2b8>)
 800a78c:	2203      	movs	r2, #3
 800a78e:	70da      	strb	r2, [r3, #3]
					gsmState = GPRS_Send;
 800a790:	4b3b      	ldr	r3, [pc, #236]	; (800a880 <recData+0x2ac>)
 800a792:	221c      	movs	r2, #28
 800a794:	701a      	strb	r2, [r3, #0]
				}
				if (MQTTBuffpointer == 1){
 800a796:	4b3c      	ldr	r3, [pc, #240]	; (800a888 <recData+0x2b4>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d108      	bne.n	800a7b0 <recData+0x1dc>
					gsmInfo.MQTT_Size = mqttReceived[MQTTBuffpointer];
 800a79e:	4b3a      	ldr	r3, [pc, #232]	; (800a888 <recData+0x2b4>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a3c      	ldr	r2, [pc, #240]	; (800a894 <recData+0x2c0>)
 800a7a4:	5cd3      	ldrb	r3, [r2, r3]
 800a7a6:	0019      	movs	r1, r3
 800a7a8:	4a34      	ldr	r2, [pc, #208]	; (800a87c <recData+0x2a8>)
 800a7aa:	23c2      	movs	r3, #194	; 0xc2
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	50d1      	str	r1, [r2, r3]
					Debug_Send("Size: ");
					Debug_Send(temp1);
					Debug_Send("\r\n");*/
				}

				if (MQTTBuffpointer == 4){	//check when byte 3 arrives
 800a7b0:	4b35      	ldr	r3, [pc, #212]	; (800a888 <recData+0x2b4>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d117      	bne.n	800a7e8 <recData+0x214>
					Debug_Send("check packet validity\r\n");
 800a7b8:	4b3b      	ldr	r3, [pc, #236]	; (800a8a8 <recData+0x2d4>)
 800a7ba:	0018      	movs	r0, r3
 800a7bc:	f7ff fef0 	bl	800a5a0 <Debug_Send>
					if((mqttReceived[1] > 30)||(mqttReceived[3] > 30)){
 800a7c0:	4b34      	ldr	r3, [pc, #208]	; (800a894 <recData+0x2c0>)
 800a7c2:	785b      	ldrb	r3, [r3, #1]
 800a7c4:	2b1e      	cmp	r3, #30
 800a7c6:	d803      	bhi.n	800a7d0 <recData+0x1fc>
 800a7c8:	4b32      	ldr	r3, [pc, #200]	; (800a894 <recData+0x2c0>)
 800a7ca:	78db      	ldrb	r3, [r3, #3]
 800a7cc:	2b1e      	cmp	r3, #30
 800a7ce:	d90b      	bls.n	800a7e8 <recData+0x214>
						Debug_Send("packet invalid,topic or packet size 2 large\r\n");
 800a7d0:	4b36      	ldr	r3, [pc, #216]	; (800a8ac <recData+0x2d8>)
 800a7d2:	0018      	movs	r0, r3
 800a7d4:	f7ff fee4 	bl	800a5a0 <Debug_Send>
						//mqttFlag.Data = 0;
						gsmInfo.MQTT_Data = 0;
 800a7d8:	4a28      	ldr	r2, [pc, #160]	; (800a87c <recData+0x2a8>)
 800a7da:	23c0      	movs	r3, #192	; 0xc0
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	2100      	movs	r1, #0
 800a7e0:	50d1      	str	r1, [r2, r3]
						//mqttInfo.Buffpointer = 0;
						MQTTBuffpointer = 0;
 800a7e2:	4b29      	ldr	r3, [pc, #164]	; (800a888 <recData+0x2b4>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]
					}
				}
				MQTTBuffpointer++;
 800a7e8:	4b27      	ldr	r3, [pc, #156]	; (800a888 <recData+0x2b4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	1c5a      	adds	r2, r3, #1
 800a7ee:	4b26      	ldr	r3, [pc, #152]	; (800a888 <recData+0x2b4>)
 800a7f0:	601a      	str	r2, [r3, #0]
				if(MQTTBuffpointer>gsmInfo.MQTT_Size+1){
 800a7f2:	4a22      	ldr	r2, [pc, #136]	; (800a87c <recData+0x2a8>)
 800a7f4:	23c2      	movs	r3, #194	; 0xc2
 800a7f6:	005b      	lsls	r3, r3, #1
 800a7f8:	58d3      	ldr	r3, [r2, r3]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	4b22      	ldr	r3, [pc, #136]	; (800a888 <recData+0x2b4>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	429a      	cmp	r2, r3
 800a802:	da0b      	bge.n	800a81c <recData+0x248>

					MQTTBuffpointer = 0;
 800a804:	4b20      	ldr	r3, [pc, #128]	; (800a888 <recData+0x2b4>)
 800a806:	2200      	movs	r2, #0
 800a808:	601a      	str	r2, [r3, #0]
					//Debug_Send("mqtt stop\r\n");
					mqttFlag.busy = 0;
 800a80a:	4b20      	ldr	r3, [pc, #128]	; (800a88c <recData+0x2b8>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	71da      	strb	r2, [r3, #7]
					if (mqttFlag.subscribe == 1) MQTT_Process();
 800a810:	4b1e      	ldr	r3, [pc, #120]	; (800a88c <recData+0x2b8>)
 800a812:	785b      	ldrb	r3, [r3, #1]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d101      	bne.n	800a81c <recData+0x248>
 800a818:	f000 f97e 	bl	800ab18 <MQTT_Process>
					Debug_Send("mqtt stop sub\r\n");
				}
				Debug_Send("subscribe\r\n");
			}*/

			if (procBuff[procBuffpointer - 1] == 0x0A){
 800a81c:	4b14      	ldr	r3, [pc, #80]	; (800a870 <recData+0x29c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3b01      	subs	r3, #1
 800a822:	4a15      	ldr	r2, [pc, #84]	; (800a878 <recData+0x2a4>)
 800a824:	5cd3      	ldrb	r3, [r2, r3]
 800a826:	2b0a      	cmp	r3, #10
 800a828:	d109      	bne.n	800a83e <recData+0x26a>
				//procBuff[procBuffpointer - 1] = 0;
				procBuff[procBuffpointer] = 0;
 800a82a:	4b11      	ldr	r3, [pc, #68]	; (800a870 <recData+0x29c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a12      	ldr	r2, [pc, #72]	; (800a878 <recData+0x2a4>)
 800a830:	2100      	movs	r1, #0
 800a832:	54d1      	strb	r1, [r2, r3]
				procBuffpointer = 0;
 800a834:	4b0e      	ldr	r3, [pc, #56]	; (800a870 <recData+0x29c>)
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
				//sendData(procBuff,UART0);
				//sendData("\r\n",UART0);
				//Debug_Send("A");
				//procBuffpointer--;
				procData();
 800a83a:	f000 fae5 	bl	800ae08 <procData>
			}
			if (procBuff[procBuffpointer - 1] == 0x0D){
 800a83e:	4b0c      	ldr	r3, [pc, #48]	; (800a870 <recData+0x29c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3b01      	subs	r3, #1
 800a844:	4a0c      	ldr	r2, [pc, #48]	; (800a878 <recData+0x2a4>)
 800a846:	5cd3      	ldrb	r3, [r2, r3]
 800a848:	2b0d      	cmp	r3, #13
 800a84a:	d106      	bne.n	800a85a <recData+0x286>
				//Debug_Send(procBuff);
				//Debug_Send("\r\n");
				//Debug_Send("D");
				//procData();
				//WifiprocData(procBuff);
				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800a84c:	2380      	movs	r3, #128	; 0x80
 800a84e:	019b      	lsls	r3, r3, #6
 800a850:	4a03      	ldr	r2, [pc, #12]	; (800a860 <recData+0x28c>)
 800a852:	0019      	movs	r1, r3
 800a854:	0010      	movs	r0, r2
 800a856:	f003 fb06 	bl	800de66 <HAL_GPIO_TogglePin>
				//("0x0D\r\n");

			}
		}
	//}
}
 800a85a:	46c0      	nop			; (mov r8, r8)
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	48000800 	.word	0x48000800
 800a864:	200002d8 	.word	0x200002d8
 800a868:	200002dc 	.word	0x200002dc
 800a86c:	200002f4 	.word	0x200002f4
 800a870:	200002e0 	.word	0x200002e0
 800a874:	200014f4 	.word	0x200014f4
 800a878:	2000189c 	.word	0x2000189c
 800a87c:	200019a8 	.word	0x200019a8
 800a880:	200000c0 	.word	0x200000c0
 800a884:	08019364 	.word	0x08019364
 800a888:	200002e4 	.word	0x200002e4
 800a88c:	20001998 	.word	0x20001998
 800a890:	200000d0 	.word	0x200000d0
 800a894:	20001900 	.word	0x20001900
 800a898:	20002224 	.word	0x20002224
 800a89c:	08019378 	.word	0x08019378
 800a8a0:	08019380 	.word	0x08019380
 800a8a4:	08018da4 	.word	0x08018da4
 800a8a8:	08019384 	.word	0x08019384
 800a8ac:	0801939c 	.word	0x0801939c

0800a8b0 <MQTT_ConnectF>:

void MQTT_ConnectF(){
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
	tempGPRS[0] = 0x10;
 800a8b4:	4b20      	ldr	r3, [pc, #128]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8b6:	2210      	movs	r2, #16
 800a8b8:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x0E;
 800a8ba:	4b1f      	ldr	r3, [pc, #124]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8bc:	220e      	movs	r2, #14
 800a8be:	705a      	strb	r2, [r3, #1]
	tempGPRS[2] = 0x00;
 800a8c0:	4b1d      	ldr	r3, [pc, #116]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x04;
 800a8c6:	4b1c      	ldr	r3, [pc, #112]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8c8:	2204      	movs	r2, #4
 800a8ca:	70da      	strb	r2, [r3, #3]
	tempGPRS[4] = 'M';
 800a8cc:	4b1a      	ldr	r3, [pc, #104]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8ce:	224d      	movs	r2, #77	; 0x4d
 800a8d0:	711a      	strb	r2, [r3, #4]
	tempGPRS[5] = 'Q';
 800a8d2:	4b19      	ldr	r3, [pc, #100]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8d4:	2251      	movs	r2, #81	; 0x51
 800a8d6:	715a      	strb	r2, [r3, #5]
	tempGPRS[6] = 'T';
 800a8d8:	4b17      	ldr	r3, [pc, #92]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8da:	2254      	movs	r2, #84	; 0x54
 800a8dc:	719a      	strb	r2, [r3, #6]
	tempGPRS[7] = 'T';
 800a8de:	4b16      	ldr	r3, [pc, #88]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8e0:	2254      	movs	r2, #84	; 0x54
 800a8e2:	71da      	strb	r2, [r3, #7]
	tempGPRS[8] = 0x04;
 800a8e4:	4b14      	ldr	r3, [pc, #80]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8e6:	2204      	movs	r2, #4
 800a8e8:	721a      	strb	r2, [r3, #8]
	tempGPRS[9] = 0x02;
 800a8ea:	4b13      	ldr	r3, [pc, #76]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	725a      	strb	r2, [r3, #9]
	tempGPRS[10] = 0x0A;
 800a8f0:	4b11      	ldr	r3, [pc, #68]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8f2:	220a      	movs	r2, #10
 800a8f4:	729a      	strb	r2, [r3, #10]
	tempGPRS[11] = 0x78;
 800a8f6:	4b10      	ldr	r3, [pc, #64]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8f8:	2278      	movs	r2, #120	; 0x78
 800a8fa:	72da      	strb	r2, [r3, #11]
	tempGPRS[12] = 0x00;
 800a8fc:	4b0e      	ldr	r3, [pc, #56]	; (800a938 <MQTT_ConnectF+0x88>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	731a      	strb	r2, [r3, #12]
	tempGPRS[13] = 0x02;
 800a902:	4b0d      	ldr	r3, [pc, #52]	; (800a938 <MQTT_ConnectF+0x88>)
 800a904:	2202      	movs	r2, #2
 800a906:	735a      	strb	r2, [r3, #13]

	tempGPRS[14] = 'P';
 800a908:	4b0b      	ldr	r3, [pc, #44]	; (800a938 <MQTT_ConnectF+0x88>)
 800a90a:	2250      	movs	r2, #80	; 0x50
 800a90c:	739a      	strb	r2, [r3, #14]
	tempGPRS[15] = '2';
 800a90e:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <MQTT_ConnectF+0x88>)
 800a910:	2232      	movs	r2, #50	; 0x32
 800a912:	73da      	strb	r2, [r3, #15]

	tempGPRS[16] = 0x1A;
 800a914:	4b08      	ldr	r3, [pc, #32]	; (800a938 <MQTT_ConnectF+0x88>)
 800a916:	221a      	movs	r2, #26
 800a918:	741a      	strb	r2, [r3, #16]
	tempGPRS[17] = 0x0D;
 800a91a:	4b07      	ldr	r3, [pc, #28]	; (800a938 <MQTT_ConnectF+0x88>)
 800a91c:	220d      	movs	r2, #13
 800a91e:	745a      	strb	r2, [r3, #17]
	GSM_Send_Bin(tempGPRS, 18);
 800a920:	4b05      	ldr	r3, [pc, #20]	; (800a938 <MQTT_ConnectF+0x88>)
 800a922:	2112      	movs	r1, #18
 800a924:	0018      	movs	r0, r3
 800a926:	f7ff fe15 	bl	800a554 <GSM_Send_Bin>
	mqttFlag.connect = 1;
 800a92a:	4b04      	ldr	r3, [pc, #16]	; (800a93c <MQTT_ConnectF+0x8c>)
 800a92c:	2201      	movs	r2, #1
 800a92e:	70da      	strb	r2, [r3, #3]
	//mqttState = Connect;
	//gsmState = GPRS_Send;
}
 800a930:	46c0      	nop			; (mov r8, r8)
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	46c0      	nop			; (mov r8, r8)
 800a938:	2000184c 	.word	0x2000184c
 800a93c:	20001998 	.word	0x20001998

0800a940 <MQTT_SuscribeF>:

void MQTT_SuscribeF(){
 800a940:	b580      	push	{r7, lr}
 800a942:	af00      	add	r7, sp, #0
	tempGPRS[0] = 0x82;
 800a944:	4b1a      	ldr	r3, [pc, #104]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a946:	2282      	movs	r2, #130	; 0x82
 800a948:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x0A;
 800a94a:	4b19      	ldr	r3, [pc, #100]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a94c:	220a      	movs	r2, #10
 800a94e:	705a      	strb	r2, [r3, #1]
	tempGPRS[2] = 0x00;
 800a950:	4b17      	ldr	r3, [pc, #92]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a952:	2200      	movs	r2, #0
 800a954:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x00;
 800a956:	4b16      	ldr	r3, [pc, #88]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a958:	2200      	movs	r2, #0
 800a95a:	70da      	strb	r2, [r3, #3]
	tempGPRS[4] = 0x00;
 800a95c:	4b14      	ldr	r3, [pc, #80]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a95e:	2200      	movs	r2, #0
 800a960:	711a      	strb	r2, [r3, #4]
	tempGPRS[5] = 0x05;
 800a962:	4b13      	ldr	r3, [pc, #76]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a964:	2205      	movs	r2, #5
 800a966:	715a      	strb	r2, [r3, #5]
	tempGPRS[6] = 'h';
 800a968:	4b11      	ldr	r3, [pc, #68]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a96a:	2268      	movs	r2, #104	; 0x68
 800a96c:	719a      	strb	r2, [r3, #6]
	tempGPRS[7] = 'o';
 800a96e:	4b10      	ldr	r3, [pc, #64]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a970:	226f      	movs	r2, #111	; 0x6f
 800a972:	71da      	strb	r2, [r3, #7]
	tempGPRS[8] = 'u';
 800a974:	4b0e      	ldr	r3, [pc, #56]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a976:	2275      	movs	r2, #117	; 0x75
 800a978:	721a      	strb	r2, [r3, #8]
	tempGPRS[9] = 's';
 800a97a:	4b0d      	ldr	r3, [pc, #52]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a97c:	2273      	movs	r2, #115	; 0x73
 800a97e:	725a      	strb	r2, [r3, #9]
	tempGPRS[10] = 'e';
 800a980:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a982:	2265      	movs	r2, #101	; 0x65
 800a984:	729a      	strb	r2, [r3, #10]
	tempGPRS[11] = 0x00;
 800a986:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a988:	2200      	movs	r2, #0
 800a98a:	72da      	strb	r2, [r3, #11]
	tempGPRS[12] = 0x00;
 800a98c:	4b08      	ldr	r3, [pc, #32]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a98e:	2200      	movs	r2, #0
 800a990:	731a      	strb	r2, [r3, #12]

	tempGPRS[13] = 0x1A;
 800a992:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a994:	221a      	movs	r2, #26
 800a996:	735a      	strb	r2, [r3, #13]
	tempGPRS[14] = 0x0D;
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a99a:	220d      	movs	r2, #13
 800a99c:	739a      	strb	r2, [r3, #14]
	GSM_Send_Bin(tempGPRS, 15);
 800a99e:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <MQTT_SuscribeF+0x70>)
 800a9a0:	210f      	movs	r1, #15
 800a9a2:	0018      	movs	r0, r3
 800a9a4:	f7ff fdd6 	bl	800a554 <GSM_Send_Bin>
	//mqttState = Subscribe;
	//gsmState = GPRS_Send;
}
 800a9a8:	46c0      	nop			; (mov r8, r8)
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	46c0      	nop			; (mov r8, r8)
 800a9b0:	2000184c 	.word	0x2000184c

0800a9b4 <MQTT_Publish_F>:

void MQTT_Publish_F(uint8_t *data){
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
	Debug_Send("Publish Func\n");
 800a9bc:	4b3d      	ldr	r3, [pc, #244]	; (800aab4 <MQTT_Publish_F+0x100>)
 800a9be:	0018      	movs	r0, r3
 800a9c0:	f7ff fdee 	bl	800a5a0 <Debug_Send>
	Debug_Send(data);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	f7ff fdea 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800a9cc:	4b3a      	ldr	r3, [pc, #232]	; (800aab8 <MQTT_Publish_F+0x104>)
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	f7ff fde6 	bl	800a5a0 <Debug_Send>
	tempGPRS[0] = 0x30;
 800a9d4:	4b39      	ldr	r3, [pc, #228]	; (800aabc <MQTT_Publish_F+0x108>)
 800a9d6:	2230      	movs	r2, #48	; 0x30
 800a9d8:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x0A;
 800a9da:	4b38      	ldr	r3, [pc, #224]	; (800aabc <MQTT_Publish_F+0x108>)
 800a9dc:	220a      	movs	r2, #10
 800a9de:	705a      	strb	r2, [r3, #1]
	tempGPRS[2] = 0x00;
 800a9e0:	4b36      	ldr	r3, [pc, #216]	; (800aabc <MQTT_Publish_F+0x108>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x05;
 800a9e6:	4b35      	ldr	r3, [pc, #212]	; (800aabc <MQTT_Publish_F+0x108>)
 800a9e8:	2205      	movs	r2, #5
 800a9ea:	70da      	strb	r2, [r3, #3]
	tempGPRS[4] = 'h';
 800a9ec:	4b33      	ldr	r3, [pc, #204]	; (800aabc <MQTT_Publish_F+0x108>)
 800a9ee:	2268      	movs	r2, #104	; 0x68
 800a9f0:	711a      	strb	r2, [r3, #4]
	tempGPRS[5] = 'o';
 800a9f2:	4b32      	ldr	r3, [pc, #200]	; (800aabc <MQTT_Publish_F+0x108>)
 800a9f4:	226f      	movs	r2, #111	; 0x6f
 800a9f6:	715a      	strb	r2, [r3, #5]
	tempGPRS[6] = 'u';
 800a9f8:	4b30      	ldr	r3, [pc, #192]	; (800aabc <MQTT_Publish_F+0x108>)
 800a9fa:	2275      	movs	r2, #117	; 0x75
 800a9fc:	719a      	strb	r2, [r3, #6]
	tempGPRS[7] = 's';
 800a9fe:	4b2f      	ldr	r3, [pc, #188]	; (800aabc <MQTT_Publish_F+0x108>)
 800aa00:	2273      	movs	r2, #115	; 0x73
 800aa02:	71da      	strb	r2, [r3, #7]
	tempGPRS[8] = 'e';
 800aa04:	4b2d      	ldr	r3, [pc, #180]	; (800aabc <MQTT_Publish_F+0x108>)
 800aa06:	2265      	movs	r2, #101	; 0x65
 800aa08:	721a      	strb	r2, [r3, #8]
	tempGPRS[9] = 'o';
 800aa0a:	4b2c      	ldr	r3, [pc, #176]	; (800aabc <MQTT_Publish_F+0x108>)
 800aa0c:	226f      	movs	r2, #111	; 0x6f
 800aa0e:	725a      	strb	r2, [r3, #9]
	tempGPRS[10] = 'f';
 800aa10:	4b2a      	ldr	r3, [pc, #168]	; (800aabc <MQTT_Publish_F+0x108>)
 800aa12:	2266      	movs	r2, #102	; 0x66
 800aa14:	729a      	strb	r2, [r3, #10]
	tempGPRS[11] = 'f';
 800aa16:	4b29      	ldr	r3, [pc, #164]	; (800aabc <MQTT_Publish_F+0x108>)
 800aa18:	2266      	movs	r2, #102	; 0x66
 800aa1a:	72da      	strb	r2, [r3, #11]

	int counter;
	counter = 9;
 800aa1c:	2309      	movs	r3, #9
 800aa1e:	60fb      	str	r3, [r7, #12]
	while(*data != 0){
 800aa20:	e00b      	b.n	800aa3a <MQTT_Publish_F+0x86>
		tempGPRS[counter] = *data++;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	1c5a      	adds	r2, r3, #1
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	7819      	ldrb	r1, [r3, #0]
 800aa2a:	4a24      	ldr	r2, [pc, #144]	; (800aabc <MQTT_Publish_F+0x108>)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	18d3      	adds	r3, r2, r3
 800aa30:	1c0a      	adds	r2, r1, #0
 800aa32:	701a      	strb	r2, [r3, #0]
		counter++;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	3301      	adds	r3, #1
 800aa38:	60fb      	str	r3, [r7, #12]
	while(*data != 0){
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1ef      	bne.n	800aa22 <MQTT_Publish_F+0x6e>
	}

	myLongStr(counter,temp1,10,10);
 800aa42:	491f      	ldr	r1, [pc, #124]	; (800aac0 <MQTT_Publish_F+0x10c>)
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	230a      	movs	r3, #10
 800aa48:	220a      	movs	r2, #10
 800aa4a:	f002 fb77 	bl	800d13c <myLongStr>
	Debug_Send("Chars count:");
 800aa4e:	4b1d      	ldr	r3, [pc, #116]	; (800aac4 <MQTT_Publish_F+0x110>)
 800aa50:	0018      	movs	r0, r3
 800aa52:	f7ff fda5 	bl	800a5a0 <Debug_Send>
	Debug_Send(temp1);
 800aa56:	4b1a      	ldr	r3, [pc, #104]	; (800aac0 <MQTT_Publish_F+0x10c>)
 800aa58:	0018      	movs	r0, r3
 800aa5a:	f7ff fda1 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800aa5e:	4b16      	ldr	r3, [pc, #88]	; (800aab8 <MQTT_Publish_F+0x104>)
 800aa60:	0018      	movs	r0, r3
 800aa62:	f7ff fd9d 	bl	800a5a0 <Debug_Send>


	tempGPRS[counter] = 0x1A;
 800aa66:	4a15      	ldr	r2, [pc, #84]	; (800aabc <MQTT_Publish_F+0x108>)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	18d3      	adds	r3, r2, r3
 800aa6c:	221a      	movs	r2, #26
 800aa6e:	701a      	strb	r2, [r3, #0]
	counter++;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3301      	adds	r3, #1
 800aa74:	60fb      	str	r3, [r7, #12]
	tempGPRS[counter] = 0x0D;
 800aa76:	4a11      	ldr	r2, [pc, #68]	; (800aabc <MQTT_Publish_F+0x108>)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	18d3      	adds	r3, r2, r3
 800aa7c:	220d      	movs	r2, #13
 800aa7e:	701a      	strb	r2, [r3, #0]
	counter++;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3301      	adds	r3, #1
 800aa84:	60fb      	str	r3, [r7, #12]

	//GSM_Send_Bin(tempGPRS, 14);
	//mqttInfo.length = 14;
	mqttInfo.length = counter;
 800aa86:	4b10      	ldr	r3, [pc, #64]	; (800aac8 <MQTT_Publish_F+0x114>)
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	609a      	str	r2, [r3, #8]
	tempGPRS[1] = counter - 4;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	3b04      	subs	r3, #4
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	4b09      	ldr	r3, [pc, #36]	; (800aabc <MQTT_Publish_F+0x108>)
 800aa96:	705a      	strb	r2, [r3, #1]
	GSM_Send_Bin(tempGPRS, counter);
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	4b08      	ldr	r3, [pc, #32]	; (800aabc <MQTT_Publish_F+0x108>)
 800aa9c:	0011      	movs	r1, r2
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	f7ff fd58 	bl	800a554 <GSM_Send_Bin>
	Debug_Send("Publish sent\r\n");
 800aaa4:	4b09      	ldr	r3, [pc, #36]	; (800aacc <MQTT_Publish_F+0x118>)
 800aaa6:	0018      	movs	r0, r3
 800aaa8:	f7ff fd7a 	bl	800a5a0 <Debug_Send>
	/*myLongStr(mqttInfo.length,temp1,10,10);
	Debug_Send("Length:");
	Debug_Send(temp1);
	Debug_Send("\r\n");*/
}
 800aaac:	46c0      	nop			; (mov r8, r8)
 800aaae:	46bd      	mov	sp, r7
 800aab0:	b004      	add	sp, #16
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	080193cc 	.word	0x080193cc
 800aab8:	08018da4 	.word	0x08018da4
 800aabc:	2000184c 	.word	0x2000184c
 800aac0:	20002224 	.word	0x20002224
 800aac4:	080193dc 	.word	0x080193dc
 800aac8:	20001620 	.word	0x20001620
 800aacc:	080193ec 	.word	0x080193ec

0800aad0 <MQTT_Ping_F>:

void MQTT_Ping_F(){
 800aad0:	b580      	push	{r7, lr}
 800aad2:	af00      	add	r7, sp, #0
	Debug_Send("Build ping msg\r\n");
 800aad4:	4b0d      	ldr	r3, [pc, #52]	; (800ab0c <MQTT_Ping_F+0x3c>)
 800aad6:	0018      	movs	r0, r3
 800aad8:	f7ff fd62 	bl	800a5a0 <Debug_Send>
	tempGPRS[0] = 0xC0;
 800aadc:	4b0c      	ldr	r3, [pc, #48]	; (800ab10 <MQTT_Ping_F+0x40>)
 800aade:	22c0      	movs	r2, #192	; 0xc0
 800aae0:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x00;
 800aae2:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <MQTT_Ping_F+0x40>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	705a      	strb	r2, [r3, #1]

	mqttInfo.length = 2;
 800aae8:	4b0a      	ldr	r3, [pc, #40]	; (800ab14 <MQTT_Ping_F+0x44>)
 800aaea:	2202      	movs	r2, #2
 800aaec:	609a      	str	r2, [r3, #8]
	tempGPRS[2] = 0x1A;
 800aaee:	4b08      	ldr	r3, [pc, #32]	; (800ab10 <MQTT_Ping_F+0x40>)
 800aaf0:	221a      	movs	r2, #26
 800aaf2:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x0D;
 800aaf4:	4b06      	ldr	r3, [pc, #24]	; (800ab10 <MQTT_Ping_F+0x40>)
 800aaf6:	220d      	movs	r2, #13
 800aaf8:	70da      	strb	r2, [r3, #3]
	GSM_Send_Bin(tempGPRS, 4);
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <MQTT_Ping_F+0x40>)
 800aafc:	2104      	movs	r1, #4
 800aafe:	0018      	movs	r0, r3
 800ab00:	f7ff fd28 	bl	800a554 <GSM_Send_Bin>
	//WifiState = IP_Send;
	//mqttFlag.publish = 1;
	//mqttFlag.send = 1;
	//GSM_Send_Bin(temp1, 14);
}
 800ab04:	46c0      	nop			; (mov r8, r8)
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	46c0      	nop			; (mov r8, r8)
 800ab0c:	080193fc 	.word	0x080193fc
 800ab10:	2000184c 	.word	0x2000184c
 800ab14:	20001620 	.word	0x20001620

0800ab18 <MQTT_Process>:


void MQTT_Process(){
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b08a      	sub	sp, #40	; 0x28
 800ab1c:	af02      	add	r7, sp, #8
	Debug_Send("Process MQTT\r\n");
 800ab1e:	4ba1      	ldr	r3, [pc, #644]	; (800ada4 <MQTT_Process+0x28c>)
 800ab20:	0018      	movs	r0, r3
 800ab22:	f7ff fd3d 	bl	800a5a0 <Debug_Send>
	int counter;
	char cnt[10];
	int start = 4;
 800ab26:	2304      	movs	r3, #4
 800ab28:	61bb      	str	r3, [r7, #24]
	int len;
	for (counter = 0; counter < gsmInfo.MQTT_Size; counter++){
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	61fb      	str	r3, [r7, #28]
 800ab2e:	e022      	b.n	800ab76 <MQTT_Process+0x5e>
		myLongStr(counter,cnt,10,10);
 800ab30:	1d39      	adds	r1, r7, #4
 800ab32:	69f8      	ldr	r0, [r7, #28]
 800ab34:	230a      	movs	r3, #10
 800ab36:	220a      	movs	r2, #10
 800ab38:	f002 fb00 	bl	800d13c <myLongStr>

		myLongStr(mqttReceived[counter],temp,10,10);
 800ab3c:	4a9a      	ldr	r2, [pc, #616]	; (800ada8 <MQTT_Process+0x290>)
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	18d3      	adds	r3, r2, r3
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	0018      	movs	r0, r3
 800ab46:	4999      	ldr	r1, [pc, #612]	; (800adac <MQTT_Process+0x294>)
 800ab48:	230a      	movs	r3, #10
 800ab4a:	220a      	movs	r2, #10
 800ab4c:	f002 faf6 	bl	800d13c <myLongStr>
		Debug_Send(cnt);
 800ab50:	1d3b      	adds	r3, r7, #4
 800ab52:	0018      	movs	r0, r3
 800ab54:	f7ff fd24 	bl	800a5a0 <Debug_Send>
		Debug_Send(":");
 800ab58:	4b95      	ldr	r3, [pc, #596]	; (800adb0 <MQTT_Process+0x298>)
 800ab5a:	0018      	movs	r0, r3
 800ab5c:	f7ff fd20 	bl	800a5a0 <Debug_Send>
		Debug_Send(temp);
 800ab60:	4b92      	ldr	r3, [pc, #584]	; (800adac <MQTT_Process+0x294>)
 800ab62:	0018      	movs	r0, r3
 800ab64:	f7ff fd1c 	bl	800a5a0 <Debug_Send>
		//Debug_Send("\r\n");
		Debug_Send(" ");
 800ab68:	4b92      	ldr	r3, [pc, #584]	; (800adb4 <MQTT_Process+0x29c>)
 800ab6a:	0018      	movs	r0, r3
 800ab6c:	f7ff fd18 	bl	800a5a0 <Debug_Send>
	for (counter = 0; counter < gsmInfo.MQTT_Size; counter++){
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	3301      	adds	r3, #1
 800ab74:	61fb      	str	r3, [r7, #28]
 800ab76:	4a90      	ldr	r2, [pc, #576]	; (800adb8 <MQTT_Process+0x2a0>)
 800ab78:	23c2      	movs	r3, #194	; 0xc2
 800ab7a:	005b      	lsls	r3, r3, #1
 800ab7c:	58d3      	ldr	r3, [r2, r3]
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	dbd5      	blt.n	800ab30 <MQTT_Process+0x18>
	}
	len = gsmInfo.MQTT_Size;
 800ab84:	4a8c      	ldr	r2, [pc, #560]	; (800adb8 <MQTT_Process+0x2a0>)
 800ab86:	23c2      	movs	r3, #194	; 0xc2
 800ab88:	005b      	lsls	r3, r3, #1
 800ab8a:	58d3      	ldr	r3, [r2, r3]
 800ab8c:	617b      	str	r3, [r7, #20]
	//byteCopy(mqttReceived, temp, start, start + len);
	byteCopy(mqttReceived, temp, start, len);
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	4985      	ldr	r1, [pc, #532]	; (800adac <MQTT_Process+0x294>)
 800ab98:	4883      	ldr	r0, [pc, #524]	; (800ada8 <MQTT_Process+0x290>)
 800ab9a:	f001 fe19 	bl	800c7d0 <byteCopy>
	Debug_Send("\r\nPacket:");
 800ab9e:	4b87      	ldr	r3, [pc, #540]	; (800adbc <MQTT_Process+0x2a4>)
 800aba0:	0018      	movs	r0, r3
 800aba2:	f7ff fcfd 	bl	800a5a0 <Debug_Send>
	Debug_Send(temp);
 800aba6:	4b81      	ldr	r3, [pc, #516]	; (800adac <MQTT_Process+0x294>)
 800aba8:	0018      	movs	r0, r3
 800abaa:	f7ff fcf9 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800abae:	4b84      	ldr	r3, [pc, #528]	; (800adc0 <MQTT_Process+0x2a8>)
 800abb0:	0018      	movs	r0, r3
 800abb2:	f7ff fcf5 	bl	800a5a0 <Debug_Send>
	mqttInfo.packetLength = mqttReceived[1] ;
 800abb6:	4b7c      	ldr	r3, [pc, #496]	; (800ada8 <MQTT_Process+0x290>)
 800abb8:	785b      	ldrb	r3, [r3, #1]
 800abba:	001a      	movs	r2, r3
 800abbc:	4b81      	ldr	r3, [pc, #516]	; (800adc4 <MQTT_Process+0x2ac>)
 800abbe:	60da      	str	r2, [r3, #12]
	myLongStr(mqttInfo.packetLength,temp1,10,10);
 800abc0:	4b80      	ldr	r3, [pc, #512]	; (800adc4 <MQTT_Process+0x2ac>)
 800abc2:	68d8      	ldr	r0, [r3, #12]
 800abc4:	4980      	ldr	r1, [pc, #512]	; (800adc8 <MQTT_Process+0x2b0>)
 800abc6:	230a      	movs	r3, #10
 800abc8:	220a      	movs	r2, #10
 800abca:	f002 fab7 	bl	800d13c <myLongStr>
	Debug_Send("packet size ");
 800abce:	4b7f      	ldr	r3, [pc, #508]	; (800adcc <MQTT_Process+0x2b4>)
 800abd0:	0018      	movs	r0, r3
 800abd2:	f7ff fce5 	bl	800a5a0 <Debug_Send>
	Debug_Send(temp1);
 800abd6:	4b7c      	ldr	r3, [pc, #496]	; (800adc8 <MQTT_Process+0x2b0>)
 800abd8:	0018      	movs	r0, r3
 800abda:	f7ff fce1 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800abde:	4b78      	ldr	r3, [pc, #480]	; (800adc0 <MQTT_Process+0x2a8>)
 800abe0:	0018      	movs	r0, r3
 800abe2:	f7ff fcdd 	bl	800a5a0 <Debug_Send>
	mqttInfo.topicLength = mqttReceived[3];
 800abe6:	4b70      	ldr	r3, [pc, #448]	; (800ada8 <MQTT_Process+0x290>)
 800abe8:	78db      	ldrb	r3, [r3, #3]
 800abea:	001a      	movs	r2, r3
 800abec:	4b75      	ldr	r3, [pc, #468]	; (800adc4 <MQTT_Process+0x2ac>)
 800abee:	611a      	str	r2, [r3, #16]
	myLongStr(mqttInfo.topicLength,temp1,10,10);
 800abf0:	4b74      	ldr	r3, [pc, #464]	; (800adc4 <MQTT_Process+0x2ac>)
 800abf2:	6918      	ldr	r0, [r3, #16]
 800abf4:	4974      	ldr	r1, [pc, #464]	; (800adc8 <MQTT_Process+0x2b0>)
 800abf6:	230a      	movs	r3, #10
 800abf8:	220a      	movs	r2, #10
 800abfa:	f002 fa9f 	bl	800d13c <myLongStr>
	Debug_Send("topic size ");
 800abfe:	4b74      	ldr	r3, [pc, #464]	; (800add0 <MQTT_Process+0x2b8>)
 800ac00:	0018      	movs	r0, r3
 800ac02:	f7ff fccd 	bl	800a5a0 <Debug_Send>
	Debug_Send(temp1);
 800ac06:	4b70      	ldr	r3, [pc, #448]	; (800adc8 <MQTT_Process+0x2b0>)
 800ac08:	0018      	movs	r0, r3
 800ac0a:	f7ff fcc9 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800ac0e:	4b6c      	ldr	r3, [pc, #432]	; (800adc0 <MQTT_Process+0x2a8>)
 800ac10:	0018      	movs	r0, r3
 800ac12:	f7ff fcc5 	bl	800a5a0 <Debug_Send>
	myLongStr(mqttInfo.packetLength - mqttInfo.topicLength - 2,temp1,10,10);
 800ac16:	4b6b      	ldr	r3, [pc, #428]	; (800adc4 <MQTT_Process+0x2ac>)
 800ac18:	68da      	ldr	r2, [r3, #12]
 800ac1a:	4b6a      	ldr	r3, [pc, #424]	; (800adc4 <MQTT_Process+0x2ac>)
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	1e98      	subs	r0, r3, #2
 800ac22:	4969      	ldr	r1, [pc, #420]	; (800adc8 <MQTT_Process+0x2b0>)
 800ac24:	230a      	movs	r3, #10
 800ac26:	220a      	movs	r2, #10
 800ac28:	f002 fa88 	bl	800d13c <myLongStr>
	Debug_Send("msg size ");
 800ac2c:	4b69      	ldr	r3, [pc, #420]	; (800add4 <MQTT_Process+0x2bc>)
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f7ff fcb6 	bl	800a5a0 <Debug_Send>
	Debug_Send(temp1);
 800ac34:	4b64      	ldr	r3, [pc, #400]	; (800adc8 <MQTT_Process+0x2b0>)
 800ac36:	0018      	movs	r0, r3
 800ac38:	f7ff fcb2 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800ac3c:	4b60      	ldr	r3, [pc, #384]	; (800adc0 <MQTT_Process+0x2a8>)
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f7ff fcae 	bl	800a5a0 <Debug_Send>
	mqttInfo.packet[0] = 0;
 800ac44:	4b5f      	ldr	r3, [pc, #380]	; (800adc4 <MQTT_Process+0x2ac>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	761a      	strb	r2, [r3, #24]
	mqttInfo.topic[0] = 0;
 800ac4a:	4b5e      	ldr	r3, [pc, #376]	; (800adc4 <MQTT_Process+0x2ac>)
 800ac4c:	2236      	movs	r2, #54	; 0x36
 800ac4e:	2100      	movs	r1, #0
 800ac50:	5499      	strb	r1, [r3, r2]
	mqttInfo.data[0] = 0;
 800ac52:	4b5c      	ldr	r3, [pc, #368]	; (800adc4 <MQTT_Process+0x2ac>)
 800ac54:	224a      	movs	r2, #74	; 0x4a
 800ac56:	2100      	movs	r1, #0
 800ac58:	5499      	strb	r1, [r3, r2]
	if (mqttFlag.subscribe == 1){
 800ac5a:	4b5f      	ldr	r3, [pc, #380]	; (800add8 <MQTT_Process+0x2c0>)
 800ac5c:	785b      	ldrb	r3, [r3, #1]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d000      	beq.n	800ac64 <MQTT_Process+0x14c>
 800ac62:	e096      	b.n	800ad92 <MQTT_Process+0x27a>
		byteCopy(mqttReceived, mqttInfo.packet, 4, mqttInfo.packetLength + 1);
 800ac64:	4b57      	ldr	r3, [pc, #348]	; (800adc4 <MQTT_Process+0x2ac>)
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	495b      	ldr	r1, [pc, #364]	; (800addc <MQTT_Process+0x2c4>)
 800ac70:	484d      	ldr	r0, [pc, #308]	; (800ada8 <MQTT_Process+0x290>)
 800ac72:	2204      	movs	r2, #4
 800ac74:	f001 fdac 	bl	800c7d0 <byteCopy>
		byteCopy(mqttReceived, mqttInfo.topic, 4, mqttInfo.topicLength + 3);
 800ac78:	4b52      	ldr	r3, [pc, #328]	; (800adc4 <MQTT_Process+0x2ac>)
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	3303      	adds	r3, #3
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	4957      	ldr	r1, [pc, #348]	; (800ade0 <MQTT_Process+0x2c8>)
 800ac84:	4848      	ldr	r0, [pc, #288]	; (800ada8 <MQTT_Process+0x290>)
 800ac86:	2204      	movs	r2, #4
 800ac88:	f001 fda2 	bl	800c7d0 <byteCopy>
		byteCopy(mqttReceived, mqttInfo.data, 4 + mqttInfo.topicLength, mqttInfo.packetLength + 1);
 800ac8c:	4b4d      	ldr	r3, [pc, #308]	; (800adc4 <MQTT_Process+0x2ac>)
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	3304      	adds	r3, #4
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	4b4b      	ldr	r3, [pc, #300]	; (800adc4 <MQTT_Process+0x2ac>)
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	b2db      	uxtb	r3, r3
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	4950      	ldr	r1, [pc, #320]	; (800ade4 <MQTT_Process+0x2cc>)
 800aca2:	4841      	ldr	r0, [pc, #260]	; (800ada8 <MQTT_Process+0x290>)
 800aca4:	f001 fd94 	bl	800c7d0 <byteCopy>
		//strncpy(mqttInfo.packet,)
		Debug_Send(mqttInfo.packet);
 800aca8:	4b4c      	ldr	r3, [pc, #304]	; (800addc <MQTT_Process+0x2c4>)
 800acaa:	0018      	movs	r0, r3
 800acac:	f7ff fc78 	bl	800a5a0 <Debug_Send>
		Debug_Send(" - ");
 800acb0:	4b4d      	ldr	r3, [pc, #308]	; (800ade8 <MQTT_Process+0x2d0>)
 800acb2:	0018      	movs	r0, r3
 800acb4:	f7ff fc74 	bl	800a5a0 <Debug_Send>
		Debug_Send(mqttInfo.topic);
 800acb8:	4b49      	ldr	r3, [pc, #292]	; (800ade0 <MQTT_Process+0x2c8>)
 800acba:	0018      	movs	r0, r3
 800acbc:	f7ff fc70 	bl	800a5a0 <Debug_Send>
		Debug_Send(" - ");
 800acc0:	4b49      	ldr	r3, [pc, #292]	; (800ade8 <MQTT_Process+0x2d0>)
 800acc2:	0018      	movs	r0, r3
 800acc4:	f7ff fc6c 	bl	800a5a0 <Debug_Send>
		Debug_Send(mqttInfo.data);
 800acc8:	4b46      	ldr	r3, [pc, #280]	; (800ade4 <MQTT_Process+0x2cc>)
 800acca:	0018      	movs	r0, r3
 800accc:	f7ff fc68 	bl	800a5a0 <Debug_Send>
		Debug_Send("\r\n");
 800acd0:	4b3b      	ldr	r3, [pc, #236]	; (800adc0 <MQTT_Process+0x2a8>)
 800acd2:	0018      	movs	r0, r3
 800acd4:	f7ff fc64 	bl	800a5a0 <Debug_Send>
		if (strncmp(mqttInfo.data,"mag",3) == 0){
 800acd8:	4944      	ldr	r1, [pc, #272]	; (800adec <MQTT_Process+0x2d4>)
 800acda:	4b42      	ldr	r3, [pc, #264]	; (800ade4 <MQTT_Process+0x2cc>)
 800acdc:	2203      	movs	r2, #3
 800acde:	0018      	movs	r0, r3
 800ace0:	f00d fb6b 	bl	80183ba <strncmp>
 800ace4:	1e03      	subs	r3, r0, #0
 800ace6:	d103      	bne.n	800acf0 <MQTT_Process+0x1d8>
			Debug_Send("Got mag\r\n");
 800ace8:	4b41      	ldr	r3, [pc, #260]	; (800adf0 <MQTT_Process+0x2d8>)
 800acea:	0018      	movs	r0, r3
 800acec:	f7ff fc58 	bl	800a5a0 <Debug_Send>
			//mqttState = Publish;
			//gsmState = GPRS_Send;
			//MQTT_Publish_F("got mag");
		}
		if (strncmp(mqttInfo.data,"sync",3) == 0){
 800acf0:	4940      	ldr	r1, [pc, #256]	; (800adf4 <MQTT_Process+0x2dc>)
 800acf2:	4b3c      	ldr	r3, [pc, #240]	; (800ade4 <MQTT_Process+0x2cc>)
 800acf4:	2203      	movs	r2, #3
 800acf6:	0018      	movs	r0, r3
 800acf8:	f00d fb5f 	bl	80183ba <strncmp>
			//MQTT_Publish_F("got sync");
		}
		int ln2;
		ln2 = mqttInfo.packetLength - mqttInfo.topicLength - 2;
 800acfc:	4b31      	ldr	r3, [pc, #196]	; (800adc4 <MQTT_Process+0x2ac>)
 800acfe:	68da      	ldr	r2, [r3, #12]
 800ad00:	4b30      	ldr	r3, [pc, #192]	; (800adc4 <MQTT_Process+0x2ac>)
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	3b02      	subs	r3, #2
 800ad08:	613b      	str	r3, [r7, #16]
		if (strncmp(mqttInfo.data,"l1",2) == 0){
 800ad0a:	493b      	ldr	r1, [pc, #236]	; (800adf8 <MQTT_Process+0x2e0>)
 800ad0c:	4b35      	ldr	r3, [pc, #212]	; (800ade4 <MQTT_Process+0x2cc>)
 800ad0e:	2202      	movs	r2, #2
 800ad10:	0018      	movs	r0, r3
 800ad12:	f00d fb52 	bl	80183ba <strncmp>
 800ad16:	1e03      	subs	r3, r0, #0
 800ad18:	d129      	bne.n	800ad6e <MQTT_Process+0x256>
			strncpy(temp1,mqttInfo.data,ln2);
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	4931      	ldr	r1, [pc, #196]	; (800ade4 <MQTT_Process+0x2cc>)
 800ad1e:	4b2a      	ldr	r3, [pc, #168]	; (800adc8 <MQTT_Process+0x2b0>)
 800ad20:	0018      	movs	r0, r3
 800ad22:	f00d fb5b 	bl	80183dc <strncpy>
			myStrSection(temp1,temp,10,',',1);
 800ad26:	4921      	ldr	r1, [pc, #132]	; (800adac <MQTT_Process+0x294>)
 800ad28:	4827      	ldr	r0, [pc, #156]	; (800adc8 <MQTT_Process+0x2b0>)
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	232c      	movs	r3, #44	; 0x2c
 800ad30:	220a      	movs	r2, #10
 800ad32:	f002 f96e 	bl	800d012 <myStrSection>
			Debug_Send(temp);
 800ad36:	4b1d      	ldr	r3, [pc, #116]	; (800adac <MQTT_Process+0x294>)
 800ad38:	0018      	movs	r0, r3
 800ad3a:	f7ff fc31 	bl	800a5a0 <Debug_Send>
			Debug_Send("\r\n");
 800ad3e:	4b20      	ldr	r3, [pc, #128]	; (800adc0 <MQTT_Process+0x2a8>)
 800ad40:	0018      	movs	r0, r3
 800ad42:	f7ff fc2d 	bl	800a5a0 <Debug_Send>
			if(strncmp(temp,"on",2) == 0){
 800ad46:	492d      	ldr	r1, [pc, #180]	; (800adfc <MQTT_Process+0x2e4>)
 800ad48:	4b18      	ldr	r3, [pc, #96]	; (800adac <MQTT_Process+0x294>)
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	0018      	movs	r0, r3
 800ad4e:	f00d fb34 	bl	80183ba <strncmp>
 800ad52:	1e03      	subs	r3, r0, #0
 800ad54:	d101      	bne.n	800ad5a <MQTT_Process+0x242>
				//MQTT_Publish_F("got light on");
				RelayOn();
 800ad56:	f001 fd0f 	bl	800c778 <RelayOn>
			}
			if(strncmp(temp,"off",3) == 0){
 800ad5a:	4929      	ldr	r1, [pc, #164]	; (800ae00 <MQTT_Process+0x2e8>)
 800ad5c:	4b13      	ldr	r3, [pc, #76]	; (800adac <MQTT_Process+0x294>)
 800ad5e:	2203      	movs	r2, #3
 800ad60:	0018      	movs	r0, r3
 800ad62:	f00d fb2a 	bl	80183ba <strncmp>
 800ad66:	1e03      	subs	r3, r0, #0
 800ad68:	d101      	bne.n	800ad6e <MQTT_Process+0x256>
				//MQTT_Publish_F("got light off");
				RelayOff();
 800ad6a:	f001 fd1b 	bl	800c7a4 <RelayOff>
			}
		}
		if (strncmp(mqttInfo.data,"retain",3) == 0){
 800ad6e:	4925      	ldr	r1, [pc, #148]	; (800ae04 <MQTT_Process+0x2ec>)
 800ad70:	4b1c      	ldr	r3, [pc, #112]	; (800ade4 <MQTT_Process+0x2cc>)
 800ad72:	2203      	movs	r2, #3
 800ad74:	0018      	movs	r0, r3
 800ad76:	f00d fb20 	bl	80183ba <strncmp>
			//MQTT_Publish_F("got retain");
		}
		if (strncmp(mqttInfo.data,"mag",3) == 0){
 800ad7a:	491c      	ldr	r1, [pc, #112]	; (800adec <MQTT_Process+0x2d4>)
 800ad7c:	4b19      	ldr	r3, [pc, #100]	; (800ade4 <MQTT_Process+0x2cc>)
 800ad7e:	2203      	movs	r2, #3
 800ad80:	0018      	movs	r0, r3
 800ad82:	f00d fb1a 	bl	80183ba <strncmp>

		}
		if (strncmp(mqttInfo.data,"mag",3) == 0){
 800ad86:	4919      	ldr	r1, [pc, #100]	; (800adec <MQTT_Process+0x2d4>)
 800ad88:	4b16      	ldr	r3, [pc, #88]	; (800ade4 <MQTT_Process+0x2cc>)
 800ad8a:	2203      	movs	r2, #3
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f00d fb14 	bl	80183ba <strncmp>

		}
	}
	gsmInfo.MQTT_Data = 0;
 800ad92:	4a09      	ldr	r2, [pc, #36]	; (800adb8 <MQTT_Process+0x2a0>)
 800ad94:	23c0      	movs	r3, #192	; 0xc0
 800ad96:	005b      	lsls	r3, r3, #1
 800ad98:	2100      	movs	r1, #0
 800ad9a:	50d1      	str	r1, [r2, r3]
}
 800ad9c:	46c0      	nop			; (mov r8, r8)
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	b008      	add	sp, #32
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	08019410 	.word	0x08019410
 800ada8:	20001900 	.word	0x20001900
 800adac:	200021a0 	.word	0x200021a0
 800adb0:	08019420 	.word	0x08019420
 800adb4:	08019380 	.word	0x08019380
 800adb8:	200019a8 	.word	0x200019a8
 800adbc:	08019424 	.word	0x08019424
 800adc0:	08018da4 	.word	0x08018da4
 800adc4:	20001620 	.word	0x20001620
 800adc8:	20002224 	.word	0x20002224
 800adcc:	08019430 	.word	0x08019430
 800add0:	08019440 	.word	0x08019440
 800add4:	0801944c 	.word	0x0801944c
 800add8:	20001998 	.word	0x20001998
 800addc:	20001638 	.word	0x20001638
 800ade0:	20001656 	.word	0x20001656
 800ade4:	2000166a 	.word	0x2000166a
 800ade8:	08019458 	.word	0x08019458
 800adec:	0801945c 	.word	0x0801945c
 800adf0:	08019460 	.word	0x08019460
 800adf4:	0801946c 	.word	0x0801946c
 800adf8:	08019474 	.word	0x08019474
 800adfc:	08019478 	.word	0x08019478
 800ae00:	0801947c 	.word	0x0801947c
 800ae04:	08019480 	.word	0x08019480

0800ae08 <procData>:




void procData(){		//process line
 800ae08:	b590      	push	{r4, r7, lr}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af02      	add	r7, sp, #8
	//Debug_Send("Rx:");
	//Debug_Send(procBuff);
	//Debug_Send("\r\n");
	//if (gsmInfo.FTP_Data == 0){
		strcpy(temp,"Rx1:");
 800ae0e:	4adc      	ldr	r2, [pc, #880]	; (800b180 <procData+0x378>)
 800ae10:	4bdc      	ldr	r3, [pc, #880]	; (800b184 <procData+0x37c>)
 800ae12:	0010      	movs	r0, r2
 800ae14:	0019      	movs	r1, r3
 800ae16:	2305      	movs	r3, #5
 800ae18:	001a      	movs	r2, r3
 800ae1a:	f00d fa87 	bl	801832c <memcpy>
		strcat(temp,procBuff);
 800ae1e:	4ada      	ldr	r2, [pc, #872]	; (800b188 <procData+0x380>)
 800ae20:	4bd7      	ldr	r3, [pc, #860]	; (800b180 <procData+0x378>)
 800ae22:	0011      	movs	r1, r2
 800ae24:	0018      	movs	r0, r3
 800ae26:	f00d fab3 	bl	8018390 <strcat>
		//strcat(temp,"\r\n");
		Debug_Send(temp);
 800ae2a:	4bd5      	ldr	r3, [pc, #852]	; (800b180 <procData+0x378>)
 800ae2c:	0018      	movs	r0, r3
 800ae2e:	f7ff fbb7 	bl	800a5a0 <Debug_Send>
	//}
	if (procBuff[0] == 0x02) Debug_Send("Unit connected to MQTT\r\n");
 800ae32:	4bd5      	ldr	r3, [pc, #852]	; (800b188 <procData+0x380>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d103      	bne.n	800ae42 <procData+0x3a>
 800ae3a:	4bd4      	ldr	r3, [pc, #848]	; (800b18c <procData+0x384>)
 800ae3c:	0018      	movs	r0, r3
 800ae3e:	f7ff fbaf 	bl	800a5a0 <Debug_Send>
		Debug_Send("MQTT1: ");
		Debug_Send(temp1);
		Debug_Send("\r\n");
		gsmInfo.MQTT_Data = 0;
	}*/
	uint8_t crc = 0;
 800ae42:	1dfb      	adds	r3, r7, #7
 800ae44:	2200      	movs	r2, #0
 800ae46:	701a      	strb	r2, [r3, #0]
	if (smsFlags.content == 1){
 800ae48:	4bd1      	ldr	r3, [pc, #836]	; (800b190 <procData+0x388>)
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d111      	bne.n	800ae74 <procData+0x6c>
		smsFlags.content = 0;
 800ae50:	4bcf      	ldr	r3, [pc, #828]	; (800b190 <procData+0x388>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	611a      	str	r2, [r3, #16]
		smsFlags.del = 1;
 800ae56:	4bce      	ldr	r3, [pc, #824]	; (800b190 <procData+0x388>)
 800ae58:	2201      	movs	r2, #1
 800ae5a:	621a      	str	r2, [r3, #32]
		//if(strncmp((char*)smsInfo.index,"1",2)==0){
			//sendData("Got index: ",UART0);
			//sendData(smsInfo.index,UART0);
			//sendData("\r\n",UART0);
			strcpy(smsInfo.content1,procBuff);	//store SMS content
 800ae5c:	4aca      	ldr	r2, [pc, #808]	; (800b188 <procData+0x380>)
 800ae5e:	4bcd      	ldr	r3, [pc, #820]	; (800b194 <procData+0x38c>)
 800ae60:	0011      	movs	r1, r2
 800ae62:	0018      	movs	r0, r3
 800ae64:	f00d faa1 	bl	80183aa <strcpy>
		}*/
		//sendData("SMS conent:",UART0);
		//sendData(smsInfo.content,UART0);
		//sendData("\r\n",UART0);
		//sendData("Got SMS content\r\n",UART0);
			Debug_Send("SMS Process Done\r\n");
 800ae68:	4bcb      	ldr	r3, [pc, #812]	; (800b198 <procData+0x390>)
 800ae6a:	0018      	movs	r0, r3
 800ae6c:	f7ff fb98 	bl	800a5a0 <Debug_Send>


	//sendData(procBuff,UART0);
	//sendData("\r\n",UART0);
	//else if(strncmp((char*)procBuff,"+SIM READY1",8)==0);		//unsolicited
}
 800ae70:	f000 fbd0 	bl	800b614 <procData+0x80c>
	else if (gsmInfo.imeiFlag > 1){
 800ae74:	4ac9      	ldr	r2, [pc, #804]	; (800b19c <procData+0x394>)
 800ae76:	23a8      	movs	r3, #168	; 0xa8
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	58d3      	ldr	r3, [r2, r3]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	dd19      	ble.n	800aeb4 <procData+0xac>
		Debug_Send("DEC imei\r\n");
 800ae80:	4bc7      	ldr	r3, [pc, #796]	; (800b1a0 <procData+0x398>)
 800ae82:	0018      	movs	r0, r3
 800ae84:	f7ff fb8c 	bl	800a5a0 <Debug_Send>
		len = strlen((char*)procBuff);
 800ae88:	4bbf      	ldr	r3, [pc, #764]	; (800b188 <procData+0x380>)
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	f7fe f946 	bl	800911c <strlen>
 800ae90:	0003      	movs	r3, r0
 800ae92:	603b      	str	r3, [r7, #0]
		if (len  >= 9)getIMEI();
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2b08      	cmp	r3, #8
 800ae98:	dd01      	ble.n	800ae9e <procData+0x96>
 800ae9a:	f000 fd53 	bl	800b944 <getIMEI>
		gsmInfo.imeiFlag--;
 800ae9e:	4abf      	ldr	r2, [pc, #764]	; (800b19c <procData+0x394>)
 800aea0:	23a8      	movs	r3, #168	; 0xa8
 800aea2:	005b      	lsls	r3, r3, #1
 800aea4:	58d3      	ldr	r3, [r2, r3]
 800aea6:	1e59      	subs	r1, r3, #1
 800aea8:	4abc      	ldr	r2, [pc, #752]	; (800b19c <procData+0x394>)
 800aeaa:	23a8      	movs	r3, #168	; 0xa8
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	50d1      	str	r1, [r2, r3]
}
 800aeb0:	f000 fbb0 	bl	800b614 <procData+0x80c>
	else if (gsmInfo.FTP_Data == 1){
 800aeb4:	4ab9      	ldr	r2, [pc, #740]	; (800b19c <procData+0x394>)
 800aeb6:	23b8      	movs	r3, #184	; 0xb8
 800aeb8:	005b      	lsls	r3, r3, #1
 800aeba:	58d3      	ldr	r3, [r2, r3]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d000      	beq.n	800aec2 <procData+0xba>
 800aec0:	e081      	b.n	800afc6 <procData+0x1be>
		 myLongStr(ftpReceived[0],temp,10,10);
 800aec2:	4bb8      	ldr	r3, [pc, #736]	; (800b1a4 <procData+0x39c>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	0018      	movs	r0, r3
 800aec8:	49ad      	ldr	r1, [pc, #692]	; (800b180 <procData+0x378>)
 800aeca:	230a      	movs	r3, #10
 800aecc:	220a      	movs	r2, #10
 800aece:	f002 f935 	bl	800d13c <myLongStr>
		 Debug_Send("First byte: ");
 800aed2:	4bb5      	ldr	r3, [pc, #724]	; (800b1a8 <procData+0x3a0>)
 800aed4:	0018      	movs	r0, r3
 800aed6:	f7ff fb63 	bl	800a5a0 <Debug_Send>
		 Debug_Send(temp);
 800aeda:	4ba9      	ldr	r3, [pc, #676]	; (800b180 <procData+0x378>)
 800aedc:	0018      	movs	r0, r3
 800aede:	f7ff fb5f 	bl	800a5a0 <Debug_Send>
		 Debug_Send("\r\n");
 800aee2:	4bb2      	ldr	r3, [pc, #712]	; (800b1ac <procData+0x3a4>)
 800aee4:	0018      	movs	r0, r3
 800aee6:	f7ff fb5b 	bl	800a5a0 <Debug_Send>
		 myLongStr(ftpReceived[1],temp,10,10);
 800aeea:	4bae      	ldr	r3, [pc, #696]	; (800b1a4 <procData+0x39c>)
 800aeec:	785b      	ldrb	r3, [r3, #1]
 800aeee:	0018      	movs	r0, r3
 800aef0:	49a3      	ldr	r1, [pc, #652]	; (800b180 <procData+0x378>)
 800aef2:	230a      	movs	r3, #10
 800aef4:	220a      	movs	r2, #10
 800aef6:	f002 f921 	bl	800d13c <myLongStr>
		 Debug_Send("Second byte: ");
 800aefa:	4bad      	ldr	r3, [pc, #692]	; (800b1b0 <procData+0x3a8>)
 800aefc:	0018      	movs	r0, r3
 800aefe:	f7ff fb4f 	bl	800a5a0 <Debug_Send>
		 Debug_Send(temp);
 800af02:	4b9f      	ldr	r3, [pc, #636]	; (800b180 <procData+0x378>)
 800af04:	0018      	movs	r0, r3
 800af06:	f7ff fb4b 	bl	800a5a0 <Debug_Send>
		 Debug_Send("\r\n");
 800af0a:	4ba8      	ldr	r3, [pc, #672]	; (800b1ac <procData+0x3a4>)
 800af0c:	0018      	movs	r0, r3
 800af0e:	f7ff fb47 	bl	800a5a0 <Debug_Send>
		 while (crc == 0){
 800af12:	e031      	b.n	800af78 <procData+0x170>
			flashWrite(gsmInfo.FTP_Save_Addr,ftpReceived, ftpReceive);
 800af14:	4aa1      	ldr	r2, [pc, #644]	; (800b19c <procData+0x394>)
 800af16:	23ba      	movs	r3, #186	; 0xba
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	58d0      	ldr	r0, [r2, r3]
 800af1c:	4ba5      	ldr	r3, [pc, #660]	; (800b1b4 <procData+0x3ac>)
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	4ba0      	ldr	r3, [pc, #640]	; (800b1a4 <procData+0x39c>)
 800af22:	0019      	movs	r1, r3
 800af24:	f001 ff7e 	bl	800ce24 <flashWrite>
			flashRead(gsmInfo.FTP_Save_Addr,temp, ftpReceive);
 800af28:	4a9c      	ldr	r2, [pc, #624]	; (800b19c <procData+0x394>)
 800af2a:	23ba      	movs	r3, #186	; 0xba
 800af2c:	005b      	lsls	r3, r3, #1
 800af2e:	58d0      	ldr	r0, [r2, r3]
 800af30:	4ba0      	ldr	r3, [pc, #640]	; (800b1b4 <procData+0x3ac>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	4b92      	ldr	r3, [pc, #584]	; (800b180 <procData+0x378>)
 800af36:	0019      	movs	r1, r3
 800af38:	f001 ffca 	bl	800ced0 <flashRead>
			ftpReceived[ftpReceive] = 0;
 800af3c:	4b9d      	ldr	r3, [pc, #628]	; (800b1b4 <procData+0x3ac>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a98      	ldr	r2, [pc, #608]	; (800b1a4 <procData+0x39c>)
 800af42:	2100      	movs	r1, #0
 800af44:	54d1      	strb	r1, [r2, r3]
			temp[ftpReceive] = 0;
 800af46:	4b9b      	ldr	r3, [pc, #620]	; (800b1b4 <procData+0x3ac>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a8d      	ldr	r2, [pc, #564]	; (800b180 <procData+0x378>)
 800af4c:	2100      	movs	r1, #0
 800af4e:	54d1      	strb	r1, [r2, r3]
			if (strcmp(ftpReceived,temp) == 0){
 800af50:	4a8b      	ldr	r2, [pc, #556]	; (800b180 <procData+0x378>)
 800af52:	4b94      	ldr	r3, [pc, #592]	; (800b1a4 <procData+0x39c>)
 800af54:	0011      	movs	r1, r2
 800af56:	0018      	movs	r0, r3
 800af58:	f7fe f8d6 	bl	8009108 <strcmp>
 800af5c:	0001      	movs	r1, r0
 800af5e:	1dfb      	adds	r3, r7, #7
 800af60:	1dfa      	adds	r2, r7, #7
 800af62:	7812      	ldrb	r2, [r2, #0]
 800af64:	701a      	strb	r2, [r3, #0]
 800af66:	2900      	cmp	r1, #0
 800af68:	d106      	bne.n	800af78 <procData+0x170>
				Debug_Send("Data written!\r\n");
 800af6a:	4b93      	ldr	r3, [pc, #588]	; (800b1b8 <procData+0x3b0>)
 800af6c:	0018      	movs	r0, r3
 800af6e:	f7ff fb17 	bl	800a5a0 <Debug_Send>
				crc = 1;
 800af72:	1dfb      	adds	r3, r7, #7
 800af74:	2201      	movs	r2, #1
 800af76:	701a      	strb	r2, [r3, #0]
		 while (crc == 0){
 800af78:	1dfb      	adds	r3, r7, #7
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0c9      	beq.n	800af14 <procData+0x10c>
		 crc = 0;
 800af80:	1dfb      	adds	r3, r7, #7
 800af82:	2200      	movs	r2, #0
 800af84:	701a      	strb	r2, [r3, #0]
			gsmInfo.FTP_Save_Addr += ftpReceive;
 800af86:	4a85      	ldr	r2, [pc, #532]	; (800b19c <procData+0x394>)
 800af88:	23ba      	movs	r3, #186	; 0xba
 800af8a:	005b      	lsls	r3, r3, #1
 800af8c:	58d3      	ldr	r3, [r2, r3]
 800af8e:	001a      	movs	r2, r3
 800af90:	4b88      	ldr	r3, [pc, #544]	; (800b1b4 <procData+0x3ac>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	18d3      	adds	r3, r2, r3
 800af96:	0019      	movs	r1, r3
 800af98:	4a80      	ldr	r2, [pc, #512]	; (800b19c <procData+0x394>)
 800af9a:	23ba      	movs	r3, #186	; 0xba
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	50d1      	str	r1, [r2, r3]
			gsmInfo.FTP_Size += ftpReceive;
 800afa0:	4a7e      	ldr	r2, [pc, #504]	; (800b19c <procData+0x394>)
 800afa2:	23bc      	movs	r3, #188	; 0xbc
 800afa4:	005b      	lsls	r3, r3, #1
 800afa6:	58d3      	ldr	r3, [r2, r3]
 800afa8:	001a      	movs	r2, r3
 800afaa:	4b82      	ldr	r3, [pc, #520]	; (800b1b4 <procData+0x3ac>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	18d3      	adds	r3, r2, r3
 800afb0:	0019      	movs	r1, r3
 800afb2:	4a7a      	ldr	r2, [pc, #488]	; (800b19c <procData+0x394>)
 800afb4:	23bc      	movs	r3, #188	; 0xbc
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	50d1      	str	r1, [r2, r3]
			gsmInfo.FTP_Data = 0;
 800afba:	4a78      	ldr	r2, [pc, #480]	; (800b19c <procData+0x394>)
 800afbc:	23b8      	movs	r3, #184	; 0xb8
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	2100      	movs	r1, #0
 800afc2:	50d1      	str	r1, [r2, r3]
}
 800afc4:	e326      	b.n	800b614 <procData+0x80c>
	else if ((gsmInfo.FTP_Data == 2)&&(procBuff[0] == ':')){
 800afc6:	4a75      	ldr	r2, [pc, #468]	; (800b19c <procData+0x394>)
 800afc8:	23b8      	movs	r3, #184	; 0xb8
 800afca:	005b      	lsls	r3, r3, #1
 800afcc:	58d3      	ldr	r3, [r2, r3]
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d139      	bne.n	800b046 <procData+0x23e>
 800afd2:	4b6d      	ldr	r3, [pc, #436]	; (800b188 <procData+0x380>)
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b3a      	cmp	r3, #58	; 0x3a
 800afd8:	d135      	bne.n	800b046 <procData+0x23e>
		Debug_Send("Write Data!\r\n");
 800afda:	4b78      	ldr	r3, [pc, #480]	; (800b1bc <procData+0x3b4>)
 800afdc:	0018      	movs	r0, r3
 800afde:	f7ff fadf 	bl	800a5a0 <Debug_Send>
		strcat(procBuff,"\r\n");
 800afe2:	4b69      	ldr	r3, [pc, #420]	; (800b188 <procData+0x380>)
 800afe4:	0018      	movs	r0, r3
 800afe6:	f7fe f899 	bl	800911c <strlen>
 800afea:	0003      	movs	r3, r0
 800afec:	001a      	movs	r2, r3
 800afee:	4b66      	ldr	r3, [pc, #408]	; (800b188 <procData+0x380>)
 800aff0:	18d2      	adds	r2, r2, r3
 800aff2:	4b6e      	ldr	r3, [pc, #440]	; (800b1ac <procData+0x3a4>)
 800aff4:	0010      	movs	r0, r2
 800aff6:	0019      	movs	r1, r3
 800aff8:	2303      	movs	r3, #3
 800affa:	001a      	movs	r2, r3
 800affc:	f00d f996 	bl	801832c <memcpy>
		flashWrite(gsmInfo.FTP_Save_Addr,(char*)procBuff, strlen((char*)procBuff));
 800b000:	4a66      	ldr	r2, [pc, #408]	; (800b19c <procData+0x394>)
 800b002:	23ba      	movs	r3, #186	; 0xba
 800b004:	005b      	lsls	r3, r3, #1
 800b006:	58d4      	ldr	r4, [r2, r3]
 800b008:	4b5f      	ldr	r3, [pc, #380]	; (800b188 <procData+0x380>)
 800b00a:	0018      	movs	r0, r3
 800b00c:	f7fe f886 	bl	800911c <strlen>
 800b010:	0002      	movs	r2, r0
 800b012:	4b5d      	ldr	r3, [pc, #372]	; (800b188 <procData+0x380>)
 800b014:	0019      	movs	r1, r3
 800b016:	0020      	movs	r0, r4
 800b018:	f001 ff04 	bl	800ce24 <flashWrite>
		gsmInfo.FTP_Save_Addr += strlen((char*)procBuff);
 800b01c:	4a5f      	ldr	r2, [pc, #380]	; (800b19c <procData+0x394>)
 800b01e:	23ba      	movs	r3, #186	; 0xba
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	58d3      	ldr	r3, [r2, r3]
 800b024:	001c      	movs	r4, r3
 800b026:	4b58      	ldr	r3, [pc, #352]	; (800b188 <procData+0x380>)
 800b028:	0018      	movs	r0, r3
 800b02a:	f7fe f877 	bl	800911c <strlen>
 800b02e:	0003      	movs	r3, r0
 800b030:	18e3      	adds	r3, r4, r3
 800b032:	0019      	movs	r1, r3
 800b034:	4a59      	ldr	r2, [pc, #356]	; (800b19c <procData+0x394>)
 800b036:	23ba      	movs	r3, #186	; 0xba
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	50d1      	str	r1, [r2, r3]
		ftpinc = 0;
 800b03c:	4b60      	ldr	r3, [pc, #384]	; (800b1c0 <procData+0x3b8>)
 800b03e:	2200      	movs	r2, #0
 800b040:	601a      	str	r2, [r3, #0]
	else if ((gsmInfo.FTP_Data == 2)&&(procBuff[0] == ':')){
 800b042:	46c0      	nop			; (mov r8, r8)
}
 800b044:	e2e6      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"AT+CGSN",7)==0){
 800b046:	495f      	ldr	r1, [pc, #380]	; (800b1c4 <procData+0x3bc>)
 800b048:	4b4f      	ldr	r3, [pc, #316]	; (800b188 <procData+0x380>)
 800b04a:	2207      	movs	r2, #7
 800b04c:	0018      	movs	r0, r3
 800b04e:	f00d f9b4 	bl	80183ba <strncmp>
 800b052:	1e03      	subs	r3, r0, #0
 800b054:	d105      	bne.n	800b062 <procData+0x25a>
			gsmInfo.imeiFlag = 5;
 800b056:	4a51      	ldr	r2, [pc, #324]	; (800b19c <procData+0x394>)
 800b058:	23a8      	movs	r3, #168	; 0xa8
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	2105      	movs	r1, #5
 800b05e:	50d1      	str	r1, [r2, r3]
}
 800b060:	e2d8      	b.n	800b614 <procData+0x80c>
	else if (gsmInfo.GPRS_Rec == 1){
 800b062:	4a4e      	ldr	r2, [pc, #312]	; (800b19c <procData+0x394>)
 800b064:	23ac      	movs	r3, #172	; 0xac
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	58d3      	ldr	r3, [r2, r3]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d102      	bne.n	800b074 <procData+0x26c>
		DataDecrypt();
 800b06e:	f001 f841 	bl	800c0f4 <DataDecrypt>
}
 800b072:	e2cf      	b.n	800b614 <procData+0x80c>
	else if (gsmInfo.GPRS_Rec > 1) gsmInfo.GPRS_Rec--;
 800b074:	4a49      	ldr	r2, [pc, #292]	; (800b19c <procData+0x394>)
 800b076:	23ac      	movs	r3, #172	; 0xac
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	58d3      	ldr	r3, [r2, r3]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	dd09      	ble.n	800b094 <procData+0x28c>
 800b080:	4a46      	ldr	r2, [pc, #280]	; (800b19c <procData+0x394>)
 800b082:	23ac      	movs	r3, #172	; 0xac
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	58d3      	ldr	r3, [r2, r3]
 800b088:	1e59      	subs	r1, r3, #1
 800b08a:	4a44      	ldr	r2, [pc, #272]	; (800b19c <procData+0x394>)
 800b08c:	23ac      	movs	r3, #172	; 0xac
 800b08e:	005b      	lsls	r3, r3, #1
 800b090:	50d1      	str	r1, [r2, r3]
}
 800b092:	e2bf      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+CREG: 0,1",10)==0)gsmState = SMSconfig;
 800b094:	494c      	ldr	r1, [pc, #304]	; (800b1c8 <procData+0x3c0>)
 800b096:	4b3c      	ldr	r3, [pc, #240]	; (800b188 <procData+0x380>)
 800b098:	220a      	movs	r2, #10
 800b09a:	0018      	movs	r0, r3
 800b09c:	f00d f98d 	bl	80183ba <strncmp>
 800b0a0:	1e03      	subs	r3, r0, #0
 800b0a2:	d103      	bne.n	800b0ac <procData+0x2a4>
 800b0a4:	4b49      	ldr	r3, [pc, #292]	; (800b1cc <procData+0x3c4>)
 800b0a6:	2206      	movs	r2, #6
 800b0a8:	701a      	strb	r2, [r3, #0]
}
 800b0aa:	e2b3      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+CREG: 1",8)==0)gsmState = SMSconfig;
 800b0ac:	4948      	ldr	r1, [pc, #288]	; (800b1d0 <procData+0x3c8>)
 800b0ae:	4b36      	ldr	r3, [pc, #216]	; (800b188 <procData+0x380>)
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	0018      	movs	r0, r3
 800b0b4:	f00d f981 	bl	80183ba <strncmp>
 800b0b8:	1e03      	subs	r3, r0, #0
 800b0ba:	d103      	bne.n	800b0c4 <procData+0x2bc>
 800b0bc:	4b43      	ldr	r3, [pc, #268]	; (800b1cc <procData+0x3c4>)
 800b0be:	2206      	movs	r2, #6
 800b0c0:	701a      	strb	r2, [r3, #0]
}
 800b0c2:	e2a7      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+CGREG: 1",9)==0) Debug_Send("GOT GPRS!!!!!!!\r\n");
 800b0c4:	4943      	ldr	r1, [pc, #268]	; (800b1d4 <procData+0x3cc>)
 800b0c6:	4b30      	ldr	r3, [pc, #192]	; (800b188 <procData+0x380>)
 800b0c8:	2209      	movs	r2, #9
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	f00d f975 	bl	80183ba <strncmp>
 800b0d0:	1e03      	subs	r3, r0, #0
 800b0d2:	d104      	bne.n	800b0de <procData+0x2d6>
 800b0d4:	4b40      	ldr	r3, [pc, #256]	; (800b1d8 <procData+0x3d0>)
 800b0d6:	0018      	movs	r0, r3
 800b0d8:	f7ff fa62 	bl	800a5a0 <Debug_Send>
}
 800b0dc:	e29a      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+CSQ",4)==0)getSignal();
 800b0de:	493f      	ldr	r1, [pc, #252]	; (800b1dc <procData+0x3d4>)
 800b0e0:	4b29      	ldr	r3, [pc, #164]	; (800b188 <procData+0x380>)
 800b0e2:	2204      	movs	r2, #4
 800b0e4:	0018      	movs	r0, r3
 800b0e6:	f00d f968 	bl	80183ba <strncmp>
 800b0ea:	1e03      	subs	r3, r0, #0
 800b0ec:	d102      	bne.n	800b0f4 <procData+0x2ec>
 800b0ee:	f000 fc71 	bl	800b9d4 <getSignal>
}
 800b0f2:	e28f      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+CMGS:",6)==0)smsFlags.send = 0;
 800b0f4:	493a      	ldr	r1, [pc, #232]	; (800b1e0 <procData+0x3d8>)
 800b0f6:	4b24      	ldr	r3, [pc, #144]	; (800b188 <procData+0x380>)
 800b0f8:	2206      	movs	r2, #6
 800b0fa:	0018      	movs	r0, r3
 800b0fc:	f00d f95d 	bl	80183ba <strncmp>
 800b100:	1e03      	subs	r3, r0, #0
 800b102:	d103      	bne.n	800b10c <procData+0x304>
 800b104:	4b22      	ldr	r3, [pc, #136]	; (800b190 <procData+0x388>)
 800b106:	2200      	movs	r2, #0
 800b108:	609a      	str	r2, [r3, #8]
}
 800b10a:	e283      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+CCID:",6)==0)getCCID();
 800b10c:	4935      	ldr	r1, [pc, #212]	; (800b1e4 <procData+0x3dc>)
 800b10e:	4b1e      	ldr	r3, [pc, #120]	; (800b188 <procData+0x380>)
 800b110:	2206      	movs	r2, #6
 800b112:	0018      	movs	r0, r3
 800b114:	f00d f951 	bl	80183ba <strncmp>
 800b118:	1e03      	subs	r3, r0, #0
 800b11a:	d102      	bne.n	800b122 <procData+0x31a>
 800b11c:	f000 fc48 	bl	800b9b0 <getCCID>
}
 800b120:	e278      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"OK",3)==0)	OK();
 800b122:	4a31      	ldr	r2, [pc, #196]	; (800b1e8 <procData+0x3e0>)
 800b124:	4b18      	ldr	r3, [pc, #96]	; (800b188 <procData+0x380>)
 800b126:	0011      	movs	r1, r2
 800b128:	0018      	movs	r0, r3
 800b12a:	f7fd ffed 	bl	8009108 <strcmp>
 800b12e:	1e03      	subs	r3, r0, #0
 800b130:	d102      	bne.n	800b138 <procData+0x330>
 800b132:	f000 ff57 	bl	800bfe4 <OK>
}
 800b136:	e26d      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+CGPADDR",8)==0)Context();
 800b138:	492c      	ldr	r1, [pc, #176]	; (800b1ec <procData+0x3e4>)
 800b13a:	4b13      	ldr	r3, [pc, #76]	; (800b188 <procData+0x380>)
 800b13c:	2208      	movs	r2, #8
 800b13e:	0018      	movs	r0, r3
 800b140:	f00d f93b 	bl	80183ba <strncmp>
 800b144:	1e03      	subs	r3, r0, #0
 800b146:	d102      	bne.n	800b14e <procData+0x346>
 800b148:	f000 fed8 	bl	800befc <Context>
}
 800b14c:	e262      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"CONNECT",6)==0){
 800b14e:	4928      	ldr	r1, [pc, #160]	; (800b1f0 <procData+0x3e8>)
 800b150:	4b0d      	ldr	r3, [pc, #52]	; (800b188 <procData+0x380>)
 800b152:	2206      	movs	r2, #6
 800b154:	0018      	movs	r0, r3
 800b156:	f00d f930 	bl	80183ba <strncmp>
 800b15a:	1e03      	subs	r3, r0, #0
 800b15c:	d000      	beq.n	800b160 <procData+0x358>
 800b15e:	e0b2      	b.n	800b2c6 <procData+0x4be>
		if (strlen(procBuff) < 7){
 800b160:	4b09      	ldr	r3, [pc, #36]	; (800b188 <procData+0x380>)
 800b162:	0018      	movs	r0, r3
 800b164:	f7fd ffda 	bl	800911c <strlen>
 800b168:	0003      	movs	r3, r0
 800b16a:	2b06      	cmp	r3, #6
 800b16c:	d842      	bhi.n	800b1f4 <procData+0x3ec>
			gsmInfo.gprsDataPending = 0;
 800b16e:	4b0b      	ldr	r3, [pc, #44]	; (800b19c <procData+0x394>)
 800b170:	2280      	movs	r2, #128	; 0x80
 800b172:	2100      	movs	r1, #0
 800b174:	5099      	str	r1, [r3, r2]
			gsmInfo.socket = 1;
 800b176:	4b09      	ldr	r3, [pc, #36]	; (800b19c <procData+0x394>)
 800b178:	2201      	movs	r2, #1
 800b17a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b17c:	e24a      	b.n	800b614 <procData+0x80c>
 800b17e:	46c0      	nop			; (mov r8, r8)
 800b180:	200021a0 	.word	0x200021a0
 800b184:	08019488 	.word	0x08019488
 800b188:	2000189c 	.word	0x2000189c
 800b18c:	08019490 	.word	0x08019490
 800b190:	200014c4 	.word	0x200014c4
 800b194:	200016cc 	.word	0x200016cc
 800b198:	080194ac 	.word	0x080194ac
 800b19c:	200019a8 	.word	0x200019a8
 800b1a0:	080194c0 	.word	0x080194c0
 800b1a4:	20001b68 	.word	0x20001b68
 800b1a8:	080194cc 	.word	0x080194cc
 800b1ac:	08018da4 	.word	0x08018da4
 800b1b0:	080194dc 	.word	0x080194dc
 800b1b4:	20001c00 	.word	0x20001c00
 800b1b8:	080194ec 	.word	0x080194ec
 800b1bc:	080194fc 	.word	0x080194fc
 800b1c0:	200000c8 	.word	0x200000c8
 800b1c4:	0801950c 	.word	0x0801950c
 800b1c8:	08019514 	.word	0x08019514
 800b1cc:	200000c0 	.word	0x200000c0
 800b1d0:	08019520 	.word	0x08019520
 800b1d4:	0801952c 	.word	0x0801952c
 800b1d8:	08019538 	.word	0x08019538
 800b1dc:	0801954c 	.word	0x0801954c
 800b1e0:	08019554 	.word	0x08019554
 800b1e4:	0801955c 	.word	0x0801955c
 800b1e8:	08019564 	.word	0x08019564
 800b1ec:	08019568 	.word	0x08019568
 800b1f0:	08019574 	.word	0x08019574
			if (ftpRead == 1){
 800b1f4:	4bca      	ldr	r3, [pc, #808]	; (800b520 <procData+0x718>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d13f      	bne.n	800b27c <procData+0x474>
				ftpinc = 0;
 800b1fc:	4bc9      	ldr	r3, [pc, #804]	; (800b524 <procData+0x71c>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	601a      	str	r2, [r3, #0]
				ftpPad = 0;
 800b202:	4bc9      	ldr	r3, [pc, #804]	; (800b528 <procData+0x720>)
 800b204:	2200      	movs	r2, #0
 800b206:	701a      	strb	r2, [r3, #0]
				myStrSection(procBuff,temp,10,' ',1);
 800b208:	49c8      	ldr	r1, [pc, #800]	; (800b52c <procData+0x724>)
 800b20a:	48c9      	ldr	r0, [pc, #804]	; (800b530 <procData+0x728>)
 800b20c:	2301      	movs	r3, #1
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	2320      	movs	r3, #32
 800b212:	220a      	movs	r2, #10
 800b214:	f001 fefd 	bl	800d012 <myStrSection>
				ftpReceive = atoi(temp);
 800b218:	4bc4      	ldr	r3, [pc, #784]	; (800b52c <procData+0x724>)
 800b21a:	0018      	movs	r0, r3
 800b21c:	f00d f856 	bl	80182cc <atoi>
 800b220:	0003      	movs	r3, r0
 800b222:	001a      	movs	r2, r3
 800b224:	4bc3      	ldr	r3, [pc, #780]	; (800b534 <procData+0x72c>)
 800b226:	601a      	str	r2, [r3, #0]
				gsmInfo.FTP_Data = 1;
 800b228:	4ac3      	ldr	r2, [pc, #780]	; (800b538 <procData+0x730>)
 800b22a:	23b8      	movs	r3, #184	; 0xb8
 800b22c:	005b      	lsls	r3, r3, #1
 800b22e:	2101      	movs	r1, #1
 800b230:	50d1      	str	r1, [r2, r3]
				getFtp();
 800b232:	f000 fa01 	bl	800b638 <getFtp>
				if (ftpPacket > ftpReceive){
 800b236:	4bc1      	ldr	r3, [pc, #772]	; (800b53c <procData+0x734>)
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	4bbe      	ldr	r3, [pc, #760]	; (800b534 <procData+0x72c>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d92f      	bls.n	800b2a2 <procData+0x49a>
					flashWrite(eepromOrigin + 900,"UL",2);
 800b242:	4bbf      	ldr	r3, [pc, #764]	; (800b540 <procData+0x738>)
 800b244:	48bf      	ldr	r0, [pc, #764]	; (800b544 <procData+0x73c>)
 800b246:	2202      	movs	r2, #2
 800b248:	0019      	movs	r1, r3
 800b24a:	f001 fdeb 	bl	800ce24 <flashWrite>
					Debug_Send("FTP DONE!!!!!!!\r\n");
 800b24e:	4bbe      	ldr	r3, [pc, #760]	; (800b548 <procData+0x740>)
 800b250:	0018      	movs	r0, r3
 800b252:	f7ff f9a5 	bl	800a5a0 <Debug_Send>
					gsmInfo.FS_Connect = 0;
 800b256:	4ab8      	ldr	r2, [pc, #736]	; (800b538 <procData+0x730>)
 800b258:	23b6      	movs	r3, #182	; 0xb6
 800b25a:	005b      	lsls	r3, r3, #1
 800b25c:	2100      	movs	r1, #0
 800b25e:	50d1      	str	r1, [r2, r3]
					ftpRead = 0;
 800b260:	4baf      	ldr	r3, [pc, #700]	; (800b520 <procData+0x718>)
 800b262:	2200      	movs	r2, #0
 800b264:	701a      	strb	r2, [r3, #0]
					gsmState = FS_Close;
 800b266:	4bb9      	ldr	r3, [pc, #740]	; (800b54c <procData+0x744>)
 800b268:	2233      	movs	r2, #51	; 0x33
 800b26a:	701a      	strb	r2, [r3, #0]
					gsmInfo.FTP_Save_Addr = 1000;
 800b26c:	4ab2      	ldr	r2, [pc, #712]	; (800b538 <procData+0x730>)
 800b26e:	23ba      	movs	r3, #186	; 0xba
 800b270:	005b      	lsls	r3, r3, #1
 800b272:	21fa      	movs	r1, #250	; 0xfa
 800b274:	0089      	lsls	r1, r1, #2
 800b276:	50d1      	str	r1, [r2, r3]
					NVIC_SystemReset();
 800b278:	f7fd ffee 	bl	8009258 <__NVIC_SystemReset>
				gsmInfo.gprsDataPending = 0;
 800b27c:	4bae      	ldr	r3, [pc, #696]	; (800b538 <procData+0x730>)
 800b27e:	2280      	movs	r2, #128	; 0x80
 800b280:	2100      	movs	r1, #0
 800b282:	5099      	str	r1, [r3, r2]
				gsmInfo.socket = 1;
 800b284:	4bac      	ldr	r3, [pc, #688]	; (800b538 <procData+0x730>)
 800b286:	2201      	movs	r2, #1
 800b288:	679a      	str	r2, [r3, #120]	; 0x78
				gsmState = GPRS_Send;
 800b28a:	4bb0      	ldr	r3, [pc, #704]	; (800b54c <procData+0x744>)
 800b28c:	221c      	movs	r2, #28
 800b28e:	701a      	strb	r2, [r3, #0]
				Debug_Send("connected1\r\n");
 800b290:	4baf      	ldr	r3, [pc, #700]	; (800b550 <procData+0x748>)
 800b292:	0018      	movs	r0, r3
 800b294:	f7ff f984 	bl	800a5a0 <Debug_Send>
				gsmInfo.FTP_Data = 2;
 800b298:	4aa7      	ldr	r2, [pc, #668]	; (800b538 <procData+0x730>)
 800b29a:	23b8      	movs	r3, #184	; 0xb8
 800b29c:	005b      	lsls	r3, r3, #1
 800b29e:	2102      	movs	r1, #2
 800b2a0:	50d1      	str	r1, [r2, r3]
			if (gsmInfo.MQTT == 1){
 800b2a2:	4aa5      	ldr	r2, [pc, #660]	; (800b538 <procData+0x730>)
 800b2a4:	23be      	movs	r3, #190	; 0xbe
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	58d3      	ldr	r3, [r2, r3]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d000      	beq.n	800b2b0 <procData+0x4a8>
 800b2ae:	e1b1      	b.n	800b614 <procData+0x80c>
				Debug_Send("Open MQTT server\r\n");
 800b2b0:	4ba8      	ldr	r3, [pc, #672]	; (800b554 <procData+0x74c>)
 800b2b2:	0018      	movs	r0, r3
 800b2b4:	f7ff f974 	bl	800a5a0 <Debug_Send>
				gsmState = GPRS_Send;
 800b2b8:	4ba4      	ldr	r3, [pc, #656]	; (800b54c <procData+0x744>)
 800b2ba:	221c      	movs	r2, #28
 800b2bc:	701a      	strb	r2, [r3, #0]
				mqttState = Connect;
 800b2be:	4ba6      	ldr	r3, [pc, #664]	; (800b558 <procData+0x750>)
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	701a      	strb	r2, [r3, #0]
}
 800b2c4:	e1a6      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"ALREADY CONNECT",15)==0){
 800b2c6:	49a5      	ldr	r1, [pc, #660]	; (800b55c <procData+0x754>)
 800b2c8:	4b99      	ldr	r3, [pc, #612]	; (800b530 <procData+0x728>)
 800b2ca:	220f      	movs	r2, #15
 800b2cc:	0018      	movs	r0, r3
 800b2ce:	f00d f874 	bl	80183ba <strncmp>
 800b2d2:	1e03      	subs	r3, r0, #0
 800b2d4:	d106      	bne.n	800b2e4 <procData+0x4dc>
		gsmState = SocketClose;
 800b2d6:	4b9d      	ldr	r3, [pc, #628]	; (800b54c <procData+0x744>)
 800b2d8:	2216      	movs	r2, #22
 800b2da:	701a      	strb	r2, [r3, #0]
		gsmInfo.socket = 0;
 800b2dc:	4b96      	ldr	r3, [pc, #600]	; (800b538 <procData+0x730>)
 800b2de:	2200      	movs	r2, #0
 800b2e0:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b2e2:	e197      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"CONNECT FAIL",13)==0){
 800b2e4:	4a9e      	ldr	r2, [pc, #632]	; (800b560 <procData+0x758>)
 800b2e6:	4b92      	ldr	r3, [pc, #584]	; (800b530 <procData+0x728>)
 800b2e8:	0011      	movs	r1, r2
 800b2ea:	0018      	movs	r0, r3
 800b2ec:	f7fd ff0c 	bl	8009108 <strcmp>
 800b2f0:	1e03      	subs	r3, r0, #0
 800b2f2:	d103      	bne.n	800b2fc <procData+0x4f4>
		gsmState = GPRS_Off;
 800b2f4:	4b95      	ldr	r3, [pc, #596]	; (800b54c <procData+0x744>)
 800b2f6:	2214      	movs	r2, #20
 800b2f8:	701a      	strb	r2, [r3, #0]
}
 800b2fa:	e18b      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"CONNECT OK",11)==0){
 800b2fc:	4a99      	ldr	r2, [pc, #612]	; (800b564 <procData+0x75c>)
 800b2fe:	4b8c      	ldr	r3, [pc, #560]	; (800b530 <procData+0x728>)
 800b300:	0011      	movs	r1, r2
 800b302:	0018      	movs	r0, r3
 800b304:	f7fd ff00 	bl	8009108 <strcmp>
 800b308:	1e03      	subs	r3, r0, #0
 800b30a:	d10e      	bne.n	800b32a <procData+0x522>
		gsmInfo.gprsDataPending = 0;
 800b30c:	4b8a      	ldr	r3, [pc, #552]	; (800b538 <procData+0x730>)
 800b30e:	2280      	movs	r2, #128	; 0x80
 800b310:	2100      	movs	r1, #0
 800b312:	5099      	str	r1, [r3, r2]
		gsmInfo.socket = 1;
 800b314:	4b88      	ldr	r3, [pc, #544]	; (800b538 <procData+0x730>)
 800b316:	2201      	movs	r2, #1
 800b318:	679a      	str	r2, [r3, #120]	; 0x78
		gsmState = GPRS_Send;
 800b31a:	4b8c      	ldr	r3, [pc, #560]	; (800b54c <procData+0x744>)
 800b31c:	221c      	movs	r2, #28
 800b31e:	701a      	strb	r2, [r3, #0]
		Debug_Send("connected\r\n");
 800b320:	4b91      	ldr	r3, [pc, #580]	; (800b568 <procData+0x760>)
 800b322:	0018      	movs	r0, r3
 800b324:	f7ff f93c 	bl	800a5a0 <Debug_Send>
}
 800b328:	e174      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"SEND OK",7)==0){	//data sent
 800b32a:	4990      	ldr	r1, [pc, #576]	; (800b56c <procData+0x764>)
 800b32c:	4b80      	ldr	r3, [pc, #512]	; (800b530 <procData+0x728>)
 800b32e:	2207      	movs	r2, #7
 800b330:	0018      	movs	r0, r3
 800b332:	f00d f842 	bl	80183ba <strncmp>
 800b336:	1e03      	subs	r3, r0, #0
 800b338:	d10d      	bne.n	800b356 <procData+0x54e>
		gsmInfo.MQTT_Data = 1;
 800b33a:	4a7f      	ldr	r2, [pc, #508]	; (800b538 <procData+0x730>)
 800b33c:	23c0      	movs	r3, #192	; 0xc0
 800b33e:	005b      	lsls	r3, r3, #1
 800b340:	2101      	movs	r1, #1
 800b342:	50d1      	str	r1, [r2, r3]
		if (mqttFlag.connect == 1) mqttFlag.connect = 2;
 800b344:	4b8a      	ldr	r3, [pc, #552]	; (800b570 <procData+0x768>)
 800b346:	78db      	ldrb	r3, [r3, #3]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d000      	beq.n	800b34e <procData+0x546>
 800b34c:	e162      	b.n	800b614 <procData+0x80c>
 800b34e:	4b88      	ldr	r3, [pc, #544]	; (800b570 <procData+0x768>)
 800b350:	2202      	movs	r2, #2
 800b352:	70da      	strb	r2, [r3, #3]
}
 800b354:	e15e      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"CLOSED",6)==0){	//socket closed by remote
 800b356:	4987      	ldr	r1, [pc, #540]	; (800b574 <procData+0x76c>)
 800b358:	4b75      	ldr	r3, [pc, #468]	; (800b530 <procData+0x728>)
 800b35a:	2206      	movs	r2, #6
 800b35c:	0018      	movs	r0, r3
 800b35e:	f00d f82c 	bl	80183ba <strncmp>
 800b362:	1e03      	subs	r3, r0, #0
 800b364:	d110      	bne.n	800b388 <procData+0x580>
		gsmInfo.socket = 0;
 800b366:	4b74      	ldr	r3, [pc, #464]	; (800b538 <procData+0x730>)
 800b368:	2200      	movs	r2, #0
 800b36a:	679a      	str	r2, [r3, #120]	; 0x78
		gsmTimer = 0;
 800b36c:	4b82      	ldr	r3, [pc, #520]	; (800b578 <procData+0x770>)
 800b36e:	2200      	movs	r2, #0
 800b370:	601a      	str	r2, [r3, #0]
		Debug_Send("Socket closed\r\n");
 800b372:	4b82      	ldr	r3, [pc, #520]	; (800b57c <procData+0x774>)
 800b374:	0018      	movs	r0, r3
 800b376:	f7ff f913 	bl	800a5a0 <Debug_Send>
		gsmState = GPRS_Off;
 800b37a:	4b74      	ldr	r3, [pc, #464]	; (800b54c <procData+0x744>)
 800b37c:	2214      	movs	r2, #20
 800b37e:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 800b380:	4b72      	ldr	r3, [pc, #456]	; (800b54c <procData+0x744>)
 800b382:	2200      	movs	r2, #0
 800b384:	701a      	strb	r2, [r3, #0]
}
 800b386:	e145      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"CLOSE OK",8)==0){
 800b388:	497d      	ldr	r1, [pc, #500]	; (800b580 <procData+0x778>)
 800b38a:	4b69      	ldr	r3, [pc, #420]	; (800b530 <procData+0x728>)
 800b38c:	2208      	movs	r2, #8
 800b38e:	0018      	movs	r0, r3
 800b390:	f00d f813 	bl	80183ba <strncmp>
 800b394:	1e03      	subs	r3, r0, #0
 800b396:	d110      	bne.n	800b3ba <procData+0x5b2>
		gsmInfo.socket = 0;
 800b398:	4b67      	ldr	r3, [pc, #412]	; (800b538 <procData+0x730>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	679a      	str	r2, [r3, #120]	; 0x78
		gsmTimer = 0;
 800b39e:	4b76      	ldr	r3, [pc, #472]	; (800b578 <procData+0x770>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	601a      	str	r2, [r3, #0]
		Debug_Send("Socket forced closed\r\n");
 800b3a4:	4b77      	ldr	r3, [pc, #476]	; (800b584 <procData+0x77c>)
 800b3a6:	0018      	movs	r0, r3
 800b3a8:	f7ff f8fa 	bl	800a5a0 <Debug_Send>
		gsmState = GPRS_Off;
 800b3ac:	4b67      	ldr	r3, [pc, #412]	; (800b54c <procData+0x744>)
 800b3ae:	2214      	movs	r2, #20
 800b3b0:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 800b3b2:	4b66      	ldr	r3, [pc, #408]	; (800b54c <procData+0x744>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
}
 800b3b8:	e12c      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFTPOPEN:",10)==0)FTP_OpenF();
 800b3ba:	4973      	ldr	r1, [pc, #460]	; (800b588 <procData+0x780>)
 800b3bc:	4b5c      	ldr	r3, [pc, #368]	; (800b530 <procData+0x728>)
 800b3be:	220a      	movs	r2, #10
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	f00c fffa 	bl	80183ba <strncmp>
 800b3c6:	1e03      	subs	r3, r0, #0
 800b3c8:	d102      	bne.n	800b3d0 <procData+0x5c8>
 800b3ca:	f000 f9f5 	bl	800b7b8 <FTP_OpenF>
}
 800b3ce:	e121      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFTPSTAT:",10)==0)FTP_StatusF();
 800b3d0:	496e      	ldr	r1, [pc, #440]	; (800b58c <procData+0x784>)
 800b3d2:	4b57      	ldr	r3, [pc, #348]	; (800b530 <procData+0x728>)
 800b3d4:	220a      	movs	r2, #10
 800b3d6:	0018      	movs	r0, r3
 800b3d8:	f00c ffef 	bl	80183ba <strncmp>
 800b3dc:	1e03      	subs	r3, r0, #0
 800b3de:	d102      	bne.n	800b3e6 <procData+0x5de>
 800b3e0:	f000 fa2a 	bl	800b838 <FTP_StatusF>
}
 800b3e4:	e116      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFTPNLST",9)==0)gsmState = FTP_Config;
 800b3e6:	496a      	ldr	r1, [pc, #424]	; (800b590 <procData+0x788>)
 800b3e8:	4b51      	ldr	r3, [pc, #324]	; (800b530 <procData+0x728>)
 800b3ea:	2209      	movs	r2, #9
 800b3ec:	0018      	movs	r0, r3
 800b3ee:	f00c ffe4 	bl	80183ba <strncmp>
 800b3f2:	1e03      	subs	r3, r0, #0
 800b3f4:	d103      	bne.n	800b3fe <procData+0x5f6>
 800b3f6:	4b55      	ldr	r3, [pc, #340]	; (800b54c <procData+0x744>)
 800b3f8:	222a      	movs	r2, #42	; 0x2a
 800b3fa:	701a      	strb	r2, [r3, #0]
}
 800b3fc:	e10a      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFTPGET",8)==0)gsmState = FS_Storage;
 800b3fe:	4965      	ldr	r1, [pc, #404]	; (800b594 <procData+0x78c>)
 800b400:	4b4b      	ldr	r3, [pc, #300]	; (800b530 <procData+0x728>)
 800b402:	2208      	movs	r2, #8
 800b404:	0018      	movs	r0, r3
 800b406:	f00c ffd8 	bl	80183ba <strncmp>
 800b40a:	1e03      	subs	r3, r0, #0
 800b40c:	d103      	bne.n	800b416 <procData+0x60e>
 800b40e:	4b4f      	ldr	r3, [pc, #316]	; (800b54c <procData+0x744>)
 800b410:	222d      	movs	r2, #45	; 0x2d
 800b412:	701a      	strb	r2, [r3, #0]
}
 800b414:	e0fe      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFLDS",6)==0)gsmState = FS_SList;
 800b416:	4960      	ldr	r1, [pc, #384]	; (800b598 <procData+0x790>)
 800b418:	4b45      	ldr	r3, [pc, #276]	; (800b530 <procData+0x728>)
 800b41a:	2206      	movs	r2, #6
 800b41c:	0018      	movs	r0, r3
 800b41e:	f00c ffcc 	bl	80183ba <strncmp>
 800b422:	1e03      	subs	r3, r0, #0
 800b424:	d103      	bne.n	800b42e <procData+0x626>
 800b426:	4b49      	ldr	r3, [pc, #292]	; (800b54c <procData+0x744>)
 800b428:	222e      	movs	r2, #46	; 0x2e
 800b42a:	701a      	strb	r2, [r3, #0]
}
 800b42c:	e0f2      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFLST",6)==0)FileSize();
 800b42e:	495b      	ldr	r1, [pc, #364]	; (800b59c <procData+0x794>)
 800b430:	4b3f      	ldr	r3, [pc, #252]	; (800b530 <procData+0x728>)
 800b432:	2206      	movs	r2, #6
 800b434:	0018      	movs	r0, r3
 800b436:	f00c ffc0 	bl	80183ba <strncmp>
 800b43a:	1e03      	subs	r3, r0, #0
 800b43c:	d102      	bne.n	800b444 <procData+0x63c>
 800b43e:	f000 f945 	bl	800b6cc <FileSize>
}
 800b442:	e0e7      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFOPEN",7)==0) FS_Open_F();
 800b444:	4956      	ldr	r1, [pc, #344]	; (800b5a0 <procData+0x798>)
 800b446:	4b3a      	ldr	r3, [pc, #232]	; (800b530 <procData+0x728>)
 800b448:	2207      	movs	r2, #7
 800b44a:	0018      	movs	r0, r3
 800b44c:	f00c ffb5 	bl	80183ba <strncmp>
 800b450:	1e03      	subs	r3, r0, #0
 800b452:	d102      	bne.n	800b45a <procData+0x652>
 800b454:	f000 f982 	bl	800b75c <FS_Open_F>
}
 800b458:	e0dc      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFDWL",6)==0)gsmState = FTP_Close;
 800b45a:	4952      	ldr	r1, [pc, #328]	; (800b5a4 <procData+0x79c>)
 800b45c:	4b34      	ldr	r3, [pc, #208]	; (800b530 <procData+0x728>)
 800b45e:	2206      	movs	r2, #6
 800b460:	0018      	movs	r0, r3
 800b462:	f00c ffaa 	bl	80183ba <strncmp>
 800b466:	1e03      	subs	r3, r0, #0
 800b468:	d103      	bne.n	800b472 <procData+0x66a>
 800b46a:	4b38      	ldr	r3, [pc, #224]	; (800b54c <procData+0x744>)
 800b46c:	2226      	movs	r2, #38	; 0x26
 800b46e:	701a      	strb	r2, [r3, #0]
}
 800b470:	e0d0      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFTPSIZE",9)==0)gsmState = FTP_Close;
 800b472:	494d      	ldr	r1, [pc, #308]	; (800b5a8 <procData+0x7a0>)
 800b474:	4b2e      	ldr	r3, [pc, #184]	; (800b530 <procData+0x728>)
 800b476:	2209      	movs	r2, #9
 800b478:	0018      	movs	r0, r3
 800b47a:	f00c ff9e 	bl	80183ba <strncmp>
 800b47e:	1e03      	subs	r3, r0, #0
 800b480:	d103      	bne.n	800b48a <procData+0x682>
 800b482:	4b32      	ldr	r3, [pc, #200]	; (800b54c <procData+0x744>)
 800b484:	2226      	movs	r2, #38	; 0x26
 800b486:	701a      	strb	r2, [r3, #0]
}
 800b488:	e0c4      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFTPCLOSE",10)==0){
 800b48a:	4948      	ldr	r1, [pc, #288]	; (800b5ac <procData+0x7a4>)
 800b48c:	4b28      	ldr	r3, [pc, #160]	; (800b530 <procData+0x728>)
 800b48e:	220a      	movs	r2, #10
 800b490:	0018      	movs	r0, r3
 800b492:	f00c ff92 	bl	80183ba <strncmp>
 800b496:	1e03      	subs	r3, r0, #0
 800b498:	d108      	bne.n	800b4ac <procData+0x6a4>
		gsmInfo.FTP_Open = 0;
 800b49a:	4a27      	ldr	r2, [pc, #156]	; (800b538 <procData+0x730>)
 800b49c:	23b2      	movs	r3, #178	; 0xb2
 800b49e:	005b      	lsls	r3, r3, #1
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	50d1      	str	r1, [r2, r3]
		gsmState = GPRS_Off;
 800b4a4:	4b29      	ldr	r3, [pc, #164]	; (800b54c <procData+0x744>)
 800b4a6:	2214      	movs	r2, #20
 800b4a8:	701a      	strb	r2, [r3, #0]
}
 800b4aa:	e0b3      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+QFTPSIZE",9)==0) gsmState = FTP_Download;
 800b4ac:	493e      	ldr	r1, [pc, #248]	; (800b5a8 <procData+0x7a0>)
 800b4ae:	4b20      	ldr	r3, [pc, #128]	; (800b530 <procData+0x728>)
 800b4b0:	2209      	movs	r2, #9
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	f00c ff81 	bl	80183ba <strncmp>
 800b4b8:	1e03      	subs	r3, r0, #0
 800b4ba:	d103      	bne.n	800b4c4 <procData+0x6bc>
 800b4bc:	4b23      	ldr	r3, [pc, #140]	; (800b54c <procData+0x744>)
 800b4be:	2227      	movs	r2, #39	; 0x27
 800b4c0:	701a      	strb	r2, [r3, #0]
}
 800b4c2:	e0a7      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+MIPCLOSE",9)==0)gsmState = GPRS_Off;
 800b4c4:	493a      	ldr	r1, [pc, #232]	; (800b5b0 <procData+0x7a8>)
 800b4c6:	4b1a      	ldr	r3, [pc, #104]	; (800b530 <procData+0x728>)
 800b4c8:	2209      	movs	r2, #9
 800b4ca:	0018      	movs	r0, r3
 800b4cc:	f00c ff75 	bl	80183ba <strncmp>
 800b4d0:	1e03      	subs	r3, r0, #0
 800b4d2:	d103      	bne.n	800b4dc <procData+0x6d4>
 800b4d4:	4b1d      	ldr	r3, [pc, #116]	; (800b54c <procData+0x744>)
 800b4d6:	2214      	movs	r2, #20
 800b4d8:	701a      	strb	r2, [r3, #0]
}
 800b4da:	e09b      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"SEND FAIL",8)==0)gsmState = GPRS_Off;
 800b4dc:	4935      	ldr	r1, [pc, #212]	; (800b5b4 <procData+0x7ac>)
 800b4de:	4b14      	ldr	r3, [pc, #80]	; (800b530 <procData+0x728>)
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	0018      	movs	r0, r3
 800b4e4:	f00c ff69 	bl	80183ba <strncmp>
 800b4e8:	1e03      	subs	r3, r0, #0
 800b4ea:	d103      	bne.n	800b4f4 <procData+0x6ec>
 800b4ec:	4b17      	ldr	r3, [pc, #92]	; (800b54c <procData+0x744>)
 800b4ee:	2214      	movs	r2, #20
 800b4f0:	701a      	strb	r2, [r3, #0]
}
 800b4f2:	e08f      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+CMGL",5)==0) GotSMS();
 800b4f4:	4930      	ldr	r1, [pc, #192]	; (800b5b8 <procData+0x7b0>)
 800b4f6:	4b0e      	ldr	r3, [pc, #56]	; (800b530 <procData+0x728>)
 800b4f8:	2205      	movs	r2, #5
 800b4fa:	0018      	movs	r0, r3
 800b4fc:	f00c ff5d 	bl	80183ba <strncmp>
 800b500:	1e03      	subs	r3, r0, #0
 800b502:	d102      	bne.n	800b50a <procData+0x702>
 800b504:	f000 fd3e 	bl	800bf84 <GotSMS>
}
 800b508:	e084      	b.n	800b614 <procData+0x80c>
	else if(strncmp((char*)procBuff,"+CPIN: NOT READY",16)==0){
 800b50a:	492c      	ldr	r1, [pc, #176]	; (800b5bc <procData+0x7b4>)
 800b50c:	4b08      	ldr	r3, [pc, #32]	; (800b530 <procData+0x728>)
 800b50e:	2210      	movs	r2, #16
 800b510:	0018      	movs	r0, r3
 800b512:	f00c ff52 	bl	80183ba <strncmp>
 800b516:	1e03      	subs	r3, r0, #0
 800b518:	d152      	bne.n	800b5c0 <procData+0x7b8>
		GSM_Init();
 800b51a:	f7fd feaf 	bl	800927c <GSM_Init>
}
 800b51e:	e079      	b.n	800b614 <procData+0x80c>
 800b520:	20001c04 	.word	0x20001c04
 800b524:	200000c8 	.word	0x200000c8
 800b528:	20001c24 	.word	0x20001c24
 800b52c:	200021a0 	.word	0x200021a0
 800b530:	2000189c 	.word	0x2000189c
 800b534:	20001c00 	.word	0x20001c00
 800b538:	200019a8 	.word	0x200019a8
 800b53c:	200000cc 	.word	0x200000cc
 800b540:	0801957c 	.word	0x0801957c
 800b544:	0000ede4 	.word	0x0000ede4
 800b548:	08019580 	.word	0x08019580
 800b54c:	200000c0 	.word	0x200000c0
 800b550:	08019594 	.word	0x08019594
 800b554:	080195a4 	.word	0x080195a4
 800b558:	200000d0 	.word	0x200000d0
 800b55c:	080195b8 	.word	0x080195b8
 800b560:	080195c8 	.word	0x080195c8
 800b564:	080195d8 	.word	0x080195d8
 800b568:	080195e4 	.word	0x080195e4
 800b56c:	080195f0 	.word	0x080195f0
 800b570:	20001998 	.word	0x20001998
 800b574:	080195f8 	.word	0x080195f8
 800b578:	20001878 	.word	0x20001878
 800b57c:	08019600 	.word	0x08019600
 800b580:	08019610 	.word	0x08019610
 800b584:	0801961c 	.word	0x0801961c
 800b588:	08019634 	.word	0x08019634
 800b58c:	08019640 	.word	0x08019640
 800b590:	0801964c 	.word	0x0801964c
 800b594:	08019658 	.word	0x08019658
 800b598:	08019664 	.word	0x08019664
 800b59c:	0801966c 	.word	0x0801966c
 800b5a0:	08019674 	.word	0x08019674
 800b5a4:	0801967c 	.word	0x0801967c
 800b5a8:	08019684 	.word	0x08019684
 800b5ac:	08019690 	.word	0x08019690
 800b5b0:	0801969c 	.word	0x0801969c
 800b5b4:	080196a8 	.word	0x080196a8
 800b5b8:	080196b4 	.word	0x080196b4
 800b5bc:	080196bc 	.word	0x080196bc
	else if(strncmp((char*)procBuff,"ERROR",5)==0){
 800b5c0:	4916      	ldr	r1, [pc, #88]	; (800b61c <procData+0x814>)
 800b5c2:	4b17      	ldr	r3, [pc, #92]	; (800b620 <procData+0x818>)
 800b5c4:	2205      	movs	r2, #5
 800b5c6:	0018      	movs	r0, r3
 800b5c8:	f00c fef7 	bl	80183ba <strncmp>
 800b5cc:	1e03      	subs	r3, r0, #0
 800b5ce:	d117      	bne.n	800b600 <procData+0x7f8>
		onTimer = 0;
 800b5d0:	4b14      	ldr	r3, [pc, #80]	; (800b624 <procData+0x81c>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	801a      	strh	r2, [r3, #0]
		smsFlags.config = 0;
 800b5d6:	4b14      	ldr	r3, [pc, #80]	; (800b628 <procData+0x820>)
 800b5d8:	2200      	movs	r2, #0
 800b5da:	605a      	str	r2, [r3, #4]
		smsFlags.gprsActive = 0;
 800b5dc:	4b12      	ldr	r3, [pc, #72]	; (800b628 <procData+0x820>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	61da      	str	r2, [r3, #28]
		if (gsmInfo.balancePending == 1){
 800b5e2:	4a12      	ldr	r2, [pc, #72]	; (800b62c <procData+0x824>)
 800b5e4:	239c      	movs	r3, #156	; 0x9c
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	58d3      	ldr	r3, [r2, r3]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d112      	bne.n	800b614 <procData+0x80c>
			gsmInfo.balancePending = 0;
 800b5ee:	4a0f      	ldr	r2, [pc, #60]	; (800b62c <procData+0x824>)
 800b5f0:	239c      	movs	r3, #156	; 0x9c
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	50d1      	str	r1, [r2, r3]
			gsmState = 0;
 800b5f8:	4b0d      	ldr	r3, [pc, #52]	; (800b630 <procData+0x828>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	701a      	strb	r2, [r3, #0]
}
 800b5fe:	e009      	b.n	800b614 <procData+0x80c>
	else if (gsmInfo.GPRS_Rec == 1){
 800b600:	4a0a      	ldr	r2, [pc, #40]	; (800b62c <procData+0x824>)
 800b602:	23ac      	movs	r3, #172	; 0xac
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	58d3      	ldr	r3, [r2, r3]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d103      	bne.n	800b614 <procData+0x80c>
		Debug_Send("Socket forced closed\r\n");
 800b60c:	4b09      	ldr	r3, [pc, #36]	; (800b634 <procData+0x82c>)
 800b60e:	0018      	movs	r0, r3
 800b610:	f7fe ffc6 	bl	800a5a0 <Debug_Send>
}
 800b614:	46c0      	nop			; (mov r8, r8)
 800b616:	46bd      	mov	sp, r7
 800b618:	b003      	add	sp, #12
 800b61a:	bd90      	pop	{r4, r7, pc}
 800b61c:	080196d0 	.word	0x080196d0
 800b620:	2000189c 	.word	0x2000189c
 800b624:	200002d4 	.word	0x200002d4
 800b628:	200014c4 	.word	0x200014c4
 800b62c:	200019a8 	.word	0x200019a8
 800b630:	200000c0 	.word	0x200000c0
 800b634:	0801961c 	.word	0x0801961c

0800b638 <getFtp>:
void Download(){


}

void getFtp(){
 800b638:	b580      	push	{r7, lr}
 800b63a:	af00      	add	r7, sp, #0
	while(ftpinc < ftpPacket){
 800b63c:	e02a      	b.n	800b694 <getFtp+0x5c>
		if (recBuffPointerWrite != recBuffPointerRead){
 800b63e:	4b1b      	ldr	r3, [pc, #108]	; (800b6ac <getFtp+0x74>)
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	4b1b      	ldr	r3, [pc, #108]	; (800b6b0 <getFtp+0x78>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	429a      	cmp	r2, r3
 800b648:	d024      	beq.n	800b694 <getFtp+0x5c>
			//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			gsmSend = 0;
 800b64a:	4b1a      	ldr	r3, [pc, #104]	; (800b6b4 <getFtp+0x7c>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	601a      	str	r2, [r3, #0]
			//if (recBuffDebug[recBuffPointerRead] != 0x0A){
				ftpReceived[ftpinc] = recBuffDebug[recBuffPointerRead];
 800b650:	4b17      	ldr	r3, [pc, #92]	; (800b6b0 <getFtp+0x78>)
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	4b18      	ldr	r3, [pc, #96]	; (800b6b8 <getFtp+0x80>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4918      	ldr	r1, [pc, #96]	; (800b6bc <getFtp+0x84>)
 800b65a:	5c89      	ldrb	r1, [r1, r2]
 800b65c:	4a18      	ldr	r2, [pc, #96]	; (800b6c0 <getFtp+0x88>)
 800b65e:	54d1      	strb	r1, [r2, r3]
				//HAL_UART_Transmit(&huart1, procBuff[procBuffpointer], 1, 10);
				/*if (recBuff[recBuffPointerRead] != 0x0A)*/ //SendChar(procBuff[procBuffpointer]);
				recBuffPointerRead++;
 800b660:	4b13      	ldr	r3, [pc, #76]	; (800b6b0 <getFtp+0x78>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	1c5a      	adds	r2, r3, #1
 800b666:	4b12      	ldr	r3, [pc, #72]	; (800b6b0 <getFtp+0x78>)
 800b668:	601a      	str	r2, [r3, #0]
				if (ftpPad == 1) ftpinc++;
 800b66a:	4b16      	ldr	r3, [pc, #88]	; (800b6c4 <getFtp+0x8c>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d104      	bne.n	800b67c <getFtp+0x44>
 800b672:	4b11      	ldr	r3, [pc, #68]	; (800b6b8 <getFtp+0x80>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <getFtp+0x80>)
 800b67a:	601a      	str	r2, [r3, #0]
				if (recBuffPointerRead > recBuffSize) recBuffPointerRead = 0;
 800b67c:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <getFtp+0x78>)
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	2396      	movs	r3, #150	; 0x96
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	429a      	cmp	r2, r3
 800b686:	dd02      	ble.n	800b68e <getFtp+0x56>
 800b688:	4b09      	ldr	r3, [pc, #36]	; (800b6b0 <getFtp+0x78>)
 800b68a:	2200      	movs	r2, #0
 800b68c:	601a      	str	r2, [r3, #0]
				ftpPad = 1;
 800b68e:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <getFtp+0x8c>)
 800b690:	2201      	movs	r2, #1
 800b692:	701a      	strb	r2, [r3, #0]
	while(ftpinc < ftpPacket){
 800b694:	4b08      	ldr	r3, [pc, #32]	; (800b6b8 <getFtp+0x80>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	001a      	movs	r2, r3
 800b69a:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <getFtp+0x90>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d3cd      	bcc.n	800b63e <getFtp+0x6>
				//procBuffpointer++;
				//if (procBuffpointer > procBuffSize) procBuffpointer = 0;
			//}
		}
	}
}
 800b6a2:	46c0      	nop			; (mov r8, r8)
 800b6a4:	46c0      	nop			; (mov r8, r8)
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	46c0      	nop			; (mov r8, r8)
 800b6ac:	200002d8 	.word	0x200002d8
 800b6b0:	200002dc 	.word	0x200002dc
 800b6b4:	200002f4 	.word	0x200002f4
 800b6b8:	200000c8 	.word	0x200000c8
 800b6bc:	200014f4 	.word	0x200014f4
 800b6c0:	20001b68 	.word	0x20001b68
 800b6c4:	20001c24 	.word	0x20001c24
 800b6c8:	200000cc 	.word	0x200000cc

0800b6cc <FileSize>:
	Debug_Send(temp1);
	Debug_Send("\r\n");
	gsmState = FTP_Close;
}

void FileSize(){
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af02      	add	r7, sp, #8
	gsmState = FS_Open;
 800b6d2:	4b1a      	ldr	r3, [pc, #104]	; (800b73c <FileSize+0x70>)
 800b6d4:	2232      	movs	r2, #50	; 0x32
 800b6d6:	701a      	strb	r2, [r3, #0]
	myStrSection(procBuff,temp,10,',',1);
 800b6d8:	4919      	ldr	r1, [pc, #100]	; (800b740 <FileSize+0x74>)
 800b6da:	481a      	ldr	r0, [pc, #104]	; (800b744 <FileSize+0x78>)
 800b6dc:	2301      	movs	r3, #1
 800b6de:	9300      	str	r3, [sp, #0]
 800b6e0:	232c      	movs	r3, #44	; 0x2c
 800b6e2:	220a      	movs	r2, #10
 800b6e4:	f001 fc95 	bl	800d012 <myStrSection>
	flashWrite(eepromOrigin + 910,temp,strlen(temp) + 1);
 800b6e8:	4b15      	ldr	r3, [pc, #84]	; (800b740 <FileSize+0x74>)
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	f7fd fd16 	bl	800911c <strlen>
 800b6f0:	0003      	movs	r3, r0
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	4b12      	ldr	r3, [pc, #72]	; (800b740 <FileSize+0x74>)
 800b6f6:	4814      	ldr	r0, [pc, #80]	; (800b748 <FileSize+0x7c>)
 800b6f8:	0019      	movs	r1, r3
 800b6fa:	f001 fb93 	bl	800ce24 <flashWrite>
	filesize = atoi(temp);
 800b6fe:	4b10      	ldr	r3, [pc, #64]	; (800b740 <FileSize+0x74>)
 800b700:	0018      	movs	r0, r3
 800b702:	f00c fde3 	bl	80182cc <atoi>
 800b706:	0003      	movs	r3, r0
 800b708:	001a      	movs	r2, r3
 800b70a:	4b10      	ldr	r3, [pc, #64]	; (800b74c <FileSize+0x80>)
 800b70c:	601a      	str	r2, [r3, #0]
	myLongStr(filesize,temp1,10,10);
 800b70e:	4b0f      	ldr	r3, [pc, #60]	; (800b74c <FileSize+0x80>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	0018      	movs	r0, r3
 800b714:	490e      	ldr	r1, [pc, #56]	; (800b750 <FileSize+0x84>)
 800b716:	230a      	movs	r3, #10
 800b718:	220a      	movs	r2, #10
 800b71a:	f001 fd0f 	bl	800d13c <myLongStr>
	Debug_Send("File size: ");
 800b71e:	4b0d      	ldr	r3, [pc, #52]	; (800b754 <FileSize+0x88>)
 800b720:	0018      	movs	r0, r3
 800b722:	f7fe ff3d 	bl	800a5a0 <Debug_Send>
	Debug_Send(temp1);
 800b726:	4b0a      	ldr	r3, [pc, #40]	; (800b750 <FileSize+0x84>)
 800b728:	0018      	movs	r0, r3
 800b72a:	f7fe ff39 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800b72e:	4b0a      	ldr	r3, [pc, #40]	; (800b758 <FileSize+0x8c>)
 800b730:	0018      	movs	r0, r3
 800b732:	f7fe ff35 	bl	800a5a0 <Debug_Send>
}
 800b736:	46c0      	nop			; (mov r8, r8)
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	200000c0 	.word	0x200000c0
 800b740:	200021a0 	.word	0x200021a0
 800b744:	2000189c 	.word	0x2000189c
 800b748:	0000edee 	.word	0x0000edee
 800b74c:	20001884 	.word	0x20001884
 800b750:	20002224 	.word	0x20002224
 800b754:	080196e8 	.word	0x080196e8
 800b758:	08018da4 	.word	0x08018da4

0800b75c <FS_Open_F>:

void FS_Open_F(){
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af02      	add	r7, sp, #8
	//Debug_Send("Open file\r\n");
	myStrSection(procBuff, FID,30,' ',1);
 800b762:	490f      	ldr	r1, [pc, #60]	; (800b7a0 <FS_Open_F+0x44>)
 800b764:	480f      	ldr	r0, [pc, #60]	; (800b7a4 <FS_Open_F+0x48>)
 800b766:	2301      	movs	r3, #1
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	2320      	movs	r3, #32
 800b76c:	221e      	movs	r2, #30
 800b76e:	f001 fc50 	bl	800d012 <myStrSection>
	Debug_Send(FID);
 800b772:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <FS_Open_F+0x44>)
 800b774:	0018      	movs	r0, r3
 800b776:	f7fe ff13 	bl	800a5a0 <Debug_Send>
	Debug_Send(" Opened\r\n");
 800b77a:	4b0b      	ldr	r3, [pc, #44]	; (800b7a8 <FS_Open_F+0x4c>)
 800b77c:	0018      	movs	r0, r3
 800b77e:	f7fe ff0f 	bl	800a5a0 <Debug_Send>
	gsmState = FS_Seek;
 800b782:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <FS_Open_F+0x50>)
 800b784:	2230      	movs	r2, #48	; 0x30
 800b786:	701a      	strb	r2, [r3, #0]
	ftpRead = 1;
 800b788:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <FS_Open_F+0x54>)
 800b78a:	2201      	movs	r2, #1
 800b78c:	701a      	strb	r2, [r3, #0]
	gsmInfo.FS_Connect = 1;
 800b78e:	4a09      	ldr	r2, [pc, #36]	; (800b7b4 <FS_Open_F+0x58>)
 800b790:	23b6      	movs	r3, #182	; 0xb6
 800b792:	005b      	lsls	r3, r3, #1
 800b794:	2101      	movs	r1, #1
 800b796:	50d1      	str	r1, [r2, r3]
	//gsmState = FS_Read;
}
 800b798:	46c0      	nop			; (mov r8, r8)
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	46c0      	nop			; (mov r8, r8)
 800b7a0:	20001c0c 	.word	0x20001c0c
 800b7a4:	2000189c 	.word	0x2000189c
 800b7a8:	080196f4 	.word	0x080196f4
 800b7ac:	200000c0 	.word	0x200000c0
 800b7b0:	20001c04 	.word	0x20001c04
 800b7b4:	200019a8 	.word	0x200019a8

0800b7b8 <FTP_OpenF>:

void FTP_OpenF(){
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b088      	sub	sp, #32
 800b7bc:	af02      	add	r7, sp, #8
	char tmp[20];
	myStrSection(procBuff, tmp,30,':',1);
 800b7be:	0039      	movs	r1, r7
 800b7c0:	4817      	ldr	r0, [pc, #92]	; (800b820 <FTP_OpenF+0x68>)
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	233a      	movs	r3, #58	; 0x3a
 800b7c8:	221e      	movs	r2, #30
 800b7ca:	f001 fc22 	bl	800d012 <myStrSection>
	Debug_Send("FTP Check open");
 800b7ce:	4b15      	ldr	r3, [pc, #84]	; (800b824 <FTP_OpenF+0x6c>)
 800b7d0:	0018      	movs	r0, r3
 800b7d2:	f7fe fee5 	bl	800a5a0 <Debug_Send>
	Debug_Send(tmp);
 800b7d6:	003b      	movs	r3, r7
 800b7d8:	0018      	movs	r0, r3
 800b7da:	f7fe fee1 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800b7de:	4b12      	ldr	r3, [pc, #72]	; (800b828 <FTP_OpenF+0x70>)
 800b7e0:	0018      	movs	r0, r3
 800b7e2:	f7fe fedd 	bl	800a5a0 <Debug_Send>
	int len = strlen(tmp);
 800b7e6:	003b      	movs	r3, r7
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f7fd fc97 	bl	800911c <strlen>
 800b7ee:	0003      	movs	r3, r0
 800b7f0:	617b      	str	r3, [r7, #20]
	//if (strncmp((char*)tmp,"0",1)){ //connection successful
	if (len < 2){
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	dc07      	bgt.n	800b808 <FTP_OpenF+0x50>
		Debug_Send("FTP Connected\r\n");
 800b7f8:	4b0c      	ldr	r3, [pc, #48]	; (800b82c <FTP_OpenF+0x74>)
 800b7fa:	0018      	movs	r0, r3
 800b7fc:	f7fe fed0 	bl	800a5a0 <Debug_Send>
		gsmState = FTP_Path;
 800b800:	4b0b      	ldr	r3, [pc, #44]	; (800b830 <FTP_OpenF+0x78>)
 800b802:	222c      	movs	r2, #44	; 0x2c
 800b804:	701a      	strb	r2, [r3, #0]
		gsmState = FTP_Close;
	}
	//Debug_Send("FTP connected\r\n");
	//gsmState = FTP_Download;
	//gsmState = FTP_Path;
}
 800b806:	e006      	b.n	800b816 <FTP_OpenF+0x5e>
		Debug_Send("FTP NOT Connected\r\n");
 800b808:	4b0a      	ldr	r3, [pc, #40]	; (800b834 <FTP_OpenF+0x7c>)
 800b80a:	0018      	movs	r0, r3
 800b80c:	f7fe fec8 	bl	800a5a0 <Debug_Send>
		gsmState = FTP_Close;
 800b810:	4b07      	ldr	r3, [pc, #28]	; (800b830 <FTP_OpenF+0x78>)
 800b812:	2226      	movs	r2, #38	; 0x26
 800b814:	701a      	strb	r2, [r3, #0]
}
 800b816:	46c0      	nop			; (mov r8, r8)
 800b818:	46bd      	mov	sp, r7
 800b81a:	b006      	add	sp, #24
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	46c0      	nop			; (mov r8, r8)
 800b820:	2000189c 	.word	0x2000189c
 800b824:	08019700 	.word	0x08019700
 800b828:	08018da4 	.word	0x08018da4
 800b82c:	08019710 	.word	0x08019710
 800b830:	200000c0 	.word	0x200000c0
 800b834:	08019720 	.word	0x08019720

0800b838 <FTP_StatusF>:

void FTP_StatusF(){
 800b838:	b580      	push	{r7, lr}
 800b83a:	b088      	sub	sp, #32
 800b83c:	af02      	add	r7, sp, #8
	char tmp [20];
	Debug_Send("FTP Check status ");
 800b83e:	4b12      	ldr	r3, [pc, #72]	; (800b888 <FTP_StatusF+0x50>)
 800b840:	0018      	movs	r0, r3
 800b842:	f7fe fead 	bl	800a5a0 <Debug_Send>
	myStrSection(procBuff, tmp,30,' ',1);
 800b846:	0039      	movs	r1, r7
 800b848:	4810      	ldr	r0, [pc, #64]	; (800b88c <FTP_StatusF+0x54>)
 800b84a:	2301      	movs	r3, #1
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	2320      	movs	r3, #32
 800b850:	221e      	movs	r2, #30
 800b852:	f001 fbde 	bl	800d012 <myStrSection>
	Debug_Send(tmp);
 800b856:	003b      	movs	r3, r7
 800b858:	0018      	movs	r0, r3
 800b85a:	f7fe fea1 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800b85e:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <FTP_StatusF+0x58>)
 800b860:	0018      	movs	r0, r3
 800b862:	f7fe fe9d 	bl	800a5a0 <Debug_Send>
	int len = strlen(tmp);
 800b866:	003b      	movs	r3, r7
 800b868:	0018      	movs	r0, r3
 800b86a:	f7fd fc57 	bl	800911c <strlen>
 800b86e:	0003      	movs	r3, r0
 800b870:	617b      	str	r3, [r7, #20]
	/*if (strncmp((char*)tmp,"OPENING",7)) gsmState = 0;
	else if (strncmp((char*)tmp,"OPENED",7)) gsmState = FTP_Path;*/
	if (len == 6) gsmState = FTP_Path;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2b06      	cmp	r3, #6
 800b876:	d102      	bne.n	800b87e <FTP_StatusF+0x46>
 800b878:	4b06      	ldr	r3, [pc, #24]	; (800b894 <FTP_StatusF+0x5c>)
 800b87a:	222c      	movs	r2, #44	; 0x2c
 800b87c:	701a      	strb	r2, [r3, #0]
}
 800b87e:	46c0      	nop			; (mov r8, r8)
 800b880:	46bd      	mov	sp, r7
 800b882:	b006      	add	sp, #24
 800b884:	bd80      	pop	{r7, pc}
 800b886:	46c0      	nop			; (mov r8, r8)
 800b888:	08019734 	.word	0x08019734
 800b88c:	2000189c 	.word	0x2000189c
 800b890:	08018da4 	.word	0x08018da4
 800b894:	200000c0 	.word	0x200000c0

0800b898 <sendSMS>:

void sendSMS(char* num, char* msg){
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
	if (smsFlags.signal == 0) return;
 800b8a2:	4b21      	ldr	r3, [pc, #132]	; (800b928 <sendSMS+0x90>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d035      	beq.n	800b916 <sendSMS+0x7e>
	if (smsFlags.config == 0) return;
 800b8aa:	4b1f      	ldr	r3, [pc, #124]	; (800b928 <sendSMS+0x90>)
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d033      	beq.n	800b91a <sendSMS+0x82>
	if (gsmInfo.low == 1) return;
 800b8b2:	4a1e      	ldr	r2, [pc, #120]	; (800b92c <sendSMS+0x94>)
 800b8b4:	2380      	movs	r3, #128	; 0x80
 800b8b6:	005b      	lsls	r3, r3, #1
 800b8b8:	58d3      	ldr	r3, [r2, r3]
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d02f      	beq.n	800b91e <sendSMS+0x86>
	//char sms
	//sendData("Send SMS\r\n",UART0);
	Debug_Send("Send SMS\r\n");
 800b8be:	4b1c      	ldr	r3, [pc, #112]	; (800b930 <sendSMS+0x98>)
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f7fe fe6d 	bl	800a5a0 <Debug_Send>
	strcpy (temp, "AT+CMGS=\"");
 800b8c6:	4a1b      	ldr	r2, [pc, #108]	; (800b934 <sendSMS+0x9c>)
 800b8c8:	4b1b      	ldr	r3, [pc, #108]	; (800b938 <sendSMS+0xa0>)
 800b8ca:	0010      	movs	r0, r2
 800b8cc:	0019      	movs	r1, r3
 800b8ce:	230a      	movs	r3, #10
 800b8d0:	001a      	movs	r2, r3
 800b8d2:	f00c fd2b 	bl	801832c <memcpy>
	strcat(temp,num);
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	4b16      	ldr	r3, [pc, #88]	; (800b934 <sendSMS+0x9c>)
 800b8da:	0011      	movs	r1, r2
 800b8dc:	0018      	movs	r0, r3
 800b8de:	f00c fd57 	bl	8018390 <strcat>
	strcat(temp,"\"\r\n");
 800b8e2:	4b14      	ldr	r3, [pc, #80]	; (800b934 <sendSMS+0x9c>)
 800b8e4:	0018      	movs	r0, r3
 800b8e6:	f7fd fc19 	bl	800911c <strlen>
 800b8ea:	0003      	movs	r3, r0
 800b8ec:	001a      	movs	r2, r3
 800b8ee:	4b11      	ldr	r3, [pc, #68]	; (800b934 <sendSMS+0x9c>)
 800b8f0:	18d2      	adds	r2, r2, r3
 800b8f2:	4b12      	ldr	r3, [pc, #72]	; (800b93c <sendSMS+0xa4>)
 800b8f4:	0010      	movs	r0, r2
 800b8f6:	0019      	movs	r1, r3
 800b8f8:	2304      	movs	r3, #4
 800b8fa:	001a      	movs	r2, r3
 800b8fc:	f00c fd16 	bl	801832c <memcpy>
	GSM_Send(temp);
 800b900:	4b0c      	ldr	r3, [pc, #48]	; (800b934 <sendSMS+0x9c>)
 800b902:	0018      	movs	r0, r3
 800b904:	f7fe fdfa 	bl	800a4fc <GSM_Send>

	//GSM_Send("AT+CMGS=\"");
	//GSM_Send(num);,
	//GSM_Send("\"\r\n");
	//sendData("AT+CMGS=\"0720631005\"\r\n",UART1);
	strcpy(smsInfo.content1,msg);
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	4b0d      	ldr	r3, [pc, #52]	; (800b940 <sendSMS+0xa8>)
 800b90c:	0011      	movs	r1, r2
 800b90e:	0018      	movs	r0, r3
 800b910:	f00c fd4b 	bl	80183aa <strcpy>
 800b914:	e004      	b.n	800b920 <sendSMS+0x88>
	if (smsFlags.signal == 0) return;
 800b916:	46c0      	nop			; (mov r8, r8)
 800b918:	e002      	b.n	800b920 <sendSMS+0x88>
	if (smsFlags.config == 0) return;
 800b91a:	46c0      	nop			; (mov r8, r8)
 800b91c:	e000      	b.n	800b920 <sendSMS+0x88>
	if (gsmInfo.low == 1) return;
 800b91e:	46c0      	nop			; (mov r8, r8)
	//smsFlags.send = 0;
}
 800b920:	46bd      	mov	sp, r7
 800b922:	b002      	add	sp, #8
 800b924:	bd80      	pop	{r7, pc}
 800b926:	46c0      	nop			; (mov r8, r8)
 800b928:	200014c4 	.word	0x200014c4
 800b92c:	200019a8 	.word	0x200019a8
 800b930:	08018edc 	.word	0x08018edc
 800b934:	200021a0 	.word	0x200021a0
 800b938:	08019748 	.word	0x08019748
 800b93c:	08019754 	.word	0x08019754
 800b940:	200016cc 	.word	0x200016cc

0800b944 <getIMEI>:
		errorCounter = 0;
		gsmState = 20;
	}
}*/

void getIMEI(){
 800b944:	b580      	push	{r7, lr}
 800b946:	af00      	add	r7, sp, #0
	//myStrSection(procBuff, gsmInfo.imei,30,'"',1);
	/*Debug_Send("Procbuff:");
	Debug_Send(procBuff);
	Debug_Send("\r\n");*/
	strcpy(gsmInfo.imei,procBuff);
 800b948:	4a12      	ldr	r2, [pc, #72]	; (800b994 <getIMEI+0x50>)
 800b94a:	4b13      	ldr	r3, [pc, #76]	; (800b998 <getIMEI+0x54>)
 800b94c:	0011      	movs	r1, r2
 800b94e:	0018      	movs	r0, r3
 800b950:	f00c fd2b 	bl	80183aa <strcpy>
	if (strncmp(gsmInfo.imei, "AT+CGSN", 7)== 0) gsmState = Imei;
 800b954:	4911      	ldr	r1, [pc, #68]	; (800b99c <getIMEI+0x58>)
 800b956:	4b10      	ldr	r3, [pc, #64]	; (800b998 <getIMEI+0x54>)
 800b958:	2207      	movs	r2, #7
 800b95a:	0018      	movs	r0, r3
 800b95c:	f00c fd2d 	bl	80183ba <strncmp>
 800b960:	1e03      	subs	r3, r0, #0
 800b962:	d102      	bne.n	800b96a <getIMEI+0x26>
 800b964:	4b0e      	ldr	r3, [pc, #56]	; (800b9a0 <getIMEI+0x5c>)
 800b966:	2208      	movs	r2, #8
 800b968:	701a      	strb	r2, [r3, #0]
	Debug_Send("IMEI:");
 800b96a:	4b0e      	ldr	r3, [pc, #56]	; (800b9a4 <getIMEI+0x60>)
 800b96c:	0018      	movs	r0, r3
 800b96e:	f7fe fe17 	bl	800a5a0 <Debug_Send>
	Debug_Send(gsmInfo.imei);
 800b972:	4b09      	ldr	r3, [pc, #36]	; (800b998 <getIMEI+0x54>)
 800b974:	0018      	movs	r0, r3
 800b976:	f7fe fe13 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800b97a:	4b0b      	ldr	r3, [pc, #44]	; (800b9a8 <getIMEI+0x64>)
 800b97c:	0018      	movs	r0, r3
 800b97e:	f7fe fe0f 	bl	800a5a0 <Debug_Send>
	gsmInfo.imeiFlag = 0;
 800b982:	4a0a      	ldr	r2, [pc, #40]	; (800b9ac <getIMEI+0x68>)
 800b984:	23a8      	movs	r3, #168	; 0xa8
 800b986:	005b      	lsls	r3, r3, #1
 800b988:	2100      	movs	r1, #0
 800b98a:	50d1      	str	r1, [r2, r3]
	//sendData("IMEI:",UART0);
	//sendData(gsmInfo.imei,UART0);
	//sendData("\r\n",UART0);
}
 800b98c:	46c0      	nop			; (mov r8, r8)
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	46c0      	nop			; (mov r8, r8)
 800b994:	2000189c 	.word	0x2000189c
 800b998:	200019cc 	.word	0x200019cc
 800b99c:	0801950c 	.word	0x0801950c
 800b9a0:	200000c0 	.word	0x200000c0
 800b9a4:	08019758 	.word	0x08019758
 800b9a8:	08018da4 	.word	0x08018da4
 800b9ac:	200019a8 	.word	0x200019a8

0800b9b0 <getCCID>:

void getCCID(){
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af02      	add	r7, sp, #8
	myStrSection(procBuff, gsmInfo.ccid,30,' ',1);
 800b9b6:	4905      	ldr	r1, [pc, #20]	; (800b9cc <getCCID+0x1c>)
 800b9b8:	4805      	ldr	r0, [pc, #20]	; (800b9d0 <getCCID+0x20>)
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	2320      	movs	r3, #32
 800b9c0:	221e      	movs	r2, #30
 800b9c2:	f001 fb26 	bl	800d012 <myStrSection>
	//sendData("CCID:",UART0);
	//sendData(gsmInfo.ccid,UART0);
	//sendData("\r\n",UART0);
}
 800b9c6:	46c0      	nop			; (mov r8, r8)
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	200019f4 	.word	0x200019f4
 800b9d0:	2000189c 	.word	0x2000189c

0800b9d4 <getSignal>:

void getSignal(){
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af02      	add	r7, sp, #8
	myStrSection(procBuff, quality,3,' ',1);
 800b9da:	490f      	ldr	r1, [pc, #60]	; (800ba18 <getSignal+0x44>)
 800b9dc:	480f      	ldr	r0, [pc, #60]	; (800ba1c <getSignal+0x48>)
 800b9de:	2301      	movs	r3, #1
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	2320      	movs	r3, #32
 800b9e4:	2203      	movs	r2, #3
 800b9e6:	f001 fb14 	bl	800d012 <myStrSection>
	int temp2;
	int temp3;
	temp2 = atoi(quality);
 800b9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ba18 <getSignal+0x44>)
 800b9ec:	0018      	movs	r0, r3
 800b9ee:	f00c fc6d 	bl	80182cc <atoi>
 800b9f2:	0003      	movs	r3, r0
 800b9f4:	607b      	str	r3, [r7, #4]
	temp2 *= 2;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	607b      	str	r3, [r7, #4]
	temp3 = 113 - temp2;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2271      	movs	r2, #113	; 0x71
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	603b      	str	r3, [r7, #0]
	sprintf (quality," -%ddBm", temp3);
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	4906      	ldr	r1, [pc, #24]	; (800ba20 <getSignal+0x4c>)
 800ba08:	4b03      	ldr	r3, [pc, #12]	; (800ba18 <getSignal+0x44>)
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	f00c fca0 	bl	8018350 <siprintf>
}
 800ba10:	46c0      	nop			; (mov r8, r8)
 800ba12:	46bd      	mov	sp, r7
 800ba14:	b002      	add	sp, #8
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	20001888 	.word	0x20001888
 800ba1c:	2000189c 	.word	0x2000189c
 800ba20:	08019760 	.word	0x08019760

0800ba24 <RegisterConfirm>:
		index++;
		myStrSection(smsInfo.content1, pair,100,',',index);
	}
}

void RegisterConfirm(){
 800ba24:	b590      	push	{r4, r7, lr}
 800ba26:	b089      	sub	sp, #36	; 0x24
 800ba28:	af00      	add	r7, sp, #0
	char temps[30];
	strcpy(smsInfo.content1,"Unit registered\n");
 800ba2a:	4b2b      	ldr	r3, [pc, #172]	; (800bad8 <RegisterConfirm+0xb4>)
 800ba2c:	4a2b      	ldr	r2, [pc, #172]	; (800badc <RegisterConfirm+0xb8>)
 800ba2e:	ca13      	ldmia	r2!, {r0, r1, r4}
 800ba30:	c313      	stmia	r3!, {r0, r1, r4}
 800ba32:	6811      	ldr	r1, [r2, #0]
 800ba34:	6019      	str	r1, [r3, #0]
 800ba36:	7912      	ldrb	r2, [r2, #4]
 800ba38:	711a      	strb	r2, [r3, #4]
	sprintf(temps,"User: %s\n",gsmInfo.user);
 800ba3a:	4a29      	ldr	r2, [pc, #164]	; (800bae0 <RegisterConfirm+0xbc>)
 800ba3c:	4929      	ldr	r1, [pc, #164]	; (800bae4 <RegisterConfirm+0xc0>)
 800ba3e:	003b      	movs	r3, r7
 800ba40:	0018      	movs	r0, r3
 800ba42:	f00c fc85 	bl	8018350 <siprintf>
	strcat(smsInfo.content1,temps);
 800ba46:	003a      	movs	r2, r7
 800ba48:	4b23      	ldr	r3, [pc, #140]	; (800bad8 <RegisterConfirm+0xb4>)
 800ba4a:	0011      	movs	r1, r2
 800ba4c:	0018      	movs	r0, r3
 800ba4e:	f00c fc9f 	bl	8018390 <strcat>
	sprintf(temps,"MSISDN: %s\n",gsmInfo.msisdn);
 800ba52:	4a25      	ldr	r2, [pc, #148]	; (800bae8 <RegisterConfirm+0xc4>)
 800ba54:	4925      	ldr	r1, [pc, #148]	; (800baec <RegisterConfirm+0xc8>)
 800ba56:	003b      	movs	r3, r7
 800ba58:	0018      	movs	r0, r3
 800ba5a:	f00c fc79 	bl	8018350 <siprintf>
	strcat(smsInfo.content1,temps);
 800ba5e:	003a      	movs	r2, r7
 800ba60:	4b1d      	ldr	r3, [pc, #116]	; (800bad8 <RegisterConfirm+0xb4>)
 800ba62:	0011      	movs	r1, r2
 800ba64:	0018      	movs	r0, r3
 800ba66:	f00c fc93 	bl	8018390 <strcat>
	strcat(smsInfo.content1,"URL: ");
 800ba6a:	4b1b      	ldr	r3, [pc, #108]	; (800bad8 <RegisterConfirm+0xb4>)
 800ba6c:	0018      	movs	r0, r3
 800ba6e:	f7fd fb55 	bl	800911c <strlen>
 800ba72:	0003      	movs	r3, r0
 800ba74:	001a      	movs	r2, r3
 800ba76:	4b18      	ldr	r3, [pc, #96]	; (800bad8 <RegisterConfirm+0xb4>)
 800ba78:	18d2      	adds	r2, r2, r3
 800ba7a:	4b1d      	ldr	r3, [pc, #116]	; (800baf0 <RegisterConfirm+0xcc>)
 800ba7c:	0010      	movs	r0, r2
 800ba7e:	0019      	movs	r1, r3
 800ba80:	2306      	movs	r3, #6
 800ba82:	001a      	movs	r2, r3
 800ba84:	f00c fc52 	bl	801832c <memcpy>
	strcat(smsInfo.content1,gsmInfo.url);
 800ba88:	4a1a      	ldr	r2, [pc, #104]	; (800baf4 <RegisterConfirm+0xd0>)
 800ba8a:	4b13      	ldr	r3, [pc, #76]	; (800bad8 <RegisterConfirm+0xb4>)
 800ba8c:	0011      	movs	r1, r2
 800ba8e:	0018      	movs	r0, r3
 800ba90:	f00c fc7e 	bl	8018390 <strcat>
	strcat(smsInfo.content1,":");
 800ba94:	4b10      	ldr	r3, [pc, #64]	; (800bad8 <RegisterConfirm+0xb4>)
 800ba96:	0018      	movs	r0, r3
 800ba98:	f7fd fb40 	bl	800911c <strlen>
 800ba9c:	0003      	movs	r3, r0
 800ba9e:	001a      	movs	r2, r3
 800baa0:	4b0d      	ldr	r3, [pc, #52]	; (800bad8 <RegisterConfirm+0xb4>)
 800baa2:	18d2      	adds	r2, r2, r3
 800baa4:	4b14      	ldr	r3, [pc, #80]	; (800baf8 <RegisterConfirm+0xd4>)
 800baa6:	0010      	movs	r0, r2
 800baa8:	0019      	movs	r1, r3
 800baaa:	2302      	movs	r3, #2
 800baac:	001a      	movs	r2, r3
 800baae:	f00c fc3d 	bl	801832c <memcpy>
	strcat(smsInfo.content1,gsmInfo.urlport);
 800bab2:	4a12      	ldr	r2, [pc, #72]	; (800bafc <RegisterConfirm+0xd8>)
 800bab4:	4b08      	ldr	r3, [pc, #32]	; (800bad8 <RegisterConfirm+0xb4>)
 800bab6:	0011      	movs	r1, r2
 800bab8:	0018      	movs	r0, r3
 800baba:	f00c fc69 	bl	8018390 <strcat>
	strcpy (smsInfo.build, smsInfo.content1);
 800babe:	4a06      	ldr	r2, [pc, #24]	; (800bad8 <RegisterConfirm+0xb4>)
 800bac0:	4b0f      	ldr	r3, [pc, #60]	; (800bb00 <RegisterConfirm+0xdc>)
 800bac2:	0011      	movs	r1, r2
 800bac4:	0018      	movs	r0, r3
 800bac6:	f00c fc70 	bl	80183aa <strcpy>
	smsFlags.reply = 1;
 800baca:	4b0e      	ldr	r3, [pc, #56]	; (800bb04 <RegisterConfirm+0xe0>)
 800bacc:	2201      	movs	r2, #1
 800bace:	625a      	str	r2, [r3, #36]	; 0x24

}
 800bad0:	46c0      	nop			; (mov r8, r8)
 800bad2:	46bd      	mov	sp, r7
 800bad4:	b009      	add	sp, #36	; 0x24
 800bad6:	bd90      	pop	{r4, r7, pc}
 800bad8:	200016cc 	.word	0x200016cc
 800badc:	080197f0 	.word	0x080197f0
 800bae0:	20001a3c 	.word	0x20001a3c
 800bae4:	08019804 	.word	0x08019804
 800bae8:	20001a5a 	.word	0x20001a5a
 800baec:	08019810 	.word	0x08019810
 800baf0:	0801981c 	.word	0x0801981c
 800baf4:	200019a8 	.word	0x200019a8
 800baf8:	08019420 	.word	0x08019420
 800bafc:	200019c6 	.word	0x200019c6
 800bb00:	200017a4 	.word	0x200017a4
 800bb04:	200014c4 	.word	0x200014c4

0800bb08 <CheckUser>:

char CheckUser(){
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	af00      	add	r7, sp, #0
	Debug_Send("Check user\r\n");
 800bb0c:	4b11      	ldr	r3, [pc, #68]	; (800bb54 <CheckUser+0x4c>)
 800bb0e:	0018      	movs	r0, r3
 800bb10:	f7fe fd46 	bl	800a5a0 <Debug_Send>
	if (strlen(gsmInfo.msisdn) < 2) return 0;
 800bb14:	4b10      	ldr	r3, [pc, #64]	; (800bb58 <CheckUser+0x50>)
 800bb16:	0018      	movs	r0, r3
 800bb18:	f7fd fb00 	bl	800911c <strlen>
 800bb1c:	0003      	movs	r3, r0
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d801      	bhi.n	800bb26 <CheckUser+0x1e>
 800bb22:	2300      	movs	r3, #0
 800bb24:	e012      	b.n	800bb4c <CheckUser+0x44>
	if (strncmp(smsInfo.recMSISDN, gsmInfo.msisdn, 16) == 0){
 800bb26:	490c      	ldr	r1, [pc, #48]	; (800bb58 <CheckUser+0x50>)
 800bb28:	4b0c      	ldr	r3, [pc, #48]	; (800bb5c <CheckUser+0x54>)
 800bb2a:	2210      	movs	r2, #16
 800bb2c:	0018      	movs	r0, r3
 800bb2e:	f00c fc44 	bl	80183ba <strncmp>
 800bb32:	1e03      	subs	r3, r0, #0
 800bb34:	d105      	bne.n	800bb42 <CheckUser+0x3a>
		Debug_Send("Found user\r\n");
 800bb36:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <CheckUser+0x58>)
 800bb38:	0018      	movs	r0, r3
 800bb3a:	f7fe fd31 	bl	800a5a0 <Debug_Send>
		return 1;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e004      	b.n	800bb4c <CheckUser+0x44>
	}
	else {
		Debug_Send("No user found\r\n");
 800bb42:	4b08      	ldr	r3, [pc, #32]	; (800bb64 <CheckUser+0x5c>)
 800bb44:	0018      	movs	r0, r3
 800bb46:	f7fe fd2b 	bl	800a5a0 <Debug_Send>
		return 0;
 800bb4a:	2300      	movs	r3, #0
	}
}
 800bb4c:	0018      	movs	r0, r3
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	46c0      	nop			; (mov r8, r8)
 800bb54:	08019824 	.word	0x08019824
 800bb58:	20001a5a 	.word	0x20001a5a
 800bb5c:	200016ac 	.word	0x200016ac
 800bb60:	08019834 	.word	0x08019834
 800bb64:	08019844 	.word	0x08019844

0800bb68 <buildInfo>:
	//sendData(result,UART0);
	//strcpy(str, result);

}

void buildInfo(){
 800bb68:	b590      	push	{r4, r7, lr}
 800bb6a:	b08f      	sub	sp, #60	; 0x3c
 800bb6c:	af00      	add	r7, sp, #0
	Debug_Send("Build INFO SMS\r\n");
 800bb6e:	4b79      	ldr	r3, [pc, #484]	; (800bd54 <buildInfo+0x1ec>)
 800bb70:	0018      	movs	r0, r3
 800bb72:	f7fe fd15 	bl	800a5a0 <Debug_Send>
	//strcpy(SMScontent,"Powerbox is active\n ");
	char temps[40];
	char adcv[10];
	//GetADC(adcv);
	strcpy(smsInfo.content1,"GSM active\n");
 800bb76:	4b78      	ldr	r3, [pc, #480]	; (800bd58 <buildInfo+0x1f0>)
 800bb78:	4a78      	ldr	r2, [pc, #480]	; (800bd5c <buildInfo+0x1f4>)
 800bb7a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800bb7c:	c313      	stmia	r3!, {r0, r1, r4}
	sprintf(temps,"V: %s\n",adcv);
 800bb7e:	1d3a      	adds	r2, r7, #4
 800bb80:	4977      	ldr	r1, [pc, #476]	; (800bd60 <buildInfo+0x1f8>)
 800bb82:	2410      	movs	r4, #16
 800bb84:	193b      	adds	r3, r7, r4
 800bb86:	0018      	movs	r0, r3
 800bb88:	f00c fbe2 	bl	8018350 <siprintf>
	strcpy(smsInfo.content1,temps);
 800bb8c:	193a      	adds	r2, r7, r4
 800bb8e:	4b72      	ldr	r3, [pc, #456]	; (800bd58 <buildInfo+0x1f0>)
 800bb90:	0011      	movs	r1, r2
 800bb92:	0018      	movs	r0, r3
 800bb94:	f00c fc09 	bl	80183aa <strcpy>
	sprintf(temps,"Thresh: %sV\n",gsmInfo.vth);
 800bb98:	4a72      	ldr	r2, [pc, #456]	; (800bd64 <buildInfo+0x1fc>)
 800bb9a:	4973      	ldr	r1, [pc, #460]	; (800bd68 <buildInfo+0x200>)
 800bb9c:	193b      	adds	r3, r7, r4
 800bb9e:	0018      	movs	r0, r3
 800bba0:	f00c fbd6 	bl	8018350 <siprintf>
	strcat(smsInfo.content1,temps);
 800bba4:	193a      	adds	r2, r7, r4
 800bba6:	4b6c      	ldr	r3, [pc, #432]	; (800bd58 <buildInfo+0x1f0>)
 800bba8:	0011      	movs	r1, r2
 800bbaa:	0018      	movs	r0, r3
 800bbac:	f00c fbf0 	bl	8018390 <strcat>
	//sprintf(temps,"CCID: %s\n",gsmInfo.ccid);
	if (gsmInfo.ccidStatus == 1) strcat(smsInfo.content1,"CCID miss-matched!\r\n");
 800bbb0:	4a6e      	ldr	r2, [pc, #440]	; (800bd6c <buildInfo+0x204>)
 800bbb2:	2398      	movs	r3, #152	; 0x98
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	58d3      	ldr	r3, [r2, r3]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d10e      	bne.n	800bbda <buildInfo+0x72>
 800bbbc:	4b66      	ldr	r3, [pc, #408]	; (800bd58 <buildInfo+0x1f0>)
 800bbbe:	0018      	movs	r0, r3
 800bbc0:	f7fd faac 	bl	800911c <strlen>
 800bbc4:	0003      	movs	r3, r0
 800bbc6:	001a      	movs	r2, r3
 800bbc8:	4b63      	ldr	r3, [pc, #396]	; (800bd58 <buildInfo+0x1f0>)
 800bbca:	18d2      	adds	r2, r2, r3
 800bbcc:	4b68      	ldr	r3, [pc, #416]	; (800bd70 <buildInfo+0x208>)
 800bbce:	0010      	movs	r0, r2
 800bbd0:	0019      	movs	r1, r3
 800bbd2:	2315      	movs	r3, #21
 800bbd4:	001a      	movs	r2, r3
 800bbd6:	f00c fba9 	bl	801832c <memcpy>
	//sprintf(temps,"mode: %s\n",smsInfo.IP);
	//strcat(SMScontent,temps);
	if (gsmInfo.modeFlag == 1) strcat(smsInfo.content1,"Mode:Pulse\r\n");
 800bbda:	4a64      	ldr	r2, [pc, #400]	; (800bd6c <buildInfo+0x204>)
 800bbdc:	2394      	movs	r3, #148	; 0x94
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	58d3      	ldr	r3, [r2, r3]
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d10f      	bne.n	800bc06 <buildInfo+0x9e>
 800bbe6:	4b5c      	ldr	r3, [pc, #368]	; (800bd58 <buildInfo+0x1f0>)
 800bbe8:	0018      	movs	r0, r3
 800bbea:	f7fd fa97 	bl	800911c <strlen>
 800bbee:	0003      	movs	r3, r0
 800bbf0:	001a      	movs	r2, r3
 800bbf2:	4b59      	ldr	r3, [pc, #356]	; (800bd58 <buildInfo+0x1f0>)
 800bbf4:	18d2      	adds	r2, r2, r3
 800bbf6:	4b5f      	ldr	r3, [pc, #380]	; (800bd74 <buildInfo+0x20c>)
 800bbf8:	0010      	movs	r0, r2
 800bbfa:	0019      	movs	r1, r3
 800bbfc:	230d      	movs	r3, #13
 800bbfe:	001a      	movs	r2, r3
 800bc00:	f00c fb94 	bl	801832c <memcpy>
 800bc04:	e00e      	b.n	800bc24 <buildInfo+0xbc>
	else strcat(smsInfo.content1,"Mode: Latch\r\n");
 800bc06:	4b54      	ldr	r3, [pc, #336]	; (800bd58 <buildInfo+0x1f0>)
 800bc08:	0018      	movs	r0, r3
 800bc0a:	f7fd fa87 	bl	800911c <strlen>
 800bc0e:	0003      	movs	r3, r0
 800bc10:	001a      	movs	r2, r3
 800bc12:	4b51      	ldr	r3, [pc, #324]	; (800bd58 <buildInfo+0x1f0>)
 800bc14:	18d2      	adds	r2, r2, r3
 800bc16:	4b58      	ldr	r3, [pc, #352]	; (800bd78 <buildInfo+0x210>)
 800bc18:	0010      	movs	r0, r2
 800bc1a:	0019      	movs	r1, r3
 800bc1c:	230e      	movs	r3, #14
 800bc1e:	001a      	movs	r2, r3
 800bc20:	f00c fb84 	bl	801832c <memcpy>
	if (gsmInfo.activeFlag == 1) strcat(smsInfo.content1,"Status:Active\r\n");
 800bc24:	4a51      	ldr	r2, [pc, #324]	; (800bd6c <buildInfo+0x204>)
 800bc26:	2390      	movs	r3, #144	; 0x90
 800bc28:	005b      	lsls	r3, r3, #1
 800bc2a:	58d3      	ldr	r3, [r2, r3]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d10f      	bne.n	800bc50 <buildInfo+0xe8>
 800bc30:	4b49      	ldr	r3, [pc, #292]	; (800bd58 <buildInfo+0x1f0>)
 800bc32:	0018      	movs	r0, r3
 800bc34:	f7fd fa72 	bl	800911c <strlen>
 800bc38:	0003      	movs	r3, r0
 800bc3a:	001a      	movs	r2, r3
 800bc3c:	4b46      	ldr	r3, [pc, #280]	; (800bd58 <buildInfo+0x1f0>)
 800bc3e:	18d2      	adds	r2, r2, r3
 800bc40:	4b4e      	ldr	r3, [pc, #312]	; (800bd7c <buildInfo+0x214>)
 800bc42:	0010      	movs	r0, r2
 800bc44:	0019      	movs	r1, r3
 800bc46:	2310      	movs	r3, #16
 800bc48:	001a      	movs	r2, r3
 800bc4a:	f00c fb6f 	bl	801832c <memcpy>
 800bc4e:	e00e      	b.n	800bc6e <buildInfo+0x106>
	else strcat(smsInfo.content1,"Status: Suspended\r\n");
 800bc50:	4b41      	ldr	r3, [pc, #260]	; (800bd58 <buildInfo+0x1f0>)
 800bc52:	0018      	movs	r0, r3
 800bc54:	f7fd fa62 	bl	800911c <strlen>
 800bc58:	0003      	movs	r3, r0
 800bc5a:	001a      	movs	r2, r3
 800bc5c:	4b3e      	ldr	r3, [pc, #248]	; (800bd58 <buildInfo+0x1f0>)
 800bc5e:	18d2      	adds	r2, r2, r3
 800bc60:	4b47      	ldr	r3, [pc, #284]	; (800bd80 <buildInfo+0x218>)
 800bc62:	0010      	movs	r0, r2
 800bc64:	0019      	movs	r1, r3
 800bc66:	2314      	movs	r3, #20
 800bc68:	001a      	movs	r2, r3
 800bc6a:	f00c fb5f 	bl	801832c <memcpy>
	//if (RELAY == 1) strcat(SMScontent,"Relay: ON\r\n");
	//else strcat(SMScontent,"Relay: OFF\r\n");
	sprintf(temps,"Airtime: %s\n",gsmInfo.balance);
 800bc6e:	4a45      	ldr	r2, [pc, #276]	; (800bd84 <buildInfo+0x21c>)
 800bc70:	4945      	ldr	r1, [pc, #276]	; (800bd88 <buildInfo+0x220>)
 800bc72:	2410      	movs	r4, #16
 800bc74:	193b      	adds	r3, r7, r4
 800bc76:	0018      	movs	r0, r3
 800bc78:	f00c fb6a 	bl	8018350 <siprintf>
	strcat(smsInfo.content1,temps);
 800bc7c:	193a      	adds	r2, r7, r4
 800bc7e:	4b36      	ldr	r3, [pc, #216]	; (800bd58 <buildInfo+0x1f0>)
 800bc80:	0011      	movs	r1, r2
 800bc82:	0018      	movs	r0, r3
 800bc84:	f00c fb84 	bl	8018390 <strcat>
	sprintf(temps,"User: %s\n",gsmInfo.user);
 800bc88:	4a40      	ldr	r2, [pc, #256]	; (800bd8c <buildInfo+0x224>)
 800bc8a:	4941      	ldr	r1, [pc, #260]	; (800bd90 <buildInfo+0x228>)
 800bc8c:	193b      	adds	r3, r7, r4
 800bc8e:	0018      	movs	r0, r3
 800bc90:	f00c fb5e 	bl	8018350 <siprintf>
	strcat(smsInfo.content1,temps);
 800bc94:	193a      	adds	r2, r7, r4
 800bc96:	4b30      	ldr	r3, [pc, #192]	; (800bd58 <buildInfo+0x1f0>)
 800bc98:	0011      	movs	r1, r2
 800bc9a:	0018      	movs	r0, r3
 800bc9c:	f00c fb78 	bl	8018390 <strcat>
	sprintf(temps,"MSISDN: %s\n",gsmInfo.msisdn);
 800bca0:	4a3c      	ldr	r2, [pc, #240]	; (800bd94 <buildInfo+0x22c>)
 800bca2:	493d      	ldr	r1, [pc, #244]	; (800bd98 <buildInfo+0x230>)
 800bca4:	193b      	adds	r3, r7, r4
 800bca6:	0018      	movs	r0, r3
 800bca8:	f00c fb52 	bl	8018350 <siprintf>
	strcat(smsInfo.content1,temps);
 800bcac:	193a      	adds	r2, r7, r4
 800bcae:	4b2a      	ldr	r3, [pc, #168]	; (800bd58 <buildInfo+0x1f0>)
 800bcb0:	0011      	movs	r1, r2
 800bcb2:	0018      	movs	r0, r3
 800bcb4:	f00c fb6c 	bl	8018390 <strcat>
	quality[0] = 0x20;
 800bcb8:	4b38      	ldr	r3, [pc, #224]	; (800bd9c <buildInfo+0x234>)
 800bcba:	2220      	movs	r2, #32
 800bcbc:	701a      	strb	r2, [r3, #0]
	sprintf(temps,"Signal:%s\n",quality);
 800bcbe:	4a37      	ldr	r2, [pc, #220]	; (800bd9c <buildInfo+0x234>)
 800bcc0:	4937      	ldr	r1, [pc, #220]	; (800bda0 <buildInfo+0x238>)
 800bcc2:	193b      	adds	r3, r7, r4
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	f00c fb43 	bl	8018350 <siprintf>
	strcat(smsInfo.content1,temps);
 800bcca:	193a      	adds	r2, r7, r4
 800bccc:	4b22      	ldr	r3, [pc, #136]	; (800bd58 <buildInfo+0x1f0>)
 800bcce:	0011      	movs	r1, r2
 800bcd0:	0018      	movs	r0, r3
 800bcd2:	f00c fb5d 	bl	8018390 <strcat>
	strcat(smsInfo.content1,"URL: ");
 800bcd6:	4b20      	ldr	r3, [pc, #128]	; (800bd58 <buildInfo+0x1f0>)
 800bcd8:	0018      	movs	r0, r3
 800bcda:	f7fd fa1f 	bl	800911c <strlen>
 800bcde:	0003      	movs	r3, r0
 800bce0:	001a      	movs	r2, r3
 800bce2:	4b1d      	ldr	r3, [pc, #116]	; (800bd58 <buildInfo+0x1f0>)
 800bce4:	18d2      	adds	r2, r2, r3
 800bce6:	4b2f      	ldr	r3, [pc, #188]	; (800bda4 <buildInfo+0x23c>)
 800bce8:	0010      	movs	r0, r2
 800bcea:	0019      	movs	r1, r3
 800bcec:	2306      	movs	r3, #6
 800bcee:	001a      	movs	r2, r3
 800bcf0:	f00c fb1c 	bl	801832c <memcpy>
	strcat(smsInfo.content1,gsmInfo.url);
 800bcf4:	4a1d      	ldr	r2, [pc, #116]	; (800bd6c <buildInfo+0x204>)
 800bcf6:	4b18      	ldr	r3, [pc, #96]	; (800bd58 <buildInfo+0x1f0>)
 800bcf8:	0011      	movs	r1, r2
 800bcfa:	0018      	movs	r0, r3
 800bcfc:	f00c fb48 	bl	8018390 <strcat>
	strcat(smsInfo.content1,":");
 800bd00:	4b15      	ldr	r3, [pc, #84]	; (800bd58 <buildInfo+0x1f0>)
 800bd02:	0018      	movs	r0, r3
 800bd04:	f7fd fa0a 	bl	800911c <strlen>
 800bd08:	0003      	movs	r3, r0
 800bd0a:	001a      	movs	r2, r3
 800bd0c:	4b12      	ldr	r3, [pc, #72]	; (800bd58 <buildInfo+0x1f0>)
 800bd0e:	18d2      	adds	r2, r2, r3
 800bd10:	4b25      	ldr	r3, [pc, #148]	; (800bda8 <buildInfo+0x240>)
 800bd12:	0010      	movs	r0, r2
 800bd14:	0019      	movs	r1, r3
 800bd16:	2302      	movs	r3, #2
 800bd18:	001a      	movs	r2, r3
 800bd1a:	f00c fb07 	bl	801832c <memcpy>
	strcat(smsInfo.content1,gsmInfo.urlport);
 800bd1e:	4a23      	ldr	r2, [pc, #140]	; (800bdac <buildInfo+0x244>)
 800bd20:	4b0d      	ldr	r3, [pc, #52]	; (800bd58 <buildInfo+0x1f0>)
 800bd22:	0011      	movs	r1, r2
 800bd24:	0018      	movs	r0, r3
 800bd26:	f00c fb33 	bl	8018390 <strcat>
	/*rtc time;
	time = getUptime();
	char temp1[30];
	sprintf (temp1,"Uptime: %.2dw %.2dd %.2dh %.2dm %.2ds\n", time.weeks, time.days, time.hours, time.minutes, time.seconds);
	strcat(SMScontent,temp1);*/
	strcpy (smsInfo.build, smsInfo.content1);
 800bd2a:	4a0b      	ldr	r2, [pc, #44]	; (800bd58 <buildInfo+0x1f0>)
 800bd2c:	4b20      	ldr	r3, [pc, #128]	; (800bdb0 <buildInfo+0x248>)
 800bd2e:	0011      	movs	r1, r2
 800bd30:	0018      	movs	r0, r3
 800bd32:	f00c fb3a 	bl	80183aa <strcpy>
	//sendData("\r\nSMS content:",UART0);
	//sendData(SMScontent,UART0);
	//sendData("\r\n",UART0);
	//sendData("\r\nSMSinfo build:",UART0);
	Debug_Send(smsInfo.build);
 800bd36:	4b1e      	ldr	r3, [pc, #120]	; (800bdb0 <buildInfo+0x248>)
 800bd38:	0018      	movs	r0, r3
 800bd3a:	f7fe fc31 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800bd3e:	4b1d      	ldr	r3, [pc, #116]	; (800bdb4 <buildInfo+0x24c>)
 800bd40:	0018      	movs	r0, r3
 800bd42:	f7fe fc2d 	bl	800a5a0 <Debug_Send>
	smsFlags.reply = 1;			//generates reply sms
 800bd46:	4b1c      	ldr	r3, [pc, #112]	; (800bdb8 <buildInfo+0x250>)
 800bd48:	2201      	movs	r2, #1
 800bd4a:	625a      	str	r2, [r3, #36]	; 0x24
	//strcpy(smsInfo.recMSISDN,"0720631005");	//debug for sms from rtc
}
 800bd4c:	46c0      	nop			; (mov r8, r8)
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	b00f      	add	sp, #60	; 0x3c
 800bd52:	bd90      	pop	{r4, r7, pc}
 800bd54:	080198a0 	.word	0x080198a0
 800bd58:	200016cc 	.word	0x200016cc
 800bd5c:	080198b4 	.word	0x080198b4
 800bd60:	080198c0 	.word	0x080198c0
 800bd64:	20001aac 	.word	0x20001aac
 800bd68:	080198c8 	.word	0x080198c8
 800bd6c:	200019a8 	.word	0x200019a8
 800bd70:	080198d8 	.word	0x080198d8
 800bd74:	080198f0 	.word	0x080198f0
 800bd78:	08019900 	.word	0x08019900
 800bd7c:	08019910 	.word	0x08019910
 800bd80:	08019920 	.word	0x08019920
 800bd84:	20001a96 	.word	0x20001a96
 800bd88:	08019934 	.word	0x08019934
 800bd8c:	20001a3c 	.word	0x20001a3c
 800bd90:	08019804 	.word	0x08019804
 800bd94:	20001a5a 	.word	0x20001a5a
 800bd98:	08019810 	.word	0x08019810
 800bd9c:	20001888 	.word	0x20001888
 800bda0:	08019944 	.word	0x08019944
 800bda4:	0801981c 	.word	0x0801981c
 800bda8:	08019420 	.word	0x08019420
 800bdac:	200019c6 	.word	0x200019c6
 800bdb0:	200017a4 	.word	0x200017a4
 800bdb4:	08018da4 	.word	0x08018da4
 800bdb8:	200014c4 	.word	0x200014c4

0800bdbc <BuildPower>:

void BuildPower(){
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
	int temp3;
	char temp2[20];
	//temp3 = getVolt();
	myLongStr(voltage,temp2,10,10);
 800bdc2:	4b45      	ldr	r3, [pc, #276]	; (800bed8 <BuildPower+0x11c>)
 800bdc4:	6818      	ldr	r0, [r3, #0]
 800bdc6:	1d39      	adds	r1, r7, #4
 800bdc8:	230a      	movs	r3, #10
 800bdca:	220a      	movs	r2, #10
 800bdcc:	f001 f9b6 	bl	800d13c <myLongStr>
	strcpy (smsInfo.build, "IMC v4.08\n");
 800bdd0:	4b42      	ldr	r3, [pc, #264]	; (800bedc <BuildPower+0x120>)
 800bdd2:	4a43      	ldr	r2, [pc, #268]	; (800bee0 <BuildPower+0x124>)
 800bdd4:	ca03      	ldmia	r2!, {r0, r1}
 800bdd6:	c303      	stmia	r3!, {r0, r1}
 800bdd8:	8811      	ldrh	r1, [r2, #0]
 800bdda:	8019      	strh	r1, [r3, #0]
 800bddc:	7892      	ldrb	r2, [r2, #2]
 800bdde:	709a      	strb	r2, [r3, #2]
	strcat(smsInfo.build,"IMEI: ");
 800bde0:	4b3e      	ldr	r3, [pc, #248]	; (800bedc <BuildPower+0x120>)
 800bde2:	0018      	movs	r0, r3
 800bde4:	f7fd f99a 	bl	800911c <strlen>
 800bde8:	0003      	movs	r3, r0
 800bdea:	001a      	movs	r2, r3
 800bdec:	4b3b      	ldr	r3, [pc, #236]	; (800bedc <BuildPower+0x120>)
 800bdee:	18d2      	adds	r2, r2, r3
 800bdf0:	4b3c      	ldr	r3, [pc, #240]	; (800bee4 <BuildPower+0x128>)
 800bdf2:	0010      	movs	r0, r2
 800bdf4:	0019      	movs	r1, r3
 800bdf6:	2307      	movs	r3, #7
 800bdf8:	001a      	movs	r2, r3
 800bdfa:	f00c fa97 	bl	801832c <memcpy>
	strcat(smsInfo.build, gsmInfo.imei);
 800bdfe:	4a3a      	ldr	r2, [pc, #232]	; (800bee8 <BuildPower+0x12c>)
 800be00:	4b36      	ldr	r3, [pc, #216]	; (800bedc <BuildPower+0x120>)
 800be02:	0011      	movs	r1, r2
 800be04:	0018      	movs	r0, r3
 800be06:	f00c fac3 	bl	8018390 <strcat>
	strcat(smsInfo.build,"\n");
 800be0a:	4b34      	ldr	r3, [pc, #208]	; (800bedc <BuildPower+0x120>)
 800be0c:	0018      	movs	r0, r3
 800be0e:	f7fd f985 	bl	800911c <strlen>
 800be12:	0003      	movs	r3, r0
 800be14:	001a      	movs	r2, r3
 800be16:	4b31      	ldr	r3, [pc, #196]	; (800bedc <BuildPower+0x120>)
 800be18:	18d2      	adds	r2, r2, r3
 800be1a:	4b34      	ldr	r3, [pc, #208]	; (800beec <BuildPower+0x130>)
 800be1c:	0010      	movs	r0, r2
 800be1e:	0019      	movs	r1, r3
 800be20:	2302      	movs	r3, #2
 800be22:	001a      	movs	r2, r3
 800be24:	f00c fa82 	bl	801832c <memcpy>
	strcat (smsInfo.build, "Voltage:");
 800be28:	4b2c      	ldr	r3, [pc, #176]	; (800bedc <BuildPower+0x120>)
 800be2a:	0018      	movs	r0, r3
 800be2c:	f7fd f976 	bl	800911c <strlen>
 800be30:	0003      	movs	r3, r0
 800be32:	001a      	movs	r2, r3
 800be34:	4b29      	ldr	r3, [pc, #164]	; (800bedc <BuildPower+0x120>)
 800be36:	18d2      	adds	r2, r2, r3
 800be38:	4b2d      	ldr	r3, [pc, #180]	; (800bef0 <BuildPower+0x134>)
 800be3a:	0010      	movs	r0, r2
 800be3c:	0019      	movs	r1, r3
 800be3e:	2309      	movs	r3, #9
 800be40:	001a      	movs	r2, r3
 800be42:	f00c fa73 	bl	801832c <memcpy>
	strcat (smsInfo.build, temp2);
 800be46:	1d3a      	adds	r2, r7, #4
 800be48:	4b24      	ldr	r3, [pc, #144]	; (800bedc <BuildPower+0x120>)
 800be4a:	0011      	movs	r1, r2
 800be4c:	0018      	movs	r0, r3
 800be4e:	f00c fa9f 	bl	8018390 <strcat>
	strcat (smsInfo.build, "\n");
 800be52:	4b22      	ldr	r3, [pc, #136]	; (800bedc <BuildPower+0x120>)
 800be54:	0018      	movs	r0, r3
 800be56:	f7fd f961 	bl	800911c <strlen>
 800be5a:	0003      	movs	r3, r0
 800be5c:	001a      	movs	r2, r3
 800be5e:	4b1f      	ldr	r3, [pc, #124]	; (800bedc <BuildPower+0x120>)
 800be60:	18d2      	adds	r2, r2, r3
 800be62:	4b22      	ldr	r3, [pc, #136]	; (800beec <BuildPower+0x130>)
 800be64:	0010      	movs	r0, r2
 800be66:	0019      	movs	r1, r3
 800be68:	2302      	movs	r3, #2
 800be6a:	001a      	movs	r2, r3
 800be6c:	f00c fa5e 	bl	801832c <memcpy>
	//temp3 = getCurrent();
	myLongStr(current1,temp2,10,10);
 800be70:	4b20      	ldr	r3, [pc, #128]	; (800bef4 <BuildPower+0x138>)
 800be72:	6818      	ldr	r0, [r3, #0]
 800be74:	1d39      	adds	r1, r7, #4
 800be76:	230a      	movs	r3, #10
 800be78:	220a      	movs	r2, #10
 800be7a:	f001 f95f 	bl	800d13c <myLongStr>
	strcat (smsInfo.build, "Current:");
 800be7e:	4b17      	ldr	r3, [pc, #92]	; (800bedc <BuildPower+0x120>)
 800be80:	0018      	movs	r0, r3
 800be82:	f7fd f94b 	bl	800911c <strlen>
 800be86:	0003      	movs	r3, r0
 800be88:	001a      	movs	r2, r3
 800be8a:	4b14      	ldr	r3, [pc, #80]	; (800bedc <BuildPower+0x120>)
 800be8c:	18d2      	adds	r2, r2, r3
 800be8e:	4b1a      	ldr	r3, [pc, #104]	; (800bef8 <BuildPower+0x13c>)
 800be90:	0010      	movs	r0, r2
 800be92:	0019      	movs	r1, r3
 800be94:	2309      	movs	r3, #9
 800be96:	001a      	movs	r2, r3
 800be98:	f00c fa48 	bl	801832c <memcpy>
	strcat (smsInfo.build, temp2);
 800be9c:	1d3a      	adds	r2, r7, #4
 800be9e:	4b0f      	ldr	r3, [pc, #60]	; (800bedc <BuildPower+0x120>)
 800bea0:	0011      	movs	r1, r2
 800bea2:	0018      	movs	r0, r3
 800bea4:	f00c fa74 	bl	8018390 <strcat>
	strcat (smsInfo.build, "\n");
 800bea8:	4b0c      	ldr	r3, [pc, #48]	; (800bedc <BuildPower+0x120>)
 800beaa:	0018      	movs	r0, r3
 800beac:	f7fd f936 	bl	800911c <strlen>
 800beb0:	0003      	movs	r3, r0
 800beb2:	001a      	movs	r2, r3
 800beb4:	4b09      	ldr	r3, [pc, #36]	; (800bedc <BuildPower+0x120>)
 800beb6:	18d2      	adds	r2, r2, r3
 800beb8:	4b0c      	ldr	r3, [pc, #48]	; (800beec <BuildPower+0x130>)
 800beba:	0010      	movs	r0, r2
 800bebc:	0019      	movs	r1, r3
 800bebe:	2302      	movs	r3, #2
 800bec0:	001a      	movs	r2, r3
 800bec2:	f00c fa33 	bl	801832c <memcpy>
	//strcpy(gsmInfo.imei,procBuff);
	//sprintf(smsInfo.build, "IMC4.08\n IMEI:%s v:%i c %i\r\n",gsmInfo.imei, voltage, current1);

	Debug_Send(smsInfo.build);
 800bec6:	4b05      	ldr	r3, [pc, #20]	; (800bedc <BuildPower+0x120>)
 800bec8:	0018      	movs	r0, r3
 800beca:	f7fe fb69 	bl	800a5a0 <Debug_Send>
}
 800bece:	46c0      	nop			; (mov r8, r8)
 800bed0:	46bd      	mov	sp, r7
 800bed2:	b006      	add	sp, #24
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	46c0      	nop			; (mov r8, r8)
 800bed8:	20001880 	.word	0x20001880
 800bedc:	200017a4 	.word	0x200017a4
 800bee0:	08019950 	.word	0x08019950
 800bee4:	0801995c 	.word	0x0801995c
 800bee8:	200019cc 	.word	0x200019cc
 800beec:	08019964 	.word	0x08019964
 800bef0:	08019968 	.word	0x08019968
 800bef4:	20001c20 	.word	0x20001c20
 800bef8:	08019974 	.word	0x08019974

0800befc <Context>:

void Context(){	//MIPCALL
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af02      	add	r7, sp, #8

	myStrSection(procBuff, smsInfo.IP,15,'"',1);
 800bf02:	4919      	ldr	r1, [pc, #100]	; (800bf68 <Context+0x6c>)
 800bf04:	4819      	ldr	r0, [pc, #100]	; (800bf6c <Context+0x70>)
 800bf06:	2301      	movs	r3, #1
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	2322      	movs	r3, #34	; 0x22
 800bf0c:	220f      	movs	r2, #15
 800bf0e:	f001 f880 	bl	800d012 <myStrSection>
	if (strlen(smsInfo.IP) > 3){
 800bf12:	4b15      	ldr	r3, [pc, #84]	; (800bf68 <Context+0x6c>)
 800bf14:	0018      	movs	r0, r3
 800bf16:	f7fd f901 	bl	800911c <strlen>
 800bf1a:	0003      	movs	r3, r0
 800bf1c:	2b03      	cmp	r3, #3
 800bf1e:	d915      	bls.n	800bf4c <Context+0x50>
		smsFlags.gprsActive = 1;		//if gotten IP
 800bf20:	4b13      	ldr	r3, [pc, #76]	; (800bf70 <Context+0x74>)
 800bf22:	2201      	movs	r2, #1
 800bf24:	61da      	str	r2, [r3, #28]
		smsFlags.gprsPending = 0;
 800bf26:	4b12      	ldr	r3, [pc, #72]	; (800bf70 <Context+0x74>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	619a      	str	r2, [r3, #24]
		gsmState = SocketOpen;
 800bf2c:	4b11      	ldr	r3, [pc, #68]	; (800bf74 <Context+0x78>)
 800bf2e:	2215      	movs	r2, #21
 800bf30:	701a      	strb	r2, [r3, #0]
		//gsmState = FTP_Open;
		//gsmState = FTP_Read;
		Debug_Send("IP:");
 800bf32:	4b11      	ldr	r3, [pc, #68]	; (800bf78 <Context+0x7c>)
 800bf34:	0018      	movs	r0, r3
 800bf36:	f7fe fb33 	bl	800a5a0 <Debug_Send>
		Debug_Send(smsInfo.IP);
 800bf3a:	4b0b      	ldr	r3, [pc, #44]	; (800bf68 <Context+0x6c>)
 800bf3c:	0018      	movs	r0, r3
 800bf3e:	f7fe fb2f 	bl	800a5a0 <Debug_Send>
		Debug_Send("\r\n");
 800bf42:	4b0e      	ldr	r3, [pc, #56]	; (800bf7c <Context+0x80>)
 800bf44:	0018      	movs	r0, r3
 800bf46:	f7fe fb2b 	bl	800a5a0 <Debug_Send>
			//gsmInfo.alarm = 0;
			gsmState = SMS_Send;
		}
		//sendData("Context closed\r\n",UART0);
	}
}
 800bf4a:	e00a      	b.n	800bf62 <Context+0x66>
		smsFlags.gprsActive = 0;
 800bf4c:	4b08      	ldr	r3, [pc, #32]	; (800bf70 <Context+0x74>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	61da      	str	r2, [r3, #28]
		if (gsmInfo.alarm == 1){
 800bf52:	4b0b      	ldr	r3, [pc, #44]	; (800bf80 <Context+0x84>)
 800bf54:	2290      	movs	r2, #144	; 0x90
 800bf56:	589b      	ldr	r3, [r3, r2]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d102      	bne.n	800bf62 <Context+0x66>
			gsmState = SMS_Send;
 800bf5c:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <Context+0x78>)
 800bf5e:	220f      	movs	r2, #15
 800bf60:	701a      	strb	r2, [r3, #0]
}
 800bf62:	46c0      	nop			; (mov r8, r8)
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	20001780 	.word	0x20001780
 800bf6c:	2000189c 	.word	0x2000189c
 800bf70:	200014c4 	.word	0x200014c4
 800bf74:	200000c0 	.word	0x200000c0
 800bf78:	08019980 	.word	0x08019980
 800bf7c:	08018da4 	.word	0x08018da4
 800bf80:	200019a8 	.word	0x200019a8

0800bf84 <GotSMS>:

void Socket2(){

}

void GotSMS(){
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af02      	add	r7, sp, #8
	if (smsFlags.reply == 1) return;
 800bf8a:	4b12      	ldr	r3, [pc, #72]	; (800bfd4 <GotSMS+0x50>)
 800bf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d01b      	beq.n	800bfca <GotSMS+0x46>
	char section[15];
	//char tempData[90];
	//strcpy(tempData,procBuff);
	//sendData("SMS info:\r\n",UART0);
	myStrSection(procBuff, section,10,',',0);
 800bf92:	0039      	movs	r1, r7
 800bf94:	4810      	ldr	r0, [pc, #64]	; (800bfd8 <GotSMS+0x54>)
 800bf96:	2300      	movs	r3, #0
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	232c      	movs	r3, #44	; 0x2c
 800bf9c:	220a      	movs	r2, #10
 800bf9e:	f001 f838 	bl	800d012 <myStrSection>
	myStrSection(section, smsInfo.index,3,' ',1);
 800bfa2:	490e      	ldr	r1, [pc, #56]	; (800bfdc <GotSMS+0x58>)
 800bfa4:	0038      	movs	r0, r7
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	2320      	movs	r3, #32
 800bfac:	2203      	movs	r2, #3
 800bfae:	f001 f830 	bl	800d012 <myStrSection>
	myStrSection(procBuff, smsInfo.recMSISDN,20,'"',3);
 800bfb2:	490b      	ldr	r1, [pc, #44]	; (800bfe0 <GotSMS+0x5c>)
 800bfb4:	4808      	ldr	r0, [pc, #32]	; (800bfd8 <GotSMS+0x54>)
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	2322      	movs	r3, #34	; 0x22
 800bfbc:	2214      	movs	r2, #20
 800bfbe:	f001 f828 	bl	800d012 <myStrSection>
	//sendData(smsInfo.recMSISDN,UART0);
	//sendData(smsInfo.index,UART0);
	//sendData("\r\n",UART0);
	//sendData(smsInfo.index,UART0);
	//sendData("\r\n",UART0);
	smsFlags.content = 1;
 800bfc2:	4b04      	ldr	r3, [pc, #16]	; (800bfd4 <GotSMS+0x50>)
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	611a      	str	r2, [r3, #16]
 800bfc8:	e000      	b.n	800bfcc <GotSMS+0x48>
	if (smsFlags.reply == 1) return;
 800bfca:	46c0      	nop			; (mov r8, r8)
}
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	b004      	add	sp, #16
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	46c0      	nop			; (mov r8, r8)
 800bfd4:	200014c4 	.word	0x200014c4
 800bfd8:	2000189c 	.word	0x2000189c
 800bfdc:	200016a8 	.word	0x200016a8
 800bfe0:	200016ac 	.word	0x200016ac

0800bfe4 <OK>:

void OK(){
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	af00      	add	r7, sp, #0

	//Debug_Send("Got OK\r\n");
	errorTimer = 0;
 800bfe8:	4b2b      	ldr	r3, [pc, #172]	; (800c098 <OK+0xb4>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
	gsmTimer = 0;
 800bfee:	4b2b      	ldr	r3, [pc, #172]	; (800c09c <OK+0xb8>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	601a      	str	r2, [r3, #0]
	//if (gsmState == GPRS_On) gsmState = SocketOpen;
	if (smsFlags.reply == 1){		//sent when sms built
 800bff4:	4b2a      	ldr	r3, [pc, #168]	; (800c0a0 <OK+0xbc>)
 800bff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d10a      	bne.n	800c012 <OK+0x2e>
	//if (smsFlags.send == 1){
		if ((smsFlags.config == 1)&&(smsFlags.gprsActive == 0)) gsmState = SMS_Send;
 800bffc:	4b28      	ldr	r3, [pc, #160]	; (800c0a0 <OK+0xbc>)
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d106      	bne.n	800c012 <OK+0x2e>
 800c004:	4b26      	ldr	r3, [pc, #152]	; (800c0a0 <OK+0xbc>)
 800c006:	69db      	ldr	r3, [r3, #28]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d102      	bne.n	800c012 <OK+0x2e>
 800c00c:	4b25      	ldr	r3, [pc, #148]	; (800c0a4 <OK+0xc0>)
 800c00e:	220f      	movs	r2, #15
 800c010:	701a      	strb	r2, [r3, #0]
		//sendData("Send OK\r\n",UART0);
	}
	if (gsmState == GprsContext) smsFlags.context = 1;
 800c012:	4b24      	ldr	r3, [pc, #144]	; (800c0a4 <OK+0xc0>)
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b0a      	cmp	r3, #10
 800c018:	d102      	bne.n	800c020 <OK+0x3c>
 800c01a:	4b21      	ldr	r3, [pc, #132]	; (800c0a0 <OK+0xbc>)
 800c01c:	2201      	movs	r2, #1
 800c01e:	615a      	str	r2, [r3, #20]
	if (smsFlags.del == 1) gsmState = SMS_Del;	//set when sms content read
 800c020:	4b1f      	ldr	r3, [pc, #124]	; (800c0a0 <OK+0xbc>)
 800c022:	6a1b      	ldr	r3, [r3, #32]
 800c024:	2b01      	cmp	r3, #1
 800c026:	d102      	bne.n	800c02e <OK+0x4a>
 800c028:	4b1e      	ldr	r3, [pc, #120]	; (800c0a4 <OK+0xc0>)
 800c02a:	2217      	movs	r2, #23
 800c02c:	701a      	strb	r2, [r3, #0]
	if (gsmState == AutoBaud) gsmState = Search;
 800c02e:	4b1d      	ldr	r3, [pc, #116]	; (800c0a4 <OK+0xc0>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	2b1f      	cmp	r3, #31
 800c034:	d102      	bne.n	800c03c <OK+0x58>
 800c036:	4b1b      	ldr	r3, [pc, #108]	; (800c0a4 <OK+0xc0>)
 800c038:	2204      	movs	r2, #4
 800c03a:	701a      	strb	r2, [r3, #0]
	if (gsmState == GPRS_SendMode) gsmState = GPRS_SendModeTRans;
 800c03c:	4b19      	ldr	r3, [pc, #100]	; (800c0a4 <OK+0xc0>)
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	2b1d      	cmp	r3, #29
 800c042:	d102      	bne.n	800c04a <OK+0x66>
 800c044:	4b17      	ldr	r3, [pc, #92]	; (800c0a4 <OK+0xc0>)
 800c046:	221e      	movs	r2, #30
 800c048:	701a      	strb	r2, [r3, #0]
	if ((gsmInfo.FS_SeekFlag == 1)&&(gsmInfo.FS_Connect== 1)){
 800c04a:	4a17      	ldr	r2, [pc, #92]	; (800c0a8 <OK+0xc4>)
 800c04c:	23b4      	movs	r3, #180	; 0xb4
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	58d3      	ldr	r3, [r2, r3]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d10d      	bne.n	800c072 <OK+0x8e>
 800c056:	4a14      	ldr	r2, [pc, #80]	; (800c0a8 <OK+0xc4>)
 800c058:	23b6      	movs	r3, #182	; 0xb6
 800c05a:	005b      	lsls	r3, r3, #1
 800c05c:	58d3      	ldr	r3, [r2, r3]
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d107      	bne.n	800c072 <OK+0x8e>
		//Read();
		gsmInfo.FS_SeekFlag = 0;
 800c062:	4a11      	ldr	r2, [pc, #68]	; (800c0a8 <OK+0xc4>)
 800c064:	23b4      	movs	r3, #180	; 0xb4
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	2100      	movs	r1, #0
 800c06a:	50d1      	str	r1, [r2, r3]
		gsmState = FS_Read;
 800c06c:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <OK+0xc0>)
 800c06e:	2231      	movs	r2, #49	; 0x31
 800c070:	701a      	strb	r2, [r3, #0]
	}
	if ((ftpRead == 1)&&(gsmInfo.FS_Connect == 1)){
 800c072:	4b0e      	ldr	r3, [pc, #56]	; (800c0ac <OK+0xc8>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d10b      	bne.n	800c092 <OK+0xae>
 800c07a:	4a0b      	ldr	r2, [pc, #44]	; (800c0a8 <OK+0xc4>)
 800c07c:	23b6      	movs	r3, #182	; 0xb6
 800c07e:	005b      	lsls	r3, r3, #1
 800c080:	58d3      	ldr	r3, [r2, r3]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d105      	bne.n	800c092 <OK+0xae>
		ftpRead = 0;
 800c086:	4b09      	ldr	r3, [pc, #36]	; (800c0ac <OK+0xc8>)
 800c088:	2200      	movs	r2, #0
 800c08a:	701a      	strb	r2, [r3, #0]
		gsmState = FS_Seek;
 800c08c:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <OK+0xc0>)
 800c08e:	2230      	movs	r2, #48	; 0x30
 800c090:	701a      	strb	r2, [r3, #0]
	}
	//if (gsmState == 12) gsmState = 6;
	//sprintf(count, "GSM state=%d", gsmState);
	//sendData(count,UART0);
	//sendData("\r\n",UART0);
}
 800c092:	46c0      	nop			; (mov r8, r8)
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	200002e8 	.word	0x200002e8
 800c09c:	20001878 	.word	0x20001878
 800c0a0:	200014c4 	.word	0x200014c4
 800c0a4:	200000c0 	.word	0x200000c0
 800c0a8:	200019a8 	.word	0x200019a8
 800c0ac:	20001c04 	.word	0x20001c04

0800c0b0 <GPRS_SendData>:

void GPRS_SendData(char* gprs){
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
	int len;
	len = strlen(gprs);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	f7fd f82e 	bl	800911c <strlen>
 800c0c0:	0003      	movs	r3, r0
 800c0c2:	60fb      	str	r3, [r7, #12]
	Debug_Send(gprs);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	0018      	movs	r0, r3
 800c0c8:	f7fe fa6a 	bl	800a5a0 <Debug_Send>
	Debug_Send("-send\r\n");
 800c0cc:	4b07      	ldr	r3, [pc, #28]	; (800c0ec <GPRS_SendData+0x3c>)
 800c0ce:	0018      	movs	r0, r3
 800c0d0:	f7fe fa66 	bl	800a5a0 <Debug_Send>
	GSM_Send(gprs);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	0018      	movs	r0, r3
 800c0d8:	f7fe fa10 	bl	800a4fc <GSM_Send>
	//sendData("\r\n",UART1);
	//sendData(GPRSresult,UART0);
	//sendData("\r\n",UART0);
	//sprintf (temp,"GPRS send:GSM state-%d\r\n", gsmState);
	//	sendData(temp,UART0);
	GPRSresult[0] = 0;
 800c0dc:	4b04      	ldr	r3, [pc, #16]	; (800c0f0 <GPRS_SendData+0x40>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	701a      	strb	r2, [r3, #0]
}
 800c0e2:	46c0      	nop			; (mov r8, r8)
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	b004      	add	sp, #16
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	46c0      	nop			; (mov r8, r8)
 800c0ec:	08019984 	.word	0x08019984
 800c0f0:	2000168c 	.word	0x2000168c

0800c0f4 <DataDecrypt>:
		//sendData("Connection closed automatically due to non � fatal alert\r\n",UART0);
		gsmState = GPRS_Off;  		//close socket
	}
}

void DataDecrypt(){
 800c0f4:	b5b0      	push	{r4, r5, r7, lr}
 800c0f6:	b0f8      	sub	sp, #480	; 0x1e0
 800c0f8:	af02      	add	r7, sp, #8
	Debug_Send("Decrypt\r\n");
 800c0fa:	4bd8      	ldr	r3, [pc, #864]	; (800c45c <DataDecrypt+0x368>)
 800c0fc:	0018      	movs	r0, r3
 800c0fe:	f7fe fa4f 	bl	800a5a0 <Debug_Send>
	Debug_Send(procBuff);
 800c102:	4bd7      	ldr	r3, [pc, #860]	; (800c460 <DataDecrypt+0x36c>)
 800c104:	0018      	movs	r0, r3
 800c106:	f7fe fa4b 	bl	800a5a0 <Debug_Send>
	Debug_Send("\r\n");
 800c10a:	4bd6      	ldr	r3, [pc, #856]	; (800c464 <DataDecrypt+0x370>)
 800c10c:	0018      	movs	r0, r3
 800c10e:	f7fe fa47 	bl	800a5a0 <Debug_Send>
	//char test1[10];
	char temp[180];
	char temp1[50];
	//strcpy(procBuff,"696E672F");
	int len;
	int index = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	24ea      	movs	r4, #234	; 0xea
 800c116:	0064      	lsls	r4, r4, #1
 800c118:	193a      	adds	r2, r7, r4
 800c11a:	6013      	str	r3, [r2, #0]
	char hex[4];
	int hexIndex = 0;
 800c11c:	2300      	movs	r3, #0
 800c11e:	22e8      	movs	r2, #232	; 0xe8
 800c120:	0052      	lsls	r2, r2, #1
 800c122:	18ba      	adds	r2, r7, r2
 800c124:	6013      	str	r3, [r2, #0]
	int count = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	22e6      	movs	r2, #230	; 0xe6
 800c12a:	0052      	lsls	r2, r2, #1
 800c12c:	18ba      	adds	r2, r7, r2
 800c12e:	6013      	str	r3, [r2, #0]
	}
	//recIndex++;
	receive[recIndex] = 0;
	index = 0;
	myStrSection(receive, temp ,160,';',index);*/
	strcpy(receive,procBuff);
 800c130:	4acb      	ldr	r2, [pc, #812]	; (800c460 <DataDecrypt+0x36c>)
 800c132:	252c      	movs	r5, #44	; 0x2c
 800c134:	197b      	adds	r3, r7, r5
 800c136:	0011      	movs	r1, r2
 800c138:	0018      	movs	r0, r3
 800c13a:	f00c f936 	bl	80183aa <strcpy>
	myStrSection(receive, temp ,160,';',index);
 800c13e:	193b      	adds	r3, r7, r4
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	b2db      	uxtb	r3, r3
 800c144:	228c      	movs	r2, #140	; 0x8c
 800c146:	0052      	lsls	r2, r2, #1
 800c148:	18b9      	adds	r1, r7, r2
 800c14a:	1978      	adds	r0, r7, r5
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	233b      	movs	r3, #59	; 0x3b
 800c150:	22a0      	movs	r2, #160	; 0xa0
 800c152:	f000 ff5e 	bl	800d012 <myStrSection>

	while (strlen(temp) > 1){
 800c156:	e26f      	b.n	800c638 <DataDecrypt+0x544>
		Debug_Send(temp);
 800c158:	248c      	movs	r4, #140	; 0x8c
 800c15a:	0064      	lsls	r4, r4, #1
 800c15c:	193b      	adds	r3, r7, r4
 800c15e:	0018      	movs	r0, r3
 800c160:	f7fe fa1e 	bl	800a5a0 <Debug_Send>
		Debug_Send("\r\n");
 800c164:	4bbf      	ldr	r3, [pc, #764]	; (800c464 <DataDecrypt+0x370>)
 800c166:	0018      	movs	r0, r3
 800c168:	f7fe fa1a 	bl	800a5a0 <Debug_Send>
		if(strncmp((char*)temp,"user",4)==0){
 800c16c:	49be      	ldr	r1, [pc, #760]	; (800c468 <DataDecrypt+0x374>)
 800c16e:	193b      	adds	r3, r7, r4
 800c170:	2204      	movs	r2, #4
 800c172:	0018      	movs	r0, r3
 800c174:	f00c f921 	bl	80183ba <strncmp>
 800c178:	1e03      	subs	r3, r0, #0
 800c17a:	d12b      	bne.n	800c1d4 <DataDecrypt+0xe0>
			myStrSection(temp, temp1 ,40,':',1);
 800c17c:	25e4      	movs	r5, #228	; 0xe4
 800c17e:	1979      	adds	r1, r7, r5
 800c180:	1938      	adds	r0, r7, r4
 800c182:	2301      	movs	r3, #1
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	233a      	movs	r3, #58	; 0x3a
 800c188:	2228      	movs	r2, #40	; 0x28
 800c18a:	f000 ff42 	bl	800d012 <myStrSection>
			myStrSection(temp1, gsmInfo.user ,30,',',0);
 800c18e:	49b7      	ldr	r1, [pc, #732]	; (800c46c <DataDecrypt+0x378>)
 800c190:	1978      	adds	r0, r7, r5
 800c192:	2300      	movs	r3, #0
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	232c      	movs	r3, #44	; 0x2c
 800c198:	221e      	movs	r2, #30
 800c19a:	f000 ff3a 	bl	800d012 <myStrSection>
			myStrSection(temp1, gsmInfo.msisdn ,30,',',1);
 800c19e:	49b4      	ldr	r1, [pc, #720]	; (800c470 <DataDecrypt+0x37c>)
 800c1a0:	1978      	adds	r0, r7, r5
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	232c      	movs	r3, #44	; 0x2c
 800c1a8:	221e      	movs	r2, #30
 800c1aa:	f000 ff32 	bl	800d012 <myStrSection>
			Debug_Send(gsmInfo.user);
 800c1ae:	4baf      	ldr	r3, [pc, #700]	; (800c46c <DataDecrypt+0x378>)
 800c1b0:	0018      	movs	r0, r3
 800c1b2:	f7fe f9f5 	bl	800a5a0 <Debug_Send>
			Debug_Send(" - ");
 800c1b6:	4baf      	ldr	r3, [pc, #700]	; (800c474 <DataDecrypt+0x380>)
 800c1b8:	0018      	movs	r0, r3
 800c1ba:	f7fe f9f1 	bl	800a5a0 <Debug_Send>
			Debug_Send(gsmInfo.msisdn);
 800c1be:	4bac      	ldr	r3, [pc, #688]	; (800c470 <DataDecrypt+0x37c>)
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	f7fe f9ed 	bl	800a5a0 <Debug_Send>
			//LED = 0;
			Debug_Send("\r\n");
 800c1c6:	4ba7      	ldr	r3, [pc, #668]	; (800c464 <DataDecrypt+0x370>)
 800c1c8:	0018      	movs	r0, r3
 800c1ca:	f7fe f9e9 	bl	800a5a0 <Debug_Send>
			gsmInfo.registered = 1;
 800c1ce:	4baa      	ldr	r3, [pc, #680]	; (800c478 <DataDecrypt+0x384>)
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	67da      	str	r2, [r3, #124]	; 0x7c
		}
		if(strncmp((char*)temp,"output",5)==0){
 800c1d4:	49a9      	ldr	r1, [pc, #676]	; (800c47c <DataDecrypt+0x388>)
 800c1d6:	238c      	movs	r3, #140	; 0x8c
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	18fb      	adds	r3, r7, r3
 800c1dc:	2205      	movs	r2, #5
 800c1de:	0018      	movs	r0, r3
 800c1e0:	f00c f8eb 	bl	80183ba <strncmp>
 800c1e4:	1e03      	subs	r3, r0, #0
 800c1e6:	d11b      	bne.n	800c220 <DataDecrypt+0x12c>
			char state[5];
			myStrSection(receive, state ,4,':',1);
 800c1e8:	2424      	movs	r4, #36	; 0x24
 800c1ea:	1939      	adds	r1, r7, r4
 800c1ec:	232c      	movs	r3, #44	; 0x2c
 800c1ee:	18f8      	adds	r0, r7, r3
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	233a      	movs	r3, #58	; 0x3a
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	f000 ff0b 	bl	800d012 <myStrSection>
			if(strncmp(state,"ON",2)==0){
 800c1fc:	49a0      	ldr	r1, [pc, #640]	; (800c480 <DataDecrypt+0x38c>)
 800c1fe:	193b      	adds	r3, r7, r4
 800c200:	2202      	movs	r2, #2
 800c202:	0018      	movs	r0, r3
 800c204:	f00c f8d9 	bl	80183ba <strncmp>
				if (gsmInfo.updateFlag == 0){
					//if (gsmInfo.activeFlag == 1) RELAY = 1;
				}
			}
			if(strncmp(state,"OFF",3)==0){
 800c208:	499e      	ldr	r1, [pc, #632]	; (800c484 <DataDecrypt+0x390>)
 800c20a:	193b      	adds	r3, r7, r4
 800c20c:	2203      	movs	r2, #3
 800c20e:	0018      	movs	r0, r3
 800c210:	f00c f8d3 	bl	80183ba <strncmp>
 800c214:	1e03      	subs	r3, r0, #0
 800c216:	d103      	bne.n	800c220 <DataDecrypt+0x12c>
				Debug_Send("Off\r\n");
 800c218:	4b9b      	ldr	r3, [pc, #620]	; (800c488 <DataDecrypt+0x394>)
 800c21a:	0018      	movs	r0, r3
 800c21c:	f7fe f9c0 	bl	800a5a0 <Debug_Send>
					//if (gsmInfo.activeFlag == 1) RELAY = 0;
				}
			}
			//CheckUser();
		}
		if(strncmp((char*)temp,"mode",4)==0){
 800c220:	499a      	ldr	r1, [pc, #616]	; (800c48c <DataDecrypt+0x398>)
 800c222:	248c      	movs	r4, #140	; 0x8c
 800c224:	0064      	lsls	r4, r4, #1
 800c226:	193b      	adds	r3, r7, r4
 800c228:	2204      	movs	r2, #4
 800c22a:	0018      	movs	r0, r3
 800c22c:	f00c f8c5 	bl	80183ba <strncmp>
 800c230:	1e03      	subs	r3, r0, #0
 800c232:	d130      	bne.n	800c296 <DataDecrypt+0x1a2>
			Debug_Send("GOT MODE!!!!!\r\n");
 800c234:	4b96      	ldr	r3, [pc, #600]	; (800c490 <DataDecrypt+0x39c>)
 800c236:	0018      	movs	r0, r3
 800c238:	f7fe f9b2 	bl	800a5a0 <Debug_Send>
			myStrSection(temp, temp1 ,40,':',1);
 800c23c:	25e4      	movs	r5, #228	; 0xe4
 800c23e:	1979      	adds	r1, r7, r5
 800c240:	1938      	adds	r0, r7, r4
 800c242:	2301      	movs	r3, #1
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	233a      	movs	r3, #58	; 0x3a
 800c248:	2228      	movs	r2, #40	; 0x28
 800c24a:	f000 fee2 	bl	800d012 <myStrSection>
			if (strncmp(temp1,"latch",5)==0){
 800c24e:	4991      	ldr	r1, [pc, #580]	; (800c494 <DataDecrypt+0x3a0>)
 800c250:	197b      	adds	r3, r7, r5
 800c252:	2205      	movs	r2, #5
 800c254:	0018      	movs	r0, r3
 800c256:	f00c f8b0 	bl	80183ba <strncmp>
 800c25a:	1e03      	subs	r3, r0, #0
 800c25c:	d104      	bne.n	800c268 <DataDecrypt+0x174>
				gsmInfo.modeFlag = 0;
 800c25e:	4a86      	ldr	r2, [pc, #536]	; (800c478 <DataDecrypt+0x384>)
 800c260:	2394      	movs	r3, #148	; 0x94
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	2100      	movs	r1, #0
 800c266:	50d1      	str	r1, [r2, r3]
			}
			if (strncmp(temp1,"pulse",5)==0){
 800c268:	498b      	ldr	r1, [pc, #556]	; (800c498 <DataDecrypt+0x3a4>)
 800c26a:	23e4      	movs	r3, #228	; 0xe4
 800c26c:	18fb      	adds	r3, r7, r3
 800c26e:	2205      	movs	r2, #5
 800c270:	0018      	movs	r0, r3
 800c272:	f00c f8a2 	bl	80183ba <strncmp>
 800c276:	1e03      	subs	r3, r0, #0
 800c278:	d104      	bne.n	800c284 <DataDecrypt+0x190>
				gsmInfo.modeFlag = 1;
 800c27a:	4a7f      	ldr	r2, [pc, #508]	; (800c478 <DataDecrypt+0x384>)
 800c27c:	2394      	movs	r3, #148	; 0x94
 800c27e:	005b      	lsls	r3, r3, #1
 800c280:	2101      	movs	r1, #1
 800c282:	50d1      	str	r1, [r2, r3]
			}
			Debug_Send(temp1);
 800c284:	23e4      	movs	r3, #228	; 0xe4
 800c286:	18fb      	adds	r3, r7, r3
 800c288:	0018      	movs	r0, r3
 800c28a:	f7fe f989 	bl	800a5a0 <Debug_Send>
			Debug_Send("\r\n");
 800c28e:	4b75      	ldr	r3, [pc, #468]	; (800c464 <DataDecrypt+0x370>)
 800c290:	0018      	movs	r0, r3
 800c292:	f7fe f985 	bl	800a5a0 <Debug_Send>
		}
		if(strncmp((char*)temp,"ccid",4)==0){
 800c296:	4981      	ldr	r1, [pc, #516]	; (800c49c <DataDecrypt+0x3a8>)
 800c298:	248c      	movs	r4, #140	; 0x8c
 800c29a:	0064      	lsls	r4, r4, #1
 800c29c:	193b      	adds	r3, r7, r4
 800c29e:	2204      	movs	r2, #4
 800c2a0:	0018      	movs	r0, r3
 800c2a2:	f00c f88a 	bl	80183ba <strncmp>
 800c2a6:	1e03      	subs	r3, r0, #0
 800c2a8:	d122      	bne.n	800c2f0 <DataDecrypt+0x1fc>
			char ccid1[30];
			myStrSection(temp, ccid1 ,40,':',1);
 800c2aa:	1d39      	adds	r1, r7, #4
 800c2ac:	1938      	adds	r0, r7, r4
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	233a      	movs	r3, #58	; 0x3a
 800c2b4:	2228      	movs	r2, #40	; 0x28
 800c2b6:	f000 feac 	bl	800d012 <myStrSection>
			if (strncmp(gsmInfo.ccid,ccid1,25)==0){
 800c2ba:	1d39      	adds	r1, r7, #4
 800c2bc:	4b78      	ldr	r3, [pc, #480]	; (800c4a0 <DataDecrypt+0x3ac>)
 800c2be:	2219      	movs	r2, #25
 800c2c0:	0018      	movs	r0, r3
 800c2c2:	f00c f87a 	bl	80183ba <strncmp>
 800c2c6:	1e03      	subs	r3, r0, #0
 800c2c8:	d109      	bne.n	800c2de <DataDecrypt+0x1ea>
				Debug_Send("CCID same\r\n");
 800c2ca:	4b76      	ldr	r3, [pc, #472]	; (800c4a4 <DataDecrypt+0x3b0>)
 800c2cc:	0018      	movs	r0, r3
 800c2ce:	f7fe f967 	bl	800a5a0 <Debug_Send>
				gsmInfo.ccidStatus = 0;
 800c2d2:	4a69      	ldr	r2, [pc, #420]	; (800c478 <DataDecrypt+0x384>)
 800c2d4:	2398      	movs	r3, #152	; 0x98
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	2100      	movs	r1, #0
 800c2da:	50d1      	str	r1, [r2, r3]
 800c2dc:	e008      	b.n	800c2f0 <DataDecrypt+0x1fc>
			}
			else{
				//alarmFunc(ccid);
				//RELAY = 0;
				Debug_Send("CCID differ\r\n");
 800c2de:	4b72      	ldr	r3, [pc, #456]	; (800c4a8 <DataDecrypt+0x3b4>)
 800c2e0:	0018      	movs	r0, r3
 800c2e2:	f7fe f95d 	bl	800a5a0 <Debug_Send>
				gsmInfo.ccidStatus = 1;
 800c2e6:	4a64      	ldr	r2, [pc, #400]	; (800c478 <DataDecrypt+0x384>)
 800c2e8:	2398      	movs	r3, #152	; 0x98
 800c2ea:	005b      	lsls	r3, r3, #1
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	50d1      	str	r1, [r2, r3]
			}
		}
		if(strncmp((char*)temp,"status",6)==0){
 800c2f0:	496e      	ldr	r1, [pc, #440]	; (800c4ac <DataDecrypt+0x3b8>)
 800c2f2:	248c      	movs	r4, #140	; 0x8c
 800c2f4:	0064      	lsls	r4, r4, #1
 800c2f6:	193b      	adds	r3, r7, r4
 800c2f8:	2206      	movs	r2, #6
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	f00c f85d 	bl	80183ba <strncmp>

		}
		if(strncmp((char*)temp,"vth1",4)==0){
 800c300:	496b      	ldr	r1, [pc, #428]	; (800c4b0 <DataDecrypt+0x3bc>)
 800c302:	193b      	adds	r3, r7, r4
 800c304:	2204      	movs	r2, #4
 800c306:	0018      	movs	r0, r3
 800c308:	f00c f857 	bl	80183ba <strncmp>
 800c30c:	1e03      	subs	r3, r0, #0
 800c30e:	d12e      	bne.n	800c36e <DataDecrypt+0x27a>
			if (gsmInfo.vthFlag == 0){
 800c310:	4a59      	ldr	r2, [pc, #356]	; (800c478 <DataDecrypt+0x384>)
 800c312:	238a      	movs	r3, #138	; 0x8a
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	58d3      	ldr	r3, [r2, r3]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d120      	bne.n	800c35e <DataDecrypt+0x26a>
				Debug_Send("GOT THV!!!!!\r\n");
 800c31c:	4b65      	ldr	r3, [pc, #404]	; (800c4b4 <DataDecrypt+0x3c0>)
 800c31e:	0018      	movs	r0, r3
 800c320:	f7fe f93e 	bl	800a5a0 <Debug_Send>
				myStrSection(temp, gsmInfo.vth ,5,':',1);
 800c324:	4964      	ldr	r1, [pc, #400]	; (800c4b8 <DataDecrypt+0x3c4>)
 800c326:	1938      	adds	r0, r7, r4
 800c328:	2301      	movs	r3, #1
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	233a      	movs	r3, #58	; 0x3a
 800c32e:	2205      	movs	r2, #5
 800c330:	f000 fe6f 	bl	800d012 <myStrSection>
				gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
 800c334:	4b60      	ldr	r3, [pc, #384]	; (800c4b8 <DataDecrypt+0x3c4>)
 800c336:	210a      	movs	r1, #10
 800c338:	0018      	movs	r0, r3
 800c33a:	f000 fff7 	bl	800d32c <myStrLong>
 800c33e:	0001      	movs	r1, r0
 800c340:	4a4d      	ldr	r2, [pc, #308]	; (800c478 <DataDecrypt+0x384>)
 800c342:	2388      	movs	r3, #136	; 0x88
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	50d1      	str	r1, [r2, r3]
				gsmInfo.vth_l *= 100;
 800c348:	4a4b      	ldr	r2, [pc, #300]	; (800c478 <DataDecrypt+0x384>)
 800c34a:	2388      	movs	r3, #136	; 0x88
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	58d3      	ldr	r3, [r2, r3]
 800c350:	2264      	movs	r2, #100	; 0x64
 800c352:	435a      	muls	r2, r3
 800c354:	0011      	movs	r1, r2
 800c356:	4a48      	ldr	r2, [pc, #288]	; (800c478 <DataDecrypt+0x384>)
 800c358:	2388      	movs	r3, #136	; 0x88
 800c35a:	005b      	lsls	r3, r3, #1
 800c35c:	50d1      	str	r1, [r2, r3]
			}
			Debug_Send(gsmInfo.vth);
 800c35e:	4b56      	ldr	r3, [pc, #344]	; (800c4b8 <DataDecrypt+0x3c4>)
 800c360:	0018      	movs	r0, r3
 800c362:	f7fe f91d 	bl	800a5a0 <Debug_Send>
			Debug_Send("\r\n");
 800c366:	4b3f      	ldr	r3, [pc, #252]	; (800c464 <DataDecrypt+0x370>)
 800c368:	0018      	movs	r0, r3
 800c36a:	f7fe f919 	bl	800a5a0 <Debug_Send>

		}
		if(strncmp((char*)smsInfo.content1,"vth",5)==0){
 800c36e:	4a53      	ldr	r2, [pc, #332]	; (800c4bc <DataDecrypt+0x3c8>)
 800c370:	4b53      	ldr	r3, [pc, #332]	; (800c4c0 <DataDecrypt+0x3cc>)
 800c372:	0011      	movs	r1, r2
 800c374:	0018      	movs	r0, r3
 800c376:	f7fc fec7 	bl	8009108 <strcmp>
 800c37a:	1e03      	subs	r3, r0, #0
 800c37c:	d11c      	bne.n	800c3b8 <DataDecrypt+0x2c4>
			myStrSection(smsInfo.content1, gsmInfo.vth,4,':',1);
 800c37e:	494e      	ldr	r1, [pc, #312]	; (800c4b8 <DataDecrypt+0x3c4>)
 800c380:	484f      	ldr	r0, [pc, #316]	; (800c4c0 <DataDecrypt+0x3cc>)
 800c382:	2301      	movs	r3, #1
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	233a      	movs	r3, #58	; 0x3a
 800c388:	2204      	movs	r2, #4
 800c38a:	f000 fe42 	bl	800d012 <myStrSection>
			//gsmInfo.vth_f = atof(gsmInfo.vth);
			gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
 800c38e:	4b4a      	ldr	r3, [pc, #296]	; (800c4b8 <DataDecrypt+0x3c4>)
 800c390:	210a      	movs	r1, #10
 800c392:	0018      	movs	r0, r3
 800c394:	f000 ffca 	bl	800d32c <myStrLong>
 800c398:	0001      	movs	r1, r0
 800c39a:	4a37      	ldr	r2, [pc, #220]	; (800c478 <DataDecrypt+0x384>)
 800c39c:	2388      	movs	r3, #136	; 0x88
 800c39e:	005b      	lsls	r3, r3, #1
 800c3a0:	50d1      	str	r1, [r2, r3]
			gsmInfo.vth_l *= 100;
 800c3a2:	4a35      	ldr	r2, [pc, #212]	; (800c478 <DataDecrypt+0x384>)
 800c3a4:	2388      	movs	r3, #136	; 0x88
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	58d3      	ldr	r3, [r2, r3]
 800c3aa:	2264      	movs	r2, #100	; 0x64
 800c3ac:	435a      	muls	r2, r3
 800c3ae:	0011      	movs	r1, r2
 800c3b0:	4a31      	ldr	r2, [pc, #196]	; (800c478 <DataDecrypt+0x384>)
 800c3b2:	2388      	movs	r3, #136	; 0x88
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	50d1      	str	r1, [r2, r3]
		}
		if(strncmp((char*)temp,"mode",4)==0){
 800c3b8:	4934      	ldr	r1, [pc, #208]	; (800c48c <DataDecrypt+0x398>)
 800c3ba:	248c      	movs	r4, #140	; 0x8c
 800c3bc:	0064      	lsls	r4, r4, #1
 800c3be:	193b      	adds	r3, r7, r4
 800c3c0:	2204      	movs	r2, #4
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	f00b fff9 	bl	80183ba <strncmp>

		}
		if(strncmp((char*)temp,"status",5)==0){
 800c3c8:	4938      	ldr	r1, [pc, #224]	; (800c4ac <DataDecrypt+0x3b8>)
 800c3ca:	193b      	adds	r3, r7, r4
 800c3cc:	2205      	movs	r2, #5
 800c3ce:	0018      	movs	r0, r3
 800c3d0:	f00b fff3 	bl	80183ba <strncmp>
 800c3d4:	1e03      	subs	r3, r0, #0
 800c3d6:	d121      	bne.n	800c41c <DataDecrypt+0x328>
			myStrSection(temp, temp1 ,4,':',1);
 800c3d8:	25e4      	movs	r5, #228	; 0xe4
 800c3da:	1979      	adds	r1, r7, r5
 800c3dc:	1938      	adds	r0, r7, r4
 800c3de:	2301      	movs	r3, #1
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	233a      	movs	r3, #58	; 0x3a
 800c3e4:	2204      	movs	r2, #4
 800c3e6:	f000 fe14 	bl	800d012 <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800c3ea:	197b      	adds	r3, r7, r5
 800c3ec:	781a      	ldrb	r2, [r3, #0]
 800c3ee:	4b35      	ldr	r3, [pc, #212]	; (800c4c4 <DataDecrypt+0x3d0>)
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	d109      	bne.n	800c40a <DataDecrypt+0x316>
				Debug_Send("Unit active\r\n");
 800c3f6:	4b34      	ldr	r3, [pc, #208]	; (800c4c8 <DataDecrypt+0x3d4>)
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	f7fe f8d1 	bl	800a5a0 <Debug_Send>
				gsmInfo.activeFlag = 1;
 800c3fe:	4a1e      	ldr	r2, [pc, #120]	; (800c478 <DataDecrypt+0x384>)
 800c400:	2390      	movs	r3, #144	; 0x90
 800c402:	005b      	lsls	r3, r3, #1
 800c404:	2101      	movs	r1, #1
 800c406:	50d1      	str	r1, [r2, r3]
 800c408:	e008      	b.n	800c41c <DataDecrypt+0x328>
			}
			else{
				gsmInfo.activeFlag = 0;
 800c40a:	4a1b      	ldr	r2, [pc, #108]	; (800c478 <DataDecrypt+0x384>)
 800c40c:	2390      	movs	r3, #144	; 0x90
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	2100      	movs	r1, #0
 800c412:	50d1      	str	r1, [r2, r3]
				Debug_Send("Unit not active\r\n");
 800c414:	4b2d      	ldr	r3, [pc, #180]	; (800c4cc <DataDecrypt+0x3d8>)
 800c416:	0018      	movs	r0, r3
 800c418:	f7fe f8c2 	bl	800a5a0 <Debug_Send>
			}
		}
		if(strncmp((char*)temp,"sms",3)==0){
 800c41c:	492c      	ldr	r1, [pc, #176]	; (800c4d0 <DataDecrypt+0x3dc>)
 800c41e:	248c      	movs	r4, #140	; 0x8c
 800c420:	0064      	lsls	r4, r4, #1
 800c422:	193b      	adds	r3, r7, r4
 800c424:	2203      	movs	r2, #3
 800c426:	0018      	movs	r0, r3
 800c428:	f00b ffc7 	bl	80183ba <strncmp>
 800c42c:	1e03      	subs	r3, r0, #0
 800c42e:	d157      	bne.n	800c4e0 <DataDecrypt+0x3ec>
			myStrSection(temp, temp1 ,4,':',1);
 800c430:	25e4      	movs	r5, #228	; 0xe4
 800c432:	1979      	adds	r1, r7, r5
 800c434:	1938      	adds	r0, r7, r4
 800c436:	2301      	movs	r3, #1
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	233a      	movs	r3, #58	; 0x3a
 800c43c:	2204      	movs	r2, #4
 800c43e:	f000 fde8 	bl	800d012 <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800c442:	197b      	adds	r3, r7, r5
 800c444:	781a      	ldrb	r2, [r3, #0]
 800c446:	4b1f      	ldr	r3, [pc, #124]	; (800c4c4 <DataDecrypt+0x3d0>)
 800c448:	781b      	ldrb	r3, [r3, #0]
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	d144      	bne.n	800c4d8 <DataDecrypt+0x3e4>
				Debug_Send("Generate SMS\r\n");
 800c44e:	4b21      	ldr	r3, [pc, #132]	; (800c4d4 <DataDecrypt+0x3e0>)
 800c450:	0018      	movs	r0, r3
 800c452:	f7fe f8a5 	bl	800a5a0 <Debug_Send>
				buildInfo();
 800c456:	f7ff fb87 	bl	800bb68 <buildInfo>
 800c45a:	e041      	b.n	800c4e0 <DataDecrypt+0x3ec>
 800c45c:	080199b0 	.word	0x080199b0
 800c460:	2000189c 	.word	0x2000189c
 800c464:	08018da4 	.word	0x08018da4
 800c468:	080199bc 	.word	0x080199bc
 800c46c:	20001a3c 	.word	0x20001a3c
 800c470:	20001a5a 	.word	0x20001a5a
 800c474:	08019458 	.word	0x08019458
 800c478:	200019a8 	.word	0x200019a8
 800c47c:	080199c4 	.word	0x080199c4
 800c480:	08019790 	.word	0x08019790
 800c484:	08019794 	.word	0x08019794
 800c488:	080199cc 	.word	0x080199cc
 800c48c:	080199d4 	.word	0x080199d4
 800c490:	080199dc 	.word	0x080199dc
 800c494:	080199ec 	.word	0x080199ec
 800c498:	080199f4 	.word	0x080199f4
 800c49c:	080199fc 	.word	0x080199fc
 800c4a0:	200019f4 	.word	0x200019f4
 800c4a4:	08019a04 	.word	0x08019a04
 800c4a8:	08019a10 	.word	0x08019a10
 800c4ac:	08019a20 	.word	0x08019a20
 800c4b0:	08019a28 	.word	0x08019a28
 800c4b4:	08019a30 	.word	0x08019a30
 800c4b8:	20001aac 	.word	0x20001aac
 800c4bc:	08019a40 	.word	0x08019a40
 800c4c0:	200016cc 	.word	0x200016cc
 800c4c4:	08019990 	.word	0x08019990
 800c4c8:	08019a44 	.word	0x08019a44
 800c4cc:	08019a54 	.word	0x08019a54
 800c4d0:	08019a68 	.word	0x08019a68
 800c4d4:	08019a6c 	.word	0x08019a6c
			}
			else Debug_Send("Dont generate SMS\r\n");
 800c4d8:	4b6a      	ldr	r3, [pc, #424]	; (800c684 <DataDecrypt+0x590>)
 800c4da:	0018      	movs	r0, r3
 800c4dc:	f7fe f860 	bl	800a5a0 <Debug_Send>
		}
		if(strncmp((char*)temp,"sync",4)==0){
 800c4e0:	4969      	ldr	r1, [pc, #420]	; (800c688 <DataDecrypt+0x594>)
 800c4e2:	248c      	movs	r4, #140	; 0x8c
 800c4e4:	0064      	lsls	r4, r4, #1
 800c4e6:	193b      	adds	r3, r7, r4
 800c4e8:	2204      	movs	r2, #4
 800c4ea:	0018      	movs	r0, r3
 800c4ec:	f00b ff65 	bl	80183ba <strncmp>
 800c4f0:	1e03      	subs	r3, r0, #0
 800c4f2:	d117      	bne.n	800c524 <DataDecrypt+0x430>
			myStrSection(temp, temp1 ,4,':',1);
 800c4f4:	25e4      	movs	r5, #228	; 0xe4
 800c4f6:	1979      	adds	r1, r7, r5
 800c4f8:	1938      	adds	r0, r7, r4
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	9300      	str	r3, [sp, #0]
 800c4fe:	233a      	movs	r3, #58	; 0x3a
 800c500:	2204      	movs	r2, #4
 800c502:	f000 fd86 	bl	800d012 <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800c506:	197b      	adds	r3, r7, r5
 800c508:	781a      	ldrb	r2, [r3, #0]
 800c50a:	4b60      	ldr	r3, [pc, #384]	; (800c68c <DataDecrypt+0x598>)
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	d104      	bne.n	800c51c <DataDecrypt+0x428>
				Debug_Send("Unit active\r\n");
 800c512:	4b5f      	ldr	r3, [pc, #380]	; (800c690 <DataDecrypt+0x59c>)
 800c514:	0018      	movs	r0, r3
 800c516:	f7fe f843 	bl	800a5a0 <Debug_Send>
 800c51a:	e003      	b.n	800c524 <DataDecrypt+0x430>
			}
			else Debug_Send("Unit not active\r\n");
 800c51c:	4b5d      	ldr	r3, [pc, #372]	; (800c694 <DataDecrypt+0x5a0>)
 800c51e:	0018      	movs	r0, r3
 800c520:	f7fe f83e 	bl	800a5a0 <Debug_Send>
		}
		if(strncmp((char*)temp,"vthresh",7)==0){
 800c524:	495c      	ldr	r1, [pc, #368]	; (800c698 <DataDecrypt+0x5a4>)
 800c526:	248c      	movs	r4, #140	; 0x8c
 800c528:	0064      	lsls	r4, r4, #1
 800c52a:	193b      	adds	r3, r7, r4
 800c52c:	2207      	movs	r2, #7
 800c52e:	0018      	movs	r0, r3
 800c530:	f00b ff43 	bl	80183ba <strncmp>
 800c534:	1e03      	subs	r3, r0, #0
 800c536:	d121      	bne.n	800c57c <DataDecrypt+0x488>
			myStrSection(temp, temp1 ,4,':',1);
 800c538:	25e4      	movs	r5, #228	; 0xe4
 800c53a:	1979      	adds	r1, r7, r5
 800c53c:	1938      	adds	r0, r7, r4
 800c53e:	2301      	movs	r3, #1
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	233a      	movs	r3, #58	; 0x3a
 800c544:	2204      	movs	r2, #4
 800c546:	f000 fd64 	bl	800d012 <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800c54a:	197b      	adds	r3, r7, r5
 800c54c:	781a      	ldrb	r2, [r3, #0]
 800c54e:	4b4f      	ldr	r3, [pc, #316]	; (800c68c <DataDecrypt+0x598>)
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	d109      	bne.n	800c56a <DataDecrypt+0x476>
				Debug_Send("Threshold active\r\n");
 800c556:	4b51      	ldr	r3, [pc, #324]	; (800c69c <DataDecrypt+0x5a8>)
 800c558:	0018      	movs	r0, r3
 800c55a:	f7fe f821 	bl	800a5a0 <Debug_Send>
				gsmInfo.vThreshold = 1;
 800c55e:	4a50      	ldr	r2, [pc, #320]	; (800c6a0 <DataDecrypt+0x5ac>)
 800c560:	2396      	movs	r3, #150	; 0x96
 800c562:	005b      	lsls	r3, r3, #1
 800c564:	2101      	movs	r1, #1
 800c566:	50d1      	str	r1, [r2, r3]
 800c568:	e008      	b.n	800c57c <DataDecrypt+0x488>
			}
			else{
				Debug_Send("Threshold not active\r\n");
 800c56a:	4b4e      	ldr	r3, [pc, #312]	; (800c6a4 <DataDecrypt+0x5b0>)
 800c56c:	0018      	movs	r0, r3
 800c56e:	f7fe f817 	bl	800a5a0 <Debug_Send>
				gsmInfo.vThreshold = 0;
 800c572:	4a4b      	ldr	r2, [pc, #300]	; (800c6a0 <DataDecrypt+0x5ac>)
 800c574:	2396      	movs	r3, #150	; 0x96
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	2100      	movs	r1, #0
 800c57a:	50d1      	str	r1, [r2, r3]
			}
		}
		if(strncmp((char*)temp,"saved",5)==0){
 800c57c:	494a      	ldr	r1, [pc, #296]	; (800c6a8 <DataDecrypt+0x5b4>)
 800c57e:	238c      	movs	r3, #140	; 0x8c
 800c580:	005b      	lsls	r3, r3, #1
 800c582:	18fb      	adds	r3, r7, r3
 800c584:	2205      	movs	r2, #5
 800c586:	0018      	movs	r0, r3
 800c588:	f00b ff17 	bl	80183ba <strncmp>
 800c58c:	1e03      	subs	r3, r0, #0
 800c58e:	d109      	bne.n	800c5a4 <DataDecrypt+0x4b0>
			Debug_Send("Generate registration SMS\r\n");
 800c590:	4b46      	ldr	r3, [pc, #280]	; (800c6ac <DataDecrypt+0x5b8>)
 800c592:	0018      	movs	r0, r3
 800c594:	f7fe f804 	bl	800a5a0 <Debug_Send>
			RegisterConfirm();
 800c598:	f7ff fa44 	bl	800ba24 <RegisterConfirm>
			Debug_Send("Registration SMS generated\r\n");
 800c59c:	4b44      	ldr	r3, [pc, #272]	; (800c6b0 <DataDecrypt+0x5bc>)
 800c59e:	0018      	movs	r0, r3
 800c5a0:	f7fd fffe 	bl	800a5a0 <Debug_Send>
		}
		if(strncmp((char*)temp,"tmg",3)==0){
 800c5a4:	4943      	ldr	r1, [pc, #268]	; (800c6b4 <DataDecrypt+0x5c0>)
 800c5a6:	248c      	movs	r4, #140	; 0x8c
 800c5a8:	0064      	lsls	r4, r4, #1
 800c5aa:	193b      	adds	r3, r7, r4
 800c5ac:	2203      	movs	r2, #3
 800c5ae:	0018      	movs	r0, r3
 800c5b0:	f00b ff03 	bl	80183ba <strncmp>
 800c5b4:	1e03      	subs	r3, r0, #0
 800c5b6:	d11e      	bne.n	800c5f6 <DataDecrypt+0x502>
			myStrSection(temp, gsmInfo.GPRSint,20,':',1);
 800c5b8:	493f      	ldr	r1, [pc, #252]	; (800c6b8 <DataDecrypt+0x5c4>)
 800c5ba:	1938      	adds	r0, r7, r4
 800c5bc:	2301      	movs	r3, #1
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	233a      	movs	r3, #58	; 0x3a
 800c5c2:	2214      	movs	r2, #20
 800c5c4:	f000 fd25 	bl	800d012 <myStrSection>
			gsmInfo.GPRSinterval = myStrLong(gsmInfo.GPRSint, 10);
 800c5c8:	4b3b      	ldr	r3, [pc, #236]	; (800c6b8 <DataDecrypt+0x5c4>)
 800c5ca:	210a      	movs	r1, #10
 800c5cc:	0018      	movs	r0, r3
 800c5ce:	f000 fead 	bl	800d32c <myStrLong>
 800c5d2:	0001      	movs	r1, r0
 800c5d4:	4a32      	ldr	r2, [pc, #200]	; (800c6a0 <DataDecrypt+0x5ac>)
 800c5d6:	23a0      	movs	r3, #160	; 0xa0
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	50d1      	str	r1, [r2, r3]
			gsmInfo.GPRSinterval *= 60;
 800c5dc:	4a30      	ldr	r2, [pc, #192]	; (800c6a0 <DataDecrypt+0x5ac>)
 800c5de:	23a0      	movs	r3, #160	; 0xa0
 800c5e0:	005b      	lsls	r3, r3, #1
 800c5e2:	58d2      	ldr	r2, [r2, r3]
 800c5e4:	0013      	movs	r3, r2
 800c5e6:	011b      	lsls	r3, r3, #4
 800c5e8:	1a9b      	subs	r3, r3, r2
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	0019      	movs	r1, r3
 800c5ee:	4a2c      	ldr	r2, [pc, #176]	; (800c6a0 <DataDecrypt+0x5ac>)
 800c5f0:	23a0      	movs	r3, #160	; 0xa0
 800c5f2:	005b      	lsls	r3, r3, #1
 800c5f4:	50d1      	str	r1, [r2, r3]
			//gsmInfo.vth_f = atof(gsmInfo.vth);


			//gsmInfo.vthFlag = 1;
		}
		if(strncmp((char*)temp,"no user",7)==0){
 800c5f6:	4931      	ldr	r1, [pc, #196]	; (800c6bc <DataDecrypt+0x5c8>)
 800c5f8:	238c      	movs	r3, #140	; 0x8c
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	18fb      	adds	r3, r7, r3
 800c5fe:	2207      	movs	r2, #7
 800c600:	0018      	movs	r0, r3
 800c602:	f00b feda 	bl	80183ba <strncmp>
 800c606:	1e03      	subs	r3, r0, #0
 800c608:	d102      	bne.n	800c610 <DataDecrypt+0x51c>
			//LED = 1;
			gsmInfo.registered = 0;
 800c60a:	4b25      	ldr	r3, [pc, #148]	; (800c6a0 <DataDecrypt+0x5ac>)
 800c60c:	2200      	movs	r2, #0
 800c60e:	67da      	str	r2, [r3, #124]	; 0x7c
		}
		index++;
 800c610:	22ea      	movs	r2, #234	; 0xea
 800c612:	0052      	lsls	r2, r2, #1
 800c614:	18bb      	adds	r3, r7, r2
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	18b9      	adds	r1, r7, r2
 800c61c:	600b      	str	r3, [r1, #0]
		myStrSection(receive, temp ,160,';',index);
 800c61e:	18bb      	adds	r3, r7, r2
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	228c      	movs	r2, #140	; 0x8c
 800c626:	0052      	lsls	r2, r2, #1
 800c628:	18b9      	adds	r1, r7, r2
 800c62a:	222c      	movs	r2, #44	; 0x2c
 800c62c:	18b8      	adds	r0, r7, r2
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	233b      	movs	r3, #59	; 0x3b
 800c632:	22a0      	movs	r2, #160	; 0xa0
 800c634:	f000 fced 	bl	800d012 <myStrSection>
	while (strlen(temp) > 1){
 800c638:	238c      	movs	r3, #140	; 0x8c
 800c63a:	005b      	lsls	r3, r3, #1
 800c63c:	18fb      	adds	r3, r7, r3
 800c63e:	0018      	movs	r0, r3
 800c640:	f7fc fd6c 	bl	800911c <strlen>
 800c644:	0003      	movs	r3, r0
 800c646:	2b01      	cmp	r3, #1
 800c648:	d900      	bls.n	800c64c <DataDecrypt+0x558>
 800c64a:	e585      	b.n	800c158 <DataDecrypt+0x64>
	}
	//if(strncmp((char*)temp,"vth",3)==0){
	gsmInfo.updateFlag = 0;
 800c64c:	4a14      	ldr	r2, [pc, #80]	; (800c6a0 <DataDecrypt+0x5ac>)
 800c64e:	2392      	movs	r3, #146	; 0x92
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	2100      	movs	r1, #0
 800c654:	50d1      	str	r1, [r2, r3]
	//}
	//Debug_Send(receive);
	//Debug_Send("\r\n");
	receive[0] = 0;
 800c656:	4b1a      	ldr	r3, [pc, #104]	; (800c6c0 <DataDecrypt+0x5cc>)
 800c658:	22ec      	movs	r2, #236	; 0xec
 800c65a:	0052      	lsls	r2, r2, #1
 800c65c:	4694      	mov	ip, r2
 800c65e:	44bc      	add	ip, r7
 800c660:	4463      	add	r3, ip
 800c662:	2200      	movs	r2, #0
 800c664:	701a      	strb	r2, [r3, #0]
	gsmState = SocketClose;
 800c666:	4b17      	ldr	r3, [pc, #92]	; (800c6c4 <DataDecrypt+0x5d0>)
 800c668:	2216      	movs	r2, #22
 800c66a:	701a      	strb	r2, [r3, #0]
	gsmInfo.GPRS_Rec = 0;
 800c66c:	4a0c      	ldr	r2, [pc, #48]	; (800c6a0 <DataDecrypt+0x5ac>)
 800c66e:	23ac      	movs	r3, #172	; 0xac
 800c670:	005b      	lsls	r3, r3, #1
 800c672:	2100      	movs	r1, #0
 800c674:	50d1      	str	r1, [r2, r3]
	gsmState = 0;
 800c676:	4b13      	ldr	r3, [pc, #76]	; (800c6c4 <DataDecrypt+0x5d0>)
 800c678:	2200      	movs	r2, #0
 800c67a:	701a      	strb	r2, [r3, #0]
}
 800c67c:	46c0      	nop			; (mov r8, r8)
 800c67e:	46bd      	mov	sp, r7
 800c680:	b076      	add	sp, #472	; 0x1d8
 800c682:	bdb0      	pop	{r4, r5, r7, pc}
 800c684:	08019a7c 	.word	0x08019a7c
 800c688:	0801946c 	.word	0x0801946c
 800c68c:	08019990 	.word	0x08019990
 800c690:	08019a44 	.word	0x08019a44
 800c694:	08019a54 	.word	0x08019a54
 800c698:	08019a90 	.word	0x08019a90
 800c69c:	08019a98 	.word	0x08019a98
 800c6a0:	200019a8 	.word	0x200019a8
 800c6a4:	08019aac 	.word	0x08019aac
 800c6a8:	08019ac4 	.word	0x08019ac4
 800c6ac:	08019acc 	.word	0x08019acc
 800c6b0:	08019ae8 	.word	0x08019ae8
 800c6b4:	08019b08 	.word	0x08019b08
 800c6b8:	20001aec 	.word	0x20001aec
 800c6bc:	08019b0c 	.word	0x08019b0c
 800c6c0:	fffffe54 	.word	0xfffffe54
 800c6c4:	200000c0 	.word	0x200000c0

0800c6c8 <GSM_Receive>:
	 //sendData(testS,UART0);
	return count;
}


void GSM_Receive(char in){
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	0002      	movs	r2, r0
 800c6d0:	1dfb      	adds	r3, r7, #7
 800c6d2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800c6d4:	2380      	movs	r3, #128	; 0x80
 800c6d6:	01db      	lsls	r3, r3, #7
 800c6d8:	4a20      	ldr	r2, [pc, #128]	; (800c75c <GSM_Receive+0x94>)
 800c6da:	0019      	movs	r1, r3
 800c6dc:	0010      	movs	r0, r2
 800c6de:	f001 fbc2 	bl	800de66 <HAL_GPIO_TogglePin>
	gsmInfo.Timeout = 0;
 800c6e2:	4a1f      	ldr	r2, [pc, #124]	; (800c760 <GSM_Receive+0x98>)
 800c6e4:	23b0      	movs	r3, #176	; 0xb0
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	50d1      	str	r1, [r2, r3]
	//HAL_UART_Receive_IT(&huart2, temp, 50);

	if (ftpinc < 60){
 800c6ec:	4b1d      	ldr	r3, [pc, #116]	; (800c764 <GSM_Receive+0x9c>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b3b      	cmp	r3, #59	; 0x3b
 800c6f2:	dc11      	bgt.n	800c718 <GSM_Receive+0x50>
	//if (gsmInfo.FTP_Data > 0){
		ftpReceived[ftpinc] = in;
 800c6f4:	4b1b      	ldr	r3, [pc, #108]	; (800c764 <GSM_Receive+0x9c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a1b      	ldr	r2, [pc, #108]	; (800c768 <GSM_Receive+0xa0>)
 800c6fa:	1df9      	adds	r1, r7, #7
 800c6fc:	7809      	ldrb	r1, [r1, #0]
 800c6fe:	54d1      	strb	r1, [r2, r3]
		//HAL_UART_Transmit(&huart1, ftpReceived[ftpinc], 1, 10);
		ftpinc++;
 800c700:	4b18      	ldr	r3, [pc, #96]	; (800c764 <GSM_Receive+0x9c>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	1c5a      	adds	r2, r3, #1
 800c706:	4b17      	ldr	r3, [pc, #92]	; (800c764 <GSM_Receive+0x9c>)
 800c708:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800c70a:	2380      	movs	r3, #128	; 0x80
 800c70c:	005b      	lsls	r3, r3, #1
 800c70e:	4a17      	ldr	r2, [pc, #92]	; (800c76c <GSM_Receive+0xa4>)
 800c710:	0019      	movs	r1, r3
 800c712:	0010      	movs	r0, r2
 800c714:	f001 fba7 	bl	800de66 <HAL_GPIO_TogglePin>
	}
	//else{
		if (in == '>') gsmInfo.Prompt = 1;
 800c718:	1dfb      	adds	r3, r7, #7
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	2b3e      	cmp	r3, #62	; 0x3e
 800c71e:	d104      	bne.n	800c72a <GSM_Receive+0x62>
 800c720:	4a0f      	ldr	r2, [pc, #60]	; (800c760 <GSM_Receive+0x98>)
 800c722:	23ae      	movs	r3, #174	; 0xae
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	2101      	movs	r1, #1
 800c728:	50d1      	str	r1, [r2, r3]
		//if (in != 0x0A){
			recBuffDebug[recBuffPointerWrite] = in;
 800c72a:	4b11      	ldr	r3, [pc, #68]	; (800c770 <GSM_Receive+0xa8>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a11      	ldr	r2, [pc, #68]	; (800c774 <GSM_Receive+0xac>)
 800c730:	1df9      	adds	r1, r7, #7
 800c732:	7809      	ldrb	r1, [r1, #0]
 800c734:	54d1      	strb	r1, [r2, r3]
			//HAL_UART_Transmit(&huart1, recBuff[recBuffPointerWrite], 2, 10);
			//huart1.Instance->TDR = in;
			recBuffPointerWrite++;
 800c736:	4b0e      	ldr	r3, [pc, #56]	; (800c770 <GSM_Receive+0xa8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	1c5a      	adds	r2, r3, #1
 800c73c:	4b0c      	ldr	r3, [pc, #48]	; (800c770 <GSM_Receive+0xa8>)
 800c73e:	601a      	str	r2, [r3, #0]
			if (recBuffPointerWrite > recBuffSize) recBuffPointerWrite = 0;
 800c740:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <GSM_Receive+0xa8>)
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	2396      	movs	r3, #150	; 0x96
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	429a      	cmp	r2, r3
 800c74a:	dd02      	ble.n	800c752 <GSM_Receive+0x8a>
 800c74c:	4b08      	ldr	r3, [pc, #32]	; (800c770 <GSM_Receive+0xa8>)
 800c74e:	2200      	movs	r2, #0
 800c750:	601a      	str	r2, [r3, #0]
		//}
	//}

}
 800c752:	46c0      	nop			; (mov r8, r8)
 800c754:	46bd      	mov	sp, r7
 800c756:	b002      	add	sp, #8
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	46c0      	nop			; (mov r8, r8)
 800c75c:	48000800 	.word	0x48000800
 800c760:	200019a8 	.word	0x200019a8
 800c764:	200000c8 	.word	0x200000c8
 800c768:	20001b68 	.word	0x20001b68
 800c76c:	48000400 	.word	0x48000400
 800c770:	200002d8 	.word	0x200002d8
 800c774:	200014f4 	.word	0x200014f4

0800c778 <RelayOn>:
/* USER CODE BEGIN Includes */
#include "GSM.h"
//#include "motor.h"
/* USER CODE END Includes */

void RelayOn(){
 800c778:	b580      	push	{r7, lr}
 800c77a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RelayOpen_GPIO_Port, RelayClose_Pin, GPIO_PIN_SET);
 800c77c:	4b08      	ldr	r3, [pc, #32]	; (800c7a0 <RelayOn+0x28>)
 800c77e:	2201      	movs	r2, #1
 800c780:	2120      	movs	r1, #32
 800c782:	0018      	movs	r0, r3
 800c784:	f001 fb52 	bl	800de2c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800c788:	2032      	movs	r0, #50	; 0x32
 800c78a:	f001 f857 	bl	800d83c <HAL_Delay>
	HAL_GPIO_WritePin(RelayOpen_GPIO_Port, RelayClose_Pin, GPIO_PIN_RESET);
 800c78e:	4b04      	ldr	r3, [pc, #16]	; (800c7a0 <RelayOn+0x28>)
 800c790:	2200      	movs	r2, #0
 800c792:	2120      	movs	r1, #32
 800c794:	0018      	movs	r0, r3
 800c796:	f001 fb49 	bl	800de2c <HAL_GPIO_WritePin>
}
 800c79a:	46c0      	nop			; (mov r8, r8)
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	48000400 	.word	0x48000400

0800c7a4 <RelayOff>:

void RelayOff(){
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RelayOpen_GPIO_Port, RelayOpen_Pin, GPIO_PIN_SET);
 800c7a8:	4b08      	ldr	r3, [pc, #32]	; (800c7cc <RelayOff+0x28>)
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	2110      	movs	r1, #16
 800c7ae:	0018      	movs	r0, r3
 800c7b0:	f001 fb3c 	bl	800de2c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800c7b4:	2032      	movs	r0, #50	; 0x32
 800c7b6:	f001 f841 	bl	800d83c <HAL_Delay>
	HAL_GPIO_WritePin(RelayOpen_GPIO_Port, RelayOpen_Pin, GPIO_PIN_RESET);
 800c7ba:	4b04      	ldr	r3, [pc, #16]	; (800c7cc <RelayOff+0x28>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	2110      	movs	r1, #16
 800c7c0:	0018      	movs	r0, r3
 800c7c2:	f001 fb33 	bl	800de2c <HAL_GPIO_WritePin>
}
 800c7c6:	46c0      	nop			; (mov r8, r8)
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	48000400 	.word	0x48000400

0800c7d0 <byteCopy>:
		WifiState = Dial;
		Wifi_Init();
	}
}

int byteCopy(uint8_t *source, uint8_t *dest, uint8_t start, uint8_t stop){
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b088      	sub	sp, #32
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	0019      	movs	r1, r3
 800c7dc:	1dfb      	adds	r3, r7, #7
 800c7de:	701a      	strb	r2, [r3, #0]
 800c7e0:	1dbb      	adds	r3, r7, #6
 800c7e2:	1c0a      	adds	r2, r1, #0
 800c7e4:	701a      	strb	r2, [r3, #0]
	 int val;
	 val = -1;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	425b      	negs	r3, r3
 800c7ea:	61bb      	str	r3, [r7, #24]
	 if (start > stop){
 800c7ec:	1dfa      	adds	r2, r7, #7
 800c7ee:	1dbb      	adds	r3, r7, #6
 800c7f0:	7812      	ldrb	r2, [r2, #0]
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d906      	bls.n	800c806 <byteCopy+0x36>
		 Debug_Send("Index error\r\n");
 800c7f8:	4b23      	ldr	r3, [pc, #140]	; (800c888 <byteCopy+0xb8>)
 800c7fa:	0018      	movs	r0, r3
 800c7fc:	f7fd fed0 	bl	800a5a0 <Debug_Send>
		 return -1;
 800c800:	2301      	movs	r3, #1
 800c802:	425b      	negs	r3, r3
 800c804:	e03b      	b.n	800c87e <byteCopy+0xae>
	 }
	 uint8_t difference;
	 uint8_t count;
	 uint8_t* source1;
	 difference = stop - start + 1;
 800c806:	1dba      	adds	r2, r7, #6
 800c808:	1dfb      	adds	r3, r7, #7
 800c80a:	7812      	ldrb	r2, [r2, #0]
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	b2da      	uxtb	r2, r3
 800c812:	2317      	movs	r3, #23
 800c814:	18fb      	adds	r3, r7, r3
 800c816:	3201      	adds	r2, #1
 800c818:	701a      	strb	r2, [r3, #0]
	 source += start;
 800c81a:	1dfb      	adds	r3, r7, #7
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	18d3      	adds	r3, r2, r3
 800c822:	60fb      	str	r3, [r7, #12]
	 source1 = source;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	613b      	str	r3, [r7, #16]
	 source1 += start;
 800c828:	1dfb      	adds	r3, r7, #7
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	18d3      	adds	r3, r2, r3
 800c830:	613b      	str	r3, [r7, #16]
	 for (count = 0; count < difference; count++){
 800c832:	231f      	movs	r3, #31
 800c834:	18fb      	adds	r3, r7, r3
 800c836:	2200      	movs	r2, #0
 800c838:	701a      	strb	r2, [r3, #0]
 800c83a:	e00f      	b.n	800c85c <byteCopy+0x8c>
		 *dest = *source;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	781a      	ldrb	r2, [r3, #0]
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	701a      	strb	r2, [r3, #0]
		 dest++;
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	3301      	adds	r3, #1
 800c848:	60bb      	str	r3, [r7, #8]
		 source++;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3301      	adds	r3, #1
 800c84e:	60fb      	str	r3, [r7, #12]
	 for (count = 0; count < difference; count++){
 800c850:	211f      	movs	r1, #31
 800c852:	187b      	adds	r3, r7, r1
 800c854:	781a      	ldrb	r2, [r3, #0]
 800c856:	187b      	adds	r3, r7, r1
 800c858:	3201      	adds	r2, #1
 800c85a:	701a      	strb	r2, [r3, #0]
 800c85c:	231f      	movs	r3, #31
 800c85e:	18fa      	adds	r2, r7, r3
 800c860:	2317      	movs	r3, #23
 800c862:	18fb      	adds	r3, r7, r3
 800c864:	7812      	ldrb	r2, [r2, #0]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d3e7      	bcc.n	800c83c <byteCopy+0x6c>
	 }
	 dest++;
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	3301      	adds	r3, #1
 800c870:	60bb      	str	r3, [r7, #8]
	 *dest = 0;
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	2200      	movs	r2, #0
 800c876:	701a      	strb	r2, [r3, #0]
	 //Debug_Send(dest);
	 //Debug_Send("\r\n");
	 val = 1;
 800c878:	2301      	movs	r3, #1
 800c87a:	61bb      	str	r3, [r7, #24]
	 return val;
 800c87c:	69bb      	ldr	r3, [r7, #24]
}
 800c87e:	0018      	movs	r0, r3
 800c880:	46bd      	mov	sp, r7
 800c882:	b008      	add	sp, #32
 800c884:	bd80      	pop	{r7, pc}
 800c886:	46c0      	nop			; (mov r8, r8)
 800c888:	08019e94 	.word	0x08019e94

0800c88c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	4a06      	ldr	r2, [pc, #24]	; (800c8b4 <vApplicationGetIdleTaskMemory+0x28>)
 800c89c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	4a05      	ldr	r2, [pc, #20]	; (800c8b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c8a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2280      	movs	r2, #128	; 0x80
 800c8a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800c8aa:	46c0      	nop			; (mov r8, r8)
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	b004      	add	sp, #16
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	46c0      	nop			; (mov r8, r8)
 800c8b4:	200002fc 	.word	0x200002fc
 800c8b8:	20000350 	.word	0x20000350

0800c8bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c8bc:	b5b0      	push	{r4, r5, r7, lr}
 800c8be:	b08e      	sub	sp, #56	; 0x38
 800c8c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	remap();
 800c8c2:	f000 f9d7 	bl	800cc74 <remap>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c8c6:	f000 ff55 	bl	800d774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c8ca:	f000 f847 	bl	800c95c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c8ce:	f000 f93f 	bl	800cb50 <MX_GPIO_Init>
  MX_SPI2_Init();
 800c8d2:	f000 f89f 	bl	800ca14 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800c8d6:	f000 f8db 	bl	800ca90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800c8da:	f000 f909 	bl	800caf0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_SET);
 800c8de:	2380      	movs	r3, #128	; 0x80
 800c8e0:	0059      	lsls	r1, r3, #1
 800c8e2:	2390      	movs	r3, #144	; 0x90
 800c8e4:	05db      	lsls	r3, r3, #23
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	0018      	movs	r0, r3
 800c8ea:	f001 fa9f 	bl	800de2c <HAL_GPIO_WritePin>
  //MQTT_Init();
  GSM_Init();
 800c8ee:	f7fc fcc5 	bl	800927c <GSM_Init>
  //Wifi_Init();
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);		//wifi enable
 800c8f2:	2380      	movs	r3, #128	; 0x80
 800c8f4:	01db      	lsls	r3, r3, #7
 800c8f6:	4814      	ldr	r0, [pc, #80]	; (800c948 <main+0x8c>)
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	0019      	movs	r1, r3
 800c8fc:	f001 fa96 	bl	800de2c <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800c900:	211c      	movs	r1, #28
 800c902:	187b      	adds	r3, r7, r1
 800c904:	4a11      	ldr	r2, [pc, #68]	; (800c94c <main+0x90>)
 800c906:	ca31      	ldmia	r2!, {r0, r4, r5}
 800c908:	c331      	stmia	r3!, {r0, r4, r5}
 800c90a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800c90c:	c331      	stmia	r3!, {r0, r4, r5}
 800c90e:	6812      	ldr	r2, [r2, #0]
 800c910:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800c912:	187b      	adds	r3, r7, r1
 800c914:	2100      	movs	r1, #0
 800c916:	0018      	movs	r0, r3
 800c918:	f009 ff27 	bl	801676a <osThreadCreate>
 800c91c:	0002      	movs	r2, r0
 800c91e:	4b0c      	ldr	r3, [pc, #48]	; (800c950 <main+0x94>)
 800c920:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800c922:	003b      	movs	r3, r7
 800c924:	4a0b      	ldr	r2, [pc, #44]	; (800c954 <main+0x98>)
 800c926:	ca13      	ldmia	r2!, {r0, r1, r4}
 800c928:	c313      	stmia	r3!, {r0, r1, r4}
 800c92a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800c92c:	c313      	stmia	r3!, {r0, r1, r4}
 800c92e:	6812      	ldr	r2, [r2, #0]
 800c930:	601a      	str	r2, [r3, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800c932:	003b      	movs	r3, r7
 800c934:	2100      	movs	r1, #0
 800c936:	0018      	movs	r0, r3
 800c938:	f009 ff17 	bl	801676a <osThreadCreate>
 800c93c:	0002      	movs	r2, r0
 800c93e:	4b06      	ldr	r3, [pc, #24]	; (800c958 <main+0x9c>)
 800c940:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800c942:	f009 ff0a 	bl	801675a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800c946:	e7fe      	b.n	800c946 <main+0x8a>
 800c948:	48000800 	.word	0x48000800
 800c94c:	08019edc 	.word	0x08019edc
 800c950:	200024f4 	.word	0x200024f4
 800c954:	08019ef8 	.word	0x08019ef8
 800c958:	200025e0 	.word	0x200025e0

0800c95c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c95c:	b590      	push	{r4, r7, lr}
 800c95e:	b099      	sub	sp, #100	; 0x64
 800c960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c962:	242c      	movs	r4, #44	; 0x2c
 800c964:	193b      	adds	r3, r7, r4
 800c966:	0018      	movs	r0, r3
 800c968:	2334      	movs	r3, #52	; 0x34
 800c96a:	001a      	movs	r2, r3
 800c96c:	2100      	movs	r1, #0
 800c96e:	f00b fce6 	bl	801833e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c972:	231c      	movs	r3, #28
 800c974:	18fb      	adds	r3, r7, r3
 800c976:	0018      	movs	r0, r3
 800c978:	2310      	movs	r3, #16
 800c97a:	001a      	movs	r2, r3
 800c97c:	2100      	movs	r1, #0
 800c97e:	f00b fcde 	bl	801833e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c982:	003b      	movs	r3, r7
 800c984:	0018      	movs	r0, r3
 800c986:	231c      	movs	r3, #28
 800c988:	001a      	movs	r2, r3
 800c98a:	2100      	movs	r1, #0
 800c98c:	f00b fcd7 	bl	801833e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800c990:	193b      	adds	r3, r7, r4
 800c992:	2220      	movs	r2, #32
 800c994:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c996:	193b      	adds	r3, r7, r4
 800c998:	2201      	movs	r2, #1
 800c99a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c99c:	193b      	adds	r3, r7, r4
 800c99e:	2200      	movs	r2, #0
 800c9a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c9a2:	193b      	adds	r3, r7, r4
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	f003 f8eb 	bl	800fb80 <HAL_RCC_OscConfig>
 800c9aa:	1e03      	subs	r3, r0, #0
 800c9ac:	d001      	beq.n	800c9b2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800c9ae:	f000 fb2b 	bl	800d008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c9b2:	211c      	movs	r1, #28
 800c9b4:	187b      	adds	r3, r7, r1
 800c9b6:	2207      	movs	r2, #7
 800c9b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800c9ba:	187b      	adds	r3, r7, r1
 800c9bc:	2203      	movs	r2, #3
 800c9be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c9c0:	187b      	adds	r3, r7, r1
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800c9c6:	187b      	adds	r3, r7, r1
 800c9c8:	2280      	movs	r2, #128	; 0x80
 800c9ca:	00d2      	lsls	r2, r2, #3
 800c9cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800c9ce:	187b      	adds	r3, r7, r1
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	0018      	movs	r0, r3
 800c9d4:	f003 fc5a 	bl	801028c <HAL_RCC_ClockConfig>
 800c9d8:	1e03      	subs	r3, r0, #0
 800c9da:	d001      	beq.n	800c9e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800c9dc:	f000 fb14 	bl	800d008 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800c9e0:	003b      	movs	r3, r7
 800c9e2:	4a0b      	ldr	r2, [pc, #44]	; (800ca10 <SystemClock_Config+0xb4>)
 800c9e4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800c9e6:	003b      	movs	r3, r7
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c9ec:	003b      	movs	r3, r7
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c9f2:	003b      	movs	r3, r7
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c9f8:	003b      	movs	r3, r7
 800c9fa:	0018      	movs	r0, r3
 800c9fc:	f003 fdc0 	bl	8010580 <HAL_RCCEx_PeriphCLKConfig>
 800ca00:	1e03      	subs	r3, r0, #0
 800ca02:	d001      	beq.n	800ca08 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800ca04:	f000 fb00 	bl	800d008 <Error_Handler>
  }
}
 800ca08:	46c0      	nop			; (mov r8, r8)
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	b019      	add	sp, #100	; 0x64
 800ca0e:	bd90      	pop	{r4, r7, pc}
 800ca10:	00020003 	.word	0x00020003

0800ca14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800ca18:	4b1b      	ldr	r3, [pc, #108]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca1a:	4a1c      	ldr	r2, [pc, #112]	; (800ca8c <MX_SPI2_Init+0x78>)
 800ca1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800ca1e:	4b1a      	ldr	r3, [pc, #104]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca20:	2282      	movs	r2, #130	; 0x82
 800ca22:	0052      	lsls	r2, r2, #1
 800ca24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800ca26:	4b18      	ldr	r3, [pc, #96]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800ca2c:	4b16      	ldr	r3, [pc, #88]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca2e:	22e0      	movs	r2, #224	; 0xe0
 800ca30:	00d2      	lsls	r2, r2, #3
 800ca32:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ca34:	4b14      	ldr	r3, [pc, #80]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ca3a:	4b13      	ldr	r3, [pc, #76]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800ca40:	4b11      	ldr	r3, [pc, #68]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca42:	2280      	movs	r2, #128	; 0x80
 800ca44:	0092      	lsls	r2, r2, #2
 800ca46:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800ca48:	4b0f      	ldr	r3, [pc, #60]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca4a:	2220      	movs	r2, #32
 800ca4c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ca4e:	4b0e      	ldr	r3, [pc, #56]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800ca54:	4b0c      	ldr	r3, [pc, #48]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca5a:	4b0b      	ldr	r3, [pc, #44]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800ca60:	4b09      	ldr	r3, [pc, #36]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca62:	2207      	movs	r2, #7
 800ca64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800ca66:	4b08      	ldr	r3, [pc, #32]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ca6c:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca6e:	2208      	movs	r2, #8
 800ca70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800ca72:	4b05      	ldr	r3, [pc, #20]	; (800ca88 <MX_SPI2_Init+0x74>)
 800ca74:	0018      	movs	r0, r3
 800ca76:	f003 fe81 	bl	801077c <HAL_SPI_Init>
 800ca7a:	1e03      	subs	r3, r0, #0
 800ca7c:	d001      	beq.n	800ca82 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800ca7e:	f000 fac3 	bl	800d008 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800ca82:	46c0      	nop			; (mov r8, r8)
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	200024f8 	.word	0x200024f8
 800ca8c:	40003800 	.word	0x40003800

0800ca90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ca94:	4b14      	ldr	r3, [pc, #80]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800ca96:	4a15      	ldr	r2, [pc, #84]	; (800caec <MX_USART1_UART_Init+0x5c>)
 800ca98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ca9a:	4b13      	ldr	r3, [pc, #76]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800ca9c:	22e1      	movs	r2, #225	; 0xe1
 800ca9e:	0252      	lsls	r2, r2, #9
 800caa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800caa2:	4b11      	ldr	r3, [pc, #68]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800caa8:	4b0f      	ldr	r3, [pc, #60]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800caaa:	2200      	movs	r2, #0
 800caac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800caae:	4b0e      	ldr	r3, [pc, #56]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cab4:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800cab6:	220c      	movs	r2, #12
 800cab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800caba:	4b0b      	ldr	r3, [pc, #44]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800cabc:	2200      	movs	r2, #0
 800cabe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cac0:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cac6:	4b08      	ldr	r3, [pc, #32]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800cac8:	2200      	movs	r2, #0
 800caca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cacc:	4b06      	ldr	r3, [pc, #24]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800cace:	2200      	movs	r2, #0
 800cad0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cad2:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <MX_USART1_UART_Init+0x58>)
 800cad4:	0018      	movs	r0, r3
 800cad6:	f004 fd53 	bl	8011580 <HAL_UART_Init>
 800cada:	1e03      	subs	r3, r0, #0
 800cadc:	d001      	beq.n	800cae2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800cade:	f000 fa93 	bl	800d008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800cae2:	46c0      	nop			; (mov r8, r8)
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	2000255c 	.word	0x2000255c
 800caec:	40013800 	.word	0x40013800

0800caf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800caf4:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800caf6:	4a15      	ldr	r2, [pc, #84]	; (800cb4c <MX_USART2_UART_Init+0x5c>)
 800caf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800cafa:	4b13      	ldr	r3, [pc, #76]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800cafc:	22e1      	movs	r2, #225	; 0xe1
 800cafe:	0252      	lsls	r2, r2, #9
 800cb00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cb02:	4b11      	ldr	r3, [pc, #68]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800cb08:	4b0f      	ldr	r3, [pc, #60]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800cb0e:	4b0e      	ldr	r3, [pc, #56]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800cb10:	2200      	movs	r2, #0
 800cb12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800cb14:	4b0c      	ldr	r3, [pc, #48]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800cb16:	220c      	movs	r2, #12
 800cb18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb1a:	4b0b      	ldr	r3, [pc, #44]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb20:	4b09      	ldr	r3, [pc, #36]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cb26:	4b08      	ldr	r3, [pc, #32]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cb2c:	4b06      	ldr	r3, [pc, #24]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800cb32:	4b05      	ldr	r3, [pc, #20]	; (800cb48 <MX_USART2_UART_Init+0x58>)
 800cb34:	0018      	movs	r0, r3
 800cb36:	f004 fd23 	bl	8011580 <HAL_UART_Init>
 800cb3a:	1e03      	subs	r3, r0, #0
 800cb3c:	d001      	beq.n	800cb42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800cb3e:	f000 fa63 	bl	800d008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800cb42:	46c0      	nop			; (mov r8, r8)
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	200025e4 	.word	0x200025e4
 800cb4c:	40004400 	.word	0x40004400

0800cb50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cb50:	b590      	push	{r4, r7, lr}
 800cb52:	b089      	sub	sp, #36	; 0x24
 800cb54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb56:	240c      	movs	r4, #12
 800cb58:	193b      	adds	r3, r7, r4
 800cb5a:	0018      	movs	r0, r3
 800cb5c:	2314      	movs	r3, #20
 800cb5e:	001a      	movs	r2, r3
 800cb60:	2100      	movs	r1, #0
 800cb62:	f00b fbec 	bl	801833e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb66:	4b40      	ldr	r3, [pc, #256]	; (800cc68 <MX_GPIO_Init+0x118>)
 800cb68:	695a      	ldr	r2, [r3, #20]
 800cb6a:	4b3f      	ldr	r3, [pc, #252]	; (800cc68 <MX_GPIO_Init+0x118>)
 800cb6c:	2180      	movs	r1, #128	; 0x80
 800cb6e:	0309      	lsls	r1, r1, #12
 800cb70:	430a      	orrs	r2, r1
 800cb72:	615a      	str	r2, [r3, #20]
 800cb74:	4b3c      	ldr	r3, [pc, #240]	; (800cc68 <MX_GPIO_Init+0x118>)
 800cb76:	695a      	ldr	r2, [r3, #20]
 800cb78:	2380      	movs	r3, #128	; 0x80
 800cb7a:	031b      	lsls	r3, r3, #12
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	60bb      	str	r3, [r7, #8]
 800cb80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb82:	4b39      	ldr	r3, [pc, #228]	; (800cc68 <MX_GPIO_Init+0x118>)
 800cb84:	695a      	ldr	r2, [r3, #20]
 800cb86:	4b38      	ldr	r3, [pc, #224]	; (800cc68 <MX_GPIO_Init+0x118>)
 800cb88:	2180      	movs	r1, #128	; 0x80
 800cb8a:	0289      	lsls	r1, r1, #10
 800cb8c:	430a      	orrs	r2, r1
 800cb8e:	615a      	str	r2, [r3, #20]
 800cb90:	4b35      	ldr	r3, [pc, #212]	; (800cc68 <MX_GPIO_Init+0x118>)
 800cb92:	695a      	ldr	r2, [r3, #20]
 800cb94:	2380      	movs	r3, #128	; 0x80
 800cb96:	029b      	lsls	r3, r3, #10
 800cb98:	4013      	ands	r3, r2
 800cb9a:	607b      	str	r3, [r7, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb9e:	4b32      	ldr	r3, [pc, #200]	; (800cc68 <MX_GPIO_Init+0x118>)
 800cba0:	695a      	ldr	r2, [r3, #20]
 800cba2:	4b31      	ldr	r3, [pc, #196]	; (800cc68 <MX_GPIO_Init+0x118>)
 800cba4:	2180      	movs	r1, #128	; 0x80
 800cba6:	02c9      	lsls	r1, r1, #11
 800cba8:	430a      	orrs	r2, r1
 800cbaa:	615a      	str	r2, [r3, #20]
 800cbac:	4b2e      	ldr	r3, [pc, #184]	; (800cc68 <MX_GPIO_Init+0x118>)
 800cbae:	695a      	ldr	r2, [r3, #20]
 800cbb0:	2380      	movs	r3, #128	; 0x80
 800cbb2:	02db      	lsls	r3, r3, #11
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	603b      	str	r3, [r7, #0]
 800cbb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|GSM_Enable_Pin, GPIO_PIN_RESET);
 800cbba:	23e0      	movs	r3, #224	; 0xe0
 800cbbc:	021b      	lsls	r3, r3, #8
 800cbbe:	482b      	ldr	r0, [pc, #172]	; (800cc6c <MX_GPIO_Init+0x11c>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	0019      	movs	r1, r3
 800cbc4:	f001 f932 	bl	800de2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GSM_On_Pin|LED5_Pin|RelayOpen_Pin|RelayClose_Pin
 800cbc8:	23cf      	movs	r3, #207	; 0xcf
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4828      	ldr	r0, [pc, #160]	; (800cc70 <MX_GPIO_Init+0x120>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	0019      	movs	r1, r3
 800cbd2:	f001 f92b 	bl	800de2c <HAL_GPIO_WritePin>
                          |LED4_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800cbd6:	2380      	movs	r3, #128	; 0x80
 800cbd8:	0059      	lsls	r1, r3, #1
 800cbda:	2390      	movs	r3, #144	; 0x90
 800cbdc:	05db      	lsls	r3, r3, #23
 800cbde:	2200      	movs	r2, #0
 800cbe0:	0018      	movs	r0, r3
 800cbe2:	f001 f923 	bl	800de2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin GSM_Enable_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GSM_Enable_Pin;
 800cbe6:	193b      	adds	r3, r7, r4
 800cbe8:	22e0      	movs	r2, #224	; 0xe0
 800cbea:	0212      	lsls	r2, r2, #8
 800cbec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cbee:	193b      	adds	r3, r7, r4
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbf4:	193b      	adds	r3, r7, r4
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cbfa:	193b      	adds	r3, r7, r4
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc00:	193b      	adds	r3, r7, r4
 800cc02:	4a1a      	ldr	r2, [pc, #104]	; (800cc6c <MX_GPIO_Init+0x11c>)
 800cc04:	0019      	movs	r1, r3
 800cc06:	0010      	movs	r0, r2
 800cc08:	f000 ff98 	bl	800db3c <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_On_Pin LED5_Pin RelayOpen_Pin RelayClose_Pin
                           LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = GSM_On_Pin|LED5_Pin|RelayOpen_Pin|RelayClose_Pin
 800cc0c:	0021      	movs	r1, r4
 800cc0e:	187b      	adds	r3, r7, r1
 800cc10:	22cf      	movs	r2, #207	; 0xcf
 800cc12:	0092      	lsls	r2, r2, #2
 800cc14:	601a      	str	r2, [r3, #0]
                          |LED4_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc16:	000c      	movs	r4, r1
 800cc18:	193b      	adds	r3, r7, r4
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc1e:	193b      	adds	r3, r7, r4
 800cc20:	2200      	movs	r2, #0
 800cc22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc24:	193b      	adds	r3, r7, r4
 800cc26:	2200      	movs	r2, #0
 800cc28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc2a:	193b      	adds	r3, r7, r4
 800cc2c:	4a10      	ldr	r2, [pc, #64]	; (800cc70 <MX_GPIO_Init+0x120>)
 800cc2e:	0019      	movs	r1, r3
 800cc30:	0010      	movs	r0, r2
 800cc32:	f000 ff83 	bl	800db3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800cc36:	0021      	movs	r1, r4
 800cc38:	187b      	adds	r3, r7, r1
 800cc3a:	2280      	movs	r2, #128	; 0x80
 800cc3c:	0052      	lsls	r2, r2, #1
 800cc3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc40:	187b      	adds	r3, r7, r1
 800cc42:	2201      	movs	r2, #1
 800cc44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc46:	187b      	adds	r3, r7, r1
 800cc48:	2200      	movs	r2, #0
 800cc4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc4c:	187b      	adds	r3, r7, r1
 800cc4e:	2200      	movs	r2, #0
 800cc50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800cc52:	187a      	adds	r2, r7, r1
 800cc54:	2390      	movs	r3, #144	; 0x90
 800cc56:	05db      	lsls	r3, r3, #23
 800cc58:	0011      	movs	r1, r2
 800cc5a:	0018      	movs	r0, r3
 800cc5c:	f000 ff6e 	bl	800db3c <HAL_GPIO_Init>

}
 800cc60:	46c0      	nop			; (mov r8, r8)
 800cc62:	46bd      	mov	sp, r7
 800cc64:	b009      	add	sp, #36	; 0x24
 800cc66:	bd90      	pop	{r4, r7, pc}
 800cc68:	40021000 	.word	0x40021000
 800cc6c:	48000800 	.word	0x48000800
 800cc70:	48000400 	.word	0x48000400

0800cc74 <remap>:
	 //Debug_Send(flash);
	 Debug_Send("\r\n");

 }*/

void remap(){
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
	 // Copy interrupt vector table to the RAM.
	 volatile uint32_t *VectorTable = (volatile uint32_t *)0x20000000;
 800cc7a:	2380      	movs	r3, #128	; 0x80
 800cc7c:	059b      	lsls	r3, r3, #22
 800cc7e:	60bb      	str	r3, [r7, #8]
	 uint32_t ui32_VectorIndex = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	60fb      	str	r3, [r7, #12]

	 for(ui32_VectorIndex = 0; ui32_VectorIndex < 48; ui32_VectorIndex++)
 800cc84:	2300      	movs	r3, #0
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	e00e      	b.n	800cca8 <remap+0x34>
	 {
		 VectorTable[ui32_VectorIndex] = *(__IO uint32_t*)((uint32_t) 0x8009000 + (ui32_VectorIndex << 2));
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	4a1c      	ldr	r2, [pc, #112]	; (800cd00 <remap+0x8c>)
 800cc90:	4694      	mov	ip, r2
 800cc92:	4463      	add	r3, ip
 800cc94:	001a      	movs	r2, r3
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	68b9      	ldr	r1, [r7, #8]
 800cc9c:	18cb      	adds	r3, r1, r3
 800cc9e:	6812      	ldr	r2, [r2, #0]
 800cca0:	601a      	str	r2, [r3, #0]
	 for(ui32_VectorIndex = 0; ui32_VectorIndex < 48; ui32_VectorIndex++)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3301      	adds	r3, #1
 800cca6:	60fb      	str	r3, [r7, #12]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2b2f      	cmp	r3, #47	; 0x2f
 800ccac:	d9ed      	bls.n	800cc8a <remap+0x16>
	 }

	 __HAL_RCC_AHB_FORCE_RESET();
 800ccae:	4b15      	ldr	r3, [pc, #84]	; (800cd04 <remap+0x90>)
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	4252      	negs	r2, r2
 800ccb4:	629a      	str	r2, [r3, #40]	; 0x28

	 //  Enable SYSCFG peripheral clock
	 __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ccb6:	4b13      	ldr	r3, [pc, #76]	; (800cd04 <remap+0x90>)
 800ccb8:	699a      	ldr	r2, [r3, #24]
 800ccba:	4b12      	ldr	r3, [pc, #72]	; (800cd04 <remap+0x90>)
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	430a      	orrs	r2, r1
 800ccc0:	619a      	str	r2, [r3, #24]
 800ccc2:	4b10      	ldr	r3, [pc, #64]	; (800cd04 <remap+0x90>)
 800ccc4:	699b      	ldr	r3, [r3, #24]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	4013      	ands	r3, r2
 800ccca:	607b      	str	r3, [r7, #4]
 800cccc:	687b      	ldr	r3, [r7, #4]

	 __HAL_RCC_AHB_RELEASE_RESET();
 800ccce:	4b0d      	ldr	r3, [pc, #52]	; (800cd04 <remap+0x90>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	629a      	str	r2, [r3, #40]	; 0x28

	 // Remap RAM into 0x0000 0000
	 __HAL_SYSCFG_REMAPMEMORY_SRAM();
 800ccd4:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <remap+0x94>)
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	4b0b      	ldr	r3, [pc, #44]	; (800cd08 <remap+0x94>)
 800ccda:	2103      	movs	r1, #3
 800ccdc:	438a      	bics	r2, r1
 800ccde:	601a      	str	r2, [r3, #0]
 800cce0:	4b09      	ldr	r3, [pc, #36]	; (800cd08 <remap+0x94>)
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	4b08      	ldr	r3, [pc, #32]	; (800cd08 <remap+0x94>)
 800cce6:	2103      	movs	r1, #3
 800cce8:	430a      	orrs	r2, r1
 800ccea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ccec:	b662      	cpsie	i
}
 800ccee:	46c0      	nop			; (mov r8, r8)

	 __enable_irq();
	 Debug_Send("test Vector table remapped\r\n");
 800ccf0:	4b06      	ldr	r3, [pc, #24]	; (800cd0c <remap+0x98>)
 800ccf2:	0018      	movs	r0, r3
 800ccf4:	f7fd fc54 	bl	800a5a0 <Debug_Send>
}
 800ccf8:	46c0      	nop			; (mov r8, r8)
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	b004      	add	sp, #16
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	08009000 	.word	0x08009000
 800cd04:	40021000 	.word	0x40021000
 800cd08:	40010000 	.word	0x40010000
 800cd0c:	08019f14 	.word	0x08019f14

0800cd10 <flashPut>:

void flashPut(uint32_t p_addr,char* data, uint32_t size){
 800cd10:	b590      	push	{r4, r7, lr}
 800cd12:	b08d      	sub	sp, #52	; 0x34
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
	 unsigned char temp[30];
	 Debug_Send("Flash write: ");
 800cd1c:	4b3c      	ldr	r3, [pc, #240]	; (800ce10 <flashPut+0x100>)
 800cd1e:	0018      	movs	r0, r3
 800cd20:	f7fd fc3e 	bl	800a5a0 <Debug_Send>
	 /*Debug_Send(data);
	 if(data[0] == 0x0a) Debug_Send("a");
	 if(*data == 0x0a) Debug_Send("A");
	 if(data[0] == 0x0d) Debug_Send("d");
	 if(*data == 0x0d) Debug_Send("D");*/
	 Debug_Send(" at: ");
 800cd24:	4b3b      	ldr	r3, [pc, #236]	; (800ce14 <flashPut+0x104>)
 800cd26:	0018      	movs	r0, r3
 800cd28:	f7fd fc3a 	bl	800a5a0 <Debug_Send>
	 myLongStr(p_addr,temp,10,10);
 800cd2c:	2410      	movs	r4, #16
 800cd2e:	1939      	adds	r1, r7, r4
 800cd30:	68f8      	ldr	r0, [r7, #12]
 800cd32:	230a      	movs	r3, #10
 800cd34:	220a      	movs	r2, #10
 800cd36:	f000 fa01 	bl	800d13c <myLongStr>
	 Debug_Send(temp);
 800cd3a:	193b      	adds	r3, r7, r4
 800cd3c:	0018      	movs	r0, r3
 800cd3e:	f7fd fc2f 	bl	800a5a0 <Debug_Send>
	 Debug_Send(" , ");
 800cd42:	4b35      	ldr	r3, [pc, #212]	; (800ce18 <flashPut+0x108>)
 800cd44:	0018      	movs	r0, r3
 800cd46:	f7fd fc2b 	bl	800a5a0 <Debug_Send>
	 myLongStr(size,temp,10,10);
 800cd4a:	1939      	adds	r1, r7, r4
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	230a      	movs	r3, #10
 800cd50:	220a      	movs	r2, #10
 800cd52:	f000 f9f3 	bl	800d13c <myLongStr>
	 Debug_Send(temp);
 800cd56:	193b      	adds	r3, r7, r4
 800cd58:	0018      	movs	r0, r3
 800cd5a:	f7fd fc21 	bl	800a5a0 <Debug_Send>
	 Debug_Send("\r\n");
 800cd5e:	4b2f      	ldr	r3, [pc, #188]	; (800ce1c <flashPut+0x10c>)
 800cd60:	0018      	movs	r0, r3
 800cd62:	f7fd fc1d 	bl	800a5a0 <Debug_Send>
	 flashBusy();
 800cd66:	f000 f8f1 	bl	800cf4c <flashBusy>
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);	//set write enable flag
 800cd6a:	2380      	movs	r3, #128	; 0x80
 800cd6c:	0059      	lsls	r1, r3, #1
 800cd6e:	2390      	movs	r3, #144	; 0x90
 800cd70:	05db      	lsls	r3, r3, #23
 800cd72:	2200      	movs	r2, #0
 800cd74:	0018      	movs	r0, r3
 800cd76:	f001 f859 	bl	800de2c <HAL_GPIO_WritePin>
	 temp[0] = M95_WRITE_EN;
 800cd7a:	193b      	adds	r3, r7, r4
 800cd7c:	2206      	movs	r2, #6
 800cd7e:	701a      	strb	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi2,temp,1,100);
 800cd80:	1939      	adds	r1, r7, r4
 800cd82:	4827      	ldr	r0, [pc, #156]	; (800ce20 <flashPut+0x110>)
 800cd84:	2364      	movs	r3, #100	; 0x64
 800cd86:	2201      	movs	r2, #1
 800cd88:	f003 fdb0 	bl	80108ec <HAL_SPI_Transmit>
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800cd8c:	2380      	movs	r3, #128	; 0x80
 800cd8e:	0059      	lsls	r1, r3, #1
 800cd90:	2390      	movs	r3, #144	; 0x90
 800cd92:	05db      	lsls	r3, r3, #23
 800cd94:	2201      	movs	r2, #1
 800cd96:	0018      	movs	r0, r3
 800cd98:	f001 f848 	bl	800de2c <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 800cd9c:	2001      	movs	r0, #1
 800cd9e:	f000 fd4d 	bl	800d83c <HAL_Delay>

	 //uint32_t p_addr = 30;

	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);	//load address
 800cda2:	2380      	movs	r3, #128	; 0x80
 800cda4:	0059      	lsls	r1, r3, #1
 800cda6:	2390      	movs	r3, #144	; 0x90
 800cda8:	05db      	lsls	r3, r3, #23
 800cdaa:	2200      	movs	r2, #0
 800cdac:	0018      	movs	r0, r3
 800cdae:	f001 f83d 	bl	800de2c <HAL_GPIO_WritePin>
	 temp[0] = M95_WRITE;
 800cdb2:	193b      	adds	r3, r7, r4
 800cdb4:	2202      	movs	r2, #2
 800cdb6:	701a      	strb	r2, [r3, #0]
	 temp[1] = (p_addr>>16)&0xff;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	0c1b      	lsrs	r3, r3, #16
 800cdbc:	b2da      	uxtb	r2, r3
 800cdbe:	193b      	adds	r3, r7, r4
 800cdc0:	705a      	strb	r2, [r3, #1]
	 temp[2] = (p_addr>>8)&0xff;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	0a1b      	lsrs	r3, r3, #8
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	193b      	adds	r3, r7, r4
 800cdca:	709a      	strb	r2, [r3, #2]
	 temp[3] = p_addr&0xff;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	b2da      	uxtb	r2, r3
 800cdd0:	193b      	adds	r3, r7, r4
 800cdd2:	70da      	strb	r2, [r3, #3]

	 HAL_SPI_Transmit(&hspi2,temp,4,100);						//transmit address
 800cdd4:	1939      	adds	r1, r7, r4
 800cdd6:	4812      	ldr	r0, [pc, #72]	; (800ce20 <flashPut+0x110>)
 800cdd8:	2364      	movs	r3, #100	; 0x64
 800cdda:	2204      	movs	r2, #4
 800cddc:	f003 fd86 	bl	80108ec <HAL_SPI_Transmit>

	 temp[0] = 68;
 800cde0:	193b      	adds	r3, r7, r4
 800cde2:	2244      	movs	r2, #68	; 0x44
 800cde4:	701a      	strb	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi2,data,size,100);						//transmit data
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	68b9      	ldr	r1, [r7, #8]
 800cdec:	480c      	ldr	r0, [pc, #48]	; (800ce20 <flashPut+0x110>)
 800cdee:	2364      	movs	r3, #100	; 0x64
 800cdf0:	f003 fd7c 	bl	80108ec <HAL_SPI_Transmit>
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800cdf4:	2380      	movs	r3, #128	; 0x80
 800cdf6:	0059      	lsls	r1, r3, #1
 800cdf8:	2390      	movs	r3, #144	; 0x90
 800cdfa:	05db      	lsls	r3, r3, #23
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	0018      	movs	r0, r3
 800ce00:	f001 f814 	bl	800de2c <HAL_GPIO_WritePin>

	 flashBusy();
 800ce04:	f000 f8a2 	bl	800cf4c <flashBusy>

}
 800ce08:	46c0      	nop			; (mov r8, r8)
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	b00d      	add	sp, #52	; 0x34
 800ce0e:	bd90      	pop	{r4, r7, pc}
 800ce10:	08019f34 	.word	0x08019f34
 800ce14:	08019f44 	.word	0x08019f44
 800ce18:	08019f4c 	.word	0x08019f4c
 800ce1c:	08019f50 	.word	0x08019f50
 800ce20:	200024f8 	.word	0x200024f8

0800ce24 <flashWrite>:

void flashWrite( unsigned long p_addr,const char *p_buffer,unsigned short p_size){
 800ce24:	b590      	push	{r4, r7, lr}
 800ce26:	b087      	sub	sp, #28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	1dbb      	adds	r3, r7, #6
 800ce30:	801a      	strh	r2, [r3, #0]
	//Flash_CS_Low();

	//myTRACE_Print(p_buffer);
	//myTRACE_Print(" p_buffer\n");
	//flash_struct.isBusy = 1;
	m95_size=p_size;
 800ce32:	2314      	movs	r3, #20
 800ce34:	18fb      	adds	r3, r7, r3
 800ce36:	1dba      	adds	r2, r7, #6
 800ce38:	8812      	ldrh	r2, [r2, #0]
 800ce3a:	801a      	strh	r2, [r3, #0]
	//m95_tmp=p_addr/256;
	//m95_page_size=256-(p_addr-(m95_tmp*256));

	m95_page_size =256 - ( p_addr % 256);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	22ff      	movs	r2, #255	; 0xff
 800ce42:	4013      	ands	r3, r2
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	2316      	movs	r3, #22
 800ce48:	18fb      	adds	r3, r7, r3
 800ce4a:	2180      	movs	r1, #128	; 0x80
 800ce4c:	0049      	lsls	r1, r1, #1
 800ce4e:	1a8a      	subs	r2, r1, r2
 800ce50:	801a      	strh	r2, [r3, #0]
	while(m95_size){
 800ce52:	e032      	b.n	800ceba <flashWrite+0x96>
		if(m95_size>m95_page_size)
 800ce54:	2314      	movs	r3, #20
 800ce56:	18fa      	adds	r2, r7, r3
 800ce58:	2116      	movs	r1, #22
 800ce5a:	187b      	adds	r3, r7, r1
 800ce5c:	8812      	ldrh	r2, [r2, #0]
 800ce5e:	881b      	ldrh	r3, [r3, #0]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d905      	bls.n	800ce70 <flashWrite+0x4c>
			m95_write_size=m95_page_size;
 800ce64:	2312      	movs	r3, #18
 800ce66:	18fb      	adds	r3, r7, r3
 800ce68:	187a      	adds	r2, r7, r1
 800ce6a:	8812      	ldrh	r2, [r2, #0]
 800ce6c:	801a      	strh	r2, [r3, #0]
 800ce6e:	e005      	b.n	800ce7c <flashWrite+0x58>
		else
			m95_write_size=m95_size;
 800ce70:	2312      	movs	r3, #18
 800ce72:	18fb      	adds	r3, r7, r3
 800ce74:	2214      	movs	r2, #20
 800ce76:	18ba      	adds	r2, r7, r2
 800ce78:	8812      	ldrh	r2, [r2, #0]
 800ce7a:	801a      	strh	r2, [r3, #0]
		flashPut(p_addr,p_buffer,m95_write_size);
 800ce7c:	2412      	movs	r4, #18
 800ce7e:	193b      	adds	r3, r7, r4
 800ce80:	881a      	ldrh	r2, [r3, #0]
 800ce82:	68b9      	ldr	r1, [r7, #8]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	0018      	movs	r0, r3
 800ce88:	f7ff ff42 	bl	800cd10 <flashPut>
		m95_size-=m95_write_size;
 800ce8c:	2214      	movs	r2, #20
 800ce8e:	18bb      	adds	r3, r7, r2
 800ce90:	18b9      	adds	r1, r7, r2
 800ce92:	193a      	adds	r2, r7, r4
 800ce94:	8809      	ldrh	r1, [r1, #0]
 800ce96:	8812      	ldrh	r2, [r2, #0]
 800ce98:	1a8a      	subs	r2, r1, r2
 800ce9a:	801a      	strh	r2, [r3, #0]
		p_buffer+=m95_write_size;
 800ce9c:	193b      	adds	r3, r7, r4
 800ce9e:	881b      	ldrh	r3, [r3, #0]
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	18d3      	adds	r3, r2, r3
 800cea4:	60bb      	str	r3, [r7, #8]
		p_addr+=m95_write_size;
 800cea6:	193b      	adds	r3, r7, r4
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	18d3      	adds	r3, r2, r3
 800ceae:	60fb      	str	r3, [r7, #12]
		m95_page_size=256;
 800ceb0:	2316      	movs	r3, #22
 800ceb2:	18fb      	adds	r3, r7, r3
 800ceb4:	2280      	movs	r2, #128	; 0x80
 800ceb6:	0052      	lsls	r2, r2, #1
 800ceb8:	801a      	strh	r2, [r3, #0]
	while(m95_size){
 800ceba:	2314      	movs	r3, #20
 800cebc:	18fb      	adds	r3, r7, r3
 800cebe:	881b      	ldrh	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1c7      	bne.n	800ce54 <flashWrite+0x30>
	}
	//flash_struct.isBusy = 0;
	//Flash_CS_Hi();

}
 800cec4:	46c0      	nop			; (mov r8, r8)
 800cec6:	46c0      	nop			; (mov r8, r8)
 800cec8:	46bd      	mov	sp, r7
 800ceca:	b007      	add	sp, #28
 800cecc:	bd90      	pop	{r4, r7, pc}
	...

0800ced0 <flashRead>:

void flashRead(uint32_t p_addr, char* data, uint32_t size){
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b08a      	sub	sp, #40	; 0x28
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
	 /*Debug_Send("Flash read at: ");
	 myLongStr(p_addr,temp,10,10);
	 Debug_Send(temp);
	 Debug_Send("\r\n");*/

	flashBusy();
 800cedc:	f000 f836 	bl	800cf4c <flashBusy>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800cee0:	2380      	movs	r3, #128	; 0x80
 800cee2:	0059      	lsls	r1, r3, #1
 800cee4:	2390      	movs	r3, #144	; 0x90
 800cee6:	05db      	lsls	r3, r3, #23
 800cee8:	2200      	movs	r2, #0
 800ceea:	0018      	movs	r0, r3
 800ceec:	f000 ff9e 	bl	800de2c <HAL_GPIO_WritePin>
	//uint32_t p_addr = 30;
	 temp[0] = M95_READ;
 800cef0:	2114      	movs	r1, #20
 800cef2:	187b      	adds	r3, r7, r1
 800cef4:	2203      	movs	r2, #3
 800cef6:	701a      	strb	r2, [r3, #0]
	 temp[1] = (p_addr>>16)&0xff;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	0c1b      	lsrs	r3, r3, #16
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	187b      	adds	r3, r7, r1
 800cf00:	705a      	strb	r2, [r3, #1]
	 temp[2] = (p_addr>>8)&0xff;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	0a1b      	lsrs	r3, r3, #8
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	187b      	adds	r3, r7, r1
 800cf0a:	709a      	strb	r2, [r3, #2]
	 temp[3] = p_addr&0xff;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	187b      	adds	r3, r7, r1
 800cf12:	70da      	strb	r2, [r3, #3]

	HAL_SPI_Transmit(&hspi2,temp,4,100);
 800cf14:	1879      	adds	r1, r7, r1
 800cf16:	480c      	ldr	r0, [pc, #48]	; (800cf48 <flashRead+0x78>)
 800cf18:	2364      	movs	r3, #100	; 0x64
 800cf1a:	2204      	movs	r2, #4
 800cf1c:	f003 fce6 	bl	80108ec <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi2,data,size,100);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	68b9      	ldr	r1, [r7, #8]
 800cf26:	4808      	ldr	r0, [pc, #32]	; (800cf48 <flashRead+0x78>)
 800cf28:	2364      	movs	r3, #100	; 0x64
 800cf2a:	f003 fe37 	bl	8010b9c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800cf2e:	2380      	movs	r3, #128	; 0x80
 800cf30:	0059      	lsls	r1, r3, #1
 800cf32:	2390      	movs	r3, #144	; 0x90
 800cf34:	05db      	lsls	r3, r3, #23
 800cf36:	2201      	movs	r2, #1
 800cf38:	0018      	movs	r0, r3
 800cf3a:	f000 ff77 	bl	800de2c <HAL_GPIO_WritePin>
	 Debug_Send(temp);
	 Debug_Send(" , ");
	 myLongStr(size,temp,10,10);
	 Debug_Send(temp);
	 Debug_Send("\r\n");*/
}
 800cf3e:	46c0      	nop			; (mov r8, r8)
 800cf40:	46bd      	mov	sp, r7
 800cf42:	b00a      	add	sp, #40	; 0x28
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	46c0      	nop			; (mov r8, r8)
 800cf48:	200024f8 	.word	0x200024f8

0800cf4c <flashBusy>:

void flashBusy(){
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
	 char temp[20];
	 temp[0] = M95_STATUS;
 800cf52:	1d3b      	adds	r3, r7, #4
 800cf54:	2205      	movs	r2, #5
 800cf56:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800cf58:	2380      	movs	r3, #128	; 0x80
 800cf5a:	0059      	lsls	r1, r3, #1
 800cf5c:	2390      	movs	r3, #144	; 0x90
 800cf5e:	05db      	lsls	r3, r3, #23
 800cf60:	2200      	movs	r2, #0
 800cf62:	0018      	movs	r0, r3
 800cf64:	f000 ff62 	bl	800de2c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,temp,1,100);
 800cf68:	1d39      	adds	r1, r7, #4
 800cf6a:	4812      	ldr	r0, [pc, #72]	; (800cfb4 <flashBusy+0x68>)
 800cf6c:	2364      	movs	r3, #100	; 0x64
 800cf6e:	2201      	movs	r2, #1
 800cf70:	f003 fcbc 	bl	80108ec <HAL_SPI_Transmit>
	//SPI_Write(M95_STATUS);
	HAL_SPI_Receive(&hspi2,temp,1,100);
 800cf74:	1d39      	adds	r1, r7, #4
 800cf76:	480f      	ldr	r0, [pc, #60]	; (800cfb4 <flashBusy+0x68>)
 800cf78:	2364      	movs	r3, #100	; 0x64
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f003 fe0e 	bl	8010b9c <HAL_SPI_Receive>
	//m95_status=SPI_Write(0);
	while(temp[0]&0x01){
 800cf80:	e005      	b.n	800cf8e <flashBusy+0x42>
		//SET_ROLL();
		//ROLL_UP();
		HAL_SPI_Receive(&hspi2,temp,1,100);
 800cf82:	1d39      	adds	r1, r7, #4
 800cf84:	480b      	ldr	r0, [pc, #44]	; (800cfb4 <flashBusy+0x68>)
 800cf86:	2364      	movs	r3, #100	; 0x64
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f003 fe07 	bl	8010b9c <HAL_SPI_Receive>
	while(temp[0]&0x01){
 800cf8e:	1d3b      	adds	r3, r7, #4
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	001a      	movs	r2, r3
 800cf94:	2301      	movs	r3, #1
 800cf96:	4013      	ands	r3, r2
 800cf98:	d1f3      	bne.n	800cf82 <flashBusy+0x36>
		//DWT_Delay_us(20);
		//m95_status=SPI_Write(0);
		//if(Boot_Bit)
		//	HAL_IWDG_Refresh(&hiwdg);						// RELOAD WDT WHILE FLASH IS BUSY
	}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800cf9a:	2380      	movs	r3, #128	; 0x80
 800cf9c:	0059      	lsls	r1, r3, #1
 800cf9e:	2390      	movs	r3, #144	; 0x90
 800cfa0:	05db      	lsls	r3, r3, #23
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	0018      	movs	r0, r3
 800cfa6:	f000 ff41 	bl	800de2c <HAL_GPIO_WritePin>
}
 800cfaa:	46c0      	nop			; (mov r8, r8)
 800cfac:	46bd      	mov	sp, r7
 800cfae:	b006      	add	sp, #24
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	46c0      	nop			; (mov r8, r8)
 800cfb4:	200024f8 	.word	0x200024f8

0800cfb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800cfc0:	f00a fc74 	bl	80178ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800cfc4:	23fa      	movs	r3, #250	; 0xfa
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	0018      	movs	r0, r3
 800cfca:	f009 fc1b 	bl	8016804 <osDelay>
    //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    //Debug_Send("M0 test running\r\n");
	if(mqttSend == 1){
 800cfce:	4b07      	ldr	r3, [pc, #28]	; (800cfec <StartDefaultTask+0x34>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d106      	bne.n	800cfe4 <StartDefaultTask+0x2c>
		mqttSend = 0;
 800cfd6:	4b05      	ldr	r3, [pc, #20]	; (800cfec <StartDefaultTask+0x34>)
 800cfd8:	2200      	movs	r2, #0
 800cfda:	601a      	str	r2, [r3, #0]
		Debug_Send("Publish func returnd\r\n");
 800cfdc:	4b04      	ldr	r3, [pc, #16]	; (800cff0 <StartDefaultTask+0x38>)
 800cfde:	0018      	movs	r0, r3
 800cfe0:	f7fd fade 	bl	800a5a0 <Debug_Send>
	}
    GSM_Service();
 800cfe4:	f7fc fa58 	bl	8009498 <GSM_Service>
  {
 800cfe8:	e7ec      	b.n	800cfc4 <StartDefaultTask+0xc>
 800cfea:	46c0      	nop			; (mov r8, r8)
 800cfec:	200002f8 	.word	0x200002f8
 800cff0:	08019f54 	.word	0x08019f54

0800cff4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 800cffc:	2032      	movs	r0, #50	; 0x32
 800cffe:	f009 fc01 	bl	8016804 <osDelay>
    recData();
 800d002:	f7fd fae7 	bl	800a5d4 <recData>
  {
 800d006:	e7f9      	b.n	800cffc <StartTask02+0x8>

0800d008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d00c:	b672      	cpsid	i
}
 800d00e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d010:	e7fe      	b.n	800d010 <Error_Handler+0x8>

0800d012 <myStrSection>:
//#include "GSM.h"

//volatile unsigned char msisdn[80];
const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

short myStrSection(char *p_str,char *p_result,unsigned char p_size,char p_char,char p_pos){
 800d012:	b580      	push	{r7, lr}
 800d014:	b086      	sub	sp, #24
 800d016:	af00      	add	r7, sp, #0
 800d018:	60f8      	str	r0, [r7, #12]
 800d01a:	60b9      	str	r1, [r7, #8]
 800d01c:	0019      	movs	r1, r3
 800d01e:	1dfb      	adds	r3, r7, #7
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	1dbb      	adds	r3, r7, #6
 800d024:	1c0a      	adds	r2, r1, #0
 800d026:	701a      	strb	r2, [r3, #0]
	short string_index;
	short result_index;
	char tmp_pos;

	string_index=0;
 800d028:	2316      	movs	r3, #22
 800d02a:	18fb      	adds	r3, r7, r3
 800d02c:	2200      	movs	r2, #0
 800d02e:	801a      	strh	r2, [r3, #0]
	result_index=0;
 800d030:	2314      	movs	r3, #20
 800d032:	18fb      	adds	r3, r7, r3
 800d034:	2200      	movs	r2, #0
 800d036:	801a      	strh	r2, [r3, #0]
	tmp_pos=0;
 800d038:	2313      	movs	r3, #19
 800d03a:	18fb      	adds	r3, r7, r3
 800d03c:	2200      	movs	r2, #0
 800d03e:	701a      	strb	r2, [r3, #0]
	p_size--;
 800d040:	1dfb      	adds	r3, r7, #7
 800d042:	781a      	ldrb	r2, [r3, #0]
 800d044:	1dfb      	adds	r3, r7, #7
 800d046:	3a01      	subs	r2, #1
 800d048:	701a      	strb	r2, [r3, #0]
	while(p_str[string_index]!=0){
 800d04a:	e04a      	b.n	800d0e2 <myStrSection+0xd0>
		if(p_str[string_index]==p_char){
 800d04c:	2316      	movs	r3, #22
 800d04e:	18fb      	adds	r3, r7, r3
 800d050:	2200      	movs	r2, #0
 800d052:	5e9b      	ldrsh	r3, [r3, r2]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	18d3      	adds	r3, r2, r3
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	1dba      	adds	r2, r7, #6
 800d05c:	7812      	ldrb	r2, [r2, #0]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d111      	bne.n	800d086 <myStrSection+0x74>

			if(tmp_pos==p_pos)break;
 800d062:	2113      	movs	r1, #19
 800d064:	187a      	adds	r2, r7, r1
 800d066:	2320      	movs	r3, #32
 800d068:	18fb      	adds	r3, r7, r3
 800d06a:	7812      	ldrb	r2, [r2, #0]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d041      	beq.n	800d0f6 <myStrSection+0xe4>
			tmp_pos++;
 800d072:	187b      	adds	r3, r7, r1
 800d074:	781a      	ldrb	r2, [r3, #0]
 800d076:	187b      	adds	r3, r7, r1
 800d078:	3201      	adds	r2, #1
 800d07a:	701a      	strb	r2, [r3, #0]
			result_index=0;
 800d07c:	2314      	movs	r3, #20
 800d07e:	18fb      	adds	r3, r7, r3
 800d080:	2200      	movs	r2, #0
 800d082:	801a      	strh	r2, [r3, #0]
 800d084:	e024      	b.n	800d0d0 <myStrSection+0xbe>
		}else{
			if(p_str[string_index]>=' '){
 800d086:	2116      	movs	r1, #22
 800d088:	187b      	adds	r3, r7, r1
 800d08a:	2200      	movs	r2, #0
 800d08c:	5e9b      	ldrsh	r3, [r3, r2]
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	18d3      	adds	r3, r2, r3
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	2b1f      	cmp	r3, #31
 800d096:	d91b      	bls.n	800d0d0 <myStrSection+0xbe>
				p_result[result_index]=p_str[string_index];				if(result_index<p_size)result_index++;
 800d098:	187b      	adds	r3, r7, r1
 800d09a:	2200      	movs	r2, #0
 800d09c:	5e9b      	ldrsh	r3, [r3, r2]
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	18d2      	adds	r2, r2, r3
 800d0a2:	2014      	movs	r0, #20
 800d0a4:	183b      	adds	r3, r7, r0
 800d0a6:	2100      	movs	r1, #0
 800d0a8:	5e5b      	ldrsh	r3, [r3, r1]
 800d0aa:	68b9      	ldr	r1, [r7, #8]
 800d0ac:	18cb      	adds	r3, r1, r3
 800d0ae:	7812      	ldrb	r2, [r2, #0]
 800d0b0:	701a      	strb	r2, [r3, #0]
 800d0b2:	183b      	adds	r3, r7, r0
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	5e9a      	ldrsh	r2, [r3, r2]
 800d0b8:	1dfb      	adds	r3, r7, #7
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	da07      	bge.n	800d0d0 <myStrSection+0xbe>
 800d0c0:	183b      	adds	r3, r7, r0
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	5e9b      	ldrsh	r3, [r3, r2]
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	183b      	adds	r3, r7, r0
 800d0ce:	801a      	strh	r2, [r3, #0]
			}
		}
		string_index++;
 800d0d0:	2116      	movs	r1, #22
 800d0d2:	187b      	adds	r3, r7, r1
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	5e9b      	ldrsh	r3, [r3, r2]
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	3301      	adds	r3, #1
 800d0dc:	b29a      	uxth	r2, r3
 800d0de:	187b      	adds	r3, r7, r1
 800d0e0:	801a      	strh	r2, [r3, #0]
	while(p_str[string_index]!=0){
 800d0e2:	2316      	movs	r3, #22
 800d0e4:	18fb      	adds	r3, r7, r3
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	5e9b      	ldrsh	r3, [r3, r2]
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	18d3      	adds	r3, r2, r3
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1ab      	bne.n	800d04c <myStrSection+0x3a>
 800d0f4:	e000      	b.n	800d0f8 <myStrSection+0xe6>
			if(tmp_pos==p_pos)break;
 800d0f6:	46c0      	nop			; (mov r8, r8)
	}
	if(tmp_pos!=p_pos){
 800d0f8:	2313      	movs	r3, #19
 800d0fa:	18fa      	adds	r2, r7, r3
 800d0fc:	2320      	movs	r3, #32
 800d0fe:	18fb      	adds	r3, r7, r3
 800d100:	7812      	ldrb	r2, [r2, #0]
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	429a      	cmp	r2, r3
 800d106:	d008      	beq.n	800d11a <myStrSection+0x108>
		result_index=0;
 800d108:	2314      	movs	r3, #20
 800d10a:	18fb      	adds	r3, r7, r3
 800d10c:	2200      	movs	r2, #0
 800d10e:	801a      	strh	r2, [r3, #0]
		string_index=-1;
 800d110:	2316      	movs	r3, #22
 800d112:	18fb      	adds	r3, r7, r3
 800d114:	2201      	movs	r2, #1
 800d116:	4252      	negs	r2, r2
 800d118:	801a      	strh	r2, [r3, #0]
	}
	p_result[result_index]=0;
 800d11a:	2314      	movs	r3, #20
 800d11c:	18fb      	adds	r3, r7, r3
 800d11e:	2200      	movs	r2, #0
 800d120:	5e9b      	ldrsh	r3, [r3, r2]
 800d122:	68ba      	ldr	r2, [r7, #8]
 800d124:	18d3      	adds	r3, r2, r3
 800d126:	2200      	movs	r2, #0
 800d128:	701a      	strb	r2, [r3, #0]

	return string_index;
 800d12a:	2316      	movs	r3, #22
 800d12c:	18fb      	adds	r3, r7, r3
 800d12e:	2200      	movs	r2, #0
 800d130:	5e9b      	ldrsh	r3, [r3, r2]
}
 800d132:	0018      	movs	r0, r3
 800d134:	46bd      	mov	sp, r7
 800d136:	b006      	add	sp, #24
 800d138:	bd80      	pop	{r7, pc}
	...

0800d13c <myLongStr>:


char* myLongStr(signed long p_val,char *p_dest,short p_size,char p_base){
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	0019      	movs	r1, r3
 800d148:	1dbb      	adds	r3, r7, #6
 800d14a:	801a      	strh	r2, [r3, #0]
 800d14c:	1d7b      	adds	r3, r7, #5
 800d14e:	1c0a      	adds	r2, r1, #0
 800d150:	701a      	strb	r2, [r3, #0]
	unsigned long tmp_index;
	short tmp_size;
	char tmp_val;
	char tmp_iszero;

	tmp_size=0;
 800d152:	2112      	movs	r1, #18
 800d154:	187b      	adds	r3, r7, r1
 800d156:	2200      	movs	r2, #0
 800d158:	801a      	strh	r2, [r3, #0]
	tmp_iszero=1;
 800d15a:	2311      	movs	r3, #17
 800d15c:	18fb      	adds	r3, r7, r3
 800d15e:	2201      	movs	r2, #1
 800d160:	701a      	strb	r2, [r3, #0]

	if(p_base==10){
 800d162:	1d7b      	adds	r3, r7, #5
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	2b0a      	cmp	r3, #10
 800d168:	d15f      	bne.n	800d22a <myLongStr+0xee>
		tmp_index=1000000000;
 800d16a:	4b6f      	ldr	r3, [pc, #444]	; (800d328 <myLongStr+0x1ec>)
 800d16c:	617b      	str	r3, [r7, #20]

		if(p_val<0){
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	da56      	bge.n	800d222 <myLongStr+0xe6>
			p_val*=-1;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	425b      	negs	r3, r3
 800d178:	60fb      	str	r3, [r7, #12]
			p_dest[tmp_size]='-';
 800d17a:	187b      	adds	r3, r7, r1
 800d17c:	2200      	movs	r2, #0
 800d17e:	5e9b      	ldrsh	r3, [r3, r2]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	18d3      	adds	r3, r2, r3
 800d184:	222d      	movs	r2, #45	; 0x2d
 800d186:	701a      	strb	r2, [r3, #0]
			tmp_size++;
 800d188:	187b      	adds	r3, r7, r1
 800d18a:	2200      	movs	r2, #0
 800d18c:	5e9b      	ldrsh	r3, [r3, r2]
 800d18e:	b29b      	uxth	r3, r3
 800d190:	3301      	adds	r3, #1
 800d192:	b29a      	uxth	r2, r3
 800d194:	187b      	adds	r3, r7, r1
 800d196:	801a      	strh	r2, [r3, #0]
		}

		while(tmp_index>0){
 800d198:	e043      	b.n	800d222 <myLongStr+0xe6>
			tmp_val=p_val/tmp_index;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6979      	ldr	r1, [r7, #20]
 800d19e:	0018      	movs	r0, r3
 800d1a0:	f7fb ffce 	bl	8009140 <__udivsi3>
 800d1a4:	0003      	movs	r3, r0
 800d1a6:	001a      	movs	r2, r3
 800d1a8:	2110      	movs	r1, #16
 800d1aa:	187b      	adds	r3, r7, r1
 800d1ac:	701a      	strb	r2, [r3, #0]
			if(tmp_val>0)tmp_iszero=0;
 800d1ae:	187b      	adds	r3, r7, r1
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d003      	beq.n	800d1be <myLongStr+0x82>
 800d1b6:	2311      	movs	r3, #17
 800d1b8:	18fb      	adds	r3, r7, r3
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	701a      	strb	r2, [r3, #0]
			if(tmp_iszero==0){
 800d1be:	2311      	movs	r3, #17
 800d1c0:	18fb      	adds	r3, r7, r3
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d113      	bne.n	800d1f0 <myLongStr+0xb4>
				p_dest[tmp_size]=tmp_val+0x30;
 800d1c8:	2112      	movs	r1, #18
 800d1ca:	187b      	adds	r3, r7, r1
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	5e9b      	ldrsh	r3, [r3, r2]
 800d1d0:	68ba      	ldr	r2, [r7, #8]
 800d1d2:	18d3      	adds	r3, r2, r3
 800d1d4:	2210      	movs	r2, #16
 800d1d6:	18ba      	adds	r2, r7, r2
 800d1d8:	7812      	ldrb	r2, [r2, #0]
 800d1da:	3230      	adds	r2, #48	; 0x30
 800d1dc:	b2d2      	uxtb	r2, r2
 800d1de:	701a      	strb	r2, [r3, #0]
				tmp_size++;
 800d1e0:	187b      	adds	r3, r7, r1
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	5e9b      	ldrsh	r3, [r3, r2]
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	187b      	adds	r3, r7, r1
 800d1ee:	801a      	strh	r2, [r3, #0]
			}
			p_val=p_val-(tmp_val*tmp_index);
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	2310      	movs	r3, #16
 800d1f4:	18fb      	adds	r3, r7, r3
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	6979      	ldr	r1, [r7, #20]
 800d1fa:	434b      	muls	r3, r1
 800d1fc:	1ad3      	subs	r3, r2, r3
 800d1fe:	60fb      	str	r3, [r7, #12]
			tmp_index/=10;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	210a      	movs	r1, #10
 800d204:	0018      	movs	r0, r3
 800d206:	f7fb ff9b 	bl	8009140 <__udivsi3>
 800d20a:	0003      	movs	r3, r0
 800d20c:	617b      	str	r3, [r7, #20]
			if(tmp_size>=(p_size-1))break;
 800d20e:	2312      	movs	r3, #18
 800d210:	18fb      	adds	r3, r7, r3
 800d212:	2200      	movs	r2, #0
 800d214:	5e9a      	ldrsh	r2, [r3, r2]
 800d216:	1dbb      	adds	r3, r7, #6
 800d218:	2100      	movs	r1, #0
 800d21a:	5e5b      	ldrsh	r3, [r3, r1]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	429a      	cmp	r2, r3
 800d220:	da5d      	bge.n	800d2de <myLongStr+0x1a2>
		while(tmp_index>0){
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d1b8      	bne.n	800d19a <myLongStr+0x5e>
 800d228:	e05c      	b.n	800d2e4 <myLongStr+0x1a8>
		}

	}
	else if(p_base==16){
 800d22a:	1d7b      	adds	r3, r7, #5
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	2b10      	cmp	r3, #16
 800d230:	d158      	bne.n	800d2e4 <myLongStr+0x1a8>
		tmp_index=32;
 800d232:	2320      	movs	r3, #32
 800d234:	617b      	str	r3, [r7, #20]
		while(tmp_index>0){
 800d236:	e04e      	b.n	800d2d6 <myLongStr+0x19a>
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	3b04      	subs	r3, #4
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	411a      	asrs	r2, r3
 800d240:	0013      	movs	r3, r2
 800d242:	b2da      	uxtb	r2, r3
 800d244:	2010      	movs	r0, #16
 800d246:	183b      	adds	r3, r7, r0
 800d248:	210f      	movs	r1, #15
 800d24a:	400a      	ands	r2, r1
 800d24c:	701a      	strb	r2, [r3, #0]

			if(tmp_val>0)tmp_iszero=0;
 800d24e:	183b      	adds	r3, r7, r0
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d003      	beq.n	800d25e <myLongStr+0x122>
 800d256:	2311      	movs	r3, #17
 800d258:	18fb      	adds	r3, r7, r3
 800d25a:	2200      	movs	r2, #0
 800d25c:	701a      	strb	r2, [r3, #0]
			if(tmp_iszero==0){
 800d25e:	2311      	movs	r3, #17
 800d260:	18fb      	adds	r3, r7, r3
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d129      	bne.n	800d2bc <myLongStr+0x180>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 800d268:	2110      	movs	r1, #16
 800d26a:	187b      	adds	r3, r7, r1
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	2b09      	cmp	r3, #9
 800d270:	d80b      	bhi.n	800d28a <myLongStr+0x14e>
 800d272:	2312      	movs	r3, #18
 800d274:	18fb      	adds	r3, r7, r3
 800d276:	2200      	movs	r2, #0
 800d278:	5e9b      	ldrsh	r3, [r3, r2]
 800d27a:	68ba      	ldr	r2, [r7, #8]
 800d27c:	18d3      	adds	r3, r2, r3
 800d27e:	187a      	adds	r2, r7, r1
 800d280:	7812      	ldrb	r2, [r2, #0]
 800d282:	3230      	adds	r2, #48	; 0x30
 800d284:	b2d2      	uxtb	r2, r2
 800d286:	701a      	strb	r2, [r3, #0]
 800d288:	e00f      	b.n	800d2aa <myLongStr+0x16e>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 800d28a:	2110      	movs	r1, #16
 800d28c:	187b      	adds	r3, r7, r1
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	2b09      	cmp	r3, #9
 800d292:	d90a      	bls.n	800d2aa <myLongStr+0x16e>
 800d294:	2312      	movs	r3, #18
 800d296:	18fb      	adds	r3, r7, r3
 800d298:	2200      	movs	r2, #0
 800d29a:	5e9b      	ldrsh	r3, [r3, r2]
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	18d3      	adds	r3, r2, r3
 800d2a0:	187a      	adds	r2, r7, r1
 800d2a2:	7812      	ldrb	r2, [r2, #0]
 800d2a4:	3237      	adds	r2, #55	; 0x37
 800d2a6:	b2d2      	uxtb	r2, r2
 800d2a8:	701a      	strb	r2, [r3, #0]
				tmp_size++;
 800d2aa:	2112      	movs	r1, #18
 800d2ac:	187b      	adds	r3, r7, r1
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	5e9b      	ldrsh	r3, [r3, r2]
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	187b      	adds	r3, r7, r1
 800d2ba:	801a      	strh	r2, [r3, #0]
			}

			tmp_index-=4;
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	3b04      	subs	r3, #4
 800d2c0:	617b      	str	r3, [r7, #20]
			if(tmp_size>=(p_size-1))break;
 800d2c2:	2312      	movs	r3, #18
 800d2c4:	18fb      	adds	r3, r7, r3
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	5e9a      	ldrsh	r2, [r3, r2]
 800d2ca:	1dbb      	adds	r3, r7, #6
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	5e5b      	ldrsh	r3, [r3, r1]
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	da05      	bge.n	800d2e2 <myLongStr+0x1a6>
		while(tmp_index>0){
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1ad      	bne.n	800d238 <myLongStr+0xfc>
 800d2dc:	e002      	b.n	800d2e4 <myLongStr+0x1a8>
			if(tmp_size>=(p_size-1))break;
 800d2de:	46c0      	nop			; (mov r8, r8)
 800d2e0:	e000      	b.n	800d2e4 <myLongStr+0x1a8>
			if(tmp_size>=(p_size-1))break;
 800d2e2:	46c0      	nop			; (mov r8, r8)
		}

	}

	if(tmp_iszero==1){
 800d2e4:	2311      	movs	r3, #17
 800d2e6:	18fb      	adds	r3, r7, r3
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d10f      	bne.n	800d30e <myLongStr+0x1d2>
		p_dest[tmp_size]='0';
 800d2ee:	2112      	movs	r1, #18
 800d2f0:	187b      	adds	r3, r7, r1
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	5e9b      	ldrsh	r3, [r3, r2]
 800d2f6:	68ba      	ldr	r2, [r7, #8]
 800d2f8:	18d3      	adds	r3, r2, r3
 800d2fa:	2230      	movs	r2, #48	; 0x30
 800d2fc:	701a      	strb	r2, [r3, #0]
		tmp_size++;
 800d2fe:	187b      	adds	r3, r7, r1
 800d300:	2200      	movs	r2, #0
 800d302:	5e9b      	ldrsh	r3, [r3, r2]
 800d304:	b29b      	uxth	r3, r3
 800d306:	3301      	adds	r3, #1
 800d308:	b29a      	uxth	r2, r3
 800d30a:	187b      	adds	r3, r7, r1
 800d30c:	801a      	strh	r2, [r3, #0]
	}

	p_dest[tmp_size]=0;
 800d30e:	2312      	movs	r3, #18
 800d310:	18fb      	adds	r3, r7, r3
 800d312:	2200      	movs	r2, #0
 800d314:	5e9b      	ldrsh	r3, [r3, r2]
 800d316:	68ba      	ldr	r2, [r7, #8]
 800d318:	18d3      	adds	r3, r2, r3
 800d31a:	2200      	movs	r2, #0
 800d31c:	701a      	strb	r2, [r3, #0]
	return p_dest;
 800d31e:	68bb      	ldr	r3, [r7, #8]
}
 800d320:	0018      	movs	r0, r3
 800d322:	46bd      	mov	sp, r7
 800d324:	b006      	add	sp, #24
 800d326:	bd80      	pop	{r7, pc}
 800d328:	3b9aca00 	.word	0x3b9aca00

0800d32c <myStrLong>:

long myStrLong(char *p_str,char p_base){
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	000a      	movs	r2, r1
 800d336:	1cfb      	adds	r3, r7, #3
 800d338:	701a      	strb	r2, [r3, #0]
	long tmp_long;
	tmp_long=0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	60fb      	str	r3, [r7, #12]
	if(p_base==10){
 800d33e:	1cfb      	adds	r3, r7, #3
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	2b0a      	cmp	r3, #10
 800d344:	d120      	bne.n	800d388 <myStrLong+0x5c>
		while(*p_str != 0){
 800d346:	e01a      	b.n	800d37e <myStrLong+0x52>
			if((*p_str>='0')&&(*p_str<='9')){
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	2b2f      	cmp	r3, #47	; 0x2f
 800d34e:	d90f      	bls.n	800d370 <myStrLong+0x44>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b39      	cmp	r3, #57	; 0x39
 800d356:	d80b      	bhi.n	800d370 <myStrLong+0x44>
				tmp_long*=10;
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	0013      	movs	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	189b      	adds	r3, r3, r2
 800d360:	005b      	lsls	r3, r3, #1
 800d362:	60fb      	str	r3, [r7, #12]
				tmp_long+=*p_str-0x30;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	3b30      	subs	r3, #48	; 0x30
 800d36a:	68fa      	ldr	r2, [r7, #12]
 800d36c:	18d3      	adds	r3, r2, r3
 800d36e:	60fb      	str	r3, [r7, #12]
			}
			if(*p_str>='.')
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b2d      	cmp	r3, #45	; 0x2d
 800d376:	d902      	bls.n	800d37e <myStrLong+0x52>
			p_str++;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	3301      	adds	r3, #1
 800d37c:	607b      	str	r3, [r7, #4]
		while(*p_str != 0){
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d1e0      	bne.n	800d348 <myStrLong+0x1c>
 800d386:	e03e      	b.n	800d406 <myStrLong+0xda>
		}
	}
	else if(p_base==16){
 800d388:	1cfb      	adds	r3, r7, #3
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b10      	cmp	r3, #16
 800d38e:	d13a      	bne.n	800d406 <myStrLong+0xda>
		while(*p_str != 0){
 800d390:	e035      	b.n	800d3fe <myStrLong+0xd2>
			if(*p_str>='0'){
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	2b2f      	cmp	r3, #47	; 0x2f
 800d398:	d92e      	bls.n	800d3f8 <myStrLong+0xcc>
				tmp_long=tmp_long<<4;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	011b      	lsls	r3, r3, #4
 800d39e:	60fb      	str	r3, [r7, #12]
				if((*p_str>='0')&&(*p_str<='9'))tmp_long|=*p_str-'0';
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	2b2f      	cmp	r3, #47	; 0x2f
 800d3a6:	d90a      	bls.n	800d3be <myStrLong+0x92>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	2b39      	cmp	r3, #57	; 0x39
 800d3ae:	d806      	bhi.n	800d3be <myStrLong+0x92>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	3b30      	subs	r3, #48	; 0x30
 800d3b6:	68fa      	ldr	r2, [r7, #12]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	60fb      	str	r3, [r7, #12]
 800d3bc:	e01c      	b.n	800d3f8 <myStrLong+0xcc>
				else if((*p_str>='a')&&(*p_str<='f'))tmp_long|=(*p_str-'a')+10;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	2b60      	cmp	r3, #96	; 0x60
 800d3c4:	d90a      	bls.n	800d3dc <myStrLong+0xb0>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	2b66      	cmp	r3, #102	; 0x66
 800d3cc:	d806      	bhi.n	800d3dc <myStrLong+0xb0>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	3b57      	subs	r3, #87	; 0x57
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	4313      	orrs	r3, r2
 800d3d8:	60fb      	str	r3, [r7, #12]
 800d3da:	e00d      	b.n	800d3f8 <myStrLong+0xcc>
				else if((*p_str>='A')&&(*p_str<='F'))tmp_long|=(*p_str-'A')+10;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	2b40      	cmp	r3, #64	; 0x40
 800d3e2:	d909      	bls.n	800d3f8 <myStrLong+0xcc>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	2b46      	cmp	r3, #70	; 0x46
 800d3ea:	d805      	bhi.n	800d3f8 <myStrLong+0xcc>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	3b37      	subs	r3, #55	; 0x37
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	60fb      	str	r3, [r7, #12]
			}
			p_str++;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	607b      	str	r3, [r7, #4]
		while(*p_str != 0){
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1c5      	bne.n	800d392 <myStrLong+0x66>
		}
	}
	return tmp_long;
 800d406:	68fb      	ldr	r3, [r7, #12]
}
 800d408:	0018      	movs	r0, r3
 800d40a:	46bd      	mov	sp, r7
 800d40c:	b004      	add	sp, #16
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d416:	4b12      	ldr	r3, [pc, #72]	; (800d460 <HAL_MspInit+0x50>)
 800d418:	699a      	ldr	r2, [r3, #24]
 800d41a:	4b11      	ldr	r3, [pc, #68]	; (800d460 <HAL_MspInit+0x50>)
 800d41c:	2101      	movs	r1, #1
 800d41e:	430a      	orrs	r2, r1
 800d420:	619a      	str	r2, [r3, #24]
 800d422:	4b0f      	ldr	r3, [pc, #60]	; (800d460 <HAL_MspInit+0x50>)
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	2201      	movs	r2, #1
 800d428:	4013      	ands	r3, r2
 800d42a:	607b      	str	r3, [r7, #4]
 800d42c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d42e:	4b0c      	ldr	r3, [pc, #48]	; (800d460 <HAL_MspInit+0x50>)
 800d430:	69da      	ldr	r2, [r3, #28]
 800d432:	4b0b      	ldr	r3, [pc, #44]	; (800d460 <HAL_MspInit+0x50>)
 800d434:	2180      	movs	r1, #128	; 0x80
 800d436:	0549      	lsls	r1, r1, #21
 800d438:	430a      	orrs	r2, r1
 800d43a:	61da      	str	r2, [r3, #28]
 800d43c:	4b08      	ldr	r3, [pc, #32]	; (800d460 <HAL_MspInit+0x50>)
 800d43e:	69da      	ldr	r2, [r3, #28]
 800d440:	2380      	movs	r3, #128	; 0x80
 800d442:	055b      	lsls	r3, r3, #21
 800d444:	4013      	ands	r3, r2
 800d446:	603b      	str	r3, [r7, #0]
 800d448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800d44a:	2302      	movs	r3, #2
 800d44c:	425b      	negs	r3, r3
 800d44e:	2200      	movs	r2, #0
 800d450:	2103      	movs	r1, #3
 800d452:	0018      	movs	r0, r3
 800d454:	f000 fac2 	bl	800d9dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d458:	46c0      	nop			; (mov r8, r8)
 800d45a:	46bd      	mov	sp, r7
 800d45c:	b002      	add	sp, #8
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	40021000 	.word	0x40021000

0800d464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d464:	b590      	push	{r4, r7, lr}
 800d466:	b08b      	sub	sp, #44	; 0x2c
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d46c:	2414      	movs	r4, #20
 800d46e:	193b      	adds	r3, r7, r4
 800d470:	0018      	movs	r0, r3
 800d472:	2314      	movs	r3, #20
 800d474:	001a      	movs	r2, r3
 800d476:	2100      	movs	r1, #0
 800d478:	f00a ff61 	bl	801833e <memset>
  if(hspi->Instance==SPI2)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a1c      	ldr	r2, [pc, #112]	; (800d4f4 <HAL_SPI_MspInit+0x90>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d132      	bne.n	800d4ec <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d486:	4b1c      	ldr	r3, [pc, #112]	; (800d4f8 <HAL_SPI_MspInit+0x94>)
 800d488:	69da      	ldr	r2, [r3, #28]
 800d48a:	4b1b      	ldr	r3, [pc, #108]	; (800d4f8 <HAL_SPI_MspInit+0x94>)
 800d48c:	2180      	movs	r1, #128	; 0x80
 800d48e:	01c9      	lsls	r1, r1, #7
 800d490:	430a      	orrs	r2, r1
 800d492:	61da      	str	r2, [r3, #28]
 800d494:	4b18      	ldr	r3, [pc, #96]	; (800d4f8 <HAL_SPI_MspInit+0x94>)
 800d496:	69da      	ldr	r2, [r3, #28]
 800d498:	2380      	movs	r3, #128	; 0x80
 800d49a:	01db      	lsls	r3, r3, #7
 800d49c:	4013      	ands	r3, r2
 800d49e:	613b      	str	r3, [r7, #16]
 800d4a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d4a2:	4b15      	ldr	r3, [pc, #84]	; (800d4f8 <HAL_SPI_MspInit+0x94>)
 800d4a4:	695a      	ldr	r2, [r3, #20]
 800d4a6:	4b14      	ldr	r3, [pc, #80]	; (800d4f8 <HAL_SPI_MspInit+0x94>)
 800d4a8:	2180      	movs	r1, #128	; 0x80
 800d4aa:	02c9      	lsls	r1, r1, #11
 800d4ac:	430a      	orrs	r2, r1
 800d4ae:	615a      	str	r2, [r3, #20]
 800d4b0:	4b11      	ldr	r3, [pc, #68]	; (800d4f8 <HAL_SPI_MspInit+0x94>)
 800d4b2:	695a      	ldr	r2, [r3, #20]
 800d4b4:	2380      	movs	r3, #128	; 0x80
 800d4b6:	02db      	lsls	r3, r3, #11
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	60fb      	str	r3, [r7, #12]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800d4be:	193b      	adds	r3, r7, r4
 800d4c0:	22e0      	movs	r2, #224	; 0xe0
 800d4c2:	0212      	lsls	r2, r2, #8
 800d4c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4c6:	0021      	movs	r1, r4
 800d4c8:	187b      	adds	r3, r7, r1
 800d4ca:	2202      	movs	r2, #2
 800d4cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4ce:	187b      	adds	r3, r7, r1
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d4d4:	187b      	adds	r3, r7, r1
 800d4d6:	2203      	movs	r2, #3
 800d4d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800d4da:	187b      	adds	r3, r7, r1
 800d4dc:	2200      	movs	r2, #0
 800d4de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d4e0:	187b      	adds	r3, r7, r1
 800d4e2:	4a06      	ldr	r2, [pc, #24]	; (800d4fc <HAL_SPI_MspInit+0x98>)
 800d4e4:	0019      	movs	r1, r3
 800d4e6:	0010      	movs	r0, r2
 800d4e8:	f000 fb28 	bl	800db3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800d4ec:	46c0      	nop			; (mov r8, r8)
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	b00b      	add	sp, #44	; 0x2c
 800d4f2:	bd90      	pop	{r4, r7, pc}
 800d4f4:	40003800 	.word	0x40003800
 800d4f8:	40021000 	.word	0x40021000
 800d4fc:	48000400 	.word	0x48000400

0800d500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d500:	b590      	push	{r4, r7, lr}
 800d502:	b08d      	sub	sp, #52	; 0x34
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d508:	241c      	movs	r4, #28
 800d50a:	193b      	adds	r3, r7, r4
 800d50c:	0018      	movs	r0, r3
 800d50e:	2314      	movs	r3, #20
 800d510:	001a      	movs	r2, r3
 800d512:	2100      	movs	r1, #0
 800d514:	f00a ff13 	bl	801833e <memset>
  if(huart->Instance==USART1)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a49      	ldr	r2, [pc, #292]	; (800d644 <HAL_UART_MspInit+0x144>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d134      	bne.n	800d58c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d522:	4b49      	ldr	r3, [pc, #292]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d524:	699a      	ldr	r2, [r3, #24]
 800d526:	4b48      	ldr	r3, [pc, #288]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d528:	2180      	movs	r1, #128	; 0x80
 800d52a:	01c9      	lsls	r1, r1, #7
 800d52c:	430a      	orrs	r2, r1
 800d52e:	619a      	str	r2, [r3, #24]
 800d530:	4b45      	ldr	r3, [pc, #276]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d532:	699a      	ldr	r2, [r3, #24]
 800d534:	2380      	movs	r3, #128	; 0x80
 800d536:	01db      	lsls	r3, r3, #7
 800d538:	4013      	ands	r3, r2
 800d53a:	61bb      	str	r3, [r7, #24]
 800d53c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d53e:	4b42      	ldr	r3, [pc, #264]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d540:	695a      	ldr	r2, [r3, #20]
 800d542:	4b41      	ldr	r3, [pc, #260]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d544:	2180      	movs	r1, #128	; 0x80
 800d546:	0289      	lsls	r1, r1, #10
 800d548:	430a      	orrs	r2, r1
 800d54a:	615a      	str	r2, [r3, #20]
 800d54c:	4b3e      	ldr	r3, [pc, #248]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d54e:	695a      	ldr	r2, [r3, #20]
 800d550:	2380      	movs	r3, #128	; 0x80
 800d552:	029b      	lsls	r3, r3, #10
 800d554:	4013      	ands	r3, r2
 800d556:	617b      	str	r3, [r7, #20]
 800d558:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d55a:	193b      	adds	r3, r7, r4
 800d55c:	22c0      	movs	r2, #192	; 0xc0
 800d55e:	00d2      	lsls	r2, r2, #3
 800d560:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d562:	0021      	movs	r1, r4
 800d564:	187b      	adds	r3, r7, r1
 800d566:	2202      	movs	r2, #2
 800d568:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d56a:	187b      	adds	r3, r7, r1
 800d56c:	2200      	movs	r2, #0
 800d56e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d570:	187b      	adds	r3, r7, r1
 800d572:	2203      	movs	r2, #3
 800d574:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800d576:	187b      	adds	r3, r7, r1
 800d578:	2201      	movs	r2, #1
 800d57a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d57c:	187a      	adds	r2, r7, r1
 800d57e:	2390      	movs	r3, #144	; 0x90
 800d580:	05db      	lsls	r3, r3, #23
 800d582:	0011      	movs	r1, r2
 800d584:	0018      	movs	r0, r3
 800d586:	f000 fad9 	bl	800db3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800d58a:	e056      	b.n	800d63a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a2e      	ldr	r2, [pc, #184]	; (800d64c <HAL_UART_MspInit+0x14c>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d151      	bne.n	800d63a <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800d596:	4b2c      	ldr	r3, [pc, #176]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d598:	69da      	ldr	r2, [r3, #28]
 800d59a:	4b2b      	ldr	r3, [pc, #172]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d59c:	2180      	movs	r1, #128	; 0x80
 800d59e:	0289      	lsls	r1, r1, #10
 800d5a0:	430a      	orrs	r2, r1
 800d5a2:	61da      	str	r2, [r3, #28]
 800d5a4:	4b28      	ldr	r3, [pc, #160]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d5a6:	69da      	ldr	r2, [r3, #28]
 800d5a8:	2380      	movs	r3, #128	; 0x80
 800d5aa:	029b      	lsls	r3, r3, #10
 800d5ac:	4013      	ands	r3, r2
 800d5ae:	613b      	str	r3, [r7, #16]
 800d5b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5b2:	4b25      	ldr	r3, [pc, #148]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d5b4:	695a      	ldr	r2, [r3, #20]
 800d5b6:	4b24      	ldr	r3, [pc, #144]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d5b8:	2180      	movs	r1, #128	; 0x80
 800d5ba:	0289      	lsls	r1, r1, #10
 800d5bc:	430a      	orrs	r2, r1
 800d5be:	615a      	str	r2, [r3, #20]
 800d5c0:	4b21      	ldr	r3, [pc, #132]	; (800d648 <HAL_UART_MspInit+0x148>)
 800d5c2:	695a      	ldr	r2, [r3, #20]
 800d5c4:	2380      	movs	r3, #128	; 0x80
 800d5c6:	029b      	lsls	r3, r3, #10
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	60fb      	str	r3, [r7, #12]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d5ce:	241c      	movs	r4, #28
 800d5d0:	193b      	adds	r3, r7, r4
 800d5d2:	2204      	movs	r2, #4
 800d5d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5d6:	193b      	adds	r3, r7, r4
 800d5d8:	2202      	movs	r2, #2
 800d5da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5dc:	193b      	adds	r3, r7, r4
 800d5de:	2200      	movs	r2, #0
 800d5e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d5e2:	193b      	adds	r3, r7, r4
 800d5e4:	2203      	movs	r2, #3
 800d5e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800d5e8:	193b      	adds	r3, r7, r4
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5ee:	193a      	adds	r2, r7, r4
 800d5f0:	2390      	movs	r3, #144	; 0x90
 800d5f2:	05db      	lsls	r3, r3, #23
 800d5f4:	0011      	movs	r1, r2
 800d5f6:	0018      	movs	r0, r3
 800d5f8:	f000 faa0 	bl	800db3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d5fc:	0021      	movs	r1, r4
 800d5fe:	187b      	adds	r3, r7, r1
 800d600:	2208      	movs	r2, #8
 800d602:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d604:	187b      	adds	r3, r7, r1
 800d606:	2202      	movs	r2, #2
 800d608:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d60a:	187b      	adds	r3, r7, r1
 800d60c:	2201      	movs	r2, #1
 800d60e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d610:	187b      	adds	r3, r7, r1
 800d612:	2203      	movs	r2, #3
 800d614:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800d616:	187b      	adds	r3, r7, r1
 800d618:	2201      	movs	r2, #1
 800d61a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d61c:	187a      	adds	r2, r7, r1
 800d61e:	2390      	movs	r3, #144	; 0x90
 800d620:	05db      	lsls	r3, r3, #23
 800d622:	0011      	movs	r1, r2
 800d624:	0018      	movs	r0, r3
 800d626:	f000 fa89 	bl	800db3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800d62a:	2200      	movs	r2, #0
 800d62c:	2103      	movs	r1, #3
 800d62e:	201c      	movs	r0, #28
 800d630:	f000 f9d4 	bl	800d9dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d634:	201c      	movs	r0, #28
 800d636:	f000 f9e6 	bl	800da06 <HAL_NVIC_EnableIRQ>
}
 800d63a:	46c0      	nop			; (mov r8, r8)
 800d63c:	46bd      	mov	sp, r7
 800d63e:	b00d      	add	sp, #52	; 0x34
 800d640:	bd90      	pop	{r4, r7, pc}
 800d642:	46c0      	nop			; (mov r8, r8)
 800d644:	40013800 	.word	0x40013800
 800d648:	40021000 	.word	0x40021000
 800d64c:	40004400 	.word	0x40004400

0800d650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d654:	e7fe      	b.n	800d654 <NMI_Handler+0x4>

0800d656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d65a:	e7fe      	b.n	800d65a <HardFault_Handler+0x4>

0800d65c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d660:	f000 f8d0 	bl	800d804 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d664:	f009 fdd8 	bl	8017218 <xTaskGetSchedulerState>
 800d668:	0003      	movs	r3, r0
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d001      	beq.n	800d672 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800d66e:	f009 ff3b 	bl	80174e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d672:	46c0      	nop			; (mov r8, r8)
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d67c:	4b03      	ldr	r3, [pc, #12]	; (800d68c <USART2_IRQHandler+0x14>)
 800d67e:	0018      	movs	r0, r3
 800d680:	f004 f95e 	bl	8011940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d684:	46c0      	nop			; (mov r8, r8)
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	46c0      	nop			; (mov r8, r8)
 800d68c:	200025e4 	.word	0x200025e4

0800d690 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800d694:	4b03      	ldr	r3, [pc, #12]	; (800d6a4 <USB_IRQHandler+0x14>)
 800d696:	0018      	movs	r0, r3
 800d698:	f000 fd36 	bl	800e108 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800d69c:	46c0      	nop			; (mov r8, r8)
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	46c0      	nop			; (mov r8, r8)
 800d6a4:	20003300 	.word	0x20003300

0800d6a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b086      	sub	sp, #24
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d6b0:	4a14      	ldr	r2, [pc, #80]	; (800d704 <_sbrk+0x5c>)
 800d6b2:	4b15      	ldr	r3, [pc, #84]	; (800d708 <_sbrk+0x60>)
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d6bc:	4b13      	ldr	r3, [pc, #76]	; (800d70c <_sbrk+0x64>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d102      	bne.n	800d6ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d6c4:	4b11      	ldr	r3, [pc, #68]	; (800d70c <_sbrk+0x64>)
 800d6c6:	4a12      	ldr	r2, [pc, #72]	; (800d710 <_sbrk+0x68>)
 800d6c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d6ca:	4b10      	ldr	r3, [pc, #64]	; (800d70c <_sbrk+0x64>)
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	18d3      	adds	r3, r2, r3
 800d6d2:	693a      	ldr	r2, [r7, #16]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d207      	bcs.n	800d6e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d6d8:	f00a fdfe 	bl	80182d8 <__errno>
 800d6dc:	0003      	movs	r3, r0
 800d6de:	220c      	movs	r2, #12
 800d6e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	425b      	negs	r3, r3
 800d6e6:	e009      	b.n	800d6fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d6e8:	4b08      	ldr	r3, [pc, #32]	; (800d70c <_sbrk+0x64>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d6ee:	4b07      	ldr	r3, [pc, #28]	; (800d70c <_sbrk+0x64>)
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	18d2      	adds	r2, r2, r3
 800d6f6:	4b05      	ldr	r3, [pc, #20]	; (800d70c <_sbrk+0x64>)
 800d6f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
}
 800d6fc:	0018      	movs	r0, r3
 800d6fe:	46bd      	mov	sp, r7
 800d700:	b006      	add	sp, #24
 800d702:	bd80      	pop	{r7, pc}
 800d704:	20004000 	.word	0x20004000
 800d708:	00000400 	.word	0x00000400
 800d70c:	20000550 	.word	0x20000550
 800d710:	20003608 	.word	0x20003608

0800d714 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800d718:	46c0      	nop			; (mov r8, r8)
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
	...

0800d720 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d720:	480d      	ldr	r0, [pc, #52]	; (800d758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800d722:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d724:	480d      	ldr	r0, [pc, #52]	; (800d75c <LoopForever+0x6>)
  ldr r1, =_edata
 800d726:	490e      	ldr	r1, [pc, #56]	; (800d760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800d728:	4a0e      	ldr	r2, [pc, #56]	; (800d764 <LoopForever+0xe>)
  movs r3, #0
 800d72a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d72c:	e002      	b.n	800d734 <LoopCopyDataInit>

0800d72e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d72e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d732:	3304      	adds	r3, #4

0800d734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d738:	d3f9      	bcc.n	800d72e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d73a:	4a0b      	ldr	r2, [pc, #44]	; (800d768 <LoopForever+0x12>)
  ldr r4, =_ebss
 800d73c:	4c0b      	ldr	r4, [pc, #44]	; (800d76c <LoopForever+0x16>)
  movs r3, #0
 800d73e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d740:	e001      	b.n	800d746 <LoopFillZerobss>

0800d742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d744:	3204      	adds	r2, #4

0800d746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d748:	d3fb      	bcc.n	800d742 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800d74a:	f7ff ffe3 	bl	800d714 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800d74e:	f00a fdc9 	bl	80182e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d752:	f7ff f8b3 	bl	800c8bc <main>

0800d756 <LoopForever>:

LoopForever:
    b LoopForever
 800d756:	e7fe      	b.n	800d756 <LoopForever>
  ldr   r0, =_estack
 800d758:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800d75c:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 800d760:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 800d764:	0801a318 	.word	0x0801a318
  ldr r2, =_sbss
 800d768:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 800d76c:	20003604 	.word	0x20003604

0800d770 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d770:	e7fe      	b.n	800d770 <ADC1_COMP_IRQHandler>
	...

0800d774 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d778:	4b07      	ldr	r3, [pc, #28]	; (800d798 <HAL_Init+0x24>)
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	4b06      	ldr	r3, [pc, #24]	; (800d798 <HAL_Init+0x24>)
 800d77e:	2110      	movs	r1, #16
 800d780:	430a      	orrs	r2, r1
 800d782:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800d784:	2003      	movs	r0, #3
 800d786:	f000 f809 	bl	800d79c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d78a:	f7ff fe41 	bl	800d410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	0018      	movs	r0, r3
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	46c0      	nop			; (mov r8, r8)
 800d798:	40022000 	.word	0x40022000

0800d79c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d79c:	b590      	push	{r4, r7, lr}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d7a4:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <HAL_InitTick+0x5c>)
 800d7a6:	681c      	ldr	r4, [r3, #0]
 800d7a8:	4b14      	ldr	r3, [pc, #80]	; (800d7fc <HAL_InitTick+0x60>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	0019      	movs	r1, r3
 800d7ae:	23fa      	movs	r3, #250	; 0xfa
 800d7b0:	0098      	lsls	r0, r3, #2
 800d7b2:	f7fb fcc5 	bl	8009140 <__udivsi3>
 800d7b6:	0003      	movs	r3, r0
 800d7b8:	0019      	movs	r1, r3
 800d7ba:	0020      	movs	r0, r4
 800d7bc:	f7fb fcc0 	bl	8009140 <__udivsi3>
 800d7c0:	0003      	movs	r3, r0
 800d7c2:	0018      	movs	r0, r3
 800d7c4:	f000 f92f 	bl	800da26 <HAL_SYSTICK_Config>
 800d7c8:	1e03      	subs	r3, r0, #0
 800d7ca:	d001      	beq.n	800d7d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	e00f      	b.n	800d7f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b03      	cmp	r3, #3
 800d7d4:	d80b      	bhi.n	800d7ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d7d6:	6879      	ldr	r1, [r7, #4]
 800d7d8:	2301      	movs	r3, #1
 800d7da:	425b      	negs	r3, r3
 800d7dc:	2200      	movs	r2, #0
 800d7de:	0018      	movs	r0, r3
 800d7e0:	f000 f8fc 	bl	800d9dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d7e4:	4b06      	ldr	r3, [pc, #24]	; (800d800 <HAL_InitTick+0x64>)
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	e000      	b.n	800d7f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800d7ee:	2301      	movs	r3, #1
}
 800d7f0:	0018      	movs	r0, r3
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	b003      	add	sp, #12
 800d7f6:	bd90      	pop	{r4, r7, pc}
 800d7f8:	200000d4 	.word	0x200000d4
 800d7fc:	200000dc 	.word	0x200000dc
 800d800:	200000d8 	.word	0x200000d8

0800d804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d808:	4b05      	ldr	r3, [pc, #20]	; (800d820 <HAL_IncTick+0x1c>)
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	001a      	movs	r2, r3
 800d80e:	4b05      	ldr	r3, [pc, #20]	; (800d824 <HAL_IncTick+0x20>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	18d2      	adds	r2, r2, r3
 800d814:	4b03      	ldr	r3, [pc, #12]	; (800d824 <HAL_IncTick+0x20>)
 800d816:	601a      	str	r2, [r3, #0]
}
 800d818:	46c0      	nop			; (mov r8, r8)
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	46c0      	nop			; (mov r8, r8)
 800d820:	200000dc 	.word	0x200000dc
 800d824:	20002668 	.word	0x20002668

0800d828 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	af00      	add	r7, sp, #0
  return uwTick;
 800d82c:	4b02      	ldr	r3, [pc, #8]	; (800d838 <HAL_GetTick+0x10>)
 800d82e:	681b      	ldr	r3, [r3, #0]
}
 800d830:	0018      	movs	r0, r3
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	46c0      	nop			; (mov r8, r8)
 800d838:	20002668 	.word	0x20002668

0800d83c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d844:	f7ff fff0 	bl	800d828 <HAL_GetTick>
 800d848:	0003      	movs	r3, r0
 800d84a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	3301      	adds	r3, #1
 800d854:	d005      	beq.n	800d862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d856:	4b0a      	ldr	r3, [pc, #40]	; (800d880 <HAL_Delay+0x44>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	001a      	movs	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	189b      	adds	r3, r3, r2
 800d860:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800d862:	46c0      	nop			; (mov r8, r8)
 800d864:	f7ff ffe0 	bl	800d828 <HAL_GetTick>
 800d868:	0002      	movs	r2, r0
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	1ad3      	subs	r3, r2, r3
 800d86e:	68fa      	ldr	r2, [r7, #12]
 800d870:	429a      	cmp	r2, r3
 800d872:	d8f7      	bhi.n	800d864 <HAL_Delay+0x28>
  {
  }
}
 800d874:	46c0      	nop			; (mov r8, r8)
 800d876:	46c0      	nop			; (mov r8, r8)
 800d878:	46bd      	mov	sp, r7
 800d87a:	b004      	add	sp, #16
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	46c0      	nop			; (mov r8, r8)
 800d880:	200000dc 	.word	0x200000dc

0800d884 <__NVIC_EnableIRQ>:
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	0002      	movs	r2, r0
 800d88c:	1dfb      	adds	r3, r7, #7
 800d88e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d890:	1dfb      	adds	r3, r7, #7
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	2b7f      	cmp	r3, #127	; 0x7f
 800d896:	d809      	bhi.n	800d8ac <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d898:	1dfb      	adds	r3, r7, #7
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	001a      	movs	r2, r3
 800d89e:	231f      	movs	r3, #31
 800d8a0:	401a      	ands	r2, r3
 800d8a2:	4b04      	ldr	r3, [pc, #16]	; (800d8b4 <__NVIC_EnableIRQ+0x30>)
 800d8a4:	2101      	movs	r1, #1
 800d8a6:	4091      	lsls	r1, r2
 800d8a8:	000a      	movs	r2, r1
 800d8aa:	601a      	str	r2, [r3, #0]
}
 800d8ac:	46c0      	nop			; (mov r8, r8)
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	b002      	add	sp, #8
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	e000e100 	.word	0xe000e100

0800d8b8 <__NVIC_SetPriority>:
{
 800d8b8:	b590      	push	{r4, r7, lr}
 800d8ba:	b083      	sub	sp, #12
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	0002      	movs	r2, r0
 800d8c0:	6039      	str	r1, [r7, #0]
 800d8c2:	1dfb      	adds	r3, r7, #7
 800d8c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d8c6:	1dfb      	adds	r3, r7, #7
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	2b7f      	cmp	r3, #127	; 0x7f
 800d8cc:	d828      	bhi.n	800d920 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d8ce:	4a2f      	ldr	r2, [pc, #188]	; (800d98c <__NVIC_SetPriority+0xd4>)
 800d8d0:	1dfb      	adds	r3, r7, #7
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	b25b      	sxtb	r3, r3
 800d8d6:	089b      	lsrs	r3, r3, #2
 800d8d8:	33c0      	adds	r3, #192	; 0xc0
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	589b      	ldr	r3, [r3, r2]
 800d8de:	1dfa      	adds	r2, r7, #7
 800d8e0:	7812      	ldrb	r2, [r2, #0]
 800d8e2:	0011      	movs	r1, r2
 800d8e4:	2203      	movs	r2, #3
 800d8e6:	400a      	ands	r2, r1
 800d8e8:	00d2      	lsls	r2, r2, #3
 800d8ea:	21ff      	movs	r1, #255	; 0xff
 800d8ec:	4091      	lsls	r1, r2
 800d8ee:	000a      	movs	r2, r1
 800d8f0:	43d2      	mvns	r2, r2
 800d8f2:	401a      	ands	r2, r3
 800d8f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	019b      	lsls	r3, r3, #6
 800d8fa:	22ff      	movs	r2, #255	; 0xff
 800d8fc:	401a      	ands	r2, r3
 800d8fe:	1dfb      	adds	r3, r7, #7
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	0018      	movs	r0, r3
 800d904:	2303      	movs	r3, #3
 800d906:	4003      	ands	r3, r0
 800d908:	00db      	lsls	r3, r3, #3
 800d90a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d90c:	481f      	ldr	r0, [pc, #124]	; (800d98c <__NVIC_SetPriority+0xd4>)
 800d90e:	1dfb      	adds	r3, r7, #7
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	b25b      	sxtb	r3, r3
 800d914:	089b      	lsrs	r3, r3, #2
 800d916:	430a      	orrs	r2, r1
 800d918:	33c0      	adds	r3, #192	; 0xc0
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	501a      	str	r2, [r3, r0]
}
 800d91e:	e031      	b.n	800d984 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d920:	4a1b      	ldr	r2, [pc, #108]	; (800d990 <__NVIC_SetPriority+0xd8>)
 800d922:	1dfb      	adds	r3, r7, #7
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	0019      	movs	r1, r3
 800d928:	230f      	movs	r3, #15
 800d92a:	400b      	ands	r3, r1
 800d92c:	3b08      	subs	r3, #8
 800d92e:	089b      	lsrs	r3, r3, #2
 800d930:	3306      	adds	r3, #6
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	18d3      	adds	r3, r2, r3
 800d936:	3304      	adds	r3, #4
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	1dfa      	adds	r2, r7, #7
 800d93c:	7812      	ldrb	r2, [r2, #0]
 800d93e:	0011      	movs	r1, r2
 800d940:	2203      	movs	r2, #3
 800d942:	400a      	ands	r2, r1
 800d944:	00d2      	lsls	r2, r2, #3
 800d946:	21ff      	movs	r1, #255	; 0xff
 800d948:	4091      	lsls	r1, r2
 800d94a:	000a      	movs	r2, r1
 800d94c:	43d2      	mvns	r2, r2
 800d94e:	401a      	ands	r2, r3
 800d950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	019b      	lsls	r3, r3, #6
 800d956:	22ff      	movs	r2, #255	; 0xff
 800d958:	401a      	ands	r2, r3
 800d95a:	1dfb      	adds	r3, r7, #7
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	0018      	movs	r0, r3
 800d960:	2303      	movs	r3, #3
 800d962:	4003      	ands	r3, r0
 800d964:	00db      	lsls	r3, r3, #3
 800d966:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d968:	4809      	ldr	r0, [pc, #36]	; (800d990 <__NVIC_SetPriority+0xd8>)
 800d96a:	1dfb      	adds	r3, r7, #7
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	001c      	movs	r4, r3
 800d970:	230f      	movs	r3, #15
 800d972:	4023      	ands	r3, r4
 800d974:	3b08      	subs	r3, #8
 800d976:	089b      	lsrs	r3, r3, #2
 800d978:	430a      	orrs	r2, r1
 800d97a:	3306      	adds	r3, #6
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	18c3      	adds	r3, r0, r3
 800d980:	3304      	adds	r3, #4
 800d982:	601a      	str	r2, [r3, #0]
}
 800d984:	46c0      	nop			; (mov r8, r8)
 800d986:	46bd      	mov	sp, r7
 800d988:	b003      	add	sp, #12
 800d98a:	bd90      	pop	{r4, r7, pc}
 800d98c:	e000e100 	.word	0xe000e100
 800d990:	e000ed00 	.word	0xe000ed00

0800d994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	1e5a      	subs	r2, r3, #1
 800d9a0:	2380      	movs	r3, #128	; 0x80
 800d9a2:	045b      	lsls	r3, r3, #17
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d301      	bcc.n	800d9ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e010      	b.n	800d9ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d9ac:	4b0a      	ldr	r3, [pc, #40]	; (800d9d8 <SysTick_Config+0x44>)
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	3a01      	subs	r2, #1
 800d9b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	425b      	negs	r3, r3
 800d9b8:	2103      	movs	r1, #3
 800d9ba:	0018      	movs	r0, r3
 800d9bc:	f7ff ff7c 	bl	800d8b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d9c0:	4b05      	ldr	r3, [pc, #20]	; (800d9d8 <SysTick_Config+0x44>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d9c6:	4b04      	ldr	r3, [pc, #16]	; (800d9d8 <SysTick_Config+0x44>)
 800d9c8:	2207      	movs	r2, #7
 800d9ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	0018      	movs	r0, r3
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	b002      	add	sp, #8
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	46c0      	nop			; (mov r8, r8)
 800d9d8:	e000e010 	.word	0xe000e010

0800d9dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60b9      	str	r1, [r7, #8]
 800d9e4:	607a      	str	r2, [r7, #4]
 800d9e6:	210f      	movs	r1, #15
 800d9e8:	187b      	adds	r3, r7, r1
 800d9ea:	1c02      	adds	r2, r0, #0
 800d9ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	187b      	adds	r3, r7, r1
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	b25b      	sxtb	r3, r3
 800d9f6:	0011      	movs	r1, r2
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	f7ff ff5d 	bl	800d8b8 <__NVIC_SetPriority>
}
 800d9fe:	46c0      	nop			; (mov r8, r8)
 800da00:	46bd      	mov	sp, r7
 800da02:	b004      	add	sp, #16
 800da04:	bd80      	pop	{r7, pc}

0800da06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b082      	sub	sp, #8
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	0002      	movs	r2, r0
 800da0e:	1dfb      	adds	r3, r7, #7
 800da10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800da12:	1dfb      	adds	r3, r7, #7
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	b25b      	sxtb	r3, r3
 800da18:	0018      	movs	r0, r3
 800da1a:	f7ff ff33 	bl	800d884 <__NVIC_EnableIRQ>
}
 800da1e:	46c0      	nop			; (mov r8, r8)
 800da20:	46bd      	mov	sp, r7
 800da22:	b002      	add	sp, #8
 800da24:	bd80      	pop	{r7, pc}

0800da26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b082      	sub	sp, #8
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	0018      	movs	r0, r3
 800da32:	f7ff ffaf 	bl	800d994 <SysTick_Config>
 800da36:	0003      	movs	r3, r0
}
 800da38:	0018      	movs	r0, r3
 800da3a:	46bd      	mov	sp, r7
 800da3c:	b002      	add	sp, #8
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b082      	sub	sp, #8
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2221      	movs	r2, #33	; 0x21
 800da4c:	5c9b      	ldrb	r3, [r3, r2]
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	2b02      	cmp	r3, #2
 800da52:	d008      	beq.n	800da66 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2204      	movs	r2, #4
 800da58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2220      	movs	r2, #32
 800da5e:	2100      	movs	r1, #0
 800da60:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800da62:	2301      	movs	r3, #1
 800da64:	e020      	b.n	800daa8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	210e      	movs	r1, #14
 800da72:	438a      	bics	r2, r1
 800da74:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2101      	movs	r1, #1
 800da82:	438a      	bics	r2, r1
 800da84:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da8e:	2101      	movs	r1, #1
 800da90:	4091      	lsls	r1, r2
 800da92:	000a      	movs	r2, r1
 800da94:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2221      	movs	r2, #33	; 0x21
 800da9a:	2101      	movs	r1, #1
 800da9c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2220      	movs	r2, #32
 800daa2:	2100      	movs	r1, #0
 800daa4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	0018      	movs	r0, r3
 800daaa:	46bd      	mov	sp, r7
 800daac:	b002      	add	sp, #8
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dab8:	210f      	movs	r1, #15
 800daba:	187b      	adds	r3, r7, r1
 800dabc:	2200      	movs	r2, #0
 800dabe:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2221      	movs	r2, #33	; 0x21
 800dac4:	5c9b      	ldrb	r3, [r3, r2]
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	2b02      	cmp	r3, #2
 800daca:	d006      	beq.n	800dada <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2204      	movs	r2, #4
 800dad0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800dad2:	187b      	adds	r3, r7, r1
 800dad4:	2201      	movs	r2, #1
 800dad6:	701a      	strb	r2, [r3, #0]
 800dad8:	e028      	b.n	800db2c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	210e      	movs	r1, #14
 800dae6:	438a      	bics	r2, r1
 800dae8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2101      	movs	r1, #1
 800daf6:	438a      	bics	r2, r1
 800daf8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db02:	2101      	movs	r1, #1
 800db04:	4091      	lsls	r1, r2
 800db06:	000a      	movs	r2, r1
 800db08:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2221      	movs	r2, #33	; 0x21
 800db0e:	2101      	movs	r1, #1
 800db10:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2220      	movs	r2, #32
 800db16:	2100      	movs	r1, #0
 800db18:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d004      	beq.n	800db2c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	0010      	movs	r0, r2
 800db2a:	4798      	blx	r3
    } 
  }
  return status;
 800db2c:	230f      	movs	r3, #15
 800db2e:	18fb      	adds	r3, r7, r3
 800db30:	781b      	ldrb	r3, [r3, #0]
}
 800db32:	0018      	movs	r0, r3
 800db34:	46bd      	mov	sp, r7
 800db36:	b004      	add	sp, #16
 800db38:	bd80      	pop	{r7, pc}
	...

0800db3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b086      	sub	sp, #24
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800db46:	2300      	movs	r3, #0
 800db48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800db4a:	e155      	b.n	800ddf8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2101      	movs	r1, #1
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	4091      	lsls	r1, r2
 800db56:	000a      	movs	r2, r1
 800db58:	4013      	ands	r3, r2
 800db5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d100      	bne.n	800db64 <HAL_GPIO_Init+0x28>
 800db62:	e146      	b.n	800ddf2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	2203      	movs	r2, #3
 800db6a:	4013      	ands	r3, r2
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d005      	beq.n	800db7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	2203      	movs	r2, #3
 800db76:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800db78:	2b02      	cmp	r3, #2
 800db7a:	d130      	bne.n	800dbde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	2203      	movs	r2, #3
 800db88:	409a      	lsls	r2, r3
 800db8a:	0013      	movs	r3, r2
 800db8c:	43da      	mvns	r2, r3
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	4013      	ands	r3, r2
 800db92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	68da      	ldr	r2, [r3, #12]
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	005b      	lsls	r3, r3, #1
 800db9c:	409a      	lsls	r2, r3
 800db9e:	0013      	movs	r3, r2
 800dba0:	693a      	ldr	r2, [r7, #16]
 800dba2:	4313      	orrs	r3, r2
 800dba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	693a      	ldr	r2, [r7, #16]
 800dbaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	409a      	lsls	r2, r3
 800dbb8:	0013      	movs	r3, r2
 800dbba:	43da      	mvns	r2, r3
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	091b      	lsrs	r3, r3, #4
 800dbc8:	2201      	movs	r2, #1
 800dbca:	401a      	ands	r2, r3
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	409a      	lsls	r2, r3
 800dbd0:	0013      	movs	r3, r2
 800dbd2:	693a      	ldr	r2, [r7, #16]
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	2203      	movs	r2, #3
 800dbe4:	4013      	ands	r3, r2
 800dbe6:	2b03      	cmp	r3, #3
 800dbe8:	d017      	beq.n	800dc1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	2203      	movs	r2, #3
 800dbf6:	409a      	lsls	r2, r3
 800dbf8:	0013      	movs	r3, r2
 800dbfa:	43da      	mvns	r2, r3
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	4013      	ands	r3, r2
 800dc00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	689a      	ldr	r2, [r3, #8]
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	005b      	lsls	r3, r3, #1
 800dc0a:	409a      	lsls	r2, r3
 800dc0c:	0013      	movs	r3, r2
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	4313      	orrs	r3, r2
 800dc12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	2203      	movs	r2, #3
 800dc20:	4013      	ands	r3, r2
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d123      	bne.n	800dc6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	08da      	lsrs	r2, r3, #3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	3208      	adds	r2, #8
 800dc2e:	0092      	lsls	r2, r2, #2
 800dc30:	58d3      	ldr	r3, [r2, r3]
 800dc32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	2207      	movs	r2, #7
 800dc38:	4013      	ands	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	220f      	movs	r2, #15
 800dc3e:	409a      	lsls	r2, r3
 800dc40:	0013      	movs	r3, r2
 800dc42:	43da      	mvns	r2, r3
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	4013      	ands	r3, r2
 800dc48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	691a      	ldr	r2, [r3, #16]
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2107      	movs	r1, #7
 800dc52:	400b      	ands	r3, r1
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	409a      	lsls	r2, r3
 800dc58:	0013      	movs	r3, r2
 800dc5a:	693a      	ldr	r2, [r7, #16]
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	08da      	lsrs	r2, r3, #3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	3208      	adds	r2, #8
 800dc68:	0092      	lsls	r2, r2, #2
 800dc6a:	6939      	ldr	r1, [r7, #16]
 800dc6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	005b      	lsls	r3, r3, #1
 800dc78:	2203      	movs	r2, #3
 800dc7a:	409a      	lsls	r2, r3
 800dc7c:	0013      	movs	r3, r2
 800dc7e:	43da      	mvns	r2, r3
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	4013      	ands	r3, r2
 800dc84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	2203      	movs	r2, #3
 800dc8c:	401a      	ands	r2, r3
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	005b      	lsls	r3, r3, #1
 800dc92:	409a      	lsls	r2, r3
 800dc94:	0013      	movs	r3, r2
 800dc96:	693a      	ldr	r2, [r7, #16]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	693a      	ldr	r2, [r7, #16]
 800dca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	685a      	ldr	r2, [r3, #4]
 800dca6:	23c0      	movs	r3, #192	; 0xc0
 800dca8:	029b      	lsls	r3, r3, #10
 800dcaa:	4013      	ands	r3, r2
 800dcac:	d100      	bne.n	800dcb0 <HAL_GPIO_Init+0x174>
 800dcae:	e0a0      	b.n	800ddf2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dcb0:	4b57      	ldr	r3, [pc, #348]	; (800de10 <HAL_GPIO_Init+0x2d4>)
 800dcb2:	699a      	ldr	r2, [r3, #24]
 800dcb4:	4b56      	ldr	r3, [pc, #344]	; (800de10 <HAL_GPIO_Init+0x2d4>)
 800dcb6:	2101      	movs	r1, #1
 800dcb8:	430a      	orrs	r2, r1
 800dcba:	619a      	str	r2, [r3, #24]
 800dcbc:	4b54      	ldr	r3, [pc, #336]	; (800de10 <HAL_GPIO_Init+0x2d4>)
 800dcbe:	699b      	ldr	r3, [r3, #24]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	60bb      	str	r3, [r7, #8]
 800dcc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800dcc8:	4a52      	ldr	r2, [pc, #328]	; (800de14 <HAL_GPIO_Init+0x2d8>)
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	089b      	lsrs	r3, r3, #2
 800dcce:	3302      	adds	r3, #2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	589b      	ldr	r3, [r3, r2]
 800dcd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	2203      	movs	r2, #3
 800dcda:	4013      	ands	r3, r2
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	220f      	movs	r2, #15
 800dce0:	409a      	lsls	r2, r3
 800dce2:	0013      	movs	r3, r2
 800dce4:	43da      	mvns	r2, r3
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	4013      	ands	r3, r2
 800dcea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	2390      	movs	r3, #144	; 0x90
 800dcf0:	05db      	lsls	r3, r3, #23
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d019      	beq.n	800dd2a <HAL_GPIO_Init+0x1ee>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4a47      	ldr	r2, [pc, #284]	; (800de18 <HAL_GPIO_Init+0x2dc>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d013      	beq.n	800dd26 <HAL_GPIO_Init+0x1ea>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4a46      	ldr	r2, [pc, #280]	; (800de1c <HAL_GPIO_Init+0x2e0>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d00d      	beq.n	800dd22 <HAL_GPIO_Init+0x1e6>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	4a45      	ldr	r2, [pc, #276]	; (800de20 <HAL_GPIO_Init+0x2e4>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d007      	beq.n	800dd1e <HAL_GPIO_Init+0x1e2>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4a44      	ldr	r2, [pc, #272]	; (800de24 <HAL_GPIO_Init+0x2e8>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d101      	bne.n	800dd1a <HAL_GPIO_Init+0x1de>
 800dd16:	2304      	movs	r3, #4
 800dd18:	e008      	b.n	800dd2c <HAL_GPIO_Init+0x1f0>
 800dd1a:	2305      	movs	r3, #5
 800dd1c:	e006      	b.n	800dd2c <HAL_GPIO_Init+0x1f0>
 800dd1e:	2303      	movs	r3, #3
 800dd20:	e004      	b.n	800dd2c <HAL_GPIO_Init+0x1f0>
 800dd22:	2302      	movs	r3, #2
 800dd24:	e002      	b.n	800dd2c <HAL_GPIO_Init+0x1f0>
 800dd26:	2301      	movs	r3, #1
 800dd28:	e000      	b.n	800dd2c <HAL_GPIO_Init+0x1f0>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	697a      	ldr	r2, [r7, #20]
 800dd2e:	2103      	movs	r1, #3
 800dd30:	400a      	ands	r2, r1
 800dd32:	0092      	lsls	r2, r2, #2
 800dd34:	4093      	lsls	r3, r2
 800dd36:	693a      	ldr	r2, [r7, #16]
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800dd3c:	4935      	ldr	r1, [pc, #212]	; (800de14 <HAL_GPIO_Init+0x2d8>)
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	089b      	lsrs	r3, r3, #2
 800dd42:	3302      	adds	r3, #2
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	693a      	ldr	r2, [r7, #16]
 800dd48:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800dd4a:	4b37      	ldr	r3, [pc, #220]	; (800de28 <HAL_GPIO_Init+0x2ec>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	43da      	mvns	r2, r3
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	4013      	ands	r3, r2
 800dd58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	685a      	ldr	r2, [r3, #4]
 800dd5e:	2380      	movs	r3, #128	; 0x80
 800dd60:	025b      	lsls	r3, r3, #9
 800dd62:	4013      	ands	r3, r2
 800dd64:	d003      	beq.n	800dd6e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800dd66:	693a      	ldr	r2, [r7, #16]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800dd6e:	4b2e      	ldr	r3, [pc, #184]	; (800de28 <HAL_GPIO_Init+0x2ec>)
 800dd70:	693a      	ldr	r2, [r7, #16]
 800dd72:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800dd74:	4b2c      	ldr	r3, [pc, #176]	; (800de28 <HAL_GPIO_Init+0x2ec>)
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	43da      	mvns	r2, r3
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	4013      	ands	r3, r2
 800dd82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	2380      	movs	r3, #128	; 0x80
 800dd8a:	029b      	lsls	r3, r3, #10
 800dd8c:	4013      	ands	r3, r2
 800dd8e:	d003      	beq.n	800dd98 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800dd90:	693a      	ldr	r2, [r7, #16]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	4313      	orrs	r3, r2
 800dd96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800dd98:	4b23      	ldr	r3, [pc, #140]	; (800de28 <HAL_GPIO_Init+0x2ec>)
 800dd9a:	693a      	ldr	r2, [r7, #16]
 800dd9c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800dd9e:	4b22      	ldr	r3, [pc, #136]	; (800de28 <HAL_GPIO_Init+0x2ec>)
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	43da      	mvns	r2, r3
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	4013      	ands	r3, r2
 800ddac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	685a      	ldr	r2, [r3, #4]
 800ddb2:	2380      	movs	r3, #128	; 0x80
 800ddb4:	035b      	lsls	r3, r3, #13
 800ddb6:	4013      	ands	r3, r2
 800ddb8:	d003      	beq.n	800ddc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800ddba:	693a      	ldr	r2, [r7, #16]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	4313      	orrs	r3, r2
 800ddc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800ddc2:	4b19      	ldr	r3, [pc, #100]	; (800de28 <HAL_GPIO_Init+0x2ec>)
 800ddc4:	693a      	ldr	r2, [r7, #16]
 800ddc6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800ddc8:	4b17      	ldr	r3, [pc, #92]	; (800de28 <HAL_GPIO_Init+0x2ec>)
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	43da      	mvns	r2, r3
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	4013      	ands	r3, r2
 800ddd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	685a      	ldr	r2, [r3, #4]
 800dddc:	2380      	movs	r3, #128	; 0x80
 800ddde:	039b      	lsls	r3, r3, #14
 800dde0:	4013      	ands	r3, r2
 800dde2:	d003      	beq.n	800ddec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800dde4:	693a      	ldr	r2, [r7, #16]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	4313      	orrs	r3, r2
 800ddea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800ddec:	4b0e      	ldr	r3, [pc, #56]	; (800de28 <HAL_GPIO_Init+0x2ec>)
 800ddee:	693a      	ldr	r2, [r7, #16]
 800ddf0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	40da      	lsrs	r2, r3
 800de00:	1e13      	subs	r3, r2, #0
 800de02:	d000      	beq.n	800de06 <HAL_GPIO_Init+0x2ca>
 800de04:	e6a2      	b.n	800db4c <HAL_GPIO_Init+0x10>
  } 
}
 800de06:	46c0      	nop			; (mov r8, r8)
 800de08:	46c0      	nop			; (mov r8, r8)
 800de0a:	46bd      	mov	sp, r7
 800de0c:	b006      	add	sp, #24
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	40021000 	.word	0x40021000
 800de14:	40010000 	.word	0x40010000
 800de18:	48000400 	.word	0x48000400
 800de1c:	48000800 	.word	0x48000800
 800de20:	48000c00 	.word	0x48000c00
 800de24:	48001000 	.word	0x48001000
 800de28:	40010400 	.word	0x40010400

0800de2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	0008      	movs	r0, r1
 800de36:	0011      	movs	r1, r2
 800de38:	1cbb      	adds	r3, r7, #2
 800de3a:	1c02      	adds	r2, r0, #0
 800de3c:	801a      	strh	r2, [r3, #0]
 800de3e:	1c7b      	adds	r3, r7, #1
 800de40:	1c0a      	adds	r2, r1, #0
 800de42:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800de44:	1c7b      	adds	r3, r7, #1
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d004      	beq.n	800de56 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800de4c:	1cbb      	adds	r3, r7, #2
 800de4e:	881a      	ldrh	r2, [r3, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800de54:	e003      	b.n	800de5e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800de56:	1cbb      	adds	r3, r7, #2
 800de58:	881a      	ldrh	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800de5e:	46c0      	nop			; (mov r8, r8)
 800de60:	46bd      	mov	sp, r7
 800de62:	b002      	add	sp, #8
 800de64:	bd80      	pop	{r7, pc}

0800de66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b084      	sub	sp, #16
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
 800de6e:	000a      	movs	r2, r1
 800de70:	1cbb      	adds	r3, r7, #2
 800de72:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800de7a:	1cbb      	adds	r3, r7, #2
 800de7c:	881b      	ldrh	r3, [r3, #0]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	4013      	ands	r3, r2
 800de82:	041a      	lsls	r2, r3, #16
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	43db      	mvns	r3, r3
 800de88:	1cb9      	adds	r1, r7, #2
 800de8a:	8809      	ldrh	r1, [r1, #0]
 800de8c:	400b      	ands	r3, r1
 800de8e:	431a      	orrs	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	619a      	str	r2, [r3, #24]
}
 800de94:	46c0      	nop			; (mov r8, r8)
 800de96:	46bd      	mov	sp, r7
 800de98:	b004      	add	sp, #16
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800de9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de9e:	b08b      	sub	sp, #44	; 0x2c
 800dea0:	af06      	add	r7, sp, #24
 800dea2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d101      	bne.n	800deae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800deaa:	2301      	movs	r3, #1
 800deac:	e0ff      	b.n	800e0ae <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4a81      	ldr	r2, [pc, #516]	; (800e0b8 <HAL_PCD_Init+0x21c>)
 800deb2:	5c9b      	ldrb	r3, [r3, r2]
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d108      	bne.n	800decc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	23aa      	movs	r3, #170	; 0xaa
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	2100      	movs	r1, #0
 800dec2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	0018      	movs	r0, r3
 800dec8:	f009 fea2 	bl	8017c10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	4a7a      	ldr	r2, [pc, #488]	; (800e0b8 <HAL_PCD_Init+0x21c>)
 800ded0:	2103      	movs	r1, #3
 800ded2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	0018      	movs	r0, r3
 800deda:	f004 ff0b 	bl	8012cf4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dede:	230f      	movs	r3, #15
 800dee0:	18fb      	adds	r3, r7, r3
 800dee2:	2200      	movs	r2, #0
 800dee4:	701a      	strb	r2, [r3, #0]
 800dee6:	e058      	b.n	800df9a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800dee8:	200f      	movs	r0, #15
 800deea:	183b      	adds	r3, r7, r0
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	6879      	ldr	r1, [r7, #4]
 800def0:	1c5a      	adds	r2, r3, #1
 800def2:	0013      	movs	r3, r2
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	189b      	adds	r3, r3, r2
 800def8:	00db      	lsls	r3, r3, #3
 800defa:	18cb      	adds	r3, r1, r3
 800defc:	3301      	adds	r3, #1
 800defe:	2201      	movs	r2, #1
 800df00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800df02:	183b      	adds	r3, r7, r0
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	6879      	ldr	r1, [r7, #4]
 800df08:	1c5a      	adds	r2, r3, #1
 800df0a:	0013      	movs	r3, r2
 800df0c:	009b      	lsls	r3, r3, #2
 800df0e:	189b      	adds	r3, r3, r2
 800df10:	00db      	lsls	r3, r3, #3
 800df12:	183a      	adds	r2, r7, r0
 800df14:	7812      	ldrb	r2, [r2, #0]
 800df16:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800df18:	0004      	movs	r4, r0
 800df1a:	183b      	adds	r3, r7, r0
 800df1c:	781a      	ldrb	r2, [r3, #0]
 800df1e:	193b      	adds	r3, r7, r4
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	b298      	uxth	r0, r3
 800df24:	6879      	ldr	r1, [r7, #4]
 800df26:	0013      	movs	r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	189b      	adds	r3, r3, r2
 800df2c:	00db      	lsls	r3, r3, #3
 800df2e:	18cb      	adds	r3, r1, r3
 800df30:	3336      	adds	r3, #54	; 0x36
 800df32:	1c02      	adds	r2, r0, #0
 800df34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800df36:	193b      	adds	r3, r7, r4
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	6879      	ldr	r1, [r7, #4]
 800df3c:	1c5a      	adds	r2, r3, #1
 800df3e:	0013      	movs	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	189b      	adds	r3, r3, r2
 800df44:	00db      	lsls	r3, r3, #3
 800df46:	18cb      	adds	r3, r1, r3
 800df48:	3303      	adds	r3, #3
 800df4a:	2200      	movs	r2, #0
 800df4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800df4e:	193b      	adds	r3, r7, r4
 800df50:	781a      	ldrb	r2, [r3, #0]
 800df52:	6879      	ldr	r1, [r7, #4]
 800df54:	0013      	movs	r3, r2
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	189b      	adds	r3, r3, r2
 800df5a:	00db      	lsls	r3, r3, #3
 800df5c:	18cb      	adds	r3, r1, r3
 800df5e:	3338      	adds	r3, #56	; 0x38
 800df60:	2200      	movs	r2, #0
 800df62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800df64:	193b      	adds	r3, r7, r4
 800df66:	781a      	ldrb	r2, [r3, #0]
 800df68:	6879      	ldr	r1, [r7, #4]
 800df6a:	0013      	movs	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	189b      	adds	r3, r3, r2
 800df70:	00db      	lsls	r3, r3, #3
 800df72:	18cb      	adds	r3, r1, r3
 800df74:	333c      	adds	r3, #60	; 0x3c
 800df76:	2200      	movs	r2, #0
 800df78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800df7a:	193b      	adds	r3, r7, r4
 800df7c:	781a      	ldrb	r2, [r3, #0]
 800df7e:	6879      	ldr	r1, [r7, #4]
 800df80:	0013      	movs	r3, r2
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	189b      	adds	r3, r3, r2
 800df86:	00db      	lsls	r3, r3, #3
 800df88:	18cb      	adds	r3, r1, r3
 800df8a:	3340      	adds	r3, #64	; 0x40
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800df90:	193b      	adds	r3, r7, r4
 800df92:	781a      	ldrb	r2, [r3, #0]
 800df94:	193b      	adds	r3, r7, r4
 800df96:	3201      	adds	r2, #1
 800df98:	701a      	strb	r2, [r3, #0]
 800df9a:	210f      	movs	r1, #15
 800df9c:	187b      	adds	r3, r7, r1
 800df9e:	781a      	ldrb	r2, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d39f      	bcc.n	800dee8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dfa8:	187b      	adds	r3, r7, r1
 800dfaa:	2200      	movs	r2, #0
 800dfac:	701a      	strb	r2, [r3, #0]
 800dfae:	e056      	b.n	800e05e <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800dfb0:	240f      	movs	r4, #15
 800dfb2:	193b      	adds	r3, r7, r4
 800dfb4:	781a      	ldrb	r2, [r3, #0]
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	236a      	movs	r3, #106	; 0x6a
 800dfba:	33ff      	adds	r3, #255	; 0xff
 800dfbc:	0019      	movs	r1, r3
 800dfbe:	0013      	movs	r3, r2
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	189b      	adds	r3, r3, r2
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	18c3      	adds	r3, r0, r3
 800dfc8:	185b      	adds	r3, r3, r1
 800dfca:	2200      	movs	r2, #0
 800dfcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dfce:	193b      	adds	r3, r7, r4
 800dfd0:	781a      	ldrb	r2, [r3, #0]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	23b4      	movs	r3, #180	; 0xb4
 800dfd6:	0059      	lsls	r1, r3, #1
 800dfd8:	0013      	movs	r3, r2
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	189b      	adds	r3, r3, r2
 800dfde:	00db      	lsls	r3, r3, #3
 800dfe0:	18c3      	adds	r3, r0, r3
 800dfe2:	185b      	adds	r3, r3, r1
 800dfe4:	193a      	adds	r2, r7, r4
 800dfe6:	7812      	ldrb	r2, [r2, #0]
 800dfe8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dfea:	193b      	adds	r3, r7, r4
 800dfec:	781a      	ldrb	r2, [r3, #0]
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	236c      	movs	r3, #108	; 0x6c
 800dff2:	33ff      	adds	r3, #255	; 0xff
 800dff4:	0019      	movs	r1, r3
 800dff6:	0013      	movs	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	189b      	adds	r3, r3, r2
 800dffc:	00db      	lsls	r3, r3, #3
 800dffe:	18c3      	adds	r3, r0, r3
 800e000:	185b      	adds	r3, r3, r1
 800e002:	2200      	movs	r2, #0
 800e004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e006:	193b      	adds	r3, r7, r4
 800e008:	781a      	ldrb	r2, [r3, #0]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	23bc      	movs	r3, #188	; 0xbc
 800e00e:	0059      	lsls	r1, r3, #1
 800e010:	0013      	movs	r3, r2
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	189b      	adds	r3, r3, r2
 800e016:	00db      	lsls	r3, r3, #3
 800e018:	18c3      	adds	r3, r0, r3
 800e01a:	185b      	adds	r3, r3, r1
 800e01c:	2200      	movs	r2, #0
 800e01e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e020:	193b      	adds	r3, r7, r4
 800e022:	781a      	ldrb	r2, [r3, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	23be      	movs	r3, #190	; 0xbe
 800e028:	0059      	lsls	r1, r3, #1
 800e02a:	0013      	movs	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	189b      	adds	r3, r3, r2
 800e030:	00db      	lsls	r3, r3, #3
 800e032:	18c3      	adds	r3, r0, r3
 800e034:	185b      	adds	r3, r3, r1
 800e036:	2200      	movs	r2, #0
 800e038:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e03a:	193b      	adds	r3, r7, r4
 800e03c:	781a      	ldrb	r2, [r3, #0]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	23c0      	movs	r3, #192	; 0xc0
 800e042:	0059      	lsls	r1, r3, #1
 800e044:	0013      	movs	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	189b      	adds	r3, r3, r2
 800e04a:	00db      	lsls	r3, r3, #3
 800e04c:	18c3      	adds	r3, r0, r3
 800e04e:	185b      	adds	r3, r3, r1
 800e050:	2200      	movs	r2, #0
 800e052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e054:	193b      	adds	r3, r7, r4
 800e056:	781a      	ldrb	r2, [r3, #0]
 800e058:	193b      	adds	r3, r7, r4
 800e05a:	3201      	adds	r2, #1
 800e05c:	701a      	strb	r2, [r3, #0]
 800e05e:	230f      	movs	r3, #15
 800e060:	18fb      	adds	r3, r7, r3
 800e062:	781a      	ldrb	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d3a1      	bcc.n	800dfb0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6818      	ldr	r0, [r3, #0]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	466a      	mov	r2, sp
 800e074:	0011      	movs	r1, r2
 800e076:	001a      	movs	r2, r3
 800e078:	3210      	adds	r2, #16
 800e07a:	ca70      	ldmia	r2!, {r4, r5, r6}
 800e07c:	c170      	stmia	r1!, {r4, r5, r6}
 800e07e:	ca30      	ldmia	r2!, {r4, r5}
 800e080:	c130      	stmia	r1!, {r4, r5}
 800e082:	6859      	ldr	r1, [r3, #4]
 800e084:	689a      	ldr	r2, [r3, #8]
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	f004 fe4e 	bl	8012d28 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2224      	movs	r2, #36	; 0x24
 800e090:	2100      	movs	r1, #0
 800e092:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	4a08      	ldr	r2, [pc, #32]	; (800e0b8 <HAL_PCD_Init+0x21c>)
 800e098:	2101      	movs	r1, #1
 800e09a:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	69db      	ldr	r3, [r3, #28]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d103      	bne.n	800e0ac <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	0018      	movs	r0, r3
 800e0a8:	f001 fd34 	bl	800fb14 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	0018      	movs	r0, r3
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	b005      	add	sp, #20
 800e0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0b6:	46c0      	nop			; (mov r8, r8)
 800e0b8:	000002a9 	.word	0x000002a9

0800e0bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	23aa      	movs	r3, #170	; 0xaa
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	5cd3      	ldrb	r3, [r2, r3]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d101      	bne.n	800e0d4 <HAL_PCD_Start+0x18>
 800e0d0:	2302      	movs	r3, #2
 800e0d2:	e014      	b.n	800e0fe <HAL_PCD_Start+0x42>
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	23aa      	movs	r3, #170	; 0xaa
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	2101      	movs	r1, #1
 800e0dc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	0018      	movs	r0, r3
 800e0e4:	f004 fdf0 	bl	8012cc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	0018      	movs	r0, r3
 800e0ee:	f006 fd4b 	bl	8014b88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	23aa      	movs	r3, #170	; 0xaa
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	0018      	movs	r0, r3
 800e100:	46bd      	mov	sp, r7
 800e102:	b002      	add	sp, #8
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	0018      	movs	r0, r3
 800e116:	f006 fd4d 	bl	8014bb4 <USB_ReadInterrupts>
 800e11a:	0002      	movs	r2, r0
 800e11c:	2380      	movs	r3, #128	; 0x80
 800e11e:	021b      	lsls	r3, r3, #8
 800e120:	401a      	ands	r2, r3
 800e122:	2380      	movs	r3, #128	; 0x80
 800e124:	021b      	lsls	r3, r3, #8
 800e126:	429a      	cmp	r2, r3
 800e128:	d103      	bne.n	800e132 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	0018      	movs	r0, r3
 800e12e:	f000 fbbb 	bl	800e8a8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	0018      	movs	r0, r3
 800e138:	f006 fd3c 	bl	8014bb4 <USB_ReadInterrupts>
 800e13c:	0002      	movs	r2, r0
 800e13e:	2380      	movs	r3, #128	; 0x80
 800e140:	00db      	lsls	r3, r3, #3
 800e142:	401a      	ands	r2, r3
 800e144:	2380      	movs	r3, #128	; 0x80
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	429a      	cmp	r2, r3
 800e14a:	d114      	bne.n	800e176 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2244      	movs	r2, #68	; 0x44
 800e152:	5a9b      	ldrh	r3, [r3, r2]
 800e154:	b29a      	uxth	r2, r3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	49a2      	ldr	r1, [pc, #648]	; (800e3e4 <HAL_PCD_IRQHandler+0x2dc>)
 800e15c:	400a      	ands	r2, r1
 800e15e:	b291      	uxth	r1, r2
 800e160:	2244      	movs	r2, #68	; 0x44
 800e162:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	0018      	movs	r0, r3
 800e168:	f009 fddd 	bl	8017d26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2100      	movs	r1, #0
 800e170:	0018      	movs	r0, r3
 800e172:	f000 f945 	bl	800e400 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	0018      	movs	r0, r3
 800e17c:	f006 fd1a 	bl	8014bb4 <USB_ReadInterrupts>
 800e180:	0002      	movs	r2, r0
 800e182:	2380      	movs	r3, #128	; 0x80
 800e184:	01db      	lsls	r3, r3, #7
 800e186:	401a      	ands	r2, r3
 800e188:	2380      	movs	r3, #128	; 0x80
 800e18a:	01db      	lsls	r3, r3, #7
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d10b      	bne.n	800e1a8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2244      	movs	r2, #68	; 0x44
 800e196:	5a9b      	ldrh	r3, [r3, r2]
 800e198:	b29a      	uxth	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4992      	ldr	r1, [pc, #584]	; (800e3e8 <HAL_PCD_IRQHandler+0x2e0>)
 800e1a0:	400a      	ands	r2, r1
 800e1a2:	b291      	uxth	r1, r2
 800e1a4:	2244      	movs	r2, #68	; 0x44
 800e1a6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	0018      	movs	r0, r3
 800e1ae:	f006 fd01 	bl	8014bb4 <USB_ReadInterrupts>
 800e1b2:	0002      	movs	r2, r0
 800e1b4:	2380      	movs	r3, #128	; 0x80
 800e1b6:	019b      	lsls	r3, r3, #6
 800e1b8:	401a      	ands	r2, r3
 800e1ba:	2380      	movs	r3, #128	; 0x80
 800e1bc:	019b      	lsls	r3, r3, #6
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d10b      	bne.n	800e1da <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2244      	movs	r2, #68	; 0x44
 800e1c8:	5a9b      	ldrh	r3, [r3, r2]
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4986      	ldr	r1, [pc, #536]	; (800e3ec <HAL_PCD_IRQHandler+0x2e4>)
 800e1d2:	400a      	ands	r2, r1
 800e1d4:	b291      	uxth	r1, r2
 800e1d6:	2244      	movs	r2, #68	; 0x44
 800e1d8:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	0018      	movs	r0, r3
 800e1e0:	f006 fce8 	bl	8014bb4 <USB_ReadInterrupts>
 800e1e4:	0002      	movs	r2, r0
 800e1e6:	2380      	movs	r3, #128	; 0x80
 800e1e8:	015b      	lsls	r3, r3, #5
 800e1ea:	401a      	ands	r2, r3
 800e1ec:	2380      	movs	r3, #128	; 0x80
 800e1ee:	015b      	lsls	r3, r3, #5
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d137      	bne.n	800e264 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2240      	movs	r2, #64	; 0x40
 800e1fa:	5a9b      	ldrh	r3, [r3, r2]
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2104      	movs	r1, #4
 800e204:	438a      	bics	r2, r1
 800e206:	b291      	uxth	r1, r2
 800e208:	2240      	movs	r2, #64	; 0x40
 800e20a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2240      	movs	r2, #64	; 0x40
 800e212:	5a9b      	ldrh	r3, [r3, r2]
 800e214:	b29a      	uxth	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2108      	movs	r1, #8
 800e21c:	438a      	bics	r2, r1
 800e21e:	b291      	uxth	r1, r2
 800e220:	2240      	movs	r2, #64	; 0x40
 800e222:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	23b8      	movs	r3, #184	; 0xb8
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	5cd3      	ldrb	r3, [r2, r3]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d109      	bne.n	800e244 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	23b8      	movs	r3, #184	; 0xb8
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	2100      	movs	r1, #0
 800e238:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2100      	movs	r1, #0
 800e23e:	0018      	movs	r0, r3
 800e240:	f001 fc92 	bl	800fb68 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	0018      	movs	r0, r3
 800e248:	f009 fdae 	bl	8017da8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2244      	movs	r2, #68	; 0x44
 800e252:	5a9b      	ldrh	r3, [r3, r2]
 800e254:	b29a      	uxth	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4965      	ldr	r1, [pc, #404]	; (800e3f0 <HAL_PCD_IRQHandler+0x2e8>)
 800e25c:	400a      	ands	r2, r1
 800e25e:	b291      	uxth	r1, r2
 800e260:	2244      	movs	r2, #68	; 0x44
 800e262:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	0018      	movs	r0, r3
 800e26a:	f006 fca3 	bl	8014bb4 <USB_ReadInterrupts>
 800e26e:	0002      	movs	r2, r0
 800e270:	2380      	movs	r3, #128	; 0x80
 800e272:	011b      	lsls	r3, r3, #4
 800e274:	401a      	ands	r2, r3
 800e276:	2380      	movs	r3, #128	; 0x80
 800e278:	011b      	lsls	r3, r3, #4
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d127      	bne.n	800e2ce <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2240      	movs	r2, #64	; 0x40
 800e284:	5a9b      	ldrh	r3, [r3, r2]
 800e286:	b29a      	uxth	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2108      	movs	r1, #8
 800e28e:	430a      	orrs	r2, r1
 800e290:	b291      	uxth	r1, r2
 800e292:	2240      	movs	r2, #64	; 0x40
 800e294:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2244      	movs	r2, #68	; 0x44
 800e29c:	5a9b      	ldrh	r3, [r3, r2]
 800e29e:	b29a      	uxth	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4953      	ldr	r1, [pc, #332]	; (800e3f4 <HAL_PCD_IRQHandler+0x2ec>)
 800e2a6:	400a      	ands	r2, r1
 800e2a8:	b291      	uxth	r1, r2
 800e2aa:	2244      	movs	r2, #68	; 0x44
 800e2ac:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2240      	movs	r2, #64	; 0x40
 800e2b4:	5a9b      	ldrh	r3, [r3, r2]
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2104      	movs	r1, #4
 800e2be:	430a      	orrs	r2, r1
 800e2c0:	b291      	uxth	r1, r2
 800e2c2:	2240      	movs	r2, #64	; 0x40
 800e2c4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	0018      	movs	r0, r3
 800e2ca:	f009 fd51 	bl	8017d70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	0018      	movs	r0, r3
 800e2d4:	f006 fc6e 	bl	8014bb4 <USB_ReadInterrupts>
 800e2d8:	0003      	movs	r3, r0
 800e2da:	2280      	movs	r2, #128	; 0x80
 800e2dc:	4013      	ands	r3, r2
 800e2de:	2b80      	cmp	r3, #128	; 0x80
 800e2e0:	d145      	bne.n	800e36e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2244      	movs	r2, #68	; 0x44
 800e2e8:	5a9b      	ldrh	r3, [r3, r2]
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2180      	movs	r1, #128	; 0x80
 800e2f2:	438a      	bics	r2, r1
 800e2f4:	b291      	uxth	r1, r2
 800e2f6:	2244      	movs	r2, #68	; 0x44
 800e2f8:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	23b8      	movs	r3, #184	; 0xb8
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	5cd3      	ldrb	r3, [r2, r3]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d12f      	bne.n	800e366 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2240      	movs	r2, #64	; 0x40
 800e30c:	5a9b      	ldrh	r3, [r3, r2]
 800e30e:	b29a      	uxth	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2104      	movs	r1, #4
 800e316:	430a      	orrs	r2, r1
 800e318:	b291      	uxth	r1, r2
 800e31a:	2240      	movs	r2, #64	; 0x40
 800e31c:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2240      	movs	r2, #64	; 0x40
 800e324:	5a9b      	ldrh	r3, [r3, r2]
 800e326:	b29a      	uxth	r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2108      	movs	r1, #8
 800e32e:	430a      	orrs	r2, r1
 800e330:	b291      	uxth	r1, r2
 800e332:	2240      	movs	r2, #64	; 0x40
 800e334:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	23b8      	movs	r3, #184	; 0xb8
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	2101      	movs	r1, #1
 800e33e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2254      	movs	r2, #84	; 0x54
 800e346:	5a9b      	ldrh	r3, [r3, r2]
 800e348:	b29b      	uxth	r3, r3
 800e34a:	089b      	lsrs	r3, r3, #2
 800e34c:	223c      	movs	r2, #60	; 0x3c
 800e34e:	4013      	ands	r3, r2
 800e350:	0019      	movs	r1, r3
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	23b9      	movs	r3, #185	; 0xb9
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2101      	movs	r1, #1
 800e35e:	0018      	movs	r0, r3
 800e360:	f001 fc02 	bl	800fb68 <HAL_PCDEx_LPM_Callback>
 800e364:	e003      	b.n	800e36e <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	0018      	movs	r0, r3
 800e36a:	f009 fd01 	bl	8017d70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	0018      	movs	r0, r3
 800e374:	f006 fc1e 	bl	8014bb4 <USB_ReadInterrupts>
 800e378:	0002      	movs	r2, r0
 800e37a:	2380      	movs	r3, #128	; 0x80
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	401a      	ands	r2, r3
 800e380:	2380      	movs	r3, #128	; 0x80
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	429a      	cmp	r2, r3
 800e386:	d10f      	bne.n	800e3a8 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2244      	movs	r2, #68	; 0x44
 800e38e:	5a9b      	ldrh	r3, [r3, r2]
 800e390:	b29a      	uxth	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4918      	ldr	r1, [pc, #96]	; (800e3f8 <HAL_PCD_IRQHandler+0x2f0>)
 800e398:	400a      	ands	r2, r1
 800e39a:	b291      	uxth	r1, r2
 800e39c:	2244      	movs	r2, #68	; 0x44
 800e39e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	0018      	movs	r0, r3
 800e3a4:	f009 fcb0 	bl	8017d08 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	0018      	movs	r0, r3
 800e3ae:	f006 fc01 	bl	8014bb4 <USB_ReadInterrupts>
 800e3b2:	0002      	movs	r2, r0
 800e3b4:	2380      	movs	r3, #128	; 0x80
 800e3b6:	005b      	lsls	r3, r3, #1
 800e3b8:	401a      	ands	r2, r3
 800e3ba:	2380      	movs	r3, #128	; 0x80
 800e3bc:	005b      	lsls	r3, r3, #1
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d10b      	bne.n	800e3da <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2244      	movs	r2, #68	; 0x44
 800e3c8:	5a9b      	ldrh	r3, [r3, r2]
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	490a      	ldr	r1, [pc, #40]	; (800e3fc <HAL_PCD_IRQHandler+0x2f4>)
 800e3d2:	400a      	ands	r2, r1
 800e3d4:	b291      	uxth	r1, r2
 800e3d6:	2244      	movs	r2, #68	; 0x44
 800e3d8:	5299      	strh	r1, [r3, r2]
  }
}
 800e3da:	46c0      	nop			; (mov r8, r8)
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	b002      	add	sp, #8
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	46c0      	nop			; (mov r8, r8)
 800e3e4:	fffffbff 	.word	0xfffffbff
 800e3e8:	ffffbfff 	.word	0xffffbfff
 800e3ec:	ffffdfff 	.word	0xffffdfff
 800e3f0:	ffffefff 	.word	0xffffefff
 800e3f4:	fffff7ff 	.word	0xfffff7ff
 800e3f8:	fffffdff 	.word	0xfffffdff
 800e3fc:	fffffeff 	.word	0xfffffeff

0800e400 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	000a      	movs	r2, r1
 800e40a:	1cfb      	adds	r3, r7, #3
 800e40c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	23aa      	movs	r3, #170	; 0xaa
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	5cd3      	ldrb	r3, [r2, r3]
 800e416:	2b01      	cmp	r3, #1
 800e418:	d101      	bne.n	800e41e <HAL_PCD_SetAddress+0x1e>
 800e41a:	2302      	movs	r3, #2
 800e41c:	e017      	b.n	800e44e <HAL_PCD_SetAddress+0x4e>
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	23aa      	movs	r3, #170	; 0xaa
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	2101      	movs	r1, #1
 800e426:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	1cfa      	adds	r2, r7, #3
 800e42c:	2124      	movs	r1, #36	; 0x24
 800e42e:	7812      	ldrb	r2, [r2, #0]
 800e430:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	1cfb      	adds	r3, r7, #3
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	0019      	movs	r1, r3
 800e43c:	0010      	movs	r0, r2
 800e43e:	f006 fb8f 	bl	8014b60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	23aa      	movs	r3, #170	; 0xaa
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	2100      	movs	r1, #0
 800e44a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	0018      	movs	r0, r3
 800e450:	46bd      	mov	sp, r7
 800e452:	b002      	add	sp, #8
 800e454:	bd80      	pop	{r7, pc}

0800e456 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e456:	b590      	push	{r4, r7, lr}
 800e458:	b085      	sub	sp, #20
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	000c      	movs	r4, r1
 800e460:	0010      	movs	r0, r2
 800e462:	0019      	movs	r1, r3
 800e464:	1cfb      	adds	r3, r7, #3
 800e466:	1c22      	adds	r2, r4, #0
 800e468:	701a      	strb	r2, [r3, #0]
 800e46a:	003b      	movs	r3, r7
 800e46c:	1c02      	adds	r2, r0, #0
 800e46e:	801a      	strh	r2, [r3, #0]
 800e470:	1cbb      	adds	r3, r7, #2
 800e472:	1c0a      	adds	r2, r1, #0
 800e474:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e476:	230b      	movs	r3, #11
 800e478:	18fb      	adds	r3, r7, r3
 800e47a:	2200      	movs	r2, #0
 800e47c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e47e:	1cfb      	adds	r3, r7, #3
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	b25b      	sxtb	r3, r3
 800e484:	2b00      	cmp	r3, #0
 800e486:	da0f      	bge.n	800e4a8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e488:	1cfb      	adds	r3, r7, #3
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	2207      	movs	r2, #7
 800e48e:	4013      	ands	r3, r2
 800e490:	1c5a      	adds	r2, r3, #1
 800e492:	0013      	movs	r3, r2
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	189b      	adds	r3, r3, r2
 800e498:	00db      	lsls	r3, r3, #3
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	18d3      	adds	r3, r2, r3
 800e49e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	705a      	strb	r2, [r3, #1]
 800e4a6:	e00f      	b.n	800e4c8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e4a8:	1cfb      	adds	r3, r7, #3
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	2207      	movs	r2, #7
 800e4ae:	401a      	ands	r2, r3
 800e4b0:	0013      	movs	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	189b      	adds	r3, r3, r2
 800e4b6:	00db      	lsls	r3, r3, #3
 800e4b8:	3369      	adds	r3, #105	; 0x69
 800e4ba:	33ff      	adds	r3, #255	; 0xff
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	18d3      	adds	r3, r2, r3
 800e4c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e4c8:	1cfb      	adds	r3, r7, #3
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	2207      	movs	r2, #7
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	b2da      	uxtb	r2, r3
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e4d6:	003b      	movs	r3, r7
 800e4d8:	881a      	ldrh	r2, [r3, #0]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	1cba      	adds	r2, r7, #2
 800e4e2:	7812      	ldrb	r2, [r2, #0]
 800e4e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	785b      	ldrb	r3, [r3, #1]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d004      	beq.n	800e4f8 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e4f8:	1cbb      	adds	r3, r7, #2
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	2b02      	cmp	r3, #2
 800e4fe:	d102      	bne.n	800e506 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2200      	movs	r2, #0
 800e504:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e506:	687a      	ldr	r2, [r7, #4]
 800e508:	23aa      	movs	r3, #170	; 0xaa
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	5cd3      	ldrb	r3, [r2, r3]
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d101      	bne.n	800e516 <HAL_PCD_EP_Open+0xc0>
 800e512:	2302      	movs	r3, #2
 800e514:	e013      	b.n	800e53e <HAL_PCD_EP_Open+0xe8>
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	23aa      	movs	r3, #170	; 0xaa
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	2101      	movs	r1, #1
 800e51e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	0011      	movs	r1, r2
 800e528:	0018      	movs	r0, r3
 800e52a:	f004 fc29 	bl	8012d80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	23aa      	movs	r3, #170	; 0xaa
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	2100      	movs	r1, #0
 800e536:	54d1      	strb	r1, [r2, r3]

  return ret;
 800e538:	230b      	movs	r3, #11
 800e53a:	18fb      	adds	r3, r7, r3
 800e53c:	781b      	ldrb	r3, [r3, #0]
}
 800e53e:	0018      	movs	r0, r3
 800e540:	46bd      	mov	sp, r7
 800e542:	b005      	add	sp, #20
 800e544:	bd90      	pop	{r4, r7, pc}

0800e546 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e546:	b580      	push	{r7, lr}
 800e548:	b084      	sub	sp, #16
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	6078      	str	r0, [r7, #4]
 800e54e:	000a      	movs	r2, r1
 800e550:	1cfb      	adds	r3, r7, #3
 800e552:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e554:	1cfb      	adds	r3, r7, #3
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	b25b      	sxtb	r3, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	da0f      	bge.n	800e57e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e55e:	1cfb      	adds	r3, r7, #3
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	2207      	movs	r2, #7
 800e564:	4013      	ands	r3, r2
 800e566:	1c5a      	adds	r2, r3, #1
 800e568:	0013      	movs	r3, r2
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	189b      	adds	r3, r3, r2
 800e56e:	00db      	lsls	r3, r3, #3
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	18d3      	adds	r3, r2, r3
 800e574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2201      	movs	r2, #1
 800e57a:	705a      	strb	r2, [r3, #1]
 800e57c:	e00f      	b.n	800e59e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e57e:	1cfb      	adds	r3, r7, #3
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	2207      	movs	r2, #7
 800e584:	401a      	ands	r2, r3
 800e586:	0013      	movs	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	189b      	adds	r3, r3, r2
 800e58c:	00db      	lsls	r3, r3, #3
 800e58e:	3369      	adds	r3, #105	; 0x69
 800e590:	33ff      	adds	r3, #255	; 0xff
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	18d3      	adds	r3, r2, r3
 800e596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2200      	movs	r2, #0
 800e59c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e59e:	1cfb      	adds	r3, r7, #3
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	2207      	movs	r2, #7
 800e5a4:	4013      	ands	r3, r2
 800e5a6:	b2da      	uxtb	r2, r3
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	23aa      	movs	r3, #170	; 0xaa
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	5cd3      	ldrb	r3, [r2, r3]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d101      	bne.n	800e5bc <HAL_PCD_EP_Close+0x76>
 800e5b8:	2302      	movs	r3, #2
 800e5ba:	e011      	b.n	800e5e0 <HAL_PCD_EP_Close+0x9a>
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	23aa      	movs	r3, #170	; 0xaa
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	2101      	movs	r1, #1
 800e5c4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	0011      	movs	r1, r2
 800e5ce:	0018      	movs	r0, r3
 800e5d0:	f004 ff4a 	bl	8013468 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	23aa      	movs	r3, #170	; 0xaa
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	2100      	movs	r1, #0
 800e5dc:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	0018      	movs	r0, r3
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	b004      	add	sp, #16
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b086      	sub	sp, #24
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	607a      	str	r2, [r7, #4]
 800e5f2:	603b      	str	r3, [r7, #0]
 800e5f4:	200b      	movs	r0, #11
 800e5f6:	183b      	adds	r3, r7, r0
 800e5f8:	1c0a      	adds	r2, r1, #0
 800e5fa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e5fc:	0001      	movs	r1, r0
 800e5fe:	187b      	adds	r3, r7, r1
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	2207      	movs	r2, #7
 800e604:	401a      	ands	r2, r3
 800e606:	0013      	movs	r3, r2
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	189b      	adds	r3, r3, r2
 800e60c:	00db      	lsls	r3, r3, #3
 800e60e:	3369      	adds	r3, #105	; 0x69
 800e610:	33ff      	adds	r3, #255	; 0xff
 800e612:	68fa      	ldr	r2, [r7, #12]
 800e614:	18d3      	adds	r3, r2, r3
 800e616:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	683a      	ldr	r2, [r7, #0]
 800e622:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	2200      	movs	r2, #0
 800e628:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	2200      	movs	r2, #0
 800e62e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e630:	187b      	adds	r3, r7, r1
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	2207      	movs	r2, #7
 800e636:	4013      	ands	r3, r2
 800e638:	b2da      	uxtb	r2, r3
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e63e:	187b      	adds	r3, r7, r1
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	2207      	movs	r2, #7
 800e644:	4013      	ands	r3, r2
 800e646:	d107      	bne.n	800e658 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	697a      	ldr	r2, [r7, #20]
 800e64e:	0011      	movs	r1, r2
 800e650:	0018      	movs	r0, r3
 800e652:	f005 f8c9 	bl	80137e8 <USB_EPStartXfer>
 800e656:	e006      	b.n	800e666 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	697a      	ldr	r2, [r7, #20]
 800e65e:	0011      	movs	r1, r2
 800e660:	0018      	movs	r0, r3
 800e662:	f005 f8c1 	bl	80137e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	0018      	movs	r0, r3
 800e66a:	46bd      	mov	sp, r7
 800e66c:	b006      	add	sp, #24
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	000a      	movs	r2, r1
 800e67a:	1cfb      	adds	r3, r7, #3
 800e67c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e67e:	1cfb      	adds	r3, r7, #3
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	2207      	movs	r2, #7
 800e684:	401a      	ands	r2, r3
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	23c2      	movs	r3, #194	; 0xc2
 800e68a:	0059      	lsls	r1, r3, #1
 800e68c:	0013      	movs	r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	189b      	adds	r3, r3, r2
 800e692:	00db      	lsls	r3, r3, #3
 800e694:	18c3      	adds	r3, r0, r3
 800e696:	185b      	adds	r3, r3, r1
 800e698:	681b      	ldr	r3, [r3, #0]
}
 800e69a:	0018      	movs	r0, r3
 800e69c:	46bd      	mov	sp, r7
 800e69e:	b002      	add	sp, #8
 800e6a0:	bd80      	pop	{r7, pc}

0800e6a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b086      	sub	sp, #24
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	60f8      	str	r0, [r7, #12]
 800e6aa:	607a      	str	r2, [r7, #4]
 800e6ac:	603b      	str	r3, [r7, #0]
 800e6ae:	200b      	movs	r0, #11
 800e6b0:	183b      	adds	r3, r7, r0
 800e6b2:	1c0a      	adds	r2, r1, #0
 800e6b4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e6b6:	183b      	adds	r3, r7, r0
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2207      	movs	r2, #7
 800e6bc:	4013      	ands	r3, r2
 800e6be:	1c5a      	adds	r2, r3, #1
 800e6c0:	0013      	movs	r3, r2
 800e6c2:	009b      	lsls	r3, r3, #2
 800e6c4:	189b      	adds	r3, r3, r2
 800e6c6:	00db      	lsls	r3, r3, #3
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	18d3      	adds	r3, r2, r3
 800e6cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	2224      	movs	r2, #36	; 0x24
 800e6de:	2101      	movs	r1, #1
 800e6e0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e6f4:	183b      	adds	r3, r7, r0
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	2207      	movs	r2, #7
 800e6fa:	4013      	ands	r3, r2
 800e6fc:	b2da      	uxtb	r2, r3
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e702:	183b      	adds	r3, r7, r0
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	2207      	movs	r2, #7
 800e708:	4013      	ands	r3, r2
 800e70a:	d107      	bne.n	800e71c <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	697a      	ldr	r2, [r7, #20]
 800e712:	0011      	movs	r1, r2
 800e714:	0018      	movs	r0, r3
 800e716:	f005 f867 	bl	80137e8 <USB_EPStartXfer>
 800e71a:	e006      	b.n	800e72a <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	697a      	ldr	r2, [r7, #20]
 800e722:	0011      	movs	r1, r2
 800e724:	0018      	movs	r0, r3
 800e726:	f005 f85f 	bl	80137e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	0018      	movs	r0, r3
 800e72e:	46bd      	mov	sp, r7
 800e730:	b006      	add	sp, #24
 800e732:	bd80      	pop	{r7, pc}

0800e734 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	000a      	movs	r2, r1
 800e73e:	1cfb      	adds	r3, r7, #3
 800e740:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e742:	1cfb      	adds	r3, r7, #3
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	2207      	movs	r2, #7
 800e748:	401a      	ands	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d901      	bls.n	800e756 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	e046      	b.n	800e7e4 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e756:	1cfb      	adds	r3, r7, #3
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	b25b      	sxtb	r3, r3
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	da0f      	bge.n	800e780 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e760:	1cfb      	adds	r3, r7, #3
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2207      	movs	r2, #7
 800e766:	4013      	ands	r3, r2
 800e768:	1c5a      	adds	r2, r3, #1
 800e76a:	0013      	movs	r3, r2
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	189b      	adds	r3, r3, r2
 800e770:	00db      	lsls	r3, r3, #3
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	18d3      	adds	r3, r2, r3
 800e776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2201      	movs	r2, #1
 800e77c:	705a      	strb	r2, [r3, #1]
 800e77e:	e00d      	b.n	800e79c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e780:	1cfb      	adds	r3, r7, #3
 800e782:	781a      	ldrb	r2, [r3, #0]
 800e784:	0013      	movs	r3, r2
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	189b      	adds	r3, r3, r2
 800e78a:	00db      	lsls	r3, r3, #3
 800e78c:	3369      	adds	r3, #105	; 0x69
 800e78e:	33ff      	adds	r3, #255	; 0xff
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	18d3      	adds	r3, r2, r3
 800e794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2200      	movs	r2, #0
 800e79a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e7a2:	1cfb      	adds	r3, r7, #3
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	2207      	movs	r2, #7
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	23aa      	movs	r3, #170	; 0xaa
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	5cd3      	ldrb	r3, [r2, r3]
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d101      	bne.n	800e7c0 <HAL_PCD_EP_SetStall+0x8c>
 800e7bc:	2302      	movs	r3, #2
 800e7be:	e011      	b.n	800e7e4 <HAL_PCD_EP_SetStall+0xb0>
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	23aa      	movs	r3, #170	; 0xaa
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	2101      	movs	r1, #1
 800e7c8:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	0011      	movs	r1, r2
 800e7d2:	0018      	movs	r0, r3
 800e7d4:	f006 f8c2 	bl	801495c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	23aa      	movs	r3, #170	; 0xaa
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	2100      	movs	r1, #0
 800e7e0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e7e2:	2300      	movs	r3, #0
}
 800e7e4:	0018      	movs	r0, r3
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	b004      	add	sp, #16
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	000a      	movs	r2, r1
 800e7f6:	1cfb      	adds	r3, r7, #3
 800e7f8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e7fa:	1cfb      	adds	r3, r7, #3
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	220f      	movs	r2, #15
 800e800:	401a      	ands	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	429a      	cmp	r2, r3
 800e808:	d901      	bls.n	800e80e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	e048      	b.n	800e8a0 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e80e:	1cfb      	adds	r3, r7, #3
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	b25b      	sxtb	r3, r3
 800e814:	2b00      	cmp	r3, #0
 800e816:	da0f      	bge.n	800e838 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e818:	1cfb      	adds	r3, r7, #3
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	2207      	movs	r2, #7
 800e81e:	4013      	ands	r3, r2
 800e820:	1c5a      	adds	r2, r3, #1
 800e822:	0013      	movs	r3, r2
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	189b      	adds	r3, r3, r2
 800e828:	00db      	lsls	r3, r3, #3
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	18d3      	adds	r3, r2, r3
 800e82e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2201      	movs	r2, #1
 800e834:	705a      	strb	r2, [r3, #1]
 800e836:	e00f      	b.n	800e858 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e838:	1cfb      	adds	r3, r7, #3
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	2207      	movs	r2, #7
 800e83e:	401a      	ands	r2, r3
 800e840:	0013      	movs	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	189b      	adds	r3, r3, r2
 800e846:	00db      	lsls	r3, r3, #3
 800e848:	3369      	adds	r3, #105	; 0x69
 800e84a:	33ff      	adds	r3, #255	; 0xff
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	18d3      	adds	r3, r2, r3
 800e850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2200      	movs	r2, #0
 800e856:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2200      	movs	r2, #0
 800e85c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e85e:	1cfb      	adds	r3, r7, #3
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	2207      	movs	r2, #7
 800e864:	4013      	ands	r3, r2
 800e866:	b2da      	uxtb	r2, r3
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	23aa      	movs	r3, #170	; 0xaa
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	5cd3      	ldrb	r3, [r2, r3]
 800e874:	2b01      	cmp	r3, #1
 800e876:	d101      	bne.n	800e87c <HAL_PCD_EP_ClrStall+0x90>
 800e878:	2302      	movs	r3, #2
 800e87a:	e011      	b.n	800e8a0 <HAL_PCD_EP_ClrStall+0xb4>
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	23aa      	movs	r3, #170	; 0xaa
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	2101      	movs	r1, #1
 800e884:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	0011      	movs	r1, r2
 800e88e:	0018      	movs	r0, r3
 800e890:	f006 f8b4 	bl	80149fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	23aa      	movs	r3, #170	; 0xaa
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	2100      	movs	r1, #0
 800e89c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	0018      	movs	r0, r3
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	b004      	add	sp, #16
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800e8a8:	b5b0      	push	{r4, r5, r7, lr}
 800e8aa:	b096      	sub	sp, #88	; 0x58
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e8b0:	f000 fbd8 	bl	800f064 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	2056      	movs	r0, #86	; 0x56
 800e8ba:	183b      	adds	r3, r7, r0
 800e8bc:	2144      	movs	r1, #68	; 0x44
 800e8be:	5a52      	ldrh	r2, [r2, r1]
 800e8c0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800e8c2:	183b      	adds	r3, r7, r0
 800e8c4:	881b      	ldrh	r3, [r3, #0]
 800e8c6:	b2da      	uxtb	r2, r3
 800e8c8:	2455      	movs	r4, #85	; 0x55
 800e8ca:	193b      	adds	r3, r7, r4
 800e8cc:	210f      	movs	r1, #15
 800e8ce:	400a      	ands	r2, r1
 800e8d0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800e8d2:	193b      	adds	r3, r7, r4
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d000      	beq.n	800e8dc <PCD_EP_ISR_Handler+0x34>
 800e8da:	e179      	b.n	800ebd0 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800e8dc:	183b      	adds	r3, r7, r0
 800e8de:	881b      	ldrh	r3, [r3, #0]
 800e8e0:	2210      	movs	r2, #16
 800e8e2:	4013      	ands	r3, r2
 800e8e4:	d154      	bne.n	800e990 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	881b      	ldrh	r3, [r3, #0]
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	200e      	movs	r0, #14
 800e8f0:	183b      	adds	r3, r7, r0
 800e8f2:	49af      	ldr	r1, [pc, #700]	; (800ebb0 <PCD_EP_ISR_Handler+0x308>)
 800e8f4:	400a      	ands	r2, r1
 800e8f6:	801a      	strh	r2, [r3, #0]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	183a      	adds	r2, r7, r0
 800e8fe:	8812      	ldrh	r2, [r2, #0]
 800e900:	49ac      	ldr	r1, [pc, #688]	; (800ebb4 <PCD_EP_ISR_Handler+0x30c>)
 800e902:	430a      	orrs	r2, r1
 800e904:	b292      	uxth	r2, r2
 800e906:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	3328      	adds	r3, #40	; 0x28
 800e90c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2250      	movs	r2, #80	; 0x50
 800e914:	5a9b      	ldrh	r3, [r3, r2]
 800e916:	b29b      	uxth	r3, r3
 800e918:	001a      	movs	r2, r3
 800e91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	00db      	lsls	r3, r3, #3
 800e920:	18d2      	adds	r2, r2, r3
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	18d3      	adds	r3, r2, r3
 800e928:	4aa3      	ldr	r2, [pc, #652]	; (800ebb8 <PCD_EP_ISR_Handler+0x310>)
 800e92a:	4694      	mov	ip, r2
 800e92c:	4463      	add	r3, ip
 800e92e:	881b      	ldrh	r3, [r3, #0]
 800e930:	059b      	lsls	r3, r3, #22
 800e932:	0d9a      	lsrs	r2, r3, #22
 800e934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e936:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800e938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e93a:	695a      	ldr	r2, [r3, #20]
 800e93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e93e:	69db      	ldr	r3, [r3, #28]
 800e940:	18d2      	adds	r2, r2, r3
 800e942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e944:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2100      	movs	r1, #0
 800e94a:	0018      	movs	r0, r3
 800e94c:	f009 f9be 	bl	8017ccc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2224      	movs	r2, #36	; 0x24
 800e954:	5c9b      	ldrb	r3, [r3, r2]
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d101      	bne.n	800e960 <PCD_EP_ISR_Handler+0xb8>
 800e95c:	f000 fb82 	bl	800f064 <PCD_EP_ISR_Handler+0x7bc>
 800e960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e962:	699b      	ldr	r3, [r3, #24]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d001      	beq.n	800e96c <PCD_EP_ISR_Handler+0xc4>
 800e968:	f000 fb7c 	bl	800f064 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2224      	movs	r2, #36	; 0x24
 800e970:	5c9b      	ldrb	r3, [r3, r2]
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2280      	movs	r2, #128	; 0x80
 800e976:	4252      	negs	r2, r2
 800e978:	4313      	orrs	r3, r2
 800e97a:	b2da      	uxtb	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	b291      	uxth	r1, r2
 800e982:	224c      	movs	r2, #76	; 0x4c
 800e984:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2224      	movs	r2, #36	; 0x24
 800e98a:	2100      	movs	r1, #0
 800e98c:	5499      	strb	r1, [r3, r2]
 800e98e:	e369      	b.n	800f064 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	3369      	adds	r3, #105	; 0x69
 800e994:	33ff      	adds	r3, #255	; 0xff
 800e996:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	2152      	movs	r1, #82	; 0x52
 800e99e:	187b      	adds	r3, r7, r1
 800e9a0:	8812      	ldrh	r2, [r2, #0]
 800e9a2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800e9a4:	187b      	adds	r3, r7, r1
 800e9a6:	881a      	ldrh	r2, [r3, #0]
 800e9a8:	2380      	movs	r3, #128	; 0x80
 800e9aa:	011b      	lsls	r3, r3, #4
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	d037      	beq.n	800ea20 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	2250      	movs	r2, #80	; 0x50
 800e9b6:	5a9b      	ldrh	r3, [r3, r2]
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	001a      	movs	r2, r3
 800e9bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	00db      	lsls	r3, r3, #3
 800e9c2:	18d2      	adds	r2, r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	18d3      	adds	r3, r2, r3
 800e9ca:	4a7c      	ldr	r2, [pc, #496]	; (800ebbc <PCD_EP_ISR_Handler+0x314>)
 800e9cc:	4694      	mov	ip, r2
 800e9ce:	4463      	add	r3, ip
 800e9d0:	881b      	ldrh	r3, [r3, #0]
 800e9d2:	059b      	lsls	r3, r3, #22
 800e9d4:	0d9a      	lsrs	r2, r3, #22
 800e9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6818      	ldr	r0, [r3, #0]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	22ac      	movs	r2, #172	; 0xac
 800e9e2:	0092      	lsls	r2, r2, #2
 800e9e4:	1899      	adds	r1, r3, r2
 800e9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800e9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	f006 f932 	bl	8014c58 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	881b      	ldrh	r3, [r3, #0]
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	2010      	movs	r0, #16
 800e9fe:	183b      	adds	r3, r7, r0
 800ea00:	496f      	ldr	r1, [pc, #444]	; (800ebc0 <PCD_EP_ISR_Handler+0x318>)
 800ea02:	400a      	ands	r2, r1
 800ea04:	801a      	strh	r2, [r3, #0]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	183a      	adds	r2, r7, r0
 800ea0c:	8812      	ldrh	r2, [r2, #0]
 800ea0e:	2180      	movs	r1, #128	; 0x80
 800ea10:	430a      	orrs	r2, r1
 800ea12:	b292      	uxth	r2, r2
 800ea14:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	0018      	movs	r0, r3
 800ea1a:	f009 f921 	bl	8017c60 <HAL_PCD_SetupStageCallback>
 800ea1e:	e321      	b.n	800f064 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ea20:	2352      	movs	r3, #82	; 0x52
 800ea22:	18fb      	adds	r3, r7, r3
 800ea24:	2200      	movs	r2, #0
 800ea26:	5e9b      	ldrsh	r3, [r3, r2]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	db00      	blt.n	800ea2e <PCD_EP_ISR_Handler+0x186>
 800ea2c:	e31a      	b.n	800f064 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	881b      	ldrh	r3, [r3, #0]
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	201e      	movs	r0, #30
 800ea38:	183b      	adds	r3, r7, r0
 800ea3a:	4961      	ldr	r1, [pc, #388]	; (800ebc0 <PCD_EP_ISR_Handler+0x318>)
 800ea3c:	400a      	ands	r2, r1
 800ea3e:	801a      	strh	r2, [r3, #0]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	183a      	adds	r2, r7, r0
 800ea46:	8812      	ldrh	r2, [r2, #0]
 800ea48:	2180      	movs	r1, #128	; 0x80
 800ea4a:	430a      	orrs	r2, r1
 800ea4c:	b292      	uxth	r2, r2
 800ea4e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2250      	movs	r2, #80	; 0x50
 800ea56:	5a9b      	ldrh	r3, [r3, r2]
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	001a      	movs	r2, r3
 800ea5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	00db      	lsls	r3, r3, #3
 800ea62:	18d2      	adds	r2, r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	18d3      	adds	r3, r2, r3
 800ea6a:	4a54      	ldr	r2, [pc, #336]	; (800ebbc <PCD_EP_ISR_Handler+0x314>)
 800ea6c:	4694      	mov	ip, r2
 800ea6e:	4463      	add	r3, ip
 800ea70:	881b      	ldrh	r3, [r3, #0]
 800ea72:	059b      	lsls	r3, r3, #22
 800ea74:	0d9a      	lsrs	r2, r3, #22
 800ea76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea78:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800ea7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea7c:	69db      	ldr	r3, [r3, #28]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d01a      	beq.n	800eab8 <PCD_EP_ISR_Handler+0x210>
 800ea82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea84:	695b      	ldr	r3, [r3, #20]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d016      	beq.n	800eab8 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6818      	ldr	r0, [r3, #0]
 800ea8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea90:	6959      	ldr	r1, [r3, #20]
 800ea92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea94:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ea96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea98:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	f006 f8dc 	bl	8014c58 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800eaa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa2:	695a      	ldr	r2, [r3, #20]
 800eaa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa6:	69db      	ldr	r3, [r3, #28]
 800eaa8:	18d2      	adds	r2, r2, r3
 800eaaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2100      	movs	r1, #0
 800eab2:	0018      	movs	r0, r3
 800eab4:	f009 f8e9 	bl	8017c8a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	001a      	movs	r2, r3
 800eac2:	2380      	movs	r3, #128	; 0x80
 800eac4:	011b      	lsls	r3, r3, #4
 800eac6:	4013      	ands	r3, r2
 800eac8:	d000      	beq.n	800eacc <PCD_EP_ISR_Handler+0x224>
 800eaca:	e2cb      	b.n	800f064 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	61bb      	str	r3, [r7, #24]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2250      	movs	r2, #80	; 0x50
 800ead8:	5a9b      	ldrh	r3, [r3, r2]
 800eada:	b29b      	uxth	r3, r3
 800eadc:	001a      	movs	r2, r3
 800eade:	69bb      	ldr	r3, [r7, #24]
 800eae0:	189b      	adds	r3, r3, r2
 800eae2:	61bb      	str	r3, [r7, #24]
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	4a35      	ldr	r2, [pc, #212]	; (800ebbc <PCD_EP_ISR_Handler+0x314>)
 800eae8:	4694      	mov	ip, r2
 800eaea:	4463      	add	r3, ip
 800eaec:	617b      	str	r3, [r7, #20]
 800eaee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf0:	691b      	ldr	r3, [r3, #16]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d110      	bne.n	800eb18 <PCD_EP_ISR_Handler+0x270>
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	881b      	ldrh	r3, [r3, #0]
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	4a31      	ldr	r2, [pc, #196]	; (800ebc4 <PCD_EP_ISR_Handler+0x31c>)
 800eafe:	4013      	ands	r3, r2
 800eb00:	b29a      	uxth	r2, r3
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	801a      	strh	r2, [r3, #0]
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	881b      	ldrh	r3, [r3, #0]
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	4a29      	ldr	r2, [pc, #164]	; (800ebb4 <PCD_EP_ISR_Handler+0x30c>)
 800eb0e:	4313      	orrs	r3, r2
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	801a      	strh	r2, [r3, #0]
 800eb16:	e02b      	b.n	800eb70 <PCD_EP_ISR_Handler+0x2c8>
 800eb18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb1a:	691b      	ldr	r3, [r3, #16]
 800eb1c:	2b3e      	cmp	r3, #62	; 0x3e
 800eb1e:	d812      	bhi.n	800eb46 <PCD_EP_ISR_Handler+0x29e>
 800eb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb22:	691b      	ldr	r3, [r3, #16]
 800eb24:	085b      	lsrs	r3, r3, #1
 800eb26:	647b      	str	r3, [r7, #68]	; 0x44
 800eb28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb2a:	691b      	ldr	r3, [r3, #16]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	4013      	ands	r3, r2
 800eb30:	d002      	beq.n	800eb38 <PCD_EP_ISR_Handler+0x290>
 800eb32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb34:	3301      	adds	r3, #1
 800eb36:	647b      	str	r3, [r7, #68]	; 0x44
 800eb38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	029b      	lsls	r3, r3, #10
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	801a      	strh	r2, [r3, #0]
 800eb44:	e014      	b.n	800eb70 <PCD_EP_ISR_Handler+0x2c8>
 800eb46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	095b      	lsrs	r3, r3, #5
 800eb4c:	647b      	str	r3, [r7, #68]	; 0x44
 800eb4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	221f      	movs	r2, #31
 800eb54:	4013      	ands	r3, r2
 800eb56:	d102      	bne.n	800eb5e <PCD_EP_ISR_Handler+0x2b6>
 800eb58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	647b      	str	r3, [r7, #68]	; 0x44
 800eb5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	029b      	lsls	r3, r3, #10
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	4a13      	ldr	r2, [pc, #76]	; (800ebb4 <PCD_EP_ISR_Handler+0x30c>)
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	b29a      	uxth	r2, r3
 800eb78:	2012      	movs	r0, #18
 800eb7a:	183b      	adds	r3, r7, r0
 800eb7c:	4912      	ldr	r1, [pc, #72]	; (800ebc8 <PCD_EP_ISR_Handler+0x320>)
 800eb7e:	400a      	ands	r2, r1
 800eb80:	801a      	strh	r2, [r3, #0]
 800eb82:	183b      	adds	r3, r7, r0
 800eb84:	183a      	adds	r2, r7, r0
 800eb86:	8812      	ldrh	r2, [r2, #0]
 800eb88:	2180      	movs	r1, #128	; 0x80
 800eb8a:	0149      	lsls	r1, r1, #5
 800eb8c:	404a      	eors	r2, r1
 800eb8e:	801a      	strh	r2, [r3, #0]
 800eb90:	183b      	adds	r3, r7, r0
 800eb92:	183a      	adds	r2, r7, r0
 800eb94:	8812      	ldrh	r2, [r2, #0]
 800eb96:	2180      	movs	r1, #128	; 0x80
 800eb98:	0189      	lsls	r1, r1, #6
 800eb9a:	404a      	eors	r2, r1
 800eb9c:	801a      	strh	r2, [r3, #0]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	183a      	adds	r2, r7, r0
 800eba4:	8812      	ldrh	r2, [r2, #0]
 800eba6:	4909      	ldr	r1, [pc, #36]	; (800ebcc <PCD_EP_ISR_Handler+0x324>)
 800eba8:	430a      	orrs	r2, r1
 800ebaa:	b292      	uxth	r2, r2
 800ebac:	801a      	strh	r2, [r3, #0]
 800ebae:	e259      	b.n	800f064 <PCD_EP_ISR_Handler+0x7bc>
 800ebb0:	ffff8f0f 	.word	0xffff8f0f
 800ebb4:	ffff8000 	.word	0xffff8000
 800ebb8:	00000402 	.word	0x00000402
 800ebbc:	00000406 	.word	0x00000406
 800ebc0:	00000f8f 	.word	0x00000f8f
 800ebc4:	ffff83ff 	.word	0xffff83ff
 800ebc8:	ffffbf8f 	.word	0xffffbf8f
 800ebcc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	001a      	movs	r2, r3
 800ebd6:	2055      	movs	r0, #85	; 0x55
 800ebd8:	183b      	adds	r3, r7, r0
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	18d2      	adds	r2, r2, r3
 800ebe0:	2152      	movs	r1, #82	; 0x52
 800ebe2:	187b      	adds	r3, r7, r1
 800ebe4:	8812      	ldrh	r2, [r2, #0]
 800ebe6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ebe8:	187b      	adds	r3, r7, r1
 800ebea:	2200      	movs	r2, #0
 800ebec:	5e9b      	ldrsh	r3, [r3, r2]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	db00      	blt.n	800ebf4 <PCD_EP_ISR_Handler+0x34c>
 800ebf2:	e0fa      	b.n	800edea <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	001a      	movs	r2, r3
 800ebfa:	183b      	adds	r3, r7, r0
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	18d3      	adds	r3, r2, r3
 800ec02:	881b      	ldrh	r3, [r3, #0]
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	2450      	movs	r4, #80	; 0x50
 800ec08:	193b      	adds	r3, r7, r4
 800ec0a:	49cf      	ldr	r1, [pc, #828]	; (800ef48 <PCD_EP_ISR_Handler+0x6a0>)
 800ec0c:	400a      	ands	r2, r1
 800ec0e:	801a      	strh	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	001a      	movs	r2, r3
 800ec16:	183b      	adds	r3, r7, r0
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	18d3      	adds	r3, r2, r3
 800ec1e:	193a      	adds	r2, r7, r4
 800ec20:	8812      	ldrh	r2, [r2, #0]
 800ec22:	2180      	movs	r1, #128	; 0x80
 800ec24:	430a      	orrs	r2, r1
 800ec26:	b292      	uxth	r2, r2
 800ec28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ec2a:	183b      	adds	r3, r7, r0
 800ec2c:	781a      	ldrb	r2, [r3, #0]
 800ec2e:	0013      	movs	r3, r2
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	189b      	adds	r3, r3, r2
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	3369      	adds	r3, #105	; 0x69
 800ec38:	33ff      	adds	r3, #255	; 0xff
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	18d3      	adds	r3, r2, r3
 800ec3e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ec40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec42:	7b1b      	ldrb	r3, [r3, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d125      	bne.n	800ec94 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2250      	movs	r2, #80	; 0x50
 800ec4e:	5a9b      	ldrh	r3, [r3, r2]
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	001a      	movs	r2, r3
 800ec54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	00db      	lsls	r3, r3, #3
 800ec5a:	18d2      	adds	r2, r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	18d3      	adds	r3, r2, r3
 800ec62:	4aba      	ldr	r2, [pc, #744]	; (800ef4c <PCD_EP_ISR_Handler+0x6a4>)
 800ec64:	4694      	mov	ip, r2
 800ec66:	4463      	add	r3, ip
 800ec68:	881a      	ldrh	r2, [r3, #0]
 800ec6a:	2448      	movs	r4, #72	; 0x48
 800ec6c:	193b      	adds	r3, r7, r4
 800ec6e:	0592      	lsls	r2, r2, #22
 800ec70:	0d92      	lsrs	r2, r2, #22
 800ec72:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800ec74:	193b      	adds	r3, r7, r4
 800ec76:	881b      	ldrh	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d100      	bne.n	800ec7e <PCD_EP_ISR_Handler+0x3d6>
 800ec7c:	e08d      	b.n	800ed9a <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6818      	ldr	r0, [r3, #0]
 800ec82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec84:	6959      	ldr	r1, [r3, #20]
 800ec86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec88:	88da      	ldrh	r2, [r3, #6]
 800ec8a:	193b      	adds	r3, r7, r4
 800ec8c:	881b      	ldrh	r3, [r3, #0]
 800ec8e:	f005 ffe3 	bl	8014c58 <USB_ReadPMA>
 800ec92:	e082      	b.n	800ed9a <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ec94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec96:	78db      	ldrb	r3, [r3, #3]
 800ec98:	2b02      	cmp	r3, #2
 800ec9a:	d10c      	bne.n	800ecb6 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ec9c:	2348      	movs	r3, #72	; 0x48
 800ec9e:	18fc      	adds	r4, r7, r3
 800eca0:	2352      	movs	r3, #82	; 0x52
 800eca2:	18fb      	adds	r3, r7, r3
 800eca4:	881a      	ldrh	r2, [r3, #0]
 800eca6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	0018      	movs	r0, r3
 800ecac:	f000 f9ee 	bl	800f08c <HAL_PCD_EP_DB_Receive>
 800ecb0:	0003      	movs	r3, r0
 800ecb2:	8023      	strh	r3, [r4, #0]
 800ecb4:	e071      	b.n	800ed9a <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	001a      	movs	r2, r3
 800ecbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	18d3      	adds	r3, r2, r3
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	204a      	movs	r0, #74	; 0x4a
 800ecca:	183b      	adds	r3, r7, r0
 800eccc:	49a0      	ldr	r1, [pc, #640]	; (800ef50 <PCD_EP_ISR_Handler+0x6a8>)
 800ecce:	400a      	ands	r2, r1
 800ecd0:	801a      	strh	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	001a      	movs	r2, r3
 800ecd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	009b      	lsls	r3, r3, #2
 800ecde:	18d3      	adds	r3, r2, r3
 800ece0:	183a      	adds	r2, r7, r0
 800ece2:	8812      	ldrh	r2, [r2, #0]
 800ece4:	499b      	ldr	r1, [pc, #620]	; (800ef54 <PCD_EP_ISR_Handler+0x6ac>)
 800ece6:	430a      	orrs	r2, r1
 800ece8:	b292      	uxth	r2, r2
 800ecea:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	001a      	movs	r2, r3
 800ecf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	18d3      	adds	r3, r2, r3
 800ecfa:	881b      	ldrh	r3, [r3, #0]
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	001a      	movs	r2, r3
 800ed00:	2380      	movs	r3, #128	; 0x80
 800ed02:	01db      	lsls	r3, r3, #7
 800ed04:	4013      	ands	r3, r2
 800ed06:	d024      	beq.n	800ed52 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2250      	movs	r2, #80	; 0x50
 800ed0e:	5a9b      	ldrh	r3, [r3, r2]
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	001a      	movs	r2, r3
 800ed14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	00db      	lsls	r3, r3, #3
 800ed1a:	18d2      	adds	r2, r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	18d3      	adds	r3, r2, r3
 800ed22:	4a8d      	ldr	r2, [pc, #564]	; (800ef58 <PCD_EP_ISR_Handler+0x6b0>)
 800ed24:	4694      	mov	ip, r2
 800ed26:	4463      	add	r3, ip
 800ed28:	881a      	ldrh	r2, [r3, #0]
 800ed2a:	2448      	movs	r4, #72	; 0x48
 800ed2c:	193b      	adds	r3, r7, r4
 800ed2e:	0592      	lsls	r2, r2, #22
 800ed30:	0d92      	lsrs	r2, r2, #22
 800ed32:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800ed34:	193b      	adds	r3, r7, r4
 800ed36:	881b      	ldrh	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d02e      	beq.n	800ed9a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6818      	ldr	r0, [r3, #0]
 800ed40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed42:	6959      	ldr	r1, [r3, #20]
 800ed44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed46:	891a      	ldrh	r2, [r3, #8]
 800ed48:	193b      	adds	r3, r7, r4
 800ed4a:	881b      	ldrh	r3, [r3, #0]
 800ed4c:	f005 ff84 	bl	8014c58 <USB_ReadPMA>
 800ed50:	e023      	b.n	800ed9a <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2250      	movs	r2, #80	; 0x50
 800ed58:	5a9b      	ldrh	r3, [r3, r2]
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	001a      	movs	r2, r3
 800ed5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	00db      	lsls	r3, r3, #3
 800ed64:	18d2      	adds	r2, r2, r3
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	18d3      	adds	r3, r2, r3
 800ed6c:	4a77      	ldr	r2, [pc, #476]	; (800ef4c <PCD_EP_ISR_Handler+0x6a4>)
 800ed6e:	4694      	mov	ip, r2
 800ed70:	4463      	add	r3, ip
 800ed72:	881a      	ldrh	r2, [r3, #0]
 800ed74:	2448      	movs	r4, #72	; 0x48
 800ed76:	193b      	adds	r3, r7, r4
 800ed78:	0592      	lsls	r2, r2, #22
 800ed7a:	0d92      	lsrs	r2, r2, #22
 800ed7c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800ed7e:	193b      	adds	r3, r7, r4
 800ed80:	881b      	ldrh	r3, [r3, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d009      	beq.n	800ed9a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6818      	ldr	r0, [r3, #0]
 800ed8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed8c:	6959      	ldr	r1, [r3, #20]
 800ed8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed90:	895a      	ldrh	r2, [r3, #10]
 800ed92:	193b      	adds	r3, r7, r4
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	f005 ff5f 	bl	8014c58 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ed9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed9c:	69da      	ldr	r2, [r3, #28]
 800ed9e:	2148      	movs	r1, #72	; 0x48
 800eda0:	187b      	adds	r3, r7, r1
 800eda2:	881b      	ldrh	r3, [r3, #0]
 800eda4:	18d2      	adds	r2, r2, r3
 800eda6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eda8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800edaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edac:	695a      	ldr	r2, [r3, #20]
 800edae:	187b      	adds	r3, r7, r1
 800edb0:	881b      	ldrh	r3, [r3, #0]
 800edb2:	18d2      	adds	r2, r2, r3
 800edb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edb6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800edb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edba:	699b      	ldr	r3, [r3, #24]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d005      	beq.n	800edcc <PCD_EP_ISR_Handler+0x524>
 800edc0:	187b      	adds	r3, r7, r1
 800edc2:	881a      	ldrh	r2, [r3, #0]
 800edc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edc6:	691b      	ldr	r3, [r3, #16]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d207      	bcs.n	800eddc <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800edcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edce:	781a      	ldrb	r2, [r3, #0]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	0011      	movs	r1, r2
 800edd4:	0018      	movs	r0, r3
 800edd6:	f008 ff58 	bl	8017c8a <HAL_PCD_DataOutStageCallback>
 800edda:	e006      	b.n	800edea <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ede2:	0011      	movs	r1, r2
 800ede4:	0018      	movs	r0, r3
 800ede6:	f004 fcff 	bl	80137e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800edea:	2452      	movs	r4, #82	; 0x52
 800edec:	193b      	adds	r3, r7, r4
 800edee:	881b      	ldrh	r3, [r3, #0]
 800edf0:	2280      	movs	r2, #128	; 0x80
 800edf2:	4013      	ands	r3, r2
 800edf4:	d100      	bne.n	800edf8 <PCD_EP_ISR_Handler+0x550>
 800edf6:	e135      	b.n	800f064 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 800edf8:	2055      	movs	r0, #85	; 0x55
 800edfa:	183b      	adds	r3, r7, r0
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	1c5a      	adds	r2, r3, #1
 800ee00:	0013      	movs	r3, r2
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	189b      	adds	r3, r3, r2
 800ee06:	00db      	lsls	r3, r3, #3
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	18d3      	adds	r3, r2, r3
 800ee0c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	001a      	movs	r2, r3
 800ee14:	183b      	adds	r3, r7, r0
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	18d3      	adds	r3, r2, r3
 800ee1c:	881b      	ldrh	r3, [r3, #0]
 800ee1e:	b29a      	uxth	r2, r3
 800ee20:	2542      	movs	r5, #66	; 0x42
 800ee22:	197b      	adds	r3, r7, r5
 800ee24:	494d      	ldr	r1, [pc, #308]	; (800ef5c <PCD_EP_ISR_Handler+0x6b4>)
 800ee26:	400a      	ands	r2, r1
 800ee28:	801a      	strh	r2, [r3, #0]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	001a      	movs	r2, r3
 800ee30:	183b      	adds	r3, r7, r0
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	18d3      	adds	r3, r2, r3
 800ee38:	197a      	adds	r2, r7, r5
 800ee3a:	8812      	ldrh	r2, [r2, #0]
 800ee3c:	4948      	ldr	r1, [pc, #288]	; (800ef60 <PCD_EP_ISR_Handler+0x6b8>)
 800ee3e:	430a      	orrs	r2, r1
 800ee40:	b292      	uxth	r2, r2
 800ee42:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 800ee44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee46:	78db      	ldrb	r3, [r3, #3]
 800ee48:	2b02      	cmp	r3, #2
 800ee4a:	d100      	bne.n	800ee4e <PCD_EP_ISR_Handler+0x5a6>
 800ee4c:	e0ad      	b.n	800efaa <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 800ee4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee50:	2200      	movs	r2, #0
 800ee52:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ee54:	193b      	adds	r3, r7, r4
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	2240      	movs	r2, #64	; 0x40
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	d046      	beq.n	800eeec <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ee5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee60:	785b      	ldrb	r3, [r3, #1]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d125      	bne.n	800eeb2 <PCD_EP_ISR_Handler+0x60a>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2250      	movs	r2, #80	; 0x50
 800ee72:	5a9b      	ldrh	r3, [r3, r2]
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	001a      	movs	r2, r3
 800ee78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee7a:	189b      	adds	r3, r3, r2
 800ee7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ee7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	00da      	lsls	r2, r3, #3
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	18d3      	adds	r3, r2, r3
 800ee88:	4a33      	ldr	r2, [pc, #204]	; (800ef58 <PCD_EP_ISR_Handler+0x6b0>)
 800ee8a:	4694      	mov	ip, r2
 800ee8c:	4463      	add	r3, ip
 800ee8e:	623b      	str	r3, [r7, #32]
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	881b      	ldrh	r3, [r3, #0]
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	4a33      	ldr	r2, [pc, #204]	; (800ef64 <PCD_EP_ISR_Handler+0x6bc>)
 800ee98:	4013      	ands	r3, r2
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	6a3b      	ldr	r3, [r7, #32]
 800ee9e:	801a      	strh	r2, [r3, #0]
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	4a2e      	ldr	r2, [pc, #184]	; (800ef60 <PCD_EP_ISR_Handler+0x6b8>)
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	6a3b      	ldr	r3, [r7, #32]
 800eeae:	801a      	strh	r2, [r3, #0]
 800eeb0:	e073      	b.n	800ef9a <PCD_EP_ISR_Handler+0x6f2>
 800eeb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeb4:	785b      	ldrb	r3, [r3, #1]
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d16f      	bne.n	800ef9a <PCD_EP_ISR_Handler+0x6f2>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2250      	movs	r2, #80	; 0x50
 800eec6:	5a9b      	ldrh	r3, [r3, r2]
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	001a      	movs	r2, r3
 800eecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eece:	189b      	adds	r3, r3, r2
 800eed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	00da      	lsls	r2, r3, #3
 800eed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeda:	18d3      	adds	r3, r2, r3
 800eedc:	4a1e      	ldr	r2, [pc, #120]	; (800ef58 <PCD_EP_ISR_Handler+0x6b0>)
 800eede:	4694      	mov	ip, r2
 800eee0:	4463      	add	r3, ip
 800eee2:	62bb      	str	r3, [r7, #40]	; 0x28
 800eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee6:	2200      	movs	r2, #0
 800eee8:	801a      	strh	r2, [r3, #0]
 800eeea:	e056      	b.n	800ef9a <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eef4:	785b      	ldrb	r3, [r3, #1]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d136      	bne.n	800ef68 <PCD_EP_ISR_Handler+0x6c0>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	637b      	str	r3, [r7, #52]	; 0x34
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	2250      	movs	r2, #80	; 0x50
 800ef06:	5a9b      	ldrh	r3, [r3, r2]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	001a      	movs	r2, r3
 800ef0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef0e:	189b      	adds	r3, r3, r2
 800ef10:	637b      	str	r3, [r7, #52]	; 0x34
 800ef12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	00da      	lsls	r2, r3, #3
 800ef18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef1a:	18d3      	adds	r3, r2, r3
 800ef1c:	4a0b      	ldr	r2, [pc, #44]	; (800ef4c <PCD_EP_ISR_Handler+0x6a4>)
 800ef1e:	4694      	mov	ip, r2
 800ef20:	4463      	add	r3, ip
 800ef22:	633b      	str	r3, [r7, #48]	; 0x30
 800ef24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef26:	881b      	ldrh	r3, [r3, #0]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	4a0e      	ldr	r2, [pc, #56]	; (800ef64 <PCD_EP_ISR_Handler+0x6bc>)
 800ef2c:	4013      	ands	r3, r2
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef32:	801a      	strh	r2, [r3, #0]
 800ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef36:	881b      	ldrh	r3, [r3, #0]
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	4a09      	ldr	r2, [pc, #36]	; (800ef60 <PCD_EP_ISR_Handler+0x6b8>)
 800ef3c:	4313      	orrs	r3, r2
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef42:	801a      	strh	r2, [r3, #0]
 800ef44:	e029      	b.n	800ef9a <PCD_EP_ISR_Handler+0x6f2>
 800ef46:	46c0      	nop			; (mov r8, r8)
 800ef48:	00000f8f 	.word	0x00000f8f
 800ef4c:	00000406 	.word	0x00000406
 800ef50:	ffff8f8f 	.word	0xffff8f8f
 800ef54:	ffff80c0 	.word	0xffff80c0
 800ef58:	00000402 	.word	0x00000402
 800ef5c:	ffff8f0f 	.word	0xffff8f0f
 800ef60:	ffff8000 	.word	0xffff8000
 800ef64:	ffff83ff 	.word	0xffff83ff
 800ef68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef6a:	785b      	ldrb	r3, [r3, #1]
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d114      	bne.n	800ef9a <PCD_EP_ISR_Handler+0x6f2>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2250      	movs	r2, #80	; 0x50
 800ef76:	5a9b      	ldrh	r3, [r3, r2]
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	001a      	movs	r2, r3
 800ef7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef7e:	189b      	adds	r3, r3, r2
 800ef80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	00da      	lsls	r2, r3, #3
 800ef88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef8a:	18d3      	adds	r3, r2, r3
 800ef8c:	4a3d      	ldr	r2, [pc, #244]	; (800f084 <PCD_EP_ISR_Handler+0x7dc>)
 800ef8e:	4694      	mov	ip, r2
 800ef90:	4463      	add	r3, ip
 800ef92:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef96:	2200      	movs	r2, #0
 800ef98:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ef9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef9c:	781a      	ldrb	r2, [r3, #0]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	0011      	movs	r1, r2
 800efa2:	0018      	movs	r0, r3
 800efa4:	f008 fe92 	bl	8017ccc <HAL_PCD_DataInStageCallback>
 800efa8:	e05c      	b.n	800f064 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800efaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efac:	78db      	ldrb	r3, [r3, #3]
 800efae:	2b02      	cmp	r3, #2
 800efb0:	d150      	bne.n	800f054 <PCD_EP_ISR_Handler+0x7ac>
 800efb2:	2352      	movs	r3, #82	; 0x52
 800efb4:	18fb      	adds	r3, r7, r3
 800efb6:	881a      	ldrh	r2, [r3, #0]
 800efb8:	2380      	movs	r3, #128	; 0x80
 800efba:	005b      	lsls	r3, r3, #1
 800efbc:	4013      	ands	r3, r2
 800efbe:	d149      	bne.n	800f054 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	2250      	movs	r2, #80	; 0x50
 800efc6:	5a9b      	ldrh	r3, [r3, r2]
 800efc8:	b29b      	uxth	r3, r3
 800efca:	001a      	movs	r2, r3
 800efcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	00db      	lsls	r3, r3, #3
 800efd2:	18d2      	adds	r2, r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	18d3      	adds	r3, r2, r3
 800efda:	4a2b      	ldr	r2, [pc, #172]	; (800f088 <PCD_EP_ISR_Handler+0x7e0>)
 800efdc:	4694      	mov	ip, r2
 800efde:	4463      	add	r3, ip
 800efe0:	881a      	ldrh	r2, [r3, #0]
 800efe2:	2140      	movs	r1, #64	; 0x40
 800efe4:	187b      	adds	r3, r7, r1
 800efe6:	0592      	lsls	r2, r2, #22
 800efe8:	0d92      	lsrs	r2, r2, #22
 800efea:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 800efec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efee:	699a      	ldr	r2, [r3, #24]
 800eff0:	187b      	adds	r3, r7, r1
 800eff2:	881b      	ldrh	r3, [r3, #0]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d907      	bls.n	800f008 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 800eff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800effa:	699a      	ldr	r2, [r3, #24]
 800effc:	187b      	adds	r3, r7, r1
 800effe:	881b      	ldrh	r3, [r3, #0]
 800f000:	1ad2      	subs	r2, r2, r3
 800f002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f004:	619a      	str	r2, [r3, #24]
 800f006:	e002      	b.n	800f00e <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 800f008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f00a:	2200      	movs	r2, #0
 800f00c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800f00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f010:	699b      	ldr	r3, [r3, #24]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d107      	bne.n	800f026 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f018:	781a      	ldrb	r2, [r3, #0]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	0011      	movs	r1, r2
 800f01e:	0018      	movs	r0, r3
 800f020:	f008 fe54 	bl	8017ccc <HAL_PCD_DataInStageCallback>
 800f024:	e01e      	b.n	800f064 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800f026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f028:	695a      	ldr	r2, [r3, #20]
 800f02a:	2140      	movs	r1, #64	; 0x40
 800f02c:	187b      	adds	r3, r7, r1
 800f02e:	881b      	ldrh	r3, [r3, #0]
 800f030:	18d2      	adds	r2, r2, r3
 800f032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f034:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800f036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f038:	69da      	ldr	r2, [r3, #28]
 800f03a:	187b      	adds	r3, r7, r1
 800f03c:	881b      	ldrh	r3, [r3, #0]
 800f03e:	18d2      	adds	r2, r2, r3
 800f040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f042:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f04a:	0011      	movs	r1, r2
 800f04c:	0018      	movs	r0, r3
 800f04e:	f004 fbcb 	bl	80137e8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800f052:	e007      	b.n	800f064 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800f054:	2352      	movs	r3, #82	; 0x52
 800f056:	18fb      	adds	r3, r7, r3
 800f058:	881a      	ldrh	r2, [r3, #0]
 800f05a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	0018      	movs	r0, r3
 800f060:	f000 f930 	bl	800f2c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	2244      	movs	r2, #68	; 0x44
 800f06a:	5a9b      	ldrh	r3, [r3, r2]
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	b21b      	sxth	r3, r3
 800f070:	2b00      	cmp	r3, #0
 800f072:	da01      	bge.n	800f078 <PCD_EP_ISR_Handler+0x7d0>
 800f074:	f7ff fc1e 	bl	800e8b4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800f078:	2300      	movs	r3, #0
}
 800f07a:	0018      	movs	r0, r3
 800f07c:	46bd      	mov	sp, r7
 800f07e:	b016      	add	sp, #88	; 0x58
 800f080:	bdb0      	pop	{r4, r5, r7, pc}
 800f082:	46c0      	nop			; (mov r8, r8)
 800f084:	00000406 	.word	0x00000406
 800f088:	00000402 	.word	0x00000402

0800f08c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f08c:	b590      	push	{r4, r7, lr}
 800f08e:	b089      	sub	sp, #36	; 0x24
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	1dbb      	adds	r3, r7, #6
 800f098:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f09a:	1dbb      	adds	r3, r7, #6
 800f09c:	881a      	ldrh	r2, [r3, #0]
 800f09e:	2380      	movs	r3, #128	; 0x80
 800f0a0:	01db      	lsls	r3, r3, #7
 800f0a2:	4013      	ands	r3, r2
 800f0a4:	d100      	bne.n	800f0a8 <HAL_PCD_EP_DB_Receive+0x1c>
 800f0a6:	e07d      	b.n	800f1a4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2250      	movs	r2, #80	; 0x50
 800f0ae:	5a9b      	ldrh	r3, [r3, r2]
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	001a      	movs	r2, r3
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	00db      	lsls	r3, r3, #3
 800f0ba:	18d2      	adds	r2, r2, r3
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	18d3      	adds	r3, r2, r3
 800f0c2:	4a7a      	ldr	r2, [pc, #488]	; (800f2ac <HAL_PCD_EP_DB_Receive+0x220>)
 800f0c4:	4694      	mov	ip, r2
 800f0c6:	4463      	add	r3, ip
 800f0c8:	881a      	ldrh	r2, [r3, #0]
 800f0ca:	211a      	movs	r1, #26
 800f0cc:	187b      	adds	r3, r7, r1
 800f0ce:	0592      	lsls	r2, r2, #22
 800f0d0:	0d92      	lsrs	r2, r2, #22
 800f0d2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	699a      	ldr	r2, [r3, #24]
 800f0d8:	187b      	adds	r3, r7, r1
 800f0da:	881b      	ldrh	r3, [r3, #0]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d307      	bcc.n	800f0f0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	699a      	ldr	r2, [r3, #24]
 800f0e4:	187b      	adds	r3, r7, r1
 800f0e6:	881b      	ldrh	r3, [r3, #0]
 800f0e8:	1ad2      	subs	r2, r2, r3
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	619a      	str	r2, [r3, #24]
 800f0ee:	e002      	b.n	800f0f6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d121      	bne.n	800f142 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	001a      	movs	r2, r3
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	18d3      	adds	r3, r2, r3
 800f10c:	881b      	ldrh	r3, [r3, #0]
 800f10e:	b29a      	uxth	r2, r3
 800f110:	2018      	movs	r0, #24
 800f112:	183b      	adds	r3, r7, r0
 800f114:	4966      	ldr	r1, [pc, #408]	; (800f2b0 <HAL_PCD_EP_DB_Receive+0x224>)
 800f116:	400a      	ands	r2, r1
 800f118:	801a      	strh	r2, [r3, #0]
 800f11a:	183b      	adds	r3, r7, r0
 800f11c:	183a      	adds	r2, r7, r0
 800f11e:	8812      	ldrh	r2, [r2, #0]
 800f120:	2180      	movs	r1, #128	; 0x80
 800f122:	0189      	lsls	r1, r1, #6
 800f124:	404a      	eors	r2, r1
 800f126:	801a      	strh	r2, [r3, #0]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	001a      	movs	r2, r3
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	18d3      	adds	r3, r2, r3
 800f136:	183a      	adds	r2, r7, r0
 800f138:	8812      	ldrh	r2, [r2, #0]
 800f13a:	495e      	ldr	r1, [pc, #376]	; (800f2b4 <HAL_PCD_EP_DB_Receive+0x228>)
 800f13c:	430a      	orrs	r2, r1
 800f13e:	b292      	uxth	r2, r2
 800f140:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f142:	1dbb      	adds	r3, r7, #6
 800f144:	881b      	ldrh	r3, [r3, #0]
 800f146:	2240      	movs	r2, #64	; 0x40
 800f148:	4013      	ands	r3, r2
 800f14a:	d01a      	beq.n	800f182 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	001a      	movs	r2, r3
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	009b      	lsls	r3, r3, #2
 800f158:	18d3      	adds	r3, r2, r3
 800f15a:	881b      	ldrh	r3, [r3, #0]
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	2016      	movs	r0, #22
 800f160:	183b      	adds	r3, r7, r0
 800f162:	4955      	ldr	r1, [pc, #340]	; (800f2b8 <HAL_PCD_EP_DB_Receive+0x22c>)
 800f164:	400a      	ands	r2, r1
 800f166:	801a      	strh	r2, [r3, #0]
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	001a      	movs	r2, r3
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	18d3      	adds	r3, r2, r3
 800f176:	183a      	adds	r2, r7, r0
 800f178:	8812      	ldrh	r2, [r2, #0]
 800f17a:	4950      	ldr	r1, [pc, #320]	; (800f2bc <HAL_PCD_EP_DB_Receive+0x230>)
 800f17c:	430a      	orrs	r2, r1
 800f17e:	b292      	uxth	r2, r2
 800f180:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f182:	241a      	movs	r4, #26
 800f184:	193b      	adds	r3, r7, r4
 800f186:	881b      	ldrh	r3, [r3, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d100      	bne.n	800f18e <HAL_PCD_EP_DB_Receive+0x102>
 800f18c:	e086      	b.n	800f29c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6818      	ldr	r0, [r3, #0]
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	6959      	ldr	r1, [r3, #20]
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	891a      	ldrh	r2, [r3, #8]
 800f19a:	193b      	adds	r3, r7, r4
 800f19c:	881b      	ldrh	r3, [r3, #0]
 800f19e:	f005 fd5b 	bl	8014c58 <USB_ReadPMA>
 800f1a2:	e07b      	b.n	800f29c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2250      	movs	r2, #80	; 0x50
 800f1aa:	5a9b      	ldrh	r3, [r3, r2]
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	001a      	movs	r2, r3
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	00db      	lsls	r3, r3, #3
 800f1b6:	18d2      	adds	r2, r2, r3
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	18d3      	adds	r3, r2, r3
 800f1be:	4a40      	ldr	r2, [pc, #256]	; (800f2c0 <HAL_PCD_EP_DB_Receive+0x234>)
 800f1c0:	4694      	mov	ip, r2
 800f1c2:	4463      	add	r3, ip
 800f1c4:	881a      	ldrh	r2, [r3, #0]
 800f1c6:	211a      	movs	r1, #26
 800f1c8:	187b      	adds	r3, r7, r1
 800f1ca:	0592      	lsls	r2, r2, #22
 800f1cc:	0d92      	lsrs	r2, r2, #22
 800f1ce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	699a      	ldr	r2, [r3, #24]
 800f1d4:	187b      	adds	r3, r7, r1
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d307      	bcc.n	800f1ec <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	699a      	ldr	r2, [r3, #24]
 800f1e0:	187b      	adds	r3, r7, r1
 800f1e2:	881b      	ldrh	r3, [r3, #0]
 800f1e4:	1ad2      	subs	r2, r2, r3
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	619a      	str	r2, [r3, #24]
 800f1ea:	e002      	b.n	800f1f2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	699b      	ldr	r3, [r3, #24]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d121      	bne.n	800f23e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	001a      	movs	r2, r3
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	18d3      	adds	r3, r2, r3
 800f208:	881b      	ldrh	r3, [r3, #0]
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	201e      	movs	r0, #30
 800f20e:	183b      	adds	r3, r7, r0
 800f210:	4927      	ldr	r1, [pc, #156]	; (800f2b0 <HAL_PCD_EP_DB_Receive+0x224>)
 800f212:	400a      	ands	r2, r1
 800f214:	801a      	strh	r2, [r3, #0]
 800f216:	183b      	adds	r3, r7, r0
 800f218:	183a      	adds	r2, r7, r0
 800f21a:	8812      	ldrh	r2, [r2, #0]
 800f21c:	2180      	movs	r1, #128	; 0x80
 800f21e:	0189      	lsls	r1, r1, #6
 800f220:	404a      	eors	r2, r1
 800f222:	801a      	strh	r2, [r3, #0]
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	001a      	movs	r2, r3
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	18d3      	adds	r3, r2, r3
 800f232:	183a      	adds	r2, r7, r0
 800f234:	8812      	ldrh	r2, [r2, #0]
 800f236:	491f      	ldr	r1, [pc, #124]	; (800f2b4 <HAL_PCD_EP_DB_Receive+0x228>)
 800f238:	430a      	orrs	r2, r1
 800f23a:	b292      	uxth	r2, r2
 800f23c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800f23e:	1dbb      	adds	r3, r7, #6
 800f240:	881b      	ldrh	r3, [r3, #0]
 800f242:	2240      	movs	r2, #64	; 0x40
 800f244:	4013      	ands	r3, r2
 800f246:	d11a      	bne.n	800f27e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	001a      	movs	r2, r3
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	18d3      	adds	r3, r2, r3
 800f256:	881b      	ldrh	r3, [r3, #0]
 800f258:	b29a      	uxth	r2, r3
 800f25a:	201c      	movs	r0, #28
 800f25c:	183b      	adds	r3, r7, r0
 800f25e:	4916      	ldr	r1, [pc, #88]	; (800f2b8 <HAL_PCD_EP_DB_Receive+0x22c>)
 800f260:	400a      	ands	r2, r1
 800f262:	801a      	strh	r2, [r3, #0]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	001a      	movs	r2, r3
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	18d3      	adds	r3, r2, r3
 800f272:	183a      	adds	r2, r7, r0
 800f274:	8812      	ldrh	r2, [r2, #0]
 800f276:	4911      	ldr	r1, [pc, #68]	; (800f2bc <HAL_PCD_EP_DB_Receive+0x230>)
 800f278:	430a      	orrs	r2, r1
 800f27a:	b292      	uxth	r2, r2
 800f27c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f27e:	241a      	movs	r4, #26
 800f280:	193b      	adds	r3, r7, r4
 800f282:	881b      	ldrh	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d009      	beq.n	800f29c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	6818      	ldr	r0, [r3, #0]
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	6959      	ldr	r1, [r3, #20]
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	895a      	ldrh	r2, [r3, #10]
 800f294:	193b      	adds	r3, r7, r4
 800f296:	881b      	ldrh	r3, [r3, #0]
 800f298:	f005 fcde 	bl	8014c58 <USB_ReadPMA>
    }
  }

  return count;
 800f29c:	231a      	movs	r3, #26
 800f29e:	18fb      	adds	r3, r7, r3
 800f2a0:	881b      	ldrh	r3, [r3, #0]
}
 800f2a2:	0018      	movs	r0, r3
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	b009      	add	sp, #36	; 0x24
 800f2a8:	bd90      	pop	{r4, r7, pc}
 800f2aa:	46c0      	nop			; (mov r8, r8)
 800f2ac:	00000402 	.word	0x00000402
 800f2b0:	ffffbf8f 	.word	0xffffbf8f
 800f2b4:	ffff8080 	.word	0xffff8080
 800f2b8:	ffff8f8f 	.word	0xffff8f8f
 800f2bc:	ffff80c0 	.word	0xffff80c0
 800f2c0:	00000406 	.word	0x00000406

0800f2c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b0a2      	sub	sp, #136	; 0x88
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	1dbb      	adds	r3, r7, #6
 800f2d0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f2d2:	1dbb      	adds	r3, r7, #6
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	2240      	movs	r2, #64	; 0x40
 800f2d8:	4013      	ands	r3, r2
 800f2da:	d100      	bne.n	800f2de <HAL_PCD_EP_DB_Transmit+0x1a>
 800f2dc:	e1c8      	b.n	800f670 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2250      	movs	r2, #80	; 0x50
 800f2e4:	5a9b      	ldrh	r3, [r3, r2]
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	001a      	movs	r2, r3
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	00db      	lsls	r3, r3, #3
 800f2f0:	18d2      	adds	r2, r2, r3
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	18d3      	adds	r3, r2, r3
 800f2f8:	4ad7      	ldr	r2, [pc, #860]	; (800f658 <HAL_PCD_EP_DB_Transmit+0x394>)
 800f2fa:	4694      	mov	ip, r2
 800f2fc:	4463      	add	r3, ip
 800f2fe:	881a      	ldrh	r2, [r3, #0]
 800f300:	214e      	movs	r1, #78	; 0x4e
 800f302:	187b      	adds	r3, r7, r1
 800f304:	0592      	lsls	r2, r2, #22
 800f306:	0d92      	lsrs	r2, r2, #22
 800f308:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	699a      	ldr	r2, [r3, #24]
 800f30e:	187b      	adds	r3, r7, r1
 800f310:	881b      	ldrh	r3, [r3, #0]
 800f312:	429a      	cmp	r2, r3
 800f314:	d907      	bls.n	800f326 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	699a      	ldr	r2, [r3, #24]
 800f31a:	187b      	adds	r3, r7, r1
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	1ad2      	subs	r2, r2, r3
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	619a      	str	r2, [r3, #24]
 800f324:	e002      	b.n	800f32c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2200      	movs	r2, #0
 800f32a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d000      	beq.n	800f336 <HAL_PCD_EP_DB_Transmit+0x72>
 800f334:	e0b5      	b.n	800f4a2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	785b      	ldrb	r3, [r3, #1]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d125      	bne.n	800f38a <HAL_PCD_EP_DB_Transmit+0xc6>
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	62bb      	str	r3, [r7, #40]	; 0x28
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2250      	movs	r2, #80	; 0x50
 800f34a:	5a9b      	ldrh	r3, [r3, r2]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	001a      	movs	r2, r3
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	189b      	adds	r3, r3, r2
 800f354:	62bb      	str	r3, [r7, #40]	; 0x28
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	00da      	lsls	r2, r3, #3
 800f35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35e:	18d3      	adds	r3, r2, r3
 800f360:	4abd      	ldr	r2, [pc, #756]	; (800f658 <HAL_PCD_EP_DB_Transmit+0x394>)
 800f362:	4694      	mov	ip, r2
 800f364:	4463      	add	r3, ip
 800f366:	627b      	str	r3, [r7, #36]	; 0x24
 800f368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36a:	881b      	ldrh	r3, [r3, #0]
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	4abb      	ldr	r2, [pc, #748]	; (800f65c <HAL_PCD_EP_DB_Transmit+0x398>)
 800f370:	4013      	ands	r3, r2
 800f372:	b29a      	uxth	r2, r3
 800f374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f376:	801a      	strh	r2, [r3, #0]
 800f378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	4ab8      	ldr	r2, [pc, #736]	; (800f660 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800f380:	4313      	orrs	r3, r2
 800f382:	b29a      	uxth	r2, r3
 800f384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f386:	801a      	strh	r2, [r3, #0]
 800f388:	e01b      	b.n	800f3c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	785b      	ldrb	r3, [r3, #1]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d117      	bne.n	800f3c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	633b      	str	r3, [r7, #48]	; 0x30
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2250      	movs	r2, #80	; 0x50
 800f39e:	5a9b      	ldrh	r3, [r3, r2]
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	001a      	movs	r2, r3
 800f3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a6:	189b      	adds	r3, r3, r2
 800f3a8:	633b      	str	r3, [r7, #48]	; 0x30
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	00da      	lsls	r2, r3, #3
 800f3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b2:	18d3      	adds	r3, r2, r3
 800f3b4:	4aa8      	ldr	r2, [pc, #672]	; (800f658 <HAL_PCD_EP_DB_Transmit+0x394>)
 800f3b6:	4694      	mov	ip, r2
 800f3b8:	4463      	add	r3, ip
 800f3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3be:	2200      	movs	r2, #0
 800f3c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	623b      	str	r3, [r7, #32]
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	785b      	ldrb	r3, [r3, #1]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d125      	bne.n	800f41c <HAL_PCD_EP_DB_Transmit+0x158>
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	61bb      	str	r3, [r7, #24]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2250      	movs	r2, #80	; 0x50
 800f3dc:	5a9b      	ldrh	r3, [r3, r2]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	001a      	movs	r2, r3
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	189b      	adds	r3, r3, r2
 800f3e6:	61bb      	str	r3, [r7, #24]
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	00da      	lsls	r2, r3, #3
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	18d3      	adds	r3, r2, r3
 800f3f2:	4a9c      	ldr	r2, [pc, #624]	; (800f664 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800f3f4:	4694      	mov	ip, r2
 800f3f6:	4463      	add	r3, ip
 800f3f8:	617b      	str	r3, [r7, #20]
 800f3fa:	697b      	ldr	r3, [r7, #20]
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	4a96      	ldr	r2, [pc, #600]	; (800f65c <HAL_PCD_EP_DB_Transmit+0x398>)
 800f402:	4013      	ands	r3, r2
 800f404:	b29a      	uxth	r2, r3
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	801a      	strh	r2, [r3, #0]
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	881b      	ldrh	r3, [r3, #0]
 800f40e:	b29b      	uxth	r3, r3
 800f410:	4a93      	ldr	r2, [pc, #588]	; (800f660 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800f412:	4313      	orrs	r3, r2
 800f414:	b29a      	uxth	r2, r3
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	801a      	strh	r2, [r3, #0]
 800f41a:	e018      	b.n	800f44e <HAL_PCD_EP_DB_Transmit+0x18a>
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	785b      	ldrb	r3, [r3, #1]
 800f420:	2b01      	cmp	r3, #1
 800f422:	d114      	bne.n	800f44e <HAL_PCD_EP_DB_Transmit+0x18a>
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2250      	movs	r2, #80	; 0x50
 800f42a:	5a9b      	ldrh	r3, [r3, r2]
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	001a      	movs	r2, r3
 800f430:	6a3b      	ldr	r3, [r7, #32]
 800f432:	189b      	adds	r3, r3, r2
 800f434:	623b      	str	r3, [r7, #32]
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	00da      	lsls	r2, r3, #3
 800f43c:	6a3b      	ldr	r3, [r7, #32]
 800f43e:	18d3      	adds	r3, r2, r3
 800f440:	4a88      	ldr	r2, [pc, #544]	; (800f664 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800f442:	4694      	mov	ip, r2
 800f444:	4463      	add	r3, ip
 800f446:	61fb      	str	r3, [r7, #28]
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	2200      	movs	r2, #0
 800f44c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	781a      	ldrb	r2, [r3, #0]
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	0011      	movs	r1, r2
 800f456:	0018      	movs	r0, r3
 800f458:	f008 fc38 	bl	8017ccc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f45c:	1dbb      	adds	r3, r7, #6
 800f45e:	881a      	ldrh	r2, [r3, #0]
 800f460:	2380      	movs	r3, #128	; 0x80
 800f462:	01db      	lsls	r3, r3, #7
 800f464:	4013      	ands	r3, r2
 800f466:	d100      	bne.n	800f46a <HAL_PCD_EP_DB_Transmit+0x1a6>
 800f468:	e2d4      	b.n	800fa14 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	001a      	movs	r2, r3
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	18d3      	adds	r3, r2, r3
 800f478:	881b      	ldrh	r3, [r3, #0]
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	2012      	movs	r0, #18
 800f47e:	183b      	adds	r3, r7, r0
 800f480:	4979      	ldr	r1, [pc, #484]	; (800f668 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800f482:	400a      	ands	r2, r1
 800f484:	801a      	strh	r2, [r3, #0]
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	001a      	movs	r2, r3
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	18d3      	adds	r3, r2, r3
 800f494:	183a      	adds	r2, r7, r0
 800f496:	8812      	ldrh	r2, [r2, #0]
 800f498:	4974      	ldr	r1, [pc, #464]	; (800f66c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800f49a:	430a      	orrs	r2, r1
 800f49c:	b292      	uxth	r2, r2
 800f49e:	801a      	strh	r2, [r3, #0]
 800f4a0:	e2b8      	b.n	800fa14 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f4a2:	1dbb      	adds	r3, r7, #6
 800f4a4:	881a      	ldrh	r2, [r3, #0]
 800f4a6:	2380      	movs	r3, #128	; 0x80
 800f4a8:	01db      	lsls	r3, r3, #7
 800f4aa:	4013      	ands	r3, r2
 800f4ac:	d01a      	beq.n	800f4e4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	001a      	movs	r2, r3
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	18d3      	adds	r3, r2, r3
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	b29a      	uxth	r2, r3
 800f4c0:	2044      	movs	r0, #68	; 0x44
 800f4c2:	183b      	adds	r3, r7, r0
 800f4c4:	4968      	ldr	r1, [pc, #416]	; (800f668 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800f4c6:	400a      	ands	r2, r1
 800f4c8:	801a      	strh	r2, [r3, #0]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	001a      	movs	r2, r3
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	18d3      	adds	r3, r2, r3
 800f4d8:	183a      	adds	r2, r7, r0
 800f4da:	8812      	ldrh	r2, [r2, #0]
 800f4dc:	4963      	ldr	r1, [pc, #396]	; (800f66c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800f4de:	430a      	orrs	r2, r1
 800f4e0:	b292      	uxth	r2, r2
 800f4e2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	2224      	movs	r2, #36	; 0x24
 800f4e8:	5c9b      	ldrb	r3, [r3, r2]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d000      	beq.n	800f4f0 <HAL_PCD_EP_DB_Transmit+0x22c>
 800f4ee:	e291      	b.n	800fa14 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	695a      	ldr	r2, [r3, #20]
 800f4f4:	214e      	movs	r1, #78	; 0x4e
 800f4f6:	187b      	adds	r3, r7, r1
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	18d2      	adds	r2, r2, r3
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	69da      	ldr	r2, [r3, #28]
 800f504:	187b      	adds	r3, r7, r1
 800f506:	881b      	ldrh	r3, [r3, #0]
 800f508:	18d2      	adds	r2, r2, r3
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	6a1a      	ldr	r2, [r3, #32]
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	691b      	ldr	r3, [r3, #16]
 800f516:	429a      	cmp	r2, r3
 800f518:	d309      	bcc.n	800f52e <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	6a1a      	ldr	r2, [r3, #32]
 800f524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f526:	1ad2      	subs	r2, r2, r3
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	621a      	str	r2, [r3, #32]
 800f52c:	e016      	b.n	800f55c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	6a1b      	ldr	r3, [r3, #32]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d108      	bne.n	800f548 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 800f536:	234e      	movs	r3, #78	; 0x4e
 800f538:	18fb      	adds	r3, r7, r3
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2224      	movs	r2, #36	; 0x24
 800f542:	2100      	movs	r1, #0
 800f544:	5499      	strb	r1, [r3, r2]
 800f546:	e009      	b.n	800f55c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	2224      	movs	r2, #36	; 0x24
 800f54c:	2100      	movs	r1, #0
 800f54e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	6a1b      	ldr	r3, [r3, #32]
 800f554:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	2200      	movs	r2, #0
 800f55a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	785b      	ldrb	r3, [r3, #1]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d150      	bne.n	800f606 <HAL_PCD_EP_DB_Transmit+0x342>
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	63bb      	str	r3, [r7, #56]	; 0x38
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2250      	movs	r2, #80	; 0x50
 800f570:	5a9b      	ldrh	r3, [r3, r2]
 800f572:	b29b      	uxth	r3, r3
 800f574:	001a      	movs	r2, r3
 800f576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f578:	189b      	adds	r3, r3, r2
 800f57a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	00da      	lsls	r2, r3, #3
 800f582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f584:	18d3      	adds	r3, r2, r3
 800f586:	4a34      	ldr	r2, [pc, #208]	; (800f658 <HAL_PCD_EP_DB_Transmit+0x394>)
 800f588:	4694      	mov	ip, r2
 800f58a:	4463      	add	r3, ip
 800f58c:	637b      	str	r3, [r7, #52]	; 0x34
 800f58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f590:	2b00      	cmp	r3, #0
 800f592:	d110      	bne.n	800f5b6 <HAL_PCD_EP_DB_Transmit+0x2f2>
 800f594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f596:	881b      	ldrh	r3, [r3, #0]
 800f598:	b29b      	uxth	r3, r3
 800f59a:	4a30      	ldr	r2, [pc, #192]	; (800f65c <HAL_PCD_EP_DB_Transmit+0x398>)
 800f59c:	4013      	ands	r3, r2
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a2:	801a      	strh	r2, [r3, #0]
 800f5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a6:	881b      	ldrh	r3, [r3, #0]
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	4a2d      	ldr	r2, [pc, #180]	; (800f660 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5b2:	801a      	strh	r2, [r3, #0]
 800f5b4:	e044      	b.n	800f640 <HAL_PCD_EP_DB_Transmit+0x37c>
 800f5b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5b8:	2b3e      	cmp	r3, #62	; 0x3e
 800f5ba:	d810      	bhi.n	800f5de <HAL_PCD_EP_DB_Transmit+0x31a>
 800f5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5be:	085b      	lsrs	r3, r3, #1
 800f5c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	4013      	ands	r3, r2
 800f5c8:	d002      	beq.n	800f5d0 <HAL_PCD_EP_DB_Transmit+0x30c>
 800f5ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	029b      	lsls	r3, r3, #10
 800f5d6:	b29a      	uxth	r2, r3
 800f5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5da:	801a      	strh	r2, [r3, #0]
 800f5dc:	e030      	b.n	800f640 <HAL_PCD_EP_DB_Transmit+0x37c>
 800f5de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5e0:	095b      	lsrs	r3, r3, #5
 800f5e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5e6:	221f      	movs	r2, #31
 800f5e8:	4013      	ands	r3, r2
 800f5ea:	d102      	bne.n	800f5f2 <HAL_PCD_EP_DB_Transmit+0x32e>
 800f5ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ee:	3b01      	subs	r3, #1
 800f5f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	029b      	lsls	r3, r3, #10
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	4a19      	ldr	r2, [pc, #100]	; (800f660 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f602:	801a      	strh	r2, [r3, #0]
 800f604:	e01c      	b.n	800f640 <HAL_PCD_EP_DB_Transmit+0x37c>
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	785b      	ldrb	r3, [r3, #1]
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d118      	bne.n	800f640 <HAL_PCD_EP_DB_Transmit+0x37c>
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	643b      	str	r3, [r7, #64]	; 0x40
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2250      	movs	r2, #80	; 0x50
 800f61a:	5a9b      	ldrh	r3, [r3, r2]
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	001a      	movs	r2, r3
 800f620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f622:	189b      	adds	r3, r3, r2
 800f624:	643b      	str	r3, [r7, #64]	; 0x40
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	00da      	lsls	r2, r3, #3
 800f62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f62e:	18d3      	adds	r3, r2, r3
 800f630:	4a09      	ldr	r2, [pc, #36]	; (800f658 <HAL_PCD_EP_DB_Transmit+0x394>)
 800f632:	4694      	mov	ip, r2
 800f634:	4463      	add	r3, ip
 800f636:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f63e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	6818      	ldr	r0, [r3, #0]
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	6959      	ldr	r1, [r3, #20]
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	891a      	ldrh	r2, [r3, #8]
 800f64c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f64e:	b29b      	uxth	r3, r3
 800f650:	f005 fabe 	bl	8014bd0 <USB_WritePMA>
 800f654:	e1de      	b.n	800fa14 <HAL_PCD_EP_DB_Transmit+0x750>
 800f656:	46c0      	nop			; (mov r8, r8)
 800f658:	00000402 	.word	0x00000402
 800f65c:	ffff83ff 	.word	0xffff83ff
 800f660:	ffff8000 	.word	0xffff8000
 800f664:	00000406 	.word	0x00000406
 800f668:	ffff8f8f 	.word	0xffff8f8f
 800f66c:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2250      	movs	r2, #80	; 0x50
 800f676:	5a9b      	ldrh	r3, [r3, r2]
 800f678:	b29b      	uxth	r3, r3
 800f67a:	001a      	movs	r2, r3
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	00db      	lsls	r3, r3, #3
 800f682:	18d2      	adds	r2, r2, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	18d3      	adds	r3, r2, r3
 800f68a:	4aca      	ldr	r2, [pc, #808]	; (800f9b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800f68c:	4694      	mov	ip, r2
 800f68e:	4463      	add	r3, ip
 800f690:	881a      	ldrh	r2, [r3, #0]
 800f692:	214e      	movs	r1, #78	; 0x4e
 800f694:	187b      	adds	r3, r7, r1
 800f696:	0592      	lsls	r2, r2, #22
 800f698:	0d92      	lsrs	r2, r2, #22
 800f69a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	699a      	ldr	r2, [r3, #24]
 800f6a0:	187b      	adds	r3, r7, r1
 800f6a2:	881b      	ldrh	r3, [r3, #0]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d307      	bcc.n	800f6b8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	699a      	ldr	r2, [r3, #24]
 800f6ac:	187b      	adds	r3, r7, r1
 800f6ae:	881b      	ldrh	r3, [r3, #0]
 800f6b0:	1ad2      	subs	r2, r2, r3
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	619a      	str	r2, [r3, #24]
 800f6b6:	e002      	b.n	800f6be <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	699b      	ldr	r3, [r3, #24]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d000      	beq.n	800f6c8 <HAL_PCD_EP_DB_Transmit+0x404>
 800f6c6:	e0c0      	b.n	800f84a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	785b      	ldrb	r3, [r3, #1]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d125      	bne.n	800f71c <HAL_PCD_EP_DB_Transmit+0x458>
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	2250      	movs	r2, #80	; 0x50
 800f6dc:	5a9b      	ldrh	r3, [r3, r2]
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	001a      	movs	r2, r3
 800f6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6e4:	189b      	adds	r3, r3, r2
 800f6e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	00da      	lsls	r2, r3, #3
 800f6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6f0:	18d3      	adds	r3, r2, r3
 800f6f2:	4ab1      	ldr	r2, [pc, #708]	; (800f9b8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800f6f4:	4694      	mov	ip, r2
 800f6f6:	4463      	add	r3, ip
 800f6f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800f6fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	4aae      	ldr	r2, [pc, #696]	; (800f9bc <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800f702:	4013      	ands	r3, r2
 800f704:	b29a      	uxth	r2, r3
 800f706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f708:	801a      	strh	r2, [r3, #0]
 800f70a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f70c:	881b      	ldrh	r3, [r3, #0]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	4aab      	ldr	r2, [pc, #684]	; (800f9c0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800f712:	4313      	orrs	r3, r2
 800f714:	b29a      	uxth	r2, r3
 800f716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f718:	801a      	strh	r2, [r3, #0]
 800f71a:	e01b      	b.n	800f754 <HAL_PCD_EP_DB_Transmit+0x490>
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	785b      	ldrb	r3, [r3, #1]
 800f720:	2b01      	cmp	r3, #1
 800f722:	d117      	bne.n	800f754 <HAL_PCD_EP_DB_Transmit+0x490>
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	677b      	str	r3, [r7, #116]	; 0x74
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	2250      	movs	r2, #80	; 0x50
 800f730:	5a9b      	ldrh	r3, [r3, r2]
 800f732:	b29b      	uxth	r3, r3
 800f734:	001a      	movs	r2, r3
 800f736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f738:	189b      	adds	r3, r3, r2
 800f73a:	677b      	str	r3, [r7, #116]	; 0x74
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	781b      	ldrb	r3, [r3, #0]
 800f740:	00da      	lsls	r2, r3, #3
 800f742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f744:	18d3      	adds	r3, r2, r3
 800f746:	4a9c      	ldr	r2, [pc, #624]	; (800f9b8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800f748:	4694      	mov	ip, r2
 800f74a:	4463      	add	r3, ip
 800f74c:	673b      	str	r3, [r7, #112]	; 0x70
 800f74e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f750:	2200      	movs	r2, #0
 800f752:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	67bb      	str	r3, [r7, #120]	; 0x78
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	785b      	ldrb	r3, [r3, #1]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d130      	bne.n	800f7c4 <HAL_PCD_EP_DB_Transmit+0x500>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2180      	movs	r1, #128	; 0x80
 800f768:	187a      	adds	r2, r7, r1
 800f76a:	6013      	str	r3, [r2, #0]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2250      	movs	r2, #80	; 0x50
 800f772:	5a9b      	ldrh	r3, [r3, r2]
 800f774:	b29b      	uxth	r3, r3
 800f776:	001a      	movs	r2, r3
 800f778:	187b      	adds	r3, r7, r1
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	189b      	adds	r3, r3, r2
 800f77e:	187a      	adds	r2, r7, r1
 800f780:	6013      	str	r3, [r2, #0]
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	00da      	lsls	r2, r3, #3
 800f788:	187b      	adds	r3, r7, r1
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	18d3      	adds	r3, r2, r3
 800f78e:	4a89      	ldr	r2, [pc, #548]	; (800f9b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800f790:	4694      	mov	ip, r2
 800f792:	4463      	add	r3, ip
 800f794:	2184      	movs	r1, #132	; 0x84
 800f796:	187a      	adds	r2, r7, r1
 800f798:	6013      	str	r3, [r2, #0]
 800f79a:	187b      	adds	r3, r7, r1
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	4a86      	ldr	r2, [pc, #536]	; (800f9bc <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800f7a4:	4013      	ands	r3, r2
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	187b      	adds	r3, r7, r1
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	801a      	strh	r2, [r3, #0]
 800f7ae:	187b      	adds	r3, r7, r1
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	881b      	ldrh	r3, [r3, #0]
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	4a82      	ldr	r2, [pc, #520]	; (800f9c0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	187b      	adds	r3, r7, r1
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	801a      	strh	r2, [r3, #0]
 800f7c2:	e018      	b.n	800f7f6 <HAL_PCD_EP_DB_Transmit+0x532>
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	785b      	ldrb	r3, [r3, #1]
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d114      	bne.n	800f7f6 <HAL_PCD_EP_DB_Transmit+0x532>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2250      	movs	r2, #80	; 0x50
 800f7d2:	5a9b      	ldrh	r3, [r3, r2]
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	001a      	movs	r2, r3
 800f7d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7da:	189b      	adds	r3, r3, r2
 800f7dc:	67bb      	str	r3, [r7, #120]	; 0x78
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	00da      	lsls	r2, r3, #3
 800f7e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7e6:	18d3      	adds	r3, r2, r3
 800f7e8:	4a72      	ldr	r2, [pc, #456]	; (800f9b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800f7ea:	4694      	mov	ip, r2
 800f7ec:	4463      	add	r3, ip
 800f7ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f7f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	781a      	ldrb	r2, [r3, #0]
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	0011      	movs	r1, r2
 800f7fe:	0018      	movs	r0, r3
 800f800:	f008 fa64 	bl	8017ccc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f804:	1dbb      	adds	r3, r7, #6
 800f806:	881a      	ldrh	r2, [r3, #0]
 800f808:	2380      	movs	r3, #128	; 0x80
 800f80a:	01db      	lsls	r3, r3, #7
 800f80c:	4013      	ands	r3, r2
 800f80e:	d000      	beq.n	800f812 <HAL_PCD_EP_DB_Transmit+0x54e>
 800f810:	e100      	b.n	800fa14 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	001a      	movs	r2, r3
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	18d3      	adds	r3, r2, r3
 800f820:	881b      	ldrh	r3, [r3, #0]
 800f822:	b29a      	uxth	r2, r3
 800f824:	2046      	movs	r0, #70	; 0x46
 800f826:	183b      	adds	r3, r7, r0
 800f828:	4966      	ldr	r1, [pc, #408]	; (800f9c4 <HAL_PCD_EP_DB_Transmit+0x700>)
 800f82a:	400a      	ands	r2, r1
 800f82c:	801a      	strh	r2, [r3, #0]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	001a      	movs	r2, r3
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	18d3      	adds	r3, r2, r3
 800f83c:	183a      	adds	r2, r7, r0
 800f83e:	8812      	ldrh	r2, [r2, #0]
 800f840:	4961      	ldr	r1, [pc, #388]	; (800f9c8 <HAL_PCD_EP_DB_Transmit+0x704>)
 800f842:	430a      	orrs	r2, r1
 800f844:	b292      	uxth	r2, r2
 800f846:	801a      	strh	r2, [r3, #0]
 800f848:	e0e4      	b.n	800fa14 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f84a:	1dbb      	adds	r3, r7, #6
 800f84c:	881a      	ldrh	r2, [r3, #0]
 800f84e:	2380      	movs	r3, #128	; 0x80
 800f850:	01db      	lsls	r3, r3, #7
 800f852:	4013      	ands	r3, r2
 800f854:	d11a      	bne.n	800f88c <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	001a      	movs	r2, r3
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	18d3      	adds	r3, r2, r3
 800f864:	881b      	ldrh	r3, [r3, #0]
 800f866:	b29a      	uxth	r2, r3
 800f868:	204c      	movs	r0, #76	; 0x4c
 800f86a:	183b      	adds	r3, r7, r0
 800f86c:	4955      	ldr	r1, [pc, #340]	; (800f9c4 <HAL_PCD_EP_DB_Transmit+0x700>)
 800f86e:	400a      	ands	r2, r1
 800f870:	801a      	strh	r2, [r3, #0]
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	001a      	movs	r2, r3
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	18d3      	adds	r3, r2, r3
 800f880:	183a      	adds	r2, r7, r0
 800f882:	8812      	ldrh	r2, [r2, #0]
 800f884:	4950      	ldr	r1, [pc, #320]	; (800f9c8 <HAL_PCD_EP_DB_Transmit+0x704>)
 800f886:	430a      	orrs	r2, r1
 800f888:	b292      	uxth	r2, r2
 800f88a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	2224      	movs	r2, #36	; 0x24
 800f890:	5c9b      	ldrb	r3, [r3, r2]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d000      	beq.n	800f898 <HAL_PCD_EP_DB_Transmit+0x5d4>
 800f896:	e0bd      	b.n	800fa14 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	695a      	ldr	r2, [r3, #20]
 800f89c:	214e      	movs	r1, #78	; 0x4e
 800f89e:	187b      	adds	r3, r7, r1
 800f8a0:	881b      	ldrh	r3, [r3, #0]
 800f8a2:	18d2      	adds	r2, r2, r3
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	69da      	ldr	r2, [r3, #28]
 800f8ac:	187b      	adds	r3, r7, r1
 800f8ae:	881b      	ldrh	r3, [r3, #0]
 800f8b0:	18d2      	adds	r2, r2, r3
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	6a1a      	ldr	r2, [r3, #32]
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	691b      	ldr	r3, [r3, #16]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d309      	bcc.n	800f8d6 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	691b      	ldr	r3, [r3, #16]
 800f8c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	6a1a      	ldr	r2, [r3, #32]
 800f8cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ce:	1ad2      	subs	r2, r2, r3
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	621a      	str	r2, [r3, #32]
 800f8d4:	e016      	b.n	800f904 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d108      	bne.n	800f8f0 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 800f8de:	234e      	movs	r3, #78	; 0x4e
 800f8e0:	18fb      	adds	r3, r7, r3
 800f8e2:	881b      	ldrh	r3, [r3, #0]
 800f8e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	2224      	movs	r2, #36	; 0x24
 800f8ea:	2100      	movs	r1, #0
 800f8ec:	5499      	strb	r1, [r3, r2]
 800f8ee:	e009      	b.n	800f904 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	6a1b      	ldr	r3, [r3, #32]
 800f8f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	2224      	movs	r2, #36	; 0x24
 800f900:	2100      	movs	r1, #0
 800f902:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	667b      	str	r3, [r7, #100]	; 0x64
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	785b      	ldrb	r3, [r3, #1]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d15c      	bne.n	800f9cc <HAL_PCD_EP_DB_Transmit+0x708>
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2250      	movs	r2, #80	; 0x50
 800f91e:	5a9b      	ldrh	r3, [r3, r2]
 800f920:	b29b      	uxth	r3, r3
 800f922:	001a      	movs	r2, r3
 800f924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f926:	189b      	adds	r3, r3, r2
 800f928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	00da      	lsls	r2, r3, #3
 800f930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f932:	18d3      	adds	r3, r2, r3
 800f934:	4a1f      	ldr	r2, [pc, #124]	; (800f9b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800f936:	4694      	mov	ip, r2
 800f938:	4463      	add	r3, ip
 800f93a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f93c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d110      	bne.n	800f964 <HAL_PCD_EP_DB_Transmit+0x6a0>
 800f942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	b29b      	uxth	r3, r3
 800f948:	4a1c      	ldr	r2, [pc, #112]	; (800f9bc <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800f94a:	4013      	ands	r3, r2
 800f94c:	b29a      	uxth	r2, r3
 800f94e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f950:	801a      	strh	r2, [r3, #0]
 800f952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f954:	881b      	ldrh	r3, [r3, #0]
 800f956:	b29b      	uxth	r3, r3
 800f958:	4a19      	ldr	r2, [pc, #100]	; (800f9c0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800f95a:	4313      	orrs	r3, r2
 800f95c:	b29a      	uxth	r2, r3
 800f95e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f960:	801a      	strh	r2, [r3, #0]
 800f962:	e04d      	b.n	800fa00 <HAL_PCD_EP_DB_Transmit+0x73c>
 800f964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f966:	2b3e      	cmp	r3, #62	; 0x3e
 800f968:	d810      	bhi.n	800f98c <HAL_PCD_EP_DB_Transmit+0x6c8>
 800f96a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f96c:	085b      	lsrs	r3, r3, #1
 800f96e:	657b      	str	r3, [r7, #84]	; 0x54
 800f970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f972:	2201      	movs	r2, #1
 800f974:	4013      	ands	r3, r2
 800f976:	d002      	beq.n	800f97e <HAL_PCD_EP_DB_Transmit+0x6ba>
 800f978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f97a:	3301      	adds	r3, #1
 800f97c:	657b      	str	r3, [r7, #84]	; 0x54
 800f97e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f980:	b29b      	uxth	r3, r3
 800f982:	029b      	lsls	r3, r3, #10
 800f984:	b29a      	uxth	r2, r3
 800f986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f988:	801a      	strh	r2, [r3, #0]
 800f98a:	e039      	b.n	800fa00 <HAL_PCD_EP_DB_Transmit+0x73c>
 800f98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f98e:	095b      	lsrs	r3, r3, #5
 800f990:	657b      	str	r3, [r7, #84]	; 0x54
 800f992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f994:	221f      	movs	r2, #31
 800f996:	4013      	ands	r3, r2
 800f998:	d102      	bne.n	800f9a0 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800f99a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f99c:	3b01      	subs	r3, #1
 800f99e:	657b      	str	r3, [r7, #84]	; 0x54
 800f9a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	029b      	lsls	r3, r3, #10
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	4a05      	ldr	r2, [pc, #20]	; (800f9c0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9b0:	801a      	strh	r2, [r3, #0]
 800f9b2:	e025      	b.n	800fa00 <HAL_PCD_EP_DB_Transmit+0x73c>
 800f9b4:	00000406 	.word	0x00000406
 800f9b8:	00000402 	.word	0x00000402
 800f9bc:	ffff83ff 	.word	0xffff83ff
 800f9c0:	ffff8000 	.word	0xffff8000
 800f9c4:	ffff8f8f 	.word	0xffff8f8f
 800f9c8:	ffffc080 	.word	0xffffc080
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	785b      	ldrb	r3, [r3, #1]
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d115      	bne.n	800fa00 <HAL_PCD_EP_DB_Transmit+0x73c>
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2250      	movs	r2, #80	; 0x50
 800f9da:	5a9b      	ldrh	r3, [r3, r2]
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	001a      	movs	r2, r3
 800f9e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9e2:	189b      	adds	r3, r3, r2
 800f9e4:	667b      	str	r3, [r7, #100]	; 0x64
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	00da      	lsls	r2, r3, #3
 800f9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9ee:	18d3      	adds	r3, r2, r3
 800f9f0:	4a1e      	ldr	r2, [pc, #120]	; (800fa6c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800f9f2:	4694      	mov	ip, r2
 800f9f4:	4463      	add	r3, ip
 800f9f6:	663b      	str	r3, [r7, #96]	; 0x60
 800f9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9fa:	b29a      	uxth	r2, r3
 800f9fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f9fe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6818      	ldr	r0, [r3, #0]
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	6959      	ldr	r1, [r3, #20]
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	895a      	ldrh	r2, [r3, #10]
 800fa0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	f005 f8de 	bl	8014bd0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	001a      	movs	r2, r3
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	18d3      	adds	r3, r2, r3
 800fa22:	881b      	ldrh	r3, [r3, #0]
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	2010      	movs	r0, #16
 800fa28:	183b      	adds	r3, r7, r0
 800fa2a:	4911      	ldr	r1, [pc, #68]	; (800fa70 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 800fa2c:	400a      	ands	r2, r1
 800fa2e:	801a      	strh	r2, [r3, #0]
 800fa30:	183b      	adds	r3, r7, r0
 800fa32:	183a      	adds	r2, r7, r0
 800fa34:	8812      	ldrh	r2, [r2, #0]
 800fa36:	2110      	movs	r1, #16
 800fa38:	404a      	eors	r2, r1
 800fa3a:	801a      	strh	r2, [r3, #0]
 800fa3c:	183b      	adds	r3, r7, r0
 800fa3e:	183a      	adds	r2, r7, r0
 800fa40:	8812      	ldrh	r2, [r2, #0]
 800fa42:	2120      	movs	r1, #32
 800fa44:	404a      	eors	r2, r1
 800fa46:	801a      	strh	r2, [r3, #0]
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	001a      	movs	r2, r3
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	18d3      	adds	r3, r2, r3
 800fa56:	183a      	adds	r2, r7, r0
 800fa58:	8812      	ldrh	r2, [r2, #0]
 800fa5a:	4906      	ldr	r1, [pc, #24]	; (800fa74 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 800fa5c:	430a      	orrs	r2, r1
 800fa5e:	b292      	uxth	r2, r2
 800fa60:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800fa62:	2300      	movs	r3, #0
}
 800fa64:	0018      	movs	r0, r3
 800fa66:	46bd      	mov	sp, r7
 800fa68:	b022      	add	sp, #136	; 0x88
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	00000406 	.word	0x00000406
 800fa70:	ffff8fbf 	.word	0xffff8fbf
 800fa74:	ffff8080 	.word	0xffff8080

0800fa78 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800fa78:	b590      	push	{r4, r7, lr}
 800fa7a:	b087      	sub	sp, #28
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	0008      	movs	r0, r1
 800fa82:	0011      	movs	r1, r2
 800fa84:	607b      	str	r3, [r7, #4]
 800fa86:	240a      	movs	r4, #10
 800fa88:	193b      	adds	r3, r7, r4
 800fa8a:	1c02      	adds	r2, r0, #0
 800fa8c:	801a      	strh	r2, [r3, #0]
 800fa8e:	2308      	movs	r3, #8
 800fa90:	18fb      	adds	r3, r7, r3
 800fa92:	1c0a      	adds	r2, r1, #0
 800fa94:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800fa96:	0021      	movs	r1, r4
 800fa98:	187b      	adds	r3, r7, r1
 800fa9a:	881b      	ldrh	r3, [r3, #0]
 800fa9c:	2280      	movs	r2, #128	; 0x80
 800fa9e:	4013      	ands	r3, r2
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00c      	beq.n	800fac0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800faa6:	187b      	adds	r3, r7, r1
 800faa8:	881b      	ldrh	r3, [r3, #0]
 800faaa:	2207      	movs	r2, #7
 800faac:	4013      	ands	r3, r2
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	0013      	movs	r3, r2
 800fab2:	009b      	lsls	r3, r3, #2
 800fab4:	189b      	adds	r3, r3, r2
 800fab6:	00db      	lsls	r3, r3, #3
 800fab8:	68fa      	ldr	r2, [r7, #12]
 800faba:	18d3      	adds	r3, r2, r3
 800fabc:	617b      	str	r3, [r7, #20]
 800fabe:	e00b      	b.n	800fad8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fac0:	230a      	movs	r3, #10
 800fac2:	18fb      	adds	r3, r7, r3
 800fac4:	881a      	ldrh	r2, [r3, #0]
 800fac6:	0013      	movs	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	189b      	adds	r3, r3, r2
 800facc:	00db      	lsls	r3, r3, #3
 800face:	3369      	adds	r3, #105	; 0x69
 800fad0:	33ff      	adds	r3, #255	; 0xff
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	18d3      	adds	r3, r2, r3
 800fad6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800fad8:	2308      	movs	r3, #8
 800fada:	18fb      	adds	r3, r7, r3
 800fadc:	881b      	ldrh	r3, [r3, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d107      	bne.n	800faf2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	2200      	movs	r2, #0
 800fae6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	b29a      	uxth	r2, r3
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	80da      	strh	r2, [r3, #6]
 800faf0:	e00b      	b.n	800fb0a <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	2201      	movs	r2, #1
 800faf6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	0c1b      	lsrs	r3, r3, #16
 800fb04:	b29a      	uxth	r2, r3
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	0018      	movs	r0, r3
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	b007      	add	sp, #28
 800fb12:	bd90      	pop	{r4, r7, pc}

0800fb14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b084      	sub	sp, #16
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	23ba      	movs	r3, #186	; 0xba
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	2101      	movs	r1, #1
 800fb2a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800fb2c:	687a      	ldr	r2, [r7, #4]
 800fb2e:	23b8      	movs	r3, #184	; 0xb8
 800fb30:	009b      	lsls	r3, r3, #2
 800fb32:	2100      	movs	r1, #0
 800fb34:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	2254      	movs	r2, #84	; 0x54
 800fb3a:	5a9b      	ldrh	r3, [r3, r2]
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	2201      	movs	r2, #1
 800fb40:	4313      	orrs	r3, r2
 800fb42:	b299      	uxth	r1, r3
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2254      	movs	r2, #84	; 0x54
 800fb48:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2254      	movs	r2, #84	; 0x54
 800fb4e:	5a9b      	ldrh	r3, [r3, r2]
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	2202      	movs	r2, #2
 800fb54:	4313      	orrs	r3, r2
 800fb56:	b299      	uxth	r1, r3
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	2254      	movs	r2, #84	; 0x54
 800fb5c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	0018      	movs	r0, r3
 800fb62:	46bd      	mov	sp, r7
 800fb64:	b004      	add	sp, #16
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	000a      	movs	r2, r1
 800fb72:	1cfb      	adds	r3, r7, #3
 800fb74:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800fb76:	46c0      	nop			; (mov r8, r8)
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	b002      	add	sp, #8
 800fb7c:	bd80      	pop	{r7, pc}
	...

0800fb80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b088      	sub	sp, #32
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d102      	bne.n	800fb94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	f000 fb76 	bl	8010280 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2201      	movs	r2, #1
 800fb9a:	4013      	ands	r3, r2
 800fb9c:	d100      	bne.n	800fba0 <HAL_RCC_OscConfig+0x20>
 800fb9e:	e08e      	b.n	800fcbe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800fba0:	4bc5      	ldr	r3, [pc, #788]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	220c      	movs	r2, #12
 800fba6:	4013      	ands	r3, r2
 800fba8:	2b04      	cmp	r3, #4
 800fbaa:	d00e      	beq.n	800fbca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800fbac:	4bc2      	ldr	r3, [pc, #776]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	220c      	movs	r2, #12
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	2b08      	cmp	r3, #8
 800fbb6:	d117      	bne.n	800fbe8 <HAL_RCC_OscConfig+0x68>
 800fbb8:	4bbf      	ldr	r3, [pc, #764]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fbba:	685a      	ldr	r2, [r3, #4]
 800fbbc:	23c0      	movs	r3, #192	; 0xc0
 800fbbe:	025b      	lsls	r3, r3, #9
 800fbc0:	401a      	ands	r2, r3
 800fbc2:	2380      	movs	r3, #128	; 0x80
 800fbc4:	025b      	lsls	r3, r3, #9
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d10e      	bne.n	800fbe8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fbca:	4bbb      	ldr	r3, [pc, #748]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	2380      	movs	r3, #128	; 0x80
 800fbd0:	029b      	lsls	r3, r3, #10
 800fbd2:	4013      	ands	r3, r2
 800fbd4:	d100      	bne.n	800fbd8 <HAL_RCC_OscConfig+0x58>
 800fbd6:	e071      	b.n	800fcbc <HAL_RCC_OscConfig+0x13c>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d000      	beq.n	800fbe2 <HAL_RCC_OscConfig+0x62>
 800fbe0:	e06c      	b.n	800fcbc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	f000 fb4c 	bl	8010280 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d107      	bne.n	800fc00 <HAL_RCC_OscConfig+0x80>
 800fbf0:	4bb1      	ldr	r3, [pc, #708]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	4bb0      	ldr	r3, [pc, #704]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fbf6:	2180      	movs	r1, #128	; 0x80
 800fbf8:	0249      	lsls	r1, r1, #9
 800fbfa:	430a      	orrs	r2, r1
 800fbfc:	601a      	str	r2, [r3, #0]
 800fbfe:	e02f      	b.n	800fc60 <HAL_RCC_OscConfig+0xe0>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d10c      	bne.n	800fc22 <HAL_RCC_OscConfig+0xa2>
 800fc08:	4bab      	ldr	r3, [pc, #684]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc0a:	681a      	ldr	r2, [r3, #0]
 800fc0c:	4baa      	ldr	r3, [pc, #680]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc0e:	49ab      	ldr	r1, [pc, #684]	; (800febc <HAL_RCC_OscConfig+0x33c>)
 800fc10:	400a      	ands	r2, r1
 800fc12:	601a      	str	r2, [r3, #0]
 800fc14:	4ba8      	ldr	r3, [pc, #672]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	4ba7      	ldr	r3, [pc, #668]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc1a:	49a9      	ldr	r1, [pc, #676]	; (800fec0 <HAL_RCC_OscConfig+0x340>)
 800fc1c:	400a      	ands	r2, r1
 800fc1e:	601a      	str	r2, [r3, #0]
 800fc20:	e01e      	b.n	800fc60 <HAL_RCC_OscConfig+0xe0>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	2b05      	cmp	r3, #5
 800fc28:	d10e      	bne.n	800fc48 <HAL_RCC_OscConfig+0xc8>
 800fc2a:	4ba3      	ldr	r3, [pc, #652]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	4ba2      	ldr	r3, [pc, #648]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc30:	2180      	movs	r1, #128	; 0x80
 800fc32:	02c9      	lsls	r1, r1, #11
 800fc34:	430a      	orrs	r2, r1
 800fc36:	601a      	str	r2, [r3, #0]
 800fc38:	4b9f      	ldr	r3, [pc, #636]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	4b9e      	ldr	r3, [pc, #632]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc3e:	2180      	movs	r1, #128	; 0x80
 800fc40:	0249      	lsls	r1, r1, #9
 800fc42:	430a      	orrs	r2, r1
 800fc44:	601a      	str	r2, [r3, #0]
 800fc46:	e00b      	b.n	800fc60 <HAL_RCC_OscConfig+0xe0>
 800fc48:	4b9b      	ldr	r3, [pc, #620]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	4b9a      	ldr	r3, [pc, #616]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc4e:	499b      	ldr	r1, [pc, #620]	; (800febc <HAL_RCC_OscConfig+0x33c>)
 800fc50:	400a      	ands	r2, r1
 800fc52:	601a      	str	r2, [r3, #0]
 800fc54:	4b98      	ldr	r3, [pc, #608]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	4b97      	ldr	r3, [pc, #604]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc5a:	4999      	ldr	r1, [pc, #612]	; (800fec0 <HAL_RCC_OscConfig+0x340>)
 800fc5c:	400a      	ands	r2, r1
 800fc5e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d014      	beq.n	800fc92 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fc68:	f7fd fdde 	bl	800d828 <HAL_GetTick>
 800fc6c:	0003      	movs	r3, r0
 800fc6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fc70:	e008      	b.n	800fc84 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fc72:	f7fd fdd9 	bl	800d828 <HAL_GetTick>
 800fc76:	0002      	movs	r2, r0
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	1ad3      	subs	r3, r2, r3
 800fc7c:	2b64      	cmp	r3, #100	; 0x64
 800fc7e:	d901      	bls.n	800fc84 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800fc80:	2303      	movs	r3, #3
 800fc82:	e2fd      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fc84:	4b8c      	ldr	r3, [pc, #560]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	2380      	movs	r3, #128	; 0x80
 800fc8a:	029b      	lsls	r3, r3, #10
 800fc8c:	4013      	ands	r3, r2
 800fc8e:	d0f0      	beq.n	800fc72 <HAL_RCC_OscConfig+0xf2>
 800fc90:	e015      	b.n	800fcbe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fc92:	f7fd fdc9 	bl	800d828 <HAL_GetTick>
 800fc96:	0003      	movs	r3, r0
 800fc98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fc9a:	e008      	b.n	800fcae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fc9c:	f7fd fdc4 	bl	800d828 <HAL_GetTick>
 800fca0:	0002      	movs	r2, r0
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	2b64      	cmp	r3, #100	; 0x64
 800fca8:	d901      	bls.n	800fcae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800fcaa:	2303      	movs	r3, #3
 800fcac:	e2e8      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fcae:	4b82      	ldr	r3, [pc, #520]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	2380      	movs	r3, #128	; 0x80
 800fcb4:	029b      	lsls	r3, r3, #10
 800fcb6:	4013      	ands	r3, r2
 800fcb8:	d1f0      	bne.n	800fc9c <HAL_RCC_OscConfig+0x11c>
 800fcba:	e000      	b.n	800fcbe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fcbc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2202      	movs	r2, #2
 800fcc4:	4013      	ands	r3, r2
 800fcc6:	d100      	bne.n	800fcca <HAL_RCC_OscConfig+0x14a>
 800fcc8:	e06c      	b.n	800fda4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800fcca:	4b7b      	ldr	r3, [pc, #492]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	220c      	movs	r2, #12
 800fcd0:	4013      	ands	r3, r2
 800fcd2:	d00e      	beq.n	800fcf2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800fcd4:	4b78      	ldr	r3, [pc, #480]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	220c      	movs	r2, #12
 800fcda:	4013      	ands	r3, r2
 800fcdc:	2b08      	cmp	r3, #8
 800fcde:	d11f      	bne.n	800fd20 <HAL_RCC_OscConfig+0x1a0>
 800fce0:	4b75      	ldr	r3, [pc, #468]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fce2:	685a      	ldr	r2, [r3, #4]
 800fce4:	23c0      	movs	r3, #192	; 0xc0
 800fce6:	025b      	lsls	r3, r3, #9
 800fce8:	401a      	ands	r2, r3
 800fcea:	2380      	movs	r3, #128	; 0x80
 800fcec:	021b      	lsls	r3, r3, #8
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d116      	bne.n	800fd20 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fcf2:	4b71      	ldr	r3, [pc, #452]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	2202      	movs	r2, #2
 800fcf8:	4013      	ands	r3, r2
 800fcfa:	d005      	beq.n	800fd08 <HAL_RCC_OscConfig+0x188>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	68db      	ldr	r3, [r3, #12]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d001      	beq.n	800fd08 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800fd04:	2301      	movs	r3, #1
 800fd06:	e2bb      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd08:	4b6b      	ldr	r3, [pc, #428]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	22f8      	movs	r2, #248	; 0xf8
 800fd0e:	4393      	bics	r3, r2
 800fd10:	0019      	movs	r1, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	691b      	ldr	r3, [r3, #16]
 800fd16:	00da      	lsls	r2, r3, #3
 800fd18:	4b67      	ldr	r3, [pc, #412]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fd1a:	430a      	orrs	r2, r1
 800fd1c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fd1e:	e041      	b.n	800fda4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	68db      	ldr	r3, [r3, #12]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d024      	beq.n	800fd72 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fd28:	4b63      	ldr	r3, [pc, #396]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	4b62      	ldr	r3, [pc, #392]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fd2e:	2101      	movs	r1, #1
 800fd30:	430a      	orrs	r2, r1
 800fd32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd34:	f7fd fd78 	bl	800d828 <HAL_GetTick>
 800fd38:	0003      	movs	r3, r0
 800fd3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd3c:	e008      	b.n	800fd50 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fd3e:	f7fd fd73 	bl	800d828 <HAL_GetTick>
 800fd42:	0002      	movs	r2, r0
 800fd44:	69bb      	ldr	r3, [r7, #24]
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	2b02      	cmp	r3, #2
 800fd4a:	d901      	bls.n	800fd50 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800fd4c:	2303      	movs	r3, #3
 800fd4e:	e297      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fd50:	4b59      	ldr	r3, [pc, #356]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2202      	movs	r2, #2
 800fd56:	4013      	ands	r3, r2
 800fd58:	d0f1      	beq.n	800fd3e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd5a:	4b57      	ldr	r3, [pc, #348]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	22f8      	movs	r2, #248	; 0xf8
 800fd60:	4393      	bics	r3, r2
 800fd62:	0019      	movs	r1, r3
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	691b      	ldr	r3, [r3, #16]
 800fd68:	00da      	lsls	r2, r3, #3
 800fd6a:	4b53      	ldr	r3, [pc, #332]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fd6c:	430a      	orrs	r2, r1
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	e018      	b.n	800fda4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fd72:	4b51      	ldr	r3, [pc, #324]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	4b50      	ldr	r3, [pc, #320]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fd78:	2101      	movs	r1, #1
 800fd7a:	438a      	bics	r2, r1
 800fd7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd7e:	f7fd fd53 	bl	800d828 <HAL_GetTick>
 800fd82:	0003      	movs	r3, r0
 800fd84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fd86:	e008      	b.n	800fd9a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fd88:	f7fd fd4e 	bl	800d828 <HAL_GetTick>
 800fd8c:	0002      	movs	r2, r0
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	1ad3      	subs	r3, r2, r3
 800fd92:	2b02      	cmp	r3, #2
 800fd94:	d901      	bls.n	800fd9a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800fd96:	2303      	movs	r3, #3
 800fd98:	e272      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fd9a:	4b47      	ldr	r3, [pc, #284]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	2202      	movs	r2, #2
 800fda0:	4013      	ands	r3, r2
 800fda2:	d1f1      	bne.n	800fd88 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2208      	movs	r2, #8
 800fdaa:	4013      	ands	r3, r2
 800fdac:	d036      	beq.n	800fe1c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	69db      	ldr	r3, [r3, #28]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d019      	beq.n	800fdea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fdb6:	4b40      	ldr	r3, [pc, #256]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fdb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdba:	4b3f      	ldr	r3, [pc, #252]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fdbc:	2101      	movs	r1, #1
 800fdbe:	430a      	orrs	r2, r1
 800fdc0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fdc2:	f7fd fd31 	bl	800d828 <HAL_GetTick>
 800fdc6:	0003      	movs	r3, r0
 800fdc8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fdca:	e008      	b.n	800fdde <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fdcc:	f7fd fd2c 	bl	800d828 <HAL_GetTick>
 800fdd0:	0002      	movs	r2, r0
 800fdd2:	69bb      	ldr	r3, [r7, #24]
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	d901      	bls.n	800fdde <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800fdda:	2303      	movs	r3, #3
 800fddc:	e250      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fdde:	4b36      	ldr	r3, [pc, #216]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde2:	2202      	movs	r2, #2
 800fde4:	4013      	ands	r3, r2
 800fde6:	d0f1      	beq.n	800fdcc <HAL_RCC_OscConfig+0x24c>
 800fde8:	e018      	b.n	800fe1c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fdea:	4b33      	ldr	r3, [pc, #204]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fdec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdee:	4b32      	ldr	r3, [pc, #200]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fdf0:	2101      	movs	r1, #1
 800fdf2:	438a      	bics	r2, r1
 800fdf4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fdf6:	f7fd fd17 	bl	800d828 <HAL_GetTick>
 800fdfa:	0003      	movs	r3, r0
 800fdfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fdfe:	e008      	b.n	800fe12 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fe00:	f7fd fd12 	bl	800d828 <HAL_GetTick>
 800fe04:	0002      	movs	r2, r0
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	2b02      	cmp	r3, #2
 800fe0c:	d901      	bls.n	800fe12 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800fe0e:	2303      	movs	r3, #3
 800fe10:	e236      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fe12:	4b29      	ldr	r3, [pc, #164]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fe14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe16:	2202      	movs	r2, #2
 800fe18:	4013      	ands	r3, r2
 800fe1a:	d1f1      	bne.n	800fe00 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2204      	movs	r2, #4
 800fe22:	4013      	ands	r3, r2
 800fe24:	d100      	bne.n	800fe28 <HAL_RCC_OscConfig+0x2a8>
 800fe26:	e0b5      	b.n	800ff94 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fe28:	201f      	movs	r0, #31
 800fe2a:	183b      	adds	r3, r7, r0
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fe30:	4b21      	ldr	r3, [pc, #132]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fe32:	69da      	ldr	r2, [r3, #28]
 800fe34:	2380      	movs	r3, #128	; 0x80
 800fe36:	055b      	lsls	r3, r3, #21
 800fe38:	4013      	ands	r3, r2
 800fe3a:	d110      	bne.n	800fe5e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fe3c:	4b1e      	ldr	r3, [pc, #120]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fe3e:	69da      	ldr	r2, [r3, #28]
 800fe40:	4b1d      	ldr	r3, [pc, #116]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fe42:	2180      	movs	r1, #128	; 0x80
 800fe44:	0549      	lsls	r1, r1, #21
 800fe46:	430a      	orrs	r2, r1
 800fe48:	61da      	str	r2, [r3, #28]
 800fe4a:	4b1b      	ldr	r3, [pc, #108]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800fe4c:	69da      	ldr	r2, [r3, #28]
 800fe4e:	2380      	movs	r3, #128	; 0x80
 800fe50:	055b      	lsls	r3, r3, #21
 800fe52:	4013      	ands	r3, r2
 800fe54:	60fb      	str	r3, [r7, #12]
 800fe56:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800fe58:	183b      	adds	r3, r7, r0
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe5e:	4b19      	ldr	r3, [pc, #100]	; (800fec4 <HAL_RCC_OscConfig+0x344>)
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	2380      	movs	r3, #128	; 0x80
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	4013      	ands	r3, r2
 800fe68:	d11a      	bne.n	800fea0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fe6a:	4b16      	ldr	r3, [pc, #88]	; (800fec4 <HAL_RCC_OscConfig+0x344>)
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	4b15      	ldr	r3, [pc, #84]	; (800fec4 <HAL_RCC_OscConfig+0x344>)
 800fe70:	2180      	movs	r1, #128	; 0x80
 800fe72:	0049      	lsls	r1, r1, #1
 800fe74:	430a      	orrs	r2, r1
 800fe76:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fe78:	f7fd fcd6 	bl	800d828 <HAL_GetTick>
 800fe7c:	0003      	movs	r3, r0
 800fe7e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe80:	e008      	b.n	800fe94 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fe82:	f7fd fcd1 	bl	800d828 <HAL_GetTick>
 800fe86:	0002      	movs	r2, r0
 800fe88:	69bb      	ldr	r3, [r7, #24]
 800fe8a:	1ad3      	subs	r3, r2, r3
 800fe8c:	2b64      	cmp	r3, #100	; 0x64
 800fe8e:	d901      	bls.n	800fe94 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800fe90:	2303      	movs	r3, #3
 800fe92:	e1f5      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fe94:	4b0b      	ldr	r3, [pc, #44]	; (800fec4 <HAL_RCC_OscConfig+0x344>)
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	2380      	movs	r3, #128	; 0x80
 800fe9a:	005b      	lsls	r3, r3, #1
 800fe9c:	4013      	ands	r3, r2
 800fe9e:	d0f0      	beq.n	800fe82 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d10f      	bne.n	800fec8 <HAL_RCC_OscConfig+0x348>
 800fea8:	4b03      	ldr	r3, [pc, #12]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800feaa:	6a1a      	ldr	r2, [r3, #32]
 800feac:	4b02      	ldr	r3, [pc, #8]	; (800feb8 <HAL_RCC_OscConfig+0x338>)
 800feae:	2101      	movs	r1, #1
 800feb0:	430a      	orrs	r2, r1
 800feb2:	621a      	str	r2, [r3, #32]
 800feb4:	e036      	b.n	800ff24 <HAL_RCC_OscConfig+0x3a4>
 800feb6:	46c0      	nop			; (mov r8, r8)
 800feb8:	40021000 	.word	0x40021000
 800febc:	fffeffff 	.word	0xfffeffff
 800fec0:	fffbffff 	.word	0xfffbffff
 800fec4:	40007000 	.word	0x40007000
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	689b      	ldr	r3, [r3, #8]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d10c      	bne.n	800feea <HAL_RCC_OscConfig+0x36a>
 800fed0:	4bca      	ldr	r3, [pc, #808]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800fed2:	6a1a      	ldr	r2, [r3, #32]
 800fed4:	4bc9      	ldr	r3, [pc, #804]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800fed6:	2101      	movs	r1, #1
 800fed8:	438a      	bics	r2, r1
 800feda:	621a      	str	r2, [r3, #32]
 800fedc:	4bc7      	ldr	r3, [pc, #796]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800fede:	6a1a      	ldr	r2, [r3, #32]
 800fee0:	4bc6      	ldr	r3, [pc, #792]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800fee2:	2104      	movs	r1, #4
 800fee4:	438a      	bics	r2, r1
 800fee6:	621a      	str	r2, [r3, #32]
 800fee8:	e01c      	b.n	800ff24 <HAL_RCC_OscConfig+0x3a4>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	689b      	ldr	r3, [r3, #8]
 800feee:	2b05      	cmp	r3, #5
 800fef0:	d10c      	bne.n	800ff0c <HAL_RCC_OscConfig+0x38c>
 800fef2:	4bc2      	ldr	r3, [pc, #776]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800fef4:	6a1a      	ldr	r2, [r3, #32]
 800fef6:	4bc1      	ldr	r3, [pc, #772]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800fef8:	2104      	movs	r1, #4
 800fefa:	430a      	orrs	r2, r1
 800fefc:	621a      	str	r2, [r3, #32]
 800fefe:	4bbf      	ldr	r3, [pc, #764]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ff00:	6a1a      	ldr	r2, [r3, #32]
 800ff02:	4bbe      	ldr	r3, [pc, #760]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ff04:	2101      	movs	r1, #1
 800ff06:	430a      	orrs	r2, r1
 800ff08:	621a      	str	r2, [r3, #32]
 800ff0a:	e00b      	b.n	800ff24 <HAL_RCC_OscConfig+0x3a4>
 800ff0c:	4bbb      	ldr	r3, [pc, #748]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ff0e:	6a1a      	ldr	r2, [r3, #32]
 800ff10:	4bba      	ldr	r3, [pc, #744]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ff12:	2101      	movs	r1, #1
 800ff14:	438a      	bics	r2, r1
 800ff16:	621a      	str	r2, [r3, #32]
 800ff18:	4bb8      	ldr	r3, [pc, #736]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ff1a:	6a1a      	ldr	r2, [r3, #32]
 800ff1c:	4bb7      	ldr	r3, [pc, #732]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ff1e:	2104      	movs	r1, #4
 800ff20:	438a      	bics	r2, r1
 800ff22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	689b      	ldr	r3, [r3, #8]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d014      	beq.n	800ff56 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ff2c:	f7fd fc7c 	bl	800d828 <HAL_GetTick>
 800ff30:	0003      	movs	r3, r0
 800ff32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ff34:	e009      	b.n	800ff4a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff36:	f7fd fc77 	bl	800d828 <HAL_GetTick>
 800ff3a:	0002      	movs	r2, r0
 800ff3c:	69bb      	ldr	r3, [r7, #24]
 800ff3e:	1ad3      	subs	r3, r2, r3
 800ff40:	4aaf      	ldr	r2, [pc, #700]	; (8010200 <HAL_RCC_OscConfig+0x680>)
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d901      	bls.n	800ff4a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800ff46:	2303      	movs	r3, #3
 800ff48:	e19a      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ff4a:	4bac      	ldr	r3, [pc, #688]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ff4c:	6a1b      	ldr	r3, [r3, #32]
 800ff4e:	2202      	movs	r2, #2
 800ff50:	4013      	ands	r3, r2
 800ff52:	d0f0      	beq.n	800ff36 <HAL_RCC_OscConfig+0x3b6>
 800ff54:	e013      	b.n	800ff7e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ff56:	f7fd fc67 	bl	800d828 <HAL_GetTick>
 800ff5a:	0003      	movs	r3, r0
 800ff5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ff5e:	e009      	b.n	800ff74 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ff60:	f7fd fc62 	bl	800d828 <HAL_GetTick>
 800ff64:	0002      	movs	r2, r0
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	4aa5      	ldr	r2, [pc, #660]	; (8010200 <HAL_RCC_OscConfig+0x680>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d901      	bls.n	800ff74 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800ff70:	2303      	movs	r3, #3
 800ff72:	e185      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ff74:	4ba1      	ldr	r3, [pc, #644]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ff76:	6a1b      	ldr	r3, [r3, #32]
 800ff78:	2202      	movs	r2, #2
 800ff7a:	4013      	ands	r3, r2
 800ff7c:	d1f0      	bne.n	800ff60 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ff7e:	231f      	movs	r3, #31
 800ff80:	18fb      	adds	r3, r7, r3
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d105      	bne.n	800ff94 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ff88:	4b9c      	ldr	r3, [pc, #624]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ff8a:	69da      	ldr	r2, [r3, #28]
 800ff8c:	4b9b      	ldr	r3, [pc, #620]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ff8e:	499d      	ldr	r1, [pc, #628]	; (8010204 <HAL_RCC_OscConfig+0x684>)
 800ff90:	400a      	ands	r2, r1
 800ff92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2210      	movs	r2, #16
 800ff9a:	4013      	ands	r3, r2
 800ff9c:	d063      	beq.n	8010066 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	695b      	ldr	r3, [r3, #20]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	d12a      	bne.n	800fffc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800ffa6:	4b95      	ldr	r3, [pc, #596]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ffa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffaa:	4b94      	ldr	r3, [pc, #592]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ffac:	2104      	movs	r1, #4
 800ffae:	430a      	orrs	r2, r1
 800ffb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800ffb2:	4b92      	ldr	r3, [pc, #584]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ffb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffb6:	4b91      	ldr	r3, [pc, #580]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ffb8:	2101      	movs	r1, #1
 800ffba:	430a      	orrs	r2, r1
 800ffbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ffbe:	f7fd fc33 	bl	800d828 <HAL_GetTick>
 800ffc2:	0003      	movs	r3, r0
 800ffc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800ffc6:	e008      	b.n	800ffda <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800ffc8:	f7fd fc2e 	bl	800d828 <HAL_GetTick>
 800ffcc:	0002      	movs	r2, r0
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	2b02      	cmp	r3, #2
 800ffd4:	d901      	bls.n	800ffda <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800ffd6:	2303      	movs	r3, #3
 800ffd8:	e152      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800ffda:	4b88      	ldr	r3, [pc, #544]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ffdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffde:	2202      	movs	r2, #2
 800ffe0:	4013      	ands	r3, r2
 800ffe2:	d0f1      	beq.n	800ffc8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800ffe4:	4b85      	ldr	r3, [pc, #532]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800ffe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffe8:	22f8      	movs	r2, #248	; 0xf8
 800ffea:	4393      	bics	r3, r2
 800ffec:	0019      	movs	r1, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	699b      	ldr	r3, [r3, #24]
 800fff2:	00da      	lsls	r2, r3, #3
 800fff4:	4b81      	ldr	r3, [pc, #516]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 800fff6:	430a      	orrs	r2, r1
 800fff8:	635a      	str	r2, [r3, #52]	; 0x34
 800fffa:	e034      	b.n	8010066 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	695b      	ldr	r3, [r3, #20]
 8010000:	3305      	adds	r3, #5
 8010002:	d111      	bne.n	8010028 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8010004:	4b7d      	ldr	r3, [pc, #500]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 8010006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010008:	4b7c      	ldr	r3, [pc, #496]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801000a:	2104      	movs	r1, #4
 801000c:	438a      	bics	r2, r1
 801000e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8010010:	4b7a      	ldr	r3, [pc, #488]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 8010012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010014:	22f8      	movs	r2, #248	; 0xf8
 8010016:	4393      	bics	r3, r2
 8010018:	0019      	movs	r1, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	699b      	ldr	r3, [r3, #24]
 801001e:	00da      	lsls	r2, r3, #3
 8010020:	4b76      	ldr	r3, [pc, #472]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 8010022:	430a      	orrs	r2, r1
 8010024:	635a      	str	r2, [r3, #52]	; 0x34
 8010026:	e01e      	b.n	8010066 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8010028:	4b74      	ldr	r3, [pc, #464]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801002a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801002c:	4b73      	ldr	r3, [pc, #460]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801002e:	2104      	movs	r1, #4
 8010030:	430a      	orrs	r2, r1
 8010032:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8010034:	4b71      	ldr	r3, [pc, #452]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 8010036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010038:	4b70      	ldr	r3, [pc, #448]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801003a:	2101      	movs	r1, #1
 801003c:	438a      	bics	r2, r1
 801003e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010040:	f7fd fbf2 	bl	800d828 <HAL_GetTick>
 8010044:	0003      	movs	r3, r0
 8010046:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8010048:	e008      	b.n	801005c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801004a:	f7fd fbed 	bl	800d828 <HAL_GetTick>
 801004e:	0002      	movs	r2, r0
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	1ad3      	subs	r3, r2, r3
 8010054:	2b02      	cmp	r3, #2
 8010056:	d901      	bls.n	801005c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8010058:	2303      	movs	r3, #3
 801005a:	e111      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 801005c:	4b67      	ldr	r3, [pc, #412]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801005e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010060:	2202      	movs	r2, #2
 8010062:	4013      	ands	r3, r2
 8010064:	d1f1      	bne.n	801004a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	2220      	movs	r2, #32
 801006c:	4013      	ands	r3, r2
 801006e:	d05c      	beq.n	801012a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010070:	4b62      	ldr	r3, [pc, #392]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	220c      	movs	r2, #12
 8010076:	4013      	ands	r3, r2
 8010078:	2b0c      	cmp	r3, #12
 801007a:	d00e      	beq.n	801009a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801007c:	4b5f      	ldr	r3, [pc, #380]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	220c      	movs	r2, #12
 8010082:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8010084:	2b08      	cmp	r3, #8
 8010086:	d114      	bne.n	80100b2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8010088:	4b5c      	ldr	r3, [pc, #368]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801008a:	685a      	ldr	r2, [r3, #4]
 801008c:	23c0      	movs	r3, #192	; 0xc0
 801008e:	025b      	lsls	r3, r3, #9
 8010090:	401a      	ands	r2, r3
 8010092:	23c0      	movs	r3, #192	; 0xc0
 8010094:	025b      	lsls	r3, r3, #9
 8010096:	429a      	cmp	r2, r3
 8010098:	d10b      	bne.n	80100b2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 801009a:	4b58      	ldr	r3, [pc, #352]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801009c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801009e:	2380      	movs	r3, #128	; 0x80
 80100a0:	025b      	lsls	r3, r3, #9
 80100a2:	4013      	ands	r3, r2
 80100a4:	d040      	beq.n	8010128 <HAL_RCC_OscConfig+0x5a8>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6a1b      	ldr	r3, [r3, #32]
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d03c      	beq.n	8010128 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80100ae:	2301      	movs	r3, #1
 80100b0:	e0e6      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6a1b      	ldr	r3, [r3, #32]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d01b      	beq.n	80100f2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80100ba:	4b50      	ldr	r3, [pc, #320]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80100bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100be:	4b4f      	ldr	r3, [pc, #316]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80100c0:	2180      	movs	r1, #128	; 0x80
 80100c2:	0249      	lsls	r1, r1, #9
 80100c4:	430a      	orrs	r2, r1
 80100c6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100c8:	f7fd fbae 	bl	800d828 <HAL_GetTick>
 80100cc:	0003      	movs	r3, r0
 80100ce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80100d0:	e008      	b.n	80100e4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80100d2:	f7fd fba9 	bl	800d828 <HAL_GetTick>
 80100d6:	0002      	movs	r2, r0
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	1ad3      	subs	r3, r2, r3
 80100dc:	2b02      	cmp	r3, #2
 80100de:	d901      	bls.n	80100e4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80100e0:	2303      	movs	r3, #3
 80100e2:	e0cd      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80100e4:	4b45      	ldr	r3, [pc, #276]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80100e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100e8:	2380      	movs	r3, #128	; 0x80
 80100ea:	025b      	lsls	r3, r3, #9
 80100ec:	4013      	ands	r3, r2
 80100ee:	d0f0      	beq.n	80100d2 <HAL_RCC_OscConfig+0x552>
 80100f0:	e01b      	b.n	801012a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80100f2:	4b42      	ldr	r3, [pc, #264]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80100f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100f6:	4b41      	ldr	r3, [pc, #260]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80100f8:	4943      	ldr	r1, [pc, #268]	; (8010208 <HAL_RCC_OscConfig+0x688>)
 80100fa:	400a      	ands	r2, r1
 80100fc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100fe:	f7fd fb93 	bl	800d828 <HAL_GetTick>
 8010102:	0003      	movs	r3, r0
 8010104:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8010106:	e008      	b.n	801011a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010108:	f7fd fb8e 	bl	800d828 <HAL_GetTick>
 801010c:	0002      	movs	r2, r0
 801010e:	69bb      	ldr	r3, [r7, #24]
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	2b02      	cmp	r3, #2
 8010114:	d901      	bls.n	801011a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8010116:	2303      	movs	r3, #3
 8010118:	e0b2      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801011a:	4b38      	ldr	r3, [pc, #224]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801011c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801011e:	2380      	movs	r3, #128	; 0x80
 8010120:	025b      	lsls	r3, r3, #9
 8010122:	4013      	ands	r3, r2
 8010124:	d1f0      	bne.n	8010108 <HAL_RCC_OscConfig+0x588>
 8010126:	e000      	b.n	801012a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8010128:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801012e:	2b00      	cmp	r3, #0
 8010130:	d100      	bne.n	8010134 <HAL_RCC_OscConfig+0x5b4>
 8010132:	e0a4      	b.n	801027e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010134:	4b31      	ldr	r3, [pc, #196]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 8010136:	685b      	ldr	r3, [r3, #4]
 8010138:	220c      	movs	r2, #12
 801013a:	4013      	ands	r3, r2
 801013c:	2b08      	cmp	r3, #8
 801013e:	d100      	bne.n	8010142 <HAL_RCC_OscConfig+0x5c2>
 8010140:	e078      	b.n	8010234 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010146:	2b02      	cmp	r3, #2
 8010148:	d14c      	bne.n	80101e4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801014a:	4b2c      	ldr	r3, [pc, #176]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	4b2b      	ldr	r3, [pc, #172]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 8010150:	492e      	ldr	r1, [pc, #184]	; (801020c <HAL_RCC_OscConfig+0x68c>)
 8010152:	400a      	ands	r2, r1
 8010154:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010156:	f7fd fb67 	bl	800d828 <HAL_GetTick>
 801015a:	0003      	movs	r3, r0
 801015c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801015e:	e008      	b.n	8010172 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010160:	f7fd fb62 	bl	800d828 <HAL_GetTick>
 8010164:	0002      	movs	r2, r0
 8010166:	69bb      	ldr	r3, [r7, #24]
 8010168:	1ad3      	subs	r3, r2, r3
 801016a:	2b02      	cmp	r3, #2
 801016c:	d901      	bls.n	8010172 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 801016e:	2303      	movs	r3, #3
 8010170:	e086      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010172:	4b22      	ldr	r3, [pc, #136]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	2380      	movs	r3, #128	; 0x80
 8010178:	049b      	lsls	r3, r3, #18
 801017a:	4013      	ands	r3, r2
 801017c:	d1f0      	bne.n	8010160 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801017e:	4b1f      	ldr	r3, [pc, #124]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 8010180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010182:	220f      	movs	r2, #15
 8010184:	4393      	bics	r3, r2
 8010186:	0019      	movs	r1, r3
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801018c:	4b1b      	ldr	r3, [pc, #108]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 801018e:	430a      	orrs	r2, r1
 8010190:	62da      	str	r2, [r3, #44]	; 0x2c
 8010192:	4b1a      	ldr	r3, [pc, #104]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	4a1e      	ldr	r2, [pc, #120]	; (8010210 <HAL_RCC_OscConfig+0x690>)
 8010198:	4013      	ands	r3, r2
 801019a:	0019      	movs	r1, r3
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101a4:	431a      	orrs	r2, r3
 80101a6:	4b15      	ldr	r3, [pc, #84]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80101a8:	430a      	orrs	r2, r1
 80101aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80101ac:	4b13      	ldr	r3, [pc, #76]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	4b12      	ldr	r3, [pc, #72]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80101b2:	2180      	movs	r1, #128	; 0x80
 80101b4:	0449      	lsls	r1, r1, #17
 80101b6:	430a      	orrs	r2, r1
 80101b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80101ba:	f7fd fb35 	bl	800d828 <HAL_GetTick>
 80101be:	0003      	movs	r3, r0
 80101c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80101c2:	e008      	b.n	80101d6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80101c4:	f7fd fb30 	bl	800d828 <HAL_GetTick>
 80101c8:	0002      	movs	r2, r0
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	1ad3      	subs	r3, r2, r3
 80101ce:	2b02      	cmp	r3, #2
 80101d0:	d901      	bls.n	80101d6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80101d2:	2303      	movs	r3, #3
 80101d4:	e054      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80101d6:	4b09      	ldr	r3, [pc, #36]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	2380      	movs	r3, #128	; 0x80
 80101dc:	049b      	lsls	r3, r3, #18
 80101de:	4013      	ands	r3, r2
 80101e0:	d0f0      	beq.n	80101c4 <HAL_RCC_OscConfig+0x644>
 80101e2:	e04c      	b.n	801027e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80101e4:	4b05      	ldr	r3, [pc, #20]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	4b04      	ldr	r3, [pc, #16]	; (80101fc <HAL_RCC_OscConfig+0x67c>)
 80101ea:	4908      	ldr	r1, [pc, #32]	; (801020c <HAL_RCC_OscConfig+0x68c>)
 80101ec:	400a      	ands	r2, r1
 80101ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80101f0:	f7fd fb1a 	bl	800d828 <HAL_GetTick>
 80101f4:	0003      	movs	r3, r0
 80101f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80101f8:	e015      	b.n	8010226 <HAL_RCC_OscConfig+0x6a6>
 80101fa:	46c0      	nop			; (mov r8, r8)
 80101fc:	40021000 	.word	0x40021000
 8010200:	00001388 	.word	0x00001388
 8010204:	efffffff 	.word	0xefffffff
 8010208:	fffeffff 	.word	0xfffeffff
 801020c:	feffffff 	.word	0xfeffffff
 8010210:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010214:	f7fd fb08 	bl	800d828 <HAL_GetTick>
 8010218:	0002      	movs	r2, r0
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	1ad3      	subs	r3, r2, r3
 801021e:	2b02      	cmp	r3, #2
 8010220:	d901      	bls.n	8010226 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8010222:	2303      	movs	r3, #3
 8010224:	e02c      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010226:	4b18      	ldr	r3, [pc, #96]	; (8010288 <HAL_RCC_OscConfig+0x708>)
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	2380      	movs	r3, #128	; 0x80
 801022c:	049b      	lsls	r3, r3, #18
 801022e:	4013      	ands	r3, r2
 8010230:	d1f0      	bne.n	8010214 <HAL_RCC_OscConfig+0x694>
 8010232:	e024      	b.n	801027e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010238:	2b01      	cmp	r3, #1
 801023a:	d101      	bne.n	8010240 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 801023c:	2301      	movs	r3, #1
 801023e:	e01f      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8010240:	4b11      	ldr	r3, [pc, #68]	; (8010288 <HAL_RCC_OscConfig+0x708>)
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8010246:	4b10      	ldr	r3, [pc, #64]	; (8010288 <HAL_RCC_OscConfig+0x708>)
 8010248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801024a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801024c:	697a      	ldr	r2, [r7, #20]
 801024e:	23c0      	movs	r3, #192	; 0xc0
 8010250:	025b      	lsls	r3, r3, #9
 8010252:	401a      	ands	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010258:	429a      	cmp	r2, r3
 801025a:	d10e      	bne.n	801027a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	220f      	movs	r2, #15
 8010260:	401a      	ands	r2, r3
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8010266:	429a      	cmp	r2, r3
 8010268:	d107      	bne.n	801027a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 801026a:	697a      	ldr	r2, [r7, #20]
 801026c:	23f0      	movs	r3, #240	; 0xf0
 801026e:	039b      	lsls	r3, r3, #14
 8010270:	401a      	ands	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8010276:	429a      	cmp	r2, r3
 8010278:	d001      	beq.n	801027e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 801027a:	2301      	movs	r3, #1
 801027c:	e000      	b.n	8010280 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 801027e:	2300      	movs	r3, #0
}
 8010280:	0018      	movs	r0, r3
 8010282:	46bd      	mov	sp, r7
 8010284:	b008      	add	sp, #32
 8010286:	bd80      	pop	{r7, pc}
 8010288:	40021000 	.word	0x40021000

0801028c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b084      	sub	sp, #16
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d101      	bne.n	80102a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801029c:	2301      	movs	r3, #1
 801029e:	e0bf      	b.n	8010420 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80102a0:	4b61      	ldr	r3, [pc, #388]	; (8010428 <HAL_RCC_ClockConfig+0x19c>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2201      	movs	r2, #1
 80102a6:	4013      	ands	r3, r2
 80102a8:	683a      	ldr	r2, [r7, #0]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d911      	bls.n	80102d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80102ae:	4b5e      	ldr	r3, [pc, #376]	; (8010428 <HAL_RCC_ClockConfig+0x19c>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2201      	movs	r2, #1
 80102b4:	4393      	bics	r3, r2
 80102b6:	0019      	movs	r1, r3
 80102b8:	4b5b      	ldr	r3, [pc, #364]	; (8010428 <HAL_RCC_ClockConfig+0x19c>)
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	430a      	orrs	r2, r1
 80102be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80102c0:	4b59      	ldr	r3, [pc, #356]	; (8010428 <HAL_RCC_ClockConfig+0x19c>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2201      	movs	r2, #1
 80102c6:	4013      	ands	r3, r2
 80102c8:	683a      	ldr	r2, [r7, #0]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d001      	beq.n	80102d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80102ce:	2301      	movs	r3, #1
 80102d0:	e0a6      	b.n	8010420 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2202      	movs	r2, #2
 80102d8:	4013      	ands	r3, r2
 80102da:	d015      	beq.n	8010308 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2204      	movs	r2, #4
 80102e2:	4013      	ands	r3, r2
 80102e4:	d006      	beq.n	80102f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80102e6:	4b51      	ldr	r3, [pc, #324]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 80102e8:	685a      	ldr	r2, [r3, #4]
 80102ea:	4b50      	ldr	r3, [pc, #320]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 80102ec:	21e0      	movs	r1, #224	; 0xe0
 80102ee:	00c9      	lsls	r1, r1, #3
 80102f0:	430a      	orrs	r2, r1
 80102f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80102f4:	4b4d      	ldr	r3, [pc, #308]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	22f0      	movs	r2, #240	; 0xf0
 80102fa:	4393      	bics	r3, r2
 80102fc:	0019      	movs	r1, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	689a      	ldr	r2, [r3, #8]
 8010302:	4b4a      	ldr	r3, [pc, #296]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 8010304:	430a      	orrs	r2, r1
 8010306:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2201      	movs	r2, #1
 801030e:	4013      	ands	r3, r2
 8010310:	d04c      	beq.n	80103ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	685b      	ldr	r3, [r3, #4]
 8010316:	2b01      	cmp	r3, #1
 8010318:	d107      	bne.n	801032a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801031a:	4b44      	ldr	r3, [pc, #272]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 801031c:	681a      	ldr	r2, [r3, #0]
 801031e:	2380      	movs	r3, #128	; 0x80
 8010320:	029b      	lsls	r3, r3, #10
 8010322:	4013      	ands	r3, r2
 8010324:	d120      	bne.n	8010368 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8010326:	2301      	movs	r3, #1
 8010328:	e07a      	b.n	8010420 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	2b02      	cmp	r3, #2
 8010330:	d107      	bne.n	8010342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010332:	4b3e      	ldr	r3, [pc, #248]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	2380      	movs	r3, #128	; 0x80
 8010338:	049b      	lsls	r3, r3, #18
 801033a:	4013      	ands	r3, r2
 801033c:	d114      	bne.n	8010368 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 801033e:	2301      	movs	r3, #1
 8010340:	e06e      	b.n	8010420 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	2b03      	cmp	r3, #3
 8010348:	d107      	bne.n	801035a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801034a:	4b38      	ldr	r3, [pc, #224]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 801034c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801034e:	2380      	movs	r3, #128	; 0x80
 8010350:	025b      	lsls	r3, r3, #9
 8010352:	4013      	ands	r3, r2
 8010354:	d108      	bne.n	8010368 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8010356:	2301      	movs	r3, #1
 8010358:	e062      	b.n	8010420 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801035a:	4b34      	ldr	r3, [pc, #208]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2202      	movs	r2, #2
 8010360:	4013      	ands	r3, r2
 8010362:	d101      	bne.n	8010368 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8010364:	2301      	movs	r3, #1
 8010366:	e05b      	b.n	8010420 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010368:	4b30      	ldr	r3, [pc, #192]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	2203      	movs	r2, #3
 801036e:	4393      	bics	r3, r2
 8010370:	0019      	movs	r1, r3
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	685a      	ldr	r2, [r3, #4]
 8010376:	4b2d      	ldr	r3, [pc, #180]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 8010378:	430a      	orrs	r2, r1
 801037a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801037c:	f7fd fa54 	bl	800d828 <HAL_GetTick>
 8010380:	0003      	movs	r3, r0
 8010382:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010384:	e009      	b.n	801039a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010386:	f7fd fa4f 	bl	800d828 <HAL_GetTick>
 801038a:	0002      	movs	r2, r0
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	1ad3      	subs	r3, r2, r3
 8010390:	4a27      	ldr	r2, [pc, #156]	; (8010430 <HAL_RCC_ClockConfig+0x1a4>)
 8010392:	4293      	cmp	r3, r2
 8010394:	d901      	bls.n	801039a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010396:	2303      	movs	r3, #3
 8010398:	e042      	b.n	8010420 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801039a:	4b24      	ldr	r3, [pc, #144]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	220c      	movs	r2, #12
 80103a0:	401a      	ands	r2, r3
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	009b      	lsls	r3, r3, #2
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d1ec      	bne.n	8010386 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80103ac:	4b1e      	ldr	r3, [pc, #120]	; (8010428 <HAL_RCC_ClockConfig+0x19c>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2201      	movs	r2, #1
 80103b2:	4013      	ands	r3, r2
 80103b4:	683a      	ldr	r2, [r7, #0]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d211      	bcs.n	80103de <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80103ba:	4b1b      	ldr	r3, [pc, #108]	; (8010428 <HAL_RCC_ClockConfig+0x19c>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2201      	movs	r2, #1
 80103c0:	4393      	bics	r3, r2
 80103c2:	0019      	movs	r1, r3
 80103c4:	4b18      	ldr	r3, [pc, #96]	; (8010428 <HAL_RCC_ClockConfig+0x19c>)
 80103c6:	683a      	ldr	r2, [r7, #0]
 80103c8:	430a      	orrs	r2, r1
 80103ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80103cc:	4b16      	ldr	r3, [pc, #88]	; (8010428 <HAL_RCC_ClockConfig+0x19c>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2201      	movs	r2, #1
 80103d2:	4013      	ands	r3, r2
 80103d4:	683a      	ldr	r2, [r7, #0]
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d001      	beq.n	80103de <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80103da:	2301      	movs	r3, #1
 80103dc:	e020      	b.n	8010420 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2204      	movs	r2, #4
 80103e4:	4013      	ands	r3, r2
 80103e6:	d009      	beq.n	80103fc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80103e8:	4b10      	ldr	r3, [pc, #64]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	4a11      	ldr	r2, [pc, #68]	; (8010434 <HAL_RCC_ClockConfig+0x1a8>)
 80103ee:	4013      	ands	r3, r2
 80103f0:	0019      	movs	r1, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	68da      	ldr	r2, [r3, #12]
 80103f6:	4b0d      	ldr	r3, [pc, #52]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 80103f8:	430a      	orrs	r2, r1
 80103fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80103fc:	f000 f820 	bl	8010440 <HAL_RCC_GetSysClockFreq>
 8010400:	0001      	movs	r1, r0
 8010402:	4b0a      	ldr	r3, [pc, #40]	; (801042c <HAL_RCC_ClockConfig+0x1a0>)
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	091b      	lsrs	r3, r3, #4
 8010408:	220f      	movs	r2, #15
 801040a:	4013      	ands	r3, r2
 801040c:	4a0a      	ldr	r2, [pc, #40]	; (8010438 <HAL_RCC_ClockConfig+0x1ac>)
 801040e:	5cd3      	ldrb	r3, [r2, r3]
 8010410:	000a      	movs	r2, r1
 8010412:	40da      	lsrs	r2, r3
 8010414:	4b09      	ldr	r3, [pc, #36]	; (801043c <HAL_RCC_ClockConfig+0x1b0>)
 8010416:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8010418:	2003      	movs	r0, #3
 801041a:	f7fd f9bf 	bl	800d79c <HAL_InitTick>
  
  return HAL_OK;
 801041e:	2300      	movs	r3, #0
}
 8010420:	0018      	movs	r0, r3
 8010422:	46bd      	mov	sp, r7
 8010424:	b004      	add	sp, #16
 8010426:	bd80      	pop	{r7, pc}
 8010428:	40022000 	.word	0x40022000
 801042c:	40021000 	.word	0x40021000
 8010430:	00001388 	.word	0x00001388
 8010434:	fffff8ff 	.word	0xfffff8ff
 8010438:	0801a0d4 	.word	0x0801a0d4
 801043c:	200000d4 	.word	0x200000d4

08010440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010440:	b590      	push	{r4, r7, lr}
 8010442:	b08f      	sub	sp, #60	; 0x3c
 8010444:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8010446:	2314      	movs	r3, #20
 8010448:	18fb      	adds	r3, r7, r3
 801044a:	4a38      	ldr	r2, [pc, #224]	; (801052c <HAL_RCC_GetSysClockFreq+0xec>)
 801044c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801044e:	c313      	stmia	r3!, {r0, r1, r4}
 8010450:	6812      	ldr	r2, [r2, #0]
 8010452:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8010454:	1d3b      	adds	r3, r7, #4
 8010456:	4a36      	ldr	r2, [pc, #216]	; (8010530 <HAL_RCC_GetSysClockFreq+0xf0>)
 8010458:	ca13      	ldmia	r2!, {r0, r1, r4}
 801045a:	c313      	stmia	r3!, {r0, r1, r4}
 801045c:	6812      	ldr	r2, [r2, #0]
 801045e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8010460:	2300      	movs	r3, #0
 8010462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010464:	2300      	movs	r3, #0
 8010466:	62bb      	str	r3, [r7, #40]	; 0x28
 8010468:	2300      	movs	r3, #0
 801046a:	637b      	str	r3, [r7, #52]	; 0x34
 801046c:	2300      	movs	r3, #0
 801046e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8010470:	2300      	movs	r3, #0
 8010472:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8010474:	4b2f      	ldr	r3, [pc, #188]	; (8010534 <HAL_RCC_GetSysClockFreq+0xf4>)
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047c:	220c      	movs	r2, #12
 801047e:	4013      	ands	r3, r2
 8010480:	2b0c      	cmp	r3, #12
 8010482:	d047      	beq.n	8010514 <HAL_RCC_GetSysClockFreq+0xd4>
 8010484:	d849      	bhi.n	801051a <HAL_RCC_GetSysClockFreq+0xda>
 8010486:	2b04      	cmp	r3, #4
 8010488:	d002      	beq.n	8010490 <HAL_RCC_GetSysClockFreq+0x50>
 801048a:	2b08      	cmp	r3, #8
 801048c:	d003      	beq.n	8010496 <HAL_RCC_GetSysClockFreq+0x56>
 801048e:	e044      	b.n	801051a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010490:	4b29      	ldr	r3, [pc, #164]	; (8010538 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010492:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8010494:	e044      	b.n	8010520 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8010496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010498:	0c9b      	lsrs	r3, r3, #18
 801049a:	220f      	movs	r2, #15
 801049c:	4013      	ands	r3, r2
 801049e:	2214      	movs	r2, #20
 80104a0:	18ba      	adds	r2, r7, r2
 80104a2:	5cd3      	ldrb	r3, [r2, r3]
 80104a4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80104a6:	4b23      	ldr	r3, [pc, #140]	; (8010534 <HAL_RCC_GetSysClockFreq+0xf4>)
 80104a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104aa:	220f      	movs	r2, #15
 80104ac:	4013      	ands	r3, r2
 80104ae:	1d3a      	adds	r2, r7, #4
 80104b0:	5cd3      	ldrb	r3, [r2, r3]
 80104b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80104b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104b6:	23c0      	movs	r3, #192	; 0xc0
 80104b8:	025b      	lsls	r3, r3, #9
 80104ba:	401a      	ands	r2, r3
 80104bc:	2380      	movs	r3, #128	; 0x80
 80104be:	025b      	lsls	r3, r3, #9
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d109      	bne.n	80104d8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80104c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104c6:	481c      	ldr	r0, [pc, #112]	; (8010538 <HAL_RCC_GetSysClockFreq+0xf8>)
 80104c8:	f7f8 fe3a 	bl	8009140 <__udivsi3>
 80104cc:	0003      	movs	r3, r0
 80104ce:	001a      	movs	r2, r3
 80104d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d2:	4353      	muls	r3, r2
 80104d4:	637b      	str	r3, [r7, #52]	; 0x34
 80104d6:	e01a      	b.n	801050e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80104d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104da:	23c0      	movs	r3, #192	; 0xc0
 80104dc:	025b      	lsls	r3, r3, #9
 80104de:	401a      	ands	r2, r3
 80104e0:	23c0      	movs	r3, #192	; 0xc0
 80104e2:	025b      	lsls	r3, r3, #9
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d109      	bne.n	80104fc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80104e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104ea:	4814      	ldr	r0, [pc, #80]	; (801053c <HAL_RCC_GetSysClockFreq+0xfc>)
 80104ec:	f7f8 fe28 	bl	8009140 <__udivsi3>
 80104f0:	0003      	movs	r3, r0
 80104f2:	001a      	movs	r2, r3
 80104f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f6:	4353      	muls	r3, r2
 80104f8:	637b      	str	r3, [r7, #52]	; 0x34
 80104fa:	e008      	b.n	801050e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80104fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104fe:	480e      	ldr	r0, [pc, #56]	; (8010538 <HAL_RCC_GetSysClockFreq+0xf8>)
 8010500:	f7f8 fe1e 	bl	8009140 <__udivsi3>
 8010504:	0003      	movs	r3, r0
 8010506:	001a      	movs	r2, r3
 8010508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050a:	4353      	muls	r3, r2
 801050c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 801050e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010510:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8010512:	e005      	b.n	8010520 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8010514:	4b09      	ldr	r3, [pc, #36]	; (801053c <HAL_RCC_GetSysClockFreq+0xfc>)
 8010516:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8010518:	e002      	b.n	8010520 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 801051a:	4b07      	ldr	r3, [pc, #28]	; (8010538 <HAL_RCC_GetSysClockFreq+0xf8>)
 801051c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 801051e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8010520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8010522:	0018      	movs	r0, r3
 8010524:	46bd      	mov	sp, r7
 8010526:	b00f      	add	sp, #60	; 0x3c
 8010528:	bd90      	pop	{r4, r7, pc}
 801052a:	46c0      	nop			; (mov r8, r8)
 801052c:	08019f6c 	.word	0x08019f6c
 8010530:	08019f7c 	.word	0x08019f7c
 8010534:	40021000 	.word	0x40021000
 8010538:	007a1200 	.word	0x007a1200
 801053c:	02dc6c00 	.word	0x02dc6c00

08010540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010544:	4b02      	ldr	r3, [pc, #8]	; (8010550 <HAL_RCC_GetHCLKFreq+0x10>)
 8010546:	681b      	ldr	r3, [r3, #0]
}
 8010548:	0018      	movs	r0, r3
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	46c0      	nop			; (mov r8, r8)
 8010550:	200000d4 	.word	0x200000d4

08010554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8010558:	f7ff fff2 	bl	8010540 <HAL_RCC_GetHCLKFreq>
 801055c:	0001      	movs	r1, r0
 801055e:	4b06      	ldr	r3, [pc, #24]	; (8010578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	0a1b      	lsrs	r3, r3, #8
 8010564:	2207      	movs	r2, #7
 8010566:	4013      	ands	r3, r2
 8010568:	4a04      	ldr	r2, [pc, #16]	; (801057c <HAL_RCC_GetPCLK1Freq+0x28>)
 801056a:	5cd3      	ldrb	r3, [r2, r3]
 801056c:	40d9      	lsrs	r1, r3
 801056e:	000b      	movs	r3, r1
}    
 8010570:	0018      	movs	r0, r3
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	46c0      	nop			; (mov r8, r8)
 8010578:	40021000 	.word	0x40021000
 801057c:	0801a0e4 	.word	0x0801a0e4

08010580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b086      	sub	sp, #24
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010588:	2300      	movs	r3, #0
 801058a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 801058c:	2300      	movs	r3, #0
 801058e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	2380      	movs	r3, #128	; 0x80
 8010596:	025b      	lsls	r3, r3, #9
 8010598:	4013      	ands	r3, r2
 801059a:	d100      	bne.n	801059e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 801059c:	e08e      	b.n	80106bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 801059e:	2017      	movs	r0, #23
 80105a0:	183b      	adds	r3, r7, r0
 80105a2:	2200      	movs	r2, #0
 80105a4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80105a6:	4b6e      	ldr	r3, [pc, #440]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80105a8:	69da      	ldr	r2, [r3, #28]
 80105aa:	2380      	movs	r3, #128	; 0x80
 80105ac:	055b      	lsls	r3, r3, #21
 80105ae:	4013      	ands	r3, r2
 80105b0:	d110      	bne.n	80105d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80105b2:	4b6b      	ldr	r3, [pc, #428]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80105b4:	69da      	ldr	r2, [r3, #28]
 80105b6:	4b6a      	ldr	r3, [pc, #424]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80105b8:	2180      	movs	r1, #128	; 0x80
 80105ba:	0549      	lsls	r1, r1, #21
 80105bc:	430a      	orrs	r2, r1
 80105be:	61da      	str	r2, [r3, #28]
 80105c0:	4b67      	ldr	r3, [pc, #412]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80105c2:	69da      	ldr	r2, [r3, #28]
 80105c4:	2380      	movs	r3, #128	; 0x80
 80105c6:	055b      	lsls	r3, r3, #21
 80105c8:	4013      	ands	r3, r2
 80105ca:	60bb      	str	r3, [r7, #8]
 80105cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80105ce:	183b      	adds	r3, r7, r0
 80105d0:	2201      	movs	r2, #1
 80105d2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80105d4:	4b63      	ldr	r3, [pc, #396]	; (8010764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	2380      	movs	r3, #128	; 0x80
 80105da:	005b      	lsls	r3, r3, #1
 80105dc:	4013      	ands	r3, r2
 80105de:	d11a      	bne.n	8010616 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80105e0:	4b60      	ldr	r3, [pc, #384]	; (8010764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80105e2:	681a      	ldr	r2, [r3, #0]
 80105e4:	4b5f      	ldr	r3, [pc, #380]	; (8010764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80105e6:	2180      	movs	r1, #128	; 0x80
 80105e8:	0049      	lsls	r1, r1, #1
 80105ea:	430a      	orrs	r2, r1
 80105ec:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80105ee:	f7fd f91b 	bl	800d828 <HAL_GetTick>
 80105f2:	0003      	movs	r3, r0
 80105f4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80105f6:	e008      	b.n	801060a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80105f8:	f7fd f916 	bl	800d828 <HAL_GetTick>
 80105fc:	0002      	movs	r2, r0
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	2b64      	cmp	r3, #100	; 0x64
 8010604:	d901      	bls.n	801060a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8010606:	2303      	movs	r3, #3
 8010608:	e0a6      	b.n	8010758 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801060a:	4b56      	ldr	r3, [pc, #344]	; (8010764 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	2380      	movs	r3, #128	; 0x80
 8010610:	005b      	lsls	r3, r3, #1
 8010612:	4013      	ands	r3, r2
 8010614:	d0f0      	beq.n	80105f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8010616:	4b52      	ldr	r3, [pc, #328]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010618:	6a1a      	ldr	r2, [r3, #32]
 801061a:	23c0      	movs	r3, #192	; 0xc0
 801061c:	009b      	lsls	r3, r3, #2
 801061e:	4013      	ands	r3, r2
 8010620:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d034      	beq.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	685a      	ldr	r2, [r3, #4]
 801062c:	23c0      	movs	r3, #192	; 0xc0
 801062e:	009b      	lsls	r3, r3, #2
 8010630:	4013      	ands	r3, r2
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	429a      	cmp	r2, r3
 8010636:	d02c      	beq.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010638:	4b49      	ldr	r3, [pc, #292]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 801063a:	6a1b      	ldr	r3, [r3, #32]
 801063c:	4a4a      	ldr	r2, [pc, #296]	; (8010768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 801063e:	4013      	ands	r3, r2
 8010640:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8010642:	4b47      	ldr	r3, [pc, #284]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010644:	6a1a      	ldr	r2, [r3, #32]
 8010646:	4b46      	ldr	r3, [pc, #280]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010648:	2180      	movs	r1, #128	; 0x80
 801064a:	0249      	lsls	r1, r1, #9
 801064c:	430a      	orrs	r2, r1
 801064e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010650:	4b43      	ldr	r3, [pc, #268]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010652:	6a1a      	ldr	r2, [r3, #32]
 8010654:	4b42      	ldr	r3, [pc, #264]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010656:	4945      	ldr	r1, [pc, #276]	; (801076c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8010658:	400a      	ands	r2, r1
 801065a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 801065c:	4b40      	ldr	r3, [pc, #256]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 801065e:	68fa      	ldr	r2, [r7, #12]
 8010660:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2201      	movs	r2, #1
 8010666:	4013      	ands	r3, r2
 8010668:	d013      	beq.n	8010692 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801066a:	f7fd f8dd 	bl	800d828 <HAL_GetTick>
 801066e:	0003      	movs	r3, r0
 8010670:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010672:	e009      	b.n	8010688 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010674:	f7fd f8d8 	bl	800d828 <HAL_GetTick>
 8010678:	0002      	movs	r2, r0
 801067a:	693b      	ldr	r3, [r7, #16]
 801067c:	1ad3      	subs	r3, r2, r3
 801067e:	4a3c      	ldr	r2, [pc, #240]	; (8010770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d901      	bls.n	8010688 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8010684:	2303      	movs	r3, #3
 8010686:	e067      	b.n	8010758 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010688:	4b35      	ldr	r3, [pc, #212]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 801068a:	6a1b      	ldr	r3, [r3, #32]
 801068c:	2202      	movs	r2, #2
 801068e:	4013      	ands	r3, r2
 8010690:	d0f0      	beq.n	8010674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010692:	4b33      	ldr	r3, [pc, #204]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010694:	6a1b      	ldr	r3, [r3, #32]
 8010696:	4a34      	ldr	r2, [pc, #208]	; (8010768 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8010698:	4013      	ands	r3, r2
 801069a:	0019      	movs	r1, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	685a      	ldr	r2, [r3, #4]
 80106a0:	4b2f      	ldr	r3, [pc, #188]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80106a2:	430a      	orrs	r2, r1
 80106a4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80106a6:	2317      	movs	r3, #23
 80106a8:	18fb      	adds	r3, r7, r3
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	2b01      	cmp	r3, #1
 80106ae:	d105      	bne.n	80106bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80106b0:	4b2b      	ldr	r3, [pc, #172]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80106b2:	69da      	ldr	r2, [r3, #28]
 80106b4:	4b2a      	ldr	r3, [pc, #168]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80106b6:	492f      	ldr	r1, [pc, #188]	; (8010774 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80106b8:	400a      	ands	r2, r1
 80106ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2201      	movs	r2, #1
 80106c2:	4013      	ands	r3, r2
 80106c4:	d009      	beq.n	80106da <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80106c6:	4b26      	ldr	r3, [pc, #152]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80106c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ca:	2203      	movs	r2, #3
 80106cc:	4393      	bics	r3, r2
 80106ce:	0019      	movs	r1, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	689a      	ldr	r2, [r3, #8]
 80106d4:	4b22      	ldr	r3, [pc, #136]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80106d6:	430a      	orrs	r2, r1
 80106d8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2202      	movs	r2, #2
 80106e0:	4013      	ands	r3, r2
 80106e2:	d009      	beq.n	80106f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80106e4:	4b1e      	ldr	r3, [pc, #120]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80106e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e8:	4a23      	ldr	r2, [pc, #140]	; (8010778 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80106ea:	4013      	ands	r3, r2
 80106ec:	0019      	movs	r1, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	68da      	ldr	r2, [r3, #12]
 80106f2:	4b1b      	ldr	r3, [pc, #108]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80106f4:	430a      	orrs	r2, r1
 80106f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2220      	movs	r2, #32
 80106fe:	4013      	ands	r3, r2
 8010700:	d009      	beq.n	8010716 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010702:	4b17      	ldr	r3, [pc, #92]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010706:	2210      	movs	r2, #16
 8010708:	4393      	bics	r3, r2
 801070a:	0019      	movs	r1, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	691a      	ldr	r2, [r3, #16]
 8010710:	4b13      	ldr	r3, [pc, #76]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010712:	430a      	orrs	r2, r1
 8010714:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	2380      	movs	r3, #128	; 0x80
 801071c:	029b      	lsls	r3, r3, #10
 801071e:	4013      	ands	r3, r2
 8010720:	d009      	beq.n	8010736 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010722:	4b0f      	ldr	r3, [pc, #60]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010726:	2280      	movs	r2, #128	; 0x80
 8010728:	4393      	bics	r3, r2
 801072a:	0019      	movs	r1, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	699a      	ldr	r2, [r3, #24]
 8010730:	4b0b      	ldr	r3, [pc, #44]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010732:	430a      	orrs	r2, r1
 8010734:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	2380      	movs	r3, #128	; 0x80
 801073c:	00db      	lsls	r3, r3, #3
 801073e:	4013      	ands	r3, r2
 8010740:	d009      	beq.n	8010756 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010742:	4b07      	ldr	r3, [pc, #28]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010746:	2240      	movs	r2, #64	; 0x40
 8010748:	4393      	bics	r3, r2
 801074a:	0019      	movs	r1, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	695a      	ldr	r2, [r3, #20]
 8010750:	4b03      	ldr	r3, [pc, #12]	; (8010760 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8010752:	430a      	orrs	r2, r1
 8010754:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8010756:	2300      	movs	r3, #0
}
 8010758:	0018      	movs	r0, r3
 801075a:	46bd      	mov	sp, r7
 801075c:	b006      	add	sp, #24
 801075e:	bd80      	pop	{r7, pc}
 8010760:	40021000 	.word	0x40021000
 8010764:	40007000 	.word	0x40007000
 8010768:	fffffcff 	.word	0xfffffcff
 801076c:	fffeffff 	.word	0xfffeffff
 8010770:	00001388 	.word	0x00001388
 8010774:	efffffff 	.word	0xefffffff
 8010778:	fffcffff 	.word	0xfffcffff

0801077c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d101      	bne.n	801078e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801078a:	2301      	movs	r3, #1
 801078c:	e0a8      	b.n	80108e0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010792:	2b00      	cmp	r3, #0
 8010794:	d109      	bne.n	80107aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	685a      	ldr	r2, [r3, #4]
 801079a:	2382      	movs	r3, #130	; 0x82
 801079c:	005b      	lsls	r3, r3, #1
 801079e:	429a      	cmp	r2, r3
 80107a0:	d009      	beq.n	80107b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2200      	movs	r2, #0
 80107a6:	61da      	str	r2, [r3, #28]
 80107a8:	e005      	b.n	80107b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2200      	movs	r2, #0
 80107ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	225d      	movs	r2, #93	; 0x5d
 80107c0:	5c9b      	ldrb	r3, [r3, r2]
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d107      	bne.n	80107d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	225c      	movs	r2, #92	; 0x5c
 80107cc:	2100      	movs	r1, #0
 80107ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	0018      	movs	r0, r3
 80107d4:	f7fc fe46 	bl	800d464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	225d      	movs	r2, #93	; 0x5d
 80107dc:	2102      	movs	r1, #2
 80107de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2140      	movs	r1, #64	; 0x40
 80107ec:	438a      	bics	r2, r1
 80107ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	68da      	ldr	r2, [r3, #12]
 80107f4:	23e0      	movs	r3, #224	; 0xe0
 80107f6:	00db      	lsls	r3, r3, #3
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d902      	bls.n	8010802 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80107fc:	2300      	movs	r3, #0
 80107fe:	60fb      	str	r3, [r7, #12]
 8010800:	e002      	b.n	8010808 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010802:	2380      	movs	r3, #128	; 0x80
 8010804:	015b      	lsls	r3, r3, #5
 8010806:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	68da      	ldr	r2, [r3, #12]
 801080c:	23f0      	movs	r3, #240	; 0xf0
 801080e:	011b      	lsls	r3, r3, #4
 8010810:	429a      	cmp	r2, r3
 8010812:	d008      	beq.n	8010826 <HAL_SPI_Init+0xaa>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	68da      	ldr	r2, [r3, #12]
 8010818:	23e0      	movs	r3, #224	; 0xe0
 801081a:	00db      	lsls	r3, r3, #3
 801081c:	429a      	cmp	r2, r3
 801081e:	d002      	beq.n	8010826 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	685a      	ldr	r2, [r3, #4]
 801082a:	2382      	movs	r3, #130	; 0x82
 801082c:	005b      	lsls	r3, r3, #1
 801082e:	401a      	ands	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6899      	ldr	r1, [r3, #8]
 8010834:	2384      	movs	r3, #132	; 0x84
 8010836:	021b      	lsls	r3, r3, #8
 8010838:	400b      	ands	r3, r1
 801083a:	431a      	orrs	r2, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	691b      	ldr	r3, [r3, #16]
 8010840:	2102      	movs	r1, #2
 8010842:	400b      	ands	r3, r1
 8010844:	431a      	orrs	r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	695b      	ldr	r3, [r3, #20]
 801084a:	2101      	movs	r1, #1
 801084c:	400b      	ands	r3, r1
 801084e:	431a      	orrs	r2, r3
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6999      	ldr	r1, [r3, #24]
 8010854:	2380      	movs	r3, #128	; 0x80
 8010856:	009b      	lsls	r3, r3, #2
 8010858:	400b      	ands	r3, r1
 801085a:	431a      	orrs	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	69db      	ldr	r3, [r3, #28]
 8010860:	2138      	movs	r1, #56	; 0x38
 8010862:	400b      	ands	r3, r1
 8010864:	431a      	orrs	r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6a1b      	ldr	r3, [r3, #32]
 801086a:	2180      	movs	r1, #128	; 0x80
 801086c:	400b      	ands	r3, r1
 801086e:	431a      	orrs	r2, r3
 8010870:	0011      	movs	r1, r2
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010876:	2380      	movs	r3, #128	; 0x80
 8010878:	019b      	lsls	r3, r3, #6
 801087a:	401a      	ands	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	430a      	orrs	r2, r1
 8010882:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	699b      	ldr	r3, [r3, #24]
 8010888:	0c1b      	lsrs	r3, r3, #16
 801088a:	2204      	movs	r2, #4
 801088c:	401a      	ands	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010892:	2110      	movs	r1, #16
 8010894:	400b      	ands	r3, r1
 8010896:	431a      	orrs	r2, r3
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801089c:	2108      	movs	r1, #8
 801089e:	400b      	ands	r3, r1
 80108a0:	431a      	orrs	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	68d9      	ldr	r1, [r3, #12]
 80108a6:	23f0      	movs	r3, #240	; 0xf0
 80108a8:	011b      	lsls	r3, r3, #4
 80108aa:	400b      	ands	r3, r1
 80108ac:	431a      	orrs	r2, r3
 80108ae:	0011      	movs	r1, r2
 80108b0:	68fa      	ldr	r2, [r7, #12]
 80108b2:	2380      	movs	r3, #128	; 0x80
 80108b4:	015b      	lsls	r3, r3, #5
 80108b6:	401a      	ands	r2, r3
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	430a      	orrs	r2, r1
 80108be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	69da      	ldr	r2, [r3, #28]
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	4907      	ldr	r1, [pc, #28]	; (80108e8 <HAL_SPI_Init+0x16c>)
 80108cc:	400a      	ands	r2, r1
 80108ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2200      	movs	r2, #0
 80108d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	225d      	movs	r2, #93	; 0x5d
 80108da:	2101      	movs	r1, #1
 80108dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80108de:	2300      	movs	r3, #0
}
 80108e0:	0018      	movs	r0, r3
 80108e2:	46bd      	mov	sp, r7
 80108e4:	b004      	add	sp, #16
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	fffff7ff 	.word	0xfffff7ff

080108ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b088      	sub	sp, #32
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	603b      	str	r3, [r7, #0]
 80108f8:	1dbb      	adds	r3, r7, #6
 80108fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80108fc:	231f      	movs	r3, #31
 80108fe:	18fb      	adds	r3, r7, r3
 8010900:	2200      	movs	r2, #0
 8010902:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	225c      	movs	r2, #92	; 0x5c
 8010908:	5c9b      	ldrb	r3, [r3, r2]
 801090a:	2b01      	cmp	r3, #1
 801090c:	d101      	bne.n	8010912 <HAL_SPI_Transmit+0x26>
 801090e:	2302      	movs	r3, #2
 8010910:	e140      	b.n	8010b94 <HAL_SPI_Transmit+0x2a8>
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	225c      	movs	r2, #92	; 0x5c
 8010916:	2101      	movs	r1, #1
 8010918:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801091a:	f7fc ff85 	bl	800d828 <HAL_GetTick>
 801091e:	0003      	movs	r3, r0
 8010920:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8010922:	2316      	movs	r3, #22
 8010924:	18fb      	adds	r3, r7, r3
 8010926:	1dba      	adds	r2, r7, #6
 8010928:	8812      	ldrh	r2, [r2, #0]
 801092a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	225d      	movs	r2, #93	; 0x5d
 8010930:	5c9b      	ldrb	r3, [r3, r2]
 8010932:	b2db      	uxtb	r3, r3
 8010934:	2b01      	cmp	r3, #1
 8010936:	d004      	beq.n	8010942 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8010938:	231f      	movs	r3, #31
 801093a:	18fb      	adds	r3, r7, r3
 801093c:	2202      	movs	r2, #2
 801093e:	701a      	strb	r2, [r3, #0]
    goto error;
 8010940:	e11d      	b.n	8010b7e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d003      	beq.n	8010950 <HAL_SPI_Transmit+0x64>
 8010948:	1dbb      	adds	r3, r7, #6
 801094a:	881b      	ldrh	r3, [r3, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d104      	bne.n	801095a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8010950:	231f      	movs	r3, #31
 8010952:	18fb      	adds	r3, r7, r3
 8010954:	2201      	movs	r2, #1
 8010956:	701a      	strb	r2, [r3, #0]
    goto error;
 8010958:	e111      	b.n	8010b7e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	225d      	movs	r2, #93	; 0x5d
 801095e:	2103      	movs	r1, #3
 8010960:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	2200      	movs	r2, #0
 8010966:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	68ba      	ldr	r2, [r7, #8]
 801096c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	1dba      	adds	r2, r7, #6
 8010972:	8812      	ldrh	r2, [r2, #0]
 8010974:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	1dba      	adds	r2, r7, #6
 801097a:	8812      	ldrh	r2, [r2, #0]
 801097c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2200      	movs	r2, #0
 8010982:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2244      	movs	r2, #68	; 0x44
 8010988:	2100      	movs	r1, #0
 801098a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2246      	movs	r2, #70	; 0x46
 8010990:	2100      	movs	r1, #0
 8010992:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	2200      	movs	r2, #0
 8010998:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2200      	movs	r2, #0
 801099e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	689a      	ldr	r2, [r3, #8]
 80109a4:	2380      	movs	r3, #128	; 0x80
 80109a6:	021b      	lsls	r3, r3, #8
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d110      	bne.n	80109ce <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	681a      	ldr	r2, [r3, #0]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2140      	movs	r1, #64	; 0x40
 80109b8:	438a      	bics	r2, r1
 80109ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	681a      	ldr	r2, [r3, #0]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	2180      	movs	r1, #128	; 0x80
 80109c8:	01c9      	lsls	r1, r1, #7
 80109ca:	430a      	orrs	r2, r1
 80109cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2240      	movs	r2, #64	; 0x40
 80109d6:	4013      	ands	r3, r2
 80109d8:	2b40      	cmp	r3, #64	; 0x40
 80109da:	d007      	beq.n	80109ec <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	681a      	ldr	r2, [r3, #0]
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2140      	movs	r1, #64	; 0x40
 80109e8:	430a      	orrs	r2, r1
 80109ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	68da      	ldr	r2, [r3, #12]
 80109f0:	23e0      	movs	r3, #224	; 0xe0
 80109f2:	00db      	lsls	r3, r3, #3
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d94e      	bls.n	8010a96 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d004      	beq.n	8010a0a <HAL_SPI_Transmit+0x11e>
 8010a00:	2316      	movs	r3, #22
 8010a02:	18fb      	adds	r3, r7, r3
 8010a04:	881b      	ldrh	r3, [r3, #0]
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d13f      	bne.n	8010a8a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a0e:	881a      	ldrh	r2, [r3, #0]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a1a:	1c9a      	adds	r2, r3, #2
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	3b01      	subs	r3, #1
 8010a28:	b29a      	uxth	r2, r3
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8010a2e:	e02c      	b.n	8010a8a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	689b      	ldr	r3, [r3, #8]
 8010a36:	2202      	movs	r2, #2
 8010a38:	4013      	ands	r3, r2
 8010a3a:	2b02      	cmp	r3, #2
 8010a3c:	d112      	bne.n	8010a64 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a42:	881a      	ldrh	r2, [r3, #0]
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a4e:	1c9a      	adds	r2, r3, #2
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	b29a      	uxth	r2, r3
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010a62:	e012      	b.n	8010a8a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a64:	f7fc fee0 	bl	800d828 <HAL_GetTick>
 8010a68:	0002      	movs	r2, r0
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	683a      	ldr	r2, [r7, #0]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d802      	bhi.n	8010a7a <HAL_SPI_Transmit+0x18e>
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	3301      	adds	r3, #1
 8010a78:	d102      	bne.n	8010a80 <HAL_SPI_Transmit+0x194>
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d104      	bne.n	8010a8a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8010a80:	231f      	movs	r3, #31
 8010a82:	18fb      	adds	r3, r7, r3
 8010a84:	2203      	movs	r2, #3
 8010a86:	701a      	strb	r2, [r3, #0]
          goto error;
 8010a88:	e079      	b.n	8010b7e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d1cd      	bne.n	8010a30 <HAL_SPI_Transmit+0x144>
 8010a94:	e04f      	b.n	8010b36 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d004      	beq.n	8010aa8 <HAL_SPI_Transmit+0x1bc>
 8010a9e:	2316      	movs	r3, #22
 8010aa0:	18fb      	adds	r3, r7, r3
 8010aa2:	881b      	ldrh	r3, [r3, #0]
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d141      	bne.n	8010b2c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	330c      	adds	r3, #12
 8010ab2:	7812      	ldrb	r2, [r2, #0]
 8010ab4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aba:	1c5a      	adds	r2, r3, #1
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	3b01      	subs	r3, #1
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8010ace:	e02d      	b.n	8010b2c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	689b      	ldr	r3, [r3, #8]
 8010ad6:	2202      	movs	r2, #2
 8010ad8:	4013      	ands	r3, r2
 8010ada:	2b02      	cmp	r3, #2
 8010adc:	d113      	bne.n	8010b06 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	330c      	adds	r3, #12
 8010ae8:	7812      	ldrb	r2, [r2, #0]
 8010aea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010af0:	1c5a      	adds	r2, r3, #1
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	3b01      	subs	r3, #1
 8010afe:	b29a      	uxth	r2, r3
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010b04:	e012      	b.n	8010b2c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010b06:	f7fc fe8f 	bl	800d828 <HAL_GetTick>
 8010b0a:	0002      	movs	r2, r0
 8010b0c:	69bb      	ldr	r3, [r7, #24]
 8010b0e:	1ad3      	subs	r3, r2, r3
 8010b10:	683a      	ldr	r2, [r7, #0]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d802      	bhi.n	8010b1c <HAL_SPI_Transmit+0x230>
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	3301      	adds	r3, #1
 8010b1a:	d102      	bne.n	8010b22 <HAL_SPI_Transmit+0x236>
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d104      	bne.n	8010b2c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8010b22:	231f      	movs	r3, #31
 8010b24:	18fb      	adds	r3, r7, r3
 8010b26:	2203      	movs	r2, #3
 8010b28:	701a      	strb	r2, [r3, #0]
          goto error;
 8010b2a:	e028      	b.n	8010b7e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d1cc      	bne.n	8010ad0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010b36:	69ba      	ldr	r2, [r7, #24]
 8010b38:	6839      	ldr	r1, [r7, #0]
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	0018      	movs	r0, r3
 8010b3e:	f000 fcd9 	bl	80114f4 <SPI_EndRxTxTransaction>
 8010b42:	1e03      	subs	r3, r0, #0
 8010b44:	d002      	beq.n	8010b4c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2220      	movs	r2, #32
 8010b4a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	689b      	ldr	r3, [r3, #8]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d10a      	bne.n	8010b6a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010b54:	2300      	movs	r3, #0
 8010b56:	613b      	str	r3, [r7, #16]
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	68db      	ldr	r3, [r3, #12]
 8010b5e:	613b      	str	r3, [r7, #16]
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	613b      	str	r3, [r7, #16]
 8010b68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d004      	beq.n	8010b7c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8010b72:	231f      	movs	r3, #31
 8010b74:	18fb      	adds	r3, r7, r3
 8010b76:	2201      	movs	r2, #1
 8010b78:	701a      	strb	r2, [r3, #0]
 8010b7a:	e000      	b.n	8010b7e <HAL_SPI_Transmit+0x292>
  }

error:
 8010b7c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	225d      	movs	r2, #93	; 0x5d
 8010b82:	2101      	movs	r1, #1
 8010b84:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	225c      	movs	r2, #92	; 0x5c
 8010b8a:	2100      	movs	r1, #0
 8010b8c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8010b8e:	231f      	movs	r3, #31
 8010b90:	18fb      	adds	r3, r7, r3
 8010b92:	781b      	ldrb	r3, [r3, #0]
}
 8010b94:	0018      	movs	r0, r3
 8010b96:	46bd      	mov	sp, r7
 8010b98:	b008      	add	sp, #32
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b9c:	b590      	push	{r4, r7, lr}
 8010b9e:	b089      	sub	sp, #36	; 0x24
 8010ba0:	af02      	add	r7, sp, #8
 8010ba2:	60f8      	str	r0, [r7, #12]
 8010ba4:	60b9      	str	r1, [r7, #8]
 8010ba6:	603b      	str	r3, [r7, #0]
 8010ba8:	1dbb      	adds	r3, r7, #6
 8010baa:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010bac:	2317      	movs	r3, #23
 8010bae:	18fb      	adds	r3, r7, r3
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	685a      	ldr	r2, [r3, #4]
 8010bb8:	2382      	movs	r3, #130	; 0x82
 8010bba:	005b      	lsls	r3, r3, #1
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d113      	bne.n	8010be8 <HAL_SPI_Receive+0x4c>
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	689b      	ldr	r3, [r3, #8]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d10f      	bne.n	8010be8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	225d      	movs	r2, #93	; 0x5d
 8010bcc:	2104      	movs	r1, #4
 8010bce:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010bd0:	1dbb      	adds	r3, r7, #6
 8010bd2:	881c      	ldrh	r4, [r3, #0]
 8010bd4:	68ba      	ldr	r2, [r7, #8]
 8010bd6:	68b9      	ldr	r1, [r7, #8]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	9300      	str	r3, [sp, #0]
 8010bde:	0023      	movs	r3, r4
 8010be0:	f000 f928 	bl	8010e34 <HAL_SPI_TransmitReceive>
 8010be4:	0003      	movs	r3, r0
 8010be6:	e11c      	b.n	8010e22 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	225c      	movs	r2, #92	; 0x5c
 8010bec:	5c9b      	ldrb	r3, [r3, r2]
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	d101      	bne.n	8010bf6 <HAL_SPI_Receive+0x5a>
 8010bf2:	2302      	movs	r3, #2
 8010bf4:	e115      	b.n	8010e22 <HAL_SPI_Receive+0x286>
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	225c      	movs	r2, #92	; 0x5c
 8010bfa:	2101      	movs	r1, #1
 8010bfc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010bfe:	f7fc fe13 	bl	800d828 <HAL_GetTick>
 8010c02:	0003      	movs	r3, r0
 8010c04:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	225d      	movs	r2, #93	; 0x5d
 8010c0a:	5c9b      	ldrb	r3, [r3, r2]
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	d004      	beq.n	8010c1c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8010c12:	2317      	movs	r3, #23
 8010c14:	18fb      	adds	r3, r7, r3
 8010c16:	2202      	movs	r2, #2
 8010c18:	701a      	strb	r2, [r3, #0]
    goto error;
 8010c1a:	e0f7      	b.n	8010e0c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d003      	beq.n	8010c2a <HAL_SPI_Receive+0x8e>
 8010c22:	1dbb      	adds	r3, r7, #6
 8010c24:	881b      	ldrh	r3, [r3, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d104      	bne.n	8010c34 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8010c2a:	2317      	movs	r3, #23
 8010c2c:	18fb      	adds	r3, r7, r3
 8010c2e:	2201      	movs	r2, #1
 8010c30:	701a      	strb	r2, [r3, #0]
    goto error;
 8010c32:	e0eb      	b.n	8010e0c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	225d      	movs	r2, #93	; 0x5d
 8010c38:	2104      	movs	r1, #4
 8010c3a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	68ba      	ldr	r2, [r7, #8]
 8010c46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	1dba      	adds	r2, r7, #6
 8010c4c:	2144      	movs	r1, #68	; 0x44
 8010c4e:	8812      	ldrh	r2, [r2, #0]
 8010c50:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	1dba      	adds	r2, r7, #6
 8010c56:	2146      	movs	r1, #70	; 0x46
 8010c58:	8812      	ldrh	r2, [r2, #0]
 8010c5a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2200      	movs	r2, #0
 8010c66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	2200      	movs	r2, #0
 8010c72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2200      	movs	r2, #0
 8010c78:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	68da      	ldr	r2, [r3, #12]
 8010c7e:	23e0      	movs	r3, #224	; 0xe0
 8010c80:	00db      	lsls	r3, r3, #3
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d908      	bls.n	8010c98 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	685a      	ldr	r2, [r3, #4]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4966      	ldr	r1, [pc, #408]	; (8010e2c <HAL_SPI_Receive+0x290>)
 8010c92:	400a      	ands	r2, r1
 8010c94:	605a      	str	r2, [r3, #4]
 8010c96:	e008      	b.n	8010caa <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	2180      	movs	r1, #128	; 0x80
 8010ca4:	0149      	lsls	r1, r1, #5
 8010ca6:	430a      	orrs	r2, r1
 8010ca8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	689a      	ldr	r2, [r3, #8]
 8010cae:	2380      	movs	r3, #128	; 0x80
 8010cb0:	021b      	lsls	r3, r3, #8
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d10f      	bne.n	8010cd6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	681a      	ldr	r2, [r3, #0]
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2140      	movs	r1, #64	; 0x40
 8010cc2:	438a      	bics	r2, r1
 8010cc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	4957      	ldr	r1, [pc, #348]	; (8010e30 <HAL_SPI_Receive+0x294>)
 8010cd2:	400a      	ands	r2, r1
 8010cd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2240      	movs	r2, #64	; 0x40
 8010cde:	4013      	ands	r3, r2
 8010ce0:	2b40      	cmp	r3, #64	; 0x40
 8010ce2:	d007      	beq.n	8010cf4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2140      	movs	r1, #64	; 0x40
 8010cf0:	430a      	orrs	r2, r1
 8010cf2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	68da      	ldr	r2, [r3, #12]
 8010cf8:	23e0      	movs	r3, #224	; 0xe0
 8010cfa:	00db      	lsls	r3, r3, #3
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d900      	bls.n	8010d02 <HAL_SPI_Receive+0x166>
 8010d00:	e069      	b.n	8010dd6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8010d02:	e031      	b.n	8010d68 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	689b      	ldr	r3, [r3, #8]
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	4013      	ands	r3, r2
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d117      	bne.n	8010d42 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	330c      	adds	r3, #12
 8010d18:	001a      	movs	r2, r3
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d1e:	7812      	ldrb	r2, [r2, #0]
 8010d20:	b2d2      	uxtb	r2, r2
 8010d22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d28:	1c5a      	adds	r2, r3, #1
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2246      	movs	r2, #70	; 0x46
 8010d32:	5a9b      	ldrh	r3, [r3, r2]
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	3b01      	subs	r3, #1
 8010d38:	b299      	uxth	r1, r3
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	2246      	movs	r2, #70	; 0x46
 8010d3e:	5299      	strh	r1, [r3, r2]
 8010d40:	e012      	b.n	8010d68 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d42:	f7fc fd71 	bl	800d828 <HAL_GetTick>
 8010d46:	0002      	movs	r2, r0
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	1ad3      	subs	r3, r2, r3
 8010d4c:	683a      	ldr	r2, [r7, #0]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d802      	bhi.n	8010d58 <HAL_SPI_Receive+0x1bc>
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	3301      	adds	r3, #1
 8010d56:	d102      	bne.n	8010d5e <HAL_SPI_Receive+0x1c2>
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d104      	bne.n	8010d68 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8010d5e:	2317      	movs	r3, #23
 8010d60:	18fb      	adds	r3, r7, r3
 8010d62:	2203      	movs	r2, #3
 8010d64:	701a      	strb	r2, [r3, #0]
          goto error;
 8010d66:	e051      	b.n	8010e0c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	2246      	movs	r2, #70	; 0x46
 8010d6c:	5a9b      	ldrh	r3, [r3, r2]
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d1c7      	bne.n	8010d04 <HAL_SPI_Receive+0x168>
 8010d74:	e035      	b.n	8010de2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	2201      	movs	r2, #1
 8010d7e:	4013      	ands	r3, r2
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d115      	bne.n	8010db0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	68da      	ldr	r2, [r3, #12]
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d8e:	b292      	uxth	r2, r2
 8010d90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d96:	1c9a      	adds	r2, r3, #2
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2246      	movs	r2, #70	; 0x46
 8010da0:	5a9b      	ldrh	r3, [r3, r2]
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	3b01      	subs	r3, #1
 8010da6:	b299      	uxth	r1, r3
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2246      	movs	r2, #70	; 0x46
 8010dac:	5299      	strh	r1, [r3, r2]
 8010dae:	e012      	b.n	8010dd6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010db0:	f7fc fd3a 	bl	800d828 <HAL_GetTick>
 8010db4:	0002      	movs	r2, r0
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	1ad3      	subs	r3, r2, r3
 8010dba:	683a      	ldr	r2, [r7, #0]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d802      	bhi.n	8010dc6 <HAL_SPI_Receive+0x22a>
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	d102      	bne.n	8010dcc <HAL_SPI_Receive+0x230>
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d104      	bne.n	8010dd6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8010dcc:	2317      	movs	r3, #23
 8010dce:	18fb      	adds	r3, r7, r3
 8010dd0:	2203      	movs	r2, #3
 8010dd2:	701a      	strb	r2, [r3, #0]
          goto error;
 8010dd4:	e01a      	b.n	8010e0c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	2246      	movs	r2, #70	; 0x46
 8010dda:	5a9b      	ldrh	r3, [r3, r2]
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d1c9      	bne.n	8010d76 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010de2:	693a      	ldr	r2, [r7, #16]
 8010de4:	6839      	ldr	r1, [r7, #0]
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	0018      	movs	r0, r3
 8010dea:	f000 fb25 	bl	8011438 <SPI_EndRxTransaction>
 8010dee:	1e03      	subs	r3, r0, #0
 8010df0:	d002      	beq.n	8010df8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	2220      	movs	r2, #32
 8010df6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d004      	beq.n	8010e0a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8010e00:	2317      	movs	r3, #23
 8010e02:	18fb      	adds	r3, r7, r3
 8010e04:	2201      	movs	r2, #1
 8010e06:	701a      	strb	r2, [r3, #0]
 8010e08:	e000      	b.n	8010e0c <HAL_SPI_Receive+0x270>
  }

error :
 8010e0a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	225d      	movs	r2, #93	; 0x5d
 8010e10:	2101      	movs	r1, #1
 8010e12:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	225c      	movs	r2, #92	; 0x5c
 8010e18:	2100      	movs	r1, #0
 8010e1a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8010e1c:	2317      	movs	r3, #23
 8010e1e:	18fb      	adds	r3, r7, r3
 8010e20:	781b      	ldrb	r3, [r3, #0]
}
 8010e22:	0018      	movs	r0, r3
 8010e24:	46bd      	mov	sp, r7
 8010e26:	b007      	add	sp, #28
 8010e28:	bd90      	pop	{r4, r7, pc}
 8010e2a:	46c0      	nop			; (mov r8, r8)
 8010e2c:	ffffefff 	.word	0xffffefff
 8010e30:	ffffbfff 	.word	0xffffbfff

08010e34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b08a      	sub	sp, #40	; 0x28
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	607a      	str	r2, [r7, #4]
 8010e40:	001a      	movs	r2, r3
 8010e42:	1cbb      	adds	r3, r7, #2
 8010e44:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8010e46:	2301      	movs	r3, #1
 8010e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010e4a:	2323      	movs	r3, #35	; 0x23
 8010e4c:	18fb      	adds	r3, r7, r3
 8010e4e:	2200      	movs	r2, #0
 8010e50:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	225c      	movs	r2, #92	; 0x5c
 8010e56:	5c9b      	ldrb	r3, [r3, r2]
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	d101      	bne.n	8010e60 <HAL_SPI_TransmitReceive+0x2c>
 8010e5c:	2302      	movs	r3, #2
 8010e5e:	e1b5      	b.n	80111cc <HAL_SPI_TransmitReceive+0x398>
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	225c      	movs	r2, #92	; 0x5c
 8010e64:	2101      	movs	r1, #1
 8010e66:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010e68:	f7fc fcde 	bl	800d828 <HAL_GetTick>
 8010e6c:	0003      	movs	r3, r0
 8010e6e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010e70:	201b      	movs	r0, #27
 8010e72:	183b      	adds	r3, r7, r0
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	215d      	movs	r1, #93	; 0x5d
 8010e78:	5c52      	ldrb	r2, [r2, r1]
 8010e7a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8010e82:	2312      	movs	r3, #18
 8010e84:	18fb      	adds	r3, r7, r3
 8010e86:	1cba      	adds	r2, r7, #2
 8010e88:	8812      	ldrh	r2, [r2, #0]
 8010e8a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010e8c:	183b      	adds	r3, r7, r0
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	d011      	beq.n	8010eb8 <HAL_SPI_TransmitReceive+0x84>
 8010e94:	697a      	ldr	r2, [r7, #20]
 8010e96:	2382      	movs	r3, #130	; 0x82
 8010e98:	005b      	lsls	r3, r3, #1
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d107      	bne.n	8010eae <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	689b      	ldr	r3, [r3, #8]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d103      	bne.n	8010eae <HAL_SPI_TransmitReceive+0x7a>
 8010ea6:	183b      	adds	r3, r7, r0
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	2b04      	cmp	r3, #4
 8010eac:	d004      	beq.n	8010eb8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8010eae:	2323      	movs	r3, #35	; 0x23
 8010eb0:	18fb      	adds	r3, r7, r3
 8010eb2:	2202      	movs	r2, #2
 8010eb4:	701a      	strb	r2, [r3, #0]
    goto error;
 8010eb6:	e17e      	b.n	80111b6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d006      	beq.n	8010ecc <HAL_SPI_TransmitReceive+0x98>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d003      	beq.n	8010ecc <HAL_SPI_TransmitReceive+0x98>
 8010ec4:	1cbb      	adds	r3, r7, #2
 8010ec6:	881b      	ldrh	r3, [r3, #0]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d104      	bne.n	8010ed6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8010ecc:	2323      	movs	r3, #35	; 0x23
 8010ece:	18fb      	adds	r3, r7, r3
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	701a      	strb	r2, [r3, #0]
    goto error;
 8010ed4:	e16f      	b.n	80111b6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	225d      	movs	r2, #93	; 0x5d
 8010eda:	5c9b      	ldrb	r3, [r3, r2]
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	2b04      	cmp	r3, #4
 8010ee0:	d003      	beq.n	8010eea <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	225d      	movs	r2, #93	; 0x5d
 8010ee6:	2105      	movs	r1, #5
 8010ee8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2200      	movs	r2, #0
 8010eee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	1cba      	adds	r2, r7, #2
 8010efa:	2146      	movs	r1, #70	; 0x46
 8010efc:	8812      	ldrh	r2, [r2, #0]
 8010efe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	1cba      	adds	r2, r7, #2
 8010f04:	2144      	movs	r1, #68	; 0x44
 8010f06:	8812      	ldrh	r2, [r2, #0]
 8010f08:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	68ba      	ldr	r2, [r7, #8]
 8010f0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	1cba      	adds	r2, r7, #2
 8010f14:	8812      	ldrh	r2, [r2, #0]
 8010f16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	1cba      	adds	r2, r7, #2
 8010f1c:	8812      	ldrh	r2, [r2, #0]
 8010f1e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	2200      	movs	r2, #0
 8010f24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	68da      	ldr	r2, [r3, #12]
 8010f30:	23e0      	movs	r3, #224	; 0xe0
 8010f32:	00db      	lsls	r3, r3, #3
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d908      	bls.n	8010f4a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	685a      	ldr	r2, [r3, #4]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	49a4      	ldr	r1, [pc, #656]	; (80111d4 <HAL_SPI_TransmitReceive+0x3a0>)
 8010f44:	400a      	ands	r2, r1
 8010f46:	605a      	str	r2, [r3, #4]
 8010f48:	e008      	b.n	8010f5c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	685a      	ldr	r2, [r3, #4]
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2180      	movs	r1, #128	; 0x80
 8010f56:	0149      	lsls	r1, r1, #5
 8010f58:	430a      	orrs	r2, r1
 8010f5a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	2240      	movs	r2, #64	; 0x40
 8010f64:	4013      	ands	r3, r2
 8010f66:	2b40      	cmp	r3, #64	; 0x40
 8010f68:	d007      	beq.n	8010f7a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2140      	movs	r1, #64	; 0x40
 8010f76:	430a      	orrs	r2, r1
 8010f78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	68da      	ldr	r2, [r3, #12]
 8010f7e:	23e0      	movs	r3, #224	; 0xe0
 8010f80:	00db      	lsls	r3, r3, #3
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d800      	bhi.n	8010f88 <HAL_SPI_TransmitReceive+0x154>
 8010f86:	e07f      	b.n	8011088 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d005      	beq.n	8010f9c <HAL_SPI_TransmitReceive+0x168>
 8010f90:	2312      	movs	r3, #18
 8010f92:	18fb      	adds	r3, r7, r3
 8010f94:	881b      	ldrh	r3, [r3, #0]
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d000      	beq.n	8010f9c <HAL_SPI_TransmitReceive+0x168>
 8010f9a:	e069      	b.n	8011070 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa0:	881a      	ldrh	r2, [r3, #0]
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fac:	1c9a      	adds	r2, r3, #2
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010fc0:	e056      	b.n	8011070 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	689b      	ldr	r3, [r3, #8]
 8010fc8:	2202      	movs	r2, #2
 8010fca:	4013      	ands	r3, r2
 8010fcc:	2b02      	cmp	r3, #2
 8010fce:	d11b      	bne.n	8011008 <HAL_SPI_TransmitReceive+0x1d4>
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010fd4:	b29b      	uxth	r3, r3
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d016      	beq.n	8011008 <HAL_SPI_TransmitReceive+0x1d4>
 8010fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d113      	bne.n	8011008 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fe4:	881a      	ldrh	r2, [r3, #0]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ff0:	1c9a      	adds	r2, r3, #2
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	b29a      	uxth	r2, r3
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011004:	2300      	movs	r3, #0
 8011006:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	2201      	movs	r2, #1
 8011010:	4013      	ands	r3, r2
 8011012:	2b01      	cmp	r3, #1
 8011014:	d11c      	bne.n	8011050 <HAL_SPI_TransmitReceive+0x21c>
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	2246      	movs	r2, #70	; 0x46
 801101a:	5a9b      	ldrh	r3, [r3, r2]
 801101c:	b29b      	uxth	r3, r3
 801101e:	2b00      	cmp	r3, #0
 8011020:	d016      	beq.n	8011050 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	68da      	ldr	r2, [r3, #12]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801102c:	b292      	uxth	r2, r2
 801102e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011034:	1c9a      	adds	r2, r3, #2
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2246      	movs	r2, #70	; 0x46
 801103e:	5a9b      	ldrh	r3, [r3, r2]
 8011040:	b29b      	uxth	r3, r3
 8011042:	3b01      	subs	r3, #1
 8011044:	b299      	uxth	r1, r3
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	2246      	movs	r2, #70	; 0x46
 801104a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801104c:	2301      	movs	r3, #1
 801104e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011050:	f7fc fbea 	bl	800d828 <HAL_GetTick>
 8011054:	0002      	movs	r2, r0
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	1ad3      	subs	r3, r2, r3
 801105a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801105c:	429a      	cmp	r2, r3
 801105e:	d807      	bhi.n	8011070 <HAL_SPI_TransmitReceive+0x23c>
 8011060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011062:	3301      	adds	r3, #1
 8011064:	d004      	beq.n	8011070 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8011066:	2323      	movs	r3, #35	; 0x23
 8011068:	18fb      	adds	r3, r7, r3
 801106a:	2203      	movs	r2, #3
 801106c:	701a      	strb	r2, [r3, #0]
        goto error;
 801106e:	e0a2      	b.n	80111b6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011074:	b29b      	uxth	r3, r3
 8011076:	2b00      	cmp	r3, #0
 8011078:	d1a3      	bne.n	8010fc2 <HAL_SPI_TransmitReceive+0x18e>
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2246      	movs	r2, #70	; 0x46
 801107e:	5a9b      	ldrh	r3, [r3, r2]
 8011080:	b29b      	uxth	r3, r3
 8011082:	2b00      	cmp	r3, #0
 8011084:	d19d      	bne.n	8010fc2 <HAL_SPI_TransmitReceive+0x18e>
 8011086:	e085      	b.n	8011194 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d005      	beq.n	801109c <HAL_SPI_TransmitReceive+0x268>
 8011090:	2312      	movs	r3, #18
 8011092:	18fb      	adds	r3, r7, r3
 8011094:	881b      	ldrh	r3, [r3, #0]
 8011096:	2b01      	cmp	r3, #1
 8011098:	d000      	beq.n	801109c <HAL_SPI_TransmitReceive+0x268>
 801109a:	e070      	b.n	801117e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	330c      	adds	r3, #12
 80110a6:	7812      	ldrb	r2, [r2, #0]
 80110a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110ae:	1c5a      	adds	r2, r3, #1
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	3b01      	subs	r3, #1
 80110bc:	b29a      	uxth	r2, r3
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80110c2:	e05c      	b.n	801117e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	2202      	movs	r2, #2
 80110cc:	4013      	ands	r3, r2
 80110ce:	2b02      	cmp	r3, #2
 80110d0:	d11c      	bne.n	801110c <HAL_SPI_TransmitReceive+0x2d8>
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d017      	beq.n	801110c <HAL_SPI_TransmitReceive+0x2d8>
 80110dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d114      	bne.n	801110c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	330c      	adds	r3, #12
 80110ec:	7812      	ldrb	r2, [r2, #0]
 80110ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110f4:	1c5a      	adds	r2, r3, #1
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80110fe:	b29b      	uxth	r3, r3
 8011100:	3b01      	subs	r3, #1
 8011102:	b29a      	uxth	r2, r3
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011108:	2300      	movs	r3, #0
 801110a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	689b      	ldr	r3, [r3, #8]
 8011112:	2201      	movs	r2, #1
 8011114:	4013      	ands	r3, r2
 8011116:	2b01      	cmp	r3, #1
 8011118:	d11e      	bne.n	8011158 <HAL_SPI_TransmitReceive+0x324>
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2246      	movs	r2, #70	; 0x46
 801111e:	5a9b      	ldrh	r3, [r3, r2]
 8011120:	b29b      	uxth	r3, r3
 8011122:	2b00      	cmp	r3, #0
 8011124:	d018      	beq.n	8011158 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	330c      	adds	r3, #12
 801112c:	001a      	movs	r2, r3
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011132:	7812      	ldrb	r2, [r2, #0]
 8011134:	b2d2      	uxtb	r2, r2
 8011136:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801113c:	1c5a      	adds	r2, r3, #1
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2246      	movs	r2, #70	; 0x46
 8011146:	5a9b      	ldrh	r3, [r3, r2]
 8011148:	b29b      	uxth	r3, r3
 801114a:	3b01      	subs	r3, #1
 801114c:	b299      	uxth	r1, r3
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2246      	movs	r2, #70	; 0x46
 8011152:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011154:	2301      	movs	r3, #1
 8011156:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011158:	f7fc fb66 	bl	800d828 <HAL_GetTick>
 801115c:	0002      	movs	r2, r0
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	1ad3      	subs	r3, r2, r3
 8011162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011164:	429a      	cmp	r2, r3
 8011166:	d802      	bhi.n	801116e <HAL_SPI_TransmitReceive+0x33a>
 8011168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801116a:	3301      	adds	r3, #1
 801116c:	d102      	bne.n	8011174 <HAL_SPI_TransmitReceive+0x340>
 801116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011170:	2b00      	cmp	r3, #0
 8011172:	d104      	bne.n	801117e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8011174:	2323      	movs	r3, #35	; 0x23
 8011176:	18fb      	adds	r3, r7, r3
 8011178:	2203      	movs	r2, #3
 801117a:	701a      	strb	r2, [r3, #0]
        goto error;
 801117c:	e01b      	b.n	80111b6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011182:	b29b      	uxth	r3, r3
 8011184:	2b00      	cmp	r3, #0
 8011186:	d19d      	bne.n	80110c4 <HAL_SPI_TransmitReceive+0x290>
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2246      	movs	r2, #70	; 0x46
 801118c:	5a9b      	ldrh	r3, [r3, r2]
 801118e:	b29b      	uxth	r3, r3
 8011190:	2b00      	cmp	r3, #0
 8011192:	d197      	bne.n	80110c4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011194:	69fa      	ldr	r2, [r7, #28]
 8011196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	0018      	movs	r0, r3
 801119c:	f000 f9aa 	bl	80114f4 <SPI_EndRxTxTransaction>
 80111a0:	1e03      	subs	r3, r0, #0
 80111a2:	d007      	beq.n	80111b4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80111a4:	2323      	movs	r3, #35	; 0x23
 80111a6:	18fb      	adds	r3, r7, r3
 80111a8:	2201      	movs	r2, #1
 80111aa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2220      	movs	r2, #32
 80111b0:	661a      	str	r2, [r3, #96]	; 0x60
 80111b2:	e000      	b.n	80111b6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80111b4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	225d      	movs	r2, #93	; 0x5d
 80111ba:	2101      	movs	r1, #1
 80111bc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	225c      	movs	r2, #92	; 0x5c
 80111c2:	2100      	movs	r1, #0
 80111c4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80111c6:	2323      	movs	r3, #35	; 0x23
 80111c8:	18fb      	adds	r3, r7, r3
 80111ca:	781b      	ldrb	r3, [r3, #0]
}
 80111cc:	0018      	movs	r0, r3
 80111ce:	46bd      	mov	sp, r7
 80111d0:	b00a      	add	sp, #40	; 0x28
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	ffffefff 	.word	0xffffefff

080111d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b088      	sub	sp, #32
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	603b      	str	r3, [r7, #0]
 80111e4:	1dfb      	adds	r3, r7, #7
 80111e6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80111e8:	f7fc fb1e 	bl	800d828 <HAL_GetTick>
 80111ec:	0002      	movs	r2, r0
 80111ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f0:	1a9b      	subs	r3, r3, r2
 80111f2:	683a      	ldr	r2, [r7, #0]
 80111f4:	18d3      	adds	r3, r2, r3
 80111f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80111f8:	f7fc fb16 	bl	800d828 <HAL_GetTick>
 80111fc:	0003      	movs	r3, r0
 80111fe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011200:	4b3a      	ldr	r3, [pc, #232]	; (80112ec <SPI_WaitFlagStateUntilTimeout+0x114>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	015b      	lsls	r3, r3, #5
 8011206:	0d1b      	lsrs	r3, r3, #20
 8011208:	69fa      	ldr	r2, [r7, #28]
 801120a:	4353      	muls	r3, r2
 801120c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801120e:	e058      	b.n	80112c2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	3301      	adds	r3, #1
 8011214:	d055      	beq.n	80112c2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011216:	f7fc fb07 	bl	800d828 <HAL_GetTick>
 801121a:	0002      	movs	r2, r0
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	1ad3      	subs	r3, r2, r3
 8011220:	69fa      	ldr	r2, [r7, #28]
 8011222:	429a      	cmp	r2, r3
 8011224:	d902      	bls.n	801122c <SPI_WaitFlagStateUntilTimeout+0x54>
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d142      	bne.n	80112b2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	685a      	ldr	r2, [r3, #4]
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	21e0      	movs	r1, #224	; 0xe0
 8011238:	438a      	bics	r2, r1
 801123a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	685a      	ldr	r2, [r3, #4]
 8011240:	2382      	movs	r3, #130	; 0x82
 8011242:	005b      	lsls	r3, r3, #1
 8011244:	429a      	cmp	r2, r3
 8011246:	d113      	bne.n	8011270 <SPI_WaitFlagStateUntilTimeout+0x98>
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	689a      	ldr	r2, [r3, #8]
 801124c:	2380      	movs	r3, #128	; 0x80
 801124e:	021b      	lsls	r3, r3, #8
 8011250:	429a      	cmp	r2, r3
 8011252:	d005      	beq.n	8011260 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	689a      	ldr	r2, [r3, #8]
 8011258:	2380      	movs	r3, #128	; 0x80
 801125a:	00db      	lsls	r3, r3, #3
 801125c:	429a      	cmp	r2, r3
 801125e:	d107      	bne.n	8011270 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2140      	movs	r1, #64	; 0x40
 801126c:	438a      	bics	r2, r1
 801126e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011274:	2380      	movs	r3, #128	; 0x80
 8011276:	019b      	lsls	r3, r3, #6
 8011278:	429a      	cmp	r2, r3
 801127a:	d110      	bne.n	801129e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	491a      	ldr	r1, [pc, #104]	; (80112f0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8011288:	400a      	ands	r2, r1
 801128a:	601a      	str	r2, [r3, #0]
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2180      	movs	r1, #128	; 0x80
 8011298:	0189      	lsls	r1, r1, #6
 801129a:	430a      	orrs	r2, r1
 801129c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	225d      	movs	r2, #93	; 0x5d
 80112a2:	2101      	movs	r1, #1
 80112a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	225c      	movs	r2, #92	; 0x5c
 80112aa:	2100      	movs	r1, #0
 80112ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80112ae:	2303      	movs	r3, #3
 80112b0:	e017      	b.n	80112e2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d101      	bne.n	80112bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80112b8:	2300      	movs	r3, #0
 80112ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	3b01      	subs	r3, #1
 80112c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	68ba      	ldr	r2, [r7, #8]
 80112ca:	4013      	ands	r3, r2
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	425a      	negs	r2, r3
 80112d2:	4153      	adcs	r3, r2
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	001a      	movs	r2, r3
 80112d8:	1dfb      	adds	r3, r7, #7
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d197      	bne.n	8011210 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80112e0:	2300      	movs	r3, #0
}
 80112e2:	0018      	movs	r0, r3
 80112e4:	46bd      	mov	sp, r7
 80112e6:	b008      	add	sp, #32
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	46c0      	nop			; (mov r8, r8)
 80112ec:	200000d4 	.word	0x200000d4
 80112f0:	ffffdfff 	.word	0xffffdfff

080112f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b08a      	sub	sp, #40	; 0x28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	607a      	str	r2, [r7, #4]
 8011300:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8011302:	2317      	movs	r3, #23
 8011304:	18fb      	adds	r3, r7, r3
 8011306:	2200      	movs	r2, #0
 8011308:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801130a:	f7fc fa8d 	bl	800d828 <HAL_GetTick>
 801130e:	0002      	movs	r2, r0
 8011310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011312:	1a9b      	subs	r3, r3, r2
 8011314:	683a      	ldr	r2, [r7, #0]
 8011316:	18d3      	adds	r3, r2, r3
 8011318:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801131a:	f7fc fa85 	bl	800d828 <HAL_GetTick>
 801131e:	0003      	movs	r3, r0
 8011320:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	330c      	adds	r3, #12
 8011328:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801132a:	4b41      	ldr	r3, [pc, #260]	; (8011430 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	0013      	movs	r3, r2
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	189b      	adds	r3, r3, r2
 8011334:	00da      	lsls	r2, r3, #3
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	0d1b      	lsrs	r3, r3, #20
 801133a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801133c:	4353      	muls	r3, r2
 801133e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8011340:	e068      	b.n	8011414 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8011342:	68ba      	ldr	r2, [r7, #8]
 8011344:	23c0      	movs	r3, #192	; 0xc0
 8011346:	00db      	lsls	r3, r3, #3
 8011348:	429a      	cmp	r2, r3
 801134a:	d10a      	bne.n	8011362 <SPI_WaitFifoStateUntilTimeout+0x6e>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d107      	bne.n	8011362 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	b2da      	uxtb	r2, r3
 8011358:	2117      	movs	r1, #23
 801135a:	187b      	adds	r3, r7, r1
 801135c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801135e:	187b      	adds	r3, r7, r1
 8011360:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	3301      	adds	r3, #1
 8011366:	d055      	beq.n	8011414 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011368:	f7fc fa5e 	bl	800d828 <HAL_GetTick>
 801136c:	0002      	movs	r2, r0
 801136e:	6a3b      	ldr	r3, [r7, #32]
 8011370:	1ad3      	subs	r3, r2, r3
 8011372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011374:	429a      	cmp	r2, r3
 8011376:	d902      	bls.n	801137e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8011378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137a:	2b00      	cmp	r3, #0
 801137c:	d142      	bne.n	8011404 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	685a      	ldr	r2, [r3, #4]
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	21e0      	movs	r1, #224	; 0xe0
 801138a:	438a      	bics	r2, r1
 801138c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	685a      	ldr	r2, [r3, #4]
 8011392:	2382      	movs	r3, #130	; 0x82
 8011394:	005b      	lsls	r3, r3, #1
 8011396:	429a      	cmp	r2, r3
 8011398:	d113      	bne.n	80113c2 <SPI_WaitFifoStateUntilTimeout+0xce>
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	689a      	ldr	r2, [r3, #8]
 801139e:	2380      	movs	r3, #128	; 0x80
 80113a0:	021b      	lsls	r3, r3, #8
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d005      	beq.n	80113b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	689a      	ldr	r2, [r3, #8]
 80113aa:	2380      	movs	r3, #128	; 0x80
 80113ac:	00db      	lsls	r3, r3, #3
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d107      	bne.n	80113c2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	2140      	movs	r1, #64	; 0x40
 80113be:	438a      	bics	r2, r1
 80113c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80113c6:	2380      	movs	r3, #128	; 0x80
 80113c8:	019b      	lsls	r3, r3, #6
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d110      	bne.n	80113f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4916      	ldr	r1, [pc, #88]	; (8011434 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80113da:	400a      	ands	r2, r1
 80113dc:	601a      	str	r2, [r3, #0]
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2180      	movs	r1, #128	; 0x80
 80113ea:	0189      	lsls	r1, r1, #6
 80113ec:	430a      	orrs	r2, r1
 80113ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	225d      	movs	r2, #93	; 0x5d
 80113f4:	2101      	movs	r1, #1
 80113f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	225c      	movs	r2, #92	; 0x5c
 80113fc:	2100      	movs	r1, #0
 80113fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011400:	2303      	movs	r3, #3
 8011402:	e010      	b.n	8011426 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8011404:	69bb      	ldr	r3, [r7, #24]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d101      	bne.n	801140e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 801140a:	2300      	movs	r3, #0
 801140c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	3b01      	subs	r3, #1
 8011412:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	68ba      	ldr	r2, [r7, #8]
 801141c:	4013      	ands	r3, r2
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	429a      	cmp	r2, r3
 8011422:	d18e      	bne.n	8011342 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8011424:	2300      	movs	r3, #0
}
 8011426:	0018      	movs	r0, r3
 8011428:	46bd      	mov	sp, r7
 801142a:	b00a      	add	sp, #40	; 0x28
 801142c:	bd80      	pop	{r7, pc}
 801142e:	46c0      	nop			; (mov r8, r8)
 8011430:	200000d4 	.word	0x200000d4
 8011434:	ffffdfff 	.word	0xffffdfff

08011438 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b086      	sub	sp, #24
 801143c:	af02      	add	r7, sp, #8
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	60b9      	str	r1, [r7, #8]
 8011442:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	685a      	ldr	r2, [r3, #4]
 8011448:	2382      	movs	r3, #130	; 0x82
 801144a:	005b      	lsls	r3, r3, #1
 801144c:	429a      	cmp	r2, r3
 801144e:	d113      	bne.n	8011478 <SPI_EndRxTransaction+0x40>
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	689a      	ldr	r2, [r3, #8]
 8011454:	2380      	movs	r3, #128	; 0x80
 8011456:	021b      	lsls	r3, r3, #8
 8011458:	429a      	cmp	r2, r3
 801145a:	d005      	beq.n	8011468 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	689a      	ldr	r2, [r3, #8]
 8011460:	2380      	movs	r3, #128	; 0x80
 8011462:	00db      	lsls	r3, r3, #3
 8011464:	429a      	cmp	r2, r3
 8011466:	d107      	bne.n	8011478 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	2140      	movs	r1, #64	; 0x40
 8011474:	438a      	bics	r2, r1
 8011476:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011478:	68ba      	ldr	r2, [r7, #8]
 801147a:	68f8      	ldr	r0, [r7, #12]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	9300      	str	r3, [sp, #0]
 8011480:	0013      	movs	r3, r2
 8011482:	2200      	movs	r2, #0
 8011484:	2180      	movs	r1, #128	; 0x80
 8011486:	f7ff fea7 	bl	80111d8 <SPI_WaitFlagStateUntilTimeout>
 801148a:	1e03      	subs	r3, r0, #0
 801148c:	d007      	beq.n	801149e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011492:	2220      	movs	r2, #32
 8011494:	431a      	orrs	r2, r3
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801149a:	2303      	movs	r3, #3
 801149c:	e026      	b.n	80114ec <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	685a      	ldr	r2, [r3, #4]
 80114a2:	2382      	movs	r3, #130	; 0x82
 80114a4:	005b      	lsls	r3, r3, #1
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d11f      	bne.n	80114ea <SPI_EndRxTransaction+0xb2>
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	689a      	ldr	r2, [r3, #8]
 80114ae:	2380      	movs	r3, #128	; 0x80
 80114b0:	021b      	lsls	r3, r3, #8
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d005      	beq.n	80114c2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	689a      	ldr	r2, [r3, #8]
 80114ba:	2380      	movs	r3, #128	; 0x80
 80114bc:	00db      	lsls	r3, r3, #3
 80114be:	429a      	cmp	r2, r3
 80114c0:	d113      	bne.n	80114ea <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80114c2:	68ba      	ldr	r2, [r7, #8]
 80114c4:	23c0      	movs	r3, #192	; 0xc0
 80114c6:	00d9      	lsls	r1, r3, #3
 80114c8:	68f8      	ldr	r0, [r7, #12]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	9300      	str	r3, [sp, #0]
 80114ce:	0013      	movs	r3, r2
 80114d0:	2200      	movs	r2, #0
 80114d2:	f7ff ff0f 	bl	80112f4 <SPI_WaitFifoStateUntilTimeout>
 80114d6:	1e03      	subs	r3, r0, #0
 80114d8:	d007      	beq.n	80114ea <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80114de:	2220      	movs	r2, #32
 80114e0:	431a      	orrs	r2, r3
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80114e6:	2303      	movs	r3, #3
 80114e8:	e000      	b.n	80114ec <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80114ea:	2300      	movs	r3, #0
}
 80114ec:	0018      	movs	r0, r3
 80114ee:	46bd      	mov	sp, r7
 80114f0:	b004      	add	sp, #16
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b086      	sub	sp, #24
 80114f8:	af02      	add	r7, sp, #8
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8011500:	68ba      	ldr	r2, [r7, #8]
 8011502:	23c0      	movs	r3, #192	; 0xc0
 8011504:	0159      	lsls	r1, r3, #5
 8011506:	68f8      	ldr	r0, [r7, #12]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	9300      	str	r3, [sp, #0]
 801150c:	0013      	movs	r3, r2
 801150e:	2200      	movs	r2, #0
 8011510:	f7ff fef0 	bl	80112f4 <SPI_WaitFifoStateUntilTimeout>
 8011514:	1e03      	subs	r3, r0, #0
 8011516:	d007      	beq.n	8011528 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801151c:	2220      	movs	r2, #32
 801151e:	431a      	orrs	r2, r3
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011524:	2303      	movs	r3, #3
 8011526:	e027      	b.n	8011578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011528:	68ba      	ldr	r2, [r7, #8]
 801152a:	68f8      	ldr	r0, [r7, #12]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	9300      	str	r3, [sp, #0]
 8011530:	0013      	movs	r3, r2
 8011532:	2200      	movs	r2, #0
 8011534:	2180      	movs	r1, #128	; 0x80
 8011536:	f7ff fe4f 	bl	80111d8 <SPI_WaitFlagStateUntilTimeout>
 801153a:	1e03      	subs	r3, r0, #0
 801153c:	d007      	beq.n	801154e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011542:	2220      	movs	r2, #32
 8011544:	431a      	orrs	r2, r3
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801154a:	2303      	movs	r3, #3
 801154c:	e014      	b.n	8011578 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801154e:	68ba      	ldr	r2, [r7, #8]
 8011550:	23c0      	movs	r3, #192	; 0xc0
 8011552:	00d9      	lsls	r1, r3, #3
 8011554:	68f8      	ldr	r0, [r7, #12]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	9300      	str	r3, [sp, #0]
 801155a:	0013      	movs	r3, r2
 801155c:	2200      	movs	r2, #0
 801155e:	f7ff fec9 	bl	80112f4 <SPI_WaitFifoStateUntilTimeout>
 8011562:	1e03      	subs	r3, r0, #0
 8011564:	d007      	beq.n	8011576 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801156a:	2220      	movs	r2, #32
 801156c:	431a      	orrs	r2, r3
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8011572:	2303      	movs	r3, #3
 8011574:	e000      	b.n	8011578 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8011576:	2300      	movs	r3, #0
}
 8011578:	0018      	movs	r0, r3
 801157a:	46bd      	mov	sp, r7
 801157c:	b004      	add	sp, #16
 801157e:	bd80      	pop	{r7, pc}

08011580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801158e:	2301      	movs	r3, #1
 8011590:	e044      	b.n	801161c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011596:	2b00      	cmp	r3, #0
 8011598:	d107      	bne.n	80115aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2274      	movs	r2, #116	; 0x74
 801159e:	2100      	movs	r1, #0
 80115a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	0018      	movs	r0, r3
 80115a6:	f7fb ffab 	bl	800d500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2224      	movs	r2, #36	; 0x24
 80115ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	2101      	movs	r1, #1
 80115bc:	438a      	bics	r2, r1
 80115be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	0018      	movs	r0, r3
 80115c4:	f000 fcb8 	bl	8011f38 <UART_SetConfig>
 80115c8:	0003      	movs	r3, r0
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d101      	bne.n	80115d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80115ce:	2301      	movs	r3, #1
 80115d0:	e024      	b.n	801161c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d003      	beq.n	80115e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	0018      	movs	r0, r3
 80115de:	f000 fe33 	bl	8012248 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	685a      	ldr	r2, [r3, #4]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	490d      	ldr	r1, [pc, #52]	; (8011624 <HAL_UART_Init+0xa4>)
 80115ee:	400a      	ands	r2, r1
 80115f0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	689a      	ldr	r2, [r3, #8]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	212a      	movs	r1, #42	; 0x2a
 80115fe:	438a      	bics	r2, r1
 8011600:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	681a      	ldr	r2, [r3, #0]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2101      	movs	r1, #1
 801160e:	430a      	orrs	r2, r1
 8011610:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	0018      	movs	r0, r3
 8011616:	f000 fecb 	bl	80123b0 <UART_CheckIdleState>
 801161a:	0003      	movs	r3, r0
}
 801161c:	0018      	movs	r0, r3
 801161e:	46bd      	mov	sp, r7
 8011620:	b002      	add	sp, #8
 8011622:	bd80      	pop	{r7, pc}
 8011624:	ffffb7ff 	.word	0xffffb7ff

08011628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b08a      	sub	sp, #40	; 0x28
 801162c:	af02      	add	r7, sp, #8
 801162e:	60f8      	str	r0, [r7, #12]
 8011630:	60b9      	str	r1, [r7, #8]
 8011632:	603b      	str	r3, [r7, #0]
 8011634:	1dbb      	adds	r3, r7, #6
 8011636:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801163c:	2b20      	cmp	r3, #32
 801163e:	d000      	beq.n	8011642 <HAL_UART_Transmit+0x1a>
 8011640:	e096      	b.n	8011770 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d003      	beq.n	8011650 <HAL_UART_Transmit+0x28>
 8011648:	1dbb      	adds	r3, r7, #6
 801164a:	881b      	ldrh	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d101      	bne.n	8011654 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8011650:	2301      	movs	r3, #1
 8011652:	e08e      	b.n	8011772 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	689a      	ldr	r2, [r3, #8]
 8011658:	2380      	movs	r3, #128	; 0x80
 801165a:	015b      	lsls	r3, r3, #5
 801165c:	429a      	cmp	r2, r3
 801165e:	d109      	bne.n	8011674 <HAL_UART_Transmit+0x4c>
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	691b      	ldr	r3, [r3, #16]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d105      	bne.n	8011674 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	2201      	movs	r2, #1
 801166c:	4013      	ands	r3, r2
 801166e:	d001      	beq.n	8011674 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8011670:	2301      	movs	r3, #1
 8011672:	e07e      	b.n	8011772 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2274      	movs	r2, #116	; 0x74
 8011678:	5c9b      	ldrb	r3, [r3, r2]
 801167a:	2b01      	cmp	r3, #1
 801167c:	d101      	bne.n	8011682 <HAL_UART_Transmit+0x5a>
 801167e:	2302      	movs	r3, #2
 8011680:	e077      	b.n	8011772 <HAL_UART_Transmit+0x14a>
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2274      	movs	r2, #116	; 0x74
 8011686:	2101      	movs	r1, #1
 8011688:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2280      	movs	r2, #128	; 0x80
 801168e:	2100      	movs	r1, #0
 8011690:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2221      	movs	r2, #33	; 0x21
 8011696:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011698:	f7fc f8c6 	bl	800d828 <HAL_GetTick>
 801169c:	0003      	movs	r3, r0
 801169e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	1dba      	adds	r2, r7, #6
 80116a4:	2150      	movs	r1, #80	; 0x50
 80116a6:	8812      	ldrh	r2, [r2, #0]
 80116a8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	1dba      	adds	r2, r7, #6
 80116ae:	2152      	movs	r1, #82	; 0x52
 80116b0:	8812      	ldrh	r2, [r2, #0]
 80116b2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	689a      	ldr	r2, [r3, #8]
 80116b8:	2380      	movs	r3, #128	; 0x80
 80116ba:	015b      	lsls	r3, r3, #5
 80116bc:	429a      	cmp	r2, r3
 80116be:	d108      	bne.n	80116d2 <HAL_UART_Transmit+0xaa>
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	691b      	ldr	r3, [r3, #16]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d104      	bne.n	80116d2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80116c8:	2300      	movs	r3, #0
 80116ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	61bb      	str	r3, [r7, #24]
 80116d0:	e003      	b.n	80116da <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80116d6:	2300      	movs	r3, #0
 80116d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2274      	movs	r2, #116	; 0x74
 80116de:	2100      	movs	r1, #0
 80116e0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80116e2:	e02d      	b.n	8011740 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80116e4:	697a      	ldr	r2, [r7, #20]
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	0013      	movs	r3, r2
 80116ee:	2200      	movs	r2, #0
 80116f0:	2180      	movs	r1, #128	; 0x80
 80116f2:	f000 fea5 	bl	8012440 <UART_WaitOnFlagUntilTimeout>
 80116f6:	1e03      	subs	r3, r0, #0
 80116f8:	d001      	beq.n	80116fe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80116fa:	2303      	movs	r3, #3
 80116fc:	e039      	b.n	8011772 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d10b      	bne.n	801171c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	881a      	ldrh	r2, [r3, #0]
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	05d2      	lsls	r2, r2, #23
 801170e:	0dd2      	lsrs	r2, r2, #23
 8011710:	b292      	uxth	r2, r2
 8011712:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	3302      	adds	r3, #2
 8011718:	61bb      	str	r3, [r7, #24]
 801171a:	e008      	b.n	801172e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	781a      	ldrb	r2, [r3, #0]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	b292      	uxth	r2, r2
 8011726:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011728:	69fb      	ldr	r3, [r7, #28]
 801172a:	3301      	adds	r3, #1
 801172c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	2252      	movs	r2, #82	; 0x52
 8011732:	5a9b      	ldrh	r3, [r3, r2]
 8011734:	b29b      	uxth	r3, r3
 8011736:	3b01      	subs	r3, #1
 8011738:	b299      	uxth	r1, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	2252      	movs	r2, #82	; 0x52
 801173e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2252      	movs	r2, #82	; 0x52
 8011744:	5a9b      	ldrh	r3, [r3, r2]
 8011746:	b29b      	uxth	r3, r3
 8011748:	2b00      	cmp	r3, #0
 801174a:	d1cb      	bne.n	80116e4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801174c:	697a      	ldr	r2, [r7, #20]
 801174e:	68f8      	ldr	r0, [r7, #12]
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	9300      	str	r3, [sp, #0]
 8011754:	0013      	movs	r3, r2
 8011756:	2200      	movs	r2, #0
 8011758:	2140      	movs	r1, #64	; 0x40
 801175a:	f000 fe71 	bl	8012440 <UART_WaitOnFlagUntilTimeout>
 801175e:	1e03      	subs	r3, r0, #0
 8011760:	d001      	beq.n	8011766 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8011762:	2303      	movs	r3, #3
 8011764:	e005      	b.n	8011772 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2220      	movs	r2, #32
 801176a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801176c:	2300      	movs	r3, #0
 801176e:	e000      	b.n	8011772 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8011770:	2302      	movs	r3, #2
  }
}
 8011772:	0018      	movs	r0, r3
 8011774:	46bd      	mov	sp, r7
 8011776:	b008      	add	sp, #32
 8011778:	bd80      	pop	{r7, pc}
	...

0801177c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b088      	sub	sp, #32
 8011780:	af00      	add	r7, sp, #0
 8011782:	60f8      	str	r0, [r7, #12]
 8011784:	60b9      	str	r1, [r7, #8]
 8011786:	1dbb      	adds	r3, r7, #6
 8011788:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801178e:	2b20      	cmp	r3, #32
 8011790:	d000      	beq.n	8011794 <HAL_UART_Transmit_IT+0x18>
 8011792:	e06a      	b.n	801186a <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d003      	beq.n	80117a2 <HAL_UART_Transmit_IT+0x26>
 801179a:	1dbb      	adds	r3, r7, #6
 801179c:	881b      	ldrh	r3, [r3, #0]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d101      	bne.n	80117a6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80117a2:	2301      	movs	r3, #1
 80117a4:	e062      	b.n	801186c <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	689a      	ldr	r2, [r3, #8]
 80117aa:	2380      	movs	r3, #128	; 0x80
 80117ac:	015b      	lsls	r3, r3, #5
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d109      	bne.n	80117c6 <HAL_UART_Transmit_IT+0x4a>
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	691b      	ldr	r3, [r3, #16]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d105      	bne.n	80117c6 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	2201      	movs	r2, #1
 80117be:	4013      	ands	r3, r2
 80117c0:	d001      	beq.n	80117c6 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 80117c2:	2301      	movs	r3, #1
 80117c4:	e052      	b.n	801186c <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2274      	movs	r2, #116	; 0x74
 80117ca:	5c9b      	ldrb	r3, [r3, r2]
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d101      	bne.n	80117d4 <HAL_UART_Transmit_IT+0x58>
 80117d0:	2302      	movs	r3, #2
 80117d2:	e04b      	b.n	801186c <HAL_UART_Transmit_IT+0xf0>
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2274      	movs	r2, #116	; 0x74
 80117d8:	2101      	movs	r1, #1
 80117da:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	68ba      	ldr	r2, [r7, #8]
 80117e0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	1dba      	adds	r2, r7, #6
 80117e6:	2150      	movs	r1, #80	; 0x50
 80117e8:	8812      	ldrh	r2, [r2, #0]
 80117ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	1dba      	adds	r2, r7, #6
 80117f0:	2152      	movs	r1, #82	; 0x52
 80117f2:	8812      	ldrh	r2, [r2, #0]
 80117f4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2200      	movs	r2, #0
 80117fa:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2280      	movs	r2, #128	; 0x80
 8011800:	2100      	movs	r1, #0
 8011802:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	2221      	movs	r2, #33	; 0x21
 8011808:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	689a      	ldr	r2, [r3, #8]
 801180e:	2380      	movs	r3, #128	; 0x80
 8011810:	015b      	lsls	r3, r3, #5
 8011812:	429a      	cmp	r2, r3
 8011814:	d107      	bne.n	8011826 <HAL_UART_Transmit_IT+0xaa>
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	691b      	ldr	r3, [r3, #16]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d103      	bne.n	8011826 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	4a14      	ldr	r2, [pc, #80]	; (8011874 <HAL_UART_Transmit_IT+0xf8>)
 8011822:	669a      	str	r2, [r3, #104]	; 0x68
 8011824:	e002      	b.n	801182c <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	4a13      	ldr	r2, [pc, #76]	; (8011878 <HAL_UART_Transmit_IT+0xfc>)
 801182a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	2274      	movs	r2, #116	; 0x74
 8011830:	2100      	movs	r1, #0
 8011832:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011834:	f3ef 8310 	mrs	r3, PRIMASK
 8011838:	613b      	str	r3, [r7, #16]
  return(result);
 801183a:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801183c:	61fb      	str	r3, [r7, #28]
 801183e:	2301      	movs	r3, #1
 8011840:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	f383 8810 	msr	PRIMASK, r3
}
 8011848:	46c0      	nop			; (mov r8, r8)
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	681a      	ldr	r2, [r3, #0]
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	2180      	movs	r1, #128	; 0x80
 8011856:	430a      	orrs	r2, r1
 8011858:	601a      	str	r2, [r3, #0]
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801185e:	69bb      	ldr	r3, [r7, #24]
 8011860:	f383 8810 	msr	PRIMASK, r3
}
 8011864:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8011866:	2300      	movs	r3, #0
 8011868:	e000      	b.n	801186c <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 801186a:	2302      	movs	r3, #2
  }
}
 801186c:	0018      	movs	r0, r3
 801186e:	46bd      	mov	sp, r7
 8011870:	b008      	add	sp, #32
 8011872:	bd80      	pop	{r7, pc}
 8011874:	080128cf 	.word	0x080128cf
 8011878:	0801281b 	.word	0x0801281b

0801187c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b088      	sub	sp, #32
 8011880:	af00      	add	r7, sp, #0
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	60b9      	str	r1, [r7, #8]
 8011886:	1dbb      	adds	r3, r7, #6
 8011888:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801188e:	2b20      	cmp	r3, #32
 8011890:	d150      	bne.n	8011934 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d003      	beq.n	80118a0 <HAL_UART_Receive_IT+0x24>
 8011898:	1dbb      	adds	r3, r7, #6
 801189a:	881b      	ldrh	r3, [r3, #0]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d101      	bne.n	80118a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80118a0:	2301      	movs	r3, #1
 80118a2:	e048      	b.n	8011936 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	689a      	ldr	r2, [r3, #8]
 80118a8:	2380      	movs	r3, #128	; 0x80
 80118aa:	015b      	lsls	r3, r3, #5
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d109      	bne.n	80118c4 <HAL_UART_Receive_IT+0x48>
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	691b      	ldr	r3, [r3, #16]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d105      	bne.n	80118c4 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	2201      	movs	r2, #1
 80118bc:	4013      	ands	r3, r2
 80118be:	d001      	beq.n	80118c4 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80118c0:	2301      	movs	r3, #1
 80118c2:	e038      	b.n	8011936 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2274      	movs	r2, #116	; 0x74
 80118c8:	5c9b      	ldrb	r3, [r3, r2]
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	d101      	bne.n	80118d2 <HAL_UART_Receive_IT+0x56>
 80118ce:	2302      	movs	r3, #2
 80118d0:	e031      	b.n	8011936 <HAL_UART_Receive_IT+0xba>
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	2274      	movs	r2, #116	; 0x74
 80118d6:	2101      	movs	r1, #1
 80118d8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	2200      	movs	r2, #0
 80118de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	685a      	ldr	r2, [r3, #4]
 80118e6:	2380      	movs	r3, #128	; 0x80
 80118e8:	041b      	lsls	r3, r3, #16
 80118ea:	4013      	ands	r3, r2
 80118ec:	d019      	beq.n	8011922 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118ee:	f3ef 8310 	mrs	r3, PRIMASK
 80118f2:	613b      	str	r3, [r7, #16]
  return(result);
 80118f4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80118f6:	61fb      	str	r3, [r7, #28]
 80118f8:	2301      	movs	r3, #1
 80118fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	f383 8810 	msr	PRIMASK, r3
}
 8011902:	46c0      	nop			; (mov r8, r8)
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	681a      	ldr	r2, [r3, #0]
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2180      	movs	r1, #128	; 0x80
 8011910:	04c9      	lsls	r1, r1, #19
 8011912:	430a      	orrs	r2, r1
 8011914:	601a      	str	r2, [r3, #0]
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	f383 8810 	msr	PRIMASK, r3
}
 8011920:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011922:	1dbb      	adds	r3, r7, #6
 8011924:	881a      	ldrh	r2, [r3, #0]
 8011926:	68b9      	ldr	r1, [r7, #8]
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	0018      	movs	r0, r3
 801192c:	f000 fe4c 	bl	80125c8 <UART_Start_Receive_IT>
 8011930:	0003      	movs	r3, r0
 8011932:	e000      	b.n	8011936 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8011934:	2302      	movs	r3, #2
  }
}
 8011936:	0018      	movs	r0, r3
 8011938:	46bd      	mov	sp, r7
 801193a:	b008      	add	sp, #32
 801193c:	bd80      	pop	{r7, pc}
	...

08011940 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011940:	b590      	push	{r4, r7, lr}
 8011942:	b0ab      	sub	sp, #172	; 0xac
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	69db      	ldr	r3, [r3, #28]
 801194e:	22a4      	movs	r2, #164	; 0xa4
 8011950:	18b9      	adds	r1, r7, r2
 8011952:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	20a0      	movs	r0, #160	; 0xa0
 801195c:	1839      	adds	r1, r7, r0
 801195e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	689b      	ldr	r3, [r3, #8]
 8011966:	219c      	movs	r1, #156	; 0x9c
 8011968:	1879      	adds	r1, r7, r1
 801196a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801196c:	0011      	movs	r1, r2
 801196e:	18bb      	adds	r3, r7, r2
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	4a99      	ldr	r2, [pc, #612]	; (8011bd8 <HAL_UART_IRQHandler+0x298>)
 8011974:	4013      	ands	r3, r2
 8011976:	2298      	movs	r2, #152	; 0x98
 8011978:	18bc      	adds	r4, r7, r2
 801197a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801197c:	18bb      	adds	r3, r7, r2
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d114      	bne.n	80119ae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011984:	187b      	adds	r3, r7, r1
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	2220      	movs	r2, #32
 801198a:	4013      	ands	r3, r2
 801198c:	d00f      	beq.n	80119ae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801198e:	183b      	adds	r3, r7, r0
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2220      	movs	r2, #32
 8011994:	4013      	ands	r3, r2
 8011996:	d00a      	beq.n	80119ae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801199c:	2b00      	cmp	r3, #0
 801199e:	d100      	bne.n	80119a2 <HAL_UART_IRQHandler+0x62>
 80119a0:	e296      	b.n	8011ed0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	0010      	movs	r0, r2
 80119aa:	4798      	blx	r3
      }
      return;
 80119ac:	e290      	b.n	8011ed0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80119ae:	2398      	movs	r3, #152	; 0x98
 80119b0:	18fb      	adds	r3, r7, r3
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d100      	bne.n	80119ba <HAL_UART_IRQHandler+0x7a>
 80119b8:	e114      	b.n	8011be4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80119ba:	239c      	movs	r3, #156	; 0x9c
 80119bc:	18fb      	adds	r3, r7, r3
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	2201      	movs	r2, #1
 80119c2:	4013      	ands	r3, r2
 80119c4:	d106      	bne.n	80119d4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80119c6:	23a0      	movs	r3, #160	; 0xa0
 80119c8:	18fb      	adds	r3, r7, r3
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4a83      	ldr	r2, [pc, #524]	; (8011bdc <HAL_UART_IRQHandler+0x29c>)
 80119ce:	4013      	ands	r3, r2
 80119d0:	d100      	bne.n	80119d4 <HAL_UART_IRQHandler+0x94>
 80119d2:	e107      	b.n	8011be4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80119d4:	23a4      	movs	r3, #164	; 0xa4
 80119d6:	18fb      	adds	r3, r7, r3
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	2201      	movs	r2, #1
 80119dc:	4013      	ands	r3, r2
 80119de:	d012      	beq.n	8011a06 <HAL_UART_IRQHandler+0xc6>
 80119e0:	23a0      	movs	r3, #160	; 0xa0
 80119e2:	18fb      	adds	r3, r7, r3
 80119e4:	681a      	ldr	r2, [r3, #0]
 80119e6:	2380      	movs	r3, #128	; 0x80
 80119e8:	005b      	lsls	r3, r3, #1
 80119ea:	4013      	ands	r3, r2
 80119ec:	d00b      	beq.n	8011a06 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	2201      	movs	r2, #1
 80119f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2280      	movs	r2, #128	; 0x80
 80119fa:	589b      	ldr	r3, [r3, r2]
 80119fc:	2201      	movs	r2, #1
 80119fe:	431a      	orrs	r2, r3
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2180      	movs	r1, #128	; 0x80
 8011a04:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011a06:	23a4      	movs	r3, #164	; 0xa4
 8011a08:	18fb      	adds	r3, r7, r3
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	2202      	movs	r2, #2
 8011a0e:	4013      	ands	r3, r2
 8011a10:	d011      	beq.n	8011a36 <HAL_UART_IRQHandler+0xf6>
 8011a12:	239c      	movs	r3, #156	; 0x9c
 8011a14:	18fb      	adds	r3, r7, r3
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2201      	movs	r2, #1
 8011a1a:	4013      	ands	r3, r2
 8011a1c:	d00b      	beq.n	8011a36 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2202      	movs	r2, #2
 8011a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2280      	movs	r2, #128	; 0x80
 8011a2a:	589b      	ldr	r3, [r3, r2]
 8011a2c:	2204      	movs	r2, #4
 8011a2e:	431a      	orrs	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2180      	movs	r1, #128	; 0x80
 8011a34:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011a36:	23a4      	movs	r3, #164	; 0xa4
 8011a38:	18fb      	adds	r3, r7, r3
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2204      	movs	r2, #4
 8011a3e:	4013      	ands	r3, r2
 8011a40:	d011      	beq.n	8011a66 <HAL_UART_IRQHandler+0x126>
 8011a42:	239c      	movs	r3, #156	; 0x9c
 8011a44:	18fb      	adds	r3, r7, r3
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2201      	movs	r2, #1
 8011a4a:	4013      	ands	r3, r2
 8011a4c:	d00b      	beq.n	8011a66 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2204      	movs	r2, #4
 8011a54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2280      	movs	r2, #128	; 0x80
 8011a5a:	589b      	ldr	r3, [r3, r2]
 8011a5c:	2202      	movs	r2, #2
 8011a5e:	431a      	orrs	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2180      	movs	r1, #128	; 0x80
 8011a64:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011a66:	23a4      	movs	r3, #164	; 0xa4
 8011a68:	18fb      	adds	r3, r7, r3
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	2208      	movs	r2, #8
 8011a6e:	4013      	ands	r3, r2
 8011a70:	d017      	beq.n	8011aa2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011a72:	23a0      	movs	r3, #160	; 0xa0
 8011a74:	18fb      	adds	r3, r7, r3
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2220      	movs	r2, #32
 8011a7a:	4013      	ands	r3, r2
 8011a7c:	d105      	bne.n	8011a8a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8011a7e:	239c      	movs	r3, #156	; 0x9c
 8011a80:	18fb      	adds	r3, r7, r3
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2201      	movs	r2, #1
 8011a86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011a88:	d00b      	beq.n	8011aa2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2208      	movs	r2, #8
 8011a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2280      	movs	r2, #128	; 0x80
 8011a96:	589b      	ldr	r3, [r3, r2]
 8011a98:	2208      	movs	r2, #8
 8011a9a:	431a      	orrs	r2, r3
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2180      	movs	r1, #128	; 0x80
 8011aa0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011aa2:	23a4      	movs	r3, #164	; 0xa4
 8011aa4:	18fb      	adds	r3, r7, r3
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	2380      	movs	r3, #128	; 0x80
 8011aaa:	011b      	lsls	r3, r3, #4
 8011aac:	4013      	ands	r3, r2
 8011aae:	d013      	beq.n	8011ad8 <HAL_UART_IRQHandler+0x198>
 8011ab0:	23a0      	movs	r3, #160	; 0xa0
 8011ab2:	18fb      	adds	r3, r7, r3
 8011ab4:	681a      	ldr	r2, [r3, #0]
 8011ab6:	2380      	movs	r3, #128	; 0x80
 8011ab8:	04db      	lsls	r3, r3, #19
 8011aba:	4013      	ands	r3, r2
 8011abc:	d00c      	beq.n	8011ad8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2280      	movs	r2, #128	; 0x80
 8011ac4:	0112      	lsls	r2, r2, #4
 8011ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	2280      	movs	r2, #128	; 0x80
 8011acc:	589b      	ldr	r3, [r3, r2]
 8011ace:	2220      	movs	r2, #32
 8011ad0:	431a      	orrs	r2, r3
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2180      	movs	r1, #128	; 0x80
 8011ad6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2280      	movs	r2, #128	; 0x80
 8011adc:	589b      	ldr	r3, [r3, r2]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d100      	bne.n	8011ae4 <HAL_UART_IRQHandler+0x1a4>
 8011ae2:	e1f7      	b.n	8011ed4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011ae4:	23a4      	movs	r3, #164	; 0xa4
 8011ae6:	18fb      	adds	r3, r7, r3
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	2220      	movs	r2, #32
 8011aec:	4013      	ands	r3, r2
 8011aee:	d00e      	beq.n	8011b0e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011af0:	23a0      	movs	r3, #160	; 0xa0
 8011af2:	18fb      	adds	r3, r7, r3
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	2220      	movs	r2, #32
 8011af8:	4013      	ands	r3, r2
 8011afa:	d008      	beq.n	8011b0e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d004      	beq.n	8011b0e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	0010      	movs	r0, r2
 8011b0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	2280      	movs	r2, #128	; 0x80
 8011b12:	589b      	ldr	r3, [r3, r2]
 8011b14:	2194      	movs	r1, #148	; 0x94
 8011b16:	187a      	adds	r2, r7, r1
 8011b18:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	689b      	ldr	r3, [r3, #8]
 8011b20:	2240      	movs	r2, #64	; 0x40
 8011b22:	4013      	ands	r3, r2
 8011b24:	2b40      	cmp	r3, #64	; 0x40
 8011b26:	d004      	beq.n	8011b32 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011b28:	187b      	adds	r3, r7, r1
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	2228      	movs	r2, #40	; 0x28
 8011b2e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011b30:	d047      	beq.n	8011bc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	0018      	movs	r0, r3
 8011b36:	f000 fdf7 	bl	8012728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	689b      	ldr	r3, [r3, #8]
 8011b40:	2240      	movs	r2, #64	; 0x40
 8011b42:	4013      	ands	r3, r2
 8011b44:	2b40      	cmp	r3, #64	; 0x40
 8011b46:	d137      	bne.n	8011bb8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b48:	f3ef 8310 	mrs	r3, PRIMASK
 8011b4c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8011b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011b50:	2090      	movs	r0, #144	; 0x90
 8011b52:	183a      	adds	r2, r7, r0
 8011b54:	6013      	str	r3, [r2, #0]
 8011b56:	2301      	movs	r3, #1
 8011b58:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011b5c:	f383 8810 	msr	PRIMASK, r3
}
 8011b60:	46c0      	nop			; (mov r8, r8)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	689a      	ldr	r2, [r3, #8]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	2140      	movs	r1, #64	; 0x40
 8011b6e:	438a      	bics	r2, r1
 8011b70:	609a      	str	r2, [r3, #8]
 8011b72:	183b      	adds	r3, r7, r0
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b7a:	f383 8810 	msr	PRIMASK, r3
}
 8011b7e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d012      	beq.n	8011bae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b8c:	4a14      	ldr	r2, [pc, #80]	; (8011be0 <HAL_UART_IRQHandler+0x2a0>)
 8011b8e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b94:	0018      	movs	r0, r3
 8011b96:	f7fb ff8b 	bl	800dab0 <HAL_DMA_Abort_IT>
 8011b9a:	1e03      	subs	r3, r0, #0
 8011b9c:	d01a      	beq.n	8011bd4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ba8:	0018      	movs	r0, r3
 8011baa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011bac:	e012      	b.n	8011bd4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	0018      	movs	r0, r3
 8011bb2:	f000 f9ad 	bl	8011f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011bb6:	e00d      	b.n	8011bd4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	0018      	movs	r0, r3
 8011bbc:	f000 f9a8 	bl	8011f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011bc0:	e008      	b.n	8011bd4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	0018      	movs	r0, r3
 8011bc6:	f000 f9a3 	bl	8011f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2280      	movs	r2, #128	; 0x80
 8011bce:	2100      	movs	r1, #0
 8011bd0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8011bd2:	e17f      	b.n	8011ed4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011bd4:	46c0      	nop			; (mov r8, r8)
    return;
 8011bd6:	e17d      	b.n	8011ed4 <HAL_UART_IRQHandler+0x594>
 8011bd8:	0000080f 	.word	0x0000080f
 8011bdc:	04000120 	.word	0x04000120
 8011be0:	080127ed 	.word	0x080127ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011be8:	2b01      	cmp	r3, #1
 8011bea:	d000      	beq.n	8011bee <HAL_UART_IRQHandler+0x2ae>
 8011bec:	e131      	b.n	8011e52 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011bee:	23a4      	movs	r3, #164	; 0xa4
 8011bf0:	18fb      	adds	r3, r7, r3
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2210      	movs	r2, #16
 8011bf6:	4013      	ands	r3, r2
 8011bf8:	d100      	bne.n	8011bfc <HAL_UART_IRQHandler+0x2bc>
 8011bfa:	e12a      	b.n	8011e52 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011bfc:	23a0      	movs	r3, #160	; 0xa0
 8011bfe:	18fb      	adds	r3, r7, r3
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2210      	movs	r2, #16
 8011c04:	4013      	ands	r3, r2
 8011c06:	d100      	bne.n	8011c0a <HAL_UART_IRQHandler+0x2ca>
 8011c08:	e123      	b.n	8011e52 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	2210      	movs	r2, #16
 8011c10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	2240      	movs	r2, #64	; 0x40
 8011c1a:	4013      	ands	r3, r2
 8011c1c:	2b40      	cmp	r3, #64	; 0x40
 8011c1e:	d000      	beq.n	8011c22 <HAL_UART_IRQHandler+0x2e2>
 8011c20:	e09b      	b.n	8011d5a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	685a      	ldr	r2, [r3, #4]
 8011c2a:	217e      	movs	r1, #126	; 0x7e
 8011c2c:	187b      	adds	r3, r7, r1
 8011c2e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8011c30:	187b      	adds	r3, r7, r1
 8011c32:	881b      	ldrh	r3, [r3, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d100      	bne.n	8011c3a <HAL_UART_IRQHandler+0x2fa>
 8011c38:	e14e      	b.n	8011ed8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2258      	movs	r2, #88	; 0x58
 8011c3e:	5a9b      	ldrh	r3, [r3, r2]
 8011c40:	187a      	adds	r2, r7, r1
 8011c42:	8812      	ldrh	r2, [r2, #0]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d300      	bcc.n	8011c4a <HAL_UART_IRQHandler+0x30a>
 8011c48:	e146      	b.n	8011ed8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	187a      	adds	r2, r7, r1
 8011c4e:	215a      	movs	r1, #90	; 0x5a
 8011c50:	8812      	ldrh	r2, [r2, #0]
 8011c52:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c58:	699b      	ldr	r3, [r3, #24]
 8011c5a:	2b20      	cmp	r3, #32
 8011c5c:	d06e      	beq.n	8011d3c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8011c62:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8011c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c66:	67bb      	str	r3, [r7, #120]	; 0x78
 8011c68:	2301      	movs	r3, #1
 8011c6a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c6e:	f383 8810 	msr	PRIMASK, r3
}
 8011c72:	46c0      	nop			; (mov r8, r8)
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	499a      	ldr	r1, [pc, #616]	; (8011ee8 <HAL_UART_IRQHandler+0x5a8>)
 8011c80:	400a      	ands	r2, r1
 8011c82:	601a      	str	r2, [r3, #0]
 8011c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c8a:	f383 8810 	msr	PRIMASK, r3
}
 8011c8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c90:	f3ef 8310 	mrs	r3, PRIMASK
 8011c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8011c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c98:	677b      	str	r3, [r7, #116]	; 0x74
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ca0:	f383 8810 	msr	PRIMASK, r3
}
 8011ca4:	46c0      	nop			; (mov r8, r8)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	689a      	ldr	r2, [r3, #8]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2101      	movs	r1, #1
 8011cb2:	438a      	bics	r2, r1
 8011cb4:	609a      	str	r2, [r3, #8]
 8011cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cb8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cbc:	f383 8810 	msr	PRIMASK, r3
}
 8011cc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8011cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8011cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011cca:	673b      	str	r3, [r7, #112]	; 0x70
 8011ccc:	2301      	movs	r3, #1
 8011cce:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cd2:	f383 8810 	msr	PRIMASK, r3
}
 8011cd6:	46c0      	nop			; (mov r8, r8)
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	689a      	ldr	r2, [r3, #8]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2140      	movs	r1, #64	; 0x40
 8011ce4:	438a      	bics	r2, r1
 8011ce6:	609a      	str	r2, [r3, #8]
 8011ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011cea:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011cee:	f383 8810 	msr	PRIMASK, r3
}
 8011cf2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2220      	movs	r2, #32
 8011cf8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d00:	f3ef 8310 	mrs	r3, PRIMASK
 8011d04:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8011d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011d10:	f383 8810 	msr	PRIMASK, r3
}
 8011d14:	46c0      	nop			; (mov r8, r8)
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2110      	movs	r1, #16
 8011d22:	438a      	bics	r2, r1
 8011d24:	601a      	str	r2, [r3, #0]
 8011d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d28:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d2c:	f383 8810 	msr	PRIMASK, r3
}
 8011d30:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d36:	0018      	movs	r0, r3
 8011d38:	f7fb fe82 	bl	800da40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2258      	movs	r2, #88	; 0x58
 8011d40:	5a9a      	ldrh	r2, [r3, r2]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	215a      	movs	r1, #90	; 0x5a
 8011d46:	5a5b      	ldrh	r3, [r3, r1]
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	b29a      	uxth	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	0011      	movs	r1, r2
 8011d52:	0018      	movs	r0, r3
 8011d54:	f000 f8e4 	bl	8011f20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011d58:	e0be      	b.n	8011ed8 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2258      	movs	r2, #88	; 0x58
 8011d5e:	5a99      	ldrh	r1, [r3, r2]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	225a      	movs	r2, #90	; 0x5a
 8011d64:	5a9b      	ldrh	r3, [r3, r2]
 8011d66:	b29a      	uxth	r2, r3
 8011d68:	208e      	movs	r0, #142	; 0x8e
 8011d6a:	183b      	adds	r3, r7, r0
 8011d6c:	1a8a      	subs	r2, r1, r2
 8011d6e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	225a      	movs	r2, #90	; 0x5a
 8011d74:	5a9b      	ldrh	r3, [r3, r2]
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d100      	bne.n	8011d7e <HAL_UART_IRQHandler+0x43e>
 8011d7c:	e0ae      	b.n	8011edc <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8011d7e:	183b      	adds	r3, r7, r0
 8011d80:	881b      	ldrh	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d100      	bne.n	8011d88 <HAL_UART_IRQHandler+0x448>
 8011d86:	e0a9      	b.n	8011edc <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d88:	f3ef 8310 	mrs	r3, PRIMASK
 8011d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011d90:	2488      	movs	r4, #136	; 0x88
 8011d92:	193a      	adds	r2, r7, r4
 8011d94:	6013      	str	r3, [r2, #0]
 8011d96:	2301      	movs	r3, #1
 8011d98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d9a:	693b      	ldr	r3, [r7, #16]
 8011d9c:	f383 8810 	msr	PRIMASK, r3
}
 8011da0:	46c0      	nop			; (mov r8, r8)
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	681a      	ldr	r2, [r3, #0]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	494f      	ldr	r1, [pc, #316]	; (8011eec <HAL_UART_IRQHandler+0x5ac>)
 8011dae:	400a      	ands	r2, r1
 8011db0:	601a      	str	r2, [r3, #0]
 8011db2:	193b      	adds	r3, r7, r4
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	f383 8810 	msr	PRIMASK, r3
}
 8011dbe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8011dc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8011dc6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dc8:	2484      	movs	r4, #132	; 0x84
 8011dca:	193a      	adds	r2, r7, r4
 8011dcc:	6013      	str	r3, [r2, #0]
 8011dce:	2301      	movs	r3, #1
 8011dd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dd2:	69fb      	ldr	r3, [r7, #28]
 8011dd4:	f383 8810 	msr	PRIMASK, r3
}
 8011dd8:	46c0      	nop			; (mov r8, r8)
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	689a      	ldr	r2, [r3, #8]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	2101      	movs	r1, #1
 8011de6:	438a      	bics	r2, r1
 8011de8:	609a      	str	r2, [r3, #8]
 8011dea:	193b      	adds	r3, r7, r4
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011df0:	6a3b      	ldr	r3, [r7, #32]
 8011df2:	f383 8810 	msr	PRIMASK, r3
}
 8011df6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2220      	movs	r2, #32
 8011dfc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2200      	movs	r2, #0
 8011e02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2200      	movs	r2, #0
 8011e08:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8011e0e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8011e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e12:	2480      	movs	r4, #128	; 0x80
 8011e14:	193a      	adds	r2, r7, r4
 8011e16:	6013      	str	r3, [r2, #0]
 8011e18:	2301      	movs	r3, #1
 8011e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e1e:	f383 8810 	msr	PRIMASK, r3
}
 8011e22:	46c0      	nop			; (mov r8, r8)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2110      	movs	r1, #16
 8011e30:	438a      	bics	r2, r1
 8011e32:	601a      	str	r2, [r3, #0]
 8011e34:	193b      	adds	r3, r7, r4
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e3c:	f383 8810 	msr	PRIMASK, r3
}
 8011e40:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011e42:	183b      	adds	r3, r7, r0
 8011e44:	881a      	ldrh	r2, [r3, #0]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	0011      	movs	r1, r2
 8011e4a:	0018      	movs	r0, r3
 8011e4c:	f000 f868 	bl	8011f20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011e50:	e044      	b.n	8011edc <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011e52:	23a4      	movs	r3, #164	; 0xa4
 8011e54:	18fb      	adds	r3, r7, r3
 8011e56:	681a      	ldr	r2, [r3, #0]
 8011e58:	2380      	movs	r3, #128	; 0x80
 8011e5a:	035b      	lsls	r3, r3, #13
 8011e5c:	4013      	ands	r3, r2
 8011e5e:	d010      	beq.n	8011e82 <HAL_UART_IRQHandler+0x542>
 8011e60:	239c      	movs	r3, #156	; 0x9c
 8011e62:	18fb      	adds	r3, r7, r3
 8011e64:	681a      	ldr	r2, [r3, #0]
 8011e66:	2380      	movs	r3, #128	; 0x80
 8011e68:	03db      	lsls	r3, r3, #15
 8011e6a:	4013      	ands	r3, r2
 8011e6c:	d009      	beq.n	8011e82 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2280      	movs	r2, #128	; 0x80
 8011e74:	0352      	lsls	r2, r2, #13
 8011e76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	0018      	movs	r0, r3
 8011e7c:	f000 ff1c 	bl	8012cb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011e80:	e02f      	b.n	8011ee2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011e82:	23a4      	movs	r3, #164	; 0xa4
 8011e84:	18fb      	adds	r3, r7, r3
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2280      	movs	r2, #128	; 0x80
 8011e8a:	4013      	ands	r3, r2
 8011e8c:	d00f      	beq.n	8011eae <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011e8e:	23a0      	movs	r3, #160	; 0xa0
 8011e90:	18fb      	adds	r3, r7, r3
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	2280      	movs	r2, #128	; 0x80
 8011e96:	4013      	ands	r3, r2
 8011e98:	d009      	beq.n	8011eae <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d01e      	beq.n	8011ee0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	0010      	movs	r0, r2
 8011eaa:	4798      	blx	r3
    }
    return;
 8011eac:	e018      	b.n	8011ee0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011eae:	23a4      	movs	r3, #164	; 0xa4
 8011eb0:	18fb      	adds	r3, r7, r3
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	2240      	movs	r2, #64	; 0x40
 8011eb6:	4013      	ands	r3, r2
 8011eb8:	d013      	beq.n	8011ee2 <HAL_UART_IRQHandler+0x5a2>
 8011eba:	23a0      	movs	r3, #160	; 0xa0
 8011ebc:	18fb      	adds	r3, r7, r3
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	2240      	movs	r2, #64	; 0x40
 8011ec2:	4013      	ands	r3, r2
 8011ec4:	d00d      	beq.n	8011ee2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	0018      	movs	r0, r3
 8011eca:	f000 fd5e 	bl	801298a <UART_EndTransmit_IT>
    return;
 8011ece:	e008      	b.n	8011ee2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8011ed0:	46c0      	nop			; (mov r8, r8)
 8011ed2:	e006      	b.n	8011ee2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8011ed4:	46c0      	nop			; (mov r8, r8)
 8011ed6:	e004      	b.n	8011ee2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8011ed8:	46c0      	nop			; (mov r8, r8)
 8011eda:	e002      	b.n	8011ee2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8011edc:	46c0      	nop			; (mov r8, r8)
 8011ede:	e000      	b.n	8011ee2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8011ee0:	46c0      	nop			; (mov r8, r8)
  }

}
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	b02b      	add	sp, #172	; 0xac
 8011ee6:	bd90      	pop	{r4, r7, pc}
 8011ee8:	fffffeff 	.word	0xfffffeff
 8011eec:	fffffedf 	.word	0xfffffedf

08011ef0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b082      	sub	sp, #8
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011ef8:	46c0      	nop			; (mov r8, r8)
 8011efa:	46bd      	mov	sp, r7
 8011efc:	b002      	add	sp, #8
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8011f08:	46c0      	nop			; (mov r8, r8)
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	b002      	add	sp, #8
 8011f0e:	bd80      	pop	{r7, pc}

08011f10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b082      	sub	sp, #8
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011f18:	46c0      	nop			; (mov r8, r8)
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	b002      	add	sp, #8
 8011f1e:	bd80      	pop	{r7, pc}

08011f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	000a      	movs	r2, r1
 8011f2a:	1cbb      	adds	r3, r7, #2
 8011f2c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011f2e:	46c0      	nop			; (mov r8, r8)
 8011f30:	46bd      	mov	sp, r7
 8011f32:	b002      	add	sp, #8
 8011f34:	bd80      	pop	{r7, pc}
	...

08011f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b088      	sub	sp, #32
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011f40:	231e      	movs	r3, #30
 8011f42:	18fb      	adds	r3, r7, r3
 8011f44:	2200      	movs	r2, #0
 8011f46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	689a      	ldr	r2, [r3, #8]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	691b      	ldr	r3, [r3, #16]
 8011f50:	431a      	orrs	r2, r3
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	695b      	ldr	r3, [r3, #20]
 8011f56:	431a      	orrs	r2, r3
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	69db      	ldr	r3, [r3, #28]
 8011f5c:	4313      	orrs	r3, r2
 8011f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4aaf      	ldr	r2, [pc, #700]	; (8012224 <UART_SetConfig+0x2ec>)
 8011f68:	4013      	ands	r3, r2
 8011f6a:	0019      	movs	r1, r3
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	697a      	ldr	r2, [r7, #20]
 8011f72:	430a      	orrs	r2, r1
 8011f74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	4aaa      	ldr	r2, [pc, #680]	; (8012228 <UART_SetConfig+0x2f0>)
 8011f7e:	4013      	ands	r3, r2
 8011f80:	0019      	movs	r1, r3
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	68da      	ldr	r2, [r3, #12]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	430a      	orrs	r2, r1
 8011f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	699b      	ldr	r3, [r3, #24]
 8011f92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6a1b      	ldr	r3, [r3, #32]
 8011f98:	697a      	ldr	r2, [r7, #20]
 8011f9a:	4313      	orrs	r3, r2
 8011f9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	689b      	ldr	r3, [r3, #8]
 8011fa4:	4aa1      	ldr	r2, [pc, #644]	; (801222c <UART_SetConfig+0x2f4>)
 8011fa6:	4013      	ands	r3, r2
 8011fa8:	0019      	movs	r1, r3
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	697a      	ldr	r2, [r7, #20]
 8011fb0:	430a      	orrs	r2, r1
 8011fb2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a9d      	ldr	r2, [pc, #628]	; (8012230 <UART_SetConfig+0x2f8>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d127      	bne.n	801200e <UART_SetConfig+0xd6>
 8011fbe:	4b9d      	ldr	r3, [pc, #628]	; (8012234 <UART_SetConfig+0x2fc>)
 8011fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fc2:	2203      	movs	r2, #3
 8011fc4:	4013      	ands	r3, r2
 8011fc6:	2b03      	cmp	r3, #3
 8011fc8:	d00d      	beq.n	8011fe6 <UART_SetConfig+0xae>
 8011fca:	d81b      	bhi.n	8012004 <UART_SetConfig+0xcc>
 8011fcc:	2b02      	cmp	r3, #2
 8011fce:	d014      	beq.n	8011ffa <UART_SetConfig+0xc2>
 8011fd0:	d818      	bhi.n	8012004 <UART_SetConfig+0xcc>
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d002      	beq.n	8011fdc <UART_SetConfig+0xa4>
 8011fd6:	2b01      	cmp	r3, #1
 8011fd8:	d00a      	beq.n	8011ff0 <UART_SetConfig+0xb8>
 8011fda:	e013      	b.n	8012004 <UART_SetConfig+0xcc>
 8011fdc:	231f      	movs	r3, #31
 8011fde:	18fb      	adds	r3, r7, r3
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	701a      	strb	r2, [r3, #0]
 8011fe4:	e065      	b.n	80120b2 <UART_SetConfig+0x17a>
 8011fe6:	231f      	movs	r3, #31
 8011fe8:	18fb      	adds	r3, r7, r3
 8011fea:	2202      	movs	r2, #2
 8011fec:	701a      	strb	r2, [r3, #0]
 8011fee:	e060      	b.n	80120b2 <UART_SetConfig+0x17a>
 8011ff0:	231f      	movs	r3, #31
 8011ff2:	18fb      	adds	r3, r7, r3
 8011ff4:	2204      	movs	r2, #4
 8011ff6:	701a      	strb	r2, [r3, #0]
 8011ff8:	e05b      	b.n	80120b2 <UART_SetConfig+0x17a>
 8011ffa:	231f      	movs	r3, #31
 8011ffc:	18fb      	adds	r3, r7, r3
 8011ffe:	2208      	movs	r2, #8
 8012000:	701a      	strb	r2, [r3, #0]
 8012002:	e056      	b.n	80120b2 <UART_SetConfig+0x17a>
 8012004:	231f      	movs	r3, #31
 8012006:	18fb      	adds	r3, r7, r3
 8012008:	2210      	movs	r2, #16
 801200a:	701a      	strb	r2, [r3, #0]
 801200c:	e051      	b.n	80120b2 <UART_SetConfig+0x17a>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	4a89      	ldr	r2, [pc, #548]	; (8012238 <UART_SetConfig+0x300>)
 8012014:	4293      	cmp	r3, r2
 8012016:	d134      	bne.n	8012082 <UART_SetConfig+0x14a>
 8012018:	4b86      	ldr	r3, [pc, #536]	; (8012234 <UART_SetConfig+0x2fc>)
 801201a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801201c:	23c0      	movs	r3, #192	; 0xc0
 801201e:	029b      	lsls	r3, r3, #10
 8012020:	4013      	ands	r3, r2
 8012022:	22c0      	movs	r2, #192	; 0xc0
 8012024:	0292      	lsls	r2, r2, #10
 8012026:	4293      	cmp	r3, r2
 8012028:	d017      	beq.n	801205a <UART_SetConfig+0x122>
 801202a:	22c0      	movs	r2, #192	; 0xc0
 801202c:	0292      	lsls	r2, r2, #10
 801202e:	4293      	cmp	r3, r2
 8012030:	d822      	bhi.n	8012078 <UART_SetConfig+0x140>
 8012032:	2280      	movs	r2, #128	; 0x80
 8012034:	0292      	lsls	r2, r2, #10
 8012036:	4293      	cmp	r3, r2
 8012038:	d019      	beq.n	801206e <UART_SetConfig+0x136>
 801203a:	2280      	movs	r2, #128	; 0x80
 801203c:	0292      	lsls	r2, r2, #10
 801203e:	4293      	cmp	r3, r2
 8012040:	d81a      	bhi.n	8012078 <UART_SetConfig+0x140>
 8012042:	2b00      	cmp	r3, #0
 8012044:	d004      	beq.n	8012050 <UART_SetConfig+0x118>
 8012046:	2280      	movs	r2, #128	; 0x80
 8012048:	0252      	lsls	r2, r2, #9
 801204a:	4293      	cmp	r3, r2
 801204c:	d00a      	beq.n	8012064 <UART_SetConfig+0x12c>
 801204e:	e013      	b.n	8012078 <UART_SetConfig+0x140>
 8012050:	231f      	movs	r3, #31
 8012052:	18fb      	adds	r3, r7, r3
 8012054:	2200      	movs	r2, #0
 8012056:	701a      	strb	r2, [r3, #0]
 8012058:	e02b      	b.n	80120b2 <UART_SetConfig+0x17a>
 801205a:	231f      	movs	r3, #31
 801205c:	18fb      	adds	r3, r7, r3
 801205e:	2202      	movs	r2, #2
 8012060:	701a      	strb	r2, [r3, #0]
 8012062:	e026      	b.n	80120b2 <UART_SetConfig+0x17a>
 8012064:	231f      	movs	r3, #31
 8012066:	18fb      	adds	r3, r7, r3
 8012068:	2204      	movs	r2, #4
 801206a:	701a      	strb	r2, [r3, #0]
 801206c:	e021      	b.n	80120b2 <UART_SetConfig+0x17a>
 801206e:	231f      	movs	r3, #31
 8012070:	18fb      	adds	r3, r7, r3
 8012072:	2208      	movs	r2, #8
 8012074:	701a      	strb	r2, [r3, #0]
 8012076:	e01c      	b.n	80120b2 <UART_SetConfig+0x17a>
 8012078:	231f      	movs	r3, #31
 801207a:	18fb      	adds	r3, r7, r3
 801207c:	2210      	movs	r2, #16
 801207e:	701a      	strb	r2, [r3, #0]
 8012080:	e017      	b.n	80120b2 <UART_SetConfig+0x17a>
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4a6d      	ldr	r2, [pc, #436]	; (801223c <UART_SetConfig+0x304>)
 8012088:	4293      	cmp	r3, r2
 801208a:	d104      	bne.n	8012096 <UART_SetConfig+0x15e>
 801208c:	231f      	movs	r3, #31
 801208e:	18fb      	adds	r3, r7, r3
 8012090:	2200      	movs	r2, #0
 8012092:	701a      	strb	r2, [r3, #0]
 8012094:	e00d      	b.n	80120b2 <UART_SetConfig+0x17a>
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	4a69      	ldr	r2, [pc, #420]	; (8012240 <UART_SetConfig+0x308>)
 801209c:	4293      	cmp	r3, r2
 801209e:	d104      	bne.n	80120aa <UART_SetConfig+0x172>
 80120a0:	231f      	movs	r3, #31
 80120a2:	18fb      	adds	r3, r7, r3
 80120a4:	2200      	movs	r2, #0
 80120a6:	701a      	strb	r2, [r3, #0]
 80120a8:	e003      	b.n	80120b2 <UART_SetConfig+0x17a>
 80120aa:	231f      	movs	r3, #31
 80120ac:	18fb      	adds	r3, r7, r3
 80120ae:	2210      	movs	r2, #16
 80120b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	69da      	ldr	r2, [r3, #28]
 80120b6:	2380      	movs	r3, #128	; 0x80
 80120b8:	021b      	lsls	r3, r3, #8
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d15d      	bne.n	801217a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80120be:	231f      	movs	r3, #31
 80120c0:	18fb      	adds	r3, r7, r3
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	2b08      	cmp	r3, #8
 80120c6:	d015      	beq.n	80120f4 <UART_SetConfig+0x1bc>
 80120c8:	dc18      	bgt.n	80120fc <UART_SetConfig+0x1c4>
 80120ca:	2b04      	cmp	r3, #4
 80120cc:	d00d      	beq.n	80120ea <UART_SetConfig+0x1b2>
 80120ce:	dc15      	bgt.n	80120fc <UART_SetConfig+0x1c4>
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d002      	beq.n	80120da <UART_SetConfig+0x1a2>
 80120d4:	2b02      	cmp	r3, #2
 80120d6:	d005      	beq.n	80120e4 <UART_SetConfig+0x1ac>
 80120d8:	e010      	b.n	80120fc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80120da:	f7fe fa3b 	bl	8010554 <HAL_RCC_GetPCLK1Freq>
 80120de:	0003      	movs	r3, r0
 80120e0:	61bb      	str	r3, [r7, #24]
        break;
 80120e2:	e012      	b.n	801210a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80120e4:	4b57      	ldr	r3, [pc, #348]	; (8012244 <UART_SetConfig+0x30c>)
 80120e6:	61bb      	str	r3, [r7, #24]
        break;
 80120e8:	e00f      	b.n	801210a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80120ea:	f7fe f9a9 	bl	8010440 <HAL_RCC_GetSysClockFreq>
 80120ee:	0003      	movs	r3, r0
 80120f0:	61bb      	str	r3, [r7, #24]
        break;
 80120f2:	e00a      	b.n	801210a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80120f4:	2380      	movs	r3, #128	; 0x80
 80120f6:	021b      	lsls	r3, r3, #8
 80120f8:	61bb      	str	r3, [r7, #24]
        break;
 80120fa:	e006      	b.n	801210a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80120fc:	2300      	movs	r3, #0
 80120fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8012100:	231e      	movs	r3, #30
 8012102:	18fb      	adds	r3, r7, r3
 8012104:	2201      	movs	r2, #1
 8012106:	701a      	strb	r2, [r3, #0]
        break;
 8012108:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d100      	bne.n	8012112 <UART_SetConfig+0x1da>
 8012110:	e07b      	b.n	801220a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	005a      	lsls	r2, r3, #1
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	085b      	lsrs	r3, r3, #1
 801211c:	18d2      	adds	r2, r2, r3
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	0019      	movs	r1, r3
 8012124:	0010      	movs	r0, r2
 8012126:	f7f7 f80b 	bl	8009140 <__udivsi3>
 801212a:	0003      	movs	r3, r0
 801212c:	b29b      	uxth	r3, r3
 801212e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	2b0f      	cmp	r3, #15
 8012134:	d91c      	bls.n	8012170 <UART_SetConfig+0x238>
 8012136:	693a      	ldr	r2, [r7, #16]
 8012138:	2380      	movs	r3, #128	; 0x80
 801213a:	025b      	lsls	r3, r3, #9
 801213c:	429a      	cmp	r2, r3
 801213e:	d217      	bcs.n	8012170 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	b29a      	uxth	r2, r3
 8012144:	200e      	movs	r0, #14
 8012146:	183b      	adds	r3, r7, r0
 8012148:	210f      	movs	r1, #15
 801214a:	438a      	bics	r2, r1
 801214c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	085b      	lsrs	r3, r3, #1
 8012152:	b29b      	uxth	r3, r3
 8012154:	2207      	movs	r2, #7
 8012156:	4013      	ands	r3, r2
 8012158:	b299      	uxth	r1, r3
 801215a:	183b      	adds	r3, r7, r0
 801215c:	183a      	adds	r2, r7, r0
 801215e:	8812      	ldrh	r2, [r2, #0]
 8012160:	430a      	orrs	r2, r1
 8012162:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	183a      	adds	r2, r7, r0
 801216a:	8812      	ldrh	r2, [r2, #0]
 801216c:	60da      	str	r2, [r3, #12]
 801216e:	e04c      	b.n	801220a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8012170:	231e      	movs	r3, #30
 8012172:	18fb      	adds	r3, r7, r3
 8012174:	2201      	movs	r2, #1
 8012176:	701a      	strb	r2, [r3, #0]
 8012178:	e047      	b.n	801220a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801217a:	231f      	movs	r3, #31
 801217c:	18fb      	adds	r3, r7, r3
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	2b08      	cmp	r3, #8
 8012182:	d015      	beq.n	80121b0 <UART_SetConfig+0x278>
 8012184:	dc18      	bgt.n	80121b8 <UART_SetConfig+0x280>
 8012186:	2b04      	cmp	r3, #4
 8012188:	d00d      	beq.n	80121a6 <UART_SetConfig+0x26e>
 801218a:	dc15      	bgt.n	80121b8 <UART_SetConfig+0x280>
 801218c:	2b00      	cmp	r3, #0
 801218e:	d002      	beq.n	8012196 <UART_SetConfig+0x25e>
 8012190:	2b02      	cmp	r3, #2
 8012192:	d005      	beq.n	80121a0 <UART_SetConfig+0x268>
 8012194:	e010      	b.n	80121b8 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012196:	f7fe f9dd 	bl	8010554 <HAL_RCC_GetPCLK1Freq>
 801219a:	0003      	movs	r3, r0
 801219c:	61bb      	str	r3, [r7, #24]
        break;
 801219e:	e012      	b.n	80121c6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80121a0:	4b28      	ldr	r3, [pc, #160]	; (8012244 <UART_SetConfig+0x30c>)
 80121a2:	61bb      	str	r3, [r7, #24]
        break;
 80121a4:	e00f      	b.n	80121c6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80121a6:	f7fe f94b 	bl	8010440 <HAL_RCC_GetSysClockFreq>
 80121aa:	0003      	movs	r3, r0
 80121ac:	61bb      	str	r3, [r7, #24]
        break;
 80121ae:	e00a      	b.n	80121c6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80121b0:	2380      	movs	r3, #128	; 0x80
 80121b2:	021b      	lsls	r3, r3, #8
 80121b4:	61bb      	str	r3, [r7, #24]
        break;
 80121b6:	e006      	b.n	80121c6 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80121b8:	2300      	movs	r3, #0
 80121ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80121bc:	231e      	movs	r3, #30
 80121be:	18fb      	adds	r3, r7, r3
 80121c0:	2201      	movs	r2, #1
 80121c2:	701a      	strb	r2, [r3, #0]
        break;
 80121c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d01e      	beq.n	801220a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	085a      	lsrs	r2, r3, #1
 80121d2:	69bb      	ldr	r3, [r7, #24]
 80121d4:	18d2      	adds	r2, r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	685b      	ldr	r3, [r3, #4]
 80121da:	0019      	movs	r1, r3
 80121dc:	0010      	movs	r0, r2
 80121de:	f7f6 ffaf 	bl	8009140 <__udivsi3>
 80121e2:	0003      	movs	r3, r0
 80121e4:	b29b      	uxth	r3, r3
 80121e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	2b0f      	cmp	r3, #15
 80121ec:	d909      	bls.n	8012202 <UART_SetConfig+0x2ca>
 80121ee:	693a      	ldr	r2, [r7, #16]
 80121f0:	2380      	movs	r3, #128	; 0x80
 80121f2:	025b      	lsls	r3, r3, #9
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d204      	bcs.n	8012202 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	693a      	ldr	r2, [r7, #16]
 80121fe:	60da      	str	r2, [r3, #12]
 8012200:	e003      	b.n	801220a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8012202:	231e      	movs	r3, #30
 8012204:	18fb      	adds	r3, r7, r3
 8012206:	2201      	movs	r2, #1
 8012208:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2200      	movs	r2, #0
 801220e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2200      	movs	r2, #0
 8012214:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8012216:	231e      	movs	r3, #30
 8012218:	18fb      	adds	r3, r7, r3
 801221a:	781b      	ldrb	r3, [r3, #0]
}
 801221c:	0018      	movs	r0, r3
 801221e:	46bd      	mov	sp, r7
 8012220:	b008      	add	sp, #32
 8012222:	bd80      	pop	{r7, pc}
 8012224:	efff69f3 	.word	0xefff69f3
 8012228:	ffffcfff 	.word	0xffffcfff
 801222c:	fffff4ff 	.word	0xfffff4ff
 8012230:	40013800 	.word	0x40013800
 8012234:	40021000 	.word	0x40021000
 8012238:	40004400 	.word	0x40004400
 801223c:	40004800 	.word	0x40004800
 8012240:	40004c00 	.word	0x40004c00
 8012244:	007a1200 	.word	0x007a1200

08012248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012254:	2201      	movs	r2, #1
 8012256:	4013      	ands	r3, r2
 8012258:	d00b      	beq.n	8012272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	4a4a      	ldr	r2, [pc, #296]	; (801238c <UART_AdvFeatureConfig+0x144>)
 8012262:	4013      	ands	r3, r2
 8012264:	0019      	movs	r1, r3
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	430a      	orrs	r2, r1
 8012270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012276:	2202      	movs	r2, #2
 8012278:	4013      	ands	r3, r2
 801227a:	d00b      	beq.n	8012294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	4a43      	ldr	r2, [pc, #268]	; (8012390 <UART_AdvFeatureConfig+0x148>)
 8012284:	4013      	ands	r3, r2
 8012286:	0019      	movs	r1, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	430a      	orrs	r2, r1
 8012292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012298:	2204      	movs	r2, #4
 801229a:	4013      	ands	r3, r2
 801229c:	d00b      	beq.n	80122b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	685b      	ldr	r3, [r3, #4]
 80122a4:	4a3b      	ldr	r2, [pc, #236]	; (8012394 <UART_AdvFeatureConfig+0x14c>)
 80122a6:	4013      	ands	r3, r2
 80122a8:	0019      	movs	r1, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	430a      	orrs	r2, r1
 80122b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ba:	2208      	movs	r2, #8
 80122bc:	4013      	ands	r3, r2
 80122be:	d00b      	beq.n	80122d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	4a34      	ldr	r2, [pc, #208]	; (8012398 <UART_AdvFeatureConfig+0x150>)
 80122c8:	4013      	ands	r3, r2
 80122ca:	0019      	movs	r1, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	430a      	orrs	r2, r1
 80122d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122dc:	2210      	movs	r2, #16
 80122de:	4013      	ands	r3, r2
 80122e0:	d00b      	beq.n	80122fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	689b      	ldr	r3, [r3, #8]
 80122e8:	4a2c      	ldr	r2, [pc, #176]	; (801239c <UART_AdvFeatureConfig+0x154>)
 80122ea:	4013      	ands	r3, r2
 80122ec:	0019      	movs	r1, r3
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	430a      	orrs	r2, r1
 80122f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122fe:	2220      	movs	r2, #32
 8012300:	4013      	ands	r3, r2
 8012302:	d00b      	beq.n	801231c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	689b      	ldr	r3, [r3, #8]
 801230a:	4a25      	ldr	r2, [pc, #148]	; (80123a0 <UART_AdvFeatureConfig+0x158>)
 801230c:	4013      	ands	r3, r2
 801230e:	0019      	movs	r1, r3
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	430a      	orrs	r2, r1
 801231a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012320:	2240      	movs	r2, #64	; 0x40
 8012322:	4013      	ands	r3, r2
 8012324:	d01d      	beq.n	8012362 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	685b      	ldr	r3, [r3, #4]
 801232c:	4a1d      	ldr	r2, [pc, #116]	; (80123a4 <UART_AdvFeatureConfig+0x15c>)
 801232e:	4013      	ands	r3, r2
 8012330:	0019      	movs	r1, r3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	430a      	orrs	r2, r1
 801233c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012342:	2380      	movs	r3, #128	; 0x80
 8012344:	035b      	lsls	r3, r3, #13
 8012346:	429a      	cmp	r2, r3
 8012348:	d10b      	bne.n	8012362 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	4a15      	ldr	r2, [pc, #84]	; (80123a8 <UART_AdvFeatureConfig+0x160>)
 8012352:	4013      	ands	r3, r2
 8012354:	0019      	movs	r1, r3
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	430a      	orrs	r2, r1
 8012360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012366:	2280      	movs	r2, #128	; 0x80
 8012368:	4013      	ands	r3, r2
 801236a:	d00b      	beq.n	8012384 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	685b      	ldr	r3, [r3, #4]
 8012372:	4a0e      	ldr	r2, [pc, #56]	; (80123ac <UART_AdvFeatureConfig+0x164>)
 8012374:	4013      	ands	r3, r2
 8012376:	0019      	movs	r1, r3
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	430a      	orrs	r2, r1
 8012382:	605a      	str	r2, [r3, #4]
  }
}
 8012384:	46c0      	nop			; (mov r8, r8)
 8012386:	46bd      	mov	sp, r7
 8012388:	b002      	add	sp, #8
 801238a:	bd80      	pop	{r7, pc}
 801238c:	fffdffff 	.word	0xfffdffff
 8012390:	fffeffff 	.word	0xfffeffff
 8012394:	fffbffff 	.word	0xfffbffff
 8012398:	ffff7fff 	.word	0xffff7fff
 801239c:	ffffefff 	.word	0xffffefff
 80123a0:	ffffdfff 	.word	0xffffdfff
 80123a4:	ffefffff 	.word	0xffefffff
 80123a8:	ff9fffff 	.word	0xff9fffff
 80123ac:	fff7ffff 	.word	0xfff7ffff

080123b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b086      	sub	sp, #24
 80123b4:	af02      	add	r7, sp, #8
 80123b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2280      	movs	r2, #128	; 0x80
 80123bc:	2100      	movs	r1, #0
 80123be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80123c0:	f7fb fa32 	bl	800d828 <HAL_GetTick>
 80123c4:	0003      	movs	r3, r0
 80123c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	2208      	movs	r2, #8
 80123d0:	4013      	ands	r3, r2
 80123d2:	2b08      	cmp	r3, #8
 80123d4:	d10c      	bne.n	80123f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	2280      	movs	r2, #128	; 0x80
 80123da:	0391      	lsls	r1, r2, #14
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	4a17      	ldr	r2, [pc, #92]	; (801243c <UART_CheckIdleState+0x8c>)
 80123e0:	9200      	str	r2, [sp, #0]
 80123e2:	2200      	movs	r2, #0
 80123e4:	f000 f82c 	bl	8012440 <UART_WaitOnFlagUntilTimeout>
 80123e8:	1e03      	subs	r3, r0, #0
 80123ea:	d001      	beq.n	80123f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80123ec:	2303      	movs	r3, #3
 80123ee:	e021      	b.n	8012434 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	2204      	movs	r2, #4
 80123f8:	4013      	ands	r3, r2
 80123fa:	2b04      	cmp	r3, #4
 80123fc:	d10c      	bne.n	8012418 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	2280      	movs	r2, #128	; 0x80
 8012402:	03d1      	lsls	r1, r2, #15
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	4a0d      	ldr	r2, [pc, #52]	; (801243c <UART_CheckIdleState+0x8c>)
 8012408:	9200      	str	r2, [sp, #0]
 801240a:	2200      	movs	r2, #0
 801240c:	f000 f818 	bl	8012440 <UART_WaitOnFlagUntilTimeout>
 8012410:	1e03      	subs	r3, r0, #0
 8012412:	d001      	beq.n	8012418 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012414:	2303      	movs	r3, #3
 8012416:	e00d      	b.n	8012434 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2220      	movs	r2, #32
 801241c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2220      	movs	r2, #32
 8012422:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2200      	movs	r2, #0
 8012428:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2274      	movs	r2, #116	; 0x74
 801242e:	2100      	movs	r1, #0
 8012430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012432:	2300      	movs	r3, #0
}
 8012434:	0018      	movs	r0, r3
 8012436:	46bd      	mov	sp, r7
 8012438:	b004      	add	sp, #16
 801243a:	bd80      	pop	{r7, pc}
 801243c:	01ffffff 	.word	0x01ffffff

08012440 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b094      	sub	sp, #80	; 0x50
 8012444:	af00      	add	r7, sp, #0
 8012446:	60f8      	str	r0, [r7, #12]
 8012448:	60b9      	str	r1, [r7, #8]
 801244a:	603b      	str	r3, [r7, #0]
 801244c:	1dfb      	adds	r3, r7, #7
 801244e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012450:	e0a3      	b.n	801259a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012454:	3301      	adds	r3, #1
 8012456:	d100      	bne.n	801245a <UART_WaitOnFlagUntilTimeout+0x1a>
 8012458:	e09f      	b.n	801259a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801245a:	f7fb f9e5 	bl	800d828 <HAL_GetTick>
 801245e:	0002      	movs	r2, r0
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	1ad3      	subs	r3, r2, r3
 8012464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012466:	429a      	cmp	r2, r3
 8012468:	d302      	bcc.n	8012470 <UART_WaitOnFlagUntilTimeout+0x30>
 801246a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801246c:	2b00      	cmp	r3, #0
 801246e:	d13d      	bne.n	80124ec <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012470:	f3ef 8310 	mrs	r3, PRIMASK
 8012474:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8012476:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012478:	647b      	str	r3, [r7, #68]	; 0x44
 801247a:	2301      	movs	r3, #1
 801247c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012480:	f383 8810 	msr	PRIMASK, r3
}
 8012484:	46c0      	nop			; (mov r8, r8)
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	494c      	ldr	r1, [pc, #304]	; (80125c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8012492:	400a      	ands	r2, r1
 8012494:	601a      	str	r2, [r3, #0]
 8012496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012498:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249c:	f383 8810 	msr	PRIMASK, r3
}
 80124a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124a2:	f3ef 8310 	mrs	r3, PRIMASK
 80124a6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80124a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124aa:	643b      	str	r3, [r7, #64]	; 0x40
 80124ac:	2301      	movs	r3, #1
 80124ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b2:	f383 8810 	msr	PRIMASK, r3
}
 80124b6:	46c0      	nop			; (mov r8, r8)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	689a      	ldr	r2, [r3, #8]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2101      	movs	r1, #1
 80124c4:	438a      	bics	r2, r1
 80124c6:	609a      	str	r2, [r3, #8]
 80124c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ce:	f383 8810 	msr	PRIMASK, r3
}
 80124d2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2220      	movs	r2, #32
 80124d8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2220      	movs	r2, #32
 80124de:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2274      	movs	r2, #116	; 0x74
 80124e4:	2100      	movs	r1, #0
 80124e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80124e8:	2303      	movs	r3, #3
 80124ea:	e067      	b.n	80125bc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2204      	movs	r2, #4
 80124f4:	4013      	ands	r3, r2
 80124f6:	d050      	beq.n	801259a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	69da      	ldr	r2, [r3, #28]
 80124fe:	2380      	movs	r3, #128	; 0x80
 8012500:	011b      	lsls	r3, r3, #4
 8012502:	401a      	ands	r2, r3
 8012504:	2380      	movs	r3, #128	; 0x80
 8012506:	011b      	lsls	r3, r3, #4
 8012508:	429a      	cmp	r2, r3
 801250a:	d146      	bne.n	801259a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	2280      	movs	r2, #128	; 0x80
 8012512:	0112      	lsls	r2, r2, #4
 8012514:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012516:	f3ef 8310 	mrs	r3, PRIMASK
 801251a:	613b      	str	r3, [r7, #16]
  return(result);
 801251c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801251e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012520:	2301      	movs	r3, #1
 8012522:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	f383 8810 	msr	PRIMASK, r3
}
 801252a:	46c0      	nop			; (mov r8, r8)
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	4923      	ldr	r1, [pc, #140]	; (80125c4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8012538:	400a      	ands	r2, r1
 801253a:	601a      	str	r2, [r3, #0]
 801253c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801253e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	f383 8810 	msr	PRIMASK, r3
}
 8012546:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012548:	f3ef 8310 	mrs	r3, PRIMASK
 801254c:	61fb      	str	r3, [r7, #28]
  return(result);
 801254e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012550:	64bb      	str	r3, [r7, #72]	; 0x48
 8012552:	2301      	movs	r3, #1
 8012554:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012556:	6a3b      	ldr	r3, [r7, #32]
 8012558:	f383 8810 	msr	PRIMASK, r3
}
 801255c:	46c0      	nop			; (mov r8, r8)
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	689a      	ldr	r2, [r3, #8]
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	2101      	movs	r1, #1
 801256a:	438a      	bics	r2, r1
 801256c:	609a      	str	r2, [r3, #8]
 801256e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012570:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012574:	f383 8810 	msr	PRIMASK, r3
}
 8012578:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	2220      	movs	r2, #32
 801257e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	2220      	movs	r2, #32
 8012584:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	2280      	movs	r2, #128	; 0x80
 801258a:	2120      	movs	r1, #32
 801258c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2274      	movs	r2, #116	; 0x74
 8012592:	2100      	movs	r1, #0
 8012594:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8012596:	2303      	movs	r3, #3
 8012598:	e010      	b.n	80125bc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	69db      	ldr	r3, [r3, #28]
 80125a0:	68ba      	ldr	r2, [r7, #8]
 80125a2:	4013      	ands	r3, r2
 80125a4:	68ba      	ldr	r2, [r7, #8]
 80125a6:	1ad3      	subs	r3, r2, r3
 80125a8:	425a      	negs	r2, r3
 80125aa:	4153      	adcs	r3, r2
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	001a      	movs	r2, r3
 80125b0:	1dfb      	adds	r3, r7, #7
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d100      	bne.n	80125ba <UART_WaitOnFlagUntilTimeout+0x17a>
 80125b8:	e74b      	b.n	8012452 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80125ba:	2300      	movs	r3, #0
}
 80125bc:	0018      	movs	r0, r3
 80125be:	46bd      	mov	sp, r7
 80125c0:	b014      	add	sp, #80	; 0x50
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	fffffe5f 	.word	0xfffffe5f

080125c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08c      	sub	sp, #48	; 0x30
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	1dbb      	adds	r3, r7, #6
 80125d4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	68ba      	ldr	r2, [r7, #8]
 80125da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	1dba      	adds	r2, r7, #6
 80125e0:	2158      	movs	r1, #88	; 0x58
 80125e2:	8812      	ldrh	r2, [r2, #0]
 80125e4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	1dba      	adds	r2, r7, #6
 80125ea:	215a      	movs	r1, #90	; 0x5a
 80125ec:	8812      	ldrh	r2, [r2, #0]
 80125ee:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2200      	movs	r2, #0
 80125f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	689a      	ldr	r2, [r3, #8]
 80125fa:	2380      	movs	r3, #128	; 0x80
 80125fc:	015b      	lsls	r3, r3, #5
 80125fe:	429a      	cmp	r2, r3
 8012600:	d10d      	bne.n	801261e <UART_Start_Receive_IT+0x56>
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	691b      	ldr	r3, [r3, #16]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d104      	bne.n	8012614 <UART_Start_Receive_IT+0x4c>
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	225c      	movs	r2, #92	; 0x5c
 801260e:	4943      	ldr	r1, [pc, #268]	; (801271c <UART_Start_Receive_IT+0x154>)
 8012610:	5299      	strh	r1, [r3, r2]
 8012612:	e02e      	b.n	8012672 <UART_Start_Receive_IT+0xaa>
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	225c      	movs	r2, #92	; 0x5c
 8012618:	21ff      	movs	r1, #255	; 0xff
 801261a:	5299      	strh	r1, [r3, r2]
 801261c:	e029      	b.n	8012672 <UART_Start_Receive_IT+0xaa>
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	689b      	ldr	r3, [r3, #8]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d10d      	bne.n	8012642 <UART_Start_Receive_IT+0x7a>
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	691b      	ldr	r3, [r3, #16]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d104      	bne.n	8012638 <UART_Start_Receive_IT+0x70>
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	225c      	movs	r2, #92	; 0x5c
 8012632:	21ff      	movs	r1, #255	; 0xff
 8012634:	5299      	strh	r1, [r3, r2]
 8012636:	e01c      	b.n	8012672 <UART_Start_Receive_IT+0xaa>
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	225c      	movs	r2, #92	; 0x5c
 801263c:	217f      	movs	r1, #127	; 0x7f
 801263e:	5299      	strh	r1, [r3, r2]
 8012640:	e017      	b.n	8012672 <UART_Start_Receive_IT+0xaa>
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	689a      	ldr	r2, [r3, #8]
 8012646:	2380      	movs	r3, #128	; 0x80
 8012648:	055b      	lsls	r3, r3, #21
 801264a:	429a      	cmp	r2, r3
 801264c:	d10d      	bne.n	801266a <UART_Start_Receive_IT+0xa2>
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	691b      	ldr	r3, [r3, #16]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d104      	bne.n	8012660 <UART_Start_Receive_IT+0x98>
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	225c      	movs	r2, #92	; 0x5c
 801265a:	217f      	movs	r1, #127	; 0x7f
 801265c:	5299      	strh	r1, [r3, r2]
 801265e:	e008      	b.n	8012672 <UART_Start_Receive_IT+0xaa>
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	225c      	movs	r2, #92	; 0x5c
 8012664:	213f      	movs	r1, #63	; 0x3f
 8012666:	5299      	strh	r1, [r3, r2]
 8012668:	e003      	b.n	8012672 <UART_Start_Receive_IT+0xaa>
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	225c      	movs	r2, #92	; 0x5c
 801266e:	2100      	movs	r1, #0
 8012670:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	2280      	movs	r2, #128	; 0x80
 8012676:	2100      	movs	r1, #0
 8012678:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	2222      	movs	r2, #34	; 0x22
 801267e:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012680:	f3ef 8310 	mrs	r3, PRIMASK
 8012684:	61fb      	str	r3, [r7, #28]
  return(result);
 8012686:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012688:	62fb      	str	r3, [r7, #44]	; 0x2c
 801268a:	2301      	movs	r3, #1
 801268c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801268e:	6a3b      	ldr	r3, [r7, #32]
 8012690:	f383 8810 	msr	PRIMASK, r3
}
 8012694:	46c0      	nop			; (mov r8, r8)
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	689a      	ldr	r2, [r3, #8]
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2101      	movs	r1, #1
 80126a2:	430a      	orrs	r2, r1
 80126a4:	609a      	str	r2, [r3, #8]
 80126a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ac:	f383 8810 	msr	PRIMASK, r3
}
 80126b0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	689a      	ldr	r2, [r3, #8]
 80126b6:	2380      	movs	r3, #128	; 0x80
 80126b8:	015b      	lsls	r3, r3, #5
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d107      	bne.n	80126ce <UART_Start_Receive_IT+0x106>
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	691b      	ldr	r3, [r3, #16]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d103      	bne.n	80126ce <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	4a15      	ldr	r2, [pc, #84]	; (8012720 <UART_Start_Receive_IT+0x158>)
 80126ca:	665a      	str	r2, [r3, #100]	; 0x64
 80126cc:	e002      	b.n	80126d4 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	4a14      	ldr	r2, [pc, #80]	; (8012724 <UART_Start_Receive_IT+0x15c>)
 80126d2:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	2274      	movs	r2, #116	; 0x74
 80126d8:	2100      	movs	r1, #0
 80126da:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126dc:	f3ef 8310 	mrs	r3, PRIMASK
 80126e0:	613b      	str	r3, [r7, #16]
  return(result);
 80126e2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80126e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80126e6:	2301      	movs	r3, #1
 80126e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	f383 8810 	msr	PRIMASK, r3
}
 80126f0:	46c0      	nop			; (mov r8, r8)
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	681a      	ldr	r2, [r3, #0]
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	2190      	movs	r1, #144	; 0x90
 80126fe:	0049      	lsls	r1, r1, #1
 8012700:	430a      	orrs	r2, r1
 8012702:	601a      	str	r2, [r3, #0]
 8012704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012706:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012708:	69bb      	ldr	r3, [r7, #24]
 801270a:	f383 8810 	msr	PRIMASK, r3
}
 801270e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8012710:	2300      	movs	r3, #0
}
 8012712:	0018      	movs	r0, r3
 8012714:	46bd      	mov	sp, r7
 8012716:	b00c      	add	sp, #48	; 0x30
 8012718:	bd80      	pop	{r7, pc}
 801271a:	46c0      	nop			; (mov r8, r8)
 801271c:	000001ff 	.word	0x000001ff
 8012720:	08012b51 	.word	0x08012b51
 8012724:	080129e1 	.word	0x080129e1

08012728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b08e      	sub	sp, #56	; 0x38
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012730:	f3ef 8310 	mrs	r3, PRIMASK
 8012734:	617b      	str	r3, [r7, #20]
  return(result);
 8012736:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012738:	637b      	str	r3, [r7, #52]	; 0x34
 801273a:	2301      	movs	r3, #1
 801273c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801273e:	69bb      	ldr	r3, [r7, #24]
 8012740:	f383 8810 	msr	PRIMASK, r3
}
 8012744:	46c0      	nop			; (mov r8, r8)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	4925      	ldr	r1, [pc, #148]	; (80127e8 <UART_EndRxTransfer+0xc0>)
 8012752:	400a      	ands	r2, r1
 8012754:	601a      	str	r2, [r3, #0]
 8012756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012758:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	f383 8810 	msr	PRIMASK, r3
}
 8012760:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012762:	f3ef 8310 	mrs	r3, PRIMASK
 8012766:	623b      	str	r3, [r7, #32]
  return(result);
 8012768:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801276a:	633b      	str	r3, [r7, #48]	; 0x30
 801276c:	2301      	movs	r3, #1
 801276e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012772:	f383 8810 	msr	PRIMASK, r3
}
 8012776:	46c0      	nop			; (mov r8, r8)
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	689a      	ldr	r2, [r3, #8]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2101      	movs	r1, #1
 8012784:	438a      	bics	r2, r1
 8012786:	609a      	str	r2, [r3, #8]
 8012788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801278e:	f383 8810 	msr	PRIMASK, r3
}
 8012792:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012798:	2b01      	cmp	r3, #1
 801279a:	d118      	bne.n	80127ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801279c:	f3ef 8310 	mrs	r3, PRIMASK
 80127a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80127a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127a6:	2301      	movs	r3, #1
 80127a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	f383 8810 	msr	PRIMASK, r3
}
 80127b0:	46c0      	nop			; (mov r8, r8)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2110      	movs	r1, #16
 80127be:	438a      	bics	r2, r1
 80127c0:	601a      	str	r2, [r3, #0]
 80127c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	f383 8810 	msr	PRIMASK, r3
}
 80127cc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2220      	movs	r2, #32
 80127d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2200      	movs	r2, #0
 80127d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2200      	movs	r2, #0
 80127de:	665a      	str	r2, [r3, #100]	; 0x64
}
 80127e0:	46c0      	nop			; (mov r8, r8)
 80127e2:	46bd      	mov	sp, r7
 80127e4:	b00e      	add	sp, #56	; 0x38
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	fffffedf 	.word	0xfffffedf

080127ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	225a      	movs	r2, #90	; 0x5a
 80127fe:	2100      	movs	r1, #0
 8012800:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2252      	movs	r2, #82	; 0x52
 8012806:	2100      	movs	r1, #0
 8012808:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	0018      	movs	r0, r3
 801280e:	f7ff fb7f 	bl	8011f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012812:	46c0      	nop			; (mov r8, r8)
 8012814:	46bd      	mov	sp, r7
 8012816:	b004      	add	sp, #16
 8012818:	bd80      	pop	{r7, pc}

0801281a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801281a:	b580      	push	{r7, lr}
 801281c:	b08a      	sub	sp, #40	; 0x28
 801281e:	af00      	add	r7, sp, #0
 8012820:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012826:	2b21      	cmp	r3, #33	; 0x21
 8012828:	d14d      	bne.n	80128c6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2252      	movs	r2, #82	; 0x52
 801282e:	5a9b      	ldrh	r3, [r3, r2]
 8012830:	b29b      	uxth	r3, r3
 8012832:	2b00      	cmp	r3, #0
 8012834:	d132      	bne.n	801289c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012836:	f3ef 8310 	mrs	r3, PRIMASK
 801283a:	60bb      	str	r3, [r7, #8]
  return(result);
 801283c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801283e:	627b      	str	r3, [r7, #36]	; 0x24
 8012840:	2301      	movs	r3, #1
 8012842:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	f383 8810 	msr	PRIMASK, r3
}
 801284a:	46c0      	nop			; (mov r8, r8)
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	681a      	ldr	r2, [r3, #0]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2180      	movs	r1, #128	; 0x80
 8012858:	438a      	bics	r2, r1
 801285a:	601a      	str	r2, [r3, #0]
 801285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801285e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	f383 8810 	msr	PRIMASK, r3
}
 8012866:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012868:	f3ef 8310 	mrs	r3, PRIMASK
 801286c:	617b      	str	r3, [r7, #20]
  return(result);
 801286e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012870:	623b      	str	r3, [r7, #32]
 8012872:	2301      	movs	r3, #1
 8012874:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012876:	69bb      	ldr	r3, [r7, #24]
 8012878:	f383 8810 	msr	PRIMASK, r3
}
 801287c:	46c0      	nop			; (mov r8, r8)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	2140      	movs	r1, #64	; 0x40
 801288a:	430a      	orrs	r2, r1
 801288c:	601a      	str	r2, [r3, #0]
 801288e:	6a3b      	ldr	r3, [r7, #32]
 8012890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012892:	69fb      	ldr	r3, [r7, #28]
 8012894:	f383 8810 	msr	PRIMASK, r3
}
 8012898:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801289a:	e014      	b.n	80128c6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128a0:	781a      	ldrb	r2, [r3, #0]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	b292      	uxth	r2, r2
 80128a8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128ae:	1c5a      	adds	r2, r3, #1
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2252      	movs	r2, #82	; 0x52
 80128b8:	5a9b      	ldrh	r3, [r3, r2]
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	3b01      	subs	r3, #1
 80128be:	b299      	uxth	r1, r3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2252      	movs	r2, #82	; 0x52
 80128c4:	5299      	strh	r1, [r3, r2]
}
 80128c6:	46c0      	nop			; (mov r8, r8)
 80128c8:	46bd      	mov	sp, r7
 80128ca:	b00a      	add	sp, #40	; 0x28
 80128cc:	bd80      	pop	{r7, pc}

080128ce <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b08c      	sub	sp, #48	; 0x30
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128da:	2b21      	cmp	r3, #33	; 0x21
 80128dc:	d151      	bne.n	8012982 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2252      	movs	r2, #82	; 0x52
 80128e2:	5a9b      	ldrh	r3, [r3, r2]
 80128e4:	b29b      	uxth	r3, r3
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d132      	bne.n	8012950 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128ea:	f3ef 8310 	mrs	r3, PRIMASK
 80128ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80128f0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80128f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80128f4:	2301      	movs	r3, #1
 80128f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	f383 8810 	msr	PRIMASK, r3
}
 80128fe:	46c0      	nop			; (mov r8, r8)
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	681a      	ldr	r2, [r3, #0]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2180      	movs	r1, #128	; 0x80
 801290c:	438a      	bics	r2, r1
 801290e:	601a      	str	r2, [r3, #0]
 8012910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012912:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	f383 8810 	msr	PRIMASK, r3
}
 801291a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801291c:	f3ef 8310 	mrs	r3, PRIMASK
 8012920:	61bb      	str	r3, [r7, #24]
  return(result);
 8012922:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012924:	627b      	str	r3, [r7, #36]	; 0x24
 8012926:	2301      	movs	r3, #1
 8012928:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801292a:	69fb      	ldr	r3, [r7, #28]
 801292c:	f383 8810 	msr	PRIMASK, r3
}
 8012930:	46c0      	nop			; (mov r8, r8)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	681a      	ldr	r2, [r3, #0]
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2140      	movs	r1, #64	; 0x40
 801293e:	430a      	orrs	r2, r1
 8012940:	601a      	str	r2, [r3, #0]
 8012942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012944:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012946:	6a3b      	ldr	r3, [r7, #32]
 8012948:	f383 8810 	msr	PRIMASK, r3
}
 801294c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801294e:	e018      	b.n	8012982 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012954:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012958:	881a      	ldrh	r2, [r3, #0]
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	05d2      	lsls	r2, r2, #23
 8012960:	0dd2      	lsrs	r2, r2, #23
 8012962:	b292      	uxth	r2, r2
 8012964:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801296a:	1c9a      	adds	r2, r3, #2
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2252      	movs	r2, #82	; 0x52
 8012974:	5a9b      	ldrh	r3, [r3, r2]
 8012976:	b29b      	uxth	r3, r3
 8012978:	3b01      	subs	r3, #1
 801297a:	b299      	uxth	r1, r3
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2252      	movs	r2, #82	; 0x52
 8012980:	5299      	strh	r1, [r3, r2]
}
 8012982:	46c0      	nop			; (mov r8, r8)
 8012984:	46bd      	mov	sp, r7
 8012986:	b00c      	add	sp, #48	; 0x30
 8012988:	bd80      	pop	{r7, pc}

0801298a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801298a:	b580      	push	{r7, lr}
 801298c:	b086      	sub	sp, #24
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012992:	f3ef 8310 	mrs	r3, PRIMASK
 8012996:	60bb      	str	r3, [r7, #8]
  return(result);
 8012998:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801299a:	617b      	str	r3, [r7, #20]
 801299c:	2301      	movs	r3, #1
 801299e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	f383 8810 	msr	PRIMASK, r3
}
 80129a6:	46c0      	nop			; (mov r8, r8)
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	2140      	movs	r1, #64	; 0x40
 80129b4:	438a      	bics	r2, r1
 80129b6:	601a      	str	r2, [r3, #0]
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129bc:	693b      	ldr	r3, [r7, #16]
 80129be:	f383 8810 	msr	PRIMASK, r3
}
 80129c2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2220      	movs	r2, #32
 80129c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2200      	movs	r2, #0
 80129ce:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	0018      	movs	r0, r3
 80129d4:	f7ff fa8c 	bl	8011ef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80129d8:	46c0      	nop			; (mov r8, r8)
 80129da:	46bd      	mov	sp, r7
 80129dc:	b006      	add	sp, #24
 80129de:	bd80      	pop	{r7, pc}

080129e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80129e0:	b590      	push	{r4, r7, lr}
 80129e2:	b091      	sub	sp, #68	; 0x44
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80129e8:	203e      	movs	r0, #62	; 0x3e
 80129ea:	183b      	adds	r3, r7, r0
 80129ec:	687a      	ldr	r2, [r7, #4]
 80129ee:	215c      	movs	r1, #92	; 0x5c
 80129f0:	5a52      	ldrh	r2, [r2, r1]
 80129f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80129f8:	2b22      	cmp	r3, #34	; 0x22
 80129fa:	d000      	beq.n	80129fe <UART_RxISR_8BIT+0x1e>
 80129fc:	e097      	b.n	8012b2e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681a      	ldr	r2, [r3, #0]
 8012a02:	243c      	movs	r4, #60	; 0x3c
 8012a04:	193b      	adds	r3, r7, r4
 8012a06:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8012a08:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012a0a:	193b      	adds	r3, r7, r4
 8012a0c:	881b      	ldrh	r3, [r3, #0]
 8012a0e:	b2da      	uxtb	r2, r3
 8012a10:	183b      	adds	r3, r7, r0
 8012a12:	881b      	ldrh	r3, [r3, #0]
 8012a14:	b2d9      	uxtb	r1, r3
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a1a:	400a      	ands	r2, r1
 8012a1c:	b2d2      	uxtb	r2, r2
 8012a1e:	701a      	strb	r2, [r3, #0]
    if (huart->Instance == USART2) GSM_Receive((uint8_t)(uhdata & (uint8_t)uhMask));
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4a48      	ldr	r2, [pc, #288]	; (8012b48 <UART_RxISR_8BIT+0x168>)
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d10a      	bne.n	8012a40 <UART_RxISR_8BIT+0x60>
 8012a2a:	193b      	adds	r3, r7, r4
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	b2db      	uxtb	r3, r3
 8012a30:	183a      	adds	r2, r7, r0
 8012a32:	8812      	ldrh	r2, [r2, #0]
 8012a34:	b2d2      	uxtb	r2, r2
 8012a36:	4013      	ands	r3, r2
 8012a38:	b2db      	uxtb	r3, r3
 8012a3a:	0018      	movs	r0, r3
 8012a3c:	f7f9 fe44 	bl	800c6c8 <GSM_Receive>
    //if (huart->Instance == USART1) Debug_Receive((uint8_t)(uhdata & (uint8_t)uhMask));

    if (huart->RxXferCount == 0U)
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	225a      	movs	r2, #90	; 0x5a
 8012a44:	5a9b      	ldrh	r3, [r3, r2]
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d178      	bne.n	8012b3e <UART_RxISR_8BIT+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8012a50:	61bb      	str	r3, [r7, #24]
  return(result);
 8012a52:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012a54:	63bb      	str	r3, [r7, #56]	; 0x38
 8012a56:	2301      	movs	r3, #1
 8012a58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	f383 8810 	msr	PRIMASK, r3
}
 8012a60:	46c0      	nop			; (mov r8, r8)
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	681a      	ldr	r2, [r3, #0]
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	4937      	ldr	r1, [pc, #220]	; (8012b4c <UART_RxISR_8BIT+0x16c>)
 8012a6e:	400a      	ands	r2, r1
 8012a70:	601a      	str	r2, [r3, #0]
 8012a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a76:	6a3b      	ldr	r3, [r7, #32]
 8012a78:	f383 8810 	msr	PRIMASK, r3
}
 8012a7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8012a82:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8012a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a86:	637b      	str	r3, [r7, #52]	; 0x34
 8012a88:	2301      	movs	r3, #1
 8012a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8e:	f383 8810 	msr	PRIMASK, r3
}
 8012a92:	46c0      	nop			; (mov r8, r8)
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	689a      	ldr	r2, [r3, #8]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	2101      	movs	r1, #1
 8012aa0:	438a      	bics	r2, r1
 8012aa2:	609a      	str	r2, [r3, #8]
 8012aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aaa:	f383 8810 	msr	PRIMASK, r3
}
 8012aae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2220      	movs	r2, #32
 8012ab4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d12f      	bne.n	8012b24 <UART_RxISR_8BIT+0x144>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012aca:	f3ef 8310 	mrs	r3, PRIMASK
 8012ace:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ad0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	f383 8810 	msr	PRIMASK, r3
}
 8012ade:	46c0      	nop			; (mov r8, r8)
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	681a      	ldr	r2, [r3, #0]
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	2110      	movs	r1, #16
 8012aec:	438a      	bics	r2, r1
 8012aee:	601a      	str	r2, [r3, #0]
 8012af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	f383 8810 	msr	PRIMASK, r3
}
 8012afa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	69db      	ldr	r3, [r3, #28]
 8012b02:	2210      	movs	r2, #16
 8012b04:	4013      	ands	r3, r2
 8012b06:	2b10      	cmp	r3, #16
 8012b08:	d103      	bne.n	8012b12 <UART_RxISR_8BIT+0x132>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2210      	movs	r2, #16
 8012b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2258      	movs	r2, #88	; 0x58
 8012b16:	5a9a      	ldrh	r2, [r3, r2]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	0011      	movs	r1, r2
 8012b1c:	0018      	movs	r0, r3
 8012b1e:	f7ff f9ff 	bl	8011f20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012b22:	e00c      	b.n	8012b3e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	0018      	movs	r0, r3
 8012b28:	f7ff f9ea 	bl	8011f00 <HAL_UART_RxCpltCallback>
}
 8012b2c:	e007      	b.n	8012b3e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	699a      	ldr	r2, [r3, #24]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	2108      	movs	r1, #8
 8012b3a:	430a      	orrs	r2, r1
 8012b3c:	619a      	str	r2, [r3, #24]
}
 8012b3e:	46c0      	nop			; (mov r8, r8)
 8012b40:	46bd      	mov	sp, r7
 8012b42:	b011      	add	sp, #68	; 0x44
 8012b44:	bd90      	pop	{r4, r7, pc}
 8012b46:	46c0      	nop			; (mov r8, r8)
 8012b48:	40004400 	.word	0x40004400
 8012b4c:	fffffedf 	.word	0xfffffedf

08012b50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b090      	sub	sp, #64	; 0x40
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012b58:	203e      	movs	r0, #62	; 0x3e
 8012b5a:	183b      	adds	r3, r7, r0
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	215c      	movs	r1, #92	; 0x5c
 8012b60:	5a52      	ldrh	r2, [r2, r1]
 8012b62:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b68:	2b22      	cmp	r3, #34	; 0x22
 8012b6a:	d000      	beq.n	8012b6e <UART_RxISR_16BIT+0x1e>
 8012b6c:	e095      	b.n	8012c9a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681a      	ldr	r2, [r3, #0]
 8012b72:	213c      	movs	r1, #60	; 0x3c
 8012b74:	187b      	adds	r3, r7, r1
 8012b76:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8012b78:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b7e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8012b80:	187b      	adds	r3, r7, r1
 8012b82:	183a      	adds	r2, r7, r0
 8012b84:	881b      	ldrh	r3, [r3, #0]
 8012b86:	8812      	ldrh	r2, [r2, #0]
 8012b88:	4013      	ands	r3, r2
 8012b8a:	b29a      	uxth	r2, r3
 8012b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b94:	1c9a      	adds	r2, r3, #2
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	225a      	movs	r2, #90	; 0x5a
 8012b9e:	5a9b      	ldrh	r3, [r3, r2]
 8012ba0:	b29b      	uxth	r3, r3
 8012ba2:	3b01      	subs	r3, #1
 8012ba4:	b299      	uxth	r1, r3
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	225a      	movs	r2, #90	; 0x5a
 8012baa:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	225a      	movs	r2, #90	; 0x5a
 8012bb0:	5a9b      	ldrh	r3, [r3, r2]
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d178      	bne.n	8012caa <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8012bbc:	617b      	str	r3, [r7, #20]
  return(result);
 8012bbe:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	f383 8810 	msr	PRIMASK, r3
}
 8012bcc:	46c0      	nop			; (mov r8, r8)
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	4936      	ldr	r1, [pc, #216]	; (8012cb4 <UART_RxISR_16BIT+0x164>)
 8012bda:	400a      	ands	r2, r1
 8012bdc:	601a      	str	r2, [r3, #0]
 8012bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012be0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	f383 8810 	msr	PRIMASK, r3
}
 8012be8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bea:	f3ef 8310 	mrs	r3, PRIMASK
 8012bee:	623b      	str	r3, [r7, #32]
  return(result);
 8012bf0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfa:	f383 8810 	msr	PRIMASK, r3
}
 8012bfe:	46c0      	nop			; (mov r8, r8)
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	689a      	ldr	r2, [r3, #8]
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2101      	movs	r1, #1
 8012c0c:	438a      	bics	r2, r1
 8012c0e:	609a      	str	r2, [r3, #8]
 8012c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c16:	f383 8810 	msr	PRIMASK, r3
}
 8012c1a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2220      	movs	r2, #32
 8012c20:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2200      	movs	r2, #0
 8012c26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d12f      	bne.n	8012c90 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2200      	movs	r2, #0
 8012c34:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c36:	f3ef 8310 	mrs	r3, PRIMASK
 8012c3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8012c3c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c40:	2301      	movs	r3, #1
 8012c42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	f383 8810 	msr	PRIMASK, r3
}
 8012c4a:	46c0      	nop			; (mov r8, r8)
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	681a      	ldr	r2, [r3, #0]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2110      	movs	r1, #16
 8012c58:	438a      	bics	r2, r1
 8012c5a:	601a      	str	r2, [r3, #0]
 8012c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	f383 8810 	msr	PRIMASK, r3
}
 8012c66:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	69db      	ldr	r3, [r3, #28]
 8012c6e:	2210      	movs	r2, #16
 8012c70:	4013      	ands	r3, r2
 8012c72:	2b10      	cmp	r3, #16
 8012c74:	d103      	bne.n	8012c7e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	2210      	movs	r2, #16
 8012c7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	2258      	movs	r2, #88	; 0x58
 8012c82:	5a9a      	ldrh	r2, [r3, r2]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	0011      	movs	r1, r2
 8012c88:	0018      	movs	r0, r3
 8012c8a:	f7ff f949 	bl	8011f20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012c8e:	e00c      	b.n	8012caa <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	0018      	movs	r0, r3
 8012c94:	f7ff f934 	bl	8011f00 <HAL_UART_RxCpltCallback>
}
 8012c98:	e007      	b.n	8012caa <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	699a      	ldr	r2, [r3, #24]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	2108      	movs	r1, #8
 8012ca6:	430a      	orrs	r2, r1
 8012ca8:	619a      	str	r2, [r3, #24]
}
 8012caa:	46c0      	nop			; (mov r8, r8)
 8012cac:	46bd      	mov	sp, r7
 8012cae:	b010      	add	sp, #64	; 0x40
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	46c0      	nop			; (mov r8, r8)
 8012cb4:	fffffedf 	.word	0xfffffedf

08012cb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012cc0:	46c0      	nop			; (mov r8, r8)
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	b002      	add	sp, #8
 8012cc6:	bd80      	pop	{r7, pc}

08012cc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b084      	sub	sp, #16
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2244      	movs	r2, #68	; 0x44
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012cd8:	4b05      	ldr	r3, [pc, #20]	; (8012cf0 <USB_EnableGlobalInt+0x28>)
 8012cda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	b299      	uxth	r1, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2240      	movs	r2, #64	; 0x40
 8012ce4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012ce6:	2300      	movs	r3, #0
}
 8012ce8:	0018      	movs	r0, r3
 8012cea:	46bd      	mov	sp, r7
 8012cec:	b004      	add	sp, #16
 8012cee:	bd80      	pop	{r7, pc}
 8012cf0:	0000bf80 	.word	0x0000bf80

08012cf4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012cfc:	4b09      	ldr	r3, [pc, #36]	; (8012d24 <USB_DisableGlobalInt+0x30>)
 8012cfe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2240      	movs	r2, #64	; 0x40
 8012d04:	5a9b      	ldrh	r3, [r3, r2]
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	68fa      	ldr	r2, [r7, #12]
 8012d0a:	b292      	uxth	r2, r2
 8012d0c:	43d2      	mvns	r2, r2
 8012d0e:	b292      	uxth	r2, r2
 8012d10:	4013      	ands	r3, r2
 8012d12:	b299      	uxth	r1, r3
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2240      	movs	r2, #64	; 0x40
 8012d18:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012d1a:	2300      	movs	r3, #0
}
 8012d1c:	0018      	movs	r0, r3
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	b004      	add	sp, #16
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	0000bf80 	.word	0x0000bf80

08012d28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012d28:	b084      	sub	sp, #16
 8012d2a:	b590      	push	{r4, r7, lr}
 8012d2c:	46c6      	mov	lr, r8
 8012d2e:	b500      	push	{lr}
 8012d30:	b082      	sub	sp, #8
 8012d32:	af00      	add	r7, sp, #0
 8012d34:	6078      	str	r0, [r7, #4]
 8012d36:	2004      	movs	r0, #4
 8012d38:	2410      	movs	r4, #16
 8012d3a:	46a4      	mov	ip, r4
 8012d3c:	2408      	movs	r4, #8
 8012d3e:	46a0      	mov	r8, r4
 8012d40:	44b8      	add	r8, r7
 8012d42:	44c4      	add	ip, r8
 8012d44:	4460      	add	r0, ip
 8012d46:	6001      	str	r1, [r0, #0]
 8012d48:	6042      	str	r2, [r0, #4]
 8012d4a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2240      	movs	r2, #64	; 0x40
 8012d50:	2101      	movs	r1, #1
 8012d52:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2240      	movs	r2, #64	; 0x40
 8012d58:	2100      	movs	r1, #0
 8012d5a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2244      	movs	r2, #68	; 0x44
 8012d60:	2100      	movs	r1, #0
 8012d62:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2250      	movs	r2, #80	; 0x50
 8012d68:	2100      	movs	r1, #0
 8012d6a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012d6c:	2300      	movs	r3, #0
}
 8012d6e:	0018      	movs	r0, r3
 8012d70:	46bd      	mov	sp, r7
 8012d72:	b002      	add	sp, #8
 8012d74:	bc80      	pop	{r7}
 8012d76:	46b8      	mov	r8, r7
 8012d78:	bc90      	pop	{r4, r7}
 8012d7a:	bc08      	pop	{r3}
 8012d7c:	b004      	add	sp, #16
 8012d7e:	4718      	bx	r3

08012d80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b09c      	sub	sp, #112	; 0x70
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012d8a:	236f      	movs	r3, #111	; 0x6f
 8012d8c:	18fb      	adds	r3, r7, r3
 8012d8e:	2200      	movs	r2, #0
 8012d90:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012d92:	687a      	ldr	r2, [r7, #4]
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	781b      	ldrb	r3, [r3, #0]
 8012d98:	009b      	lsls	r3, r3, #2
 8012d9a:	18d3      	adds	r3, r2, r3
 8012d9c:	881b      	ldrh	r3, [r3, #0]
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	236c      	movs	r3, #108	; 0x6c
 8012da2:	18fb      	adds	r3, r7, r3
 8012da4:	49cf      	ldr	r1, [pc, #828]	; (80130e4 <USB_ActivateEndpoint+0x364>)
 8012da6:	400a      	ands	r2, r1
 8012da8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	78db      	ldrb	r3, [r3, #3]
 8012dae:	2b03      	cmp	r3, #3
 8012db0:	d017      	beq.n	8012de2 <USB_ActivateEndpoint+0x62>
 8012db2:	dc28      	bgt.n	8012e06 <USB_ActivateEndpoint+0x86>
 8012db4:	2b02      	cmp	r3, #2
 8012db6:	d00e      	beq.n	8012dd6 <USB_ActivateEndpoint+0x56>
 8012db8:	dc25      	bgt.n	8012e06 <USB_ActivateEndpoint+0x86>
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d002      	beq.n	8012dc4 <USB_ActivateEndpoint+0x44>
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d018      	beq.n	8012df4 <USB_ActivateEndpoint+0x74>
 8012dc2:	e020      	b.n	8012e06 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012dc4:	226c      	movs	r2, #108	; 0x6c
 8012dc6:	18bb      	adds	r3, r7, r2
 8012dc8:	18ba      	adds	r2, r7, r2
 8012dca:	8812      	ldrh	r2, [r2, #0]
 8012dcc:	2180      	movs	r1, #128	; 0x80
 8012dce:	0089      	lsls	r1, r1, #2
 8012dd0:	430a      	orrs	r2, r1
 8012dd2:	801a      	strh	r2, [r3, #0]
      break;
 8012dd4:	e01c      	b.n	8012e10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8012dd6:	226c      	movs	r2, #108	; 0x6c
 8012dd8:	18bb      	adds	r3, r7, r2
 8012dda:	18ba      	adds	r2, r7, r2
 8012ddc:	8812      	ldrh	r2, [r2, #0]
 8012dde:	801a      	strh	r2, [r3, #0]
      break;
 8012de0:	e016      	b.n	8012e10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012de2:	226c      	movs	r2, #108	; 0x6c
 8012de4:	18bb      	adds	r3, r7, r2
 8012de6:	18ba      	adds	r2, r7, r2
 8012de8:	8812      	ldrh	r2, [r2, #0]
 8012dea:	21c0      	movs	r1, #192	; 0xc0
 8012dec:	00c9      	lsls	r1, r1, #3
 8012dee:	430a      	orrs	r2, r1
 8012df0:	801a      	strh	r2, [r3, #0]
      break;
 8012df2:	e00d      	b.n	8012e10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012df4:	226c      	movs	r2, #108	; 0x6c
 8012df6:	18bb      	adds	r3, r7, r2
 8012df8:	18ba      	adds	r2, r7, r2
 8012dfa:	8812      	ldrh	r2, [r2, #0]
 8012dfc:	2180      	movs	r1, #128	; 0x80
 8012dfe:	00c9      	lsls	r1, r1, #3
 8012e00:	430a      	orrs	r2, r1
 8012e02:	801a      	strh	r2, [r3, #0]
      break;
 8012e04:	e004      	b.n	8012e10 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8012e06:	236f      	movs	r3, #111	; 0x6f
 8012e08:	18fb      	adds	r3, r7, r3
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	701a      	strb	r2, [r3, #0]
      break;
 8012e0e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8012e10:	687a      	ldr	r2, [r7, #4]
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	009b      	lsls	r3, r3, #2
 8012e18:	18d3      	adds	r3, r2, r3
 8012e1a:	226c      	movs	r2, #108	; 0x6c
 8012e1c:	18ba      	adds	r2, r7, r2
 8012e1e:	8812      	ldrh	r2, [r2, #0]
 8012e20:	49b1      	ldr	r1, [pc, #708]	; (80130e8 <USB_ActivateEndpoint+0x368>)
 8012e22:	430a      	orrs	r2, r1
 8012e24:	b292      	uxth	r2, r2
 8012e26:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	781b      	ldrb	r3, [r3, #0]
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	18d3      	adds	r3, r2, r3
 8012e32:	881b      	ldrh	r3, [r3, #0]
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	b21b      	sxth	r3, r3
 8012e38:	4aac      	ldr	r2, [pc, #688]	; (80130ec <USB_ActivateEndpoint+0x36c>)
 8012e3a:	4013      	ands	r3, r2
 8012e3c:	b21a      	sxth	r2, r3
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	b21b      	sxth	r3, r3
 8012e44:	4313      	orrs	r3, r2
 8012e46:	b21a      	sxth	r2, r3
 8012e48:	2166      	movs	r1, #102	; 0x66
 8012e4a:	187b      	adds	r3, r7, r1
 8012e4c:	801a      	strh	r2, [r3, #0]
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	18d3      	adds	r3, r2, r3
 8012e58:	187a      	adds	r2, r7, r1
 8012e5a:	8812      	ldrh	r2, [r2, #0]
 8012e5c:	49a2      	ldr	r1, [pc, #648]	; (80130e8 <USB_ActivateEndpoint+0x368>)
 8012e5e:	430a      	orrs	r2, r1
 8012e60:	b292      	uxth	r2, r2
 8012e62:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	7b1b      	ldrb	r3, [r3, #12]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d000      	beq.n	8012e6e <USB_ActivateEndpoint+0xee>
 8012e6c:	e150      	b.n	8013110 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	785b      	ldrb	r3, [r3, #1]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d100      	bne.n	8012e78 <USB_ActivateEndpoint+0xf8>
 8012e76:	e07a      	b.n	8012f6e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	61bb      	str	r3, [r7, #24]
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2250      	movs	r2, #80	; 0x50
 8012e80:	5a9b      	ldrh	r3, [r3, r2]
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	001a      	movs	r2, r3
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	189b      	adds	r3, r3, r2
 8012e8a:	61bb      	str	r3, [r7, #24]
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	00da      	lsls	r2, r3, #3
 8012e92:	69bb      	ldr	r3, [r7, #24]
 8012e94:	18d3      	adds	r3, r2, r3
 8012e96:	2280      	movs	r2, #128	; 0x80
 8012e98:	00d2      	lsls	r2, r2, #3
 8012e9a:	4694      	mov	ip, r2
 8012e9c:	4463      	add	r3, ip
 8012e9e:	617b      	str	r3, [r7, #20]
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	88db      	ldrh	r3, [r3, #6]
 8012ea4:	085b      	lsrs	r3, r3, #1
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	18db      	adds	r3, r3, r3
 8012eaa:	b29a      	uxth	r2, r3
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012eb0:	687a      	ldr	r2, [r7, #4]
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	009b      	lsls	r3, r3, #2
 8012eb8:	18d2      	adds	r2, r2, r3
 8012eba:	2112      	movs	r1, #18
 8012ebc:	187b      	adds	r3, r7, r1
 8012ebe:	8812      	ldrh	r2, [r2, #0]
 8012ec0:	801a      	strh	r2, [r3, #0]
 8012ec2:	187b      	adds	r3, r7, r1
 8012ec4:	881b      	ldrh	r3, [r3, #0]
 8012ec6:	2240      	movs	r2, #64	; 0x40
 8012ec8:	4013      	ands	r3, r2
 8012eca:	d016      	beq.n	8012efa <USB_ActivateEndpoint+0x17a>
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	18d3      	adds	r3, r2, r3
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	b29a      	uxth	r2, r3
 8012eda:	2010      	movs	r0, #16
 8012edc:	183b      	adds	r3, r7, r0
 8012ede:	4983      	ldr	r1, [pc, #524]	; (80130ec <USB_ActivateEndpoint+0x36c>)
 8012ee0:	400a      	ands	r2, r1
 8012ee2:	801a      	strh	r2, [r3, #0]
 8012ee4:	687a      	ldr	r2, [r7, #4]
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	009b      	lsls	r3, r3, #2
 8012eec:	18d3      	adds	r3, r2, r3
 8012eee:	183a      	adds	r2, r7, r0
 8012ef0:	8812      	ldrh	r2, [r2, #0]
 8012ef2:	497f      	ldr	r1, [pc, #508]	; (80130f0 <USB_ActivateEndpoint+0x370>)
 8012ef4:	430a      	orrs	r2, r1
 8012ef6:	b292      	uxth	r2, r2
 8012ef8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	78db      	ldrb	r3, [r3, #3]
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d01d      	beq.n	8012f3e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012f02:	687a      	ldr	r2, [r7, #4]
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	009b      	lsls	r3, r3, #2
 8012f0a:	18d3      	adds	r3, r2, r3
 8012f0c:	881b      	ldrh	r3, [r3, #0]
 8012f0e:	b29a      	uxth	r2, r3
 8012f10:	200c      	movs	r0, #12
 8012f12:	183b      	adds	r3, r7, r0
 8012f14:	4977      	ldr	r1, [pc, #476]	; (80130f4 <USB_ActivateEndpoint+0x374>)
 8012f16:	400a      	ands	r2, r1
 8012f18:	801a      	strh	r2, [r3, #0]
 8012f1a:	183b      	adds	r3, r7, r0
 8012f1c:	183a      	adds	r2, r7, r0
 8012f1e:	8812      	ldrh	r2, [r2, #0]
 8012f20:	2120      	movs	r1, #32
 8012f22:	404a      	eors	r2, r1
 8012f24:	801a      	strh	r2, [r3, #0]
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	009b      	lsls	r3, r3, #2
 8012f2e:	18d3      	adds	r3, r2, r3
 8012f30:	183a      	adds	r2, r7, r0
 8012f32:	8812      	ldrh	r2, [r2, #0]
 8012f34:	496c      	ldr	r1, [pc, #432]	; (80130e8 <USB_ActivateEndpoint+0x368>)
 8012f36:	430a      	orrs	r2, r1
 8012f38:	b292      	uxth	r2, r2
 8012f3a:	801a      	strh	r2, [r3, #0]
 8012f3c:	e27a      	b.n	8013434 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012f3e:	687a      	ldr	r2, [r7, #4]
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	009b      	lsls	r3, r3, #2
 8012f46:	18d3      	adds	r3, r2, r3
 8012f48:	881b      	ldrh	r3, [r3, #0]
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	200e      	movs	r0, #14
 8012f4e:	183b      	adds	r3, r7, r0
 8012f50:	4968      	ldr	r1, [pc, #416]	; (80130f4 <USB_ActivateEndpoint+0x374>)
 8012f52:	400a      	ands	r2, r1
 8012f54:	801a      	strh	r2, [r3, #0]
 8012f56:	687a      	ldr	r2, [r7, #4]
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	009b      	lsls	r3, r3, #2
 8012f5e:	18d3      	adds	r3, r2, r3
 8012f60:	183a      	adds	r2, r7, r0
 8012f62:	8812      	ldrh	r2, [r2, #0]
 8012f64:	4960      	ldr	r1, [pc, #384]	; (80130e8 <USB_ActivateEndpoint+0x368>)
 8012f66:	430a      	orrs	r2, r1
 8012f68:	b292      	uxth	r2, r2
 8012f6a:	801a      	strh	r2, [r3, #0]
 8012f6c:	e262      	b.n	8013434 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	633b      	str	r3, [r7, #48]	; 0x30
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2250      	movs	r2, #80	; 0x50
 8012f76:	5a9b      	ldrh	r3, [r3, r2]
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	001a      	movs	r2, r3
 8012f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7e:	189b      	adds	r3, r3, r2
 8012f80:	633b      	str	r3, [r7, #48]	; 0x30
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	00da      	lsls	r2, r3, #3
 8012f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8a:	18d3      	adds	r3, r2, r3
 8012f8c:	4a5a      	ldr	r2, [pc, #360]	; (80130f8 <USB_ActivateEndpoint+0x378>)
 8012f8e:	4694      	mov	ip, r2
 8012f90:	4463      	add	r3, ip
 8012f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	88db      	ldrh	r3, [r3, #6]
 8012f98:	085b      	lsrs	r3, r3, #1
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	18db      	adds	r3, r3, r3
 8012f9e:	b29a      	uxth	r2, r3
 8012fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2250      	movs	r2, #80	; 0x50
 8012fac:	5a9b      	ldrh	r3, [r3, r2]
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	001a      	movs	r2, r3
 8012fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb4:	189b      	adds	r3, r3, r2
 8012fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	00da      	lsls	r2, r3, #3
 8012fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc0:	18d3      	adds	r3, r2, r3
 8012fc2:	4a4e      	ldr	r2, [pc, #312]	; (80130fc <USB_ActivateEndpoint+0x37c>)
 8012fc4:	4694      	mov	ip, r2
 8012fc6:	4463      	add	r3, ip
 8012fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	691b      	ldr	r3, [r3, #16]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d110      	bne.n	8012ff4 <USB_ActivateEndpoint+0x274>
 8012fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd4:	881b      	ldrh	r3, [r3, #0]
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	4a49      	ldr	r2, [pc, #292]	; (8013100 <USB_ActivateEndpoint+0x380>)
 8012fda:	4013      	ands	r3, r2
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe0:	801a      	strh	r2, [r3, #0]
 8012fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe4:	881b      	ldrh	r3, [r3, #0]
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	4a46      	ldr	r2, [pc, #280]	; (8013104 <USB_ActivateEndpoint+0x384>)
 8012fea:	4313      	orrs	r3, r2
 8012fec:	b29a      	uxth	r2, r3
 8012fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff0:	801a      	strh	r2, [r3, #0]
 8012ff2:	e02b      	b.n	801304c <USB_ActivateEndpoint+0x2cc>
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	691b      	ldr	r3, [r3, #16]
 8012ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8012ffa:	d812      	bhi.n	8013022 <USB_ActivateEndpoint+0x2a2>
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	691b      	ldr	r3, [r3, #16]
 8013000:	085b      	lsrs	r3, r3, #1
 8013002:	66bb      	str	r3, [r7, #104]	; 0x68
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	691b      	ldr	r3, [r3, #16]
 8013008:	2201      	movs	r2, #1
 801300a:	4013      	ands	r3, r2
 801300c:	d002      	beq.n	8013014 <USB_ActivateEndpoint+0x294>
 801300e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013010:	3301      	adds	r3, #1
 8013012:	66bb      	str	r3, [r7, #104]	; 0x68
 8013014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013016:	b29b      	uxth	r3, r3
 8013018:	029b      	lsls	r3, r3, #10
 801301a:	b29a      	uxth	r2, r3
 801301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301e:	801a      	strh	r2, [r3, #0]
 8013020:	e014      	b.n	801304c <USB_ActivateEndpoint+0x2cc>
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	691b      	ldr	r3, [r3, #16]
 8013026:	095b      	lsrs	r3, r3, #5
 8013028:	66bb      	str	r3, [r7, #104]	; 0x68
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	691b      	ldr	r3, [r3, #16]
 801302e:	221f      	movs	r2, #31
 8013030:	4013      	ands	r3, r2
 8013032:	d102      	bne.n	801303a <USB_ActivateEndpoint+0x2ba>
 8013034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013036:	3b01      	subs	r3, #1
 8013038:	66bb      	str	r3, [r7, #104]	; 0x68
 801303a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801303c:	b29b      	uxth	r3, r3
 801303e:	029b      	lsls	r3, r3, #10
 8013040:	b29b      	uxth	r3, r3
 8013042:	4a30      	ldr	r2, [pc, #192]	; (8013104 <USB_ActivateEndpoint+0x384>)
 8013044:	4313      	orrs	r3, r2
 8013046:	b29a      	uxth	r2, r3
 8013048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801304a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801304c:	687a      	ldr	r2, [r7, #4]
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	009b      	lsls	r3, r3, #2
 8013054:	18d2      	adds	r2, r2, r3
 8013056:	2122      	movs	r1, #34	; 0x22
 8013058:	187b      	adds	r3, r7, r1
 801305a:	8812      	ldrh	r2, [r2, #0]
 801305c:	801a      	strh	r2, [r3, #0]
 801305e:	187b      	adds	r3, r7, r1
 8013060:	881a      	ldrh	r2, [r3, #0]
 8013062:	2380      	movs	r3, #128	; 0x80
 8013064:	01db      	lsls	r3, r3, #7
 8013066:	4013      	ands	r3, r2
 8013068:	d016      	beq.n	8013098 <USB_ActivateEndpoint+0x318>
 801306a:	687a      	ldr	r2, [r7, #4]
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	009b      	lsls	r3, r3, #2
 8013072:	18d3      	adds	r3, r2, r3
 8013074:	881b      	ldrh	r3, [r3, #0]
 8013076:	b29a      	uxth	r2, r3
 8013078:	2020      	movs	r0, #32
 801307a:	183b      	adds	r3, r7, r0
 801307c:	491b      	ldr	r1, [pc, #108]	; (80130ec <USB_ActivateEndpoint+0x36c>)
 801307e:	400a      	ands	r2, r1
 8013080:	801a      	strh	r2, [r3, #0]
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	009b      	lsls	r3, r3, #2
 801308a:	18d3      	adds	r3, r2, r3
 801308c:	183a      	adds	r2, r7, r0
 801308e:	8812      	ldrh	r2, [r2, #0]
 8013090:	491d      	ldr	r1, [pc, #116]	; (8013108 <USB_ActivateEndpoint+0x388>)
 8013092:	430a      	orrs	r2, r1
 8013094:	b292      	uxth	r2, r2
 8013096:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013098:	687a      	ldr	r2, [r7, #4]
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	18d3      	adds	r3, r2, r3
 80130a2:	881b      	ldrh	r3, [r3, #0]
 80130a4:	b29a      	uxth	r2, r3
 80130a6:	201e      	movs	r0, #30
 80130a8:	183b      	adds	r3, r7, r0
 80130aa:	4918      	ldr	r1, [pc, #96]	; (801310c <USB_ActivateEndpoint+0x38c>)
 80130ac:	400a      	ands	r2, r1
 80130ae:	801a      	strh	r2, [r3, #0]
 80130b0:	183b      	adds	r3, r7, r0
 80130b2:	183a      	adds	r2, r7, r0
 80130b4:	8812      	ldrh	r2, [r2, #0]
 80130b6:	2180      	movs	r1, #128	; 0x80
 80130b8:	0149      	lsls	r1, r1, #5
 80130ba:	404a      	eors	r2, r1
 80130bc:	801a      	strh	r2, [r3, #0]
 80130be:	183b      	adds	r3, r7, r0
 80130c0:	183a      	adds	r2, r7, r0
 80130c2:	8812      	ldrh	r2, [r2, #0]
 80130c4:	2180      	movs	r1, #128	; 0x80
 80130c6:	0189      	lsls	r1, r1, #6
 80130c8:	404a      	eors	r2, r1
 80130ca:	801a      	strh	r2, [r3, #0]
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	009b      	lsls	r3, r3, #2
 80130d4:	18d3      	adds	r3, r2, r3
 80130d6:	183a      	adds	r2, r7, r0
 80130d8:	8812      	ldrh	r2, [r2, #0]
 80130da:	4903      	ldr	r1, [pc, #12]	; (80130e8 <USB_ActivateEndpoint+0x368>)
 80130dc:	430a      	orrs	r2, r1
 80130de:	b292      	uxth	r2, r2
 80130e0:	801a      	strh	r2, [r3, #0]
 80130e2:	e1a7      	b.n	8013434 <USB_ActivateEndpoint+0x6b4>
 80130e4:	ffff898f 	.word	0xffff898f
 80130e8:	ffff8080 	.word	0xffff8080
 80130ec:	ffff8f8f 	.word	0xffff8f8f
 80130f0:	ffff80c0 	.word	0xffff80c0
 80130f4:	ffff8fbf 	.word	0xffff8fbf
 80130f8:	00000404 	.word	0x00000404
 80130fc:	00000406 	.word	0x00000406
 8013100:	ffff83ff 	.word	0xffff83ff
 8013104:	ffff8000 	.word	0xffff8000
 8013108:	ffffc080 	.word	0xffffc080
 801310c:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	78db      	ldrb	r3, [r3, #3]
 8013114:	2b02      	cmp	r3, #2
 8013116:	d117      	bne.n	8013148 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013118:	687a      	ldr	r2, [r7, #4]
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	781b      	ldrb	r3, [r3, #0]
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	18d3      	adds	r3, r2, r3
 8013122:	881b      	ldrh	r3, [r3, #0]
 8013124:	b29a      	uxth	r2, r3
 8013126:	2062      	movs	r0, #98	; 0x62
 8013128:	183b      	adds	r3, r7, r0
 801312a:	49c6      	ldr	r1, [pc, #792]	; (8013444 <USB_ActivateEndpoint+0x6c4>)
 801312c:	400a      	ands	r2, r1
 801312e:	801a      	strh	r2, [r3, #0]
 8013130:	687a      	ldr	r2, [r7, #4]
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	18d3      	adds	r3, r2, r3
 801313a:	183a      	adds	r2, r7, r0
 801313c:	8812      	ldrh	r2, [r2, #0]
 801313e:	49c2      	ldr	r1, [pc, #776]	; (8013448 <USB_ActivateEndpoint+0x6c8>)
 8013140:	430a      	orrs	r2, r1
 8013142:	b292      	uxth	r2, r2
 8013144:	801a      	strh	r2, [r3, #0]
 8013146:	e016      	b.n	8013176 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8013148:	687a      	ldr	r2, [r7, #4]
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	009b      	lsls	r3, r3, #2
 8013150:	18d3      	adds	r3, r2, r3
 8013152:	881b      	ldrh	r3, [r3, #0]
 8013154:	b29a      	uxth	r2, r3
 8013156:	2064      	movs	r0, #100	; 0x64
 8013158:	183b      	adds	r3, r7, r0
 801315a:	49bc      	ldr	r1, [pc, #752]	; (801344c <USB_ActivateEndpoint+0x6cc>)
 801315c:	400a      	ands	r2, r1
 801315e:	801a      	strh	r2, [r3, #0]
 8013160:	687a      	ldr	r2, [r7, #4]
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	781b      	ldrb	r3, [r3, #0]
 8013166:	009b      	lsls	r3, r3, #2
 8013168:	18d3      	adds	r3, r2, r3
 801316a:	183a      	adds	r2, r7, r0
 801316c:	8812      	ldrh	r2, [r2, #0]
 801316e:	49b8      	ldr	r1, [pc, #736]	; (8013450 <USB_ActivateEndpoint+0x6d0>)
 8013170:	430a      	orrs	r2, r1
 8013172:	b292      	uxth	r2, r2
 8013174:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	65fb      	str	r3, [r7, #92]	; 0x5c
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	2250      	movs	r2, #80	; 0x50
 801317e:	5a9b      	ldrh	r3, [r3, r2]
 8013180:	b29b      	uxth	r3, r3
 8013182:	001a      	movs	r2, r3
 8013184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013186:	189b      	adds	r3, r3, r2
 8013188:	65fb      	str	r3, [r7, #92]	; 0x5c
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	00da      	lsls	r2, r3, #3
 8013190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013192:	18d3      	adds	r3, r2, r3
 8013194:	2280      	movs	r2, #128	; 0x80
 8013196:	00d2      	lsls	r2, r2, #3
 8013198:	4694      	mov	ip, r2
 801319a:	4463      	add	r3, ip
 801319c:	65bb      	str	r3, [r7, #88]	; 0x58
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	891b      	ldrh	r3, [r3, #8]
 80131a2:	085b      	lsrs	r3, r3, #1
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	18db      	adds	r3, r3, r3
 80131a8:	b29a      	uxth	r2, r3
 80131aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131ac:	801a      	strh	r2, [r3, #0]
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	657b      	str	r3, [r7, #84]	; 0x54
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2250      	movs	r2, #80	; 0x50
 80131b6:	5a9b      	ldrh	r3, [r3, r2]
 80131b8:	b29b      	uxth	r3, r3
 80131ba:	001a      	movs	r2, r3
 80131bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131be:	189b      	adds	r3, r3, r2
 80131c0:	657b      	str	r3, [r7, #84]	; 0x54
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	00da      	lsls	r2, r3, #3
 80131c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131ca:	18d3      	adds	r3, r2, r3
 80131cc:	4aa1      	ldr	r2, [pc, #644]	; (8013454 <USB_ActivateEndpoint+0x6d4>)
 80131ce:	4694      	mov	ip, r2
 80131d0:	4463      	add	r3, ip
 80131d2:	653b      	str	r3, [r7, #80]	; 0x50
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	895b      	ldrh	r3, [r3, #10]
 80131d8:	085b      	lsrs	r3, r3, #1
 80131da:	b29b      	uxth	r3, r3
 80131dc:	18db      	adds	r3, r3, r3
 80131de:	b29a      	uxth	r2, r3
 80131e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	785b      	ldrb	r3, [r3, #1]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d000      	beq.n	80131ee <USB_ActivateEndpoint+0x46e>
 80131ec:	e087      	b.n	80132fe <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	009b      	lsls	r3, r3, #2
 80131f6:	18d2      	adds	r2, r2, r3
 80131f8:	2140      	movs	r1, #64	; 0x40
 80131fa:	187b      	adds	r3, r7, r1
 80131fc:	8812      	ldrh	r2, [r2, #0]
 80131fe:	801a      	strh	r2, [r3, #0]
 8013200:	187b      	adds	r3, r7, r1
 8013202:	881a      	ldrh	r2, [r3, #0]
 8013204:	2380      	movs	r3, #128	; 0x80
 8013206:	01db      	lsls	r3, r3, #7
 8013208:	4013      	ands	r3, r2
 801320a:	d016      	beq.n	801323a <USB_ActivateEndpoint+0x4ba>
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	009b      	lsls	r3, r3, #2
 8013214:	18d3      	adds	r3, r2, r3
 8013216:	881b      	ldrh	r3, [r3, #0]
 8013218:	b29a      	uxth	r2, r3
 801321a:	203e      	movs	r0, #62	; 0x3e
 801321c:	183b      	adds	r3, r7, r0
 801321e:	4989      	ldr	r1, [pc, #548]	; (8013444 <USB_ActivateEndpoint+0x6c4>)
 8013220:	400a      	ands	r2, r1
 8013222:	801a      	strh	r2, [r3, #0]
 8013224:	687a      	ldr	r2, [r7, #4]
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	009b      	lsls	r3, r3, #2
 801322c:	18d3      	adds	r3, r2, r3
 801322e:	183a      	adds	r2, r7, r0
 8013230:	8812      	ldrh	r2, [r2, #0]
 8013232:	4989      	ldr	r1, [pc, #548]	; (8013458 <USB_ActivateEndpoint+0x6d8>)
 8013234:	430a      	orrs	r2, r1
 8013236:	b292      	uxth	r2, r2
 8013238:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801323a:	687a      	ldr	r2, [r7, #4]
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	009b      	lsls	r3, r3, #2
 8013242:	18d2      	adds	r2, r2, r3
 8013244:	213c      	movs	r1, #60	; 0x3c
 8013246:	187b      	adds	r3, r7, r1
 8013248:	8812      	ldrh	r2, [r2, #0]
 801324a:	801a      	strh	r2, [r3, #0]
 801324c:	187b      	adds	r3, r7, r1
 801324e:	881b      	ldrh	r3, [r3, #0]
 8013250:	2240      	movs	r2, #64	; 0x40
 8013252:	4013      	ands	r3, r2
 8013254:	d016      	beq.n	8013284 <USB_ActivateEndpoint+0x504>
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	18d3      	adds	r3, r2, r3
 8013260:	881b      	ldrh	r3, [r3, #0]
 8013262:	b29a      	uxth	r2, r3
 8013264:	203a      	movs	r0, #58	; 0x3a
 8013266:	183b      	adds	r3, r7, r0
 8013268:	4976      	ldr	r1, [pc, #472]	; (8013444 <USB_ActivateEndpoint+0x6c4>)
 801326a:	400a      	ands	r2, r1
 801326c:	801a      	strh	r2, [r3, #0]
 801326e:	687a      	ldr	r2, [r7, #4]
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	009b      	lsls	r3, r3, #2
 8013276:	18d3      	adds	r3, r2, r3
 8013278:	183a      	adds	r2, r7, r0
 801327a:	8812      	ldrh	r2, [r2, #0]
 801327c:	4977      	ldr	r1, [pc, #476]	; (801345c <USB_ActivateEndpoint+0x6dc>)
 801327e:	430a      	orrs	r2, r1
 8013280:	b292      	uxth	r2, r2
 8013282:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013284:	687a      	ldr	r2, [r7, #4]
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	781b      	ldrb	r3, [r3, #0]
 801328a:	009b      	lsls	r3, r3, #2
 801328c:	18d3      	adds	r3, r2, r3
 801328e:	881b      	ldrh	r3, [r3, #0]
 8013290:	b29a      	uxth	r2, r3
 8013292:	2038      	movs	r0, #56	; 0x38
 8013294:	183b      	adds	r3, r7, r0
 8013296:	4972      	ldr	r1, [pc, #456]	; (8013460 <USB_ActivateEndpoint+0x6e0>)
 8013298:	400a      	ands	r2, r1
 801329a:	801a      	strh	r2, [r3, #0]
 801329c:	183b      	adds	r3, r7, r0
 801329e:	183a      	adds	r2, r7, r0
 80132a0:	8812      	ldrh	r2, [r2, #0]
 80132a2:	2180      	movs	r1, #128	; 0x80
 80132a4:	0149      	lsls	r1, r1, #5
 80132a6:	404a      	eors	r2, r1
 80132a8:	801a      	strh	r2, [r3, #0]
 80132aa:	183b      	adds	r3, r7, r0
 80132ac:	183a      	adds	r2, r7, r0
 80132ae:	8812      	ldrh	r2, [r2, #0]
 80132b0:	2180      	movs	r1, #128	; 0x80
 80132b2:	0189      	lsls	r1, r1, #6
 80132b4:	404a      	eors	r2, r1
 80132b6:	801a      	strh	r2, [r3, #0]
 80132b8:	687a      	ldr	r2, [r7, #4]
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	009b      	lsls	r3, r3, #2
 80132c0:	18d3      	adds	r3, r2, r3
 80132c2:	183a      	adds	r2, r7, r0
 80132c4:	8812      	ldrh	r2, [r2, #0]
 80132c6:	4962      	ldr	r1, [pc, #392]	; (8013450 <USB_ActivateEndpoint+0x6d0>)
 80132c8:	430a      	orrs	r2, r1
 80132ca:	b292      	uxth	r2, r2
 80132cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80132ce:	687a      	ldr	r2, [r7, #4]
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	009b      	lsls	r3, r3, #2
 80132d6:	18d3      	adds	r3, r2, r3
 80132d8:	881b      	ldrh	r3, [r3, #0]
 80132da:	b29a      	uxth	r2, r3
 80132dc:	2036      	movs	r0, #54	; 0x36
 80132de:	183b      	adds	r3, r7, r0
 80132e0:	4960      	ldr	r1, [pc, #384]	; (8013464 <USB_ActivateEndpoint+0x6e4>)
 80132e2:	400a      	ands	r2, r1
 80132e4:	801a      	strh	r2, [r3, #0]
 80132e6:	687a      	ldr	r2, [r7, #4]
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	781b      	ldrb	r3, [r3, #0]
 80132ec:	009b      	lsls	r3, r3, #2
 80132ee:	18d3      	adds	r3, r2, r3
 80132f0:	183a      	adds	r2, r7, r0
 80132f2:	8812      	ldrh	r2, [r2, #0]
 80132f4:	4956      	ldr	r1, [pc, #344]	; (8013450 <USB_ActivateEndpoint+0x6d0>)
 80132f6:	430a      	orrs	r2, r1
 80132f8:	b292      	uxth	r2, r2
 80132fa:	801a      	strh	r2, [r3, #0]
 80132fc:	e09a      	b.n	8013434 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80132fe:	687a      	ldr	r2, [r7, #4]
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	781b      	ldrb	r3, [r3, #0]
 8013304:	009b      	lsls	r3, r3, #2
 8013306:	18d2      	adds	r2, r2, r3
 8013308:	214e      	movs	r1, #78	; 0x4e
 801330a:	187b      	adds	r3, r7, r1
 801330c:	8812      	ldrh	r2, [r2, #0]
 801330e:	801a      	strh	r2, [r3, #0]
 8013310:	187b      	adds	r3, r7, r1
 8013312:	881a      	ldrh	r2, [r3, #0]
 8013314:	2380      	movs	r3, #128	; 0x80
 8013316:	01db      	lsls	r3, r3, #7
 8013318:	4013      	ands	r3, r2
 801331a:	d016      	beq.n	801334a <USB_ActivateEndpoint+0x5ca>
 801331c:	687a      	ldr	r2, [r7, #4]
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	009b      	lsls	r3, r3, #2
 8013324:	18d3      	adds	r3, r2, r3
 8013326:	881b      	ldrh	r3, [r3, #0]
 8013328:	b29a      	uxth	r2, r3
 801332a:	204c      	movs	r0, #76	; 0x4c
 801332c:	183b      	adds	r3, r7, r0
 801332e:	4945      	ldr	r1, [pc, #276]	; (8013444 <USB_ActivateEndpoint+0x6c4>)
 8013330:	400a      	ands	r2, r1
 8013332:	801a      	strh	r2, [r3, #0]
 8013334:	687a      	ldr	r2, [r7, #4]
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	009b      	lsls	r3, r3, #2
 801333c:	18d3      	adds	r3, r2, r3
 801333e:	183a      	adds	r2, r7, r0
 8013340:	8812      	ldrh	r2, [r2, #0]
 8013342:	4945      	ldr	r1, [pc, #276]	; (8013458 <USB_ActivateEndpoint+0x6d8>)
 8013344:	430a      	orrs	r2, r1
 8013346:	b292      	uxth	r2, r2
 8013348:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801334a:	687a      	ldr	r2, [r7, #4]
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	009b      	lsls	r3, r3, #2
 8013352:	18d2      	adds	r2, r2, r3
 8013354:	214a      	movs	r1, #74	; 0x4a
 8013356:	187b      	adds	r3, r7, r1
 8013358:	8812      	ldrh	r2, [r2, #0]
 801335a:	801a      	strh	r2, [r3, #0]
 801335c:	187b      	adds	r3, r7, r1
 801335e:	881b      	ldrh	r3, [r3, #0]
 8013360:	2240      	movs	r2, #64	; 0x40
 8013362:	4013      	ands	r3, r2
 8013364:	d016      	beq.n	8013394 <USB_ActivateEndpoint+0x614>
 8013366:	687a      	ldr	r2, [r7, #4]
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	18d3      	adds	r3, r2, r3
 8013370:	881b      	ldrh	r3, [r3, #0]
 8013372:	b29a      	uxth	r2, r3
 8013374:	2048      	movs	r0, #72	; 0x48
 8013376:	183b      	adds	r3, r7, r0
 8013378:	4932      	ldr	r1, [pc, #200]	; (8013444 <USB_ActivateEndpoint+0x6c4>)
 801337a:	400a      	ands	r2, r1
 801337c:	801a      	strh	r2, [r3, #0]
 801337e:	687a      	ldr	r2, [r7, #4]
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	781b      	ldrb	r3, [r3, #0]
 8013384:	009b      	lsls	r3, r3, #2
 8013386:	18d3      	adds	r3, r2, r3
 8013388:	183a      	adds	r2, r7, r0
 801338a:	8812      	ldrh	r2, [r2, #0]
 801338c:	4933      	ldr	r1, [pc, #204]	; (801345c <USB_ActivateEndpoint+0x6dc>)
 801338e:	430a      	orrs	r2, r1
 8013390:	b292      	uxth	r2, r2
 8013392:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	78db      	ldrb	r3, [r3, #3]
 8013398:	2b01      	cmp	r3, #1
 801339a:	d01d      	beq.n	80133d8 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801339c:	687a      	ldr	r2, [r7, #4]
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	781b      	ldrb	r3, [r3, #0]
 80133a2:	009b      	lsls	r3, r3, #2
 80133a4:	18d3      	adds	r3, r2, r3
 80133a6:	881b      	ldrh	r3, [r3, #0]
 80133a8:	b29a      	uxth	r2, r3
 80133aa:	2044      	movs	r0, #68	; 0x44
 80133ac:	183b      	adds	r3, r7, r0
 80133ae:	492d      	ldr	r1, [pc, #180]	; (8013464 <USB_ActivateEndpoint+0x6e4>)
 80133b0:	400a      	ands	r2, r1
 80133b2:	801a      	strh	r2, [r3, #0]
 80133b4:	183b      	adds	r3, r7, r0
 80133b6:	183a      	adds	r2, r7, r0
 80133b8:	8812      	ldrh	r2, [r2, #0]
 80133ba:	2120      	movs	r1, #32
 80133bc:	404a      	eors	r2, r1
 80133be:	801a      	strh	r2, [r3, #0]
 80133c0:	687a      	ldr	r2, [r7, #4]
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	009b      	lsls	r3, r3, #2
 80133c8:	18d3      	adds	r3, r2, r3
 80133ca:	183a      	adds	r2, r7, r0
 80133cc:	8812      	ldrh	r2, [r2, #0]
 80133ce:	4920      	ldr	r1, [pc, #128]	; (8013450 <USB_ActivateEndpoint+0x6d0>)
 80133d0:	430a      	orrs	r2, r1
 80133d2:	b292      	uxth	r2, r2
 80133d4:	801a      	strh	r2, [r3, #0]
 80133d6:	e016      	b.n	8013406 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80133d8:	687a      	ldr	r2, [r7, #4]
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	009b      	lsls	r3, r3, #2
 80133e0:	18d3      	adds	r3, r2, r3
 80133e2:	881b      	ldrh	r3, [r3, #0]
 80133e4:	b29a      	uxth	r2, r3
 80133e6:	2046      	movs	r0, #70	; 0x46
 80133e8:	183b      	adds	r3, r7, r0
 80133ea:	491e      	ldr	r1, [pc, #120]	; (8013464 <USB_ActivateEndpoint+0x6e4>)
 80133ec:	400a      	ands	r2, r1
 80133ee:	801a      	strh	r2, [r3, #0]
 80133f0:	687a      	ldr	r2, [r7, #4]
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	009b      	lsls	r3, r3, #2
 80133f8:	18d3      	adds	r3, r2, r3
 80133fa:	183a      	adds	r2, r7, r0
 80133fc:	8812      	ldrh	r2, [r2, #0]
 80133fe:	4914      	ldr	r1, [pc, #80]	; (8013450 <USB_ActivateEndpoint+0x6d0>)
 8013400:	430a      	orrs	r2, r1
 8013402:	b292      	uxth	r2, r2
 8013404:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013406:	687a      	ldr	r2, [r7, #4]
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	009b      	lsls	r3, r3, #2
 801340e:	18d3      	adds	r3, r2, r3
 8013410:	881b      	ldrh	r3, [r3, #0]
 8013412:	b29a      	uxth	r2, r3
 8013414:	2042      	movs	r0, #66	; 0x42
 8013416:	183b      	adds	r3, r7, r0
 8013418:	4911      	ldr	r1, [pc, #68]	; (8013460 <USB_ActivateEndpoint+0x6e0>)
 801341a:	400a      	ands	r2, r1
 801341c:	801a      	strh	r2, [r3, #0]
 801341e:	687a      	ldr	r2, [r7, #4]
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	009b      	lsls	r3, r3, #2
 8013426:	18d3      	adds	r3, r2, r3
 8013428:	183a      	adds	r2, r7, r0
 801342a:	8812      	ldrh	r2, [r2, #0]
 801342c:	4908      	ldr	r1, [pc, #32]	; (8013450 <USB_ActivateEndpoint+0x6d0>)
 801342e:	430a      	orrs	r2, r1
 8013430:	b292      	uxth	r2, r2
 8013432:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8013434:	236f      	movs	r3, #111	; 0x6f
 8013436:	18fb      	adds	r3, r7, r3
 8013438:	781b      	ldrb	r3, [r3, #0]
}
 801343a:	0018      	movs	r0, r3
 801343c:	46bd      	mov	sp, r7
 801343e:	b01c      	add	sp, #112	; 0x70
 8013440:	bd80      	pop	{r7, pc}
 8013442:	46c0      	nop			; (mov r8, r8)
 8013444:	ffff8f8f 	.word	0xffff8f8f
 8013448:	ffff8180 	.word	0xffff8180
 801344c:	ffff8e8f 	.word	0xffff8e8f
 8013450:	ffff8080 	.word	0xffff8080
 8013454:	00000404 	.word	0x00000404
 8013458:	ffffc080 	.word	0xffffc080
 801345c:	ffff80c0 	.word	0xffff80c0
 8013460:	ffffbf8f 	.word	0xffffbf8f
 8013464:	ffff8fbf 	.word	0xffff8fbf

08013468 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b08c      	sub	sp, #48	; 0x30
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	7b1b      	ldrb	r3, [r3, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d000      	beq.n	801347c <USB_DeactivateEndpoint+0x14>
 801347a:	e07e      	b.n	801357a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	785b      	ldrb	r3, [r3, #1]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d03c      	beq.n	80134fe <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	009b      	lsls	r3, r3, #2
 801348c:	18d2      	adds	r2, r2, r3
 801348e:	210c      	movs	r1, #12
 8013490:	187b      	adds	r3, r7, r1
 8013492:	8812      	ldrh	r2, [r2, #0]
 8013494:	801a      	strh	r2, [r3, #0]
 8013496:	187b      	adds	r3, r7, r1
 8013498:	881b      	ldrh	r3, [r3, #0]
 801349a:	2240      	movs	r2, #64	; 0x40
 801349c:	4013      	ands	r3, r2
 801349e:	d016      	beq.n	80134ce <USB_DeactivateEndpoint+0x66>
 80134a0:	687a      	ldr	r2, [r7, #4]
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	009b      	lsls	r3, r3, #2
 80134a8:	18d3      	adds	r3, r2, r3
 80134aa:	881b      	ldrh	r3, [r3, #0]
 80134ac:	b29a      	uxth	r2, r3
 80134ae:	200a      	movs	r0, #10
 80134b0:	183b      	adds	r3, r7, r0
 80134b2:	49c7      	ldr	r1, [pc, #796]	; (80137d0 <USB_DeactivateEndpoint+0x368>)
 80134b4:	400a      	ands	r2, r1
 80134b6:	801a      	strh	r2, [r3, #0]
 80134b8:	687a      	ldr	r2, [r7, #4]
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	781b      	ldrb	r3, [r3, #0]
 80134be:	009b      	lsls	r3, r3, #2
 80134c0:	18d3      	adds	r3, r2, r3
 80134c2:	183a      	adds	r2, r7, r0
 80134c4:	8812      	ldrh	r2, [r2, #0]
 80134c6:	49c3      	ldr	r1, [pc, #780]	; (80137d4 <USB_DeactivateEndpoint+0x36c>)
 80134c8:	430a      	orrs	r2, r1
 80134ca:	b292      	uxth	r2, r2
 80134cc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	009b      	lsls	r3, r3, #2
 80134d6:	18d3      	adds	r3, r2, r3
 80134d8:	881b      	ldrh	r3, [r3, #0]
 80134da:	b29a      	uxth	r2, r3
 80134dc:	2008      	movs	r0, #8
 80134de:	183b      	adds	r3, r7, r0
 80134e0:	49bd      	ldr	r1, [pc, #756]	; (80137d8 <USB_DeactivateEndpoint+0x370>)
 80134e2:	400a      	ands	r2, r1
 80134e4:	801a      	strh	r2, [r3, #0]
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	18d3      	adds	r3, r2, r3
 80134f0:	183a      	adds	r2, r7, r0
 80134f2:	8812      	ldrh	r2, [r2, #0]
 80134f4:	49b9      	ldr	r1, [pc, #740]	; (80137dc <USB_DeactivateEndpoint+0x374>)
 80134f6:	430a      	orrs	r2, r1
 80134f8:	b292      	uxth	r2, r2
 80134fa:	801a      	strh	r2, [r3, #0]
 80134fc:	e163      	b.n	80137c6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	009b      	lsls	r3, r3, #2
 8013506:	18d2      	adds	r2, r2, r3
 8013508:	2112      	movs	r1, #18
 801350a:	187b      	adds	r3, r7, r1
 801350c:	8812      	ldrh	r2, [r2, #0]
 801350e:	801a      	strh	r2, [r3, #0]
 8013510:	187b      	adds	r3, r7, r1
 8013512:	881a      	ldrh	r2, [r3, #0]
 8013514:	2380      	movs	r3, #128	; 0x80
 8013516:	01db      	lsls	r3, r3, #7
 8013518:	4013      	ands	r3, r2
 801351a:	d016      	beq.n	801354a <USB_DeactivateEndpoint+0xe2>
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	009b      	lsls	r3, r3, #2
 8013524:	18d3      	adds	r3, r2, r3
 8013526:	881b      	ldrh	r3, [r3, #0]
 8013528:	b29a      	uxth	r2, r3
 801352a:	2010      	movs	r0, #16
 801352c:	183b      	adds	r3, r7, r0
 801352e:	49a8      	ldr	r1, [pc, #672]	; (80137d0 <USB_DeactivateEndpoint+0x368>)
 8013530:	400a      	ands	r2, r1
 8013532:	801a      	strh	r2, [r3, #0]
 8013534:	687a      	ldr	r2, [r7, #4]
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	009b      	lsls	r3, r3, #2
 801353c:	18d3      	adds	r3, r2, r3
 801353e:	183a      	adds	r2, r7, r0
 8013540:	8812      	ldrh	r2, [r2, #0]
 8013542:	49a7      	ldr	r1, [pc, #668]	; (80137e0 <USB_DeactivateEndpoint+0x378>)
 8013544:	430a      	orrs	r2, r1
 8013546:	b292      	uxth	r2, r2
 8013548:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801354a:	687a      	ldr	r2, [r7, #4]
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	18d3      	adds	r3, r2, r3
 8013554:	881b      	ldrh	r3, [r3, #0]
 8013556:	b29a      	uxth	r2, r3
 8013558:	200e      	movs	r0, #14
 801355a:	183b      	adds	r3, r7, r0
 801355c:	49a1      	ldr	r1, [pc, #644]	; (80137e4 <USB_DeactivateEndpoint+0x37c>)
 801355e:	400a      	ands	r2, r1
 8013560:	801a      	strh	r2, [r3, #0]
 8013562:	687a      	ldr	r2, [r7, #4]
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	18d3      	adds	r3, r2, r3
 801356c:	183a      	adds	r2, r7, r0
 801356e:	8812      	ldrh	r2, [r2, #0]
 8013570:	499a      	ldr	r1, [pc, #616]	; (80137dc <USB_DeactivateEndpoint+0x374>)
 8013572:	430a      	orrs	r2, r1
 8013574:	b292      	uxth	r2, r2
 8013576:	801a      	strh	r2, [r3, #0]
 8013578:	e125      	b.n	80137c6 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	785b      	ldrb	r3, [r3, #1]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d000      	beq.n	8013584 <USB_DeactivateEndpoint+0x11c>
 8013582:	e090      	b.n	80136a6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013584:	687a      	ldr	r2, [r7, #4]
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	781b      	ldrb	r3, [r3, #0]
 801358a:	009b      	lsls	r3, r3, #2
 801358c:	18d2      	adds	r2, r2, r3
 801358e:	2120      	movs	r1, #32
 8013590:	187b      	adds	r3, r7, r1
 8013592:	8812      	ldrh	r2, [r2, #0]
 8013594:	801a      	strh	r2, [r3, #0]
 8013596:	187b      	adds	r3, r7, r1
 8013598:	881a      	ldrh	r2, [r3, #0]
 801359a:	2380      	movs	r3, #128	; 0x80
 801359c:	01db      	lsls	r3, r3, #7
 801359e:	4013      	ands	r3, r2
 80135a0:	d016      	beq.n	80135d0 <USB_DeactivateEndpoint+0x168>
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	009b      	lsls	r3, r3, #2
 80135aa:	18d3      	adds	r3, r2, r3
 80135ac:	881b      	ldrh	r3, [r3, #0]
 80135ae:	b29a      	uxth	r2, r3
 80135b0:	201e      	movs	r0, #30
 80135b2:	183b      	adds	r3, r7, r0
 80135b4:	4986      	ldr	r1, [pc, #536]	; (80137d0 <USB_DeactivateEndpoint+0x368>)
 80135b6:	400a      	ands	r2, r1
 80135b8:	801a      	strh	r2, [r3, #0]
 80135ba:	687a      	ldr	r2, [r7, #4]
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	009b      	lsls	r3, r3, #2
 80135c2:	18d3      	adds	r3, r2, r3
 80135c4:	183a      	adds	r2, r7, r0
 80135c6:	8812      	ldrh	r2, [r2, #0]
 80135c8:	4985      	ldr	r1, [pc, #532]	; (80137e0 <USB_DeactivateEndpoint+0x378>)
 80135ca:	430a      	orrs	r2, r1
 80135cc:	b292      	uxth	r2, r2
 80135ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80135d0:	687a      	ldr	r2, [r7, #4]
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	009b      	lsls	r3, r3, #2
 80135d8:	18d2      	adds	r2, r2, r3
 80135da:	211c      	movs	r1, #28
 80135dc:	187b      	adds	r3, r7, r1
 80135de:	8812      	ldrh	r2, [r2, #0]
 80135e0:	801a      	strh	r2, [r3, #0]
 80135e2:	187b      	adds	r3, r7, r1
 80135e4:	881b      	ldrh	r3, [r3, #0]
 80135e6:	2240      	movs	r2, #64	; 0x40
 80135e8:	4013      	ands	r3, r2
 80135ea:	d016      	beq.n	801361a <USB_DeactivateEndpoint+0x1b2>
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	18d3      	adds	r3, r2, r3
 80135f6:	881b      	ldrh	r3, [r3, #0]
 80135f8:	b29a      	uxth	r2, r3
 80135fa:	201a      	movs	r0, #26
 80135fc:	183b      	adds	r3, r7, r0
 80135fe:	4974      	ldr	r1, [pc, #464]	; (80137d0 <USB_DeactivateEndpoint+0x368>)
 8013600:	400a      	ands	r2, r1
 8013602:	801a      	strh	r2, [r3, #0]
 8013604:	687a      	ldr	r2, [r7, #4]
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	781b      	ldrb	r3, [r3, #0]
 801360a:	009b      	lsls	r3, r3, #2
 801360c:	18d3      	adds	r3, r2, r3
 801360e:	183a      	adds	r2, r7, r0
 8013610:	8812      	ldrh	r2, [r2, #0]
 8013612:	4970      	ldr	r1, [pc, #448]	; (80137d4 <USB_DeactivateEndpoint+0x36c>)
 8013614:	430a      	orrs	r2, r1
 8013616:	b292      	uxth	r2, r2
 8013618:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801361a:	687a      	ldr	r2, [r7, #4]
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	009b      	lsls	r3, r3, #2
 8013622:	18d3      	adds	r3, r2, r3
 8013624:	881b      	ldrh	r3, [r3, #0]
 8013626:	b29a      	uxth	r2, r3
 8013628:	2018      	movs	r0, #24
 801362a:	183b      	adds	r3, r7, r0
 801362c:	4968      	ldr	r1, [pc, #416]	; (80137d0 <USB_DeactivateEndpoint+0x368>)
 801362e:	400a      	ands	r2, r1
 8013630:	801a      	strh	r2, [r3, #0]
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	18d3      	adds	r3, r2, r3
 801363c:	183a      	adds	r2, r7, r0
 801363e:	8812      	ldrh	r2, [r2, #0]
 8013640:	4964      	ldr	r1, [pc, #400]	; (80137d4 <USB_DeactivateEndpoint+0x36c>)
 8013642:	430a      	orrs	r2, r1
 8013644:	b292      	uxth	r2, r2
 8013646:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013648:	687a      	ldr	r2, [r7, #4]
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	009b      	lsls	r3, r3, #2
 8013650:	18d3      	adds	r3, r2, r3
 8013652:	881b      	ldrh	r3, [r3, #0]
 8013654:	b29a      	uxth	r2, r3
 8013656:	2016      	movs	r0, #22
 8013658:	183b      	adds	r3, r7, r0
 801365a:	4962      	ldr	r1, [pc, #392]	; (80137e4 <USB_DeactivateEndpoint+0x37c>)
 801365c:	400a      	ands	r2, r1
 801365e:	801a      	strh	r2, [r3, #0]
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	18d3      	adds	r3, r2, r3
 801366a:	183a      	adds	r2, r7, r0
 801366c:	8812      	ldrh	r2, [r2, #0]
 801366e:	495b      	ldr	r1, [pc, #364]	; (80137dc <USB_DeactivateEndpoint+0x374>)
 8013670:	430a      	orrs	r2, r1
 8013672:	b292      	uxth	r2, r2
 8013674:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	009b      	lsls	r3, r3, #2
 801367e:	18d3      	adds	r3, r2, r3
 8013680:	881b      	ldrh	r3, [r3, #0]
 8013682:	b29a      	uxth	r2, r3
 8013684:	2014      	movs	r0, #20
 8013686:	183b      	adds	r3, r7, r0
 8013688:	4953      	ldr	r1, [pc, #332]	; (80137d8 <USB_DeactivateEndpoint+0x370>)
 801368a:	400a      	ands	r2, r1
 801368c:	801a      	strh	r2, [r3, #0]
 801368e:	687a      	ldr	r2, [r7, #4]
 8013690:	683b      	ldr	r3, [r7, #0]
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	009b      	lsls	r3, r3, #2
 8013696:	18d3      	adds	r3, r2, r3
 8013698:	183a      	adds	r2, r7, r0
 801369a:	8812      	ldrh	r2, [r2, #0]
 801369c:	494f      	ldr	r1, [pc, #316]	; (80137dc <USB_DeactivateEndpoint+0x374>)
 801369e:	430a      	orrs	r2, r1
 80136a0:	b292      	uxth	r2, r2
 80136a2:	801a      	strh	r2, [r3, #0]
 80136a4:	e08f      	b.n	80137c6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80136a6:	687a      	ldr	r2, [r7, #4]
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	009b      	lsls	r3, r3, #2
 80136ae:	18d2      	adds	r2, r2, r3
 80136b0:	212e      	movs	r1, #46	; 0x2e
 80136b2:	187b      	adds	r3, r7, r1
 80136b4:	8812      	ldrh	r2, [r2, #0]
 80136b6:	801a      	strh	r2, [r3, #0]
 80136b8:	187b      	adds	r3, r7, r1
 80136ba:	881a      	ldrh	r2, [r3, #0]
 80136bc:	2380      	movs	r3, #128	; 0x80
 80136be:	01db      	lsls	r3, r3, #7
 80136c0:	4013      	ands	r3, r2
 80136c2:	d016      	beq.n	80136f2 <USB_DeactivateEndpoint+0x28a>
 80136c4:	687a      	ldr	r2, [r7, #4]
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	009b      	lsls	r3, r3, #2
 80136cc:	18d3      	adds	r3, r2, r3
 80136ce:	881b      	ldrh	r3, [r3, #0]
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	202c      	movs	r0, #44	; 0x2c
 80136d4:	183b      	adds	r3, r7, r0
 80136d6:	493e      	ldr	r1, [pc, #248]	; (80137d0 <USB_DeactivateEndpoint+0x368>)
 80136d8:	400a      	ands	r2, r1
 80136da:	801a      	strh	r2, [r3, #0]
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	009b      	lsls	r3, r3, #2
 80136e4:	18d3      	adds	r3, r2, r3
 80136e6:	183a      	adds	r2, r7, r0
 80136e8:	8812      	ldrh	r2, [r2, #0]
 80136ea:	493d      	ldr	r1, [pc, #244]	; (80137e0 <USB_DeactivateEndpoint+0x378>)
 80136ec:	430a      	orrs	r2, r1
 80136ee:	b292      	uxth	r2, r2
 80136f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80136f2:	687a      	ldr	r2, [r7, #4]
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	781b      	ldrb	r3, [r3, #0]
 80136f8:	009b      	lsls	r3, r3, #2
 80136fa:	18d2      	adds	r2, r2, r3
 80136fc:	212a      	movs	r1, #42	; 0x2a
 80136fe:	187b      	adds	r3, r7, r1
 8013700:	8812      	ldrh	r2, [r2, #0]
 8013702:	801a      	strh	r2, [r3, #0]
 8013704:	187b      	adds	r3, r7, r1
 8013706:	881b      	ldrh	r3, [r3, #0]
 8013708:	2240      	movs	r2, #64	; 0x40
 801370a:	4013      	ands	r3, r2
 801370c:	d016      	beq.n	801373c <USB_DeactivateEndpoint+0x2d4>
 801370e:	687a      	ldr	r2, [r7, #4]
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	009b      	lsls	r3, r3, #2
 8013716:	18d3      	adds	r3, r2, r3
 8013718:	881b      	ldrh	r3, [r3, #0]
 801371a:	b29a      	uxth	r2, r3
 801371c:	2028      	movs	r0, #40	; 0x28
 801371e:	183b      	adds	r3, r7, r0
 8013720:	492b      	ldr	r1, [pc, #172]	; (80137d0 <USB_DeactivateEndpoint+0x368>)
 8013722:	400a      	ands	r2, r1
 8013724:	801a      	strh	r2, [r3, #0]
 8013726:	687a      	ldr	r2, [r7, #4]
 8013728:	683b      	ldr	r3, [r7, #0]
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	009b      	lsls	r3, r3, #2
 801372e:	18d3      	adds	r3, r2, r3
 8013730:	183a      	adds	r2, r7, r0
 8013732:	8812      	ldrh	r2, [r2, #0]
 8013734:	4927      	ldr	r1, [pc, #156]	; (80137d4 <USB_DeactivateEndpoint+0x36c>)
 8013736:	430a      	orrs	r2, r1
 8013738:	b292      	uxth	r2, r2
 801373a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	18d3      	adds	r3, r2, r3
 8013746:	881b      	ldrh	r3, [r3, #0]
 8013748:	b29a      	uxth	r2, r3
 801374a:	2026      	movs	r0, #38	; 0x26
 801374c:	183b      	adds	r3, r7, r0
 801374e:	4920      	ldr	r1, [pc, #128]	; (80137d0 <USB_DeactivateEndpoint+0x368>)
 8013750:	400a      	ands	r2, r1
 8013752:	801a      	strh	r2, [r3, #0]
 8013754:	687a      	ldr	r2, [r7, #4]
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	009b      	lsls	r3, r3, #2
 801375c:	18d3      	adds	r3, r2, r3
 801375e:	183a      	adds	r2, r7, r0
 8013760:	8812      	ldrh	r2, [r2, #0]
 8013762:	491f      	ldr	r1, [pc, #124]	; (80137e0 <USB_DeactivateEndpoint+0x378>)
 8013764:	430a      	orrs	r2, r1
 8013766:	b292      	uxth	r2, r2
 8013768:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	18d3      	adds	r3, r2, r3
 8013774:	881b      	ldrh	r3, [r3, #0]
 8013776:	b29a      	uxth	r2, r3
 8013778:	2024      	movs	r0, #36	; 0x24
 801377a:	183b      	adds	r3, r7, r0
 801377c:	4916      	ldr	r1, [pc, #88]	; (80137d8 <USB_DeactivateEndpoint+0x370>)
 801377e:	400a      	ands	r2, r1
 8013780:	801a      	strh	r2, [r3, #0]
 8013782:	687a      	ldr	r2, [r7, #4]
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	781b      	ldrb	r3, [r3, #0]
 8013788:	009b      	lsls	r3, r3, #2
 801378a:	18d3      	adds	r3, r2, r3
 801378c:	183a      	adds	r2, r7, r0
 801378e:	8812      	ldrh	r2, [r2, #0]
 8013790:	4912      	ldr	r1, [pc, #72]	; (80137dc <USB_DeactivateEndpoint+0x374>)
 8013792:	430a      	orrs	r2, r1
 8013794:	b292      	uxth	r2, r2
 8013796:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013798:	687a      	ldr	r2, [r7, #4]
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	781b      	ldrb	r3, [r3, #0]
 801379e:	009b      	lsls	r3, r3, #2
 80137a0:	18d3      	adds	r3, r2, r3
 80137a2:	881b      	ldrh	r3, [r3, #0]
 80137a4:	b29a      	uxth	r2, r3
 80137a6:	2022      	movs	r0, #34	; 0x22
 80137a8:	183b      	adds	r3, r7, r0
 80137aa:	490e      	ldr	r1, [pc, #56]	; (80137e4 <USB_DeactivateEndpoint+0x37c>)
 80137ac:	400a      	ands	r2, r1
 80137ae:	801a      	strh	r2, [r3, #0]
 80137b0:	687a      	ldr	r2, [r7, #4]
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	781b      	ldrb	r3, [r3, #0]
 80137b6:	009b      	lsls	r3, r3, #2
 80137b8:	18d3      	adds	r3, r2, r3
 80137ba:	183a      	adds	r2, r7, r0
 80137bc:	8812      	ldrh	r2, [r2, #0]
 80137be:	4907      	ldr	r1, [pc, #28]	; (80137dc <USB_DeactivateEndpoint+0x374>)
 80137c0:	430a      	orrs	r2, r1
 80137c2:	b292      	uxth	r2, r2
 80137c4:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80137c6:	2300      	movs	r3, #0
}
 80137c8:	0018      	movs	r0, r3
 80137ca:	46bd      	mov	sp, r7
 80137cc:	b00c      	add	sp, #48	; 0x30
 80137ce:	bd80      	pop	{r7, pc}
 80137d0:	ffff8f8f 	.word	0xffff8f8f
 80137d4:	ffff80c0 	.word	0xffff80c0
 80137d8:	ffff8fbf 	.word	0xffff8fbf
 80137dc:	ffff8080 	.word	0xffff8080
 80137e0:	ffffc080 	.word	0xffffc080
 80137e4:	ffffbf8f 	.word	0xffffbf8f

080137e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80137e8:	b590      	push	{r4, r7, lr}
 80137ea:	b0c3      	sub	sp, #268	; 0x10c
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	785b      	ldrb	r3, [r3, #1]
 80137f6:	2b01      	cmp	r3, #1
 80137f8:	d001      	beq.n	80137fe <USB_EPStartXfer+0x16>
 80137fa:	f000 fcef 	bl	80141dc <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	699a      	ldr	r2, [r3, #24]
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	691b      	ldr	r3, [r3, #16]
 8013806:	429a      	cmp	r2, r3
 8013808:	d905      	bls.n	8013816 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801380a:	683b      	ldr	r3, [r7, #0]
 801380c:	691b      	ldr	r3, [r3, #16]
 801380e:	1d7a      	adds	r2, r7, #5
 8013810:	32ff      	adds	r2, #255	; 0xff
 8013812:	6013      	str	r3, [r2, #0]
 8013814:	e004      	b.n	8013820 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	699b      	ldr	r3, [r3, #24]
 801381a:	1d7a      	adds	r2, r7, #5
 801381c:	32ff      	adds	r2, #255	; 0xff
 801381e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	7b1b      	ldrb	r3, [r3, #12]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d125      	bne.n	8013874 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	6959      	ldr	r1, [r3, #20]
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	88da      	ldrh	r2, [r3, #6]
 8013830:	1d7b      	adds	r3, r7, #5
 8013832:	33ff      	adds	r3, #255	; 0xff
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	b29b      	uxth	r3, r3
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f001 f9c9 	bl	8014bd0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	613b      	str	r3, [r7, #16]
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	2250      	movs	r2, #80	; 0x50
 8013846:	5a9b      	ldrh	r3, [r3, r2]
 8013848:	b29b      	uxth	r3, r3
 801384a:	001a      	movs	r2, r3
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	189b      	adds	r3, r3, r2
 8013850:	613b      	str	r3, [r7, #16]
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	00da      	lsls	r2, r3, #3
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	18d3      	adds	r3, r2, r3
 801385c:	4acc      	ldr	r2, [pc, #816]	; (8013b90 <USB_EPStartXfer+0x3a8>)
 801385e:	4694      	mov	ip, r2
 8013860:	4463      	add	r3, ip
 8013862:	60fb      	str	r3, [r7, #12]
 8013864:	1d7b      	adds	r3, r7, #5
 8013866:	33ff      	adds	r3, #255	; 0xff
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	b29a      	uxth	r2, r3
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	801a      	strh	r2, [r3, #0]
 8013870:	f000 fc8f 	bl	8014192 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	78db      	ldrb	r3, [r3, #3]
 8013878:	2b02      	cmp	r3, #2
 801387a:	d000      	beq.n	801387e <USB_EPStartXfer+0x96>
 801387c:	e33a      	b.n	8013ef4 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	6a1a      	ldr	r2, [r3, #32]
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	691b      	ldr	r3, [r3, #16]
 8013886:	429a      	cmp	r2, r3
 8013888:	d800      	bhi.n	801388c <USB_EPStartXfer+0xa4>
 801388a:	e2df      	b.n	8013e4c <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801388c:	687a      	ldr	r2, [r7, #4]
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	009b      	lsls	r3, r3, #2
 8013894:	18d3      	adds	r3, r2, r3
 8013896:	881b      	ldrh	r3, [r3, #0]
 8013898:	b29a      	uxth	r2, r3
 801389a:	2056      	movs	r0, #86	; 0x56
 801389c:	183b      	adds	r3, r7, r0
 801389e:	49bd      	ldr	r1, [pc, #756]	; (8013b94 <USB_EPStartXfer+0x3ac>)
 80138a0:	400a      	ands	r2, r1
 80138a2:	801a      	strh	r2, [r3, #0]
 80138a4:	687a      	ldr	r2, [r7, #4]
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	781b      	ldrb	r3, [r3, #0]
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	18d3      	adds	r3, r2, r3
 80138ae:	183a      	adds	r2, r7, r0
 80138b0:	8812      	ldrh	r2, [r2, #0]
 80138b2:	49b9      	ldr	r1, [pc, #740]	; (8013b98 <USB_EPStartXfer+0x3b0>)
 80138b4:	430a      	orrs	r2, r1
 80138b6:	b292      	uxth	r2, r2
 80138b8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	6a1a      	ldr	r2, [r3, #32]
 80138be:	1d7b      	adds	r3, r7, #5
 80138c0:	33ff      	adds	r3, #255	; 0xff
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	1ad2      	subs	r2, r2, r3
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80138ca:	687a      	ldr	r2, [r7, #4]
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	781b      	ldrb	r3, [r3, #0]
 80138d0:	009b      	lsls	r3, r3, #2
 80138d2:	18d3      	adds	r3, r2, r3
 80138d4:	881b      	ldrh	r3, [r3, #0]
 80138d6:	b29b      	uxth	r3, r3
 80138d8:	001a      	movs	r2, r3
 80138da:	2340      	movs	r3, #64	; 0x40
 80138dc:	4013      	ands	r3, r2
 80138de:	d100      	bne.n	80138e2 <USB_EPStartXfer+0xfa>
 80138e0:	e162      	b.n	8013ba8 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	633b      	str	r3, [r7, #48]	; 0x30
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	785b      	ldrb	r3, [r3, #1]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d16a      	bne.n	80139c4 <USB_EPStartXfer+0x1dc>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	2250      	movs	r2, #80	; 0x50
 80138f6:	5a9b      	ldrh	r3, [r3, r2]
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	001a      	movs	r2, r3
 80138fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138fe:	189b      	adds	r3, r3, r2
 8013900:	62bb      	str	r3, [r7, #40]	; 0x28
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	00da      	lsls	r2, r3, #3
 8013908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801390a:	18d3      	adds	r3, r2, r3
 801390c:	4aa3      	ldr	r2, [pc, #652]	; (8013b9c <USB_EPStartXfer+0x3b4>)
 801390e:	4694      	mov	ip, r2
 8013910:	4463      	add	r3, ip
 8013912:	627b      	str	r3, [r7, #36]	; 0x24
 8013914:	1d7b      	adds	r3, r7, #5
 8013916:	33ff      	adds	r3, #255	; 0xff
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d110      	bne.n	8013940 <USB_EPStartXfer+0x158>
 801391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013920:	881b      	ldrh	r3, [r3, #0]
 8013922:	b29b      	uxth	r3, r3
 8013924:	4a9e      	ldr	r2, [pc, #632]	; (8013ba0 <USB_EPStartXfer+0x3b8>)
 8013926:	4013      	ands	r3, r2
 8013928:	b29a      	uxth	r2, r3
 801392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801392c:	801a      	strh	r2, [r3, #0]
 801392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013930:	881b      	ldrh	r3, [r3, #0]
 8013932:	b29b      	uxth	r3, r3
 8013934:	4a9b      	ldr	r2, [pc, #620]	; (8013ba4 <USB_EPStartXfer+0x3bc>)
 8013936:	4313      	orrs	r3, r2
 8013938:	b29a      	uxth	r2, r3
 801393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393c:	801a      	strh	r2, [r3, #0]
 801393e:	e05c      	b.n	80139fa <USB_EPStartXfer+0x212>
 8013940:	1d7b      	adds	r3, r7, #5
 8013942:	33ff      	adds	r3, #255	; 0xff
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	2b3e      	cmp	r3, #62	; 0x3e
 8013948:	d81c      	bhi.n	8013984 <USB_EPStartXfer+0x19c>
 801394a:	1d7b      	adds	r3, r7, #5
 801394c:	33ff      	adds	r3, #255	; 0xff
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	085b      	lsrs	r3, r3, #1
 8013952:	1c7a      	adds	r2, r7, #1
 8013954:	32ff      	adds	r2, #255	; 0xff
 8013956:	6013      	str	r3, [r2, #0]
 8013958:	1d7b      	adds	r3, r7, #5
 801395a:	33ff      	adds	r3, #255	; 0xff
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	2201      	movs	r2, #1
 8013960:	4013      	ands	r3, r2
 8013962:	d006      	beq.n	8013972 <USB_EPStartXfer+0x18a>
 8013964:	1c7b      	adds	r3, r7, #1
 8013966:	33ff      	adds	r3, #255	; 0xff
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	3301      	adds	r3, #1
 801396c:	1c7a      	adds	r2, r7, #1
 801396e:	32ff      	adds	r2, #255	; 0xff
 8013970:	6013      	str	r3, [r2, #0]
 8013972:	1c7b      	adds	r3, r7, #1
 8013974:	33ff      	adds	r3, #255	; 0xff
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	b29b      	uxth	r3, r3
 801397a:	029b      	lsls	r3, r3, #10
 801397c:	b29a      	uxth	r2, r3
 801397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013980:	801a      	strh	r2, [r3, #0]
 8013982:	e03a      	b.n	80139fa <USB_EPStartXfer+0x212>
 8013984:	1d7b      	adds	r3, r7, #5
 8013986:	33ff      	adds	r3, #255	; 0xff
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	095b      	lsrs	r3, r3, #5
 801398c:	1c7a      	adds	r2, r7, #1
 801398e:	32ff      	adds	r2, #255	; 0xff
 8013990:	6013      	str	r3, [r2, #0]
 8013992:	1d7b      	adds	r3, r7, #5
 8013994:	33ff      	adds	r3, #255	; 0xff
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	221f      	movs	r2, #31
 801399a:	4013      	ands	r3, r2
 801399c:	d106      	bne.n	80139ac <USB_EPStartXfer+0x1c4>
 801399e:	1c7b      	adds	r3, r7, #1
 80139a0:	33ff      	adds	r3, #255	; 0xff
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	3b01      	subs	r3, #1
 80139a6:	1c7a      	adds	r2, r7, #1
 80139a8:	32ff      	adds	r2, #255	; 0xff
 80139aa:	6013      	str	r3, [r2, #0]
 80139ac:	1c7b      	adds	r3, r7, #1
 80139ae:	33ff      	adds	r3, #255	; 0xff
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	b29b      	uxth	r3, r3
 80139b4:	029b      	lsls	r3, r3, #10
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	4a7a      	ldr	r2, [pc, #488]	; (8013ba4 <USB_EPStartXfer+0x3bc>)
 80139ba:	4313      	orrs	r3, r2
 80139bc:	b29a      	uxth	r2, r3
 80139be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c0:	801a      	strh	r2, [r3, #0]
 80139c2:	e01a      	b.n	80139fa <USB_EPStartXfer+0x212>
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	785b      	ldrb	r3, [r3, #1]
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	d116      	bne.n	80139fa <USB_EPStartXfer+0x212>
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2250      	movs	r2, #80	; 0x50
 80139d0:	5a9b      	ldrh	r3, [r3, r2]
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	001a      	movs	r2, r3
 80139d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d8:	189b      	adds	r3, r3, r2
 80139da:	633b      	str	r3, [r7, #48]	; 0x30
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	781b      	ldrb	r3, [r3, #0]
 80139e0:	00da      	lsls	r2, r3, #3
 80139e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e4:	18d3      	adds	r3, r2, r3
 80139e6:	4a6d      	ldr	r2, [pc, #436]	; (8013b9c <USB_EPStartXfer+0x3b4>)
 80139e8:	4694      	mov	ip, r2
 80139ea:	4463      	add	r3, ip
 80139ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139ee:	1d7b      	adds	r3, r7, #5
 80139f0:	33ff      	adds	r3, #255	; 0xff
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	b29a      	uxth	r2, r3
 80139f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80139fa:	2076      	movs	r0, #118	; 0x76
 80139fc:	183b      	adds	r3, r7, r0
 80139fe:	683a      	ldr	r2, [r7, #0]
 8013a00:	8952      	ldrh	r2, [r2, #10]
 8013a02:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	6959      	ldr	r1, [r3, #20]
 8013a08:	1d7b      	adds	r3, r7, #5
 8013a0a:	33ff      	adds	r3, #255	; 0xff
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	b29c      	uxth	r4, r3
 8013a10:	183b      	adds	r3, r7, r0
 8013a12:	881a      	ldrh	r2, [r3, #0]
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	0023      	movs	r3, r4
 8013a18:	f001 f8da 	bl	8014bd0 <USB_WritePMA>
            ep->xfer_buff += len;
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	695a      	ldr	r2, [r3, #20]
 8013a20:	1d7b      	adds	r3, r7, #5
 8013a22:	33ff      	adds	r3, #255	; 0xff
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	18d2      	adds	r2, r2, r3
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	6a1a      	ldr	r2, [r3, #32]
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	691b      	ldr	r3, [r3, #16]
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d908      	bls.n	8013a4a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	6a1a      	ldr	r2, [r3, #32]
 8013a3c:	1d7b      	adds	r3, r7, #5
 8013a3e:	33ff      	adds	r3, #255	; 0xff
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	1ad2      	subs	r2, r2, r3
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	621a      	str	r2, [r3, #32]
 8013a48:	e007      	b.n	8013a5a <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	6a1b      	ldr	r3, [r3, #32]
 8013a4e:	1d7a      	adds	r2, r7, #5
 8013a50:	32ff      	adds	r2, #255	; 0xff
 8013a52:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013a54:	683b      	ldr	r3, [r7, #0]
 8013a56:	2200      	movs	r2, #0
 8013a58:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	785b      	ldrb	r3, [r3, #1]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d166      	bne.n	8013b30 <USB_EPStartXfer+0x348>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	61bb      	str	r3, [r7, #24]
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2250      	movs	r2, #80	; 0x50
 8013a6a:	5a9b      	ldrh	r3, [r3, r2]
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	001a      	movs	r2, r3
 8013a70:	69bb      	ldr	r3, [r7, #24]
 8013a72:	189b      	adds	r3, r3, r2
 8013a74:	61bb      	str	r3, [r7, #24]
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	781b      	ldrb	r3, [r3, #0]
 8013a7a:	00da      	lsls	r2, r3, #3
 8013a7c:	69bb      	ldr	r3, [r7, #24]
 8013a7e:	18d3      	adds	r3, r2, r3
 8013a80:	4a43      	ldr	r2, [pc, #268]	; (8013b90 <USB_EPStartXfer+0x3a8>)
 8013a82:	4694      	mov	ip, r2
 8013a84:	4463      	add	r3, ip
 8013a86:	617b      	str	r3, [r7, #20]
 8013a88:	1d7b      	adds	r3, r7, #5
 8013a8a:	33ff      	adds	r3, #255	; 0xff
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d110      	bne.n	8013ab4 <USB_EPStartXfer+0x2cc>
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	881b      	ldrh	r3, [r3, #0]
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	4a41      	ldr	r2, [pc, #260]	; (8013ba0 <USB_EPStartXfer+0x3b8>)
 8013a9a:	4013      	ands	r3, r2
 8013a9c:	b29a      	uxth	r2, r3
 8013a9e:	697b      	ldr	r3, [r7, #20]
 8013aa0:	801a      	strh	r2, [r3, #0]
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	881b      	ldrh	r3, [r3, #0]
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	4a3e      	ldr	r2, [pc, #248]	; (8013ba4 <USB_EPStartXfer+0x3bc>)
 8013aaa:	4313      	orrs	r3, r2
 8013aac:	b29a      	uxth	r2, r3
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	801a      	strh	r2, [r3, #0]
 8013ab2:	e05a      	b.n	8013b6a <USB_EPStartXfer+0x382>
 8013ab4:	1d7b      	adds	r3, r7, #5
 8013ab6:	33ff      	adds	r3, #255	; 0xff
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2b3e      	cmp	r3, #62	; 0x3e
 8013abc:	d81a      	bhi.n	8013af4 <USB_EPStartXfer+0x30c>
 8013abe:	1d7b      	adds	r3, r7, #5
 8013ac0:	33ff      	adds	r3, #255	; 0xff
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	085b      	lsrs	r3, r3, #1
 8013ac6:	21fc      	movs	r1, #252	; 0xfc
 8013ac8:	187a      	adds	r2, r7, r1
 8013aca:	6013      	str	r3, [r2, #0]
 8013acc:	1d7b      	adds	r3, r7, #5
 8013ace:	33ff      	adds	r3, #255	; 0xff
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2201      	movs	r2, #1
 8013ad4:	4013      	ands	r3, r2
 8013ad6:	d004      	beq.n	8013ae2 <USB_EPStartXfer+0x2fa>
 8013ad8:	187b      	adds	r3, r7, r1
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	3301      	adds	r3, #1
 8013ade:	187a      	adds	r2, r7, r1
 8013ae0:	6013      	str	r3, [r2, #0]
 8013ae2:	23fc      	movs	r3, #252	; 0xfc
 8013ae4:	18fb      	adds	r3, r7, r3
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	b29b      	uxth	r3, r3
 8013aea:	029b      	lsls	r3, r3, #10
 8013aec:	b29a      	uxth	r2, r3
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	801a      	strh	r2, [r3, #0]
 8013af2:	e03a      	b.n	8013b6a <USB_EPStartXfer+0x382>
 8013af4:	1d7b      	adds	r3, r7, #5
 8013af6:	33ff      	adds	r3, #255	; 0xff
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	095b      	lsrs	r3, r3, #5
 8013afc:	21fc      	movs	r1, #252	; 0xfc
 8013afe:	187a      	adds	r2, r7, r1
 8013b00:	6013      	str	r3, [r2, #0]
 8013b02:	1d7b      	adds	r3, r7, #5
 8013b04:	33ff      	adds	r3, #255	; 0xff
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	221f      	movs	r2, #31
 8013b0a:	4013      	ands	r3, r2
 8013b0c:	d104      	bne.n	8013b18 <USB_EPStartXfer+0x330>
 8013b0e:	187b      	adds	r3, r7, r1
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	3b01      	subs	r3, #1
 8013b14:	187a      	adds	r2, r7, r1
 8013b16:	6013      	str	r3, [r2, #0]
 8013b18:	23fc      	movs	r3, #252	; 0xfc
 8013b1a:	18fb      	adds	r3, r7, r3
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	029b      	lsls	r3, r3, #10
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	4a1f      	ldr	r2, [pc, #124]	; (8013ba4 <USB_EPStartXfer+0x3bc>)
 8013b26:	4313      	orrs	r3, r2
 8013b28:	b29a      	uxth	r2, r3
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	801a      	strh	r2, [r3, #0]
 8013b2e:	e01c      	b.n	8013b6a <USB_EPStartXfer+0x382>
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	785b      	ldrb	r3, [r3, #1]
 8013b34:	2b01      	cmp	r3, #1
 8013b36:	d118      	bne.n	8013b6a <USB_EPStartXfer+0x382>
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	623b      	str	r3, [r7, #32]
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2250      	movs	r2, #80	; 0x50
 8013b40:	5a9b      	ldrh	r3, [r3, r2]
 8013b42:	b29b      	uxth	r3, r3
 8013b44:	001a      	movs	r2, r3
 8013b46:	6a3b      	ldr	r3, [r7, #32]
 8013b48:	189b      	adds	r3, r3, r2
 8013b4a:	623b      	str	r3, [r7, #32]
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	00da      	lsls	r2, r3, #3
 8013b52:	6a3b      	ldr	r3, [r7, #32]
 8013b54:	18d3      	adds	r3, r2, r3
 8013b56:	4a0e      	ldr	r2, [pc, #56]	; (8013b90 <USB_EPStartXfer+0x3a8>)
 8013b58:	4694      	mov	ip, r2
 8013b5a:	4463      	add	r3, ip
 8013b5c:	61fb      	str	r3, [r7, #28]
 8013b5e:	1d7b      	adds	r3, r7, #5
 8013b60:	33ff      	adds	r3, #255	; 0xff
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	b29a      	uxth	r2, r3
 8013b66:	69fb      	ldr	r3, [r7, #28]
 8013b68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013b6a:	2076      	movs	r0, #118	; 0x76
 8013b6c:	183b      	adds	r3, r7, r0
 8013b6e:	683a      	ldr	r2, [r7, #0]
 8013b70:	8912      	ldrh	r2, [r2, #8]
 8013b72:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	6959      	ldr	r1, [r3, #20]
 8013b78:	1d7b      	adds	r3, r7, #5
 8013b7a:	33ff      	adds	r3, #255	; 0xff
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	b29c      	uxth	r4, r3
 8013b80:	183b      	adds	r3, r7, r0
 8013b82:	881a      	ldrh	r2, [r3, #0]
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	0023      	movs	r3, r4
 8013b88:	f001 f822 	bl	8014bd0 <USB_WritePMA>
 8013b8c:	e301      	b.n	8014192 <USB_EPStartXfer+0x9aa>
 8013b8e:	46c0      	nop			; (mov r8, r8)
 8013b90:	00000402 	.word	0x00000402
 8013b94:	ffff8f8f 	.word	0xffff8f8f
 8013b98:	ffff8180 	.word	0xffff8180
 8013b9c:	00000406 	.word	0x00000406
 8013ba0:	ffff83ff 	.word	0xffff83ff
 8013ba4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	785b      	ldrb	r3, [r3, #1]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d166      	bne.n	8013c7e <USB_EPStartXfer+0x496>
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2250      	movs	r2, #80	; 0x50
 8013bb8:	5a9b      	ldrh	r3, [r3, r2]
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	001a      	movs	r2, r3
 8013bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bc0:	189b      	adds	r3, r3, r2
 8013bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	00da      	lsls	r2, r3, #3
 8013bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bcc:	18d3      	adds	r3, r2, r3
 8013bce:	4ac3      	ldr	r2, [pc, #780]	; (8013edc <USB_EPStartXfer+0x6f4>)
 8013bd0:	4694      	mov	ip, r2
 8013bd2:	4463      	add	r3, ip
 8013bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8013bd6:	1d7b      	adds	r3, r7, #5
 8013bd8:	33ff      	adds	r3, #255	; 0xff
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d110      	bne.n	8013c02 <USB_EPStartXfer+0x41a>
 8013be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013be2:	881b      	ldrh	r3, [r3, #0]
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	4abe      	ldr	r2, [pc, #760]	; (8013ee0 <USB_EPStartXfer+0x6f8>)
 8013be8:	4013      	ands	r3, r2
 8013bea:	b29a      	uxth	r2, r3
 8013bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bee:	801a      	strh	r2, [r3, #0]
 8013bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bf2:	881b      	ldrh	r3, [r3, #0]
 8013bf4:	b29b      	uxth	r3, r3
 8013bf6:	4abb      	ldr	r2, [pc, #748]	; (8013ee4 <USB_EPStartXfer+0x6fc>)
 8013bf8:	4313      	orrs	r3, r2
 8013bfa:	b29a      	uxth	r2, r3
 8013bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bfe:	801a      	strh	r2, [r3, #0]
 8013c00:	e05a      	b.n	8013cb8 <USB_EPStartXfer+0x4d0>
 8013c02:	1d7b      	adds	r3, r7, #5
 8013c04:	33ff      	adds	r3, #255	; 0xff
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	2b3e      	cmp	r3, #62	; 0x3e
 8013c0a:	d81a      	bhi.n	8013c42 <USB_EPStartXfer+0x45a>
 8013c0c:	1d7b      	adds	r3, r7, #5
 8013c0e:	33ff      	adds	r3, #255	; 0xff
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	085b      	lsrs	r3, r3, #1
 8013c14:	21f8      	movs	r1, #248	; 0xf8
 8013c16:	187a      	adds	r2, r7, r1
 8013c18:	6013      	str	r3, [r2, #0]
 8013c1a:	1d7b      	adds	r3, r7, #5
 8013c1c:	33ff      	adds	r3, #255	; 0xff
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	2201      	movs	r2, #1
 8013c22:	4013      	ands	r3, r2
 8013c24:	d004      	beq.n	8013c30 <USB_EPStartXfer+0x448>
 8013c26:	187b      	adds	r3, r7, r1
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	187a      	adds	r2, r7, r1
 8013c2e:	6013      	str	r3, [r2, #0]
 8013c30:	23f8      	movs	r3, #248	; 0xf8
 8013c32:	18fb      	adds	r3, r7, r3
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	b29b      	uxth	r3, r3
 8013c38:	029b      	lsls	r3, r3, #10
 8013c3a:	b29a      	uxth	r2, r3
 8013c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c3e:	801a      	strh	r2, [r3, #0]
 8013c40:	e03a      	b.n	8013cb8 <USB_EPStartXfer+0x4d0>
 8013c42:	1d7b      	adds	r3, r7, #5
 8013c44:	33ff      	adds	r3, #255	; 0xff
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	095b      	lsrs	r3, r3, #5
 8013c4a:	21f8      	movs	r1, #248	; 0xf8
 8013c4c:	187a      	adds	r2, r7, r1
 8013c4e:	6013      	str	r3, [r2, #0]
 8013c50:	1d7b      	adds	r3, r7, #5
 8013c52:	33ff      	adds	r3, #255	; 0xff
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	221f      	movs	r2, #31
 8013c58:	4013      	ands	r3, r2
 8013c5a:	d104      	bne.n	8013c66 <USB_EPStartXfer+0x47e>
 8013c5c:	187b      	adds	r3, r7, r1
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	3b01      	subs	r3, #1
 8013c62:	187a      	adds	r2, r7, r1
 8013c64:	6013      	str	r3, [r2, #0]
 8013c66:	23f8      	movs	r3, #248	; 0xf8
 8013c68:	18fb      	adds	r3, r7, r3
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	029b      	lsls	r3, r3, #10
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	4a9c      	ldr	r2, [pc, #624]	; (8013ee4 <USB_EPStartXfer+0x6fc>)
 8013c74:	4313      	orrs	r3, r2
 8013c76:	b29a      	uxth	r2, r3
 8013c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c7a:	801a      	strh	r2, [r3, #0]
 8013c7c:	e01c      	b.n	8013cb8 <USB_EPStartXfer+0x4d0>
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	785b      	ldrb	r3, [r3, #1]
 8013c82:	2b01      	cmp	r3, #1
 8013c84:	d118      	bne.n	8013cb8 <USB_EPStartXfer+0x4d0>
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	653b      	str	r3, [r7, #80]	; 0x50
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2250      	movs	r2, #80	; 0x50
 8013c8e:	5a9b      	ldrh	r3, [r3, r2]
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	001a      	movs	r2, r3
 8013c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c96:	189b      	adds	r3, r3, r2
 8013c98:	653b      	str	r3, [r7, #80]	; 0x50
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	00da      	lsls	r2, r3, #3
 8013ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ca2:	18d3      	adds	r3, r2, r3
 8013ca4:	4a8d      	ldr	r2, [pc, #564]	; (8013edc <USB_EPStartXfer+0x6f4>)
 8013ca6:	4694      	mov	ip, r2
 8013ca8:	4463      	add	r3, ip
 8013caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013cac:	1d7b      	adds	r3, r7, #5
 8013cae:	33ff      	adds	r3, #255	; 0xff
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013cb8:	2076      	movs	r0, #118	; 0x76
 8013cba:	183b      	adds	r3, r7, r0
 8013cbc:	683a      	ldr	r2, [r7, #0]
 8013cbe:	8912      	ldrh	r2, [r2, #8]
 8013cc0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	6959      	ldr	r1, [r3, #20]
 8013cc6:	1d7b      	adds	r3, r7, #5
 8013cc8:	33ff      	adds	r3, #255	; 0xff
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	b29c      	uxth	r4, r3
 8013cce:	183b      	adds	r3, r7, r0
 8013cd0:	881a      	ldrh	r2, [r3, #0]
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	0023      	movs	r3, r4
 8013cd6:	f000 ff7b 	bl	8014bd0 <USB_WritePMA>
            ep->xfer_buff += len;
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	695a      	ldr	r2, [r3, #20]
 8013cde:	1d7b      	adds	r3, r7, #5
 8013ce0:	33ff      	adds	r3, #255	; 0xff
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	18d2      	adds	r2, r2, r3
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	6a1a      	ldr	r2, [r3, #32]
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	691b      	ldr	r3, [r3, #16]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d908      	bls.n	8013d08 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	6a1a      	ldr	r2, [r3, #32]
 8013cfa:	1d7b      	adds	r3, r7, #5
 8013cfc:	33ff      	adds	r3, #255	; 0xff
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	1ad2      	subs	r2, r2, r3
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	621a      	str	r2, [r3, #32]
 8013d06:	e007      	b.n	8013d18 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	6a1b      	ldr	r3, [r3, #32]
 8013d0c:	1d7a      	adds	r2, r7, #5
 8013d0e:	32ff      	adds	r2, #255	; 0xff
 8013d10:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013d12:	683b      	ldr	r3, [r7, #0]
 8013d14:	2200      	movs	r2, #0
 8013d16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	785b      	ldrb	r3, [r3, #1]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d166      	bne.n	8013df2 <USB_EPStartXfer+0x60a>
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2250      	movs	r2, #80	; 0x50
 8013d2c:	5a9b      	ldrh	r3, [r3, r2]
 8013d2e:	b29b      	uxth	r3, r3
 8013d30:	001a      	movs	r2, r3
 8013d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d34:	189b      	adds	r3, r3, r2
 8013d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	00da      	lsls	r2, r3, #3
 8013d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d40:	18d3      	adds	r3, r2, r3
 8013d42:	4a69      	ldr	r2, [pc, #420]	; (8013ee8 <USB_EPStartXfer+0x700>)
 8013d44:	4694      	mov	ip, r2
 8013d46:	4463      	add	r3, ip
 8013d48:	637b      	str	r3, [r7, #52]	; 0x34
 8013d4a:	1d7b      	adds	r3, r7, #5
 8013d4c:	33ff      	adds	r3, #255	; 0xff
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d110      	bne.n	8013d76 <USB_EPStartXfer+0x58e>
 8013d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d56:	881b      	ldrh	r3, [r3, #0]
 8013d58:	b29b      	uxth	r3, r3
 8013d5a:	4a61      	ldr	r2, [pc, #388]	; (8013ee0 <USB_EPStartXfer+0x6f8>)
 8013d5c:	4013      	ands	r3, r2
 8013d5e:	b29a      	uxth	r2, r3
 8013d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d62:	801a      	strh	r2, [r3, #0]
 8013d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d66:	881b      	ldrh	r3, [r3, #0]
 8013d68:	b29b      	uxth	r3, r3
 8013d6a:	4a5e      	ldr	r2, [pc, #376]	; (8013ee4 <USB_EPStartXfer+0x6fc>)
 8013d6c:	4313      	orrs	r3, r2
 8013d6e:	b29a      	uxth	r2, r3
 8013d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d72:	801a      	strh	r2, [r3, #0]
 8013d74:	e058      	b.n	8013e28 <USB_EPStartXfer+0x640>
 8013d76:	1d7b      	adds	r3, r7, #5
 8013d78:	33ff      	adds	r3, #255	; 0xff
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8013d7e:	d81a      	bhi.n	8013db6 <USB_EPStartXfer+0x5ce>
 8013d80:	1d7b      	adds	r3, r7, #5
 8013d82:	33ff      	adds	r3, #255	; 0xff
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	085b      	lsrs	r3, r3, #1
 8013d88:	21f4      	movs	r1, #244	; 0xf4
 8013d8a:	187a      	adds	r2, r7, r1
 8013d8c:	6013      	str	r3, [r2, #0]
 8013d8e:	1d7b      	adds	r3, r7, #5
 8013d90:	33ff      	adds	r3, #255	; 0xff
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2201      	movs	r2, #1
 8013d96:	4013      	ands	r3, r2
 8013d98:	d004      	beq.n	8013da4 <USB_EPStartXfer+0x5bc>
 8013d9a:	187b      	adds	r3, r7, r1
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	3301      	adds	r3, #1
 8013da0:	187a      	adds	r2, r7, r1
 8013da2:	6013      	str	r3, [r2, #0]
 8013da4:	23f4      	movs	r3, #244	; 0xf4
 8013da6:	18fb      	adds	r3, r7, r3
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	029b      	lsls	r3, r3, #10
 8013dae:	b29a      	uxth	r2, r3
 8013db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013db2:	801a      	strh	r2, [r3, #0]
 8013db4:	e038      	b.n	8013e28 <USB_EPStartXfer+0x640>
 8013db6:	1d7b      	adds	r3, r7, #5
 8013db8:	33ff      	adds	r3, #255	; 0xff
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	095b      	lsrs	r3, r3, #5
 8013dbe:	21f4      	movs	r1, #244	; 0xf4
 8013dc0:	187a      	adds	r2, r7, r1
 8013dc2:	6013      	str	r3, [r2, #0]
 8013dc4:	1d7b      	adds	r3, r7, #5
 8013dc6:	33ff      	adds	r3, #255	; 0xff
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	221f      	movs	r2, #31
 8013dcc:	4013      	ands	r3, r2
 8013dce:	d104      	bne.n	8013dda <USB_EPStartXfer+0x5f2>
 8013dd0:	187b      	adds	r3, r7, r1
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	3b01      	subs	r3, #1
 8013dd6:	187a      	adds	r2, r7, r1
 8013dd8:	6013      	str	r3, [r2, #0]
 8013dda:	23f4      	movs	r3, #244	; 0xf4
 8013ddc:	18fb      	adds	r3, r7, r3
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	029b      	lsls	r3, r3, #10
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	4a3f      	ldr	r2, [pc, #252]	; (8013ee4 <USB_EPStartXfer+0x6fc>)
 8013de8:	4313      	orrs	r3, r2
 8013dea:	b29a      	uxth	r2, r3
 8013dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dee:	801a      	strh	r2, [r3, #0]
 8013df0:	e01a      	b.n	8013e28 <USB_EPStartXfer+0x640>
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	785b      	ldrb	r3, [r3, #1]
 8013df6:	2b01      	cmp	r3, #1
 8013df8:	d116      	bne.n	8013e28 <USB_EPStartXfer+0x640>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2250      	movs	r2, #80	; 0x50
 8013dfe:	5a9b      	ldrh	r3, [r3, r2]
 8013e00:	b29b      	uxth	r3, r3
 8013e02:	001a      	movs	r2, r3
 8013e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e06:	189b      	adds	r3, r3, r2
 8013e08:	643b      	str	r3, [r7, #64]	; 0x40
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	00da      	lsls	r2, r3, #3
 8013e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e12:	18d3      	adds	r3, r2, r3
 8013e14:	4a34      	ldr	r2, [pc, #208]	; (8013ee8 <USB_EPStartXfer+0x700>)
 8013e16:	4694      	mov	ip, r2
 8013e18:	4463      	add	r3, ip
 8013e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e1c:	1d7b      	adds	r3, r7, #5
 8013e1e:	33ff      	adds	r3, #255	; 0xff
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	b29a      	uxth	r2, r3
 8013e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013e28:	2076      	movs	r0, #118	; 0x76
 8013e2a:	183b      	adds	r3, r7, r0
 8013e2c:	683a      	ldr	r2, [r7, #0]
 8013e2e:	8952      	ldrh	r2, [r2, #10]
 8013e30:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	6959      	ldr	r1, [r3, #20]
 8013e36:	1d7b      	adds	r3, r7, #5
 8013e38:	33ff      	adds	r3, #255	; 0xff
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	b29c      	uxth	r4, r3
 8013e3e:	183b      	adds	r3, r7, r0
 8013e40:	881a      	ldrh	r2, [r3, #0]
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	0023      	movs	r3, r4
 8013e46:	f000 fec3 	bl	8014bd0 <USB_WritePMA>
 8013e4a:	e1a2      	b.n	8014192 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	6a1b      	ldr	r3, [r3, #32]
 8013e50:	1d7a      	adds	r2, r7, #5
 8013e52:	32ff      	adds	r2, #255	; 0xff
 8013e54:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8013e56:	687a      	ldr	r2, [r7, #4]
 8013e58:	683b      	ldr	r3, [r7, #0]
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	009b      	lsls	r3, r3, #2
 8013e5e:	18d3      	adds	r3, r2, r3
 8013e60:	881b      	ldrh	r3, [r3, #0]
 8013e62:	b29a      	uxth	r2, r3
 8013e64:	2062      	movs	r0, #98	; 0x62
 8013e66:	183b      	adds	r3, r7, r0
 8013e68:	4920      	ldr	r1, [pc, #128]	; (8013eec <USB_EPStartXfer+0x704>)
 8013e6a:	400a      	ands	r2, r1
 8013e6c:	801a      	strh	r2, [r3, #0]
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	009b      	lsls	r3, r3, #2
 8013e76:	18d3      	adds	r3, r2, r3
 8013e78:	183a      	adds	r2, r7, r0
 8013e7a:	8812      	ldrh	r2, [r2, #0]
 8013e7c:	491c      	ldr	r1, [pc, #112]	; (8013ef0 <USB_EPStartXfer+0x708>)
 8013e7e:	430a      	orrs	r2, r1
 8013e80:	b292      	uxth	r2, r2
 8013e82:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2250      	movs	r2, #80	; 0x50
 8013e8c:	5a9b      	ldrh	r3, [r3, r2]
 8013e8e:	b29b      	uxth	r3, r3
 8013e90:	001a      	movs	r2, r3
 8013e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013e94:	189b      	adds	r3, r3, r2
 8013e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	781b      	ldrb	r3, [r3, #0]
 8013e9c:	00da      	lsls	r2, r3, #3
 8013e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ea0:	18d3      	adds	r3, r2, r3
 8013ea2:	4a0e      	ldr	r2, [pc, #56]	; (8013edc <USB_EPStartXfer+0x6f4>)
 8013ea4:	4694      	mov	ip, r2
 8013ea6:	4463      	add	r3, ip
 8013ea8:	65bb      	str	r3, [r7, #88]	; 0x58
 8013eaa:	1d7b      	adds	r3, r7, #5
 8013eac:	33ff      	adds	r3, #255	; 0xff
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	b29a      	uxth	r2, r3
 8013eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013eb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013eb6:	2076      	movs	r0, #118	; 0x76
 8013eb8:	183b      	adds	r3, r7, r0
 8013eba:	683a      	ldr	r2, [r7, #0]
 8013ebc:	8912      	ldrh	r2, [r2, #8]
 8013ebe:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	6959      	ldr	r1, [r3, #20]
 8013ec4:	1d7b      	adds	r3, r7, #5
 8013ec6:	33ff      	adds	r3, #255	; 0xff
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	b29c      	uxth	r4, r3
 8013ecc:	183b      	adds	r3, r7, r0
 8013ece:	881a      	ldrh	r2, [r3, #0]
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	0023      	movs	r3, r4
 8013ed4:	f000 fe7c 	bl	8014bd0 <USB_WritePMA>
 8013ed8:	e15b      	b.n	8014192 <USB_EPStartXfer+0x9aa>
 8013eda:	46c0      	nop			; (mov r8, r8)
 8013edc:	00000402 	.word	0x00000402
 8013ee0:	ffff83ff 	.word	0xffff83ff
 8013ee4:	ffff8000 	.word	0xffff8000
 8013ee8:	00000406 	.word	0x00000406
 8013eec:	ffff8e8f 	.word	0xffff8e8f
 8013ef0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	6a1a      	ldr	r2, [r3, #32]
 8013ef8:	1d7b      	adds	r3, r7, #5
 8013efa:	33ff      	adds	r3, #255	; 0xff
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	1ad2      	subs	r2, r2, r3
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013f04:	687a      	ldr	r2, [r7, #4]
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	009b      	lsls	r3, r3, #2
 8013f0c:	18d3      	adds	r3, r2, r3
 8013f0e:	881b      	ldrh	r3, [r3, #0]
 8013f10:	b29b      	uxth	r3, r3
 8013f12:	001a      	movs	r2, r3
 8013f14:	2340      	movs	r3, #64	; 0x40
 8013f16:	4013      	ands	r3, r2
 8013f18:	d100      	bne.n	8013f1c <USB_EPStartXfer+0x734>
 8013f1a:	e099      	b.n	8014050 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	673b      	str	r3, [r7, #112]	; 0x70
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	785b      	ldrb	r3, [r3, #1]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d166      	bne.n	8013ff6 <USB_EPStartXfer+0x80e>
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2250      	movs	r2, #80	; 0x50
 8013f30:	5a9b      	ldrh	r3, [r3, r2]
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	001a      	movs	r2, r3
 8013f36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f38:	189b      	adds	r3, r3, r2
 8013f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8013f3c:	683b      	ldr	r3, [r7, #0]
 8013f3e:	781b      	ldrb	r3, [r3, #0]
 8013f40:	00da      	lsls	r2, r3, #3
 8013f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f44:	18d3      	adds	r3, r2, r3
 8013f46:	4ad0      	ldr	r2, [pc, #832]	; (8014288 <USB_EPStartXfer+0xaa0>)
 8013f48:	4694      	mov	ip, r2
 8013f4a:	4463      	add	r3, ip
 8013f4c:	667b      	str	r3, [r7, #100]	; 0x64
 8013f4e:	1d7b      	adds	r3, r7, #5
 8013f50:	33ff      	adds	r3, #255	; 0xff
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d110      	bne.n	8013f7a <USB_EPStartXfer+0x792>
 8013f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013f5a:	881b      	ldrh	r3, [r3, #0]
 8013f5c:	b29b      	uxth	r3, r3
 8013f5e:	4acb      	ldr	r2, [pc, #812]	; (801428c <USB_EPStartXfer+0xaa4>)
 8013f60:	4013      	ands	r3, r2
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013f66:	801a      	strh	r2, [r3, #0]
 8013f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013f6a:	881b      	ldrh	r3, [r3, #0]
 8013f6c:	b29b      	uxth	r3, r3
 8013f6e:	4ac8      	ldr	r2, [pc, #800]	; (8014290 <USB_EPStartXfer+0xaa8>)
 8013f70:	4313      	orrs	r3, r2
 8013f72:	b29a      	uxth	r2, r3
 8013f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013f76:	801a      	strh	r2, [r3, #0]
 8013f78:	e058      	b.n	801402c <USB_EPStartXfer+0x844>
 8013f7a:	1d7b      	adds	r3, r7, #5
 8013f7c:	33ff      	adds	r3, #255	; 0xff
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	2b3e      	cmp	r3, #62	; 0x3e
 8013f82:	d81a      	bhi.n	8013fba <USB_EPStartXfer+0x7d2>
 8013f84:	1d7b      	adds	r3, r7, #5
 8013f86:	33ff      	adds	r3, #255	; 0xff
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	085b      	lsrs	r3, r3, #1
 8013f8c:	21f0      	movs	r1, #240	; 0xf0
 8013f8e:	187a      	adds	r2, r7, r1
 8013f90:	6013      	str	r3, [r2, #0]
 8013f92:	1d7b      	adds	r3, r7, #5
 8013f94:	33ff      	adds	r3, #255	; 0xff
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	2201      	movs	r2, #1
 8013f9a:	4013      	ands	r3, r2
 8013f9c:	d004      	beq.n	8013fa8 <USB_EPStartXfer+0x7c0>
 8013f9e:	187b      	adds	r3, r7, r1
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	187a      	adds	r2, r7, r1
 8013fa6:	6013      	str	r3, [r2, #0]
 8013fa8:	23f0      	movs	r3, #240	; 0xf0
 8013faa:	18fb      	adds	r3, r7, r3
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	029b      	lsls	r3, r3, #10
 8013fb2:	b29a      	uxth	r2, r3
 8013fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013fb6:	801a      	strh	r2, [r3, #0]
 8013fb8:	e038      	b.n	801402c <USB_EPStartXfer+0x844>
 8013fba:	1d7b      	adds	r3, r7, #5
 8013fbc:	33ff      	adds	r3, #255	; 0xff
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	095b      	lsrs	r3, r3, #5
 8013fc2:	21f0      	movs	r1, #240	; 0xf0
 8013fc4:	187a      	adds	r2, r7, r1
 8013fc6:	6013      	str	r3, [r2, #0]
 8013fc8:	1d7b      	adds	r3, r7, #5
 8013fca:	33ff      	adds	r3, #255	; 0xff
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	221f      	movs	r2, #31
 8013fd0:	4013      	ands	r3, r2
 8013fd2:	d104      	bne.n	8013fde <USB_EPStartXfer+0x7f6>
 8013fd4:	187b      	adds	r3, r7, r1
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	3b01      	subs	r3, #1
 8013fda:	187a      	adds	r2, r7, r1
 8013fdc:	6013      	str	r3, [r2, #0]
 8013fde:	23f0      	movs	r3, #240	; 0xf0
 8013fe0:	18fb      	adds	r3, r7, r3
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	029b      	lsls	r3, r3, #10
 8013fe8:	b29b      	uxth	r3, r3
 8013fea:	4aa9      	ldr	r2, [pc, #676]	; (8014290 <USB_EPStartXfer+0xaa8>)
 8013fec:	4313      	orrs	r3, r2
 8013fee:	b29a      	uxth	r2, r3
 8013ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ff2:	801a      	strh	r2, [r3, #0]
 8013ff4:	e01a      	b.n	801402c <USB_EPStartXfer+0x844>
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	785b      	ldrb	r3, [r3, #1]
 8013ffa:	2b01      	cmp	r3, #1
 8013ffc:	d116      	bne.n	801402c <USB_EPStartXfer+0x844>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	2250      	movs	r2, #80	; 0x50
 8014002:	5a9b      	ldrh	r3, [r3, r2]
 8014004:	b29b      	uxth	r3, r3
 8014006:	001a      	movs	r2, r3
 8014008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801400a:	189b      	adds	r3, r3, r2
 801400c:	673b      	str	r3, [r7, #112]	; 0x70
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	00da      	lsls	r2, r3, #3
 8014014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014016:	18d3      	adds	r3, r2, r3
 8014018:	4a9b      	ldr	r2, [pc, #620]	; (8014288 <USB_EPStartXfer+0xaa0>)
 801401a:	4694      	mov	ip, r2
 801401c:	4463      	add	r3, ip
 801401e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014020:	1d7b      	adds	r3, r7, #5
 8014022:	33ff      	adds	r3, #255	; 0xff
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	b29a      	uxth	r2, r3
 8014028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801402a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801402c:	2076      	movs	r0, #118	; 0x76
 801402e:	183b      	adds	r3, r7, r0
 8014030:	683a      	ldr	r2, [r7, #0]
 8014032:	8952      	ldrh	r2, [r2, #10]
 8014034:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	6959      	ldr	r1, [r3, #20]
 801403a:	1d7b      	adds	r3, r7, #5
 801403c:	33ff      	adds	r3, #255	; 0xff
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	b29c      	uxth	r4, r3
 8014042:	183b      	adds	r3, r7, r0
 8014044:	881a      	ldrh	r2, [r3, #0]
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	0023      	movs	r3, r4
 801404a:	f000 fdc1 	bl	8014bd0 <USB_WritePMA>
 801404e:	e0a0      	b.n	8014192 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	785b      	ldrb	r3, [r3, #1]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d166      	bne.n	8014126 <USB_EPStartXfer+0x93e>
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2250      	movs	r2, #80	; 0x50
 8014060:	5a9b      	ldrh	r3, [r3, r2]
 8014062:	b29b      	uxth	r3, r3
 8014064:	001a      	movs	r2, r3
 8014066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014068:	189b      	adds	r3, r3, r2
 801406a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	00da      	lsls	r2, r3, #3
 8014072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014074:	18d3      	adds	r3, r2, r3
 8014076:	4a87      	ldr	r2, [pc, #540]	; (8014294 <USB_EPStartXfer+0xaac>)
 8014078:	4694      	mov	ip, r2
 801407a:	4463      	add	r3, ip
 801407c:	67bb      	str	r3, [r7, #120]	; 0x78
 801407e:	1d7b      	adds	r3, r7, #5
 8014080:	33ff      	adds	r3, #255	; 0xff
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d110      	bne.n	80140aa <USB_EPStartXfer+0x8c2>
 8014088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801408a:	881b      	ldrh	r3, [r3, #0]
 801408c:	b29b      	uxth	r3, r3
 801408e:	4a7f      	ldr	r2, [pc, #508]	; (801428c <USB_EPStartXfer+0xaa4>)
 8014090:	4013      	ands	r3, r2
 8014092:	b29a      	uxth	r2, r3
 8014094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014096:	801a      	strh	r2, [r3, #0]
 8014098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801409a:	881b      	ldrh	r3, [r3, #0]
 801409c:	b29b      	uxth	r3, r3
 801409e:	4a7c      	ldr	r2, [pc, #496]	; (8014290 <USB_EPStartXfer+0xaa8>)
 80140a0:	4313      	orrs	r3, r2
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80140a6:	801a      	strh	r2, [r3, #0]
 80140a8:	e062      	b.n	8014170 <USB_EPStartXfer+0x988>
 80140aa:	1d7b      	adds	r3, r7, #5
 80140ac:	33ff      	adds	r3, #255	; 0xff
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	2b3e      	cmp	r3, #62	; 0x3e
 80140b2:	d81a      	bhi.n	80140ea <USB_EPStartXfer+0x902>
 80140b4:	1d7b      	adds	r3, r7, #5
 80140b6:	33ff      	adds	r3, #255	; 0xff
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	085b      	lsrs	r3, r3, #1
 80140bc:	21ec      	movs	r1, #236	; 0xec
 80140be:	187a      	adds	r2, r7, r1
 80140c0:	6013      	str	r3, [r2, #0]
 80140c2:	1d7b      	adds	r3, r7, #5
 80140c4:	33ff      	adds	r3, #255	; 0xff
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2201      	movs	r2, #1
 80140ca:	4013      	ands	r3, r2
 80140cc:	d004      	beq.n	80140d8 <USB_EPStartXfer+0x8f0>
 80140ce:	187b      	adds	r3, r7, r1
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	3301      	adds	r3, #1
 80140d4:	187a      	adds	r2, r7, r1
 80140d6:	6013      	str	r3, [r2, #0]
 80140d8:	23ec      	movs	r3, #236	; 0xec
 80140da:	18fb      	adds	r3, r7, r3
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	b29b      	uxth	r3, r3
 80140e0:	029b      	lsls	r3, r3, #10
 80140e2:	b29a      	uxth	r2, r3
 80140e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80140e6:	801a      	strh	r2, [r3, #0]
 80140e8:	e042      	b.n	8014170 <USB_EPStartXfer+0x988>
 80140ea:	1d7b      	adds	r3, r7, #5
 80140ec:	33ff      	adds	r3, #255	; 0xff
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	095b      	lsrs	r3, r3, #5
 80140f2:	21ec      	movs	r1, #236	; 0xec
 80140f4:	187a      	adds	r2, r7, r1
 80140f6:	6013      	str	r3, [r2, #0]
 80140f8:	1d7b      	adds	r3, r7, #5
 80140fa:	33ff      	adds	r3, #255	; 0xff
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	221f      	movs	r2, #31
 8014100:	4013      	ands	r3, r2
 8014102:	d104      	bne.n	801410e <USB_EPStartXfer+0x926>
 8014104:	187b      	adds	r3, r7, r1
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	3b01      	subs	r3, #1
 801410a:	187a      	adds	r2, r7, r1
 801410c:	6013      	str	r3, [r2, #0]
 801410e:	23ec      	movs	r3, #236	; 0xec
 8014110:	18fb      	adds	r3, r7, r3
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	b29b      	uxth	r3, r3
 8014116:	029b      	lsls	r3, r3, #10
 8014118:	b29b      	uxth	r3, r3
 801411a:	4a5d      	ldr	r2, [pc, #372]	; (8014290 <USB_EPStartXfer+0xaa8>)
 801411c:	4313      	orrs	r3, r2
 801411e:	b29a      	uxth	r2, r3
 8014120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014122:	801a      	strh	r2, [r3, #0]
 8014124:	e024      	b.n	8014170 <USB_EPStartXfer+0x988>
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	785b      	ldrb	r3, [r3, #1]
 801412a:	2b01      	cmp	r3, #1
 801412c:	d120      	bne.n	8014170 <USB_EPStartXfer+0x988>
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	2184      	movs	r1, #132	; 0x84
 8014132:	187a      	adds	r2, r7, r1
 8014134:	6013      	str	r3, [r2, #0]
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2250      	movs	r2, #80	; 0x50
 801413a:	5a9b      	ldrh	r3, [r3, r2]
 801413c:	b29b      	uxth	r3, r3
 801413e:	001a      	movs	r2, r3
 8014140:	187b      	adds	r3, r7, r1
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	189b      	adds	r3, r3, r2
 8014146:	187a      	adds	r2, r7, r1
 8014148:	6013      	str	r3, [r2, #0]
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	00da      	lsls	r2, r3, #3
 8014150:	187b      	adds	r3, r7, r1
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	18d3      	adds	r3, r2, r3
 8014156:	4a4f      	ldr	r2, [pc, #316]	; (8014294 <USB_EPStartXfer+0xaac>)
 8014158:	4694      	mov	ip, r2
 801415a:	4463      	add	r3, ip
 801415c:	2180      	movs	r1, #128	; 0x80
 801415e:	187a      	adds	r2, r7, r1
 8014160:	6013      	str	r3, [r2, #0]
 8014162:	1d7b      	adds	r3, r7, #5
 8014164:	33ff      	adds	r3, #255	; 0xff
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	b29a      	uxth	r2, r3
 801416a:	187b      	adds	r3, r7, r1
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014170:	2076      	movs	r0, #118	; 0x76
 8014172:	183b      	adds	r3, r7, r0
 8014174:	683a      	ldr	r2, [r7, #0]
 8014176:	8912      	ldrh	r2, [r2, #8]
 8014178:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	6959      	ldr	r1, [r3, #20]
 801417e:	1d7b      	adds	r3, r7, #5
 8014180:	33ff      	adds	r3, #255	; 0xff
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	b29c      	uxth	r4, r3
 8014186:	183b      	adds	r3, r7, r0
 8014188:	881a      	ldrh	r2, [r3, #0]
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	0023      	movs	r3, r4
 801418e:	f000 fd1f 	bl	8014bd0 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8014192:	687a      	ldr	r2, [r7, #4]
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	009b      	lsls	r3, r3, #2
 801419a:	18d3      	adds	r3, r2, r3
 801419c:	881b      	ldrh	r3, [r3, #0]
 801419e:	b29a      	uxth	r2, r3
 80141a0:	200a      	movs	r0, #10
 80141a2:	183b      	adds	r3, r7, r0
 80141a4:	493c      	ldr	r1, [pc, #240]	; (8014298 <USB_EPStartXfer+0xab0>)
 80141a6:	400a      	ands	r2, r1
 80141a8:	801a      	strh	r2, [r3, #0]
 80141aa:	183b      	adds	r3, r7, r0
 80141ac:	183a      	adds	r2, r7, r0
 80141ae:	8812      	ldrh	r2, [r2, #0]
 80141b0:	2110      	movs	r1, #16
 80141b2:	404a      	eors	r2, r1
 80141b4:	801a      	strh	r2, [r3, #0]
 80141b6:	183b      	adds	r3, r7, r0
 80141b8:	183a      	adds	r2, r7, r0
 80141ba:	8812      	ldrh	r2, [r2, #0]
 80141bc:	2120      	movs	r1, #32
 80141be:	404a      	eors	r2, r1
 80141c0:	801a      	strh	r2, [r3, #0]
 80141c2:	687a      	ldr	r2, [r7, #4]
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	781b      	ldrb	r3, [r3, #0]
 80141c8:	009b      	lsls	r3, r3, #2
 80141ca:	18d3      	adds	r3, r2, r3
 80141cc:	183a      	adds	r2, r7, r0
 80141ce:	8812      	ldrh	r2, [r2, #0]
 80141d0:	4932      	ldr	r1, [pc, #200]	; (801429c <USB_EPStartXfer+0xab4>)
 80141d2:	430a      	orrs	r2, r1
 80141d4:	b292      	uxth	r2, r2
 80141d6:	801a      	strh	r2, [r3, #0]
 80141d8:	f000 fbaf 	bl	801493a <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	7b1b      	ldrb	r3, [r3, #12]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d000      	beq.n	80141e6 <USB_EPStartXfer+0x9fe>
 80141e4:	e09e      	b.n	8014324 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	699a      	ldr	r2, [r3, #24]
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	691b      	ldr	r3, [r3, #16]
 80141ee:	429a      	cmp	r2, r3
 80141f0:	d90d      	bls.n	801420e <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	691b      	ldr	r3, [r3, #16]
 80141f6:	1d7a      	adds	r2, r7, #5
 80141f8:	32ff      	adds	r2, #255	; 0xff
 80141fa:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	699a      	ldr	r2, [r3, #24]
 8014200:	1d7b      	adds	r3, r7, #5
 8014202:	33ff      	adds	r3, #255	; 0xff
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	1ad2      	subs	r2, r2, r3
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	619a      	str	r2, [r3, #24]
 801420c:	e007      	b.n	801421e <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	699b      	ldr	r3, [r3, #24]
 8014212:	1d7a      	adds	r2, r7, #5
 8014214:	32ff      	adds	r2, #255	; 0xff
 8014216:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	2200      	movs	r2, #0
 801421c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2190      	movs	r1, #144	; 0x90
 8014222:	187a      	adds	r2, r7, r1
 8014224:	6013      	str	r3, [r2, #0]
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2250      	movs	r2, #80	; 0x50
 801422a:	5a9b      	ldrh	r3, [r3, r2]
 801422c:	b29b      	uxth	r3, r3
 801422e:	001a      	movs	r2, r3
 8014230:	187b      	adds	r3, r7, r1
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	189b      	adds	r3, r3, r2
 8014236:	187a      	adds	r2, r7, r1
 8014238:	6013      	str	r3, [r2, #0]
 801423a:	683b      	ldr	r3, [r7, #0]
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	00da      	lsls	r2, r3, #3
 8014240:	187b      	adds	r3, r7, r1
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	18d3      	adds	r3, r2, r3
 8014246:	4a10      	ldr	r2, [pc, #64]	; (8014288 <USB_EPStartXfer+0xaa0>)
 8014248:	4694      	mov	ip, r2
 801424a:	4463      	add	r3, ip
 801424c:	218c      	movs	r1, #140	; 0x8c
 801424e:	187a      	adds	r2, r7, r1
 8014250:	6013      	str	r3, [r2, #0]
 8014252:	1d7b      	adds	r3, r7, #5
 8014254:	33ff      	adds	r3, #255	; 0xff
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d121      	bne.n	80142a0 <USB_EPStartXfer+0xab8>
 801425c:	187b      	adds	r3, r7, r1
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	881b      	ldrh	r3, [r3, #0]
 8014262:	b29b      	uxth	r3, r3
 8014264:	4a09      	ldr	r2, [pc, #36]	; (801428c <USB_EPStartXfer+0xaa4>)
 8014266:	4013      	ands	r3, r2
 8014268:	b29a      	uxth	r2, r3
 801426a:	187b      	adds	r3, r7, r1
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	801a      	strh	r2, [r3, #0]
 8014270:	187b      	adds	r3, r7, r1
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	881b      	ldrh	r3, [r3, #0]
 8014276:	b29b      	uxth	r3, r3
 8014278:	4a05      	ldr	r2, [pc, #20]	; (8014290 <USB_EPStartXfer+0xaa8>)
 801427a:	4313      	orrs	r3, r2
 801427c:	b29a      	uxth	r2, r3
 801427e:	187b      	adds	r3, r7, r1
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	801a      	strh	r2, [r3, #0]
 8014284:	e334      	b.n	80148f0 <USB_EPStartXfer+0x1108>
 8014286:	46c0      	nop			; (mov r8, r8)
 8014288:	00000406 	.word	0x00000406
 801428c:	ffff83ff 	.word	0xffff83ff
 8014290:	ffff8000 	.word	0xffff8000
 8014294:	00000402 	.word	0x00000402
 8014298:	ffff8fbf 	.word	0xffff8fbf
 801429c:	ffff8080 	.word	0xffff8080
 80142a0:	1d7b      	adds	r3, r7, #5
 80142a2:	33ff      	adds	r3, #255	; 0xff
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	2b3e      	cmp	r3, #62	; 0x3e
 80142a8:	d81c      	bhi.n	80142e4 <USB_EPStartXfer+0xafc>
 80142aa:	1d7b      	adds	r3, r7, #5
 80142ac:	33ff      	adds	r3, #255	; 0xff
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	085b      	lsrs	r3, r3, #1
 80142b2:	21e8      	movs	r1, #232	; 0xe8
 80142b4:	187a      	adds	r2, r7, r1
 80142b6:	6013      	str	r3, [r2, #0]
 80142b8:	1d7b      	adds	r3, r7, #5
 80142ba:	33ff      	adds	r3, #255	; 0xff
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2201      	movs	r2, #1
 80142c0:	4013      	ands	r3, r2
 80142c2:	d004      	beq.n	80142ce <USB_EPStartXfer+0xae6>
 80142c4:	187b      	adds	r3, r7, r1
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	3301      	adds	r3, #1
 80142ca:	187a      	adds	r2, r7, r1
 80142cc:	6013      	str	r3, [r2, #0]
 80142ce:	23e8      	movs	r3, #232	; 0xe8
 80142d0:	18fb      	adds	r3, r7, r3
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	b29b      	uxth	r3, r3
 80142d6:	029b      	lsls	r3, r3, #10
 80142d8:	b29a      	uxth	r2, r3
 80142da:	238c      	movs	r3, #140	; 0x8c
 80142dc:	18fb      	adds	r3, r7, r3
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	801a      	strh	r2, [r3, #0]
 80142e2:	e305      	b.n	80148f0 <USB_EPStartXfer+0x1108>
 80142e4:	1d7b      	adds	r3, r7, #5
 80142e6:	33ff      	adds	r3, #255	; 0xff
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	095b      	lsrs	r3, r3, #5
 80142ec:	21e8      	movs	r1, #232	; 0xe8
 80142ee:	187a      	adds	r2, r7, r1
 80142f0:	6013      	str	r3, [r2, #0]
 80142f2:	1d7b      	adds	r3, r7, #5
 80142f4:	33ff      	adds	r3, #255	; 0xff
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	221f      	movs	r2, #31
 80142fa:	4013      	ands	r3, r2
 80142fc:	d104      	bne.n	8014308 <USB_EPStartXfer+0xb20>
 80142fe:	187b      	adds	r3, r7, r1
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	3b01      	subs	r3, #1
 8014304:	187a      	adds	r2, r7, r1
 8014306:	6013      	str	r3, [r2, #0]
 8014308:	23e8      	movs	r3, #232	; 0xe8
 801430a:	18fb      	adds	r3, r7, r3
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	b29b      	uxth	r3, r3
 8014310:	029b      	lsls	r3, r3, #10
 8014312:	b29b      	uxth	r3, r3
 8014314:	4aca      	ldr	r2, [pc, #808]	; (8014640 <USB_EPStartXfer+0xe58>)
 8014316:	4313      	orrs	r3, r2
 8014318:	b29a      	uxth	r2, r3
 801431a:	238c      	movs	r3, #140	; 0x8c
 801431c:	18fb      	adds	r3, r7, r3
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	801a      	strh	r2, [r3, #0]
 8014322:	e2e5      	b.n	80148f0 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	78db      	ldrb	r3, [r3, #3]
 8014328:	2b02      	cmp	r3, #2
 801432a:	d000      	beq.n	801432e <USB_EPStartXfer+0xb46>
 801432c:	e16f      	b.n	801460e <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	785b      	ldrb	r3, [r3, #1]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d16f      	bne.n	8014416 <USB_EPStartXfer+0xc2e>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	21ac      	movs	r1, #172	; 0xac
 801433a:	187a      	adds	r2, r7, r1
 801433c:	6013      	str	r3, [r2, #0]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2250      	movs	r2, #80	; 0x50
 8014342:	5a9b      	ldrh	r3, [r3, r2]
 8014344:	b29b      	uxth	r3, r3
 8014346:	001a      	movs	r2, r3
 8014348:	187b      	adds	r3, r7, r1
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	189b      	adds	r3, r3, r2
 801434e:	187a      	adds	r2, r7, r1
 8014350:	6013      	str	r3, [r2, #0]
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	00da      	lsls	r2, r3, #3
 8014358:	187b      	adds	r3, r7, r1
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	18d3      	adds	r3, r2, r3
 801435e:	4ab9      	ldr	r2, [pc, #740]	; (8014644 <USB_EPStartXfer+0xe5c>)
 8014360:	4694      	mov	ip, r2
 8014362:	4463      	add	r3, ip
 8014364:	21a8      	movs	r1, #168	; 0xa8
 8014366:	187a      	adds	r2, r7, r1
 8014368:	6013      	str	r3, [r2, #0]
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	691b      	ldr	r3, [r3, #16]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d114      	bne.n	801439c <USB_EPStartXfer+0xbb4>
 8014372:	187b      	adds	r3, r7, r1
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	881b      	ldrh	r3, [r3, #0]
 8014378:	b29b      	uxth	r3, r3
 801437a:	4ab3      	ldr	r2, [pc, #716]	; (8014648 <USB_EPStartXfer+0xe60>)
 801437c:	4013      	ands	r3, r2
 801437e:	b29a      	uxth	r2, r3
 8014380:	187b      	adds	r3, r7, r1
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	801a      	strh	r2, [r3, #0]
 8014386:	187b      	adds	r3, r7, r1
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	881b      	ldrh	r3, [r3, #0]
 801438c:	b29b      	uxth	r3, r3
 801438e:	4aac      	ldr	r2, [pc, #688]	; (8014640 <USB_EPStartXfer+0xe58>)
 8014390:	4313      	orrs	r3, r2
 8014392:	b29a      	uxth	r2, r3
 8014394:	187b      	adds	r3, r7, r1
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	801a      	strh	r2, [r3, #0]
 801439a:	e060      	b.n	801445e <USB_EPStartXfer+0xc76>
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	691b      	ldr	r3, [r3, #16]
 80143a0:	2b3e      	cmp	r3, #62	; 0x3e
 80143a2:	d81a      	bhi.n	80143da <USB_EPStartXfer+0xbf2>
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	691b      	ldr	r3, [r3, #16]
 80143a8:	085b      	lsrs	r3, r3, #1
 80143aa:	21e4      	movs	r1, #228	; 0xe4
 80143ac:	187a      	adds	r2, r7, r1
 80143ae:	6013      	str	r3, [r2, #0]
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	691b      	ldr	r3, [r3, #16]
 80143b4:	2201      	movs	r2, #1
 80143b6:	4013      	ands	r3, r2
 80143b8:	d004      	beq.n	80143c4 <USB_EPStartXfer+0xbdc>
 80143ba:	187b      	adds	r3, r7, r1
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	3301      	adds	r3, #1
 80143c0:	187a      	adds	r2, r7, r1
 80143c2:	6013      	str	r3, [r2, #0]
 80143c4:	23e4      	movs	r3, #228	; 0xe4
 80143c6:	18fb      	adds	r3, r7, r3
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	029b      	lsls	r3, r3, #10
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	23a8      	movs	r3, #168	; 0xa8
 80143d2:	18fb      	adds	r3, r7, r3
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	801a      	strh	r2, [r3, #0]
 80143d8:	e041      	b.n	801445e <USB_EPStartXfer+0xc76>
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	691b      	ldr	r3, [r3, #16]
 80143de:	095b      	lsrs	r3, r3, #5
 80143e0:	21e4      	movs	r1, #228	; 0xe4
 80143e2:	187a      	adds	r2, r7, r1
 80143e4:	6013      	str	r3, [r2, #0]
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	691b      	ldr	r3, [r3, #16]
 80143ea:	221f      	movs	r2, #31
 80143ec:	4013      	ands	r3, r2
 80143ee:	d104      	bne.n	80143fa <USB_EPStartXfer+0xc12>
 80143f0:	187b      	adds	r3, r7, r1
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	3b01      	subs	r3, #1
 80143f6:	187a      	adds	r2, r7, r1
 80143f8:	6013      	str	r3, [r2, #0]
 80143fa:	23e4      	movs	r3, #228	; 0xe4
 80143fc:	18fb      	adds	r3, r7, r3
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	b29b      	uxth	r3, r3
 8014402:	029b      	lsls	r3, r3, #10
 8014404:	b29b      	uxth	r3, r3
 8014406:	4a8e      	ldr	r2, [pc, #568]	; (8014640 <USB_EPStartXfer+0xe58>)
 8014408:	4313      	orrs	r3, r2
 801440a:	b29a      	uxth	r2, r3
 801440c:	23a8      	movs	r3, #168	; 0xa8
 801440e:	18fb      	adds	r3, r7, r3
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	801a      	strh	r2, [r3, #0]
 8014414:	e023      	b.n	801445e <USB_EPStartXfer+0xc76>
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	785b      	ldrb	r3, [r3, #1]
 801441a:	2b01      	cmp	r3, #1
 801441c:	d11f      	bne.n	801445e <USB_EPStartXfer+0xc76>
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	21b4      	movs	r1, #180	; 0xb4
 8014422:	187a      	adds	r2, r7, r1
 8014424:	6013      	str	r3, [r2, #0]
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2250      	movs	r2, #80	; 0x50
 801442a:	5a9b      	ldrh	r3, [r3, r2]
 801442c:	b29b      	uxth	r3, r3
 801442e:	001a      	movs	r2, r3
 8014430:	187b      	adds	r3, r7, r1
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	189b      	adds	r3, r3, r2
 8014436:	187a      	adds	r2, r7, r1
 8014438:	6013      	str	r3, [r2, #0]
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	781b      	ldrb	r3, [r3, #0]
 801443e:	00da      	lsls	r2, r3, #3
 8014440:	187b      	adds	r3, r7, r1
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	18d3      	adds	r3, r2, r3
 8014446:	4a7f      	ldr	r2, [pc, #508]	; (8014644 <USB_EPStartXfer+0xe5c>)
 8014448:	4694      	mov	ip, r2
 801444a:	4463      	add	r3, ip
 801444c:	21b0      	movs	r1, #176	; 0xb0
 801444e:	187a      	adds	r2, r7, r1
 8014450:	6013      	str	r3, [r2, #0]
 8014452:	683b      	ldr	r3, [r7, #0]
 8014454:	691b      	ldr	r3, [r3, #16]
 8014456:	b29a      	uxth	r2, r3
 8014458:	187b      	adds	r3, r7, r1
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	801a      	strh	r2, [r3, #0]
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	22a4      	movs	r2, #164	; 0xa4
 8014462:	18ba      	adds	r2, r7, r2
 8014464:	6013      	str	r3, [r2, #0]
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	785b      	ldrb	r3, [r3, #1]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d16f      	bne.n	801454e <USB_EPStartXfer+0xd66>
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	219c      	movs	r1, #156	; 0x9c
 8014472:	187a      	adds	r2, r7, r1
 8014474:	6013      	str	r3, [r2, #0]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2250      	movs	r2, #80	; 0x50
 801447a:	5a9b      	ldrh	r3, [r3, r2]
 801447c:	b29b      	uxth	r3, r3
 801447e:	001a      	movs	r2, r3
 8014480:	187b      	adds	r3, r7, r1
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	189b      	adds	r3, r3, r2
 8014486:	187a      	adds	r2, r7, r1
 8014488:	6013      	str	r3, [r2, #0]
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	00da      	lsls	r2, r3, #3
 8014490:	187b      	adds	r3, r7, r1
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	18d3      	adds	r3, r2, r3
 8014496:	4a6d      	ldr	r2, [pc, #436]	; (801464c <USB_EPStartXfer+0xe64>)
 8014498:	4694      	mov	ip, r2
 801449a:	4463      	add	r3, ip
 801449c:	2198      	movs	r1, #152	; 0x98
 801449e:	187a      	adds	r2, r7, r1
 80144a0:	6013      	str	r3, [r2, #0]
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	691b      	ldr	r3, [r3, #16]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d114      	bne.n	80144d4 <USB_EPStartXfer+0xcec>
 80144aa:	187b      	adds	r3, r7, r1
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	881b      	ldrh	r3, [r3, #0]
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	4a65      	ldr	r2, [pc, #404]	; (8014648 <USB_EPStartXfer+0xe60>)
 80144b4:	4013      	ands	r3, r2
 80144b6:	b29a      	uxth	r2, r3
 80144b8:	187b      	adds	r3, r7, r1
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	801a      	strh	r2, [r3, #0]
 80144be:	187b      	adds	r3, r7, r1
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	881b      	ldrh	r3, [r3, #0]
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	4a5e      	ldr	r2, [pc, #376]	; (8014640 <USB_EPStartXfer+0xe58>)
 80144c8:	4313      	orrs	r3, r2
 80144ca:	b29a      	uxth	r2, r3
 80144cc:	187b      	adds	r3, r7, r1
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	801a      	strh	r2, [r3, #0]
 80144d2:	e05d      	b.n	8014590 <USB_EPStartXfer+0xda8>
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	691b      	ldr	r3, [r3, #16]
 80144d8:	2b3e      	cmp	r3, #62	; 0x3e
 80144da:	d81a      	bhi.n	8014512 <USB_EPStartXfer+0xd2a>
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	691b      	ldr	r3, [r3, #16]
 80144e0:	085b      	lsrs	r3, r3, #1
 80144e2:	21e0      	movs	r1, #224	; 0xe0
 80144e4:	187a      	adds	r2, r7, r1
 80144e6:	6013      	str	r3, [r2, #0]
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	691b      	ldr	r3, [r3, #16]
 80144ec:	2201      	movs	r2, #1
 80144ee:	4013      	ands	r3, r2
 80144f0:	d004      	beq.n	80144fc <USB_EPStartXfer+0xd14>
 80144f2:	187b      	adds	r3, r7, r1
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	3301      	adds	r3, #1
 80144f8:	187a      	adds	r2, r7, r1
 80144fa:	6013      	str	r3, [r2, #0]
 80144fc:	23e0      	movs	r3, #224	; 0xe0
 80144fe:	18fb      	adds	r3, r7, r3
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	b29b      	uxth	r3, r3
 8014504:	029b      	lsls	r3, r3, #10
 8014506:	b29a      	uxth	r2, r3
 8014508:	2398      	movs	r3, #152	; 0x98
 801450a:	18fb      	adds	r3, r7, r3
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	801a      	strh	r2, [r3, #0]
 8014510:	e03e      	b.n	8014590 <USB_EPStartXfer+0xda8>
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	691b      	ldr	r3, [r3, #16]
 8014516:	095b      	lsrs	r3, r3, #5
 8014518:	21e0      	movs	r1, #224	; 0xe0
 801451a:	187a      	adds	r2, r7, r1
 801451c:	6013      	str	r3, [r2, #0]
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	691b      	ldr	r3, [r3, #16]
 8014522:	221f      	movs	r2, #31
 8014524:	4013      	ands	r3, r2
 8014526:	d104      	bne.n	8014532 <USB_EPStartXfer+0xd4a>
 8014528:	187b      	adds	r3, r7, r1
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	3b01      	subs	r3, #1
 801452e:	187a      	adds	r2, r7, r1
 8014530:	6013      	str	r3, [r2, #0]
 8014532:	23e0      	movs	r3, #224	; 0xe0
 8014534:	18fb      	adds	r3, r7, r3
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	b29b      	uxth	r3, r3
 801453a:	029b      	lsls	r3, r3, #10
 801453c:	b29b      	uxth	r3, r3
 801453e:	4a40      	ldr	r2, [pc, #256]	; (8014640 <USB_EPStartXfer+0xe58>)
 8014540:	4313      	orrs	r3, r2
 8014542:	b29a      	uxth	r2, r3
 8014544:	2398      	movs	r3, #152	; 0x98
 8014546:	18fb      	adds	r3, r7, r3
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	801a      	strh	r2, [r3, #0]
 801454c:	e020      	b.n	8014590 <USB_EPStartXfer+0xda8>
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	785b      	ldrb	r3, [r3, #1]
 8014552:	2b01      	cmp	r3, #1
 8014554:	d11c      	bne.n	8014590 <USB_EPStartXfer+0xda8>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2250      	movs	r2, #80	; 0x50
 801455a:	5a9b      	ldrh	r3, [r3, r2]
 801455c:	b29b      	uxth	r3, r3
 801455e:	001a      	movs	r2, r3
 8014560:	21a4      	movs	r1, #164	; 0xa4
 8014562:	187b      	adds	r3, r7, r1
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	189b      	adds	r3, r3, r2
 8014568:	187a      	adds	r2, r7, r1
 801456a:	6013      	str	r3, [r2, #0]
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	781b      	ldrb	r3, [r3, #0]
 8014570:	00da      	lsls	r2, r3, #3
 8014572:	187b      	adds	r3, r7, r1
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	18d3      	adds	r3, r2, r3
 8014578:	4a34      	ldr	r2, [pc, #208]	; (801464c <USB_EPStartXfer+0xe64>)
 801457a:	4694      	mov	ip, r2
 801457c:	4463      	add	r3, ip
 801457e:	21a0      	movs	r1, #160	; 0xa0
 8014580:	187a      	adds	r2, r7, r1
 8014582:	6013      	str	r3, [r2, #0]
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	691b      	ldr	r3, [r3, #16]
 8014588:	b29a      	uxth	r2, r3
 801458a:	187b      	adds	r3, r7, r1
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	69db      	ldr	r3, [r3, #28]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d100      	bne.n	801459a <USB_EPStartXfer+0xdb2>
 8014598:	e1aa      	b.n	80148f0 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801459a:	687a      	ldr	r2, [r7, #4]
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	18d2      	adds	r2, r2, r3
 80145a4:	2196      	movs	r1, #150	; 0x96
 80145a6:	187b      	adds	r3, r7, r1
 80145a8:	8812      	ldrh	r2, [r2, #0]
 80145aa:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80145ac:	187b      	adds	r3, r7, r1
 80145ae:	881a      	ldrh	r2, [r3, #0]
 80145b0:	2380      	movs	r3, #128	; 0x80
 80145b2:	01db      	lsls	r3, r3, #7
 80145b4:	4013      	ands	r3, r2
 80145b6:	d004      	beq.n	80145c2 <USB_EPStartXfer+0xdda>
 80145b8:	187b      	adds	r3, r7, r1
 80145ba:	881b      	ldrh	r3, [r3, #0]
 80145bc:	2240      	movs	r2, #64	; 0x40
 80145be:	4013      	ands	r3, r2
 80145c0:	d10d      	bne.n	80145de <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80145c2:	2196      	movs	r1, #150	; 0x96
 80145c4:	187b      	adds	r3, r7, r1
 80145c6:	881a      	ldrh	r2, [r3, #0]
 80145c8:	2380      	movs	r3, #128	; 0x80
 80145ca:	01db      	lsls	r3, r3, #7
 80145cc:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80145ce:	d000      	beq.n	80145d2 <USB_EPStartXfer+0xdea>
 80145d0:	e18e      	b.n	80148f0 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80145d2:	187b      	adds	r3, r7, r1
 80145d4:	881b      	ldrh	r3, [r3, #0]
 80145d6:	2240      	movs	r2, #64	; 0x40
 80145d8:	4013      	ands	r3, r2
 80145da:	d000      	beq.n	80145de <USB_EPStartXfer+0xdf6>
 80145dc:	e188      	b.n	80148f0 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	781b      	ldrb	r3, [r3, #0]
 80145e4:	009b      	lsls	r3, r3, #2
 80145e6:	18d3      	adds	r3, r2, r3
 80145e8:	881b      	ldrh	r3, [r3, #0]
 80145ea:	b29a      	uxth	r2, r3
 80145ec:	2094      	movs	r0, #148	; 0x94
 80145ee:	183b      	adds	r3, r7, r0
 80145f0:	4917      	ldr	r1, [pc, #92]	; (8014650 <USB_EPStartXfer+0xe68>)
 80145f2:	400a      	ands	r2, r1
 80145f4:	801a      	strh	r2, [r3, #0]
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	009b      	lsls	r3, r3, #2
 80145fe:	18d3      	adds	r3, r2, r3
 8014600:	183a      	adds	r2, r7, r0
 8014602:	8812      	ldrh	r2, [r2, #0]
 8014604:	4913      	ldr	r1, [pc, #76]	; (8014654 <USB_EPStartXfer+0xe6c>)
 8014606:	430a      	orrs	r2, r1
 8014608:	b292      	uxth	r2, r2
 801460a:	801a      	strh	r2, [r3, #0]
 801460c:	e170      	b.n	80148f0 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801460e:	683b      	ldr	r3, [r7, #0]
 8014610:	78db      	ldrb	r3, [r3, #3]
 8014612:	2b01      	cmp	r3, #1
 8014614:	d000      	beq.n	8014618 <USB_EPStartXfer+0xe30>
 8014616:	e169      	b.n	80148ec <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	699a      	ldr	r2, [r3, #24]
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	691b      	ldr	r3, [r3, #16]
 8014620:	429a      	cmp	r2, r3
 8014622:	d919      	bls.n	8014658 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	691b      	ldr	r3, [r3, #16]
 8014628:	1d7a      	adds	r2, r7, #5
 801462a:	32ff      	adds	r2, #255	; 0xff
 801462c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	699a      	ldr	r2, [r3, #24]
 8014632:	1d7b      	adds	r3, r7, #5
 8014634:	33ff      	adds	r3, #255	; 0xff
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	1ad2      	subs	r2, r2, r3
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	619a      	str	r2, [r3, #24]
 801463e:	e013      	b.n	8014668 <USB_EPStartXfer+0xe80>
 8014640:	ffff8000 	.word	0xffff8000
 8014644:	00000402 	.word	0x00000402
 8014648:	ffff83ff 	.word	0xffff83ff
 801464c:	00000406 	.word	0x00000406
 8014650:	ffff8f8f 	.word	0xffff8f8f
 8014654:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8014658:	683b      	ldr	r3, [r7, #0]
 801465a:	699b      	ldr	r3, [r3, #24]
 801465c:	1d7a      	adds	r2, r7, #5
 801465e:	32ff      	adds	r2, #255	; 0xff
 8014660:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	2200      	movs	r2, #0
 8014666:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	785b      	ldrb	r3, [r3, #1]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d000      	beq.n	8014672 <USB_EPStartXfer+0xe8a>
 8014670:	e075      	b.n	801475e <USB_EPStartXfer+0xf76>
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	21cc      	movs	r1, #204	; 0xcc
 8014676:	187a      	adds	r2, r7, r1
 8014678:	6013      	str	r3, [r2, #0]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2250      	movs	r2, #80	; 0x50
 801467e:	5a9b      	ldrh	r3, [r3, r2]
 8014680:	b29b      	uxth	r3, r3
 8014682:	001a      	movs	r2, r3
 8014684:	187b      	adds	r3, r7, r1
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	189b      	adds	r3, r3, r2
 801468a:	187a      	adds	r2, r7, r1
 801468c:	6013      	str	r3, [r2, #0]
 801468e:	683b      	ldr	r3, [r7, #0]
 8014690:	781b      	ldrb	r3, [r3, #0]
 8014692:	00da      	lsls	r2, r3, #3
 8014694:	187b      	adds	r3, r7, r1
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	18d3      	adds	r3, r2, r3
 801469a:	4aaa      	ldr	r2, [pc, #680]	; (8014944 <USB_EPStartXfer+0x115c>)
 801469c:	4694      	mov	ip, r2
 801469e:	4463      	add	r3, ip
 80146a0:	21c8      	movs	r1, #200	; 0xc8
 80146a2:	187a      	adds	r2, r7, r1
 80146a4:	6013      	str	r3, [r2, #0]
 80146a6:	1d7b      	adds	r3, r7, #5
 80146a8:	33ff      	adds	r3, #255	; 0xff
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d114      	bne.n	80146da <USB_EPStartXfer+0xef2>
 80146b0:	187b      	adds	r3, r7, r1
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	881b      	ldrh	r3, [r3, #0]
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	4aa3      	ldr	r2, [pc, #652]	; (8014948 <USB_EPStartXfer+0x1160>)
 80146ba:	4013      	ands	r3, r2
 80146bc:	b29a      	uxth	r2, r3
 80146be:	187b      	adds	r3, r7, r1
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	801a      	strh	r2, [r3, #0]
 80146c4:	187b      	adds	r3, r7, r1
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	881b      	ldrh	r3, [r3, #0]
 80146ca:	b29b      	uxth	r3, r3
 80146cc:	4a9f      	ldr	r2, [pc, #636]	; (801494c <USB_EPStartXfer+0x1164>)
 80146ce:	4313      	orrs	r3, r2
 80146d0:	b29a      	uxth	r2, r3
 80146d2:	187b      	adds	r3, r7, r1
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	801a      	strh	r2, [r3, #0]
 80146d8:	e066      	b.n	80147a8 <USB_EPStartXfer+0xfc0>
 80146da:	1d7b      	adds	r3, r7, #5
 80146dc:	33ff      	adds	r3, #255	; 0xff
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b3e      	cmp	r3, #62	; 0x3e
 80146e2:	d81c      	bhi.n	801471e <USB_EPStartXfer+0xf36>
 80146e4:	1d7b      	adds	r3, r7, #5
 80146e6:	33ff      	adds	r3, #255	; 0xff
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	085b      	lsrs	r3, r3, #1
 80146ec:	21dc      	movs	r1, #220	; 0xdc
 80146ee:	187a      	adds	r2, r7, r1
 80146f0:	6013      	str	r3, [r2, #0]
 80146f2:	1d7b      	adds	r3, r7, #5
 80146f4:	33ff      	adds	r3, #255	; 0xff
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	2201      	movs	r2, #1
 80146fa:	4013      	ands	r3, r2
 80146fc:	d004      	beq.n	8014708 <USB_EPStartXfer+0xf20>
 80146fe:	187b      	adds	r3, r7, r1
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	3301      	adds	r3, #1
 8014704:	187a      	adds	r2, r7, r1
 8014706:	6013      	str	r3, [r2, #0]
 8014708:	23dc      	movs	r3, #220	; 0xdc
 801470a:	18fb      	adds	r3, r7, r3
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	b29b      	uxth	r3, r3
 8014710:	029b      	lsls	r3, r3, #10
 8014712:	b29a      	uxth	r2, r3
 8014714:	23c8      	movs	r3, #200	; 0xc8
 8014716:	18fb      	adds	r3, r7, r3
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	801a      	strh	r2, [r3, #0]
 801471c:	e044      	b.n	80147a8 <USB_EPStartXfer+0xfc0>
 801471e:	1d7b      	adds	r3, r7, #5
 8014720:	33ff      	adds	r3, #255	; 0xff
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	095b      	lsrs	r3, r3, #5
 8014726:	21dc      	movs	r1, #220	; 0xdc
 8014728:	187a      	adds	r2, r7, r1
 801472a:	6013      	str	r3, [r2, #0]
 801472c:	1d7b      	adds	r3, r7, #5
 801472e:	33ff      	adds	r3, #255	; 0xff
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	221f      	movs	r2, #31
 8014734:	4013      	ands	r3, r2
 8014736:	d104      	bne.n	8014742 <USB_EPStartXfer+0xf5a>
 8014738:	187b      	adds	r3, r7, r1
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	3b01      	subs	r3, #1
 801473e:	187a      	adds	r2, r7, r1
 8014740:	6013      	str	r3, [r2, #0]
 8014742:	23dc      	movs	r3, #220	; 0xdc
 8014744:	18fb      	adds	r3, r7, r3
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	b29b      	uxth	r3, r3
 801474a:	029b      	lsls	r3, r3, #10
 801474c:	b29b      	uxth	r3, r3
 801474e:	4a7f      	ldr	r2, [pc, #508]	; (801494c <USB_EPStartXfer+0x1164>)
 8014750:	4313      	orrs	r3, r2
 8014752:	b29a      	uxth	r2, r3
 8014754:	23c8      	movs	r3, #200	; 0xc8
 8014756:	18fb      	adds	r3, r7, r3
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	801a      	strh	r2, [r3, #0]
 801475c:	e024      	b.n	80147a8 <USB_EPStartXfer+0xfc0>
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	785b      	ldrb	r3, [r3, #1]
 8014762:	2b01      	cmp	r3, #1
 8014764:	d120      	bne.n	80147a8 <USB_EPStartXfer+0xfc0>
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	21d4      	movs	r1, #212	; 0xd4
 801476a:	187a      	adds	r2, r7, r1
 801476c:	6013      	str	r3, [r2, #0]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2250      	movs	r2, #80	; 0x50
 8014772:	5a9b      	ldrh	r3, [r3, r2]
 8014774:	b29b      	uxth	r3, r3
 8014776:	001a      	movs	r2, r3
 8014778:	187b      	adds	r3, r7, r1
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	189b      	adds	r3, r3, r2
 801477e:	187a      	adds	r2, r7, r1
 8014780:	6013      	str	r3, [r2, #0]
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	781b      	ldrb	r3, [r3, #0]
 8014786:	00da      	lsls	r2, r3, #3
 8014788:	187b      	adds	r3, r7, r1
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	18d3      	adds	r3, r2, r3
 801478e:	4a6d      	ldr	r2, [pc, #436]	; (8014944 <USB_EPStartXfer+0x115c>)
 8014790:	4694      	mov	ip, r2
 8014792:	4463      	add	r3, ip
 8014794:	21d0      	movs	r1, #208	; 0xd0
 8014796:	187a      	adds	r2, r7, r1
 8014798:	6013      	str	r3, [r2, #0]
 801479a:	1d7b      	adds	r3, r7, #5
 801479c:	33ff      	adds	r3, #255	; 0xff
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	b29a      	uxth	r2, r3
 80147a2:	187b      	adds	r3, r7, r1
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	801a      	strh	r2, [r3, #0]
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	22c4      	movs	r2, #196	; 0xc4
 80147ac:	18ba      	adds	r2, r7, r2
 80147ae:	6013      	str	r3, [r2, #0]
 80147b0:	683b      	ldr	r3, [r7, #0]
 80147b2:	785b      	ldrb	r3, [r3, #1]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d000      	beq.n	80147ba <USB_EPStartXfer+0xfd2>
 80147b8:	e075      	b.n	80148a6 <USB_EPStartXfer+0x10be>
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	21bc      	movs	r1, #188	; 0xbc
 80147be:	187a      	adds	r2, r7, r1
 80147c0:	6013      	str	r3, [r2, #0]
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	2250      	movs	r2, #80	; 0x50
 80147c6:	5a9b      	ldrh	r3, [r3, r2]
 80147c8:	b29b      	uxth	r3, r3
 80147ca:	001a      	movs	r2, r3
 80147cc:	187b      	adds	r3, r7, r1
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	189b      	adds	r3, r3, r2
 80147d2:	187a      	adds	r2, r7, r1
 80147d4:	6013      	str	r3, [r2, #0]
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	00da      	lsls	r2, r3, #3
 80147dc:	187b      	adds	r3, r7, r1
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	18d3      	adds	r3, r2, r3
 80147e2:	4a5b      	ldr	r2, [pc, #364]	; (8014950 <USB_EPStartXfer+0x1168>)
 80147e4:	4694      	mov	ip, r2
 80147e6:	4463      	add	r3, ip
 80147e8:	21b8      	movs	r1, #184	; 0xb8
 80147ea:	187a      	adds	r2, r7, r1
 80147ec:	6013      	str	r3, [r2, #0]
 80147ee:	1d7b      	adds	r3, r7, #5
 80147f0:	33ff      	adds	r3, #255	; 0xff
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d114      	bne.n	8014822 <USB_EPStartXfer+0x103a>
 80147f8:	187b      	adds	r3, r7, r1
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	881b      	ldrh	r3, [r3, #0]
 80147fe:	b29b      	uxth	r3, r3
 8014800:	4a51      	ldr	r2, [pc, #324]	; (8014948 <USB_EPStartXfer+0x1160>)
 8014802:	4013      	ands	r3, r2
 8014804:	b29a      	uxth	r2, r3
 8014806:	187b      	adds	r3, r7, r1
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	801a      	strh	r2, [r3, #0]
 801480c:	187b      	adds	r3, r7, r1
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	881b      	ldrh	r3, [r3, #0]
 8014812:	b29b      	uxth	r3, r3
 8014814:	4a4d      	ldr	r2, [pc, #308]	; (801494c <USB_EPStartXfer+0x1164>)
 8014816:	4313      	orrs	r3, r2
 8014818:	b29a      	uxth	r2, r3
 801481a:	187b      	adds	r3, r7, r1
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	801a      	strh	r2, [r3, #0]
 8014820:	e066      	b.n	80148f0 <USB_EPStartXfer+0x1108>
 8014822:	1d7b      	adds	r3, r7, #5
 8014824:	33ff      	adds	r3, #255	; 0xff
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	2b3e      	cmp	r3, #62	; 0x3e
 801482a:	d81c      	bhi.n	8014866 <USB_EPStartXfer+0x107e>
 801482c:	1d7b      	adds	r3, r7, #5
 801482e:	33ff      	adds	r3, #255	; 0xff
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	085b      	lsrs	r3, r3, #1
 8014834:	21d8      	movs	r1, #216	; 0xd8
 8014836:	187a      	adds	r2, r7, r1
 8014838:	6013      	str	r3, [r2, #0]
 801483a:	1d7b      	adds	r3, r7, #5
 801483c:	33ff      	adds	r3, #255	; 0xff
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	2201      	movs	r2, #1
 8014842:	4013      	ands	r3, r2
 8014844:	d004      	beq.n	8014850 <USB_EPStartXfer+0x1068>
 8014846:	187b      	adds	r3, r7, r1
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	3301      	adds	r3, #1
 801484c:	187a      	adds	r2, r7, r1
 801484e:	6013      	str	r3, [r2, #0]
 8014850:	23d8      	movs	r3, #216	; 0xd8
 8014852:	18fb      	adds	r3, r7, r3
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	b29b      	uxth	r3, r3
 8014858:	029b      	lsls	r3, r3, #10
 801485a:	b29a      	uxth	r2, r3
 801485c:	23b8      	movs	r3, #184	; 0xb8
 801485e:	18fb      	adds	r3, r7, r3
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	801a      	strh	r2, [r3, #0]
 8014864:	e044      	b.n	80148f0 <USB_EPStartXfer+0x1108>
 8014866:	1d7b      	adds	r3, r7, #5
 8014868:	33ff      	adds	r3, #255	; 0xff
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	095b      	lsrs	r3, r3, #5
 801486e:	21d8      	movs	r1, #216	; 0xd8
 8014870:	187a      	adds	r2, r7, r1
 8014872:	6013      	str	r3, [r2, #0]
 8014874:	1d7b      	adds	r3, r7, #5
 8014876:	33ff      	adds	r3, #255	; 0xff
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	221f      	movs	r2, #31
 801487c:	4013      	ands	r3, r2
 801487e:	d104      	bne.n	801488a <USB_EPStartXfer+0x10a2>
 8014880:	187b      	adds	r3, r7, r1
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	3b01      	subs	r3, #1
 8014886:	187a      	adds	r2, r7, r1
 8014888:	6013      	str	r3, [r2, #0]
 801488a:	23d8      	movs	r3, #216	; 0xd8
 801488c:	18fb      	adds	r3, r7, r3
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	b29b      	uxth	r3, r3
 8014892:	029b      	lsls	r3, r3, #10
 8014894:	b29b      	uxth	r3, r3
 8014896:	4a2d      	ldr	r2, [pc, #180]	; (801494c <USB_EPStartXfer+0x1164>)
 8014898:	4313      	orrs	r3, r2
 801489a:	b29a      	uxth	r2, r3
 801489c:	23b8      	movs	r3, #184	; 0xb8
 801489e:	18fb      	adds	r3, r7, r3
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	801a      	strh	r2, [r3, #0]
 80148a4:	e024      	b.n	80148f0 <USB_EPStartXfer+0x1108>
 80148a6:	683b      	ldr	r3, [r7, #0]
 80148a8:	785b      	ldrb	r3, [r3, #1]
 80148aa:	2b01      	cmp	r3, #1
 80148ac:	d120      	bne.n	80148f0 <USB_EPStartXfer+0x1108>
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2250      	movs	r2, #80	; 0x50
 80148b2:	5a9b      	ldrh	r3, [r3, r2]
 80148b4:	b29b      	uxth	r3, r3
 80148b6:	001a      	movs	r2, r3
 80148b8:	21c4      	movs	r1, #196	; 0xc4
 80148ba:	187b      	adds	r3, r7, r1
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	189b      	adds	r3, r3, r2
 80148c0:	187a      	adds	r2, r7, r1
 80148c2:	6013      	str	r3, [r2, #0]
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	00da      	lsls	r2, r3, #3
 80148ca:	187b      	adds	r3, r7, r1
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	18d3      	adds	r3, r2, r3
 80148d0:	4a1f      	ldr	r2, [pc, #124]	; (8014950 <USB_EPStartXfer+0x1168>)
 80148d2:	4694      	mov	ip, r2
 80148d4:	4463      	add	r3, ip
 80148d6:	21c0      	movs	r1, #192	; 0xc0
 80148d8:	187a      	adds	r2, r7, r1
 80148da:	6013      	str	r3, [r2, #0]
 80148dc:	1d7b      	adds	r3, r7, #5
 80148de:	33ff      	adds	r3, #255	; 0xff
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	b29a      	uxth	r2, r3
 80148e4:	187b      	adds	r3, r7, r1
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	801a      	strh	r2, [r3, #0]
 80148ea:	e001      	b.n	80148f0 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 80148ec:	2301      	movs	r3, #1
 80148ee:	e025      	b.n	801493c <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	009b      	lsls	r3, r3, #2
 80148f8:	18d3      	adds	r3, r2, r3
 80148fa:	881b      	ldrh	r3, [r3, #0]
 80148fc:	b29a      	uxth	r2, r3
 80148fe:	208a      	movs	r0, #138	; 0x8a
 8014900:	183b      	adds	r3, r7, r0
 8014902:	4914      	ldr	r1, [pc, #80]	; (8014954 <USB_EPStartXfer+0x116c>)
 8014904:	400a      	ands	r2, r1
 8014906:	801a      	strh	r2, [r3, #0]
 8014908:	183b      	adds	r3, r7, r0
 801490a:	183a      	adds	r2, r7, r0
 801490c:	8812      	ldrh	r2, [r2, #0]
 801490e:	2180      	movs	r1, #128	; 0x80
 8014910:	0149      	lsls	r1, r1, #5
 8014912:	404a      	eors	r2, r1
 8014914:	801a      	strh	r2, [r3, #0]
 8014916:	183b      	adds	r3, r7, r0
 8014918:	183a      	adds	r2, r7, r0
 801491a:	8812      	ldrh	r2, [r2, #0]
 801491c:	2180      	movs	r1, #128	; 0x80
 801491e:	0189      	lsls	r1, r1, #6
 8014920:	404a      	eors	r2, r1
 8014922:	801a      	strh	r2, [r3, #0]
 8014924:	687a      	ldr	r2, [r7, #4]
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	781b      	ldrb	r3, [r3, #0]
 801492a:	009b      	lsls	r3, r3, #2
 801492c:	18d3      	adds	r3, r2, r3
 801492e:	183a      	adds	r2, r7, r0
 8014930:	8812      	ldrh	r2, [r2, #0]
 8014932:	4909      	ldr	r1, [pc, #36]	; (8014958 <USB_EPStartXfer+0x1170>)
 8014934:	430a      	orrs	r2, r1
 8014936:	b292      	uxth	r2, r2
 8014938:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801493a:	2300      	movs	r3, #0
}
 801493c:	0018      	movs	r0, r3
 801493e:	46bd      	mov	sp, r7
 8014940:	b043      	add	sp, #268	; 0x10c
 8014942:	bd90      	pop	{r4, r7, pc}
 8014944:	00000402 	.word	0x00000402
 8014948:	ffff83ff 	.word	0xffff83ff
 801494c:	ffff8000 	.word	0xffff8000
 8014950:	00000406 	.word	0x00000406
 8014954:	ffffbf8f 	.word	0xffffbf8f
 8014958:	ffff8080 	.word	0xffff8080

0801495c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
 8014964:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	785b      	ldrb	r3, [r3, #1]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d01d      	beq.n	80149aa <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	009b      	lsls	r3, r3, #2
 8014976:	18d3      	adds	r3, r2, r3
 8014978:	881b      	ldrh	r3, [r3, #0]
 801497a:	b29a      	uxth	r2, r3
 801497c:	200c      	movs	r0, #12
 801497e:	183b      	adds	r3, r7, r0
 8014980:	491b      	ldr	r1, [pc, #108]	; (80149f0 <USB_EPSetStall+0x94>)
 8014982:	400a      	ands	r2, r1
 8014984:	801a      	strh	r2, [r3, #0]
 8014986:	183b      	adds	r3, r7, r0
 8014988:	183a      	adds	r2, r7, r0
 801498a:	8812      	ldrh	r2, [r2, #0]
 801498c:	2110      	movs	r1, #16
 801498e:	404a      	eors	r2, r1
 8014990:	801a      	strh	r2, [r3, #0]
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	009b      	lsls	r3, r3, #2
 801499a:	18d3      	adds	r3, r2, r3
 801499c:	183a      	adds	r2, r7, r0
 801499e:	8812      	ldrh	r2, [r2, #0]
 80149a0:	4914      	ldr	r1, [pc, #80]	; (80149f4 <USB_EPSetStall+0x98>)
 80149a2:	430a      	orrs	r2, r1
 80149a4:	b292      	uxth	r2, r2
 80149a6:	801a      	strh	r2, [r3, #0]
 80149a8:	e01d      	b.n	80149e6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80149aa:	687a      	ldr	r2, [r7, #4]
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	781b      	ldrb	r3, [r3, #0]
 80149b0:	009b      	lsls	r3, r3, #2
 80149b2:	18d3      	adds	r3, r2, r3
 80149b4:	881b      	ldrh	r3, [r3, #0]
 80149b6:	b29a      	uxth	r2, r3
 80149b8:	200e      	movs	r0, #14
 80149ba:	183b      	adds	r3, r7, r0
 80149bc:	490e      	ldr	r1, [pc, #56]	; (80149f8 <USB_EPSetStall+0x9c>)
 80149be:	400a      	ands	r2, r1
 80149c0:	801a      	strh	r2, [r3, #0]
 80149c2:	183b      	adds	r3, r7, r0
 80149c4:	183a      	adds	r2, r7, r0
 80149c6:	8812      	ldrh	r2, [r2, #0]
 80149c8:	2180      	movs	r1, #128	; 0x80
 80149ca:	0149      	lsls	r1, r1, #5
 80149cc:	404a      	eors	r2, r1
 80149ce:	801a      	strh	r2, [r3, #0]
 80149d0:	687a      	ldr	r2, [r7, #4]
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	781b      	ldrb	r3, [r3, #0]
 80149d6:	009b      	lsls	r3, r3, #2
 80149d8:	18d3      	adds	r3, r2, r3
 80149da:	183a      	adds	r2, r7, r0
 80149dc:	8812      	ldrh	r2, [r2, #0]
 80149de:	4905      	ldr	r1, [pc, #20]	; (80149f4 <USB_EPSetStall+0x98>)
 80149e0:	430a      	orrs	r2, r1
 80149e2:	b292      	uxth	r2, r2
 80149e4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80149e6:	2300      	movs	r3, #0
}
 80149e8:	0018      	movs	r0, r3
 80149ea:	46bd      	mov	sp, r7
 80149ec:	b004      	add	sp, #16
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	ffff8fbf 	.word	0xffff8fbf
 80149f4:	ffff8080 	.word	0xffff8080
 80149f8:	ffffbf8f 	.word	0xffffbf8f

080149fc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b086      	sub	sp, #24
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	7b1b      	ldrb	r3, [r3, #12]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d000      	beq.n	8014a10 <USB_EPClearStall+0x14>
 8014a0e:	e095      	b.n	8014b3c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	785b      	ldrb	r3, [r3, #1]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d046      	beq.n	8014aa6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014a18:	687a      	ldr	r2, [r7, #4]
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	009b      	lsls	r3, r3, #2
 8014a20:	18d2      	adds	r2, r2, r3
 8014a22:	2110      	movs	r1, #16
 8014a24:	187b      	adds	r3, r7, r1
 8014a26:	8812      	ldrh	r2, [r2, #0]
 8014a28:	801a      	strh	r2, [r3, #0]
 8014a2a:	187b      	adds	r3, r7, r1
 8014a2c:	881b      	ldrh	r3, [r3, #0]
 8014a2e:	2240      	movs	r2, #64	; 0x40
 8014a30:	4013      	ands	r3, r2
 8014a32:	d016      	beq.n	8014a62 <USB_EPClearStall+0x66>
 8014a34:	687a      	ldr	r2, [r7, #4]
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	009b      	lsls	r3, r3, #2
 8014a3c:	18d3      	adds	r3, r2, r3
 8014a3e:	881b      	ldrh	r3, [r3, #0]
 8014a40:	b29a      	uxth	r2, r3
 8014a42:	200e      	movs	r0, #14
 8014a44:	183b      	adds	r3, r7, r0
 8014a46:	4940      	ldr	r1, [pc, #256]	; (8014b48 <USB_EPClearStall+0x14c>)
 8014a48:	400a      	ands	r2, r1
 8014a4a:	801a      	strh	r2, [r3, #0]
 8014a4c:	687a      	ldr	r2, [r7, #4]
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	781b      	ldrb	r3, [r3, #0]
 8014a52:	009b      	lsls	r3, r3, #2
 8014a54:	18d3      	adds	r3, r2, r3
 8014a56:	183a      	adds	r2, r7, r0
 8014a58:	8812      	ldrh	r2, [r2, #0]
 8014a5a:	493c      	ldr	r1, [pc, #240]	; (8014b4c <USB_EPClearStall+0x150>)
 8014a5c:	430a      	orrs	r2, r1
 8014a5e:	b292      	uxth	r2, r2
 8014a60:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	78db      	ldrb	r3, [r3, #3]
 8014a66:	2b01      	cmp	r3, #1
 8014a68:	d068      	beq.n	8014b3c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014a6a:	687a      	ldr	r2, [r7, #4]
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	781b      	ldrb	r3, [r3, #0]
 8014a70:	009b      	lsls	r3, r3, #2
 8014a72:	18d3      	adds	r3, r2, r3
 8014a74:	881b      	ldrh	r3, [r3, #0]
 8014a76:	b29a      	uxth	r2, r3
 8014a78:	200c      	movs	r0, #12
 8014a7a:	183b      	adds	r3, r7, r0
 8014a7c:	4934      	ldr	r1, [pc, #208]	; (8014b50 <USB_EPClearStall+0x154>)
 8014a7e:	400a      	ands	r2, r1
 8014a80:	801a      	strh	r2, [r3, #0]
 8014a82:	183b      	adds	r3, r7, r0
 8014a84:	183a      	adds	r2, r7, r0
 8014a86:	8812      	ldrh	r2, [r2, #0]
 8014a88:	2120      	movs	r1, #32
 8014a8a:	404a      	eors	r2, r1
 8014a8c:	801a      	strh	r2, [r3, #0]
 8014a8e:	687a      	ldr	r2, [r7, #4]
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	781b      	ldrb	r3, [r3, #0]
 8014a94:	009b      	lsls	r3, r3, #2
 8014a96:	18d3      	adds	r3, r2, r3
 8014a98:	183a      	adds	r2, r7, r0
 8014a9a:	8812      	ldrh	r2, [r2, #0]
 8014a9c:	492d      	ldr	r1, [pc, #180]	; (8014b54 <USB_EPClearStall+0x158>)
 8014a9e:	430a      	orrs	r2, r1
 8014aa0:	b292      	uxth	r2, r2
 8014aa2:	801a      	strh	r2, [r3, #0]
 8014aa4:	e04a      	b.n	8014b3c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014aa6:	687a      	ldr	r2, [r7, #4]
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	009b      	lsls	r3, r3, #2
 8014aae:	18d2      	adds	r2, r2, r3
 8014ab0:	2116      	movs	r1, #22
 8014ab2:	187b      	adds	r3, r7, r1
 8014ab4:	8812      	ldrh	r2, [r2, #0]
 8014ab6:	801a      	strh	r2, [r3, #0]
 8014ab8:	187b      	adds	r3, r7, r1
 8014aba:	881a      	ldrh	r2, [r3, #0]
 8014abc:	2380      	movs	r3, #128	; 0x80
 8014abe:	01db      	lsls	r3, r3, #7
 8014ac0:	4013      	ands	r3, r2
 8014ac2:	d016      	beq.n	8014af2 <USB_EPClearStall+0xf6>
 8014ac4:	687a      	ldr	r2, [r7, #4]
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	18d3      	adds	r3, r2, r3
 8014ace:	881b      	ldrh	r3, [r3, #0]
 8014ad0:	b29a      	uxth	r2, r3
 8014ad2:	2014      	movs	r0, #20
 8014ad4:	183b      	adds	r3, r7, r0
 8014ad6:	491c      	ldr	r1, [pc, #112]	; (8014b48 <USB_EPClearStall+0x14c>)
 8014ad8:	400a      	ands	r2, r1
 8014ada:	801a      	strh	r2, [r3, #0]
 8014adc:	687a      	ldr	r2, [r7, #4]
 8014ade:	683b      	ldr	r3, [r7, #0]
 8014ae0:	781b      	ldrb	r3, [r3, #0]
 8014ae2:	009b      	lsls	r3, r3, #2
 8014ae4:	18d3      	adds	r3, r2, r3
 8014ae6:	183a      	adds	r2, r7, r0
 8014ae8:	8812      	ldrh	r2, [r2, #0]
 8014aea:	491b      	ldr	r1, [pc, #108]	; (8014b58 <USB_EPClearStall+0x15c>)
 8014aec:	430a      	orrs	r2, r1
 8014aee:	b292      	uxth	r2, r2
 8014af0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	009b      	lsls	r3, r3, #2
 8014afa:	18d3      	adds	r3, r2, r3
 8014afc:	881b      	ldrh	r3, [r3, #0]
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	2012      	movs	r0, #18
 8014b02:	183b      	adds	r3, r7, r0
 8014b04:	4915      	ldr	r1, [pc, #84]	; (8014b5c <USB_EPClearStall+0x160>)
 8014b06:	400a      	ands	r2, r1
 8014b08:	801a      	strh	r2, [r3, #0]
 8014b0a:	183b      	adds	r3, r7, r0
 8014b0c:	183a      	adds	r2, r7, r0
 8014b0e:	8812      	ldrh	r2, [r2, #0]
 8014b10:	2180      	movs	r1, #128	; 0x80
 8014b12:	0149      	lsls	r1, r1, #5
 8014b14:	404a      	eors	r2, r1
 8014b16:	801a      	strh	r2, [r3, #0]
 8014b18:	183b      	adds	r3, r7, r0
 8014b1a:	183a      	adds	r2, r7, r0
 8014b1c:	8812      	ldrh	r2, [r2, #0]
 8014b1e:	2180      	movs	r1, #128	; 0x80
 8014b20:	0189      	lsls	r1, r1, #6
 8014b22:	404a      	eors	r2, r1
 8014b24:	801a      	strh	r2, [r3, #0]
 8014b26:	687a      	ldr	r2, [r7, #4]
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	781b      	ldrb	r3, [r3, #0]
 8014b2c:	009b      	lsls	r3, r3, #2
 8014b2e:	18d3      	adds	r3, r2, r3
 8014b30:	183a      	adds	r2, r7, r0
 8014b32:	8812      	ldrh	r2, [r2, #0]
 8014b34:	4907      	ldr	r1, [pc, #28]	; (8014b54 <USB_EPClearStall+0x158>)
 8014b36:	430a      	orrs	r2, r1
 8014b38:	b292      	uxth	r2, r2
 8014b3a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8014b3c:	2300      	movs	r3, #0
}
 8014b3e:	0018      	movs	r0, r3
 8014b40:	46bd      	mov	sp, r7
 8014b42:	b006      	add	sp, #24
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	46c0      	nop			; (mov r8, r8)
 8014b48:	ffff8f8f 	.word	0xffff8f8f
 8014b4c:	ffff80c0 	.word	0xffff80c0
 8014b50:	ffff8fbf 	.word	0xffff8fbf
 8014b54:	ffff8080 	.word	0xffff8080
 8014b58:	ffffc080 	.word	0xffffc080
 8014b5c:	ffffbf8f 	.word	0xffffbf8f

08014b60 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
 8014b68:	000a      	movs	r2, r1
 8014b6a:	1cfb      	adds	r3, r7, #3
 8014b6c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8014b6e:	1cfb      	adds	r3, r7, #3
 8014b70:	781b      	ldrb	r3, [r3, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d103      	bne.n	8014b7e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	224c      	movs	r2, #76	; 0x4c
 8014b7a:	2180      	movs	r1, #128	; 0x80
 8014b7c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8014b7e:	2300      	movs	r3, #0
}
 8014b80:	0018      	movs	r0, r3
 8014b82:	46bd      	mov	sp, r7
 8014b84:	b002      	add	sp, #8
 8014b86:	bd80      	pop	{r7, pc}

08014b88 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2258      	movs	r2, #88	; 0x58
 8014b94:	5a9b      	ldrh	r3, [r3, r2]
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	4a05      	ldr	r2, [pc, #20]	; (8014bb0 <USB_DevConnect+0x28>)
 8014b9a:	4313      	orrs	r3, r2
 8014b9c:	b299      	uxth	r1, r3
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	2258      	movs	r2, #88	; 0x58
 8014ba2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014ba4:	2300      	movs	r3, #0
}
 8014ba6:	0018      	movs	r0, r3
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	b002      	add	sp, #8
 8014bac:	bd80      	pop	{r7, pc}
 8014bae:	46c0      	nop			; (mov r8, r8)
 8014bb0:	ffff8000 	.word	0xffff8000

08014bb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b084      	sub	sp, #16
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2244      	movs	r2, #68	; 0x44
 8014bc0:	5a9b      	ldrh	r3, [r3, r2]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8014bc6:	68fb      	ldr	r3, [r7, #12]
}
 8014bc8:	0018      	movs	r0, r3
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	b004      	add	sp, #16
 8014bce:	bd80      	pop	{r7, pc}

08014bd0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b08c      	sub	sp, #48	; 0x30
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	60f8      	str	r0, [r7, #12]
 8014bd8:	60b9      	str	r1, [r7, #8]
 8014bda:	0019      	movs	r1, r3
 8014bdc:	1dbb      	adds	r3, r7, #6
 8014bde:	801a      	strh	r2, [r3, #0]
 8014be0:	1d3b      	adds	r3, r7, #4
 8014be2:	1c0a      	adds	r2, r1, #0
 8014be4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8014be6:	1d3b      	adds	r3, r7, #4
 8014be8:	881b      	ldrh	r3, [r3, #0]
 8014bea:	3301      	adds	r3, #1
 8014bec:	085b      	lsrs	r3, r3, #1
 8014bee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014bf8:	1dbb      	adds	r3, r7, #6
 8014bfa:	881a      	ldrh	r2, [r3, #0]
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	18d3      	adds	r3, r2, r3
 8014c00:	2280      	movs	r2, #128	; 0x80
 8014c02:	00d2      	lsls	r2, r2, #3
 8014c04:	4694      	mov	ip, r2
 8014c06:	4463      	add	r3, ip
 8014c08:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8014c0a:	6a3b      	ldr	r3, [r7, #32]
 8014c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c0e:	e01b      	b.n	8014c48 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8014c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8014c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c18:	3301      	adds	r3, #1
 8014c1a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8014c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	021b      	lsls	r3, r3, #8
 8014c24:	b29b      	uxth	r3, r3
 8014c26:	001a      	movs	r2, r3
 8014c28:	69bb      	ldr	r3, [r7, #24]
 8014c2a:	4313      	orrs	r3, r2
 8014c2c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	b29a      	uxth	r2, r3
 8014c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c34:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8014c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c38:	3302      	adds	r3, #2
 8014c3a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8014c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3e:	3301      	adds	r3, #1
 8014c40:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8014c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c44:	3b01      	subs	r3, #1
 8014c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d1e0      	bne.n	8014c10 <USB_WritePMA+0x40>
  }
}
 8014c4e:	46c0      	nop			; (mov r8, r8)
 8014c50:	46c0      	nop			; (mov r8, r8)
 8014c52:	46bd      	mov	sp, r7
 8014c54:	b00c      	add	sp, #48	; 0x30
 8014c56:	bd80      	pop	{r7, pc}

08014c58 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b08a      	sub	sp, #40	; 0x28
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	60b9      	str	r1, [r7, #8]
 8014c62:	0019      	movs	r1, r3
 8014c64:	1dbb      	adds	r3, r7, #6
 8014c66:	801a      	strh	r2, [r3, #0]
 8014c68:	1d3b      	adds	r3, r7, #4
 8014c6a:	1c0a      	adds	r2, r1, #0
 8014c6c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8014c6e:	1d3b      	adds	r3, r7, #4
 8014c70:	881b      	ldrh	r3, [r3, #0]
 8014c72:	085b      	lsrs	r3, r3, #1
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014c80:	1dbb      	adds	r3, r7, #6
 8014c82:	881a      	ldrh	r2, [r3, #0]
 8014c84:	697b      	ldr	r3, [r7, #20]
 8014c86:	18d3      	adds	r3, r2, r3
 8014c88:	2280      	movs	r2, #128	; 0x80
 8014c8a:	00d2      	lsls	r2, r2, #3
 8014c8c:	4694      	mov	ip, r2
 8014c8e:	4463      	add	r3, ip
 8014c90:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8014c92:	69bb      	ldr	r3, [r7, #24]
 8014c94:	627b      	str	r3, [r7, #36]	; 0x24
 8014c96:	e018      	b.n	8014cca <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8014c98:	6a3b      	ldr	r3, [r7, #32]
 8014c9a:	881b      	ldrh	r3, [r3, #0]
 8014c9c:	b29b      	uxth	r3, r3
 8014c9e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8014ca0:	6a3b      	ldr	r3, [r7, #32]
 8014ca2:	3302      	adds	r3, #2
 8014ca4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8014ca6:	693b      	ldr	r3, [r7, #16]
 8014ca8:	b2da      	uxtb	r2, r3
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014cae:	69fb      	ldr	r3, [r7, #28]
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	0a1b      	lsrs	r3, r3, #8
 8014cb8:	b2da      	uxtb	r2, r3
 8014cba:	69fb      	ldr	r3, [r7, #28]
 8014cbc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014cbe:	69fb      	ldr	r3, [r7, #28]
 8014cc0:	3301      	adds	r3, #1
 8014cc2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc6:	3b01      	subs	r3, #1
 8014cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8014cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d1e3      	bne.n	8014c98 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8014cd0:	1d3b      	adds	r3, r7, #4
 8014cd2:	881b      	ldrh	r3, [r3, #0]
 8014cd4:	2201      	movs	r2, #1
 8014cd6:	4013      	ands	r3, r2
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d007      	beq.n	8014cee <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8014cde:	6a3b      	ldr	r3, [r7, #32]
 8014ce0:	881b      	ldrh	r3, [r3, #0]
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	b2da      	uxtb	r2, r3
 8014cea:	69fb      	ldr	r3, [r7, #28]
 8014cec:	701a      	strb	r2, [r3, #0]
  }
}
 8014cee:	46c0      	nop			; (mov r8, r8)
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	b00a      	add	sp, #40	; 0x28
 8014cf4:	bd80      	pop	{r7, pc}

08014cf6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014cf6:	b580      	push	{r7, lr}
 8014cf8:	b084      	sub	sp, #16
 8014cfa:	af00      	add	r7, sp, #0
 8014cfc:	6078      	str	r0, [r7, #4]
 8014cfe:	000a      	movs	r2, r1
 8014d00:	1cfb      	adds	r3, r7, #3
 8014d02:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014d04:	230f      	movs	r3, #15
 8014d06:	18fb      	adds	r3, r7, r3
 8014d08:	2200      	movs	r2, #0
 8014d0a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	7c1b      	ldrb	r3, [r3, #16]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d116      	bne.n	8014d42 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014d14:	2380      	movs	r3, #128	; 0x80
 8014d16:	009b      	lsls	r3, r3, #2
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	2202      	movs	r2, #2
 8014d1c:	2181      	movs	r1, #129	; 0x81
 8014d1e:	f003 f8ea 	bl	8017ef6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2201      	movs	r2, #1
 8014d26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014d28:	2380      	movs	r3, #128	; 0x80
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	6878      	ldr	r0, [r7, #4]
 8014d2e:	2202      	movs	r2, #2
 8014d30:	2101      	movs	r1, #1
 8014d32:	f003 f8e0 	bl	8017ef6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014d36:	687a      	ldr	r2, [r7, #4]
 8014d38:	23b6      	movs	r3, #182	; 0xb6
 8014d3a:	005b      	lsls	r3, r3, #1
 8014d3c:	2101      	movs	r1, #1
 8014d3e:	50d1      	str	r1, [r2, r3]
 8014d40:	e013      	b.n	8014d6a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	2340      	movs	r3, #64	; 0x40
 8014d46:	2202      	movs	r2, #2
 8014d48:	2181      	movs	r1, #129	; 0x81
 8014d4a:	f003 f8d4 	bl	8017ef6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	2201      	movs	r2, #1
 8014d52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	2340      	movs	r3, #64	; 0x40
 8014d58:	2202      	movs	r2, #2
 8014d5a:	2101      	movs	r1, #1
 8014d5c:	f003 f8cb 	bl	8017ef6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014d60:	687a      	ldr	r2, [r7, #4]
 8014d62:	23b6      	movs	r3, #182	; 0xb6
 8014d64:	005b      	lsls	r3, r3, #1
 8014d66:	2101      	movs	r1, #1
 8014d68:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	2308      	movs	r3, #8
 8014d6e:	2203      	movs	r2, #3
 8014d70:	2182      	movs	r1, #130	; 0x82
 8014d72:	f003 f8c0 	bl	8017ef6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2201      	movs	r2, #1
 8014d7a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014d7c:	2387      	movs	r3, #135	; 0x87
 8014d7e:	009b      	lsls	r3, r3, #2
 8014d80:	0018      	movs	r0, r3
 8014d82:	f003 fa51 	bl	8018228 <USBD_static_malloc>
 8014d86:	0001      	movs	r1, r0
 8014d88:	687a      	ldr	r2, [r7, #4]
 8014d8a:	23ae      	movs	r3, #174	; 0xae
 8014d8c:	009b      	lsls	r3, r3, #2
 8014d8e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	23ae      	movs	r3, #174	; 0xae
 8014d94:	009b      	lsls	r3, r3, #2
 8014d96:	58d3      	ldr	r3, [r2, r3]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d104      	bne.n	8014da6 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8014d9c:	230f      	movs	r3, #15
 8014d9e:	18fb      	adds	r3, r7, r3
 8014da0:	2201      	movs	r2, #1
 8014da2:	701a      	strb	r2, [r3, #0]
 8014da4:	e02c      	b.n	8014e00 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014da6:	687a      	ldr	r2, [r7, #4]
 8014da8:	23ae      	movs	r3, #174	; 0xae
 8014daa:	009b      	lsls	r3, r3, #2
 8014dac:	58d3      	ldr	r3, [r2, r3]
 8014dae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014db0:	687a      	ldr	r2, [r7, #4]
 8014db2:	23af      	movs	r3, #175	; 0xaf
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	58d3      	ldr	r3, [r2, r3]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8014dbc:	68ba      	ldr	r2, [r7, #8]
 8014dbe:	2385      	movs	r3, #133	; 0x85
 8014dc0:	009b      	lsls	r3, r3, #2
 8014dc2:	2100      	movs	r1, #0
 8014dc4:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8014dc6:	68ba      	ldr	r2, [r7, #8]
 8014dc8:	2386      	movs	r3, #134	; 0x86
 8014dca:	009b      	lsls	r3, r3, #2
 8014dcc:	2100      	movs	r1, #0
 8014dce:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	7c1b      	ldrb	r3, [r3, #16]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d10a      	bne.n	8014dee <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014dd8:	68ba      	ldr	r2, [r7, #8]
 8014dda:	2381      	movs	r3, #129	; 0x81
 8014ddc:	009b      	lsls	r3, r3, #2
 8014dde:	58d2      	ldr	r2, [r2, r3]
 8014de0:	2380      	movs	r3, #128	; 0x80
 8014de2:	009b      	lsls	r3, r3, #2
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	2101      	movs	r1, #1
 8014de8:	f003 f9d0 	bl	801818c <USBD_LL_PrepareReceive>
 8014dec:	e008      	b.n	8014e00 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014dee:	68ba      	ldr	r2, [r7, #8]
 8014df0:	2381      	movs	r3, #129	; 0x81
 8014df2:	009b      	lsls	r3, r3, #2
 8014df4:	58d2      	ldr	r2, [r2, r3]
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	2340      	movs	r3, #64	; 0x40
 8014dfa:	2101      	movs	r1, #1
 8014dfc:	f003 f9c6 	bl	801818c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8014e00:	230f      	movs	r3, #15
 8014e02:	18fb      	adds	r3, r7, r3
 8014e04:	781b      	ldrb	r3, [r3, #0]
}
 8014e06:	0018      	movs	r0, r3
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	b004      	add	sp, #16
 8014e0c:	bd80      	pop	{r7, pc}

08014e0e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014e0e:	b580      	push	{r7, lr}
 8014e10:	b084      	sub	sp, #16
 8014e12:	af00      	add	r7, sp, #0
 8014e14:	6078      	str	r0, [r7, #4]
 8014e16:	000a      	movs	r2, r1
 8014e18:	1cfb      	adds	r3, r7, #3
 8014e1a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014e1c:	230f      	movs	r3, #15
 8014e1e:	18fb      	adds	r3, r7, r3
 8014e20:	2200      	movs	r2, #0
 8014e22:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	2181      	movs	r1, #129	; 0x81
 8014e28:	0018      	movs	r0, r3
 8014e2a:	f003 f89b 	bl	8017f64 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2200      	movs	r2, #0
 8014e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	2101      	movs	r1, #1
 8014e38:	0018      	movs	r0, r3
 8014e3a:	f003 f893 	bl	8017f64 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	23b6      	movs	r3, #182	; 0xb6
 8014e42:	005b      	lsls	r3, r3, #1
 8014e44:	2100      	movs	r1, #0
 8014e46:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2182      	movs	r1, #130	; 0x82
 8014e4c:	0018      	movs	r0, r3
 8014e4e:	f003 f889 	bl	8017f64 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2200      	movs	r2, #0
 8014e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014e58:	687a      	ldr	r2, [r7, #4]
 8014e5a:	23ae      	movs	r3, #174	; 0xae
 8014e5c:	009b      	lsls	r3, r3, #2
 8014e5e:	58d3      	ldr	r3, [r2, r3]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d011      	beq.n	8014e88 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	23af      	movs	r3, #175	; 0xaf
 8014e68:	009b      	lsls	r3, r3, #2
 8014e6a:	58d3      	ldr	r3, [r2, r3]
 8014e6c:	685b      	ldr	r3, [r3, #4]
 8014e6e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8014e70:	687a      	ldr	r2, [r7, #4]
 8014e72:	23ae      	movs	r3, #174	; 0xae
 8014e74:	009b      	lsls	r3, r3, #2
 8014e76:	58d3      	ldr	r3, [r2, r3]
 8014e78:	0018      	movs	r0, r3
 8014e7a:	f003 f9e1 	bl	8018240 <USBD_static_free>
    pdev->pClassData = NULL;
 8014e7e:	687a      	ldr	r2, [r7, #4]
 8014e80:	23ae      	movs	r3, #174	; 0xae
 8014e82:	009b      	lsls	r3, r3, #2
 8014e84:	2100      	movs	r1, #0
 8014e86:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8014e88:	230f      	movs	r3, #15
 8014e8a:	18fb      	adds	r3, r7, r3
 8014e8c:	781b      	ldrb	r3, [r3, #0]
}
 8014e8e:	0018      	movs	r0, r3
 8014e90:	46bd      	mov	sp, r7
 8014e92:	b004      	add	sp, #16
 8014e94:	bd80      	pop	{r7, pc}
	...

08014e98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b086      	sub	sp, #24
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
 8014ea0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014ea2:	687a      	ldr	r2, [r7, #4]
 8014ea4:	23ae      	movs	r3, #174	; 0xae
 8014ea6:	009b      	lsls	r3, r3, #2
 8014ea8:	58d3      	ldr	r3, [r2, r3]
 8014eaa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8014eac:	230f      	movs	r3, #15
 8014eae:	18fb      	adds	r3, r7, r3
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8014eb4:	230c      	movs	r3, #12
 8014eb6:	18fb      	adds	r3, r7, r3
 8014eb8:	2200      	movs	r2, #0
 8014eba:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8014ebc:	2317      	movs	r3, #23
 8014ebe:	18fb      	adds	r3, r7, r3
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	781b      	ldrb	r3, [r3, #0]
 8014ec8:	001a      	movs	r2, r3
 8014eca:	2360      	movs	r3, #96	; 0x60
 8014ecc:	4013      	ands	r3, r2
 8014ece:	d03d      	beq.n	8014f4c <USBD_CDC_Setup+0xb4>
 8014ed0:	2b20      	cmp	r3, #32
 8014ed2:	d000      	beq.n	8014ed6 <USBD_CDC_Setup+0x3e>
 8014ed4:	e094      	b.n	8015000 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	88db      	ldrh	r3, [r3, #6]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d02b      	beq.n	8014f36 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	b25b      	sxtb	r3, r3
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	da12      	bge.n	8014f0e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014ee8:	687a      	ldr	r2, [r7, #4]
 8014eea:	23af      	movs	r3, #175	; 0xaf
 8014eec:	009b      	lsls	r3, r3, #2
 8014eee:	58d3      	ldr	r3, [r2, r3]
 8014ef0:	689b      	ldr	r3, [r3, #8]
 8014ef2:	683a      	ldr	r2, [r7, #0]
 8014ef4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8014ef6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014ef8:	683a      	ldr	r2, [r7, #0]
 8014efa:	88d2      	ldrh	r2, [r2, #6]
 8014efc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8014efe:	6939      	ldr	r1, [r7, #16]
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	88da      	ldrh	r2, [r3, #6]
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	0018      	movs	r0, r3
 8014f08:	f001 fb7c 	bl	8016604 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8014f0c:	e083      	b.n	8015016 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	7859      	ldrb	r1, [r3, #1]
 8014f12:	693a      	ldr	r2, [r7, #16]
 8014f14:	2380      	movs	r3, #128	; 0x80
 8014f16:	009b      	lsls	r3, r3, #2
 8014f18:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	88db      	ldrh	r3, [r3, #6]
 8014f1e:	b2d9      	uxtb	r1, r3
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	4a40      	ldr	r2, [pc, #256]	; (8015024 <USBD_CDC_Setup+0x18c>)
 8014f24:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8014f26:	6939      	ldr	r1, [r7, #16]
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	88da      	ldrh	r2, [r3, #6]
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	0018      	movs	r0, r3
 8014f30:	f001 fb9b 	bl	801666a <USBD_CtlPrepareRx>
      break;
 8014f34:	e06f      	b.n	8015016 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014f36:	687a      	ldr	r2, [r7, #4]
 8014f38:	23af      	movs	r3, #175	; 0xaf
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	58d3      	ldr	r3, [r2, r3]
 8014f3e:	689b      	ldr	r3, [r3, #8]
 8014f40:	683a      	ldr	r2, [r7, #0]
 8014f42:	7850      	ldrb	r0, [r2, #1]
 8014f44:	6839      	ldr	r1, [r7, #0]
 8014f46:	2200      	movs	r2, #0
 8014f48:	4798      	blx	r3
      break;
 8014f4a:	e064      	b.n	8015016 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	785b      	ldrb	r3, [r3, #1]
 8014f50:	2b0b      	cmp	r3, #11
 8014f52:	d037      	beq.n	8014fc4 <USBD_CDC_Setup+0x12c>
 8014f54:	dc47      	bgt.n	8014fe6 <USBD_CDC_Setup+0x14e>
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d002      	beq.n	8014f60 <USBD_CDC_Setup+0xc8>
 8014f5a:	2b0a      	cmp	r3, #10
 8014f5c:	d019      	beq.n	8014f92 <USBD_CDC_Setup+0xfa>
 8014f5e:	e042      	b.n	8014fe6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f60:	687a      	ldr	r2, [r7, #4]
 8014f62:	23a7      	movs	r3, #167	; 0xa7
 8014f64:	009b      	lsls	r3, r3, #2
 8014f66:	5cd3      	ldrb	r3, [r2, r3]
 8014f68:	2b03      	cmp	r3, #3
 8014f6a:	d107      	bne.n	8014f7c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8014f6c:	230c      	movs	r3, #12
 8014f6e:	18f9      	adds	r1, r7, r3
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2202      	movs	r2, #2
 8014f74:	0018      	movs	r0, r3
 8014f76:	f001 fb45 	bl	8016604 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f7a:	e040      	b.n	8014ffe <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8014f7c:	683a      	ldr	r2, [r7, #0]
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	0011      	movs	r1, r2
 8014f82:	0018      	movs	r0, r3
 8014f84:	f001 fac0 	bl	8016508 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f88:	2317      	movs	r3, #23
 8014f8a:	18fb      	adds	r3, r7, r3
 8014f8c:	2202      	movs	r2, #2
 8014f8e:	701a      	strb	r2, [r3, #0]
          break;
 8014f90:	e035      	b.n	8014ffe <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	23a7      	movs	r3, #167	; 0xa7
 8014f96:	009b      	lsls	r3, r3, #2
 8014f98:	5cd3      	ldrb	r3, [r2, r3]
 8014f9a:	2b03      	cmp	r3, #3
 8014f9c:	d107      	bne.n	8014fae <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8014f9e:	230f      	movs	r3, #15
 8014fa0:	18f9      	adds	r1, r7, r3
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	0018      	movs	r0, r3
 8014fa8:	f001 fb2c 	bl	8016604 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014fac:	e027      	b.n	8014ffe <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8014fae:	683a      	ldr	r2, [r7, #0]
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	0011      	movs	r1, r2
 8014fb4:	0018      	movs	r0, r3
 8014fb6:	f001 faa7 	bl	8016508 <USBD_CtlError>
            ret = USBD_FAIL;
 8014fba:	2317      	movs	r3, #23
 8014fbc:	18fb      	adds	r3, r7, r3
 8014fbe:	2202      	movs	r2, #2
 8014fc0:	701a      	strb	r2, [r3, #0]
          break;
 8014fc2:	e01c      	b.n	8014ffe <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014fc4:	687a      	ldr	r2, [r7, #4]
 8014fc6:	23a7      	movs	r3, #167	; 0xa7
 8014fc8:	009b      	lsls	r3, r3, #2
 8014fca:	5cd3      	ldrb	r3, [r2, r3]
 8014fcc:	2b03      	cmp	r3, #3
 8014fce:	d015      	beq.n	8014ffc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8014fd0:	683a      	ldr	r2, [r7, #0]
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	0011      	movs	r1, r2
 8014fd6:	0018      	movs	r0, r3
 8014fd8:	f001 fa96 	bl	8016508 <USBD_CtlError>
            ret = USBD_FAIL;
 8014fdc:	2317      	movs	r3, #23
 8014fde:	18fb      	adds	r3, r7, r3
 8014fe0:	2202      	movs	r2, #2
 8014fe2:	701a      	strb	r2, [r3, #0]
          }
          break;
 8014fe4:	e00a      	b.n	8014ffc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8014fe6:	683a      	ldr	r2, [r7, #0]
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	0011      	movs	r1, r2
 8014fec:	0018      	movs	r0, r3
 8014fee:	f001 fa8b 	bl	8016508 <USBD_CtlError>
          ret = USBD_FAIL;
 8014ff2:	2317      	movs	r3, #23
 8014ff4:	18fb      	adds	r3, r7, r3
 8014ff6:	2202      	movs	r2, #2
 8014ff8:	701a      	strb	r2, [r3, #0]
          break;
 8014ffa:	e000      	b.n	8014ffe <USBD_CDC_Setup+0x166>
          break;
 8014ffc:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8014ffe:	e00a      	b.n	8015016 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8015000:	683a      	ldr	r2, [r7, #0]
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	0011      	movs	r1, r2
 8015006:	0018      	movs	r0, r3
 8015008:	f001 fa7e 	bl	8016508 <USBD_CtlError>
      ret = USBD_FAIL;
 801500c:	2317      	movs	r3, #23
 801500e:	18fb      	adds	r3, r7, r3
 8015010:	2202      	movs	r2, #2
 8015012:	701a      	strb	r2, [r3, #0]
      break;
 8015014:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8015016:	2317      	movs	r3, #23
 8015018:	18fb      	adds	r3, r7, r3
 801501a:	781b      	ldrb	r3, [r3, #0]
}
 801501c:	0018      	movs	r0, r3
 801501e:	46bd      	mov	sp, r7
 8015020:	b006      	add	sp, #24
 8015022:	bd80      	pop	{r7, pc}
 8015024:	00000201 	.word	0x00000201

08015028 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b084      	sub	sp, #16
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
 8015030:	000a      	movs	r2, r1
 8015032:	1cfb      	adds	r3, r7, #3
 8015034:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015036:	687a      	ldr	r2, [r7, #4]
 8015038:	23ae      	movs	r3, #174	; 0xae
 801503a:	009b      	lsls	r3, r3, #2
 801503c:	58d3      	ldr	r3, [r2, r3]
 801503e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8015040:	687a      	ldr	r2, [r7, #4]
 8015042:	23b0      	movs	r3, #176	; 0xb0
 8015044:	009b      	lsls	r3, r3, #2
 8015046:	58d3      	ldr	r3, [r2, r3]
 8015048:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801504a:	687a      	ldr	r2, [r7, #4]
 801504c:	23ae      	movs	r3, #174	; 0xae
 801504e:	009b      	lsls	r3, r3, #2
 8015050:	58d3      	ldr	r3, [r2, r3]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d03e      	beq.n	80150d4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8015056:	1cfb      	adds	r3, r7, #3
 8015058:	781a      	ldrb	r2, [r3, #0]
 801505a:	6879      	ldr	r1, [r7, #4]
 801505c:	0013      	movs	r3, r2
 801505e:	009b      	lsls	r3, r3, #2
 8015060:	189b      	adds	r3, r3, r2
 8015062:	009b      	lsls	r3, r3, #2
 8015064:	18cb      	adds	r3, r1, r3
 8015066:	331c      	adds	r3, #28
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d02b      	beq.n	80150c6 <USBD_CDC_DataIn+0x9e>
 801506e:	1cfb      	adds	r3, r7, #3
 8015070:	781a      	ldrb	r2, [r3, #0]
 8015072:	6879      	ldr	r1, [r7, #4]
 8015074:	0013      	movs	r3, r2
 8015076:	009b      	lsls	r3, r3, #2
 8015078:	189b      	adds	r3, r3, r2
 801507a:	009b      	lsls	r3, r3, #2
 801507c:	18cb      	adds	r3, r1, r3
 801507e:	331c      	adds	r3, #28
 8015080:	6818      	ldr	r0, [r3, #0]
 8015082:	1cfb      	adds	r3, r7, #3
 8015084:	781a      	ldrb	r2, [r3, #0]
 8015086:	68b9      	ldr	r1, [r7, #8]
 8015088:	0013      	movs	r3, r2
 801508a:	009b      	lsls	r3, r3, #2
 801508c:	189b      	adds	r3, r3, r2
 801508e:	00db      	lsls	r3, r3, #3
 8015090:	18cb      	adds	r3, r1, r3
 8015092:	3338      	adds	r3, #56	; 0x38
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	0019      	movs	r1, r3
 8015098:	f7f4 f8d8 	bl	800924c <__aeabi_uidivmod>
 801509c:	1e0b      	subs	r3, r1, #0
 801509e:	d112      	bne.n	80150c6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80150a0:	1cfb      	adds	r3, r7, #3
 80150a2:	781a      	ldrb	r2, [r3, #0]
 80150a4:	6879      	ldr	r1, [r7, #4]
 80150a6:	0013      	movs	r3, r2
 80150a8:	009b      	lsls	r3, r3, #2
 80150aa:	189b      	adds	r3, r3, r2
 80150ac:	009b      	lsls	r3, r3, #2
 80150ae:	18cb      	adds	r3, r1, r3
 80150b0:	331c      	adds	r3, #28
 80150b2:	2200      	movs	r2, #0
 80150b4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80150b6:	1cfb      	adds	r3, r7, #3
 80150b8:	7819      	ldrb	r1, [r3, #0]
 80150ba:	6878      	ldr	r0, [r7, #4]
 80150bc:	2300      	movs	r3, #0
 80150be:	2200      	movs	r2, #0
 80150c0:	f003 f82d 	bl	801811e <USBD_LL_Transmit>
 80150c4:	e004      	b.n	80150d0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80150c6:	68fa      	ldr	r2, [r7, #12]
 80150c8:	2385      	movs	r3, #133	; 0x85
 80150ca:	009b      	lsls	r3, r3, #2
 80150cc:	2100      	movs	r1, #0
 80150ce:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80150d0:	2300      	movs	r3, #0
 80150d2:	e000      	b.n	80150d6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80150d4:	2302      	movs	r3, #2
  }
}
 80150d6:	0018      	movs	r0, r3
 80150d8:	46bd      	mov	sp, r7
 80150da:	b004      	add	sp, #16
 80150dc:	bd80      	pop	{r7, pc}

080150de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80150de:	b580      	push	{r7, lr}
 80150e0:	b084      	sub	sp, #16
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
 80150e6:	000a      	movs	r2, r1
 80150e8:	1cfb      	adds	r3, r7, #3
 80150ea:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80150ec:	687a      	ldr	r2, [r7, #4]
 80150ee:	23ae      	movs	r3, #174	; 0xae
 80150f0:	009b      	lsls	r3, r3, #2
 80150f2:	58d3      	ldr	r3, [r2, r3]
 80150f4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80150f6:	1cfb      	adds	r3, r7, #3
 80150f8:	781a      	ldrb	r2, [r3, #0]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	0011      	movs	r1, r2
 80150fe:	0018      	movs	r0, r3
 8015100:	f003 f87b 	bl	80181fa <USBD_LL_GetRxDataSize>
 8015104:	0001      	movs	r1, r0
 8015106:	68fa      	ldr	r2, [r7, #12]
 8015108:	2383      	movs	r3, #131	; 0x83
 801510a:	009b      	lsls	r3, r3, #2
 801510c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	23ae      	movs	r3, #174	; 0xae
 8015112:	009b      	lsls	r3, r3, #2
 8015114:	58d3      	ldr	r3, [r2, r3]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d011      	beq.n	801513e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	23af      	movs	r3, #175	; 0xaf
 801511e:	009b      	lsls	r3, r3, #2
 8015120:	58d3      	ldr	r3, [r2, r3]
 8015122:	68da      	ldr	r2, [r3, #12]
 8015124:	68f9      	ldr	r1, [r7, #12]
 8015126:	2381      	movs	r3, #129	; 0x81
 8015128:	009b      	lsls	r3, r3, #2
 801512a:	58c8      	ldr	r0, [r1, r3]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	2183      	movs	r1, #131	; 0x83
 8015130:	0089      	lsls	r1, r1, #2
 8015132:	468c      	mov	ip, r1
 8015134:	4463      	add	r3, ip
 8015136:	0019      	movs	r1, r3
 8015138:	4790      	blx	r2

    return USBD_OK;
 801513a:	2300      	movs	r3, #0
 801513c:	e000      	b.n	8015140 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801513e:	2302      	movs	r3, #2
  }
}
 8015140:	0018      	movs	r0, r3
 8015142:	46bd      	mov	sp, r7
 8015144:	b004      	add	sp, #16
 8015146:	bd80      	pop	{r7, pc}

08015148 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015148:	b590      	push	{r4, r7, lr}
 801514a:	b085      	sub	sp, #20
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015150:	687a      	ldr	r2, [r7, #4]
 8015152:	23ae      	movs	r3, #174	; 0xae
 8015154:	009b      	lsls	r3, r3, #2
 8015156:	58d3      	ldr	r3, [r2, r3]
 8015158:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801515a:	687a      	ldr	r2, [r7, #4]
 801515c:	23af      	movs	r3, #175	; 0xaf
 801515e:	009b      	lsls	r3, r3, #2
 8015160:	58d3      	ldr	r3, [r2, r3]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d019      	beq.n	801519a <USBD_CDC_EP0_RxReady+0x52>
 8015166:	68fa      	ldr	r2, [r7, #12]
 8015168:	2380      	movs	r3, #128	; 0x80
 801516a:	009b      	lsls	r3, r3, #2
 801516c:	5cd3      	ldrb	r3, [r2, r3]
 801516e:	2bff      	cmp	r3, #255	; 0xff
 8015170:	d013      	beq.n	801519a <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015172:	687a      	ldr	r2, [r7, #4]
 8015174:	23af      	movs	r3, #175	; 0xaf
 8015176:	009b      	lsls	r3, r3, #2
 8015178:	58d3      	ldr	r3, [r2, r3]
 801517a:	689b      	ldr	r3, [r3, #8]
 801517c:	68f9      	ldr	r1, [r7, #12]
 801517e:	2280      	movs	r2, #128	; 0x80
 8015180:	0092      	lsls	r2, r2, #2
 8015182:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8015184:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8015186:	68fa      	ldr	r2, [r7, #12]
 8015188:	4c06      	ldr	r4, [pc, #24]	; (80151a4 <USBD_CDC_EP0_RxReady+0x5c>)
 801518a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801518c:	b292      	uxth	r2, r2
 801518e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015190:	68fa      	ldr	r2, [r7, #12]
 8015192:	2380      	movs	r3, #128	; 0x80
 8015194:	009b      	lsls	r3, r3, #2
 8015196:	21ff      	movs	r1, #255	; 0xff
 8015198:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801519a:	2300      	movs	r3, #0
}
 801519c:	0018      	movs	r0, r3
 801519e:	46bd      	mov	sp, r7
 80151a0:	b005      	add	sp, #20
 80151a2:	bd90      	pop	{r4, r7, pc}
 80151a4:	00000201 	.word	0x00000201

080151a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2243      	movs	r2, #67	; 0x43
 80151b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80151b6:	4b02      	ldr	r3, [pc, #8]	; (80151c0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80151b8:	0018      	movs	r0, r3
 80151ba:	46bd      	mov	sp, r7
 80151bc:	b002      	add	sp, #8
 80151be:	bd80      	pop	{r7, pc}
 80151c0:	20000168 	.word	0x20000168

080151c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2243      	movs	r2, #67	; 0x43
 80151d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80151d2:	4b02      	ldr	r3, [pc, #8]	; (80151dc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80151d4:	0018      	movs	r0, r3
 80151d6:	46bd      	mov	sp, r7
 80151d8:	b002      	add	sp, #8
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	20000124 	.word	0x20000124

080151e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b082      	sub	sp, #8
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2243      	movs	r2, #67	; 0x43
 80151ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80151ee:	4b02      	ldr	r3, [pc, #8]	; (80151f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80151f0:	0018      	movs	r0, r3
 80151f2:	46bd      	mov	sp, r7
 80151f4:	b002      	add	sp, #8
 80151f6:	bd80      	pop	{r7, pc}
 80151f8:	200001ac 	.word	0x200001ac

080151fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b082      	sub	sp, #8
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	220a      	movs	r2, #10
 8015208:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801520a:	4b02      	ldr	r3, [pc, #8]	; (8015214 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801520c:	0018      	movs	r0, r3
 801520e:	46bd      	mov	sp, r7
 8015210:	b002      	add	sp, #8
 8015212:	bd80      	pop	{r7, pc}
 8015214:	200000e0 	.word	0x200000e0

08015218 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b084      	sub	sp, #16
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8015222:	200f      	movs	r0, #15
 8015224:	183b      	adds	r3, r7, r0
 8015226:	2202      	movs	r2, #2
 8015228:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d007      	beq.n	8015240 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8015230:	687a      	ldr	r2, [r7, #4]
 8015232:	23af      	movs	r3, #175	; 0xaf
 8015234:	009b      	lsls	r3, r3, #2
 8015236:	6839      	ldr	r1, [r7, #0]
 8015238:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801523a:	183b      	adds	r3, r7, r0
 801523c:	2200      	movs	r2, #0
 801523e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8015240:	230f      	movs	r3, #15
 8015242:	18fb      	adds	r3, r7, r3
 8015244:	781b      	ldrb	r3, [r3, #0]
}
 8015246:	0018      	movs	r0, r3
 8015248:	46bd      	mov	sp, r7
 801524a:	b004      	add	sp, #16
 801524c:	bd80      	pop	{r7, pc}

0801524e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801524e:	b580      	push	{r7, lr}
 8015250:	b086      	sub	sp, #24
 8015252:	af00      	add	r7, sp, #0
 8015254:	60f8      	str	r0, [r7, #12]
 8015256:	60b9      	str	r1, [r7, #8]
 8015258:	1dbb      	adds	r3, r7, #6
 801525a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801525c:	68fa      	ldr	r2, [r7, #12]
 801525e:	23ae      	movs	r3, #174	; 0xae
 8015260:	009b      	lsls	r3, r3, #2
 8015262:	58d3      	ldr	r3, [r2, r3]
 8015264:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8015266:	697a      	ldr	r2, [r7, #20]
 8015268:	2382      	movs	r3, #130	; 0x82
 801526a:	009b      	lsls	r3, r3, #2
 801526c:	68b9      	ldr	r1, [r7, #8]
 801526e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8015270:	1dbb      	adds	r3, r7, #6
 8015272:	8819      	ldrh	r1, [r3, #0]
 8015274:	697a      	ldr	r2, [r7, #20]
 8015276:	2384      	movs	r3, #132	; 0x84
 8015278:	009b      	lsls	r3, r3, #2
 801527a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801527c:	2300      	movs	r3, #0
}
 801527e:	0018      	movs	r0, r3
 8015280:	46bd      	mov	sp, r7
 8015282:	b006      	add	sp, #24
 8015284:	bd80      	pop	{r7, pc}

08015286 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8015286:	b580      	push	{r7, lr}
 8015288:	b084      	sub	sp, #16
 801528a:	af00      	add	r7, sp, #0
 801528c:	6078      	str	r0, [r7, #4]
 801528e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	23ae      	movs	r3, #174	; 0xae
 8015294:	009b      	lsls	r3, r3, #2
 8015296:	58d3      	ldr	r3, [r2, r3]
 8015298:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801529a:	68fa      	ldr	r2, [r7, #12]
 801529c:	2381      	movs	r3, #129	; 0x81
 801529e:	009b      	lsls	r3, r3, #2
 80152a0:	6839      	ldr	r1, [r7, #0]
 80152a2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80152a4:	2300      	movs	r3, #0
}
 80152a6:	0018      	movs	r0, r3
 80152a8:	46bd      	mov	sp, r7
 80152aa:	b004      	add	sp, #16
 80152ac:	bd80      	pop	{r7, pc}

080152ae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80152ae:	b580      	push	{r7, lr}
 80152b0:	b084      	sub	sp, #16
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80152b6:	687a      	ldr	r2, [r7, #4]
 80152b8:	23ae      	movs	r3, #174	; 0xae
 80152ba:	009b      	lsls	r3, r3, #2
 80152bc:	58d3      	ldr	r3, [r2, r3]
 80152be:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80152c0:	687a      	ldr	r2, [r7, #4]
 80152c2:	23ae      	movs	r3, #174	; 0xae
 80152c4:	009b      	lsls	r3, r3, #2
 80152c6:	58d3      	ldr	r3, [r2, r3]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d019      	beq.n	8015300 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	7c1b      	ldrb	r3, [r3, #16]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d10a      	bne.n	80152ea <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80152d4:	68fa      	ldr	r2, [r7, #12]
 80152d6:	2381      	movs	r3, #129	; 0x81
 80152d8:	009b      	lsls	r3, r3, #2
 80152da:	58d2      	ldr	r2, [r2, r3]
 80152dc:	2380      	movs	r3, #128	; 0x80
 80152de:	009b      	lsls	r3, r3, #2
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	2101      	movs	r1, #1
 80152e4:	f002 ff52 	bl	801818c <USBD_LL_PrepareReceive>
 80152e8:	e008      	b.n	80152fc <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80152ea:	68fa      	ldr	r2, [r7, #12]
 80152ec:	2381      	movs	r3, #129	; 0x81
 80152ee:	009b      	lsls	r3, r3, #2
 80152f0:	58d2      	ldr	r2, [r2, r3]
 80152f2:	6878      	ldr	r0, [r7, #4]
 80152f4:	2340      	movs	r3, #64	; 0x40
 80152f6:	2101      	movs	r1, #1
 80152f8:	f002 ff48 	bl	801818c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80152fc:	2300      	movs	r3, #0
 80152fe:	e000      	b.n	8015302 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8015300:	2302      	movs	r3, #2
  }
}
 8015302:	0018      	movs	r0, r3
 8015304:	46bd      	mov	sp, r7
 8015306:	b004      	add	sp, #16
 8015308:	bd80      	pop	{r7, pc}

0801530a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801530a:	b580      	push	{r7, lr}
 801530c:	b084      	sub	sp, #16
 801530e:	af00      	add	r7, sp, #0
 8015310:	60f8      	str	r0, [r7, #12]
 8015312:	60b9      	str	r1, [r7, #8]
 8015314:	1dfb      	adds	r3, r7, #7
 8015316:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d101      	bne.n	8015322 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801531e:	2302      	movs	r3, #2
 8015320:	e020      	b.n	8015364 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8015322:	68fa      	ldr	r2, [r7, #12]
 8015324:	23ad      	movs	r3, #173	; 0xad
 8015326:	009b      	lsls	r3, r3, #2
 8015328:	58d3      	ldr	r3, [r2, r3]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d004      	beq.n	8015338 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801532e:	68fa      	ldr	r2, [r7, #12]
 8015330:	23ad      	movs	r3, #173	; 0xad
 8015332:	009b      	lsls	r3, r3, #2
 8015334:	2100      	movs	r1, #0
 8015336:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d004      	beq.n	8015348 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801533e:	68fa      	ldr	r2, [r7, #12]
 8015340:	23ac      	movs	r3, #172	; 0xac
 8015342:	009b      	lsls	r3, r3, #2
 8015344:	68b9      	ldr	r1, [r7, #8]
 8015346:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015348:	68fa      	ldr	r2, [r7, #12]
 801534a:	23a7      	movs	r3, #167	; 0xa7
 801534c:	009b      	lsls	r3, r3, #2
 801534e:	2101      	movs	r1, #1
 8015350:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	1dfa      	adds	r2, r7, #7
 8015356:	7812      	ldrb	r2, [r2, #0]
 8015358:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	0018      	movs	r0, r3
 801535e:	f002 fd41 	bl	8017de4 <USBD_LL_Init>

  return USBD_OK;
 8015362:	2300      	movs	r3, #0
}
 8015364:	0018      	movs	r0, r3
 8015366:	46bd      	mov	sp, r7
 8015368:	b004      	add	sp, #16
 801536a:	bd80      	pop	{r7, pc}

0801536c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b084      	sub	sp, #16
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8015376:	200f      	movs	r0, #15
 8015378:	183b      	adds	r3, r7, r0
 801537a:	2200      	movs	r2, #0
 801537c:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d008      	beq.n	8015396 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8015384:	687a      	ldr	r2, [r7, #4]
 8015386:	23ad      	movs	r3, #173	; 0xad
 8015388:	009b      	lsls	r3, r3, #2
 801538a:	6839      	ldr	r1, [r7, #0]
 801538c:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801538e:	183b      	adds	r3, r7, r0
 8015390:	2200      	movs	r2, #0
 8015392:	701a      	strb	r2, [r3, #0]
 8015394:	e003      	b.n	801539e <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8015396:	230f      	movs	r3, #15
 8015398:	18fb      	adds	r3, r7, r3
 801539a:	2202      	movs	r2, #2
 801539c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801539e:	230f      	movs	r3, #15
 80153a0:	18fb      	adds	r3, r7, r3
 80153a2:	781b      	ldrb	r3, [r3, #0]
}
 80153a4:	0018      	movs	r0, r3
 80153a6:	46bd      	mov	sp, r7
 80153a8:	b004      	add	sp, #16
 80153aa:	bd80      	pop	{r7, pc}

080153ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b082      	sub	sp, #8
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	0018      	movs	r0, r3
 80153b8:	f002 fd78 	bl	8017eac <USBD_LL_Start>

  return USBD_OK;
 80153bc:	2300      	movs	r3, #0
}
 80153be:	0018      	movs	r0, r3
 80153c0:	46bd      	mov	sp, r7
 80153c2:	b002      	add	sp, #8
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b082      	sub	sp, #8
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80153ce:	2300      	movs	r3, #0
}
 80153d0:	0018      	movs	r0, r3
 80153d2:	46bd      	mov	sp, r7
 80153d4:	b002      	add	sp, #8
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80153d8:	b590      	push	{r4, r7, lr}
 80153da:	b085      	sub	sp, #20
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
 80153e0:	000a      	movs	r2, r1
 80153e2:	1cfb      	adds	r3, r7, #3
 80153e4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80153e6:	240f      	movs	r4, #15
 80153e8:	193b      	adds	r3, r7, r4
 80153ea:	2202      	movs	r2, #2
 80153ec:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80153ee:	687a      	ldr	r2, [r7, #4]
 80153f0:	23ad      	movs	r3, #173	; 0xad
 80153f2:	009b      	lsls	r3, r3, #2
 80153f4:	58d3      	ldr	r3, [r2, r3]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d00e      	beq.n	8015418 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80153fa:	687a      	ldr	r2, [r7, #4]
 80153fc:	23ad      	movs	r3, #173	; 0xad
 80153fe:	009b      	lsls	r3, r3, #2
 8015400:	58d3      	ldr	r3, [r2, r3]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	1cfa      	adds	r2, r7, #3
 8015406:	7811      	ldrb	r1, [r2, #0]
 8015408:	687a      	ldr	r2, [r7, #4]
 801540a:	0010      	movs	r0, r2
 801540c:	4798      	blx	r3
 801540e:	1e03      	subs	r3, r0, #0
 8015410:	d102      	bne.n	8015418 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8015412:	193b      	adds	r3, r7, r4
 8015414:	2200      	movs	r2, #0
 8015416:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8015418:	230f      	movs	r3, #15
 801541a:	18fb      	adds	r3, r7, r3
 801541c:	781b      	ldrb	r3, [r3, #0]
}
 801541e:	0018      	movs	r0, r3
 8015420:	46bd      	mov	sp, r7
 8015422:	b005      	add	sp, #20
 8015424:	bd90      	pop	{r4, r7, pc}

08015426 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015426:	b580      	push	{r7, lr}
 8015428:	b082      	sub	sp, #8
 801542a:	af00      	add	r7, sp, #0
 801542c:	6078      	str	r0, [r7, #4]
 801542e:	000a      	movs	r2, r1
 8015430:	1cfb      	adds	r3, r7, #3
 8015432:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8015434:	687a      	ldr	r2, [r7, #4]
 8015436:	23ad      	movs	r3, #173	; 0xad
 8015438:	009b      	lsls	r3, r3, #2
 801543a:	58d3      	ldr	r3, [r2, r3]
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	1cfa      	adds	r2, r7, #3
 8015440:	7811      	ldrb	r1, [r2, #0]
 8015442:	687a      	ldr	r2, [r7, #4]
 8015444:	0010      	movs	r0, r2
 8015446:	4798      	blx	r3

  return USBD_OK;
 8015448:	2300      	movs	r3, #0
}
 801544a:	0018      	movs	r0, r3
 801544c:	46bd      	mov	sp, r7
 801544e:	b002      	add	sp, #8
 8015450:	bd80      	pop	{r7, pc}
	...

08015454 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b082      	sub	sp, #8
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
 801545c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	22aa      	movs	r2, #170	; 0xaa
 8015462:	0092      	lsls	r2, r2, #2
 8015464:	4694      	mov	ip, r2
 8015466:	4463      	add	r3, ip
 8015468:	683a      	ldr	r2, [r7, #0]
 801546a:	0011      	movs	r1, r2
 801546c:	0018      	movs	r0, r3
 801546e:	f001 f810 	bl	8016492 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015472:	687a      	ldr	r2, [r7, #4]
 8015474:	23a5      	movs	r3, #165	; 0xa5
 8015476:	009b      	lsls	r3, r3, #2
 8015478:	2101      	movs	r1, #1
 801547a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	4a23      	ldr	r2, [pc, #140]	; (801550c <USBD_LL_SetupStage+0xb8>)
 8015480:	5a9b      	ldrh	r3, [r3, r2]
 8015482:	0019      	movs	r1, r3
 8015484:	687a      	ldr	r2, [r7, #4]
 8015486:	23a6      	movs	r3, #166	; 0xa6
 8015488:	009b      	lsls	r3, r3, #2
 801548a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801548c:	687a      	ldr	r2, [r7, #4]
 801548e:	23aa      	movs	r3, #170	; 0xaa
 8015490:	009b      	lsls	r3, r3, #2
 8015492:	5cd3      	ldrb	r3, [r2, r3]
 8015494:	001a      	movs	r2, r3
 8015496:	231f      	movs	r3, #31
 8015498:	4013      	ands	r3, r2
 801549a:	2b02      	cmp	r3, #2
 801549c:	d019      	beq.n	80154d2 <USBD_LL_SetupStage+0x7e>
 801549e:	d822      	bhi.n	80154e6 <USBD_LL_SetupStage+0x92>
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d002      	beq.n	80154aa <USBD_LL_SetupStage+0x56>
 80154a4:	2b01      	cmp	r3, #1
 80154a6:	d00a      	beq.n	80154be <USBD_LL_SetupStage+0x6a>
 80154a8:	e01d      	b.n	80154e6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	22aa      	movs	r2, #170	; 0xaa
 80154ae:	0092      	lsls	r2, r2, #2
 80154b0:	189a      	adds	r2, r3, r2
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	0011      	movs	r1, r2
 80154b6:	0018      	movs	r0, r3
 80154b8:	f000 fa10 	bl	80158dc <USBD_StdDevReq>
      break;
 80154bc:	e020      	b.n	8015500 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	22aa      	movs	r2, #170	; 0xaa
 80154c2:	0092      	lsls	r2, r2, #2
 80154c4:	189a      	adds	r2, r3, r2
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	0011      	movs	r1, r2
 80154ca:	0018      	movs	r0, r3
 80154cc:	f000 fa78 	bl	80159c0 <USBD_StdItfReq>
      break;
 80154d0:	e016      	b.n	8015500 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	22aa      	movs	r2, #170	; 0xaa
 80154d6:	0092      	lsls	r2, r2, #2
 80154d8:	189a      	adds	r2, r3, r2
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	0011      	movs	r1, r2
 80154de:	0018      	movs	r0, r3
 80154e0:	f000 fac5 	bl	8015a6e <USBD_StdEPReq>
      break;
 80154e4:	e00c      	b.n	8015500 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80154e6:	687a      	ldr	r2, [r7, #4]
 80154e8:	23aa      	movs	r3, #170	; 0xaa
 80154ea:	009b      	lsls	r3, r3, #2
 80154ec:	5cd3      	ldrb	r3, [r2, r3]
 80154ee:	227f      	movs	r2, #127	; 0x7f
 80154f0:	4393      	bics	r3, r2
 80154f2:	b2da      	uxtb	r2, r3
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	0011      	movs	r1, r2
 80154f8:	0018      	movs	r0, r3
 80154fa:	f002 fd5e 	bl	8017fba <USBD_LL_StallEP>
      break;
 80154fe:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8015500:	2300      	movs	r3, #0
}
 8015502:	0018      	movs	r0, r3
 8015504:	46bd      	mov	sp, r7
 8015506:	b002      	add	sp, #8
 8015508:	bd80      	pop	{r7, pc}
 801550a:	46c0      	nop			; (mov r8, r8)
 801550c:	000002ae 	.word	0x000002ae

08015510 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b086      	sub	sp, #24
 8015514:	af00      	add	r7, sp, #0
 8015516:	60f8      	str	r0, [r7, #12]
 8015518:	607a      	str	r2, [r7, #4]
 801551a:	200b      	movs	r0, #11
 801551c:	183b      	adds	r3, r7, r0
 801551e:	1c0a      	adds	r2, r1, #0
 8015520:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015522:	183b      	adds	r3, r7, r0
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d154      	bne.n	80155d4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	3355      	adds	r3, #85	; 0x55
 801552e:	33ff      	adds	r3, #255	; 0xff
 8015530:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015532:	68fa      	ldr	r2, [r7, #12]
 8015534:	23a5      	movs	r3, #165	; 0xa5
 8015536:	009b      	lsls	r3, r3, #2
 8015538:	58d3      	ldr	r3, [r2, r3]
 801553a:	2b03      	cmp	r3, #3
 801553c:	d139      	bne.n	80155b2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	68da      	ldr	r2, [r3, #12]
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	691b      	ldr	r3, [r3, #16]
 8015546:	429a      	cmp	r2, r3
 8015548:	d919      	bls.n	801557e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	68da      	ldr	r2, [r3, #12]
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	691b      	ldr	r3, [r3, #16]
 8015552:	1ad2      	subs	r2, r2, r3
 8015554:	697b      	ldr	r3, [r7, #20]
 8015556:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	68da      	ldr	r2, [r3, #12]
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015560:	429a      	cmp	r2, r3
 8015562:	d203      	bcs.n	801556c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8015568:	b29b      	uxth	r3, r3
 801556a:	e002      	b.n	8015572 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015570:	b29b      	uxth	r3, r3
 8015572:	6879      	ldr	r1, [r7, #4]
 8015574:	68f8      	ldr	r0, [r7, #12]
 8015576:	001a      	movs	r2, r3
 8015578:	f001 f89b 	bl	80166b2 <USBD_CtlContinueRx>
 801557c:	e045      	b.n	801560a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801557e:	68fa      	ldr	r2, [r7, #12]
 8015580:	23ad      	movs	r3, #173	; 0xad
 8015582:	009b      	lsls	r3, r3, #2
 8015584:	58d3      	ldr	r3, [r2, r3]
 8015586:	691b      	ldr	r3, [r3, #16]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d00d      	beq.n	80155a8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801558c:	68fa      	ldr	r2, [r7, #12]
 801558e:	23a7      	movs	r3, #167	; 0xa7
 8015590:	009b      	lsls	r3, r3, #2
 8015592:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015594:	2b03      	cmp	r3, #3
 8015596:	d107      	bne.n	80155a8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015598:	68fa      	ldr	r2, [r7, #12]
 801559a:	23ad      	movs	r3, #173	; 0xad
 801559c:	009b      	lsls	r3, r3, #2
 801559e:	58d3      	ldr	r3, [r2, r3]
 80155a0:	691b      	ldr	r3, [r3, #16]
 80155a2:	68fa      	ldr	r2, [r7, #12]
 80155a4:	0010      	movs	r0, r2
 80155a6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	0018      	movs	r0, r3
 80155ac:	f001 f894 	bl	80166d8 <USBD_CtlSendStatus>
 80155b0:	e02b      	b.n	801560a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80155b2:	68fa      	ldr	r2, [r7, #12]
 80155b4:	23a5      	movs	r3, #165	; 0xa5
 80155b6:	009b      	lsls	r3, r3, #2
 80155b8:	58d3      	ldr	r3, [r2, r3]
 80155ba:	2b05      	cmp	r3, #5
 80155bc:	d125      	bne.n	801560a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80155be:	68fa      	ldr	r2, [r7, #12]
 80155c0:	23a5      	movs	r3, #165	; 0xa5
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	2100      	movs	r1, #0
 80155c6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	2100      	movs	r1, #0
 80155cc:	0018      	movs	r0, r3
 80155ce:	f002 fcf4 	bl	8017fba <USBD_LL_StallEP>
 80155d2:	e01a      	b.n	801560a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80155d4:	68fa      	ldr	r2, [r7, #12]
 80155d6:	23ad      	movs	r3, #173	; 0xad
 80155d8:	009b      	lsls	r3, r3, #2
 80155da:	58d3      	ldr	r3, [r2, r3]
 80155dc:	699b      	ldr	r3, [r3, #24]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d011      	beq.n	8015606 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80155e2:	68fa      	ldr	r2, [r7, #12]
 80155e4:	23a7      	movs	r3, #167	; 0xa7
 80155e6:	009b      	lsls	r3, r3, #2
 80155e8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80155ea:	2b03      	cmp	r3, #3
 80155ec:	d10b      	bne.n	8015606 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80155ee:	68fa      	ldr	r2, [r7, #12]
 80155f0:	23ad      	movs	r3, #173	; 0xad
 80155f2:	009b      	lsls	r3, r3, #2
 80155f4:	58d3      	ldr	r3, [r2, r3]
 80155f6:	699b      	ldr	r3, [r3, #24]
 80155f8:	220b      	movs	r2, #11
 80155fa:	18ba      	adds	r2, r7, r2
 80155fc:	7811      	ldrb	r1, [r2, #0]
 80155fe:	68fa      	ldr	r2, [r7, #12]
 8015600:	0010      	movs	r0, r2
 8015602:	4798      	blx	r3
 8015604:	e001      	b.n	801560a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015606:	2302      	movs	r3, #2
 8015608:	e000      	b.n	801560c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801560a:	2300      	movs	r3, #0
}
 801560c:	0018      	movs	r0, r3
 801560e:	46bd      	mov	sp, r7
 8015610:	b006      	add	sp, #24
 8015612:	bd80      	pop	{r7, pc}

08015614 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b086      	sub	sp, #24
 8015618:	af00      	add	r7, sp, #0
 801561a:	60f8      	str	r0, [r7, #12]
 801561c:	607a      	str	r2, [r7, #4]
 801561e:	200b      	movs	r0, #11
 8015620:	183b      	adds	r3, r7, r0
 8015622:	1c0a      	adds	r2, r1, #0
 8015624:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015626:	183b      	adds	r3, r7, r0
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d000      	beq.n	8015630 <USBD_LL_DataInStage+0x1c>
 801562e:	e08e      	b.n	801574e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	3314      	adds	r3, #20
 8015634:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015636:	68fa      	ldr	r2, [r7, #12]
 8015638:	23a5      	movs	r3, #165	; 0xa5
 801563a:	009b      	lsls	r3, r3, #2
 801563c:	58d3      	ldr	r3, [r2, r3]
 801563e:	2b02      	cmp	r3, #2
 8015640:	d164      	bne.n	801570c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	68da      	ldr	r2, [r3, #12]
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	691b      	ldr	r3, [r3, #16]
 801564a:	429a      	cmp	r2, r3
 801564c:	d915      	bls.n	801567a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	68da      	ldr	r2, [r3, #12]
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	691b      	ldr	r3, [r3, #16]
 8015656:	1ad2      	subs	r2, r2, r3
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	b29a      	uxth	r2, r3
 8015662:	6879      	ldr	r1, [r7, #4]
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	0018      	movs	r0, r3
 8015668:	f000 ffec 	bl	8016644 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801566c:	68f8      	ldr	r0, [r7, #12]
 801566e:	2300      	movs	r3, #0
 8015670:	2200      	movs	r2, #0
 8015672:	2100      	movs	r1, #0
 8015674:	f002 fd8a 	bl	801818c <USBD_LL_PrepareReceive>
 8015678:	e059      	b.n	801572e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801567a:	697b      	ldr	r3, [r7, #20]
 801567c:	689a      	ldr	r2, [r3, #8]
 801567e:	697b      	ldr	r3, [r7, #20]
 8015680:	691b      	ldr	r3, [r3, #16]
 8015682:	0019      	movs	r1, r3
 8015684:	0010      	movs	r0, r2
 8015686:	f7f3 fde1 	bl	800924c <__aeabi_uidivmod>
 801568a:	1e0b      	subs	r3, r1, #0
 801568c:	d11f      	bne.n	80156ce <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	689a      	ldr	r2, [r3, #8]
 8015692:	697b      	ldr	r3, [r7, #20]
 8015694:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015696:	429a      	cmp	r2, r3
 8015698:	d319      	bcc.n	80156ce <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	689a      	ldr	r2, [r3, #8]
 801569e:	68f9      	ldr	r1, [r7, #12]
 80156a0:	23a6      	movs	r3, #166	; 0xa6
 80156a2:	009b      	lsls	r3, r3, #2
 80156a4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d211      	bcs.n	80156ce <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	2200      	movs	r2, #0
 80156ae:	2100      	movs	r1, #0
 80156b0:	0018      	movs	r0, r3
 80156b2:	f000 ffc7 	bl	8016644 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80156b6:	68fa      	ldr	r2, [r7, #12]
 80156b8:	23a6      	movs	r3, #166	; 0xa6
 80156ba:	009b      	lsls	r3, r3, #2
 80156bc:	2100      	movs	r1, #0
 80156be:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156c0:	68f8      	ldr	r0, [r7, #12]
 80156c2:	2300      	movs	r3, #0
 80156c4:	2200      	movs	r2, #0
 80156c6:	2100      	movs	r1, #0
 80156c8:	f002 fd60 	bl	801818c <USBD_LL_PrepareReceive>
 80156cc:	e02f      	b.n	801572e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80156ce:	68fa      	ldr	r2, [r7, #12]
 80156d0:	23ad      	movs	r3, #173	; 0xad
 80156d2:	009b      	lsls	r3, r3, #2
 80156d4:	58d3      	ldr	r3, [r2, r3]
 80156d6:	68db      	ldr	r3, [r3, #12]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d00d      	beq.n	80156f8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80156dc:	68fa      	ldr	r2, [r7, #12]
 80156de:	23a7      	movs	r3, #167	; 0xa7
 80156e0:	009b      	lsls	r3, r3, #2
 80156e2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80156e4:	2b03      	cmp	r3, #3
 80156e6:	d107      	bne.n	80156f8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80156e8:	68fa      	ldr	r2, [r7, #12]
 80156ea:	23ad      	movs	r3, #173	; 0xad
 80156ec:	009b      	lsls	r3, r3, #2
 80156ee:	58d3      	ldr	r3, [r2, r3]
 80156f0:	68db      	ldr	r3, [r3, #12]
 80156f2:	68fa      	ldr	r2, [r7, #12]
 80156f4:	0010      	movs	r0, r2
 80156f6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	2180      	movs	r1, #128	; 0x80
 80156fc:	0018      	movs	r0, r3
 80156fe:	f002 fc5c 	bl	8017fba <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	0018      	movs	r0, r3
 8015706:	f000 fffb 	bl	8016700 <USBD_CtlReceiveStatus>
 801570a:	e010      	b.n	801572e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801570c:	68fa      	ldr	r2, [r7, #12]
 801570e:	23a5      	movs	r3, #165	; 0xa5
 8015710:	009b      	lsls	r3, r3, #2
 8015712:	58d3      	ldr	r3, [r2, r3]
 8015714:	2b04      	cmp	r3, #4
 8015716:	d005      	beq.n	8015724 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8015718:	68fa      	ldr	r2, [r7, #12]
 801571a:	23a5      	movs	r3, #165	; 0xa5
 801571c:	009b      	lsls	r3, r3, #2
 801571e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015720:	2b00      	cmp	r3, #0
 8015722:	d104      	bne.n	801572e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	2180      	movs	r1, #128	; 0x80
 8015728:	0018      	movs	r0, r3
 801572a:	f002 fc46 	bl	8017fba <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801572e:	68fa      	ldr	r2, [r7, #12]
 8015730:	23a8      	movs	r3, #168	; 0xa8
 8015732:	009b      	lsls	r3, r3, #2
 8015734:	5cd3      	ldrb	r3, [r2, r3]
 8015736:	2b01      	cmp	r3, #1
 8015738:	d124      	bne.n	8015784 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	0018      	movs	r0, r3
 801573e:	f7ff fe42 	bl	80153c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015742:	68fa      	ldr	r2, [r7, #12]
 8015744:	23a8      	movs	r3, #168	; 0xa8
 8015746:	009b      	lsls	r3, r3, #2
 8015748:	2100      	movs	r1, #0
 801574a:	54d1      	strb	r1, [r2, r3]
 801574c:	e01a      	b.n	8015784 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801574e:	68fa      	ldr	r2, [r7, #12]
 8015750:	23ad      	movs	r3, #173	; 0xad
 8015752:	009b      	lsls	r3, r3, #2
 8015754:	58d3      	ldr	r3, [r2, r3]
 8015756:	695b      	ldr	r3, [r3, #20]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d011      	beq.n	8015780 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801575c:	68fa      	ldr	r2, [r7, #12]
 801575e:	23a7      	movs	r3, #167	; 0xa7
 8015760:	009b      	lsls	r3, r3, #2
 8015762:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8015764:	2b03      	cmp	r3, #3
 8015766:	d10b      	bne.n	8015780 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8015768:	68fa      	ldr	r2, [r7, #12]
 801576a:	23ad      	movs	r3, #173	; 0xad
 801576c:	009b      	lsls	r3, r3, #2
 801576e:	58d3      	ldr	r3, [r2, r3]
 8015770:	695b      	ldr	r3, [r3, #20]
 8015772:	220b      	movs	r2, #11
 8015774:	18ba      	adds	r2, r7, r2
 8015776:	7811      	ldrb	r1, [r2, #0]
 8015778:	68fa      	ldr	r2, [r7, #12]
 801577a:	0010      	movs	r0, r2
 801577c:	4798      	blx	r3
 801577e:	e001      	b.n	8015784 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015780:	2302      	movs	r3, #2
 8015782:	e000      	b.n	8015786 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8015784:	2300      	movs	r3, #0
}
 8015786:	0018      	movs	r0, r3
 8015788:	46bd      	mov	sp, r7
 801578a:	b006      	add	sp, #24
 801578c:	bd80      	pop	{r7, pc}

0801578e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801578e:	b580      	push	{r7, lr}
 8015790:	b082      	sub	sp, #8
 8015792:	af00      	add	r7, sp, #0
 8015794:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015796:	6878      	ldr	r0, [r7, #4]
 8015798:	2340      	movs	r3, #64	; 0x40
 801579a:	2200      	movs	r2, #0
 801579c:	2100      	movs	r1, #0
 801579e:	f002 fbaa 	bl	8017ef6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80157a2:	687a      	ldr	r2, [r7, #4]
 80157a4:	23ac      	movs	r3, #172	; 0xac
 80157a6:	005b      	lsls	r3, r3, #1
 80157a8:	2101      	movs	r1, #1
 80157aa:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80157ac:	687a      	ldr	r2, [r7, #4]
 80157ae:	23b2      	movs	r3, #178	; 0xb2
 80157b0:	005b      	lsls	r3, r3, #1
 80157b2:	2140      	movs	r1, #64	; 0x40
 80157b4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	2340      	movs	r3, #64	; 0x40
 80157ba:	2200      	movs	r2, #0
 80157bc:	2180      	movs	r1, #128	; 0x80
 80157be:	f002 fb9a 	bl	8017ef6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2201      	movs	r2, #1
 80157c6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2240      	movs	r2, #64	; 0x40
 80157cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80157ce:	687a      	ldr	r2, [r7, #4]
 80157d0:	23a7      	movs	r3, #167	; 0xa7
 80157d2:	009b      	lsls	r3, r3, #2
 80157d4:	2101      	movs	r1, #1
 80157d6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80157d8:	687a      	ldr	r2, [r7, #4]
 80157da:	23a5      	movs	r3, #165	; 0xa5
 80157dc:	009b      	lsls	r3, r3, #2
 80157de:	2100      	movs	r1, #0
 80157e0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	2200      	movs	r2, #0
 80157e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80157e8:	687a      	ldr	r2, [r7, #4]
 80157ea:	23a9      	movs	r3, #169	; 0xa9
 80157ec:	009b      	lsls	r3, r3, #2
 80157ee:	2100      	movs	r1, #0
 80157f0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80157f2:	687a      	ldr	r2, [r7, #4]
 80157f4:	23ae      	movs	r3, #174	; 0xae
 80157f6:	009b      	lsls	r3, r3, #2
 80157f8:	58d3      	ldr	r3, [r2, r3]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d00a      	beq.n	8015814 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80157fe:	687a      	ldr	r2, [r7, #4]
 8015800:	23ad      	movs	r3, #173	; 0xad
 8015802:	009b      	lsls	r3, r3, #2
 8015804:	58d3      	ldr	r3, [r2, r3]
 8015806:	685a      	ldr	r2, [r3, #4]
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	685b      	ldr	r3, [r3, #4]
 801580c:	b2d9      	uxtb	r1, r3
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	0018      	movs	r0, r3
 8015812:	4790      	blx	r2
  }

  return USBD_OK;
 8015814:	2300      	movs	r3, #0
}
 8015816:	0018      	movs	r0, r3
 8015818:	46bd      	mov	sp, r7
 801581a:	b002      	add	sp, #8
 801581c:	bd80      	pop	{r7, pc}

0801581e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801581e:	b580      	push	{r7, lr}
 8015820:	b082      	sub	sp, #8
 8015822:	af00      	add	r7, sp, #0
 8015824:	6078      	str	r0, [r7, #4]
 8015826:	000a      	movs	r2, r1
 8015828:	1cfb      	adds	r3, r7, #3
 801582a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	1cfa      	adds	r2, r7, #3
 8015830:	7812      	ldrb	r2, [r2, #0]
 8015832:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015834:	2300      	movs	r3, #0
}
 8015836:	0018      	movs	r0, r3
 8015838:	46bd      	mov	sp, r7
 801583a:	b002      	add	sp, #8
 801583c:	bd80      	pop	{r7, pc}
	...

08015840 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b082      	sub	sp, #8
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8015848:	687a      	ldr	r2, [r7, #4]
 801584a:	23a7      	movs	r3, #167	; 0xa7
 801584c:	009b      	lsls	r3, r3, #2
 801584e:	5cd1      	ldrb	r1, [r2, r3]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	4a06      	ldr	r2, [pc, #24]	; (801586c <USBD_LL_Suspend+0x2c>)
 8015854:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8015856:	687a      	ldr	r2, [r7, #4]
 8015858:	23a7      	movs	r3, #167	; 0xa7
 801585a:	009b      	lsls	r3, r3, #2
 801585c:	2104      	movs	r1, #4
 801585e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8015860:	2300      	movs	r3, #0
}
 8015862:	0018      	movs	r0, r3
 8015864:	46bd      	mov	sp, r7
 8015866:	b002      	add	sp, #8
 8015868:	bd80      	pop	{r7, pc}
 801586a:	46c0      	nop			; (mov r8, r8)
 801586c:	0000029d 	.word	0x0000029d

08015870 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015878:	687a      	ldr	r2, [r7, #4]
 801587a:	23a7      	movs	r3, #167	; 0xa7
 801587c:	009b      	lsls	r3, r3, #2
 801587e:	5cd3      	ldrb	r3, [r2, r3]
 8015880:	2b04      	cmp	r3, #4
 8015882:	d106      	bne.n	8015892 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	4a05      	ldr	r2, [pc, #20]	; (801589c <USBD_LL_Resume+0x2c>)
 8015888:	5c99      	ldrb	r1, [r3, r2]
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	23a7      	movs	r3, #167	; 0xa7
 801588e:	009b      	lsls	r3, r3, #2
 8015890:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8015892:	2300      	movs	r3, #0
}
 8015894:	0018      	movs	r0, r3
 8015896:	46bd      	mov	sp, r7
 8015898:	b002      	add	sp, #8
 801589a:	bd80      	pop	{r7, pc}
 801589c:	0000029d 	.word	0x0000029d

080158a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b082      	sub	sp, #8
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	23a7      	movs	r3, #167	; 0xa7
 80158ac:	009b      	lsls	r3, r3, #2
 80158ae:	5cd3      	ldrb	r3, [r2, r3]
 80158b0:	2b03      	cmp	r3, #3
 80158b2:	d10e      	bne.n	80158d2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80158b4:	687a      	ldr	r2, [r7, #4]
 80158b6:	23ad      	movs	r3, #173	; 0xad
 80158b8:	009b      	lsls	r3, r3, #2
 80158ba:	58d3      	ldr	r3, [r2, r3]
 80158bc:	69db      	ldr	r3, [r3, #28]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d007      	beq.n	80158d2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80158c2:	687a      	ldr	r2, [r7, #4]
 80158c4:	23ad      	movs	r3, #173	; 0xad
 80158c6:	009b      	lsls	r3, r3, #2
 80158c8:	58d3      	ldr	r3, [r2, r3]
 80158ca:	69db      	ldr	r3, [r3, #28]
 80158cc:	687a      	ldr	r2, [r7, #4]
 80158ce:	0010      	movs	r0, r2
 80158d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80158d2:	2300      	movs	r3, #0
}
 80158d4:	0018      	movs	r0, r3
 80158d6:	46bd      	mov	sp, r7
 80158d8:	b002      	add	sp, #8
 80158da:	bd80      	pop	{r7, pc}

080158dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80158e6:	230f      	movs	r3, #15
 80158e8:	18fb      	adds	r3, r7, r3
 80158ea:	2200      	movs	r2, #0
 80158ec:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	781b      	ldrb	r3, [r3, #0]
 80158f2:	001a      	movs	r2, r3
 80158f4:	2360      	movs	r3, #96	; 0x60
 80158f6:	4013      	ands	r3, r2
 80158f8:	2b40      	cmp	r3, #64	; 0x40
 80158fa:	d004      	beq.n	8015906 <USBD_StdDevReq+0x2a>
 80158fc:	d84f      	bhi.n	801599e <USBD_StdDevReq+0xc2>
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d00b      	beq.n	801591a <USBD_StdDevReq+0x3e>
 8015902:	2b20      	cmp	r3, #32
 8015904:	d14b      	bne.n	801599e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8015906:	687a      	ldr	r2, [r7, #4]
 8015908:	23ad      	movs	r3, #173	; 0xad
 801590a:	009b      	lsls	r3, r3, #2
 801590c:	58d3      	ldr	r3, [r2, r3]
 801590e:	689b      	ldr	r3, [r3, #8]
 8015910:	6839      	ldr	r1, [r7, #0]
 8015912:	687a      	ldr	r2, [r7, #4]
 8015914:	0010      	movs	r0, r2
 8015916:	4798      	blx	r3
      break;
 8015918:	e048      	b.n	80159ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	785b      	ldrb	r3, [r3, #1]
 801591e:	2b09      	cmp	r3, #9
 8015920:	d835      	bhi.n	801598e <USBD_StdDevReq+0xb2>
 8015922:	009a      	lsls	r2, r3, #2
 8015924:	4b25      	ldr	r3, [pc, #148]	; (80159bc <USBD_StdDevReq+0xe0>)
 8015926:	18d3      	adds	r3, r2, r3
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801592c:	683a      	ldr	r2, [r7, #0]
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	0011      	movs	r1, r2
 8015932:	0018      	movs	r0, r3
 8015934:	f000 fa52 	bl	8015ddc <USBD_GetDescriptor>
          break;
 8015938:	e030      	b.n	801599c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801593a:	683a      	ldr	r2, [r7, #0]
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	0011      	movs	r1, r2
 8015940:	0018      	movs	r0, r3
 8015942:	f000 fbfd 	bl	8016140 <USBD_SetAddress>
          break;
 8015946:	e029      	b.n	801599c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8015948:	683a      	ldr	r2, [r7, #0]
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	0011      	movs	r1, r2
 801594e:	0018      	movs	r0, r3
 8015950:	f000 fc4a 	bl	80161e8 <USBD_SetConfig>
          break;
 8015954:	e022      	b.n	801599c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015956:	683a      	ldr	r2, [r7, #0]
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	0011      	movs	r1, r2
 801595c:	0018      	movs	r0, r3
 801595e:	f000 fce7 	bl	8016330 <USBD_GetConfig>
          break;
 8015962:	e01b      	b.n	801599c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015964:	683a      	ldr	r2, [r7, #0]
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	0011      	movs	r1, r2
 801596a:	0018      	movs	r0, r3
 801596c:	f000 fd1b 	bl	80163a6 <USBD_GetStatus>
          break;
 8015970:	e014      	b.n	801599c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015972:	683a      	ldr	r2, [r7, #0]
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	0011      	movs	r1, r2
 8015978:	0018      	movs	r0, r3
 801597a:	f000 fd4e 	bl	801641a <USBD_SetFeature>
          break;
 801597e:	e00d      	b.n	801599c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015980:	683a      	ldr	r2, [r7, #0]
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	0011      	movs	r1, r2
 8015986:	0018      	movs	r0, r3
 8015988:	f000 fd5d 	bl	8016446 <USBD_ClrFeature>
          break;
 801598c:	e006      	b.n	801599c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801598e:	683a      	ldr	r2, [r7, #0]
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	0011      	movs	r1, r2
 8015994:	0018      	movs	r0, r3
 8015996:	f000 fdb7 	bl	8016508 <USBD_CtlError>
          break;
 801599a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 801599c:	e006      	b.n	80159ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801599e:	683a      	ldr	r2, [r7, #0]
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	0011      	movs	r1, r2
 80159a4:	0018      	movs	r0, r3
 80159a6:	f000 fdaf 	bl	8016508 <USBD_CtlError>
      break;
 80159aa:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80159ac:	230f      	movs	r3, #15
 80159ae:	18fb      	adds	r3, r7, r3
 80159b0:	781b      	ldrb	r3, [r3, #0]
}
 80159b2:	0018      	movs	r0, r3
 80159b4:	46bd      	mov	sp, r7
 80159b6:	b004      	add	sp, #16
 80159b8:	bd80      	pop	{r7, pc}
 80159ba:	46c0      	nop			; (mov r8, r8)
 80159bc:	0801a0ec 	.word	0x0801a0ec

080159c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80159c0:	b5b0      	push	{r4, r5, r7, lr}
 80159c2:	b084      	sub	sp, #16
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
 80159c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80159ca:	230f      	movs	r3, #15
 80159cc:	18fb      	adds	r3, r7, r3
 80159ce:	2200      	movs	r2, #0
 80159d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159d2:	683b      	ldr	r3, [r7, #0]
 80159d4:	781b      	ldrb	r3, [r3, #0]
 80159d6:	001a      	movs	r2, r3
 80159d8:	2360      	movs	r3, #96	; 0x60
 80159da:	4013      	ands	r3, r2
 80159dc:	2b40      	cmp	r3, #64	; 0x40
 80159de:	d004      	beq.n	80159ea <USBD_StdItfReq+0x2a>
 80159e0:	d839      	bhi.n	8015a56 <USBD_StdItfReq+0x96>
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d001      	beq.n	80159ea <USBD_StdItfReq+0x2a>
 80159e6:	2b20      	cmp	r3, #32
 80159e8:	d135      	bne.n	8015a56 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80159ea:	687a      	ldr	r2, [r7, #4]
 80159ec:	23a7      	movs	r3, #167	; 0xa7
 80159ee:	009b      	lsls	r3, r3, #2
 80159f0:	5cd3      	ldrb	r3, [r2, r3]
 80159f2:	3b01      	subs	r3, #1
 80159f4:	2b02      	cmp	r3, #2
 80159f6:	d825      	bhi.n	8015a44 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	889b      	ldrh	r3, [r3, #4]
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d819      	bhi.n	8015a36 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015a02:	687a      	ldr	r2, [r7, #4]
 8015a04:	23ad      	movs	r3, #173	; 0xad
 8015a06:	009b      	lsls	r3, r3, #2
 8015a08:	58d3      	ldr	r3, [r2, r3]
 8015a0a:	689b      	ldr	r3, [r3, #8]
 8015a0c:	250f      	movs	r5, #15
 8015a0e:	197c      	adds	r4, r7, r5
 8015a10:	6839      	ldr	r1, [r7, #0]
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	0010      	movs	r0, r2
 8015a16:	4798      	blx	r3
 8015a18:	0003      	movs	r3, r0
 8015a1a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	88db      	ldrh	r3, [r3, #6]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d116      	bne.n	8015a52 <USBD_StdItfReq+0x92>
 8015a24:	197b      	adds	r3, r7, r5
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d112      	bne.n	8015a52 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	0018      	movs	r0, r3
 8015a30:	f000 fe52 	bl	80166d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015a34:	e00d      	b.n	8015a52 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8015a36:	683a      	ldr	r2, [r7, #0]
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	0011      	movs	r1, r2
 8015a3c:	0018      	movs	r0, r3
 8015a3e:	f000 fd63 	bl	8016508 <USBD_CtlError>
          break;
 8015a42:	e006      	b.n	8015a52 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8015a44:	683a      	ldr	r2, [r7, #0]
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	0011      	movs	r1, r2
 8015a4a:	0018      	movs	r0, r3
 8015a4c:	f000 fd5c 	bl	8016508 <USBD_CtlError>
          break;
 8015a50:	e000      	b.n	8015a54 <USBD_StdItfReq+0x94>
          break;
 8015a52:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8015a54:	e006      	b.n	8015a64 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8015a56:	683a      	ldr	r2, [r7, #0]
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	0011      	movs	r1, r2
 8015a5c:	0018      	movs	r0, r3
 8015a5e:	f000 fd53 	bl	8016508 <USBD_CtlError>
      break;
 8015a62:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8015a64:	2300      	movs	r3, #0
}
 8015a66:	0018      	movs	r0, r3
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	b004      	add	sp, #16
 8015a6c:	bdb0      	pop	{r4, r5, r7, pc}

08015a6e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8015a6e:	b5b0      	push	{r4, r5, r7, lr}
 8015a70:	b084      	sub	sp, #16
 8015a72:	af00      	add	r7, sp, #0
 8015a74:	6078      	str	r0, [r7, #4]
 8015a76:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015a78:	230f      	movs	r3, #15
 8015a7a:	18fb      	adds	r3, r7, r3
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	889a      	ldrh	r2, [r3, #4]
 8015a84:	230e      	movs	r3, #14
 8015a86:	18fb      	adds	r3, r7, r3
 8015a88:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	781b      	ldrb	r3, [r3, #0]
 8015a8e:	001a      	movs	r2, r3
 8015a90:	2360      	movs	r3, #96	; 0x60
 8015a92:	4013      	ands	r3, r2
 8015a94:	2b40      	cmp	r3, #64	; 0x40
 8015a96:	d006      	beq.n	8015aa6 <USBD_StdEPReq+0x38>
 8015a98:	d900      	bls.n	8015a9c <USBD_StdEPReq+0x2e>
 8015a9a:	e190      	b.n	8015dbe <USBD_StdEPReq+0x350>
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d00c      	beq.n	8015aba <USBD_StdEPReq+0x4c>
 8015aa0:	2b20      	cmp	r3, #32
 8015aa2:	d000      	beq.n	8015aa6 <USBD_StdEPReq+0x38>
 8015aa4:	e18b      	b.n	8015dbe <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8015aa6:	687a      	ldr	r2, [r7, #4]
 8015aa8:	23ad      	movs	r3, #173	; 0xad
 8015aaa:	009b      	lsls	r3, r3, #2
 8015aac:	58d3      	ldr	r3, [r2, r3]
 8015aae:	689b      	ldr	r3, [r3, #8]
 8015ab0:	6839      	ldr	r1, [r7, #0]
 8015ab2:	687a      	ldr	r2, [r7, #4]
 8015ab4:	0010      	movs	r0, r2
 8015ab6:	4798      	blx	r3
      break;
 8015ab8:	e188      	b.n	8015dcc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	781b      	ldrb	r3, [r3, #0]
 8015abe:	001a      	movs	r2, r3
 8015ac0:	2360      	movs	r3, #96	; 0x60
 8015ac2:	4013      	ands	r3, r2
 8015ac4:	2b20      	cmp	r3, #32
 8015ac6:	d10f      	bne.n	8015ae8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015ac8:	687a      	ldr	r2, [r7, #4]
 8015aca:	23ad      	movs	r3, #173	; 0xad
 8015acc:	009b      	lsls	r3, r3, #2
 8015ace:	58d3      	ldr	r3, [r2, r3]
 8015ad0:	689b      	ldr	r3, [r3, #8]
 8015ad2:	250f      	movs	r5, #15
 8015ad4:	197c      	adds	r4, r7, r5
 8015ad6:	6839      	ldr	r1, [r7, #0]
 8015ad8:	687a      	ldr	r2, [r7, #4]
 8015ada:	0010      	movs	r0, r2
 8015adc:	4798      	blx	r3
 8015ade:	0003      	movs	r3, r0
 8015ae0:	7023      	strb	r3, [r4, #0]

        return ret;
 8015ae2:	197b      	adds	r3, r7, r5
 8015ae4:	781b      	ldrb	r3, [r3, #0]
 8015ae6:	e174      	b.n	8015dd2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8015ae8:	683b      	ldr	r3, [r7, #0]
 8015aea:	785b      	ldrb	r3, [r3, #1]
 8015aec:	2b03      	cmp	r3, #3
 8015aee:	d007      	beq.n	8015b00 <USBD_StdEPReq+0x92>
 8015af0:	dd00      	ble.n	8015af4 <USBD_StdEPReq+0x86>
 8015af2:	e15c      	b.n	8015dae <USBD_StdEPReq+0x340>
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d100      	bne.n	8015afa <USBD_StdEPReq+0x8c>
 8015af8:	e092      	b.n	8015c20 <USBD_StdEPReq+0x1b2>
 8015afa:	2b01      	cmp	r3, #1
 8015afc:	d04b      	beq.n	8015b96 <USBD_StdEPReq+0x128>
 8015afe:	e156      	b.n	8015dae <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015b00:	687a      	ldr	r2, [r7, #4]
 8015b02:	23a7      	movs	r3, #167	; 0xa7
 8015b04:	009b      	lsls	r3, r3, #2
 8015b06:	5cd3      	ldrb	r3, [r2, r3]
 8015b08:	2b02      	cmp	r3, #2
 8015b0a:	d002      	beq.n	8015b12 <USBD_StdEPReq+0xa4>
 8015b0c:	2b03      	cmp	r3, #3
 8015b0e:	d01d      	beq.n	8015b4c <USBD_StdEPReq+0xde>
 8015b10:	e039      	b.n	8015b86 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b12:	220e      	movs	r2, #14
 8015b14:	18bb      	adds	r3, r7, r2
 8015b16:	781b      	ldrb	r3, [r3, #0]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d010      	beq.n	8015b3e <USBD_StdEPReq+0xd0>
 8015b1c:	18bb      	adds	r3, r7, r2
 8015b1e:	781b      	ldrb	r3, [r3, #0]
 8015b20:	2b80      	cmp	r3, #128	; 0x80
 8015b22:	d00c      	beq.n	8015b3e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015b24:	18bb      	adds	r3, r7, r2
 8015b26:	781a      	ldrb	r2, [r3, #0]
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	0011      	movs	r1, r2
 8015b2c:	0018      	movs	r0, r3
 8015b2e:	f002 fa44 	bl	8017fba <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	2180      	movs	r1, #128	; 0x80
 8015b36:	0018      	movs	r0, r3
 8015b38:	f002 fa3f 	bl	8017fba <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b3c:	e02a      	b.n	8015b94 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8015b3e:	683a      	ldr	r2, [r7, #0]
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	0011      	movs	r1, r2
 8015b44:	0018      	movs	r0, r3
 8015b46:	f000 fcdf 	bl	8016508 <USBD_CtlError>
              break;
 8015b4a:	e023      	b.n	8015b94 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	885b      	ldrh	r3, [r3, #2]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d113      	bne.n	8015b7c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8015b54:	220e      	movs	r2, #14
 8015b56:	18bb      	adds	r3, r7, r2
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d00e      	beq.n	8015b7c <USBD_StdEPReq+0x10e>
 8015b5e:	18bb      	adds	r3, r7, r2
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	2b80      	cmp	r3, #128	; 0x80
 8015b64:	d00a      	beq.n	8015b7c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	88db      	ldrh	r3, [r3, #6]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d106      	bne.n	8015b7c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8015b6e:	18bb      	adds	r3, r7, r2
 8015b70:	781a      	ldrb	r2, [r3, #0]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	0011      	movs	r1, r2
 8015b76:	0018      	movs	r0, r3
 8015b78:	f002 fa1f 	bl	8017fba <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	0018      	movs	r0, r3
 8015b80:	f000 fdaa 	bl	80166d8 <USBD_CtlSendStatus>

              break;
 8015b84:	e006      	b.n	8015b94 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8015b86:	683a      	ldr	r2, [r7, #0]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	0011      	movs	r1, r2
 8015b8c:	0018      	movs	r0, r3
 8015b8e:	f000 fcbb 	bl	8016508 <USBD_CtlError>
              break;
 8015b92:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8015b94:	e112      	b.n	8015dbc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015b96:	687a      	ldr	r2, [r7, #4]
 8015b98:	23a7      	movs	r3, #167	; 0xa7
 8015b9a:	009b      	lsls	r3, r3, #2
 8015b9c:	5cd3      	ldrb	r3, [r2, r3]
 8015b9e:	2b02      	cmp	r3, #2
 8015ba0:	d002      	beq.n	8015ba8 <USBD_StdEPReq+0x13a>
 8015ba2:	2b03      	cmp	r3, #3
 8015ba4:	d01d      	beq.n	8015be2 <USBD_StdEPReq+0x174>
 8015ba6:	e032      	b.n	8015c0e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ba8:	220e      	movs	r2, #14
 8015baa:	18bb      	adds	r3, r7, r2
 8015bac:	781b      	ldrb	r3, [r3, #0]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d010      	beq.n	8015bd4 <USBD_StdEPReq+0x166>
 8015bb2:	18bb      	adds	r3, r7, r2
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	2b80      	cmp	r3, #128	; 0x80
 8015bb8:	d00c      	beq.n	8015bd4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015bba:	18bb      	adds	r3, r7, r2
 8015bbc:	781a      	ldrb	r2, [r3, #0]
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	0011      	movs	r1, r2
 8015bc2:	0018      	movs	r0, r3
 8015bc4:	f002 f9f9 	bl	8017fba <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	2180      	movs	r1, #128	; 0x80
 8015bcc:	0018      	movs	r0, r3
 8015bce:	f002 f9f4 	bl	8017fba <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015bd2:	e024      	b.n	8015c1e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8015bd4:	683a      	ldr	r2, [r7, #0]
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	0011      	movs	r1, r2
 8015bda:	0018      	movs	r0, r3
 8015bdc:	f000 fc94 	bl	8016508 <USBD_CtlError>
              break;
 8015be0:	e01d      	b.n	8015c1e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	885b      	ldrh	r3, [r3, #2]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d118      	bne.n	8015c1c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015bea:	210e      	movs	r1, #14
 8015bec:	187b      	adds	r3, r7, r1
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	227f      	movs	r2, #127	; 0x7f
 8015bf2:	4013      	ands	r3, r2
 8015bf4:	d006      	beq.n	8015c04 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8015bf6:	187b      	adds	r3, r7, r1
 8015bf8:	781a      	ldrb	r2, [r3, #0]
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	0011      	movs	r1, r2
 8015bfe:	0018      	movs	r0, r3
 8015c00:	f002 fa06 	bl	8018010 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	0018      	movs	r0, r3
 8015c08:	f000 fd66 	bl	80166d8 <USBD_CtlSendStatus>
              }
              break;
 8015c0c:	e006      	b.n	8015c1c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8015c0e:	683a      	ldr	r2, [r7, #0]
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	0011      	movs	r1, r2
 8015c14:	0018      	movs	r0, r3
 8015c16:	f000 fc77 	bl	8016508 <USBD_CtlError>
              break;
 8015c1a:	e000      	b.n	8015c1e <USBD_StdEPReq+0x1b0>
              break;
 8015c1c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8015c1e:	e0cd      	b.n	8015dbc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015c20:	687a      	ldr	r2, [r7, #4]
 8015c22:	23a7      	movs	r3, #167	; 0xa7
 8015c24:	009b      	lsls	r3, r3, #2
 8015c26:	5cd3      	ldrb	r3, [r2, r3]
 8015c28:	2b02      	cmp	r3, #2
 8015c2a:	d002      	beq.n	8015c32 <USBD_StdEPReq+0x1c4>
 8015c2c:	2b03      	cmp	r3, #3
 8015c2e:	d03c      	beq.n	8015caa <USBD_StdEPReq+0x23c>
 8015c30:	e0b5      	b.n	8015d9e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015c32:	220e      	movs	r2, #14
 8015c34:	18bb      	adds	r3, r7, r2
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d00a      	beq.n	8015c52 <USBD_StdEPReq+0x1e4>
 8015c3c:	18bb      	adds	r3, r7, r2
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	2b80      	cmp	r3, #128	; 0x80
 8015c42:	d006      	beq.n	8015c52 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8015c44:	683a      	ldr	r2, [r7, #0]
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	0011      	movs	r1, r2
 8015c4a:	0018      	movs	r0, r3
 8015c4c:	f000 fc5c 	bl	8016508 <USBD_CtlError>
                break;
 8015c50:	e0ac      	b.n	8015dac <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c52:	220e      	movs	r2, #14
 8015c54:	18bb      	adds	r3, r7, r2
 8015c56:	781b      	ldrb	r3, [r3, #0]
 8015c58:	b25b      	sxtb	r3, r3
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	da0c      	bge.n	8015c78 <USBD_StdEPReq+0x20a>
 8015c5e:	18bb      	adds	r3, r7, r2
 8015c60:	781b      	ldrb	r3, [r3, #0]
 8015c62:	227f      	movs	r2, #127	; 0x7f
 8015c64:	401a      	ands	r2, r3
 8015c66:	0013      	movs	r3, r2
 8015c68:	009b      	lsls	r3, r3, #2
 8015c6a:	189b      	adds	r3, r3, r2
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	3310      	adds	r3, #16
 8015c70:	687a      	ldr	r2, [r7, #4]
 8015c72:	18d3      	adds	r3, r2, r3
 8015c74:	3304      	adds	r3, #4
 8015c76:	e00d      	b.n	8015c94 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c78:	230e      	movs	r3, #14
 8015c7a:	18fb      	adds	r3, r7, r3
 8015c7c:	781b      	ldrb	r3, [r3, #0]
 8015c7e:	227f      	movs	r2, #127	; 0x7f
 8015c80:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c82:	0013      	movs	r3, r2
 8015c84:	009b      	lsls	r3, r3, #2
 8015c86:	189b      	adds	r3, r3, r2
 8015c88:	009b      	lsls	r3, r3, #2
 8015c8a:	3351      	adds	r3, #81	; 0x51
 8015c8c:	33ff      	adds	r3, #255	; 0xff
 8015c8e:	687a      	ldr	r2, [r7, #4]
 8015c90:	18d3      	adds	r3, r2, r3
 8015c92:	3304      	adds	r3, #4
 8015c94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015c96:	68bb      	ldr	r3, [r7, #8]
 8015c98:	2200      	movs	r2, #0
 8015c9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015c9c:	68b9      	ldr	r1, [r7, #8]
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	2202      	movs	r2, #2
 8015ca2:	0018      	movs	r0, r3
 8015ca4:	f000 fcae 	bl	8016604 <USBD_CtlSendData>
              break;
 8015ca8:	e080      	b.n	8015dac <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015caa:	220e      	movs	r2, #14
 8015cac:	18bb      	adds	r3, r7, r2
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	b25b      	sxtb	r3, r3
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	da14      	bge.n	8015ce0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015cb6:	18bb      	adds	r3, r7, r2
 8015cb8:	781b      	ldrb	r3, [r3, #0]
 8015cba:	220f      	movs	r2, #15
 8015cbc:	401a      	ands	r2, r3
 8015cbe:	6879      	ldr	r1, [r7, #4]
 8015cc0:	0013      	movs	r3, r2
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	189b      	adds	r3, r3, r2
 8015cc6:	009b      	lsls	r3, r3, #2
 8015cc8:	18cb      	adds	r3, r1, r3
 8015cca:	3318      	adds	r3, #24
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d11e      	bne.n	8015d10 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8015cd2:	683a      	ldr	r2, [r7, #0]
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	0011      	movs	r1, r2
 8015cd8:	0018      	movs	r0, r3
 8015cda:	f000 fc15 	bl	8016508 <USBD_CtlError>
                  break;
 8015cde:	e065      	b.n	8015dac <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015ce0:	230e      	movs	r3, #14
 8015ce2:	18fb      	adds	r3, r7, r3
 8015ce4:	781b      	ldrb	r3, [r3, #0]
 8015ce6:	220f      	movs	r2, #15
 8015ce8:	401a      	ands	r2, r3
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	23ac      	movs	r3, #172	; 0xac
 8015cee:	0059      	lsls	r1, r3, #1
 8015cf0:	0013      	movs	r3, r2
 8015cf2:	009b      	lsls	r3, r3, #2
 8015cf4:	189b      	adds	r3, r3, r2
 8015cf6:	009b      	lsls	r3, r3, #2
 8015cf8:	18c3      	adds	r3, r0, r3
 8015cfa:	185b      	adds	r3, r3, r1
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d106      	bne.n	8015d10 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8015d02:	683a      	ldr	r2, [r7, #0]
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	0011      	movs	r1, r2
 8015d08:	0018      	movs	r0, r3
 8015d0a:	f000 fbfd 	bl	8016508 <USBD_CtlError>
                  break;
 8015d0e:	e04d      	b.n	8015dac <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d10:	220e      	movs	r2, #14
 8015d12:	18bb      	adds	r3, r7, r2
 8015d14:	781b      	ldrb	r3, [r3, #0]
 8015d16:	b25b      	sxtb	r3, r3
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	da0c      	bge.n	8015d36 <USBD_StdEPReq+0x2c8>
 8015d1c:	18bb      	adds	r3, r7, r2
 8015d1e:	781b      	ldrb	r3, [r3, #0]
 8015d20:	227f      	movs	r2, #127	; 0x7f
 8015d22:	401a      	ands	r2, r3
 8015d24:	0013      	movs	r3, r2
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	189b      	adds	r3, r3, r2
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	3310      	adds	r3, #16
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	18d3      	adds	r3, r2, r3
 8015d32:	3304      	adds	r3, #4
 8015d34:	e00d      	b.n	8015d52 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015d36:	230e      	movs	r3, #14
 8015d38:	18fb      	adds	r3, r7, r3
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	227f      	movs	r2, #127	; 0x7f
 8015d3e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015d40:	0013      	movs	r3, r2
 8015d42:	009b      	lsls	r3, r3, #2
 8015d44:	189b      	adds	r3, r3, r2
 8015d46:	009b      	lsls	r3, r3, #2
 8015d48:	3351      	adds	r3, #81	; 0x51
 8015d4a:	33ff      	adds	r3, #255	; 0xff
 8015d4c:	687a      	ldr	r2, [r7, #4]
 8015d4e:	18d3      	adds	r3, r2, r3
 8015d50:	3304      	adds	r3, #4
 8015d52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015d54:	220e      	movs	r2, #14
 8015d56:	18bb      	adds	r3, r7, r2
 8015d58:	781b      	ldrb	r3, [r3, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d003      	beq.n	8015d66 <USBD_StdEPReq+0x2f8>
 8015d5e:	18bb      	adds	r3, r7, r2
 8015d60:	781b      	ldrb	r3, [r3, #0]
 8015d62:	2b80      	cmp	r3, #128	; 0x80
 8015d64:	d103      	bne.n	8015d6e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8015d66:	68bb      	ldr	r3, [r7, #8]
 8015d68:	2200      	movs	r2, #0
 8015d6a:	601a      	str	r2, [r3, #0]
 8015d6c:	e010      	b.n	8015d90 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8015d6e:	230e      	movs	r3, #14
 8015d70:	18fb      	adds	r3, r7, r3
 8015d72:	781a      	ldrb	r2, [r3, #0]
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	0011      	movs	r1, r2
 8015d78:	0018      	movs	r0, r3
 8015d7a:	f002 f974 	bl	8018066 <USBD_LL_IsStallEP>
 8015d7e:	1e03      	subs	r3, r0, #0
 8015d80:	d003      	beq.n	8015d8a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8015d82:	68bb      	ldr	r3, [r7, #8]
 8015d84:	2201      	movs	r2, #1
 8015d86:	601a      	str	r2, [r3, #0]
 8015d88:	e002      	b.n	8015d90 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015d90:	68b9      	ldr	r1, [r7, #8]
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	2202      	movs	r2, #2
 8015d96:	0018      	movs	r0, r3
 8015d98:	f000 fc34 	bl	8016604 <USBD_CtlSendData>
              break;
 8015d9c:	e006      	b.n	8015dac <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8015d9e:	683a      	ldr	r2, [r7, #0]
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	0011      	movs	r1, r2
 8015da4:	0018      	movs	r0, r3
 8015da6:	f000 fbaf 	bl	8016508 <USBD_CtlError>
              break;
 8015daa:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8015dac:	e006      	b.n	8015dbc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8015dae:	683a      	ldr	r2, [r7, #0]
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	0011      	movs	r1, r2
 8015db4:	0018      	movs	r0, r3
 8015db6:	f000 fba7 	bl	8016508 <USBD_CtlError>
          break;
 8015dba:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8015dbc:	e006      	b.n	8015dcc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8015dbe:	683a      	ldr	r2, [r7, #0]
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	0011      	movs	r1, r2
 8015dc4:	0018      	movs	r0, r3
 8015dc6:	f000 fb9f 	bl	8016508 <USBD_CtlError>
      break;
 8015dca:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8015dcc:	230f      	movs	r3, #15
 8015dce:	18fb      	adds	r3, r7, r3
 8015dd0:	781b      	ldrb	r3, [r3, #0]
}
 8015dd2:	0018      	movs	r0, r3
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	b004      	add	sp, #16
 8015dd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015ddc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b084      	sub	sp, #16
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
 8015de4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015de6:	2308      	movs	r3, #8
 8015de8:	18fb      	adds	r3, r7, r3
 8015dea:	2200      	movs	r2, #0
 8015dec:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8015dee:	2300      	movs	r3, #0
 8015df0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015df2:	230b      	movs	r3, #11
 8015df4:	18fb      	adds	r3, r7, r3
 8015df6:	2200      	movs	r2, #0
 8015df8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	885b      	ldrh	r3, [r3, #2]
 8015dfe:	0a1b      	lsrs	r3, r3, #8
 8015e00:	b29b      	uxth	r3, r3
 8015e02:	2b07      	cmp	r3, #7
 8015e04:	d900      	bls.n	8015e08 <USBD_GetDescriptor+0x2c>
 8015e06:	e159      	b.n	80160bc <USBD_GetDescriptor+0x2e0>
 8015e08:	009a      	lsls	r2, r3, #2
 8015e0a:	4bcb      	ldr	r3, [pc, #812]	; (8016138 <USBD_GetDescriptor+0x35c>)
 8015e0c:	18d3      	adds	r3, r2, r3
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015e12:	687a      	ldr	r2, [r7, #4]
 8015e14:	23ac      	movs	r3, #172	; 0xac
 8015e16:	009b      	lsls	r3, r3, #2
 8015e18:	58d3      	ldr	r3, [r2, r3]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	687a      	ldr	r2, [r7, #4]
 8015e1e:	7c12      	ldrb	r2, [r2, #16]
 8015e20:	2108      	movs	r1, #8
 8015e22:	1879      	adds	r1, r7, r1
 8015e24:	0010      	movs	r0, r2
 8015e26:	4798      	blx	r3
 8015e28:	0003      	movs	r3, r0
 8015e2a:	60fb      	str	r3, [r7, #12]
      break;
 8015e2c:	e153      	b.n	80160d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	7c1b      	ldrb	r3, [r3, #16]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d10f      	bne.n	8015e56 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015e36:	687a      	ldr	r2, [r7, #4]
 8015e38:	23ad      	movs	r3, #173	; 0xad
 8015e3a:	009b      	lsls	r3, r3, #2
 8015e3c:	58d3      	ldr	r3, [r2, r3]
 8015e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e40:	2208      	movs	r2, #8
 8015e42:	18ba      	adds	r2, r7, r2
 8015e44:	0010      	movs	r0, r2
 8015e46:	4798      	blx	r3
 8015e48:	0003      	movs	r3, r0
 8015e4a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	3301      	adds	r3, #1
 8015e50:	2202      	movs	r2, #2
 8015e52:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015e54:	e13f      	b.n	80160d6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015e56:	687a      	ldr	r2, [r7, #4]
 8015e58:	23ad      	movs	r3, #173	; 0xad
 8015e5a:	009b      	lsls	r3, r3, #2
 8015e5c:	58d3      	ldr	r3, [r2, r3]
 8015e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e60:	2208      	movs	r2, #8
 8015e62:	18ba      	adds	r2, r7, r2
 8015e64:	0010      	movs	r0, r2
 8015e66:	4798      	blx	r3
 8015e68:	0003      	movs	r3, r0
 8015e6a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	3301      	adds	r3, #1
 8015e70:	2202      	movs	r2, #2
 8015e72:	701a      	strb	r2, [r3, #0]
      break;
 8015e74:	e12f      	b.n	80160d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015e76:	683b      	ldr	r3, [r7, #0]
 8015e78:	885b      	ldrh	r3, [r3, #2]
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	2b05      	cmp	r3, #5
 8015e7e:	d900      	bls.n	8015e82 <USBD_GetDescriptor+0xa6>
 8015e80:	e0d0      	b.n	8016024 <USBD_GetDescriptor+0x248>
 8015e82:	009a      	lsls	r2, r3, #2
 8015e84:	4bad      	ldr	r3, [pc, #692]	; (801613c <USBD_GetDescriptor+0x360>)
 8015e86:	18d3      	adds	r3, r2, r3
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015e8c:	687a      	ldr	r2, [r7, #4]
 8015e8e:	23ac      	movs	r3, #172	; 0xac
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	58d3      	ldr	r3, [r2, r3]
 8015e94:	685b      	ldr	r3, [r3, #4]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d00d      	beq.n	8015eb6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015e9a:	687a      	ldr	r2, [r7, #4]
 8015e9c:	23ac      	movs	r3, #172	; 0xac
 8015e9e:	009b      	lsls	r3, r3, #2
 8015ea0:	58d3      	ldr	r3, [r2, r3]
 8015ea2:	685b      	ldr	r3, [r3, #4]
 8015ea4:	687a      	ldr	r2, [r7, #4]
 8015ea6:	7c12      	ldrb	r2, [r2, #16]
 8015ea8:	2108      	movs	r1, #8
 8015eaa:	1879      	adds	r1, r7, r1
 8015eac:	0010      	movs	r0, r2
 8015eae:	4798      	blx	r3
 8015eb0:	0003      	movs	r3, r0
 8015eb2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015eb4:	e0c3      	b.n	801603e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015eb6:	683a      	ldr	r2, [r7, #0]
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	0011      	movs	r1, r2
 8015ebc:	0018      	movs	r0, r3
 8015ebe:	f000 fb23 	bl	8016508 <USBD_CtlError>
            err++;
 8015ec2:	210b      	movs	r1, #11
 8015ec4:	187b      	adds	r3, r7, r1
 8015ec6:	781a      	ldrb	r2, [r3, #0]
 8015ec8:	187b      	adds	r3, r7, r1
 8015eca:	3201      	adds	r2, #1
 8015ecc:	701a      	strb	r2, [r3, #0]
          break;
 8015ece:	e0b6      	b.n	801603e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015ed0:	687a      	ldr	r2, [r7, #4]
 8015ed2:	23ac      	movs	r3, #172	; 0xac
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	58d3      	ldr	r3, [r2, r3]
 8015ed8:	689b      	ldr	r3, [r3, #8]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d00d      	beq.n	8015efa <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	23ac      	movs	r3, #172	; 0xac
 8015ee2:	009b      	lsls	r3, r3, #2
 8015ee4:	58d3      	ldr	r3, [r2, r3]
 8015ee6:	689b      	ldr	r3, [r3, #8]
 8015ee8:	687a      	ldr	r2, [r7, #4]
 8015eea:	7c12      	ldrb	r2, [r2, #16]
 8015eec:	2108      	movs	r1, #8
 8015eee:	1879      	adds	r1, r7, r1
 8015ef0:	0010      	movs	r0, r2
 8015ef2:	4798      	blx	r3
 8015ef4:	0003      	movs	r3, r0
 8015ef6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ef8:	e0a1      	b.n	801603e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015efa:	683a      	ldr	r2, [r7, #0]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	0011      	movs	r1, r2
 8015f00:	0018      	movs	r0, r3
 8015f02:	f000 fb01 	bl	8016508 <USBD_CtlError>
            err++;
 8015f06:	210b      	movs	r1, #11
 8015f08:	187b      	adds	r3, r7, r1
 8015f0a:	781a      	ldrb	r2, [r3, #0]
 8015f0c:	187b      	adds	r3, r7, r1
 8015f0e:	3201      	adds	r2, #1
 8015f10:	701a      	strb	r2, [r3, #0]
          break;
 8015f12:	e094      	b.n	801603e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015f14:	687a      	ldr	r2, [r7, #4]
 8015f16:	23ac      	movs	r3, #172	; 0xac
 8015f18:	009b      	lsls	r3, r3, #2
 8015f1a:	58d3      	ldr	r3, [r2, r3]
 8015f1c:	68db      	ldr	r3, [r3, #12]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d00d      	beq.n	8015f3e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015f22:	687a      	ldr	r2, [r7, #4]
 8015f24:	23ac      	movs	r3, #172	; 0xac
 8015f26:	009b      	lsls	r3, r3, #2
 8015f28:	58d3      	ldr	r3, [r2, r3]
 8015f2a:	68db      	ldr	r3, [r3, #12]
 8015f2c:	687a      	ldr	r2, [r7, #4]
 8015f2e:	7c12      	ldrb	r2, [r2, #16]
 8015f30:	2108      	movs	r1, #8
 8015f32:	1879      	adds	r1, r7, r1
 8015f34:	0010      	movs	r0, r2
 8015f36:	4798      	blx	r3
 8015f38:	0003      	movs	r3, r0
 8015f3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f3c:	e07f      	b.n	801603e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015f3e:	683a      	ldr	r2, [r7, #0]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	0011      	movs	r1, r2
 8015f44:	0018      	movs	r0, r3
 8015f46:	f000 fadf 	bl	8016508 <USBD_CtlError>
            err++;
 8015f4a:	210b      	movs	r1, #11
 8015f4c:	187b      	adds	r3, r7, r1
 8015f4e:	781a      	ldrb	r2, [r3, #0]
 8015f50:	187b      	adds	r3, r7, r1
 8015f52:	3201      	adds	r2, #1
 8015f54:	701a      	strb	r2, [r3, #0]
          break;
 8015f56:	e072      	b.n	801603e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015f58:	687a      	ldr	r2, [r7, #4]
 8015f5a:	23ac      	movs	r3, #172	; 0xac
 8015f5c:	009b      	lsls	r3, r3, #2
 8015f5e:	58d3      	ldr	r3, [r2, r3]
 8015f60:	691b      	ldr	r3, [r3, #16]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d00d      	beq.n	8015f82 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015f66:	687a      	ldr	r2, [r7, #4]
 8015f68:	23ac      	movs	r3, #172	; 0xac
 8015f6a:	009b      	lsls	r3, r3, #2
 8015f6c:	58d3      	ldr	r3, [r2, r3]
 8015f6e:	691b      	ldr	r3, [r3, #16]
 8015f70:	687a      	ldr	r2, [r7, #4]
 8015f72:	7c12      	ldrb	r2, [r2, #16]
 8015f74:	2108      	movs	r1, #8
 8015f76:	1879      	adds	r1, r7, r1
 8015f78:	0010      	movs	r0, r2
 8015f7a:	4798      	blx	r3
 8015f7c:	0003      	movs	r3, r0
 8015f7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015f80:	e05d      	b.n	801603e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015f82:	683a      	ldr	r2, [r7, #0]
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	0011      	movs	r1, r2
 8015f88:	0018      	movs	r0, r3
 8015f8a:	f000 fabd 	bl	8016508 <USBD_CtlError>
            err++;
 8015f8e:	210b      	movs	r1, #11
 8015f90:	187b      	adds	r3, r7, r1
 8015f92:	781a      	ldrb	r2, [r3, #0]
 8015f94:	187b      	adds	r3, r7, r1
 8015f96:	3201      	adds	r2, #1
 8015f98:	701a      	strb	r2, [r3, #0]
          break;
 8015f9a:	e050      	b.n	801603e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	23ac      	movs	r3, #172	; 0xac
 8015fa0:	009b      	lsls	r3, r3, #2
 8015fa2:	58d3      	ldr	r3, [r2, r3]
 8015fa4:	695b      	ldr	r3, [r3, #20]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d00d      	beq.n	8015fc6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	23ac      	movs	r3, #172	; 0xac
 8015fae:	009b      	lsls	r3, r3, #2
 8015fb0:	58d3      	ldr	r3, [r2, r3]
 8015fb2:	695b      	ldr	r3, [r3, #20]
 8015fb4:	687a      	ldr	r2, [r7, #4]
 8015fb6:	7c12      	ldrb	r2, [r2, #16]
 8015fb8:	2108      	movs	r1, #8
 8015fba:	1879      	adds	r1, r7, r1
 8015fbc:	0010      	movs	r0, r2
 8015fbe:	4798      	blx	r3
 8015fc0:	0003      	movs	r3, r0
 8015fc2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015fc4:	e03b      	b.n	801603e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015fc6:	683a      	ldr	r2, [r7, #0]
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	0011      	movs	r1, r2
 8015fcc:	0018      	movs	r0, r3
 8015fce:	f000 fa9b 	bl	8016508 <USBD_CtlError>
            err++;
 8015fd2:	210b      	movs	r1, #11
 8015fd4:	187b      	adds	r3, r7, r1
 8015fd6:	781a      	ldrb	r2, [r3, #0]
 8015fd8:	187b      	adds	r3, r7, r1
 8015fda:	3201      	adds	r2, #1
 8015fdc:	701a      	strb	r2, [r3, #0]
          break;
 8015fde:	e02e      	b.n	801603e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015fe0:	687a      	ldr	r2, [r7, #4]
 8015fe2:	23ac      	movs	r3, #172	; 0xac
 8015fe4:	009b      	lsls	r3, r3, #2
 8015fe6:	58d3      	ldr	r3, [r2, r3]
 8015fe8:	699b      	ldr	r3, [r3, #24]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d00d      	beq.n	801600a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015fee:	687a      	ldr	r2, [r7, #4]
 8015ff0:	23ac      	movs	r3, #172	; 0xac
 8015ff2:	009b      	lsls	r3, r3, #2
 8015ff4:	58d3      	ldr	r3, [r2, r3]
 8015ff6:	699b      	ldr	r3, [r3, #24]
 8015ff8:	687a      	ldr	r2, [r7, #4]
 8015ffa:	7c12      	ldrb	r2, [r2, #16]
 8015ffc:	2108      	movs	r1, #8
 8015ffe:	1879      	adds	r1, r7, r1
 8016000:	0010      	movs	r0, r2
 8016002:	4798      	blx	r3
 8016004:	0003      	movs	r3, r0
 8016006:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016008:	e019      	b.n	801603e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801600a:	683a      	ldr	r2, [r7, #0]
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	0011      	movs	r1, r2
 8016010:	0018      	movs	r0, r3
 8016012:	f000 fa79 	bl	8016508 <USBD_CtlError>
            err++;
 8016016:	210b      	movs	r1, #11
 8016018:	187b      	adds	r3, r7, r1
 801601a:	781a      	ldrb	r2, [r3, #0]
 801601c:	187b      	adds	r3, r7, r1
 801601e:	3201      	adds	r2, #1
 8016020:	701a      	strb	r2, [r3, #0]
          break;
 8016022:	e00c      	b.n	801603e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8016024:	683a      	ldr	r2, [r7, #0]
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	0011      	movs	r1, r2
 801602a:	0018      	movs	r0, r3
 801602c:	f000 fa6c 	bl	8016508 <USBD_CtlError>
          err++;
 8016030:	210b      	movs	r1, #11
 8016032:	187b      	adds	r3, r7, r1
 8016034:	781a      	ldrb	r2, [r3, #0]
 8016036:	187b      	adds	r3, r7, r1
 8016038:	3201      	adds	r2, #1
 801603a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801603c:	e04b      	b.n	80160d6 <USBD_GetDescriptor+0x2fa>
 801603e:	e04a      	b.n	80160d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	7c1b      	ldrb	r3, [r3, #16]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d10b      	bne.n	8016060 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016048:	687a      	ldr	r2, [r7, #4]
 801604a:	23ad      	movs	r3, #173	; 0xad
 801604c:	009b      	lsls	r3, r3, #2
 801604e:	58d3      	ldr	r3, [r2, r3]
 8016050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016052:	2208      	movs	r2, #8
 8016054:	18ba      	adds	r2, r7, r2
 8016056:	0010      	movs	r0, r2
 8016058:	4798      	blx	r3
 801605a:	0003      	movs	r3, r0
 801605c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801605e:	e03a      	b.n	80160d6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8016060:	683a      	ldr	r2, [r7, #0]
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	0011      	movs	r1, r2
 8016066:	0018      	movs	r0, r3
 8016068:	f000 fa4e 	bl	8016508 <USBD_CtlError>
        err++;
 801606c:	210b      	movs	r1, #11
 801606e:	187b      	adds	r3, r7, r1
 8016070:	781a      	ldrb	r2, [r3, #0]
 8016072:	187b      	adds	r3, r7, r1
 8016074:	3201      	adds	r2, #1
 8016076:	701a      	strb	r2, [r3, #0]
      break;
 8016078:	e02d      	b.n	80160d6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	7c1b      	ldrb	r3, [r3, #16]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d10f      	bne.n	80160a2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8016082:	687a      	ldr	r2, [r7, #4]
 8016084:	23ad      	movs	r3, #173	; 0xad
 8016086:	009b      	lsls	r3, r3, #2
 8016088:	58d3      	ldr	r3, [r2, r3]
 801608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801608c:	2208      	movs	r2, #8
 801608e:	18ba      	adds	r2, r7, r2
 8016090:	0010      	movs	r0, r2
 8016092:	4798      	blx	r3
 8016094:	0003      	movs	r3, r0
 8016096:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	3301      	adds	r3, #1
 801609c:	2207      	movs	r2, #7
 801609e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80160a0:	e019      	b.n	80160d6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80160a2:	683a      	ldr	r2, [r7, #0]
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	0011      	movs	r1, r2
 80160a8:	0018      	movs	r0, r3
 80160aa:	f000 fa2d 	bl	8016508 <USBD_CtlError>
        err++;
 80160ae:	210b      	movs	r1, #11
 80160b0:	187b      	adds	r3, r7, r1
 80160b2:	781a      	ldrb	r2, [r3, #0]
 80160b4:	187b      	adds	r3, r7, r1
 80160b6:	3201      	adds	r2, #1
 80160b8:	701a      	strb	r2, [r3, #0]
      break;
 80160ba:	e00c      	b.n	80160d6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80160bc:	683a      	ldr	r2, [r7, #0]
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	0011      	movs	r1, r2
 80160c2:	0018      	movs	r0, r3
 80160c4:	f000 fa20 	bl	8016508 <USBD_CtlError>
      err++;
 80160c8:	210b      	movs	r1, #11
 80160ca:	187b      	adds	r3, r7, r1
 80160cc:	781a      	ldrb	r2, [r3, #0]
 80160ce:	187b      	adds	r3, r7, r1
 80160d0:	3201      	adds	r2, #1
 80160d2:	701a      	strb	r2, [r3, #0]
      break;
 80160d4:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80160d6:	230b      	movs	r3, #11
 80160d8:	18fb      	adds	r3, r7, r3
 80160da:	781b      	ldrb	r3, [r3, #0]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d127      	bne.n	8016130 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80160e0:	2108      	movs	r1, #8
 80160e2:	187b      	adds	r3, r7, r1
 80160e4:	881b      	ldrh	r3, [r3, #0]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d019      	beq.n	801611e <USBD_GetDescriptor+0x342>
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	88db      	ldrh	r3, [r3, #6]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d015      	beq.n	801611e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	88da      	ldrh	r2, [r3, #6]
 80160f6:	187b      	adds	r3, r7, r1
 80160f8:	881b      	ldrh	r3, [r3, #0]
 80160fa:	1c18      	adds	r0, r3, #0
 80160fc:	1c11      	adds	r1, r2, #0
 80160fe:	b28a      	uxth	r2, r1
 8016100:	b283      	uxth	r3, r0
 8016102:	429a      	cmp	r2, r3
 8016104:	d900      	bls.n	8016108 <USBD_GetDescriptor+0x32c>
 8016106:	1c01      	adds	r1, r0, #0
 8016108:	b28a      	uxth	r2, r1
 801610a:	2108      	movs	r1, #8
 801610c:	187b      	adds	r3, r7, r1
 801610e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016110:	187b      	adds	r3, r7, r1
 8016112:	881a      	ldrh	r2, [r3, #0]
 8016114:	68f9      	ldr	r1, [r7, #12]
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	0018      	movs	r0, r3
 801611a:	f000 fa73 	bl	8016604 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	88db      	ldrh	r3, [r3, #6]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d105      	bne.n	8016132 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	0018      	movs	r0, r3
 801612a:	f000 fad5 	bl	80166d8 <USBD_CtlSendStatus>
 801612e:	e000      	b.n	8016132 <USBD_GetDescriptor+0x356>
    return;
 8016130:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8016132:	46bd      	mov	sp, r7
 8016134:	b004      	add	sp, #16
 8016136:	bd80      	pop	{r7, pc}
 8016138:	0801a114 	.word	0x0801a114
 801613c:	0801a134 	.word	0x0801a134

08016140 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016140:	b590      	push	{r4, r7, lr}
 8016142:	b085      	sub	sp, #20
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	889b      	ldrh	r3, [r3, #4]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d13d      	bne.n	80161ce <USBD_SetAddress+0x8e>
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	88db      	ldrh	r3, [r3, #6]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d139      	bne.n	80161ce <USBD_SetAddress+0x8e>
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	885b      	ldrh	r3, [r3, #2]
 801615e:	2b7f      	cmp	r3, #127	; 0x7f
 8016160:	d835      	bhi.n	80161ce <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016162:	683b      	ldr	r3, [r7, #0]
 8016164:	885b      	ldrh	r3, [r3, #2]
 8016166:	b2da      	uxtb	r2, r3
 8016168:	230f      	movs	r3, #15
 801616a:	18fb      	adds	r3, r7, r3
 801616c:	217f      	movs	r1, #127	; 0x7f
 801616e:	400a      	ands	r2, r1
 8016170:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016172:	687a      	ldr	r2, [r7, #4]
 8016174:	23a7      	movs	r3, #167	; 0xa7
 8016176:	009b      	lsls	r3, r3, #2
 8016178:	5cd3      	ldrb	r3, [r2, r3]
 801617a:	2b03      	cmp	r3, #3
 801617c:	d106      	bne.n	801618c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801617e:	683a      	ldr	r2, [r7, #0]
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	0011      	movs	r1, r2
 8016184:	0018      	movs	r0, r3
 8016186:	f000 f9bf 	bl	8016508 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801618a:	e027      	b.n	80161dc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	240f      	movs	r4, #15
 8016190:	193a      	adds	r2, r7, r4
 8016192:	4914      	ldr	r1, [pc, #80]	; (80161e4 <USBD_SetAddress+0xa4>)
 8016194:	7812      	ldrb	r2, [r2, #0]
 8016196:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016198:	193b      	adds	r3, r7, r4
 801619a:	781a      	ldrb	r2, [r3, #0]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	0011      	movs	r1, r2
 80161a0:	0018      	movs	r0, r3
 80161a2:	f001 ff91 	bl	80180c8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	0018      	movs	r0, r3
 80161aa:	f000 fa95 	bl	80166d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80161ae:	193b      	adds	r3, r7, r4
 80161b0:	781b      	ldrb	r3, [r3, #0]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d005      	beq.n	80161c2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80161b6:	687a      	ldr	r2, [r7, #4]
 80161b8:	23a7      	movs	r3, #167	; 0xa7
 80161ba:	009b      	lsls	r3, r3, #2
 80161bc:	2102      	movs	r1, #2
 80161be:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161c0:	e00c      	b.n	80161dc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80161c2:	687a      	ldr	r2, [r7, #4]
 80161c4:	23a7      	movs	r3, #167	; 0xa7
 80161c6:	009b      	lsls	r3, r3, #2
 80161c8:	2101      	movs	r1, #1
 80161ca:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161cc:	e006      	b.n	80161dc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80161ce:	683a      	ldr	r2, [r7, #0]
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	0011      	movs	r1, r2
 80161d4:	0018      	movs	r0, r3
 80161d6:	f000 f997 	bl	8016508 <USBD_CtlError>
  }
}
 80161da:	46c0      	nop			; (mov r8, r8)
 80161dc:	46c0      	nop			; (mov r8, r8)
 80161de:	46bd      	mov	sp, r7
 80161e0:	b005      	add	sp, #20
 80161e2:	bd90      	pop	{r4, r7, pc}
 80161e4:	0000029e 	.word	0x0000029e

080161e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b082      	sub	sp, #8
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
 80161f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80161f2:	683b      	ldr	r3, [r7, #0]
 80161f4:	885b      	ldrh	r3, [r3, #2]
 80161f6:	b2da      	uxtb	r2, r3
 80161f8:	4b4c      	ldr	r3, [pc, #304]	; (801632c <USBD_SetConfig+0x144>)
 80161fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80161fc:	4b4b      	ldr	r3, [pc, #300]	; (801632c <USBD_SetConfig+0x144>)
 80161fe:	781b      	ldrb	r3, [r3, #0]
 8016200:	2b01      	cmp	r3, #1
 8016202:	d906      	bls.n	8016212 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8016204:	683a      	ldr	r2, [r7, #0]
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	0011      	movs	r1, r2
 801620a:	0018      	movs	r0, r3
 801620c:	f000 f97c 	bl	8016508 <USBD_CtlError>
 8016210:	e088      	b.n	8016324 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8016212:	687a      	ldr	r2, [r7, #4]
 8016214:	23a7      	movs	r3, #167	; 0xa7
 8016216:	009b      	lsls	r3, r3, #2
 8016218:	5cd3      	ldrb	r3, [r2, r3]
 801621a:	2b02      	cmp	r3, #2
 801621c:	d002      	beq.n	8016224 <USBD_SetConfig+0x3c>
 801621e:	2b03      	cmp	r3, #3
 8016220:	d029      	beq.n	8016276 <USBD_SetConfig+0x8e>
 8016222:	e071      	b.n	8016308 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8016224:	4b41      	ldr	r3, [pc, #260]	; (801632c <USBD_SetConfig+0x144>)
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d01f      	beq.n	801626c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801622c:	4b3f      	ldr	r3, [pc, #252]	; (801632c <USBD_SetConfig+0x144>)
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	001a      	movs	r2, r3
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016236:	687a      	ldr	r2, [r7, #4]
 8016238:	23a7      	movs	r3, #167	; 0xa7
 801623a:	009b      	lsls	r3, r3, #2
 801623c:	2103      	movs	r1, #3
 801623e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8016240:	4b3a      	ldr	r3, [pc, #232]	; (801632c <USBD_SetConfig+0x144>)
 8016242:	781a      	ldrb	r2, [r3, #0]
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	0011      	movs	r1, r2
 8016248:	0018      	movs	r0, r3
 801624a:	f7ff f8c5 	bl	80153d8 <USBD_SetClassConfig>
 801624e:	0003      	movs	r3, r0
 8016250:	2b02      	cmp	r3, #2
 8016252:	d106      	bne.n	8016262 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8016254:	683a      	ldr	r2, [r7, #0]
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	0011      	movs	r1, r2
 801625a:	0018      	movs	r0, r3
 801625c:	f000 f954 	bl	8016508 <USBD_CtlError>
            return;
 8016260:	e060      	b.n	8016324 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	0018      	movs	r0, r3
 8016266:	f000 fa37 	bl	80166d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801626a:	e05b      	b.n	8016324 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	0018      	movs	r0, r3
 8016270:	f000 fa32 	bl	80166d8 <USBD_CtlSendStatus>
        break;
 8016274:	e056      	b.n	8016324 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8016276:	4b2d      	ldr	r3, [pc, #180]	; (801632c <USBD_SetConfig+0x144>)
 8016278:	781b      	ldrb	r3, [r3, #0]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d115      	bne.n	80162aa <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801627e:	687a      	ldr	r2, [r7, #4]
 8016280:	23a7      	movs	r3, #167	; 0xa7
 8016282:	009b      	lsls	r3, r3, #2
 8016284:	2102      	movs	r1, #2
 8016286:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8016288:	4b28      	ldr	r3, [pc, #160]	; (801632c <USBD_SetConfig+0x144>)
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	001a      	movs	r2, r3
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8016292:	4b26      	ldr	r3, [pc, #152]	; (801632c <USBD_SetConfig+0x144>)
 8016294:	781a      	ldrb	r2, [r3, #0]
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	0011      	movs	r1, r2
 801629a:	0018      	movs	r0, r3
 801629c:	f7ff f8c3 	bl	8015426 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	0018      	movs	r0, r3
 80162a4:	f000 fa18 	bl	80166d8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80162a8:	e03c      	b.n	8016324 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80162aa:	4b20      	ldr	r3, [pc, #128]	; (801632c <USBD_SetConfig+0x144>)
 80162ac:	781b      	ldrb	r3, [r3, #0]
 80162ae:	001a      	movs	r2, r3
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	685b      	ldr	r3, [r3, #4]
 80162b4:	429a      	cmp	r2, r3
 80162b6:	d022      	beq.n	80162fe <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	685b      	ldr	r3, [r3, #4]
 80162bc:	b2da      	uxtb	r2, r3
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	0011      	movs	r1, r2
 80162c2:	0018      	movs	r0, r3
 80162c4:	f7ff f8af 	bl	8015426 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80162c8:	4b18      	ldr	r3, [pc, #96]	; (801632c <USBD_SetConfig+0x144>)
 80162ca:	781b      	ldrb	r3, [r3, #0]
 80162cc:	001a      	movs	r2, r3
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80162d2:	4b16      	ldr	r3, [pc, #88]	; (801632c <USBD_SetConfig+0x144>)
 80162d4:	781a      	ldrb	r2, [r3, #0]
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	0011      	movs	r1, r2
 80162da:	0018      	movs	r0, r3
 80162dc:	f7ff f87c 	bl	80153d8 <USBD_SetClassConfig>
 80162e0:	0003      	movs	r3, r0
 80162e2:	2b02      	cmp	r3, #2
 80162e4:	d106      	bne.n	80162f4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80162e6:	683a      	ldr	r2, [r7, #0]
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	0011      	movs	r1, r2
 80162ec:	0018      	movs	r0, r3
 80162ee:	f000 f90b 	bl	8016508 <USBD_CtlError>
            return;
 80162f2:	e017      	b.n	8016324 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	0018      	movs	r0, r3
 80162f8:	f000 f9ee 	bl	80166d8 <USBD_CtlSendStatus>
        break;
 80162fc:	e012      	b.n	8016324 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	0018      	movs	r0, r3
 8016302:	f000 f9e9 	bl	80166d8 <USBD_CtlSendStatus>
        break;
 8016306:	e00d      	b.n	8016324 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8016308:	683a      	ldr	r2, [r7, #0]
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	0011      	movs	r1, r2
 801630e:	0018      	movs	r0, r3
 8016310:	f000 f8fa 	bl	8016508 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8016314:	4b05      	ldr	r3, [pc, #20]	; (801632c <USBD_SetConfig+0x144>)
 8016316:	781a      	ldrb	r2, [r3, #0]
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	0011      	movs	r1, r2
 801631c:	0018      	movs	r0, r3
 801631e:	f7ff f882 	bl	8015426 <USBD_ClrClassConfig>
        break;
 8016322:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8016324:	46bd      	mov	sp, r7
 8016326:	b002      	add	sp, #8
 8016328:	bd80      	pop	{r7, pc}
 801632a:	46c0      	nop			; (mov r8, r8)
 801632c:	20000554 	.word	0x20000554

08016330 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
 8016338:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	88db      	ldrh	r3, [r3, #6]
 801633e:	2b01      	cmp	r3, #1
 8016340:	d006      	beq.n	8016350 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8016342:	683a      	ldr	r2, [r7, #0]
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	0011      	movs	r1, r2
 8016348:	0018      	movs	r0, r3
 801634a:	f000 f8dd 	bl	8016508 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801634e:	e026      	b.n	801639e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8016350:	687a      	ldr	r2, [r7, #4]
 8016352:	23a7      	movs	r3, #167	; 0xa7
 8016354:	009b      	lsls	r3, r3, #2
 8016356:	5cd3      	ldrb	r3, [r2, r3]
 8016358:	2b02      	cmp	r3, #2
 801635a:	dc02      	bgt.n	8016362 <USBD_GetConfig+0x32>
 801635c:	2b00      	cmp	r3, #0
 801635e:	dc03      	bgt.n	8016368 <USBD_GetConfig+0x38>
 8016360:	e016      	b.n	8016390 <USBD_GetConfig+0x60>
 8016362:	2b03      	cmp	r3, #3
 8016364:	d00c      	beq.n	8016380 <USBD_GetConfig+0x50>
 8016366:	e013      	b.n	8016390 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2200      	movs	r2, #0
 801636c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	3308      	adds	r3, #8
 8016372:	0019      	movs	r1, r3
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2201      	movs	r2, #1
 8016378:	0018      	movs	r0, r3
 801637a:	f000 f943 	bl	8016604 <USBD_CtlSendData>
        break;
 801637e:	e00e      	b.n	801639e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	1d19      	adds	r1, r3, #4
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2201      	movs	r2, #1
 8016388:	0018      	movs	r0, r3
 801638a:	f000 f93b 	bl	8016604 <USBD_CtlSendData>
        break;
 801638e:	e006      	b.n	801639e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8016390:	683a      	ldr	r2, [r7, #0]
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	0011      	movs	r1, r2
 8016396:	0018      	movs	r0, r3
 8016398:	f000 f8b6 	bl	8016508 <USBD_CtlError>
        break;
 801639c:	46c0      	nop			; (mov r8, r8)
}
 801639e:	46c0      	nop			; (mov r8, r8)
 80163a0:	46bd      	mov	sp, r7
 80163a2:	b002      	add	sp, #8
 80163a4:	bd80      	pop	{r7, pc}

080163a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163a6:	b580      	push	{r7, lr}
 80163a8:	b082      	sub	sp, #8
 80163aa:	af00      	add	r7, sp, #0
 80163ac:	6078      	str	r0, [r7, #4]
 80163ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80163b0:	687a      	ldr	r2, [r7, #4]
 80163b2:	23a7      	movs	r3, #167	; 0xa7
 80163b4:	009b      	lsls	r3, r3, #2
 80163b6:	5cd3      	ldrb	r3, [r2, r3]
 80163b8:	3b01      	subs	r3, #1
 80163ba:	2b02      	cmp	r3, #2
 80163bc:	d822      	bhi.n	8016404 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	88db      	ldrh	r3, [r3, #6]
 80163c2:	2b02      	cmp	r3, #2
 80163c4:	d006      	beq.n	80163d4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80163c6:	683a      	ldr	r2, [r7, #0]
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	0011      	movs	r1, r2
 80163cc:	0018      	movs	r0, r3
 80163ce:	f000 f89b 	bl	8016508 <USBD_CtlError>
        break;
 80163d2:	e01e      	b.n	8016412 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	2201      	movs	r2, #1
 80163d8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80163da:	687a      	ldr	r2, [r7, #4]
 80163dc:	23a9      	movs	r3, #169	; 0xa9
 80163de:	009b      	lsls	r3, r3, #2
 80163e0:	58d3      	ldr	r3, [r2, r3]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d005      	beq.n	80163f2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	68db      	ldr	r3, [r3, #12]
 80163ea:	2202      	movs	r2, #2
 80163ec:	431a      	orrs	r2, r3
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	330c      	adds	r3, #12
 80163f6:	0019      	movs	r1, r3
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2202      	movs	r2, #2
 80163fc:	0018      	movs	r0, r3
 80163fe:	f000 f901 	bl	8016604 <USBD_CtlSendData>
      break;
 8016402:	e006      	b.n	8016412 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8016404:	683a      	ldr	r2, [r7, #0]
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	0011      	movs	r1, r2
 801640a:	0018      	movs	r0, r3
 801640c:	f000 f87c 	bl	8016508 <USBD_CtlError>
      break;
 8016410:	46c0      	nop			; (mov r8, r8)
  }
}
 8016412:	46c0      	nop			; (mov r8, r8)
 8016414:	46bd      	mov	sp, r7
 8016416:	b002      	add	sp, #8
 8016418:	bd80      	pop	{r7, pc}

0801641a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801641a:	b580      	push	{r7, lr}
 801641c:	b082      	sub	sp, #8
 801641e:	af00      	add	r7, sp, #0
 8016420:	6078      	str	r0, [r7, #4]
 8016422:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016424:	683b      	ldr	r3, [r7, #0]
 8016426:	885b      	ldrh	r3, [r3, #2]
 8016428:	2b01      	cmp	r3, #1
 801642a:	d108      	bne.n	801643e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801642c:	687a      	ldr	r2, [r7, #4]
 801642e:	23a9      	movs	r3, #169	; 0xa9
 8016430:	009b      	lsls	r3, r3, #2
 8016432:	2101      	movs	r1, #1
 8016434:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	0018      	movs	r0, r3
 801643a:	f000 f94d 	bl	80166d8 <USBD_CtlSendStatus>
  }
}
 801643e:	46c0      	nop			; (mov r8, r8)
 8016440:	46bd      	mov	sp, r7
 8016442:	b002      	add	sp, #8
 8016444:	bd80      	pop	{r7, pc}

08016446 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016446:	b580      	push	{r7, lr}
 8016448:	b082      	sub	sp, #8
 801644a:	af00      	add	r7, sp, #0
 801644c:	6078      	str	r0, [r7, #4]
 801644e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016450:	687a      	ldr	r2, [r7, #4]
 8016452:	23a7      	movs	r3, #167	; 0xa7
 8016454:	009b      	lsls	r3, r3, #2
 8016456:	5cd3      	ldrb	r3, [r2, r3]
 8016458:	3b01      	subs	r3, #1
 801645a:	2b02      	cmp	r3, #2
 801645c:	d80d      	bhi.n	801647a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	885b      	ldrh	r3, [r3, #2]
 8016462:	2b01      	cmp	r3, #1
 8016464:	d110      	bne.n	8016488 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8016466:	687a      	ldr	r2, [r7, #4]
 8016468:	23a9      	movs	r3, #169	; 0xa9
 801646a:	009b      	lsls	r3, r3, #2
 801646c:	2100      	movs	r1, #0
 801646e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	0018      	movs	r0, r3
 8016474:	f000 f930 	bl	80166d8 <USBD_CtlSendStatus>
      }
      break;
 8016478:	e006      	b.n	8016488 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801647a:	683a      	ldr	r2, [r7, #0]
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	0011      	movs	r1, r2
 8016480:	0018      	movs	r0, r3
 8016482:	f000 f841 	bl	8016508 <USBD_CtlError>
      break;
 8016486:	e000      	b.n	801648a <USBD_ClrFeature+0x44>
      break;
 8016488:	46c0      	nop			; (mov r8, r8)
  }
}
 801648a:	46c0      	nop			; (mov r8, r8)
 801648c:	46bd      	mov	sp, r7
 801648e:	b002      	add	sp, #8
 8016490:	bd80      	pop	{r7, pc}

08016492 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016492:	b580      	push	{r7, lr}
 8016494:	b082      	sub	sp, #8
 8016496:	af00      	add	r7, sp, #0
 8016498:	6078      	str	r0, [r7, #4]
 801649a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	781a      	ldrb	r2, [r3, #0]
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	785a      	ldrb	r2, [r3, #1]
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80164ac:	683b      	ldr	r3, [r7, #0]
 80164ae:	3302      	adds	r3, #2
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	b29a      	uxth	r2, r3
 80164b4:	683b      	ldr	r3, [r7, #0]
 80164b6:	3303      	adds	r3, #3
 80164b8:	781b      	ldrb	r3, [r3, #0]
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	021b      	lsls	r3, r3, #8
 80164be:	b29b      	uxth	r3, r3
 80164c0:	18d3      	adds	r3, r2, r3
 80164c2:	b29a      	uxth	r2, r3
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	3304      	adds	r3, #4
 80164cc:	781b      	ldrb	r3, [r3, #0]
 80164ce:	b29a      	uxth	r2, r3
 80164d0:	683b      	ldr	r3, [r7, #0]
 80164d2:	3305      	adds	r3, #5
 80164d4:	781b      	ldrb	r3, [r3, #0]
 80164d6:	b29b      	uxth	r3, r3
 80164d8:	021b      	lsls	r3, r3, #8
 80164da:	b29b      	uxth	r3, r3
 80164dc:	18d3      	adds	r3, r2, r3
 80164de:	b29a      	uxth	r2, r3
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	3306      	adds	r3, #6
 80164e8:	781b      	ldrb	r3, [r3, #0]
 80164ea:	b29a      	uxth	r2, r3
 80164ec:	683b      	ldr	r3, [r7, #0]
 80164ee:	3307      	adds	r3, #7
 80164f0:	781b      	ldrb	r3, [r3, #0]
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	021b      	lsls	r3, r3, #8
 80164f6:	b29b      	uxth	r3, r3
 80164f8:	18d3      	adds	r3, r2, r3
 80164fa:	b29a      	uxth	r2, r3
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	80da      	strh	r2, [r3, #6]

}
 8016500:	46c0      	nop			; (mov r8, r8)
 8016502:	46bd      	mov	sp, r7
 8016504:	b002      	add	sp, #8
 8016506:	bd80      	pop	{r7, pc}

08016508 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	2180      	movs	r1, #128	; 0x80
 8016516:	0018      	movs	r0, r3
 8016518:	f001 fd4f 	bl	8017fba <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2100      	movs	r1, #0
 8016520:	0018      	movs	r0, r3
 8016522:	f001 fd4a 	bl	8017fba <USBD_LL_StallEP>
}
 8016526:	46c0      	nop			; (mov r8, r8)
 8016528:	46bd      	mov	sp, r7
 801652a:	b002      	add	sp, #8
 801652c:	bd80      	pop	{r7, pc}

0801652e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801652e:	b590      	push	{r4, r7, lr}
 8016530:	b087      	sub	sp, #28
 8016532:	af00      	add	r7, sp, #0
 8016534:	60f8      	str	r0, [r7, #12]
 8016536:	60b9      	str	r1, [r7, #8]
 8016538:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801653a:	2417      	movs	r4, #23
 801653c:	193b      	adds	r3, r7, r4
 801653e:	2200      	movs	r2, #0
 8016540:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d03c      	beq.n	80165c2 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	0018      	movs	r0, r3
 801654c:	f000 f83d 	bl	80165ca <USBD_GetLen>
 8016550:	0003      	movs	r3, r0
 8016552:	3301      	adds	r3, #1
 8016554:	b29b      	uxth	r3, r3
 8016556:	18db      	adds	r3, r3, r3
 8016558:	b29a      	uxth	r2, r3
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801655e:	193b      	adds	r3, r7, r4
 8016560:	781b      	ldrb	r3, [r3, #0]
 8016562:	193a      	adds	r2, r7, r4
 8016564:	1c59      	adds	r1, r3, #1
 8016566:	7011      	strb	r1, [r2, #0]
 8016568:	001a      	movs	r2, r3
 801656a:	68bb      	ldr	r3, [r7, #8]
 801656c:	189b      	adds	r3, r3, r2
 801656e:	687a      	ldr	r2, [r7, #4]
 8016570:	7812      	ldrb	r2, [r2, #0]
 8016572:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8016574:	193b      	adds	r3, r7, r4
 8016576:	781b      	ldrb	r3, [r3, #0]
 8016578:	193a      	adds	r2, r7, r4
 801657a:	1c59      	adds	r1, r3, #1
 801657c:	7011      	strb	r1, [r2, #0]
 801657e:	001a      	movs	r2, r3
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	189b      	adds	r3, r3, r2
 8016584:	2203      	movs	r2, #3
 8016586:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8016588:	e017      	b.n	80165ba <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	1c5a      	adds	r2, r3, #1
 801658e:	60fa      	str	r2, [r7, #12]
 8016590:	2417      	movs	r4, #23
 8016592:	193a      	adds	r2, r7, r4
 8016594:	7812      	ldrb	r2, [r2, #0]
 8016596:	1939      	adds	r1, r7, r4
 8016598:	1c50      	adds	r0, r2, #1
 801659a:	7008      	strb	r0, [r1, #0]
 801659c:	0011      	movs	r1, r2
 801659e:	68ba      	ldr	r2, [r7, #8]
 80165a0:	1852      	adds	r2, r2, r1
 80165a2:	781b      	ldrb	r3, [r3, #0]
 80165a4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80165a6:	193b      	adds	r3, r7, r4
 80165a8:	781b      	ldrb	r3, [r3, #0]
 80165aa:	193a      	adds	r2, r7, r4
 80165ac:	1c59      	adds	r1, r3, #1
 80165ae:	7011      	strb	r1, [r2, #0]
 80165b0:	001a      	movs	r2, r3
 80165b2:	68bb      	ldr	r3, [r7, #8]
 80165b4:	189b      	adds	r3, r3, r2
 80165b6:	2200      	movs	r2, #0
 80165b8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	781b      	ldrb	r3, [r3, #0]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d1e3      	bne.n	801658a <USBD_GetString+0x5c>
    }
  }
}
 80165c2:	46c0      	nop			; (mov r8, r8)
 80165c4:	46bd      	mov	sp, r7
 80165c6:	b007      	add	sp, #28
 80165c8:	bd90      	pop	{r4, r7, pc}

080165ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80165ca:	b580      	push	{r7, lr}
 80165cc:	b084      	sub	sp, #16
 80165ce:	af00      	add	r7, sp, #0
 80165d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80165d2:	230f      	movs	r3, #15
 80165d4:	18fb      	adds	r3, r7, r3
 80165d6:	2200      	movs	r2, #0
 80165d8:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80165da:	e008      	b.n	80165ee <USBD_GetLen+0x24>
  {
    len++;
 80165dc:	210f      	movs	r1, #15
 80165de:	187b      	adds	r3, r7, r1
 80165e0:	781a      	ldrb	r2, [r3, #0]
 80165e2:	187b      	adds	r3, r7, r1
 80165e4:	3201      	adds	r2, #1
 80165e6:	701a      	strb	r2, [r3, #0]
    buf++;
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	3301      	adds	r3, #1
 80165ec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	781b      	ldrb	r3, [r3, #0]
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d1f2      	bne.n	80165dc <USBD_GetLen+0x12>
  }

  return len;
 80165f6:	230f      	movs	r3, #15
 80165f8:	18fb      	adds	r3, r7, r3
 80165fa:	781b      	ldrb	r3, [r3, #0]
}
 80165fc:	0018      	movs	r0, r3
 80165fe:	46bd      	mov	sp, r7
 8016600:	b004      	add	sp, #16
 8016602:	bd80      	pop	{r7, pc}

08016604 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b084      	sub	sp, #16
 8016608:	af00      	add	r7, sp, #0
 801660a:	60f8      	str	r0, [r7, #12]
 801660c:	60b9      	str	r1, [r7, #8]
 801660e:	1dbb      	adds	r3, r7, #6
 8016610:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016612:	68fa      	ldr	r2, [r7, #12]
 8016614:	23a5      	movs	r3, #165	; 0xa5
 8016616:	009b      	lsls	r3, r3, #2
 8016618:	2102      	movs	r1, #2
 801661a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801661c:	1dbb      	adds	r3, r7, #6
 801661e:	881a      	ldrh	r2, [r3, #0]
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8016624:	1dbb      	adds	r3, r7, #6
 8016626:	881a      	ldrh	r2, [r3, #0]
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801662c:	1dbb      	adds	r3, r7, #6
 801662e:	881b      	ldrh	r3, [r3, #0]
 8016630:	68ba      	ldr	r2, [r7, #8]
 8016632:	68f8      	ldr	r0, [r7, #12]
 8016634:	2100      	movs	r1, #0
 8016636:	f001 fd72 	bl	801811e <USBD_LL_Transmit>

  return USBD_OK;
 801663a:	2300      	movs	r3, #0
}
 801663c:	0018      	movs	r0, r3
 801663e:	46bd      	mov	sp, r7
 8016640:	b004      	add	sp, #16
 8016642:	bd80      	pop	{r7, pc}

08016644 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b084      	sub	sp, #16
 8016648:	af00      	add	r7, sp, #0
 801664a:	60f8      	str	r0, [r7, #12]
 801664c:	60b9      	str	r1, [r7, #8]
 801664e:	1dbb      	adds	r3, r7, #6
 8016650:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016652:	1dbb      	adds	r3, r7, #6
 8016654:	881b      	ldrh	r3, [r3, #0]
 8016656:	68ba      	ldr	r2, [r7, #8]
 8016658:	68f8      	ldr	r0, [r7, #12]
 801665a:	2100      	movs	r1, #0
 801665c:	f001 fd5f 	bl	801811e <USBD_LL_Transmit>

  return USBD_OK;
 8016660:	2300      	movs	r3, #0
}
 8016662:	0018      	movs	r0, r3
 8016664:	46bd      	mov	sp, r7
 8016666:	b004      	add	sp, #16
 8016668:	bd80      	pop	{r7, pc}

0801666a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801666a:	b580      	push	{r7, lr}
 801666c:	b084      	sub	sp, #16
 801666e:	af00      	add	r7, sp, #0
 8016670:	60f8      	str	r0, [r7, #12]
 8016672:	60b9      	str	r1, [r7, #8]
 8016674:	1dbb      	adds	r3, r7, #6
 8016676:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016678:	68fa      	ldr	r2, [r7, #12]
 801667a:	23a5      	movs	r3, #165	; 0xa5
 801667c:	009b      	lsls	r3, r3, #2
 801667e:	2103      	movs	r1, #3
 8016680:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8016682:	1dbb      	adds	r3, r7, #6
 8016684:	8819      	ldrh	r1, [r3, #0]
 8016686:	68fa      	ldr	r2, [r7, #12]
 8016688:	23ae      	movs	r3, #174	; 0xae
 801668a:	005b      	lsls	r3, r3, #1
 801668c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801668e:	1dbb      	adds	r3, r7, #6
 8016690:	8819      	ldrh	r1, [r3, #0]
 8016692:	68fa      	ldr	r2, [r7, #12]
 8016694:	23b0      	movs	r3, #176	; 0xb0
 8016696:	005b      	lsls	r3, r3, #1
 8016698:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801669a:	1dbb      	adds	r3, r7, #6
 801669c:	881b      	ldrh	r3, [r3, #0]
 801669e:	68ba      	ldr	r2, [r7, #8]
 80166a0:	68f8      	ldr	r0, [r7, #12]
 80166a2:	2100      	movs	r1, #0
 80166a4:	f001 fd72 	bl	801818c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80166a8:	2300      	movs	r3, #0
}
 80166aa:	0018      	movs	r0, r3
 80166ac:	46bd      	mov	sp, r7
 80166ae:	b004      	add	sp, #16
 80166b0:	bd80      	pop	{r7, pc}

080166b2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80166b2:	b580      	push	{r7, lr}
 80166b4:	b084      	sub	sp, #16
 80166b6:	af00      	add	r7, sp, #0
 80166b8:	60f8      	str	r0, [r7, #12]
 80166ba:	60b9      	str	r1, [r7, #8]
 80166bc:	1dbb      	adds	r3, r7, #6
 80166be:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80166c0:	1dbb      	adds	r3, r7, #6
 80166c2:	881b      	ldrh	r3, [r3, #0]
 80166c4:	68ba      	ldr	r2, [r7, #8]
 80166c6:	68f8      	ldr	r0, [r7, #12]
 80166c8:	2100      	movs	r1, #0
 80166ca:	f001 fd5f 	bl	801818c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80166ce:	2300      	movs	r3, #0
}
 80166d0:	0018      	movs	r0, r3
 80166d2:	46bd      	mov	sp, r7
 80166d4:	b004      	add	sp, #16
 80166d6:	bd80      	pop	{r7, pc}

080166d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b082      	sub	sp, #8
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80166e0:	687a      	ldr	r2, [r7, #4]
 80166e2:	23a5      	movs	r3, #165	; 0xa5
 80166e4:	009b      	lsls	r3, r3, #2
 80166e6:	2104      	movs	r1, #4
 80166e8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80166ea:	6878      	ldr	r0, [r7, #4]
 80166ec:	2300      	movs	r3, #0
 80166ee:	2200      	movs	r2, #0
 80166f0:	2100      	movs	r1, #0
 80166f2:	f001 fd14 	bl	801811e <USBD_LL_Transmit>

  return USBD_OK;
 80166f6:	2300      	movs	r3, #0
}
 80166f8:	0018      	movs	r0, r3
 80166fa:	46bd      	mov	sp, r7
 80166fc:	b002      	add	sp, #8
 80166fe:	bd80      	pop	{r7, pc}

08016700 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b082      	sub	sp, #8
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	23a5      	movs	r3, #165	; 0xa5
 801670c:	009b      	lsls	r3, r3, #2
 801670e:	2105      	movs	r1, #5
 8016710:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	2300      	movs	r3, #0
 8016716:	2200      	movs	r2, #0
 8016718:	2100      	movs	r1, #0
 801671a:	f001 fd37 	bl	801818c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801671e:	2300      	movs	r3, #0
}
 8016720:	0018      	movs	r0, r3
 8016722:	46bd      	mov	sp, r7
 8016724:	b002      	add	sp, #8
 8016726:	bd80      	pop	{r7, pc}

08016728 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b084      	sub	sp, #16
 801672c:	af00      	add	r7, sp, #0
 801672e:	0002      	movs	r2, r0
 8016730:	1dbb      	adds	r3, r7, #6
 8016732:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016734:	2300      	movs	r3, #0
 8016736:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8016738:	1dbb      	adds	r3, r7, #6
 801673a:	2200      	movs	r2, #0
 801673c:	5e9b      	ldrsh	r3, [r3, r2]
 801673e:	2b84      	cmp	r3, #132	; 0x84
 8016740:	d006      	beq.n	8016750 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8016742:	1dbb      	adds	r3, r7, #6
 8016744:	2200      	movs	r2, #0
 8016746:	5e9a      	ldrsh	r2, [r3, r2]
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	18d3      	adds	r3, r2, r3
 801674c:	3303      	adds	r3, #3
 801674e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8016750:	68fb      	ldr	r3, [r7, #12]
}
 8016752:	0018      	movs	r0, r3
 8016754:	46bd      	mov	sp, r7
 8016756:	b004      	add	sp, #16
 8016758:	bd80      	pop	{r7, pc}

0801675a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801675a:	b580      	push	{r7, lr}
 801675c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801675e:	f000 faa1 	bl	8016ca4 <vTaskStartScheduler>
  
  return osOK;
 8016762:	2300      	movs	r3, #0
}
 8016764:	0018      	movs	r0, r3
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}

0801676a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801676a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801676c:	b089      	sub	sp, #36	; 0x24
 801676e:	af04      	add	r7, sp, #16
 8016770:	6078      	str	r0, [r7, #4]
 8016772:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	695b      	ldr	r3, [r3, #20]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d020      	beq.n	80167be <osThreadCreate+0x54>
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	699b      	ldr	r3, [r3, #24]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d01c      	beq.n	80167be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	685c      	ldr	r4, [r3, #4]
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681d      	ldr	r5, [r3, #0]
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	691e      	ldr	r6, [r3, #16]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	2208      	movs	r2, #8
 8016794:	5e9b      	ldrsh	r3, [r3, r2]
 8016796:	0018      	movs	r0, r3
 8016798:	f7ff ffc6 	bl	8016728 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	695a      	ldr	r2, [r3, #20]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80167a4:	6839      	ldr	r1, [r7, #0]
 80167a6:	9302      	str	r3, [sp, #8]
 80167a8:	9201      	str	r2, [sp, #4]
 80167aa:	9000      	str	r0, [sp, #0]
 80167ac:	000b      	movs	r3, r1
 80167ae:	0032      	movs	r2, r6
 80167b0:	0029      	movs	r1, r5
 80167b2:	0020      	movs	r0, r4
 80167b4:	f000 f8e3 	bl	801697e <xTaskCreateStatic>
 80167b8:	0003      	movs	r3, r0
 80167ba:	60fb      	str	r3, [r7, #12]
 80167bc:	e01d      	b.n	80167fa <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	685c      	ldr	r4, [r3, #4]
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80167ca:	b29e      	uxth	r6, r3
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2208      	movs	r2, #8
 80167d0:	5e9b      	ldrsh	r3, [r3, r2]
 80167d2:	0018      	movs	r0, r3
 80167d4:	f7ff ffa8 	bl	8016728 <makeFreeRtosPriority>
 80167d8:	0001      	movs	r1, r0
 80167da:	683a      	ldr	r2, [r7, #0]
 80167dc:	230c      	movs	r3, #12
 80167de:	18fb      	adds	r3, r7, r3
 80167e0:	9301      	str	r3, [sp, #4]
 80167e2:	9100      	str	r1, [sp, #0]
 80167e4:	0013      	movs	r3, r2
 80167e6:	0032      	movs	r2, r6
 80167e8:	0029      	movs	r1, r5
 80167ea:	0020      	movs	r0, r4
 80167ec:	f000 f90a 	bl	8016a04 <xTaskCreate>
 80167f0:	0003      	movs	r3, r0
 80167f2:	2b01      	cmp	r3, #1
 80167f4:	d001      	beq.n	80167fa <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80167f6:	2300      	movs	r3, #0
 80167f8:	e000      	b.n	80167fc <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80167fa:	68fb      	ldr	r3, [r7, #12]
}
 80167fc:	0018      	movs	r0, r3
 80167fe:	46bd      	mov	sp, r7
 8016800:	b005      	add	sp, #20
 8016802:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016804 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b084      	sub	sp, #16
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d001      	beq.n	801681a <osDelay+0x16>
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	e000      	b.n	801681c <osDelay+0x18>
 801681a:	2301      	movs	r3, #1
 801681c:	0018      	movs	r0, r3
 801681e:	f000 fa1b 	bl	8016c58 <vTaskDelay>
  
  return osOK;
 8016822:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016824:	0018      	movs	r0, r3
 8016826:	46bd      	mov	sp, r7
 8016828:	b004      	add	sp, #16
 801682a:	bd80      	pop	{r7, pc}

0801682c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	3308      	adds	r3, #8
 8016838:	001a      	movs	r2, r3
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	2201      	movs	r2, #1
 8016842:	4252      	negs	r2, r2
 8016844:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	3308      	adds	r3, #8
 801684a:	001a      	movs	r2, r3
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	3308      	adds	r3, #8
 8016854:	001a      	movs	r2, r3
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	2200      	movs	r2, #0
 801685e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016860:	46c0      	nop			; (mov r8, r8)
 8016862:	46bd      	mov	sp, r7
 8016864:	b002      	add	sp, #8
 8016866:	bd80      	pop	{r7, pc}

08016868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	2200      	movs	r2, #0
 8016874:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016876:	46c0      	nop			; (mov r8, r8)
 8016878:	46bd      	mov	sp, r7
 801687a:	b002      	add	sp, #8
 801687c:	bd80      	pop	{r7, pc}

0801687e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801687e:	b580      	push	{r7, lr}
 8016880:	b084      	sub	sp, #16
 8016882:	af00      	add	r7, sp, #0
 8016884:	6078      	str	r0, [r7, #4]
 8016886:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	685b      	ldr	r3, [r3, #4]
 801688c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	68fa      	ldr	r2, [r7, #12]
 8016892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	689a      	ldr	r2, [r3, #8]
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	689b      	ldr	r3, [r3, #8]
 80168a0:	683a      	ldr	r2, [r7, #0]
 80168a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	683a      	ldr	r2, [r7, #0]
 80168a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	687a      	ldr	r2, [r7, #4]
 80168ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	1c5a      	adds	r2, r3, #1
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	601a      	str	r2, [r3, #0]
}
 80168ba:	46c0      	nop			; (mov r8, r8)
 80168bc:	46bd      	mov	sp, r7
 80168be:	b004      	add	sp, #16
 80168c0:	bd80      	pop	{r7, pc}

080168c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80168c2:	b580      	push	{r7, lr}
 80168c4:	b084      	sub	sp, #16
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]
 80168ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80168d2:	68bb      	ldr	r3, [r7, #8]
 80168d4:	3301      	adds	r3, #1
 80168d6:	d103      	bne.n	80168e0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	691b      	ldr	r3, [r3, #16]
 80168dc:	60fb      	str	r3, [r7, #12]
 80168de:	e00c      	b.n	80168fa <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	3308      	adds	r3, #8
 80168e4:	60fb      	str	r3, [r7, #12]
 80168e6:	e002      	b.n	80168ee <vListInsert+0x2c>
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	685b      	ldr	r3, [r3, #4]
 80168ec:	60fb      	str	r3, [r7, #12]
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	685b      	ldr	r3, [r3, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	68ba      	ldr	r2, [r7, #8]
 80168f6:	429a      	cmp	r2, r3
 80168f8:	d2f6      	bcs.n	80168e8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	685a      	ldr	r2, [r3, #4]
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016902:	683b      	ldr	r3, [r7, #0]
 8016904:	685b      	ldr	r3, [r3, #4]
 8016906:	683a      	ldr	r2, [r7, #0]
 8016908:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	68fa      	ldr	r2, [r7, #12]
 801690e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	683a      	ldr	r2, [r7, #0]
 8016914:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8016916:	683b      	ldr	r3, [r7, #0]
 8016918:	687a      	ldr	r2, [r7, #4]
 801691a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	1c5a      	adds	r2, r3, #1
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	601a      	str	r2, [r3, #0]
}
 8016926:	46c0      	nop			; (mov r8, r8)
 8016928:	46bd      	mov	sp, r7
 801692a:	b004      	add	sp, #16
 801692c:	bd80      	pop	{r7, pc}

0801692e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801692e:	b580      	push	{r7, lr}
 8016930:	b084      	sub	sp, #16
 8016932:	af00      	add	r7, sp, #0
 8016934:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	691b      	ldr	r3, [r3, #16]
 801693a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	685b      	ldr	r3, [r3, #4]
 8016940:	687a      	ldr	r2, [r7, #4]
 8016942:	6892      	ldr	r2, [r2, #8]
 8016944:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	689b      	ldr	r3, [r3, #8]
 801694a:	687a      	ldr	r2, [r7, #4]
 801694c:	6852      	ldr	r2, [r2, #4]
 801694e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	685b      	ldr	r3, [r3, #4]
 8016954:	687a      	ldr	r2, [r7, #4]
 8016956:	429a      	cmp	r2, r3
 8016958:	d103      	bne.n	8016962 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	689a      	ldr	r2, [r3, #8]
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	2200      	movs	r2, #0
 8016966:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	1e5a      	subs	r2, r3, #1
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	681b      	ldr	r3, [r3, #0]
}
 8016976:	0018      	movs	r0, r3
 8016978:	46bd      	mov	sp, r7
 801697a:	b004      	add	sp, #16
 801697c:	bd80      	pop	{r7, pc}

0801697e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801697e:	b590      	push	{r4, r7, lr}
 8016980:	b08d      	sub	sp, #52	; 0x34
 8016982:	af04      	add	r7, sp, #16
 8016984:	60f8      	str	r0, [r7, #12]
 8016986:	60b9      	str	r1, [r7, #8]
 8016988:	607a      	str	r2, [r7, #4]
 801698a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801698e:	2b00      	cmp	r3, #0
 8016990:	d101      	bne.n	8016996 <xTaskCreateStatic+0x18>
 8016992:	b672      	cpsid	i
 8016994:	e7fe      	b.n	8016994 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8016996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016998:	2b00      	cmp	r3, #0
 801699a:	d101      	bne.n	80169a0 <xTaskCreateStatic+0x22>
 801699c:	b672      	cpsid	i
 801699e:	e7fe      	b.n	801699e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80169a0:	2354      	movs	r3, #84	; 0x54
 80169a2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80169a4:	697b      	ldr	r3, [r7, #20]
 80169a6:	2b54      	cmp	r3, #84	; 0x54
 80169a8:	d001      	beq.n	80169ae <xTaskCreateStatic+0x30>
 80169aa:	b672      	cpsid	i
 80169ac:	e7fe      	b.n	80169ac <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80169ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d020      	beq.n	80169f6 <xTaskCreateStatic+0x78>
 80169b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d01d      	beq.n	80169f6 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80169ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169bc:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80169be:	69fb      	ldr	r3, [r7, #28]
 80169c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80169c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80169c4:	69fb      	ldr	r3, [r7, #28]
 80169c6:	2251      	movs	r2, #81	; 0x51
 80169c8:	2102      	movs	r1, #2
 80169ca:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80169cc:	683c      	ldr	r4, [r7, #0]
 80169ce:	687a      	ldr	r2, [r7, #4]
 80169d0:	68b9      	ldr	r1, [r7, #8]
 80169d2:	68f8      	ldr	r0, [r7, #12]
 80169d4:	2300      	movs	r3, #0
 80169d6:	9303      	str	r3, [sp, #12]
 80169d8:	69fb      	ldr	r3, [r7, #28]
 80169da:	9302      	str	r3, [sp, #8]
 80169dc:	2318      	movs	r3, #24
 80169de:	18fb      	adds	r3, r7, r3
 80169e0:	9301      	str	r3, [sp, #4]
 80169e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e4:	9300      	str	r3, [sp, #0]
 80169e6:	0023      	movs	r3, r4
 80169e8:	f000 f858 	bl	8016a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80169ec:	69fb      	ldr	r3, [r7, #28]
 80169ee:	0018      	movs	r0, r3
 80169f0:	f000 f8ce 	bl	8016b90 <prvAddNewTaskToReadyList>
 80169f4:	e001      	b.n	80169fa <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80169f6:	2300      	movs	r3, #0
 80169f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80169fa:	69bb      	ldr	r3, [r7, #24]
	}
 80169fc:	0018      	movs	r0, r3
 80169fe:	46bd      	mov	sp, r7
 8016a00:	b009      	add	sp, #36	; 0x24
 8016a02:	bd90      	pop	{r4, r7, pc}

08016a04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016a04:	b590      	push	{r4, r7, lr}
 8016a06:	b08d      	sub	sp, #52	; 0x34
 8016a08:	af04      	add	r7, sp, #16
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	60b9      	str	r1, [r7, #8]
 8016a0e:	603b      	str	r3, [r7, #0]
 8016a10:	1dbb      	adds	r3, r7, #6
 8016a12:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a14:	1dbb      	adds	r3, r7, #6
 8016a16:	881b      	ldrh	r3, [r3, #0]
 8016a18:	009b      	lsls	r3, r3, #2
 8016a1a:	0018      	movs	r0, r3
 8016a1c:	f000 fda0 	bl	8017560 <pvPortMalloc>
 8016a20:	0003      	movs	r3, r0
 8016a22:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8016a24:	697b      	ldr	r3, [r7, #20]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d010      	beq.n	8016a4c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8016a2a:	2054      	movs	r0, #84	; 0x54
 8016a2c:	f000 fd98 	bl	8017560 <pvPortMalloc>
 8016a30:	0003      	movs	r3, r0
 8016a32:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8016a34:	69fb      	ldr	r3, [r7, #28]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d003      	beq.n	8016a42 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016a3a:	69fb      	ldr	r3, [r7, #28]
 8016a3c:	697a      	ldr	r2, [r7, #20]
 8016a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8016a40:	e006      	b.n	8016a50 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016a42:	697b      	ldr	r3, [r7, #20]
 8016a44:	0018      	movs	r0, r3
 8016a46:	f000 fe31 	bl	80176ac <vPortFree>
 8016a4a:	e001      	b.n	8016a50 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016a50:	69fb      	ldr	r3, [r7, #28]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d01a      	beq.n	8016a8c <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016a56:	69fb      	ldr	r3, [r7, #28]
 8016a58:	2251      	movs	r2, #81	; 0x51
 8016a5a:	2100      	movs	r1, #0
 8016a5c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016a5e:	1dbb      	adds	r3, r7, #6
 8016a60:	881a      	ldrh	r2, [r3, #0]
 8016a62:	683c      	ldr	r4, [r7, #0]
 8016a64:	68b9      	ldr	r1, [r7, #8]
 8016a66:	68f8      	ldr	r0, [r7, #12]
 8016a68:	2300      	movs	r3, #0
 8016a6a:	9303      	str	r3, [sp, #12]
 8016a6c:	69fb      	ldr	r3, [r7, #28]
 8016a6e:	9302      	str	r3, [sp, #8]
 8016a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a72:	9301      	str	r3, [sp, #4]
 8016a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a76:	9300      	str	r3, [sp, #0]
 8016a78:	0023      	movs	r3, r4
 8016a7a:	f000 f80f 	bl	8016a9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	0018      	movs	r0, r3
 8016a82:	f000 f885 	bl	8016b90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016a86:	2301      	movs	r3, #1
 8016a88:	61bb      	str	r3, [r7, #24]
 8016a8a:	e002      	b.n	8016a92 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016a8c:	2301      	movs	r3, #1
 8016a8e:	425b      	negs	r3, r3
 8016a90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016a92:	69bb      	ldr	r3, [r7, #24]
	}
 8016a94:	0018      	movs	r0, r3
 8016a96:	46bd      	mov	sp, r7
 8016a98:	b009      	add	sp, #36	; 0x24
 8016a9a:	bd90      	pop	{r4, r7, pc}

08016a9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b086      	sub	sp, #24
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	60f8      	str	r0, [r7, #12]
 8016aa4:	60b9      	str	r1, [r7, #8]
 8016aa6:	607a      	str	r2, [r7, #4]
 8016aa8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8016aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	4936      	ldr	r1, [pc, #216]	; (8016b8c <prvInitialiseNewTask+0xf0>)
 8016ab2:	468c      	mov	ip, r1
 8016ab4:	4463      	add	r3, ip
 8016ab6:	009b      	lsls	r3, r3, #2
 8016ab8:	18d3      	adds	r3, r2, r3
 8016aba:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8016abc:	693b      	ldr	r3, [r7, #16]
 8016abe:	2207      	movs	r2, #7
 8016ac0:	4393      	bics	r3, r2
 8016ac2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	2207      	movs	r2, #7
 8016ac8:	4013      	ands	r3, r2
 8016aca:	d001      	beq.n	8016ad0 <prvInitialiseNewTask+0x34>
 8016acc:	b672      	cpsid	i
 8016ace:	e7fe      	b.n	8016ace <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	617b      	str	r3, [r7, #20]
 8016ad4:	e013      	b.n	8016afe <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016ad6:	68ba      	ldr	r2, [r7, #8]
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	18d3      	adds	r3, r2, r3
 8016adc:	7818      	ldrb	r0, [r3, #0]
 8016ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ae0:	2134      	movs	r1, #52	; 0x34
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	18d3      	adds	r3, r2, r3
 8016ae6:	185b      	adds	r3, r3, r1
 8016ae8:	1c02      	adds	r2, r0, #0
 8016aea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8016aec:	68ba      	ldr	r2, [r7, #8]
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	18d3      	adds	r3, r2, r3
 8016af2:	781b      	ldrb	r3, [r3, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d006      	beq.n	8016b06 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	3301      	adds	r3, #1
 8016afc:	617b      	str	r3, [r7, #20]
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	2b0f      	cmp	r3, #15
 8016b02:	d9e8      	bls.n	8016ad6 <prvInitialiseNewTask+0x3a>
 8016b04:	e000      	b.n	8016b08 <prvInitialiseNewTask+0x6c>
		{
			break;
 8016b06:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b0a:	2243      	movs	r2, #67	; 0x43
 8016b0c:	2100      	movs	r1, #0
 8016b0e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016b10:	6a3b      	ldr	r3, [r7, #32]
 8016b12:	2b06      	cmp	r3, #6
 8016b14:	d901      	bls.n	8016b1a <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016b16:	2306      	movs	r3, #6
 8016b18:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b1c:	6a3a      	ldr	r2, [r7, #32]
 8016b1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b22:	6a3a      	ldr	r2, [r7, #32]
 8016b24:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b28:	2200      	movs	r2, #0
 8016b2a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b2e:	3304      	adds	r3, #4
 8016b30:	0018      	movs	r0, r3
 8016b32:	f7ff fe99 	bl	8016868 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b38:	3318      	adds	r3, #24
 8016b3a:	0018      	movs	r0, r3
 8016b3c:	f7ff fe94 	bl	8016868 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b46:	6a3b      	ldr	r3, [r7, #32]
 8016b48:	2207      	movs	r2, #7
 8016b4a:	1ad2      	subs	r2, r2, r3
 8016b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b54:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b58:	2200      	movs	r2, #0
 8016b5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b5e:	2250      	movs	r2, #80	; 0x50
 8016b60:	2100      	movs	r1, #0
 8016b62:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016b64:	683a      	ldr	r2, [r7, #0]
 8016b66:	68f9      	ldr	r1, [r7, #12]
 8016b68:	693b      	ldr	r3, [r7, #16]
 8016b6a:	0018      	movs	r0, r3
 8016b6c:	f000 fbc4 	bl	80172f8 <pxPortInitialiseStack>
 8016b70:	0002      	movs	r2, r0
 8016b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b74:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8016b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d002      	beq.n	8016b82 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016b82:	46c0      	nop			; (mov r8, r8)
 8016b84:	46bd      	mov	sp, r7
 8016b86:	b006      	add	sp, #24
 8016b88:	bd80      	pop	{r7, pc}
 8016b8a:	46c0      	nop			; (mov r8, r8)
 8016b8c:	3fffffff 	.word	0x3fffffff

08016b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b082      	sub	sp, #8
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016b98:	f000 fc4a 	bl	8017430 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016b9c:	4b28      	ldr	r3, [pc, #160]	; (8016c40 <prvAddNewTaskToReadyList+0xb0>)
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	1c5a      	adds	r2, r3, #1
 8016ba2:	4b27      	ldr	r3, [pc, #156]	; (8016c40 <prvAddNewTaskToReadyList+0xb0>)
 8016ba4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8016ba6:	4b27      	ldr	r3, [pc, #156]	; (8016c44 <prvAddNewTaskToReadyList+0xb4>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d109      	bne.n	8016bc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016bae:	4b25      	ldr	r3, [pc, #148]	; (8016c44 <prvAddNewTaskToReadyList+0xb4>)
 8016bb0:	687a      	ldr	r2, [r7, #4]
 8016bb2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016bb4:	4b22      	ldr	r3, [pc, #136]	; (8016c40 <prvAddNewTaskToReadyList+0xb0>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	2b01      	cmp	r3, #1
 8016bba:	d110      	bne.n	8016bde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016bbc:	f000 fa6e 	bl	801709c <prvInitialiseTaskLists>
 8016bc0:	e00d      	b.n	8016bde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016bc2:	4b21      	ldr	r3, [pc, #132]	; (8016c48 <prvAddNewTaskToReadyList+0xb8>)
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d109      	bne.n	8016bde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016bca:	4b1e      	ldr	r3, [pc, #120]	; (8016c44 <prvAddNewTaskToReadyList+0xb4>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	d802      	bhi.n	8016bde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016bd8:	4b1a      	ldr	r3, [pc, #104]	; (8016c44 <prvAddNewTaskToReadyList+0xb4>)
 8016bda:	687a      	ldr	r2, [r7, #4]
 8016bdc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016bde:	4b1b      	ldr	r3, [pc, #108]	; (8016c4c <prvAddNewTaskToReadyList+0xbc>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	1c5a      	adds	r2, r3, #1
 8016be4:	4b19      	ldr	r3, [pc, #100]	; (8016c4c <prvAddNewTaskToReadyList+0xbc>)
 8016be6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bec:	4b18      	ldr	r3, [pc, #96]	; (8016c50 <prvAddNewTaskToReadyList+0xc0>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	d903      	bls.n	8016bfc <prvAddNewTaskToReadyList+0x6c>
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bf8:	4b15      	ldr	r3, [pc, #84]	; (8016c50 <prvAddNewTaskToReadyList+0xc0>)
 8016bfa:	601a      	str	r2, [r3, #0]
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c00:	0013      	movs	r3, r2
 8016c02:	009b      	lsls	r3, r3, #2
 8016c04:	189b      	adds	r3, r3, r2
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	4a12      	ldr	r2, [pc, #72]	; (8016c54 <prvAddNewTaskToReadyList+0xc4>)
 8016c0a:	189a      	adds	r2, r3, r2
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	3304      	adds	r3, #4
 8016c10:	0019      	movs	r1, r3
 8016c12:	0010      	movs	r0, r2
 8016c14:	f7ff fe33 	bl	801687e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016c18:	f000 fc1c 	bl	8017454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016c1c:	4b0a      	ldr	r3, [pc, #40]	; (8016c48 <prvAddNewTaskToReadyList+0xb8>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d008      	beq.n	8016c36 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016c24:	4b07      	ldr	r3, [pc, #28]	; (8016c44 <prvAddNewTaskToReadyList+0xb4>)
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c2e:	429a      	cmp	r2, r3
 8016c30:	d201      	bcs.n	8016c36 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016c32:	f000 fbed 	bl	8017410 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c36:	46c0      	nop			; (mov r8, r8)
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	b002      	add	sp, #8
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	46c0      	nop			; (mov r8, r8)
 8016c40:	20000658 	.word	0x20000658
 8016c44:	20000558 	.word	0x20000558
 8016c48:	20000664 	.word	0x20000664
 8016c4c:	20000674 	.word	0x20000674
 8016c50:	20000660 	.word	0x20000660
 8016c54:	2000055c 	.word	0x2000055c

08016c58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b084      	sub	sp, #16
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016c60:	2300      	movs	r3, #0
 8016c62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d010      	beq.n	8016c8c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016c6a:	4b0d      	ldr	r3, [pc, #52]	; (8016ca0 <vTaskDelay+0x48>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d001      	beq.n	8016c76 <vTaskDelay+0x1e>
 8016c72:	b672      	cpsid	i
 8016c74:	e7fe      	b.n	8016c74 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8016c76:	f000 f863 	bl	8016d40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2100      	movs	r1, #0
 8016c7e:	0018      	movs	r0, r3
 8016c80:	f000 fae6 	bl	8017250 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016c84:	f000 f868 	bl	8016d58 <xTaskResumeAll>
 8016c88:	0003      	movs	r3, r0
 8016c8a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d101      	bne.n	8016c96 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8016c92:	f000 fbbd 	bl	8017410 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016c96:	46c0      	nop			; (mov r8, r8)
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	b004      	add	sp, #16
 8016c9c:	bd80      	pop	{r7, pc}
 8016c9e:	46c0      	nop			; (mov r8, r8)
 8016ca0:	20000680 	.word	0x20000680

08016ca4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016ca4:	b590      	push	{r4, r7, lr}
 8016ca6:	b089      	sub	sp, #36	; 0x24
 8016ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016caa:	2300      	movs	r3, #0
 8016cac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016cae:	2300      	movs	r3, #0
 8016cb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016cb2:	003a      	movs	r2, r7
 8016cb4:	1d39      	adds	r1, r7, #4
 8016cb6:	2308      	movs	r3, #8
 8016cb8:	18fb      	adds	r3, r7, r3
 8016cba:	0018      	movs	r0, r3
 8016cbc:	f7f5 fde6 	bl	800c88c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016cc0:	683c      	ldr	r4, [r7, #0]
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	68ba      	ldr	r2, [r7, #8]
 8016cc6:	4918      	ldr	r1, [pc, #96]	; (8016d28 <vTaskStartScheduler+0x84>)
 8016cc8:	4818      	ldr	r0, [pc, #96]	; (8016d2c <vTaskStartScheduler+0x88>)
 8016cca:	9202      	str	r2, [sp, #8]
 8016ccc:	9301      	str	r3, [sp, #4]
 8016cce:	2300      	movs	r3, #0
 8016cd0:	9300      	str	r3, [sp, #0]
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	0022      	movs	r2, r4
 8016cd6:	f7ff fe52 	bl	801697e <xTaskCreateStatic>
 8016cda:	0002      	movs	r2, r0
 8016cdc:	4b14      	ldr	r3, [pc, #80]	; (8016d30 <vTaskStartScheduler+0x8c>)
 8016cde:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016ce0:	4b13      	ldr	r3, [pc, #76]	; (8016d30 <vTaskStartScheduler+0x8c>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d002      	beq.n	8016cee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016ce8:	2301      	movs	r3, #1
 8016cea:	60fb      	str	r3, [r7, #12]
 8016cec:	e001      	b.n	8016cf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	2b01      	cmp	r3, #1
 8016cf6:	d10d      	bne.n	8016d14 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8016cf8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016cfa:	4b0e      	ldr	r3, [pc, #56]	; (8016d34 <vTaskStartScheduler+0x90>)
 8016cfc:	2201      	movs	r2, #1
 8016cfe:	4252      	negs	r2, r2
 8016d00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016d02:	4b0d      	ldr	r3, [pc, #52]	; (8016d38 <vTaskStartScheduler+0x94>)
 8016d04:	2201      	movs	r2, #1
 8016d06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8016d08:	4b0c      	ldr	r3, [pc, #48]	; (8016d3c <vTaskStartScheduler+0x98>)
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016d0e:	f000 fb5b 	bl	80173c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016d12:	e004      	b.n	8016d1e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	3301      	adds	r3, #1
 8016d18:	d101      	bne.n	8016d1e <vTaskStartScheduler+0x7a>
 8016d1a:	b672      	cpsid	i
 8016d1c:	e7fe      	b.n	8016d1c <vTaskStartScheduler+0x78>
}
 8016d1e:	46c0      	nop			; (mov r8, r8)
 8016d20:	46bd      	mov	sp, r7
 8016d22:	b005      	add	sp, #20
 8016d24:	bd90      	pop	{r4, r7, pc}
 8016d26:	46c0      	nop			; (mov r8, r8)
 8016d28:	08019f8c 	.word	0x08019f8c
 8016d2c:	0801707d 	.word	0x0801707d
 8016d30:	2000067c 	.word	0x2000067c
 8016d34:	20000678 	.word	0x20000678
 8016d38:	20000664 	.word	0x20000664
 8016d3c:	2000065c 	.word	0x2000065c

08016d40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016d44:	4b03      	ldr	r3, [pc, #12]	; (8016d54 <vTaskSuspendAll+0x14>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	1c5a      	adds	r2, r3, #1
 8016d4a:	4b02      	ldr	r3, [pc, #8]	; (8016d54 <vTaskSuspendAll+0x14>)
 8016d4c:	601a      	str	r2, [r3, #0]
}
 8016d4e:	46c0      	nop			; (mov r8, r8)
 8016d50:	46bd      	mov	sp, r7
 8016d52:	bd80      	pop	{r7, pc}
 8016d54:	20000680 	.word	0x20000680

08016d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b084      	sub	sp, #16
 8016d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016d62:	2300      	movs	r3, #0
 8016d64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016d66:	4b3a      	ldr	r3, [pc, #232]	; (8016e50 <xTaskResumeAll+0xf8>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d101      	bne.n	8016d72 <xTaskResumeAll+0x1a>
 8016d6e:	b672      	cpsid	i
 8016d70:	e7fe      	b.n	8016d70 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016d72:	f000 fb5d 	bl	8017430 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016d76:	4b36      	ldr	r3, [pc, #216]	; (8016e50 <xTaskResumeAll+0xf8>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	1e5a      	subs	r2, r3, #1
 8016d7c:	4b34      	ldr	r3, [pc, #208]	; (8016e50 <xTaskResumeAll+0xf8>)
 8016d7e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d80:	4b33      	ldr	r3, [pc, #204]	; (8016e50 <xTaskResumeAll+0xf8>)
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d15b      	bne.n	8016e40 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016d88:	4b32      	ldr	r3, [pc, #200]	; (8016e54 <xTaskResumeAll+0xfc>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d057      	beq.n	8016e40 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016d90:	e02f      	b.n	8016df2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8016d92:	4b31      	ldr	r3, [pc, #196]	; (8016e58 <xTaskResumeAll+0x100>)
 8016d94:	68db      	ldr	r3, [r3, #12]
 8016d96:	68db      	ldr	r3, [r3, #12]
 8016d98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	3318      	adds	r3, #24
 8016d9e:	0018      	movs	r0, r3
 8016da0:	f7ff fdc5 	bl	801692e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	3304      	adds	r3, #4
 8016da8:	0018      	movs	r0, r3
 8016daa:	f7ff fdc0 	bl	801692e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016db2:	4b2a      	ldr	r3, [pc, #168]	; (8016e5c <xTaskResumeAll+0x104>)
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	429a      	cmp	r2, r3
 8016db8:	d903      	bls.n	8016dc2 <xTaskResumeAll+0x6a>
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dbe:	4b27      	ldr	r3, [pc, #156]	; (8016e5c <xTaskResumeAll+0x104>)
 8016dc0:	601a      	str	r2, [r3, #0]
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dc6:	0013      	movs	r3, r2
 8016dc8:	009b      	lsls	r3, r3, #2
 8016dca:	189b      	adds	r3, r3, r2
 8016dcc:	009b      	lsls	r3, r3, #2
 8016dce:	4a24      	ldr	r2, [pc, #144]	; (8016e60 <xTaskResumeAll+0x108>)
 8016dd0:	189a      	adds	r2, r3, r2
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	3304      	adds	r3, #4
 8016dd6:	0019      	movs	r1, r3
 8016dd8:	0010      	movs	r0, r2
 8016dda:	f7ff fd50 	bl	801687e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016de2:	4b20      	ldr	r3, [pc, #128]	; (8016e64 <xTaskResumeAll+0x10c>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016de8:	429a      	cmp	r2, r3
 8016dea:	d302      	bcc.n	8016df2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8016dec:	4b1e      	ldr	r3, [pc, #120]	; (8016e68 <xTaskResumeAll+0x110>)
 8016dee:	2201      	movs	r2, #1
 8016df0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016df2:	4b19      	ldr	r3, [pc, #100]	; (8016e58 <xTaskResumeAll+0x100>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d1cb      	bne.n	8016d92 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d001      	beq.n	8016e04 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016e00:	f000 f9e6 	bl	80171d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016e04:	4b19      	ldr	r3, [pc, #100]	; (8016e6c <xTaskResumeAll+0x114>)
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d00f      	beq.n	8016e30 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016e10:	f000 f82e 	bl	8016e70 <xTaskIncrementTick>
 8016e14:	1e03      	subs	r3, r0, #0
 8016e16:	d002      	beq.n	8016e1e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8016e18:	4b13      	ldr	r3, [pc, #76]	; (8016e68 <xTaskResumeAll+0x110>)
 8016e1a:	2201      	movs	r2, #1
 8016e1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	3b01      	subs	r3, #1
 8016e22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d1f2      	bne.n	8016e10 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8016e2a:	4b10      	ldr	r3, [pc, #64]	; (8016e6c <xTaskResumeAll+0x114>)
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016e30:	4b0d      	ldr	r3, [pc, #52]	; (8016e68 <xTaskResumeAll+0x110>)
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d003      	beq.n	8016e40 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016e38:	2301      	movs	r3, #1
 8016e3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016e3c:	f000 fae8 	bl	8017410 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016e40:	f000 fb08 	bl	8017454 <vPortExitCritical>

	return xAlreadyYielded;
 8016e44:	68bb      	ldr	r3, [r7, #8]
}
 8016e46:	0018      	movs	r0, r3
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	b004      	add	sp, #16
 8016e4c:	bd80      	pop	{r7, pc}
 8016e4e:	46c0      	nop			; (mov r8, r8)
 8016e50:	20000680 	.word	0x20000680
 8016e54:	20000658 	.word	0x20000658
 8016e58:	20000618 	.word	0x20000618
 8016e5c:	20000660 	.word	0x20000660
 8016e60:	2000055c 	.word	0x2000055c
 8016e64:	20000558 	.word	0x20000558
 8016e68:	2000066c 	.word	0x2000066c
 8016e6c:	20000668 	.word	0x20000668

08016e70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b086      	sub	sp, #24
 8016e74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016e76:	2300      	movs	r3, #0
 8016e78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e7a:	4b4c      	ldr	r3, [pc, #304]	; (8016fac <xTaskIncrementTick+0x13c>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d000      	beq.n	8016e84 <xTaskIncrementTick+0x14>
 8016e82:	e083      	b.n	8016f8c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016e84:	4b4a      	ldr	r3, [pc, #296]	; (8016fb0 <xTaskIncrementTick+0x140>)
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	3301      	adds	r3, #1
 8016e8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016e8c:	4b48      	ldr	r3, [pc, #288]	; (8016fb0 <xTaskIncrementTick+0x140>)
 8016e8e:	693a      	ldr	r2, [r7, #16]
 8016e90:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d117      	bne.n	8016ec8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8016e98:	4b46      	ldr	r3, [pc, #280]	; (8016fb4 <xTaskIncrementTick+0x144>)
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d001      	beq.n	8016ea6 <xTaskIncrementTick+0x36>
 8016ea2:	b672      	cpsid	i
 8016ea4:	e7fe      	b.n	8016ea4 <xTaskIncrementTick+0x34>
 8016ea6:	4b43      	ldr	r3, [pc, #268]	; (8016fb4 <xTaskIncrementTick+0x144>)
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	60fb      	str	r3, [r7, #12]
 8016eac:	4b42      	ldr	r3, [pc, #264]	; (8016fb8 <xTaskIncrementTick+0x148>)
 8016eae:	681a      	ldr	r2, [r3, #0]
 8016eb0:	4b40      	ldr	r3, [pc, #256]	; (8016fb4 <xTaskIncrementTick+0x144>)
 8016eb2:	601a      	str	r2, [r3, #0]
 8016eb4:	4b40      	ldr	r3, [pc, #256]	; (8016fb8 <xTaskIncrementTick+0x148>)
 8016eb6:	68fa      	ldr	r2, [r7, #12]
 8016eb8:	601a      	str	r2, [r3, #0]
 8016eba:	4b40      	ldr	r3, [pc, #256]	; (8016fbc <xTaskIncrementTick+0x14c>)
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	1c5a      	adds	r2, r3, #1
 8016ec0:	4b3e      	ldr	r3, [pc, #248]	; (8016fbc <xTaskIncrementTick+0x14c>)
 8016ec2:	601a      	str	r2, [r3, #0]
 8016ec4:	f000 f984 	bl	80171d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016ec8:	4b3d      	ldr	r3, [pc, #244]	; (8016fc0 <xTaskIncrementTick+0x150>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	693a      	ldr	r2, [r7, #16]
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d34e      	bcc.n	8016f70 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016ed2:	4b38      	ldr	r3, [pc, #224]	; (8016fb4 <xTaskIncrementTick+0x144>)
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d101      	bne.n	8016ee0 <xTaskIncrementTick+0x70>
 8016edc:	2301      	movs	r3, #1
 8016ede:	e000      	b.n	8016ee2 <xTaskIncrementTick+0x72>
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d004      	beq.n	8016ef0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ee6:	4b36      	ldr	r3, [pc, #216]	; (8016fc0 <xTaskIncrementTick+0x150>)
 8016ee8:	2201      	movs	r2, #1
 8016eea:	4252      	negs	r2, r2
 8016eec:	601a      	str	r2, [r3, #0]
					break;
 8016eee:	e03f      	b.n	8016f70 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8016ef0:	4b30      	ldr	r3, [pc, #192]	; (8016fb4 <xTaskIncrementTick+0x144>)
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	68db      	ldr	r3, [r3, #12]
 8016ef6:	68db      	ldr	r3, [r3, #12]
 8016ef8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	685b      	ldr	r3, [r3, #4]
 8016efe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016f00:	693a      	ldr	r2, [r7, #16]
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d203      	bcs.n	8016f10 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016f08:	4b2d      	ldr	r3, [pc, #180]	; (8016fc0 <xTaskIncrementTick+0x150>)
 8016f0a:	687a      	ldr	r2, [r7, #4]
 8016f0c:	601a      	str	r2, [r3, #0]
						break;
 8016f0e:	e02f      	b.n	8016f70 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016f10:	68bb      	ldr	r3, [r7, #8]
 8016f12:	3304      	adds	r3, #4
 8016f14:	0018      	movs	r0, r3
 8016f16:	f7ff fd0a 	bl	801692e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016f1a:	68bb      	ldr	r3, [r7, #8]
 8016f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d004      	beq.n	8016f2c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016f22:	68bb      	ldr	r3, [r7, #8]
 8016f24:	3318      	adds	r3, #24
 8016f26:	0018      	movs	r0, r3
 8016f28:	f7ff fd01 	bl	801692e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f30:	4b24      	ldr	r3, [pc, #144]	; (8016fc4 <xTaskIncrementTick+0x154>)
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	429a      	cmp	r2, r3
 8016f36:	d903      	bls.n	8016f40 <xTaskIncrementTick+0xd0>
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f3c:	4b21      	ldr	r3, [pc, #132]	; (8016fc4 <xTaskIncrementTick+0x154>)
 8016f3e:	601a      	str	r2, [r3, #0]
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f44:	0013      	movs	r3, r2
 8016f46:	009b      	lsls	r3, r3, #2
 8016f48:	189b      	adds	r3, r3, r2
 8016f4a:	009b      	lsls	r3, r3, #2
 8016f4c:	4a1e      	ldr	r2, [pc, #120]	; (8016fc8 <xTaskIncrementTick+0x158>)
 8016f4e:	189a      	adds	r2, r3, r2
 8016f50:	68bb      	ldr	r3, [r7, #8]
 8016f52:	3304      	adds	r3, #4
 8016f54:	0019      	movs	r1, r3
 8016f56:	0010      	movs	r0, r2
 8016f58:	f7ff fc91 	bl	801687e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016f5c:	68bb      	ldr	r3, [r7, #8]
 8016f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f60:	4b1a      	ldr	r3, [pc, #104]	; (8016fcc <xTaskIncrementTick+0x15c>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d3b3      	bcc.n	8016ed2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8016f6a:	2301      	movs	r3, #1
 8016f6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016f6e:	e7b0      	b.n	8016ed2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016f70:	4b16      	ldr	r3, [pc, #88]	; (8016fcc <xTaskIncrementTick+0x15c>)
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f76:	4914      	ldr	r1, [pc, #80]	; (8016fc8 <xTaskIncrementTick+0x158>)
 8016f78:	0013      	movs	r3, r2
 8016f7a:	009b      	lsls	r3, r3, #2
 8016f7c:	189b      	adds	r3, r3, r2
 8016f7e:	009b      	lsls	r3, r3, #2
 8016f80:	585b      	ldr	r3, [r3, r1]
 8016f82:	2b01      	cmp	r3, #1
 8016f84:	d907      	bls.n	8016f96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8016f86:	2301      	movs	r3, #1
 8016f88:	617b      	str	r3, [r7, #20]
 8016f8a:	e004      	b.n	8016f96 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016f8c:	4b10      	ldr	r3, [pc, #64]	; (8016fd0 <xTaskIncrementTick+0x160>)
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	1c5a      	adds	r2, r3, #1
 8016f92:	4b0f      	ldr	r3, [pc, #60]	; (8016fd0 <xTaskIncrementTick+0x160>)
 8016f94:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016f96:	4b0f      	ldr	r3, [pc, #60]	; (8016fd4 <xTaskIncrementTick+0x164>)
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d001      	beq.n	8016fa2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8016f9e:	2301      	movs	r3, #1
 8016fa0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016fa2:	697b      	ldr	r3, [r7, #20]
}
 8016fa4:	0018      	movs	r0, r3
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	b006      	add	sp, #24
 8016faa:	bd80      	pop	{r7, pc}
 8016fac:	20000680 	.word	0x20000680
 8016fb0:	2000065c 	.word	0x2000065c
 8016fb4:	20000610 	.word	0x20000610
 8016fb8:	20000614 	.word	0x20000614
 8016fbc:	20000670 	.word	0x20000670
 8016fc0:	20000678 	.word	0x20000678
 8016fc4:	20000660 	.word	0x20000660
 8016fc8:	2000055c 	.word	0x2000055c
 8016fcc:	20000558 	.word	0x20000558
 8016fd0:	20000668 	.word	0x20000668
 8016fd4:	2000066c 	.word	0x2000066c

08016fd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b082      	sub	sp, #8
 8016fdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016fde:	4b22      	ldr	r3, [pc, #136]	; (8017068 <vTaskSwitchContext+0x90>)
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d003      	beq.n	8016fee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016fe6:	4b21      	ldr	r3, [pc, #132]	; (801706c <vTaskSwitchContext+0x94>)
 8016fe8:	2201      	movs	r2, #1
 8016fea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016fec:	e037      	b.n	801705e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8016fee:	4b1f      	ldr	r3, [pc, #124]	; (801706c <vTaskSwitchContext+0x94>)
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8016ff4:	4b1e      	ldr	r3, [pc, #120]	; (8017070 <vTaskSwitchContext+0x98>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	607b      	str	r3, [r7, #4]
 8016ffa:	e007      	b.n	801700c <vTaskSwitchContext+0x34>
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d101      	bne.n	8017006 <vTaskSwitchContext+0x2e>
 8017002:	b672      	cpsid	i
 8017004:	e7fe      	b.n	8017004 <vTaskSwitchContext+0x2c>
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	3b01      	subs	r3, #1
 801700a:	607b      	str	r3, [r7, #4]
 801700c:	4919      	ldr	r1, [pc, #100]	; (8017074 <vTaskSwitchContext+0x9c>)
 801700e:	687a      	ldr	r2, [r7, #4]
 8017010:	0013      	movs	r3, r2
 8017012:	009b      	lsls	r3, r3, #2
 8017014:	189b      	adds	r3, r3, r2
 8017016:	009b      	lsls	r3, r3, #2
 8017018:	585b      	ldr	r3, [r3, r1]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d0ee      	beq.n	8016ffc <vTaskSwitchContext+0x24>
 801701e:	687a      	ldr	r2, [r7, #4]
 8017020:	0013      	movs	r3, r2
 8017022:	009b      	lsls	r3, r3, #2
 8017024:	189b      	adds	r3, r3, r2
 8017026:	009b      	lsls	r3, r3, #2
 8017028:	4a12      	ldr	r2, [pc, #72]	; (8017074 <vTaskSwitchContext+0x9c>)
 801702a:	189b      	adds	r3, r3, r2
 801702c:	603b      	str	r3, [r7, #0]
 801702e:	683b      	ldr	r3, [r7, #0]
 8017030:	685b      	ldr	r3, [r3, #4]
 8017032:	685a      	ldr	r2, [r3, #4]
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	605a      	str	r2, [r3, #4]
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	685a      	ldr	r2, [r3, #4]
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	3308      	adds	r3, #8
 8017040:	429a      	cmp	r2, r3
 8017042:	d104      	bne.n	801704e <vTaskSwitchContext+0x76>
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	685a      	ldr	r2, [r3, #4]
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	605a      	str	r2, [r3, #4]
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	685b      	ldr	r3, [r3, #4]
 8017052:	68da      	ldr	r2, [r3, #12]
 8017054:	4b08      	ldr	r3, [pc, #32]	; (8017078 <vTaskSwitchContext+0xa0>)
 8017056:	601a      	str	r2, [r3, #0]
 8017058:	4b05      	ldr	r3, [pc, #20]	; (8017070 <vTaskSwitchContext+0x98>)
 801705a:	687a      	ldr	r2, [r7, #4]
 801705c:	601a      	str	r2, [r3, #0]
}
 801705e:	46c0      	nop			; (mov r8, r8)
 8017060:	46bd      	mov	sp, r7
 8017062:	b002      	add	sp, #8
 8017064:	bd80      	pop	{r7, pc}
 8017066:	46c0      	nop			; (mov r8, r8)
 8017068:	20000680 	.word	0x20000680
 801706c:	2000066c 	.word	0x2000066c
 8017070:	20000660 	.word	0x20000660
 8017074:	2000055c 	.word	0x2000055c
 8017078:	20000558 	.word	0x20000558

0801707c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b082      	sub	sp, #8
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017084:	f000 f84e 	bl	8017124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017088:	4b03      	ldr	r3, [pc, #12]	; (8017098 <prvIdleTask+0x1c>)
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	2b01      	cmp	r3, #1
 801708e:	d9f9      	bls.n	8017084 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017090:	f000 f9be 	bl	8017410 <vPortYield>
		prvCheckTasksWaitingTermination();
 8017094:	e7f6      	b.n	8017084 <prvIdleTask+0x8>
 8017096:	46c0      	nop			; (mov r8, r8)
 8017098:	2000055c 	.word	0x2000055c

0801709c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b082      	sub	sp, #8
 80170a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80170a2:	2300      	movs	r3, #0
 80170a4:	607b      	str	r3, [r7, #4]
 80170a6:	e00c      	b.n	80170c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80170a8:	687a      	ldr	r2, [r7, #4]
 80170aa:	0013      	movs	r3, r2
 80170ac:	009b      	lsls	r3, r3, #2
 80170ae:	189b      	adds	r3, r3, r2
 80170b0:	009b      	lsls	r3, r3, #2
 80170b2:	4a14      	ldr	r2, [pc, #80]	; (8017104 <prvInitialiseTaskLists+0x68>)
 80170b4:	189b      	adds	r3, r3, r2
 80170b6:	0018      	movs	r0, r3
 80170b8:	f7ff fbb8 	bl	801682c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	3301      	adds	r3, #1
 80170c0:	607b      	str	r3, [r7, #4]
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	2b06      	cmp	r3, #6
 80170c6:	d9ef      	bls.n	80170a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80170c8:	4b0f      	ldr	r3, [pc, #60]	; (8017108 <prvInitialiseTaskLists+0x6c>)
 80170ca:	0018      	movs	r0, r3
 80170cc:	f7ff fbae 	bl	801682c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80170d0:	4b0e      	ldr	r3, [pc, #56]	; (801710c <prvInitialiseTaskLists+0x70>)
 80170d2:	0018      	movs	r0, r3
 80170d4:	f7ff fbaa 	bl	801682c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80170d8:	4b0d      	ldr	r3, [pc, #52]	; (8017110 <prvInitialiseTaskLists+0x74>)
 80170da:	0018      	movs	r0, r3
 80170dc:	f7ff fba6 	bl	801682c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80170e0:	4b0c      	ldr	r3, [pc, #48]	; (8017114 <prvInitialiseTaskLists+0x78>)
 80170e2:	0018      	movs	r0, r3
 80170e4:	f7ff fba2 	bl	801682c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80170e8:	4b0b      	ldr	r3, [pc, #44]	; (8017118 <prvInitialiseTaskLists+0x7c>)
 80170ea:	0018      	movs	r0, r3
 80170ec:	f7ff fb9e 	bl	801682c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80170f0:	4b0a      	ldr	r3, [pc, #40]	; (801711c <prvInitialiseTaskLists+0x80>)
 80170f2:	4a05      	ldr	r2, [pc, #20]	; (8017108 <prvInitialiseTaskLists+0x6c>)
 80170f4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80170f6:	4b0a      	ldr	r3, [pc, #40]	; (8017120 <prvInitialiseTaskLists+0x84>)
 80170f8:	4a04      	ldr	r2, [pc, #16]	; (801710c <prvInitialiseTaskLists+0x70>)
 80170fa:	601a      	str	r2, [r3, #0]
}
 80170fc:	46c0      	nop			; (mov r8, r8)
 80170fe:	46bd      	mov	sp, r7
 8017100:	b002      	add	sp, #8
 8017102:	bd80      	pop	{r7, pc}
 8017104:	2000055c 	.word	0x2000055c
 8017108:	200005e8 	.word	0x200005e8
 801710c:	200005fc 	.word	0x200005fc
 8017110:	20000618 	.word	0x20000618
 8017114:	2000062c 	.word	0x2000062c
 8017118:	20000644 	.word	0x20000644
 801711c:	20000610 	.word	0x20000610
 8017120:	20000614 	.word	0x20000614

08017124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b082      	sub	sp, #8
 8017128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801712a:	e01a      	b.n	8017162 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 801712c:	f000 f980 	bl	8017430 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8017130:	4b10      	ldr	r3, [pc, #64]	; (8017174 <prvCheckTasksWaitingTermination+0x50>)
 8017132:	68db      	ldr	r3, [r3, #12]
 8017134:	68db      	ldr	r3, [r3, #12]
 8017136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	3304      	adds	r3, #4
 801713c:	0018      	movs	r0, r3
 801713e:	f7ff fbf6 	bl	801692e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017142:	4b0d      	ldr	r3, [pc, #52]	; (8017178 <prvCheckTasksWaitingTermination+0x54>)
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	1e5a      	subs	r2, r3, #1
 8017148:	4b0b      	ldr	r3, [pc, #44]	; (8017178 <prvCheckTasksWaitingTermination+0x54>)
 801714a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 801714c:	4b0b      	ldr	r3, [pc, #44]	; (801717c <prvCheckTasksWaitingTermination+0x58>)
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	1e5a      	subs	r2, r3, #1
 8017152:	4b0a      	ldr	r3, [pc, #40]	; (801717c <prvCheckTasksWaitingTermination+0x58>)
 8017154:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8017156:	f000 f97d 	bl	8017454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	0018      	movs	r0, r3
 801715e:	f000 f80f 	bl	8017180 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017162:	4b06      	ldr	r3, [pc, #24]	; (801717c <prvCheckTasksWaitingTermination+0x58>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d1e0      	bne.n	801712c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801716a:	46c0      	nop			; (mov r8, r8)
 801716c:	46c0      	nop			; (mov r8, r8)
 801716e:	46bd      	mov	sp, r7
 8017170:	b002      	add	sp, #8
 8017172:	bd80      	pop	{r7, pc}
 8017174:	2000062c 	.word	0x2000062c
 8017178:	20000658 	.word	0x20000658
 801717c:	20000640 	.word	0x20000640

08017180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2251      	movs	r2, #81	; 0x51
 801718c:	5c9b      	ldrb	r3, [r3, r2]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d109      	bne.n	80171a6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017196:	0018      	movs	r0, r3
 8017198:	f000 fa88 	bl	80176ac <vPortFree>
				vPortFree( pxTCB );
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	0018      	movs	r0, r3
 80171a0:	f000 fa84 	bl	80176ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80171a4:	e010      	b.n	80171c8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	2251      	movs	r2, #81	; 0x51
 80171aa:	5c9b      	ldrb	r3, [r3, r2]
 80171ac:	2b01      	cmp	r3, #1
 80171ae:	d104      	bne.n	80171ba <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	0018      	movs	r0, r3
 80171b4:	f000 fa7a 	bl	80176ac <vPortFree>
	}
 80171b8:	e006      	b.n	80171c8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	2251      	movs	r2, #81	; 0x51
 80171be:	5c9b      	ldrb	r3, [r3, r2]
 80171c0:	2b02      	cmp	r3, #2
 80171c2:	d001      	beq.n	80171c8 <prvDeleteTCB+0x48>
 80171c4:	b672      	cpsid	i
 80171c6:	e7fe      	b.n	80171c6 <prvDeleteTCB+0x46>
	}
 80171c8:	46c0      	nop			; (mov r8, r8)
 80171ca:	46bd      	mov	sp, r7
 80171cc:	b002      	add	sp, #8
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b082      	sub	sp, #8
 80171d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80171d6:	4b0e      	ldr	r3, [pc, #56]	; (8017210 <prvResetNextTaskUnblockTime+0x40>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d101      	bne.n	80171e4 <prvResetNextTaskUnblockTime+0x14>
 80171e0:	2301      	movs	r3, #1
 80171e2:	e000      	b.n	80171e6 <prvResetNextTaskUnblockTime+0x16>
 80171e4:	2300      	movs	r3, #0
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d004      	beq.n	80171f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80171ea:	4b0a      	ldr	r3, [pc, #40]	; (8017214 <prvResetNextTaskUnblockTime+0x44>)
 80171ec:	2201      	movs	r2, #1
 80171ee:	4252      	negs	r2, r2
 80171f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80171f2:	e008      	b.n	8017206 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80171f4:	4b06      	ldr	r3, [pc, #24]	; (8017210 <prvResetNextTaskUnblockTime+0x40>)
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	68db      	ldr	r3, [r3, #12]
 80171fa:	68db      	ldr	r3, [r3, #12]
 80171fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	685a      	ldr	r2, [r3, #4]
 8017202:	4b04      	ldr	r3, [pc, #16]	; (8017214 <prvResetNextTaskUnblockTime+0x44>)
 8017204:	601a      	str	r2, [r3, #0]
}
 8017206:	46c0      	nop			; (mov r8, r8)
 8017208:	46bd      	mov	sp, r7
 801720a:	b002      	add	sp, #8
 801720c:	bd80      	pop	{r7, pc}
 801720e:	46c0      	nop			; (mov r8, r8)
 8017210:	20000610 	.word	0x20000610
 8017214:	20000678 	.word	0x20000678

08017218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017218:	b580      	push	{r7, lr}
 801721a:	b082      	sub	sp, #8
 801721c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801721e:	4b0a      	ldr	r3, [pc, #40]	; (8017248 <xTaskGetSchedulerState+0x30>)
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d102      	bne.n	801722c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017226:	2301      	movs	r3, #1
 8017228:	607b      	str	r3, [r7, #4]
 801722a:	e008      	b.n	801723e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801722c:	4b07      	ldr	r3, [pc, #28]	; (801724c <xTaskGetSchedulerState+0x34>)
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d102      	bne.n	801723a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017234:	2302      	movs	r3, #2
 8017236:	607b      	str	r3, [r7, #4]
 8017238:	e001      	b.n	801723e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801723a:	2300      	movs	r3, #0
 801723c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801723e:	687b      	ldr	r3, [r7, #4]
	}
 8017240:	0018      	movs	r0, r3
 8017242:	46bd      	mov	sp, r7
 8017244:	b002      	add	sp, #8
 8017246:	bd80      	pop	{r7, pc}
 8017248:	20000664 	.word	0x20000664
 801724c:	20000680 	.word	0x20000680

08017250 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b084      	sub	sp, #16
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
 8017258:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801725a:	4b21      	ldr	r3, [pc, #132]	; (80172e0 <prvAddCurrentTaskToDelayedList+0x90>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017260:	4b20      	ldr	r3, [pc, #128]	; (80172e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	3304      	adds	r3, #4
 8017266:	0018      	movs	r0, r3
 8017268:	f7ff fb61 	bl	801692e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	3301      	adds	r3, #1
 8017270:	d10b      	bne.n	801728a <prvAddCurrentTaskToDelayedList+0x3a>
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d008      	beq.n	801728a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017278:	4b1a      	ldr	r3, [pc, #104]	; (80172e4 <prvAddCurrentTaskToDelayedList+0x94>)
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	1d1a      	adds	r2, r3, #4
 801727e:	4b1a      	ldr	r3, [pc, #104]	; (80172e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8017280:	0011      	movs	r1, r2
 8017282:	0018      	movs	r0, r3
 8017284:	f7ff fafb 	bl	801687e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017288:	e026      	b.n	80172d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801728a:	68fa      	ldr	r2, [r7, #12]
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	18d3      	adds	r3, r2, r3
 8017290:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017292:	4b14      	ldr	r3, [pc, #80]	; (80172e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	68ba      	ldr	r2, [r7, #8]
 8017298:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801729a:	68ba      	ldr	r2, [r7, #8]
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	429a      	cmp	r2, r3
 80172a0:	d209      	bcs.n	80172b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80172a2:	4b12      	ldr	r3, [pc, #72]	; (80172ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80172a4:	681a      	ldr	r2, [r3, #0]
 80172a6:	4b0f      	ldr	r3, [pc, #60]	; (80172e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	3304      	adds	r3, #4
 80172ac:	0019      	movs	r1, r3
 80172ae:	0010      	movs	r0, r2
 80172b0:	f7ff fb07 	bl	80168c2 <vListInsert>
}
 80172b4:	e010      	b.n	80172d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80172b6:	4b0e      	ldr	r3, [pc, #56]	; (80172f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80172b8:	681a      	ldr	r2, [r3, #0]
 80172ba:	4b0a      	ldr	r3, [pc, #40]	; (80172e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	3304      	adds	r3, #4
 80172c0:	0019      	movs	r1, r3
 80172c2:	0010      	movs	r0, r2
 80172c4:	f7ff fafd 	bl	80168c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80172c8:	4b0a      	ldr	r3, [pc, #40]	; (80172f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	68ba      	ldr	r2, [r7, #8]
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d202      	bcs.n	80172d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80172d2:	4b08      	ldr	r3, [pc, #32]	; (80172f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80172d4:	68ba      	ldr	r2, [r7, #8]
 80172d6:	601a      	str	r2, [r3, #0]
}
 80172d8:	46c0      	nop			; (mov r8, r8)
 80172da:	46bd      	mov	sp, r7
 80172dc:	b004      	add	sp, #16
 80172de:	bd80      	pop	{r7, pc}
 80172e0:	2000065c 	.word	0x2000065c
 80172e4:	20000558 	.word	0x20000558
 80172e8:	20000644 	.word	0x20000644
 80172ec:	20000614 	.word	0x20000614
 80172f0:	20000610 	.word	0x20000610
 80172f4:	20000678 	.word	0x20000678

080172f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b084      	sub	sp, #16
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	60f8      	str	r0, [r7, #12]
 8017300:	60b9      	str	r1, [r7, #8]
 8017302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	3b04      	subs	r3, #4
 8017308:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	2280      	movs	r2, #128	; 0x80
 801730e:	0452      	lsls	r2, r2, #17
 8017310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	3b04      	subs	r3, #4
 8017316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8017318:	68ba      	ldr	r2, [r7, #8]
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	3b04      	subs	r3, #4
 8017322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017324:	4a08      	ldr	r2, [pc, #32]	; (8017348 <pxPortInitialiseStack+0x50>)
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	3b14      	subs	r3, #20
 801732e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017330:	687a      	ldr	r2, [r7, #4]
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	3b20      	subs	r3, #32
 801733a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801733c:	68fb      	ldr	r3, [r7, #12]
}
 801733e:	0018      	movs	r0, r3
 8017340:	46bd      	mov	sp, r7
 8017342:	b004      	add	sp, #16
 8017344:	bd80      	pop	{r7, pc}
 8017346:	46c0      	nop			; (mov r8, r8)
 8017348:	0801734d 	.word	0x0801734d

0801734c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b082      	sub	sp, #8
 8017350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8017352:	2300      	movs	r3, #0
 8017354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017356:	4b08      	ldr	r3, [pc, #32]	; (8017378 <prvTaskExitError+0x2c>)
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	3301      	adds	r3, #1
 801735c:	d001      	beq.n	8017362 <prvTaskExitError+0x16>
 801735e:	b672      	cpsid	i
 8017360:	e7fe      	b.n	8017360 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8017362:	b672      	cpsid	i
	while( ulDummy == 0 )
 8017364:	46c0      	nop			; (mov r8, r8)
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d0fc      	beq.n	8017366 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801736c:	46c0      	nop			; (mov r8, r8)
 801736e:	46c0      	nop			; (mov r8, r8)
 8017370:	46bd      	mov	sp, r7
 8017372:	b002      	add	sp, #8
 8017374:	bd80      	pop	{r7, pc}
 8017376:	46c0      	nop			; (mov r8, r8)
 8017378:	200001f0 	.word	0x200001f0

0801737c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 801737c:	b580      	push	{r7, lr}
 801737e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8017380:	46c0      	nop			; (mov r8, r8)
 8017382:	46bd      	mov	sp, r7
 8017384:	bd80      	pop	{r7, pc}
	...

08017390 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8017390:	4a0b      	ldr	r2, [pc, #44]	; (80173c0 <pxCurrentTCBConst2>)
 8017392:	6813      	ldr	r3, [r2, #0]
 8017394:	6818      	ldr	r0, [r3, #0]
 8017396:	3020      	adds	r0, #32
 8017398:	f380 8809 	msr	PSP, r0
 801739c:	2002      	movs	r0, #2
 801739e:	f380 8814 	msr	CONTROL, r0
 80173a2:	f3bf 8f6f 	isb	sy
 80173a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80173a8:	46ae      	mov	lr, r5
 80173aa:	bc08      	pop	{r3}
 80173ac:	bc04      	pop	{r2}
 80173ae:	b662      	cpsie	i
 80173b0:	4718      	bx	r3
 80173b2:	46c0      	nop			; (mov r8, r8)
 80173b4:	46c0      	nop			; (mov r8, r8)
 80173b6:	46c0      	nop			; (mov r8, r8)
 80173b8:	46c0      	nop			; (mov r8, r8)
 80173ba:	46c0      	nop			; (mov r8, r8)
 80173bc:	46c0      	nop			; (mov r8, r8)
 80173be:	46c0      	nop			; (mov r8, r8)

080173c0 <pxCurrentTCBConst2>:
 80173c0:	20000558 	.word	0x20000558
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80173c4:	46c0      	nop			; (mov r8, r8)
 80173c6:	46c0      	nop			; (mov r8, r8)

080173c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80173cc:	4b0e      	ldr	r3, [pc, #56]	; (8017408 <xPortStartScheduler+0x40>)
 80173ce:	681a      	ldr	r2, [r3, #0]
 80173d0:	4b0d      	ldr	r3, [pc, #52]	; (8017408 <xPortStartScheduler+0x40>)
 80173d2:	21ff      	movs	r1, #255	; 0xff
 80173d4:	0409      	lsls	r1, r1, #16
 80173d6:	430a      	orrs	r2, r1
 80173d8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80173da:	4b0b      	ldr	r3, [pc, #44]	; (8017408 <xPortStartScheduler+0x40>)
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	4b0a      	ldr	r3, [pc, #40]	; (8017408 <xPortStartScheduler+0x40>)
 80173e0:	21ff      	movs	r1, #255	; 0xff
 80173e2:	0609      	lsls	r1, r1, #24
 80173e4:	430a      	orrs	r2, r1
 80173e6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80173e8:	f000 f898 	bl	801751c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80173ec:	4b07      	ldr	r3, [pc, #28]	; (801740c <xPortStartScheduler+0x44>)
 80173ee:	2200      	movs	r2, #0
 80173f0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80173f2:	f7ff ffcd 	bl	8017390 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80173f6:	f7ff fdef 	bl	8016fd8 <vTaskSwitchContext>
	prvTaskExitError();
 80173fa:	f7ff ffa7 	bl	801734c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80173fe:	2300      	movs	r3, #0
}
 8017400:	0018      	movs	r0, r3
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}
 8017406:	46c0      	nop			; (mov r8, r8)
 8017408:	e000ed20 	.word	0xe000ed20
 801740c:	200001f0 	.word	0x200001f0

08017410 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8017410:	b580      	push	{r7, lr}
 8017412:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8017414:	4b05      	ldr	r3, [pc, #20]	; (801742c <vPortYield+0x1c>)
 8017416:	2280      	movs	r2, #128	; 0x80
 8017418:	0552      	lsls	r2, r2, #21
 801741a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801741c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8017420:	f3bf 8f6f 	isb	sy
}
 8017424:	46c0      	nop			; (mov r8, r8)
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	46c0      	nop			; (mov r8, r8)
 801742c:	e000ed04 	.word	0xe000ed04

08017430 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017430:	b580      	push	{r7, lr}
 8017432:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8017434:	b672      	cpsid	i
    uxCriticalNesting++;
 8017436:	4b06      	ldr	r3, [pc, #24]	; (8017450 <vPortEnterCritical+0x20>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	1c5a      	adds	r2, r3, #1
 801743c:	4b04      	ldr	r3, [pc, #16]	; (8017450 <vPortEnterCritical+0x20>)
 801743e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8017440:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8017444:	f3bf 8f6f 	isb	sy
}
 8017448:	46c0      	nop			; (mov r8, r8)
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
 801744e:	46c0      	nop			; (mov r8, r8)
 8017450:	200001f0 	.word	0x200001f0

08017454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017454:	b580      	push	{r7, lr}
 8017456:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017458:	4b09      	ldr	r3, [pc, #36]	; (8017480 <vPortExitCritical+0x2c>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d101      	bne.n	8017464 <vPortExitCritical+0x10>
 8017460:	b672      	cpsid	i
 8017462:	e7fe      	b.n	8017462 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8017464:	4b06      	ldr	r3, [pc, #24]	; (8017480 <vPortExitCritical+0x2c>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	1e5a      	subs	r2, r3, #1
 801746a:	4b05      	ldr	r3, [pc, #20]	; (8017480 <vPortExitCritical+0x2c>)
 801746c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 801746e:	4b04      	ldr	r3, [pc, #16]	; (8017480 <vPortExitCritical+0x2c>)
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d100      	bne.n	8017478 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8017476:	b662      	cpsie	i
    }
}
 8017478:	46c0      	nop			; (mov r8, r8)
 801747a:	46bd      	mov	sp, r7
 801747c:	bd80      	pop	{r7, pc}
 801747e:	46c0      	nop			; (mov r8, r8)
 8017480:	200001f0 	.word	0x200001f0

08017484 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8017484:	f3ef 8010 	mrs	r0, PRIMASK
 8017488:	b672      	cpsid	i
 801748a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 801748c:	46c0      	nop			; (mov r8, r8)
 801748e:	0018      	movs	r0, r3

08017490 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8017490:	f380 8810 	msr	PRIMASK, r0
 8017494:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8017496:	46c0      	nop			; (mov r8, r8)
	...

080174a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80174a0:	f3ef 8009 	mrs	r0, PSP
 80174a4:	4b0e      	ldr	r3, [pc, #56]	; (80174e0 <pxCurrentTCBConst>)
 80174a6:	681a      	ldr	r2, [r3, #0]
 80174a8:	3820      	subs	r0, #32
 80174aa:	6010      	str	r0, [r2, #0]
 80174ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80174ae:	4644      	mov	r4, r8
 80174b0:	464d      	mov	r5, r9
 80174b2:	4656      	mov	r6, sl
 80174b4:	465f      	mov	r7, fp
 80174b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80174b8:	b508      	push	{r3, lr}
 80174ba:	b672      	cpsid	i
 80174bc:	f7ff fd8c 	bl	8016fd8 <vTaskSwitchContext>
 80174c0:	b662      	cpsie	i
 80174c2:	bc0c      	pop	{r2, r3}
 80174c4:	6811      	ldr	r1, [r2, #0]
 80174c6:	6808      	ldr	r0, [r1, #0]
 80174c8:	3010      	adds	r0, #16
 80174ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80174cc:	46a0      	mov	r8, r4
 80174ce:	46a9      	mov	r9, r5
 80174d0:	46b2      	mov	sl, r6
 80174d2:	46bb      	mov	fp, r7
 80174d4:	f380 8809 	msr	PSP, r0
 80174d8:	3820      	subs	r0, #32
 80174da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80174dc:	4718      	bx	r3
 80174de:	46c0      	nop			; (mov r8, r8)

080174e0 <pxCurrentTCBConst>:
 80174e0:	20000558 	.word	0x20000558
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80174e4:	46c0      	nop			; (mov r8, r8)
 80174e6:	46c0      	nop			; (mov r8, r8)

080174e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b082      	sub	sp, #8
 80174ec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80174ee:	f7ff ffc9 	bl	8017484 <ulSetInterruptMaskFromISR>
 80174f2:	0003      	movs	r3, r0
 80174f4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80174f6:	f7ff fcbb 	bl	8016e70 <xTaskIncrementTick>
 80174fa:	1e03      	subs	r3, r0, #0
 80174fc:	d003      	beq.n	8017506 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80174fe:	4b06      	ldr	r3, [pc, #24]	; (8017518 <xPortSysTickHandler+0x30>)
 8017500:	2280      	movs	r2, #128	; 0x80
 8017502:	0552      	lsls	r2, r2, #21
 8017504:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	0018      	movs	r0, r3
 801750a:	f7ff ffc1 	bl	8017490 <vClearInterruptMaskFromISR>
}
 801750e:	46c0      	nop			; (mov r8, r8)
 8017510:	46bd      	mov	sp, r7
 8017512:	b002      	add	sp, #8
 8017514:	bd80      	pop	{r7, pc}
 8017516:	46c0      	nop			; (mov r8, r8)
 8017518:	e000ed04 	.word	0xe000ed04

0801751c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 801751c:	b580      	push	{r7, lr}
 801751e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8017520:	4b0b      	ldr	r3, [pc, #44]	; (8017550 <prvSetupTimerInterrupt+0x34>)
 8017522:	2200      	movs	r2, #0
 8017524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8017526:	4b0b      	ldr	r3, [pc, #44]	; (8017554 <prvSetupTimerInterrupt+0x38>)
 8017528:	2200      	movs	r2, #0
 801752a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801752c:	4b0a      	ldr	r3, [pc, #40]	; (8017558 <prvSetupTimerInterrupt+0x3c>)
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	22fa      	movs	r2, #250	; 0xfa
 8017532:	0091      	lsls	r1, r2, #2
 8017534:	0018      	movs	r0, r3
 8017536:	f7f1 fe03 	bl	8009140 <__udivsi3>
 801753a:	0003      	movs	r3, r0
 801753c:	001a      	movs	r2, r3
 801753e:	4b07      	ldr	r3, [pc, #28]	; (801755c <prvSetupTimerInterrupt+0x40>)
 8017540:	3a01      	subs	r2, #1
 8017542:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8017544:	4b02      	ldr	r3, [pc, #8]	; (8017550 <prvSetupTimerInterrupt+0x34>)
 8017546:	2207      	movs	r2, #7
 8017548:	601a      	str	r2, [r3, #0]
}
 801754a:	46c0      	nop			; (mov r8, r8)
 801754c:	46bd      	mov	sp, r7
 801754e:	bd80      	pop	{r7, pc}
 8017550:	e000e010 	.word	0xe000e010
 8017554:	e000e018 	.word	0xe000e018
 8017558:	200000d4 	.word	0x200000d4
 801755c:	e000e014 	.word	0xe000e014

08017560 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b086      	sub	sp, #24
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017568:	2300      	movs	r3, #0
 801756a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801756c:	f7ff fbe8 	bl	8016d40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017570:	4b49      	ldr	r3, [pc, #292]	; (8017698 <pvPortMalloc+0x138>)
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d101      	bne.n	801757c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017578:	f000 f8e0 	bl	801773c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801757c:	4b47      	ldr	r3, [pc, #284]	; (801769c <pvPortMalloc+0x13c>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	687a      	ldr	r2, [r7, #4]
 8017582:	4013      	ands	r3, r2
 8017584:	d000      	beq.n	8017588 <pvPortMalloc+0x28>
 8017586:	e079      	b.n	801767c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d012      	beq.n	80175b4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 801758e:	2208      	movs	r2, #8
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	189b      	adds	r3, r3, r2
 8017594:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	2207      	movs	r2, #7
 801759a:	4013      	ands	r3, r2
 801759c:	d00a      	beq.n	80175b4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	2207      	movs	r2, #7
 80175a2:	4393      	bics	r3, r2
 80175a4:	3308      	adds	r3, #8
 80175a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	2207      	movs	r2, #7
 80175ac:	4013      	ands	r3, r2
 80175ae:	d001      	beq.n	80175b4 <pvPortMalloc+0x54>
 80175b0:	b672      	cpsid	i
 80175b2:	e7fe      	b.n	80175b2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d060      	beq.n	801767c <pvPortMalloc+0x11c>
 80175ba:	4b39      	ldr	r3, [pc, #228]	; (80176a0 <pvPortMalloc+0x140>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	687a      	ldr	r2, [r7, #4]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	d85b      	bhi.n	801767c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80175c4:	4b37      	ldr	r3, [pc, #220]	; (80176a4 <pvPortMalloc+0x144>)
 80175c6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80175c8:	4b36      	ldr	r3, [pc, #216]	; (80176a4 <pvPortMalloc+0x144>)
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80175ce:	e004      	b.n	80175da <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80175d0:	697b      	ldr	r3, [r7, #20]
 80175d2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80175d4:	697b      	ldr	r3, [r7, #20]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80175da:	697b      	ldr	r3, [r7, #20]
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	687a      	ldr	r2, [r7, #4]
 80175e0:	429a      	cmp	r2, r3
 80175e2:	d903      	bls.n	80175ec <pvPortMalloc+0x8c>
 80175e4:	697b      	ldr	r3, [r7, #20]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d1f1      	bne.n	80175d0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80175ec:	4b2a      	ldr	r3, [pc, #168]	; (8017698 <pvPortMalloc+0x138>)
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	697a      	ldr	r2, [r7, #20]
 80175f2:	429a      	cmp	r2, r3
 80175f4:	d042      	beq.n	801767c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80175f6:	693b      	ldr	r3, [r7, #16]
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	2208      	movs	r2, #8
 80175fc:	189b      	adds	r3, r3, r2
 80175fe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017600:	697b      	ldr	r3, [r7, #20]
 8017602:	681a      	ldr	r2, [r3, #0]
 8017604:	693b      	ldr	r3, [r7, #16]
 8017606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017608:	697b      	ldr	r3, [r7, #20]
 801760a:	685a      	ldr	r2, [r3, #4]
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	1ad2      	subs	r2, r2, r3
 8017610:	2308      	movs	r3, #8
 8017612:	005b      	lsls	r3, r3, #1
 8017614:	429a      	cmp	r2, r3
 8017616:	d916      	bls.n	8017646 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017618:	697a      	ldr	r2, [r7, #20]
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	18d3      	adds	r3, r2, r3
 801761e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	2207      	movs	r2, #7
 8017624:	4013      	ands	r3, r2
 8017626:	d001      	beq.n	801762c <pvPortMalloc+0xcc>
 8017628:	b672      	cpsid	i
 801762a:	e7fe      	b.n	801762a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801762c:	697b      	ldr	r3, [r7, #20]
 801762e:	685a      	ldr	r2, [r3, #4]
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	1ad2      	subs	r2, r2, r3
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017638:	697b      	ldr	r3, [r7, #20]
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801763e:	68bb      	ldr	r3, [r7, #8]
 8017640:	0018      	movs	r0, r3
 8017642:	f000 f8db 	bl	80177fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017646:	4b16      	ldr	r3, [pc, #88]	; (80176a0 <pvPortMalloc+0x140>)
 8017648:	681a      	ldr	r2, [r3, #0]
 801764a:	697b      	ldr	r3, [r7, #20]
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	1ad2      	subs	r2, r2, r3
 8017650:	4b13      	ldr	r3, [pc, #76]	; (80176a0 <pvPortMalloc+0x140>)
 8017652:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017654:	4b12      	ldr	r3, [pc, #72]	; (80176a0 <pvPortMalloc+0x140>)
 8017656:	681a      	ldr	r2, [r3, #0]
 8017658:	4b13      	ldr	r3, [pc, #76]	; (80176a8 <pvPortMalloc+0x148>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	429a      	cmp	r2, r3
 801765e:	d203      	bcs.n	8017668 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017660:	4b0f      	ldr	r3, [pc, #60]	; (80176a0 <pvPortMalloc+0x140>)
 8017662:	681a      	ldr	r2, [r3, #0]
 8017664:	4b10      	ldr	r3, [pc, #64]	; (80176a8 <pvPortMalloc+0x148>)
 8017666:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017668:	697b      	ldr	r3, [r7, #20]
 801766a:	685a      	ldr	r2, [r3, #4]
 801766c:	4b0b      	ldr	r3, [pc, #44]	; (801769c <pvPortMalloc+0x13c>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	431a      	orrs	r2, r3
 8017672:	697b      	ldr	r3, [r7, #20]
 8017674:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017676:	697b      	ldr	r3, [r7, #20]
 8017678:	2200      	movs	r2, #0
 801767a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801767c:	f7ff fb6c 	bl	8016d58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	2207      	movs	r2, #7
 8017684:	4013      	ands	r3, r2
 8017686:	d001      	beq.n	801768c <pvPortMalloc+0x12c>
 8017688:	b672      	cpsid	i
 801768a:	e7fe      	b.n	801768a <pvPortMalloc+0x12a>
	return pvReturn;
 801768c:	68fb      	ldr	r3, [r7, #12]
}
 801768e:	0018      	movs	r0, r3
 8017690:	46bd      	mov	sp, r7
 8017692:	b006      	add	sp, #24
 8017694:	bd80      	pop	{r7, pc}
 8017696:	46c0      	nop			; (mov r8, r8)
 8017698:	2000128c 	.word	0x2000128c
 801769c:	20001298 	.word	0x20001298
 80176a0:	20001290 	.word	0x20001290
 80176a4:	20001284 	.word	0x20001284
 80176a8:	20001294 	.word	0x20001294

080176ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d035      	beq.n	801772a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80176be:	2308      	movs	r3, #8
 80176c0:	425b      	negs	r3, r3
 80176c2:	68fa      	ldr	r2, [r7, #12]
 80176c4:	18d3      	adds	r3, r2, r3
 80176c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	685a      	ldr	r2, [r3, #4]
 80176d0:	4b18      	ldr	r3, [pc, #96]	; (8017734 <vPortFree+0x88>)
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	4013      	ands	r3, r2
 80176d6:	d101      	bne.n	80176dc <vPortFree+0x30>
 80176d8:	b672      	cpsid	i
 80176da:	e7fe      	b.n	80176da <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80176dc:	68bb      	ldr	r3, [r7, #8]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d001      	beq.n	80176e8 <vPortFree+0x3c>
 80176e4:	b672      	cpsid	i
 80176e6:	e7fe      	b.n	80176e6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80176e8:	68bb      	ldr	r3, [r7, #8]
 80176ea:	685a      	ldr	r2, [r3, #4]
 80176ec:	4b11      	ldr	r3, [pc, #68]	; (8017734 <vPortFree+0x88>)
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	4013      	ands	r3, r2
 80176f2:	d01a      	beq.n	801772a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80176f4:	68bb      	ldr	r3, [r7, #8]
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d116      	bne.n	801772a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80176fc:	68bb      	ldr	r3, [r7, #8]
 80176fe:	685a      	ldr	r2, [r3, #4]
 8017700:	4b0c      	ldr	r3, [pc, #48]	; (8017734 <vPortFree+0x88>)
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	43db      	mvns	r3, r3
 8017706:	401a      	ands	r2, r3
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801770c:	f7ff fb18 	bl	8016d40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017710:	68bb      	ldr	r3, [r7, #8]
 8017712:	685a      	ldr	r2, [r3, #4]
 8017714:	4b08      	ldr	r3, [pc, #32]	; (8017738 <vPortFree+0x8c>)
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	18d2      	adds	r2, r2, r3
 801771a:	4b07      	ldr	r3, [pc, #28]	; (8017738 <vPortFree+0x8c>)
 801771c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801771e:	68bb      	ldr	r3, [r7, #8]
 8017720:	0018      	movs	r0, r3
 8017722:	f000 f86b 	bl	80177fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017726:	f7ff fb17 	bl	8016d58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801772a:	46c0      	nop			; (mov r8, r8)
 801772c:	46bd      	mov	sp, r7
 801772e:	b004      	add	sp, #16
 8017730:	bd80      	pop	{r7, pc}
 8017732:	46c0      	nop			; (mov r8, r8)
 8017734:	20001298 	.word	0x20001298
 8017738:	20001290 	.word	0x20001290

0801773c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b084      	sub	sp, #16
 8017740:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017742:	23c0      	movs	r3, #192	; 0xc0
 8017744:	011b      	lsls	r3, r3, #4
 8017746:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017748:	4b26      	ldr	r3, [pc, #152]	; (80177e4 <prvHeapInit+0xa8>)
 801774a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	2207      	movs	r2, #7
 8017750:	4013      	ands	r3, r2
 8017752:	d00c      	beq.n	801776e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	3307      	adds	r3, #7
 8017758:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	2207      	movs	r2, #7
 801775e:	4393      	bics	r3, r2
 8017760:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017762:	68ba      	ldr	r2, [r7, #8]
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	1ad2      	subs	r2, r2, r3
 8017768:	4b1e      	ldr	r3, [pc, #120]	; (80177e4 <prvHeapInit+0xa8>)
 801776a:	18d3      	adds	r3, r2, r3
 801776c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017772:	4b1d      	ldr	r3, [pc, #116]	; (80177e8 <prvHeapInit+0xac>)
 8017774:	687a      	ldr	r2, [r7, #4]
 8017776:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017778:	4b1b      	ldr	r3, [pc, #108]	; (80177e8 <prvHeapInit+0xac>)
 801777a:	2200      	movs	r2, #0
 801777c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	68ba      	ldr	r2, [r7, #8]
 8017782:	18d3      	adds	r3, r2, r3
 8017784:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017786:	2208      	movs	r2, #8
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	1a9b      	subs	r3, r3, r2
 801778c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	2207      	movs	r2, #7
 8017792:	4393      	bics	r3, r2
 8017794:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017796:	68fa      	ldr	r2, [r7, #12]
 8017798:	4b14      	ldr	r3, [pc, #80]	; (80177ec <prvHeapInit+0xb0>)
 801779a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 801779c:	4b13      	ldr	r3, [pc, #76]	; (80177ec <prvHeapInit+0xb0>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	2200      	movs	r2, #0
 80177a2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80177a4:	4b11      	ldr	r3, [pc, #68]	; (80177ec <prvHeapInit+0xb0>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	2200      	movs	r2, #0
 80177aa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80177b0:	683b      	ldr	r3, [r7, #0]
 80177b2:	68fa      	ldr	r2, [r7, #12]
 80177b4:	1ad2      	subs	r2, r2, r3
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80177ba:	4b0c      	ldr	r3, [pc, #48]	; (80177ec <prvHeapInit+0xb0>)
 80177bc:	681a      	ldr	r2, [r3, #0]
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	685a      	ldr	r2, [r3, #4]
 80177c6:	4b0a      	ldr	r3, [pc, #40]	; (80177f0 <prvHeapInit+0xb4>)
 80177c8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	685a      	ldr	r2, [r3, #4]
 80177ce:	4b09      	ldr	r3, [pc, #36]	; (80177f4 <prvHeapInit+0xb8>)
 80177d0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80177d2:	4b09      	ldr	r3, [pc, #36]	; (80177f8 <prvHeapInit+0xbc>)
 80177d4:	2280      	movs	r2, #128	; 0x80
 80177d6:	0612      	lsls	r2, r2, #24
 80177d8:	601a      	str	r2, [r3, #0]
}
 80177da:	46c0      	nop			; (mov r8, r8)
 80177dc:	46bd      	mov	sp, r7
 80177de:	b004      	add	sp, #16
 80177e0:	bd80      	pop	{r7, pc}
 80177e2:	46c0      	nop			; (mov r8, r8)
 80177e4:	20000684 	.word	0x20000684
 80177e8:	20001284 	.word	0x20001284
 80177ec:	2000128c 	.word	0x2000128c
 80177f0:	20001294 	.word	0x20001294
 80177f4:	20001290 	.word	0x20001290
 80177f8:	20001298 	.word	0x20001298

080177fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b084      	sub	sp, #16
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017804:	4b27      	ldr	r3, [pc, #156]	; (80178a4 <prvInsertBlockIntoFreeList+0xa8>)
 8017806:	60fb      	str	r3, [r7, #12]
 8017808:	e002      	b.n	8017810 <prvInsertBlockIntoFreeList+0x14>
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	60fb      	str	r3, [r7, #12]
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	687a      	ldr	r2, [r7, #4]
 8017816:	429a      	cmp	r2, r3
 8017818:	d8f7      	bhi.n	801780a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	685b      	ldr	r3, [r3, #4]
 8017822:	68ba      	ldr	r2, [r7, #8]
 8017824:	18d3      	adds	r3, r2, r3
 8017826:	687a      	ldr	r2, [r7, #4]
 8017828:	429a      	cmp	r2, r3
 801782a:	d108      	bne.n	801783e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	685a      	ldr	r2, [r3, #4]
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	685b      	ldr	r3, [r3, #4]
 8017834:	18d2      	adds	r2, r2, r3
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	68ba      	ldr	r2, [r7, #8]
 8017848:	18d2      	adds	r2, r2, r3
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	429a      	cmp	r2, r3
 8017850:	d118      	bne.n	8017884 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	681a      	ldr	r2, [r3, #0]
 8017856:	4b14      	ldr	r3, [pc, #80]	; (80178a8 <prvInsertBlockIntoFreeList+0xac>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	429a      	cmp	r2, r3
 801785c:	d00d      	beq.n	801787a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	685a      	ldr	r2, [r3, #4]
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	685b      	ldr	r3, [r3, #4]
 8017868:	18d2      	adds	r2, r2, r3
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	681a      	ldr	r2, [r3, #0]
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	601a      	str	r2, [r3, #0]
 8017878:	e008      	b.n	801788c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801787a:	4b0b      	ldr	r3, [pc, #44]	; (80178a8 <prvInsertBlockIntoFreeList+0xac>)
 801787c:	681a      	ldr	r2, [r3, #0]
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	601a      	str	r2, [r3, #0]
 8017882:	e003      	b.n	801788c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	681a      	ldr	r2, [r3, #0]
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801788c:	68fa      	ldr	r2, [r7, #12]
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	429a      	cmp	r2, r3
 8017892:	d002      	beq.n	801789a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	687a      	ldr	r2, [r7, #4]
 8017898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801789a:	46c0      	nop			; (mov r8, r8)
 801789c:	46bd      	mov	sp, r7
 801789e:	b004      	add	sp, #16
 80178a0:	bd80      	pop	{r7, pc}
 80178a2:	46c0      	nop			; (mov r8, r8)
 80178a4:	20001284 	.word	0x20001284
 80178a8:	2000128c 	.word	0x2000128c

080178ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80178b0:	4914      	ldr	r1, [pc, #80]	; (8017904 <MX_USB_DEVICE_Init+0x58>)
 80178b2:	4b15      	ldr	r3, [pc, #84]	; (8017908 <MX_USB_DEVICE_Init+0x5c>)
 80178b4:	2200      	movs	r2, #0
 80178b6:	0018      	movs	r0, r3
 80178b8:	f7fd fd27 	bl	801530a <USBD_Init>
 80178bc:	1e03      	subs	r3, r0, #0
 80178be:	d001      	beq.n	80178c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80178c0:	f7f5 fba2 	bl	800d008 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80178c4:	4a11      	ldr	r2, [pc, #68]	; (801790c <MX_USB_DEVICE_Init+0x60>)
 80178c6:	4b10      	ldr	r3, [pc, #64]	; (8017908 <MX_USB_DEVICE_Init+0x5c>)
 80178c8:	0011      	movs	r1, r2
 80178ca:	0018      	movs	r0, r3
 80178cc:	f7fd fd4e 	bl	801536c <USBD_RegisterClass>
 80178d0:	1e03      	subs	r3, r0, #0
 80178d2:	d001      	beq.n	80178d8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80178d4:	f7f5 fb98 	bl	800d008 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80178d8:	4a0d      	ldr	r2, [pc, #52]	; (8017910 <MX_USB_DEVICE_Init+0x64>)
 80178da:	4b0b      	ldr	r3, [pc, #44]	; (8017908 <MX_USB_DEVICE_Init+0x5c>)
 80178dc:	0011      	movs	r1, r2
 80178de:	0018      	movs	r0, r3
 80178e0:	f7fd fc9a 	bl	8015218 <USBD_CDC_RegisterInterface>
 80178e4:	1e03      	subs	r3, r0, #0
 80178e6:	d001      	beq.n	80178ec <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80178e8:	f7f5 fb8e 	bl	800d008 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80178ec:	4b06      	ldr	r3, [pc, #24]	; (8017908 <MX_USB_DEVICE_Init+0x5c>)
 80178ee:	0018      	movs	r0, r3
 80178f0:	f7fd fd5c 	bl	80153ac <USBD_Start>
 80178f4:	1e03      	subs	r3, r0, #0
 80178f6:	d001      	beq.n	80178fc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80178f8:	f7f5 fb86 	bl	800d008 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80178fc:	46c0      	nop			; (mov r8, r8)
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
 8017902:	46c0      	nop			; (mov r8, r8)
 8017904:	20000204 	.word	0x20000204
 8017908:	2000266c 	.word	0x2000266c
 801790c:	200000ec 	.word	0x200000ec
 8017910:	200001f4 	.word	0x200001f4

08017914 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017918:	4907      	ldr	r1, [pc, #28]	; (8017938 <CDC_Init_FS+0x24>)
 801791a:	4b08      	ldr	r3, [pc, #32]	; (801793c <CDC_Init_FS+0x28>)
 801791c:	2200      	movs	r2, #0
 801791e:	0018      	movs	r0, r3
 8017920:	f7fd fc95 	bl	801524e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017924:	4a06      	ldr	r2, [pc, #24]	; (8017940 <CDC_Init_FS+0x2c>)
 8017926:	4b05      	ldr	r3, [pc, #20]	; (801793c <CDC_Init_FS+0x28>)
 8017928:	0011      	movs	r1, r2
 801792a:	0018      	movs	r0, r3
 801792c:	f7fd fcab 	bl	8015286 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017930:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017932:	0018      	movs	r0, r3
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}
 8017938:	20002d18 	.word	0x20002d18
 801793c:	2000266c 	.word	0x2000266c
 8017940:	20002930 	.word	0x20002930

08017944 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017944:	b580      	push	{r7, lr}
 8017946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017948:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801794a:	0018      	movs	r0, r3
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}

08017950 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b082      	sub	sp, #8
 8017954:	af00      	add	r7, sp, #0
 8017956:	6039      	str	r1, [r7, #0]
 8017958:	0011      	movs	r1, r2
 801795a:	1dfb      	adds	r3, r7, #7
 801795c:	1c02      	adds	r2, r0, #0
 801795e:	701a      	strb	r2, [r3, #0]
 8017960:	1d3b      	adds	r3, r7, #4
 8017962:	1c0a      	adds	r2, r1, #0
 8017964:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017966:	1dfb      	adds	r3, r7, #7
 8017968:	781b      	ldrb	r3, [r3, #0]
 801796a:	2b23      	cmp	r3, #35	; 0x23
 801796c:	d804      	bhi.n	8017978 <CDC_Control_FS+0x28>
 801796e:	009a      	lsls	r2, r3, #2
 8017970:	4b04      	ldr	r3, [pc, #16]	; (8017984 <CDC_Control_FS+0x34>)
 8017972:	18d3      	adds	r3, r2, r3
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017978:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 801797a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801797c:	0018      	movs	r0, r3
 801797e:	46bd      	mov	sp, r7
 8017980:	b002      	add	sp, #8
 8017982:	bd80      	pop	{r7, pc}
 8017984:	0801a14c 	.word	0x0801a14c

08017988 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b082      	sub	sp, #8
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
 8017990:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017992:	687a      	ldr	r2, [r7, #4]
 8017994:	4b06      	ldr	r3, [pc, #24]	; (80179b0 <CDC_Receive_FS+0x28>)
 8017996:	0011      	movs	r1, r2
 8017998:	0018      	movs	r0, r3
 801799a:	f7fd fc74 	bl	8015286 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801799e:	4b04      	ldr	r3, [pc, #16]	; (80179b0 <CDC_Receive_FS+0x28>)
 80179a0:	0018      	movs	r0, r3
 80179a2:	f7fd fc84 	bl	80152ae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80179a6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80179a8:	0018      	movs	r0, r3
 80179aa:	46bd      	mov	sp, r7
 80179ac:	b002      	add	sp, #8
 80179ae:	bd80      	pop	{r7, pc}
 80179b0:	2000266c 	.word	0x2000266c

080179b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179b4:	b580      	push	{r7, lr}
 80179b6:	b082      	sub	sp, #8
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	0002      	movs	r2, r0
 80179bc:	6039      	str	r1, [r7, #0]
 80179be:	1dfb      	adds	r3, r7, #7
 80179c0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80179c2:	683b      	ldr	r3, [r7, #0]
 80179c4:	2212      	movs	r2, #18
 80179c6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80179c8:	4b02      	ldr	r3, [pc, #8]	; (80179d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80179ca:	0018      	movs	r0, r3
 80179cc:	46bd      	mov	sp, r7
 80179ce:	b002      	add	sp, #8
 80179d0:	bd80      	pop	{r7, pc}
 80179d2:	46c0      	nop			; (mov r8, r8)
 80179d4:	20000220 	.word	0x20000220

080179d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b082      	sub	sp, #8
 80179dc:	af00      	add	r7, sp, #0
 80179de:	0002      	movs	r2, r0
 80179e0:	6039      	str	r1, [r7, #0]
 80179e2:	1dfb      	adds	r3, r7, #7
 80179e4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80179e6:	683b      	ldr	r3, [r7, #0]
 80179e8:	2204      	movs	r2, #4
 80179ea:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80179ec:	4b02      	ldr	r3, [pc, #8]	; (80179f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80179ee:	0018      	movs	r0, r3
 80179f0:	46bd      	mov	sp, r7
 80179f2:	b002      	add	sp, #8
 80179f4:	bd80      	pop	{r7, pc}
 80179f6:	46c0      	nop			; (mov r8, r8)
 80179f8:	20000234 	.word	0x20000234

080179fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80179fc:	b580      	push	{r7, lr}
 80179fe:	b082      	sub	sp, #8
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	0002      	movs	r2, r0
 8017a04:	6039      	str	r1, [r7, #0]
 8017a06:	1dfb      	adds	r3, r7, #7
 8017a08:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8017a0a:	1dfb      	adds	r3, r7, #7
 8017a0c:	781b      	ldrb	r3, [r3, #0]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d106      	bne.n	8017a20 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017a12:	683a      	ldr	r2, [r7, #0]
 8017a14:	4908      	ldr	r1, [pc, #32]	; (8017a38 <USBD_FS_ProductStrDescriptor+0x3c>)
 8017a16:	4b09      	ldr	r3, [pc, #36]	; (8017a3c <USBD_FS_ProductStrDescriptor+0x40>)
 8017a18:	0018      	movs	r0, r3
 8017a1a:	f7fe fd88 	bl	801652e <USBD_GetString>
 8017a1e:	e005      	b.n	8017a2c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017a20:	683a      	ldr	r2, [r7, #0]
 8017a22:	4905      	ldr	r1, [pc, #20]	; (8017a38 <USBD_FS_ProductStrDescriptor+0x3c>)
 8017a24:	4b05      	ldr	r3, [pc, #20]	; (8017a3c <USBD_FS_ProductStrDescriptor+0x40>)
 8017a26:	0018      	movs	r0, r3
 8017a28:	f7fe fd81 	bl	801652e <USBD_GetString>
  }
  return USBD_StrDesc;
 8017a2c:	4b02      	ldr	r3, [pc, #8]	; (8017a38 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8017a2e:	0018      	movs	r0, r3
 8017a30:	46bd      	mov	sp, r7
 8017a32:	b002      	add	sp, #8
 8017a34:	bd80      	pop	{r7, pc}
 8017a36:	46c0      	nop			; (mov r8, r8)
 8017a38:	20003100 	.word	0x20003100
 8017a3c:	08019f94 	.word	0x08019f94

08017a40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	0002      	movs	r2, r0
 8017a48:	6039      	str	r1, [r7, #0]
 8017a4a:	1dfb      	adds	r3, r7, #7
 8017a4c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017a4e:	683a      	ldr	r2, [r7, #0]
 8017a50:	4904      	ldr	r1, [pc, #16]	; (8017a64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017a52:	4b05      	ldr	r3, [pc, #20]	; (8017a68 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8017a54:	0018      	movs	r0, r3
 8017a56:	f7fe fd6a 	bl	801652e <USBD_GetString>
  return USBD_StrDesc;
 8017a5a:	4b02      	ldr	r3, [pc, #8]	; (8017a64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8017a5c:	0018      	movs	r0, r3
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	b002      	add	sp, #8
 8017a62:	bd80      	pop	{r7, pc}
 8017a64:	20003100 	.word	0x20003100
 8017a68:	08019fac 	.word	0x08019fac

08017a6c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b082      	sub	sp, #8
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	0002      	movs	r2, r0
 8017a74:	6039      	str	r1, [r7, #0]
 8017a76:	1dfb      	adds	r3, r7, #7
 8017a78:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	221a      	movs	r2, #26
 8017a7e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017a80:	f000 f84c 	bl	8017b1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017a84:	4b02      	ldr	r3, [pc, #8]	; (8017a90 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8017a86:	0018      	movs	r0, r3
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	b002      	add	sp, #8
 8017a8c:	bd80      	pop	{r7, pc}
 8017a8e:	46c0      	nop			; (mov r8, r8)
 8017a90:	20000238 	.word	0x20000238

08017a94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b082      	sub	sp, #8
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	0002      	movs	r2, r0
 8017a9c:	6039      	str	r1, [r7, #0]
 8017a9e:	1dfb      	adds	r3, r7, #7
 8017aa0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8017aa2:	1dfb      	adds	r3, r7, #7
 8017aa4:	781b      	ldrb	r3, [r3, #0]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d106      	bne.n	8017ab8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017aaa:	683a      	ldr	r2, [r7, #0]
 8017aac:	4908      	ldr	r1, [pc, #32]	; (8017ad0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8017aae:	4b09      	ldr	r3, [pc, #36]	; (8017ad4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8017ab0:	0018      	movs	r0, r3
 8017ab2:	f7fe fd3c 	bl	801652e <USBD_GetString>
 8017ab6:	e005      	b.n	8017ac4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017ab8:	683a      	ldr	r2, [r7, #0]
 8017aba:	4905      	ldr	r1, [pc, #20]	; (8017ad0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8017abc:	4b05      	ldr	r3, [pc, #20]	; (8017ad4 <USBD_FS_ConfigStrDescriptor+0x40>)
 8017abe:	0018      	movs	r0, r3
 8017ac0:	f7fe fd35 	bl	801652e <USBD_GetString>
  }
  return USBD_StrDesc;
 8017ac4:	4b02      	ldr	r3, [pc, #8]	; (8017ad0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8017ac6:	0018      	movs	r0, r3
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	b002      	add	sp, #8
 8017acc:	bd80      	pop	{r7, pc}
 8017ace:	46c0      	nop			; (mov r8, r8)
 8017ad0:	20003100 	.word	0x20003100
 8017ad4:	08019fc0 	.word	0x08019fc0

08017ad8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	0002      	movs	r2, r0
 8017ae0:	6039      	str	r1, [r7, #0]
 8017ae2:	1dfb      	adds	r3, r7, #7
 8017ae4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8017ae6:	1dfb      	adds	r3, r7, #7
 8017ae8:	781b      	ldrb	r3, [r3, #0]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d106      	bne.n	8017afc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017aee:	683a      	ldr	r2, [r7, #0]
 8017af0:	4908      	ldr	r1, [pc, #32]	; (8017b14 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8017af2:	4b09      	ldr	r3, [pc, #36]	; (8017b18 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8017af4:	0018      	movs	r0, r3
 8017af6:	f7fe fd1a 	bl	801652e <USBD_GetString>
 8017afa:	e005      	b.n	8017b08 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017afc:	683a      	ldr	r2, [r7, #0]
 8017afe:	4905      	ldr	r1, [pc, #20]	; (8017b14 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8017b00:	4b05      	ldr	r3, [pc, #20]	; (8017b18 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8017b02:	0018      	movs	r0, r3
 8017b04:	f7fe fd13 	bl	801652e <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b08:	4b02      	ldr	r3, [pc, #8]	; (8017b14 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8017b0a:	0018      	movs	r0, r3
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	b002      	add	sp, #8
 8017b10:	bd80      	pop	{r7, pc}
 8017b12:	46c0      	nop			; (mov r8, r8)
 8017b14:	20003100 	.word	0x20003100
 8017b18:	08019fcc 	.word	0x08019fcc

08017b1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b084      	sub	sp, #16
 8017b20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017b22:	4b10      	ldr	r3, [pc, #64]	; (8017b64 <Get_SerialNum+0x48>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017b28:	4b0f      	ldr	r3, [pc, #60]	; (8017b68 <Get_SerialNum+0x4c>)
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017b2e:	4b0f      	ldr	r3, [pc, #60]	; (8017b6c <Get_SerialNum+0x50>)
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017b34:	68fa      	ldr	r2, [r7, #12]
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	18d3      	adds	r3, r2, r3
 8017b3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d00b      	beq.n	8017b5a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017b42:	490b      	ldr	r1, [pc, #44]	; (8017b70 <Get_SerialNum+0x54>)
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	2208      	movs	r2, #8
 8017b48:	0018      	movs	r0, r3
 8017b4a:	f000 f815 	bl	8017b78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017b4e:	4909      	ldr	r1, [pc, #36]	; (8017b74 <Get_SerialNum+0x58>)
 8017b50:	68bb      	ldr	r3, [r7, #8]
 8017b52:	2204      	movs	r2, #4
 8017b54:	0018      	movs	r0, r3
 8017b56:	f000 f80f 	bl	8017b78 <IntToUnicode>
  }
}
 8017b5a:	46c0      	nop			; (mov r8, r8)
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	b004      	add	sp, #16
 8017b60:	bd80      	pop	{r7, pc}
 8017b62:	46c0      	nop			; (mov r8, r8)
 8017b64:	1ffff7ac 	.word	0x1ffff7ac
 8017b68:	1ffff7b0 	.word	0x1ffff7b0
 8017b6c:	1ffff7b4 	.word	0x1ffff7b4
 8017b70:	2000023a 	.word	0x2000023a
 8017b74:	2000024a 	.word	0x2000024a

08017b78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b086      	sub	sp, #24
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	60f8      	str	r0, [r7, #12]
 8017b80:	60b9      	str	r1, [r7, #8]
 8017b82:	1dfb      	adds	r3, r7, #7
 8017b84:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8017b86:	2117      	movs	r1, #23
 8017b88:	187b      	adds	r3, r7, r1
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8017b8e:	187b      	adds	r3, r7, r1
 8017b90:	2200      	movs	r2, #0
 8017b92:	701a      	strb	r2, [r3, #0]
 8017b94:	e02f      	b.n	8017bf6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	0f1b      	lsrs	r3, r3, #28
 8017b9a:	2b09      	cmp	r3, #9
 8017b9c:	d80d      	bhi.n	8017bba <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	0f1b      	lsrs	r3, r3, #28
 8017ba2:	b2da      	uxtb	r2, r3
 8017ba4:	2317      	movs	r3, #23
 8017ba6:	18fb      	adds	r3, r7, r3
 8017ba8:	781b      	ldrb	r3, [r3, #0]
 8017baa:	005b      	lsls	r3, r3, #1
 8017bac:	0019      	movs	r1, r3
 8017bae:	68bb      	ldr	r3, [r7, #8]
 8017bb0:	185b      	adds	r3, r3, r1
 8017bb2:	3230      	adds	r2, #48	; 0x30
 8017bb4:	b2d2      	uxtb	r2, r2
 8017bb6:	701a      	strb	r2, [r3, #0]
 8017bb8:	e00c      	b.n	8017bd4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	0f1b      	lsrs	r3, r3, #28
 8017bbe:	b2da      	uxtb	r2, r3
 8017bc0:	2317      	movs	r3, #23
 8017bc2:	18fb      	adds	r3, r7, r3
 8017bc4:	781b      	ldrb	r3, [r3, #0]
 8017bc6:	005b      	lsls	r3, r3, #1
 8017bc8:	0019      	movs	r1, r3
 8017bca:	68bb      	ldr	r3, [r7, #8]
 8017bcc:	185b      	adds	r3, r3, r1
 8017bce:	3237      	adds	r2, #55	; 0x37
 8017bd0:	b2d2      	uxtb	r2, r2
 8017bd2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	011b      	lsls	r3, r3, #4
 8017bd8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017bda:	2117      	movs	r1, #23
 8017bdc:	187b      	adds	r3, r7, r1
 8017bde:	781b      	ldrb	r3, [r3, #0]
 8017be0:	005b      	lsls	r3, r3, #1
 8017be2:	3301      	adds	r3, #1
 8017be4:	68ba      	ldr	r2, [r7, #8]
 8017be6:	18d3      	adds	r3, r2, r3
 8017be8:	2200      	movs	r2, #0
 8017bea:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017bec:	187b      	adds	r3, r7, r1
 8017bee:	781a      	ldrb	r2, [r3, #0]
 8017bf0:	187b      	adds	r3, r7, r1
 8017bf2:	3201      	adds	r2, #1
 8017bf4:	701a      	strb	r2, [r3, #0]
 8017bf6:	2317      	movs	r3, #23
 8017bf8:	18fa      	adds	r2, r7, r3
 8017bfa:	1dfb      	adds	r3, r7, #7
 8017bfc:	7812      	ldrb	r2, [r2, #0]
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	429a      	cmp	r2, r3
 8017c02:	d3c8      	bcc.n	8017b96 <IntToUnicode+0x1e>
  }
}
 8017c04:	46c0      	nop			; (mov r8, r8)
 8017c06:	46c0      	nop			; (mov r8, r8)
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	b006      	add	sp, #24
 8017c0c:	bd80      	pop	{r7, pc}
	...

08017c10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b084      	sub	sp, #16
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	4a0e      	ldr	r2, [pc, #56]	; (8017c58 <HAL_PCD_MspInit+0x48>)
 8017c1e:	4293      	cmp	r3, r2
 8017c20:	d115      	bne.n	8017c4e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8017c22:	4b0e      	ldr	r3, [pc, #56]	; (8017c5c <HAL_PCD_MspInit+0x4c>)
 8017c24:	69da      	ldr	r2, [r3, #28]
 8017c26:	4b0d      	ldr	r3, [pc, #52]	; (8017c5c <HAL_PCD_MspInit+0x4c>)
 8017c28:	2180      	movs	r1, #128	; 0x80
 8017c2a:	0409      	lsls	r1, r1, #16
 8017c2c:	430a      	orrs	r2, r1
 8017c2e:	61da      	str	r2, [r3, #28]
 8017c30:	4b0a      	ldr	r3, [pc, #40]	; (8017c5c <HAL_PCD_MspInit+0x4c>)
 8017c32:	69da      	ldr	r2, [r3, #28]
 8017c34:	2380      	movs	r3, #128	; 0x80
 8017c36:	041b      	lsls	r3, r3, #16
 8017c38:	4013      	ands	r3, r2
 8017c3a:	60fb      	str	r3, [r7, #12]
 8017c3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 3, 0);
 8017c3e:	2200      	movs	r2, #0
 8017c40:	2103      	movs	r1, #3
 8017c42:	201f      	movs	r0, #31
 8017c44:	f7f5 feca 	bl	800d9dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8017c48:	201f      	movs	r0, #31
 8017c4a:	f7f5 fedc 	bl	800da06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8017c4e:	46c0      	nop			; (mov r8, r8)
 8017c50:	46bd      	mov	sp, r7
 8017c52:	b004      	add	sp, #16
 8017c54:	bd80      	pop	{r7, pc}
 8017c56:	46c0      	nop			; (mov r8, r8)
 8017c58:	40005c00 	.word	0x40005c00
 8017c5c:	40021000 	.word	0x40021000

08017c60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b082      	sub	sp, #8
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017c68:	687a      	ldr	r2, [r7, #4]
 8017c6a:	23bc      	movs	r3, #188	; 0xbc
 8017c6c:	009b      	lsls	r3, r3, #2
 8017c6e:	58d2      	ldr	r2, [r2, r3]
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	21ac      	movs	r1, #172	; 0xac
 8017c74:	0089      	lsls	r1, r1, #2
 8017c76:	468c      	mov	ip, r1
 8017c78:	4463      	add	r3, ip
 8017c7a:	0019      	movs	r1, r3
 8017c7c:	0010      	movs	r0, r2
 8017c7e:	f7fd fbe9 	bl	8015454 <USBD_LL_SetupStage>
}
 8017c82:	46c0      	nop			; (mov r8, r8)
 8017c84:	46bd      	mov	sp, r7
 8017c86:	b002      	add	sp, #8
 8017c88:	bd80      	pop	{r7, pc}

08017c8a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c8a:	b590      	push	{r4, r7, lr}
 8017c8c:	b083      	sub	sp, #12
 8017c8e:	af00      	add	r7, sp, #0
 8017c90:	6078      	str	r0, [r7, #4]
 8017c92:	000a      	movs	r2, r1
 8017c94:	1cfb      	adds	r3, r7, #3
 8017c96:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017c98:	687a      	ldr	r2, [r7, #4]
 8017c9a:	23bc      	movs	r3, #188	; 0xbc
 8017c9c:	009b      	lsls	r3, r3, #2
 8017c9e:	58d4      	ldr	r4, [r2, r3]
 8017ca0:	1cfb      	adds	r3, r7, #3
 8017ca2:	781a      	ldrb	r2, [r3, #0]
 8017ca4:	6878      	ldr	r0, [r7, #4]
 8017ca6:	23be      	movs	r3, #190	; 0xbe
 8017ca8:	0059      	lsls	r1, r3, #1
 8017caa:	0013      	movs	r3, r2
 8017cac:	009b      	lsls	r3, r3, #2
 8017cae:	189b      	adds	r3, r3, r2
 8017cb0:	00db      	lsls	r3, r3, #3
 8017cb2:	18c3      	adds	r3, r0, r3
 8017cb4:	185b      	adds	r3, r3, r1
 8017cb6:	681a      	ldr	r2, [r3, #0]
 8017cb8:	1cfb      	adds	r3, r7, #3
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	0019      	movs	r1, r3
 8017cbe:	0020      	movs	r0, r4
 8017cc0:	f7fd fc26 	bl	8015510 <USBD_LL_DataOutStage>
}
 8017cc4:	46c0      	nop			; (mov r8, r8)
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	b003      	add	sp, #12
 8017cca:	bd90      	pop	{r4, r7, pc}

08017ccc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b082      	sub	sp, #8
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
 8017cd4:	000a      	movs	r2, r1
 8017cd6:	1cfb      	adds	r3, r7, #3
 8017cd8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017cda:	687a      	ldr	r2, [r7, #4]
 8017cdc:	23bc      	movs	r3, #188	; 0xbc
 8017cde:	009b      	lsls	r3, r3, #2
 8017ce0:	58d0      	ldr	r0, [r2, r3]
 8017ce2:	1cfb      	adds	r3, r7, #3
 8017ce4:	781a      	ldrb	r2, [r3, #0]
 8017ce6:	6879      	ldr	r1, [r7, #4]
 8017ce8:	0013      	movs	r3, r2
 8017cea:	009b      	lsls	r3, r3, #2
 8017cec:	189b      	adds	r3, r3, r2
 8017cee:	00db      	lsls	r3, r3, #3
 8017cf0:	18cb      	adds	r3, r1, r3
 8017cf2:	333c      	adds	r3, #60	; 0x3c
 8017cf4:	681a      	ldr	r2, [r3, #0]
 8017cf6:	1cfb      	adds	r3, r7, #3
 8017cf8:	781b      	ldrb	r3, [r3, #0]
 8017cfa:	0019      	movs	r1, r3
 8017cfc:	f7fd fc8a 	bl	8015614 <USBD_LL_DataInStage>
}
 8017d00:	46c0      	nop			; (mov r8, r8)
 8017d02:	46bd      	mov	sp, r7
 8017d04:	b002      	add	sp, #8
 8017d06:	bd80      	pop	{r7, pc}

08017d08 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b082      	sub	sp, #8
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017d10:	687a      	ldr	r2, [r7, #4]
 8017d12:	23bc      	movs	r3, #188	; 0xbc
 8017d14:	009b      	lsls	r3, r3, #2
 8017d16:	58d3      	ldr	r3, [r2, r3]
 8017d18:	0018      	movs	r0, r3
 8017d1a:	f7fd fdc1 	bl	80158a0 <USBD_LL_SOF>
}
 8017d1e:	46c0      	nop			; (mov r8, r8)
 8017d20:	46bd      	mov	sp, r7
 8017d22:	b002      	add	sp, #8
 8017d24:	bd80      	pop	{r7, pc}

08017d26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d26:	b580      	push	{r7, lr}
 8017d28:	b084      	sub	sp, #16
 8017d2a:	af00      	add	r7, sp, #0
 8017d2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017d2e:	230f      	movs	r3, #15
 8017d30:	18fb      	adds	r3, r7, r3
 8017d32:	2201      	movs	r2, #1
 8017d34:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	689b      	ldr	r3, [r3, #8]
 8017d3a:	2b02      	cmp	r3, #2
 8017d3c:	d001      	beq.n	8017d42 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8017d3e:	f7f5 f963 	bl	800d008 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017d42:	687a      	ldr	r2, [r7, #4]
 8017d44:	23bc      	movs	r3, #188	; 0xbc
 8017d46:	009b      	lsls	r3, r3, #2
 8017d48:	58d2      	ldr	r2, [r2, r3]
 8017d4a:	230f      	movs	r3, #15
 8017d4c:	18fb      	adds	r3, r7, r3
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	0019      	movs	r1, r3
 8017d52:	0010      	movs	r0, r2
 8017d54:	f7fd fd63 	bl	801581e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017d58:	687a      	ldr	r2, [r7, #4]
 8017d5a:	23bc      	movs	r3, #188	; 0xbc
 8017d5c:	009b      	lsls	r3, r3, #2
 8017d5e:	58d3      	ldr	r3, [r2, r3]
 8017d60:	0018      	movs	r0, r3
 8017d62:	f7fd fd14 	bl	801578e <USBD_LL_Reset>
}
 8017d66:	46c0      	nop			; (mov r8, r8)
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	b004      	add	sp, #16
 8017d6c:	bd80      	pop	{r7, pc}
	...

08017d70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b082      	sub	sp, #8
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017d78:	687a      	ldr	r2, [r7, #4]
 8017d7a:	23bc      	movs	r3, #188	; 0xbc
 8017d7c:	009b      	lsls	r3, r3, #2
 8017d7e:	58d3      	ldr	r3, [r2, r3]
 8017d80:	0018      	movs	r0, r3
 8017d82:	f7fd fd5d 	bl	8015840 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	699b      	ldr	r3, [r3, #24]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d005      	beq.n	8017d9a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017d8e:	4b05      	ldr	r3, [pc, #20]	; (8017da4 <HAL_PCD_SuspendCallback+0x34>)
 8017d90:	691a      	ldr	r2, [r3, #16]
 8017d92:	4b04      	ldr	r3, [pc, #16]	; (8017da4 <HAL_PCD_SuspendCallback+0x34>)
 8017d94:	2106      	movs	r1, #6
 8017d96:	430a      	orrs	r2, r1
 8017d98:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8017d9a:	46c0      	nop			; (mov r8, r8)
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	b002      	add	sp, #8
 8017da0:	bd80      	pop	{r7, pc}
 8017da2:	46c0      	nop			; (mov r8, r8)
 8017da4:	e000ed00 	.word	0xe000ed00

08017da8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b082      	sub	sp, #8
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	699b      	ldr	r3, [r3, #24]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d007      	beq.n	8017dc8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017db8:	4b09      	ldr	r3, [pc, #36]	; (8017de0 <HAL_PCD_ResumeCallback+0x38>)
 8017dba:	691a      	ldr	r2, [r3, #16]
 8017dbc:	4b08      	ldr	r3, [pc, #32]	; (8017de0 <HAL_PCD_ResumeCallback+0x38>)
 8017dbe:	2106      	movs	r1, #6
 8017dc0:	438a      	bics	r2, r1
 8017dc2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8017dc4:	f000 fa44 	bl	8018250 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017dc8:	687a      	ldr	r2, [r7, #4]
 8017dca:	23bc      	movs	r3, #188	; 0xbc
 8017dcc:	009b      	lsls	r3, r3, #2
 8017dce:	58d3      	ldr	r3, [r2, r3]
 8017dd0:	0018      	movs	r0, r3
 8017dd2:	f7fd fd4d 	bl	8015870 <USBD_LL_Resume>
}
 8017dd6:	46c0      	nop			; (mov r8, r8)
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	b002      	add	sp, #8
 8017ddc:	bd80      	pop	{r7, pc}
 8017dde:	46c0      	nop			; (mov r8, r8)
 8017de0:	e000ed00 	.word	0xe000ed00

08017de4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b082      	sub	sp, #8
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8017dec:	4a2d      	ldr	r2, [pc, #180]	; (8017ea4 <USBD_LL_Init+0xc0>)
 8017dee:	23bc      	movs	r3, #188	; 0xbc
 8017df0:	009b      	lsls	r3, r3, #2
 8017df2:	6879      	ldr	r1, [r7, #4]
 8017df4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8017df6:	687a      	ldr	r2, [r7, #4]
 8017df8:	23b0      	movs	r3, #176	; 0xb0
 8017dfa:	009b      	lsls	r3, r3, #2
 8017dfc:	4929      	ldr	r1, [pc, #164]	; (8017ea4 <USBD_LL_Init+0xc0>)
 8017dfe:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8017e00:	4b28      	ldr	r3, [pc, #160]	; (8017ea4 <USBD_LL_Init+0xc0>)
 8017e02:	4a29      	ldr	r2, [pc, #164]	; (8017ea8 <USBD_LL_Init+0xc4>)
 8017e04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8017e06:	4b27      	ldr	r3, [pc, #156]	; (8017ea4 <USBD_LL_Init+0xc0>)
 8017e08:	2208      	movs	r2, #8
 8017e0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8017e0c:	4b25      	ldr	r3, [pc, #148]	; (8017ea4 <USBD_LL_Init+0xc0>)
 8017e0e:	2202      	movs	r2, #2
 8017e10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017e12:	4b24      	ldr	r3, [pc, #144]	; (8017ea4 <USBD_LL_Init+0xc0>)
 8017e14:	2202      	movs	r2, #2
 8017e16:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8017e18:	4b22      	ldr	r3, [pc, #136]	; (8017ea4 <USBD_LL_Init+0xc0>)
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017e1e:	4b21      	ldr	r3, [pc, #132]	; (8017ea4 <USBD_LL_Init+0xc0>)
 8017e20:	2200      	movs	r2, #0
 8017e22:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017e24:	4b1f      	ldr	r3, [pc, #124]	; (8017ea4 <USBD_LL_Init+0xc0>)
 8017e26:	2200      	movs	r2, #0
 8017e28:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017e2a:	4b1e      	ldr	r3, [pc, #120]	; (8017ea4 <USBD_LL_Init+0xc0>)
 8017e2c:	0018      	movs	r0, r3
 8017e2e:	f7f6 f835 	bl	800de9c <HAL_PCD_Init>
 8017e32:	1e03      	subs	r3, r0, #0
 8017e34:	d001      	beq.n	8017e3a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8017e36:	f7f5 f8e7 	bl	800d008 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8017e3a:	687a      	ldr	r2, [r7, #4]
 8017e3c:	23b0      	movs	r3, #176	; 0xb0
 8017e3e:	009b      	lsls	r3, r3, #2
 8017e40:	58d0      	ldr	r0, [r2, r3]
 8017e42:	2318      	movs	r3, #24
 8017e44:	2200      	movs	r2, #0
 8017e46:	2100      	movs	r1, #0
 8017e48:	f7f7 fe16 	bl	800fa78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8017e4c:	687a      	ldr	r2, [r7, #4]
 8017e4e:	23b0      	movs	r3, #176	; 0xb0
 8017e50:	009b      	lsls	r3, r3, #2
 8017e52:	58d0      	ldr	r0, [r2, r3]
 8017e54:	2358      	movs	r3, #88	; 0x58
 8017e56:	2200      	movs	r2, #0
 8017e58:	2180      	movs	r1, #128	; 0x80
 8017e5a:	f7f7 fe0d 	bl	800fa78 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8017e5e:	687a      	ldr	r2, [r7, #4]
 8017e60:	23b0      	movs	r3, #176	; 0xb0
 8017e62:	009b      	lsls	r3, r3, #2
 8017e64:	58d0      	ldr	r0, [r2, r3]
 8017e66:	23c0      	movs	r3, #192	; 0xc0
 8017e68:	2200      	movs	r2, #0
 8017e6a:	2181      	movs	r1, #129	; 0x81
 8017e6c:	f7f7 fe04 	bl	800fa78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8017e70:	687a      	ldr	r2, [r7, #4]
 8017e72:	23b0      	movs	r3, #176	; 0xb0
 8017e74:	009b      	lsls	r3, r3, #2
 8017e76:	58d0      	ldr	r0, [r2, r3]
 8017e78:	2388      	movs	r3, #136	; 0x88
 8017e7a:	005b      	lsls	r3, r3, #1
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	2101      	movs	r1, #1
 8017e80:	f7f7 fdfa 	bl	800fa78 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8017e84:	687a      	ldr	r2, [r7, #4]
 8017e86:	23b0      	movs	r3, #176	; 0xb0
 8017e88:	009b      	lsls	r3, r3, #2
 8017e8a:	58d0      	ldr	r0, [r2, r3]
 8017e8c:	2380      	movs	r3, #128	; 0x80
 8017e8e:	005b      	lsls	r3, r3, #1
 8017e90:	2200      	movs	r2, #0
 8017e92:	2182      	movs	r1, #130	; 0x82
 8017e94:	f7f7 fdf0 	bl	800fa78 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8017e98:	2300      	movs	r3, #0
}
 8017e9a:	0018      	movs	r0, r3
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	b002      	add	sp, #8
 8017ea0:	bd80      	pop	{r7, pc}
 8017ea2:	46c0      	nop			; (mov r8, r8)
 8017ea4:	20003300 	.word	0x20003300
 8017ea8:	40005c00 	.word	0x40005c00

08017eac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017eae:	b085      	sub	sp, #20
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017eb4:	210f      	movs	r1, #15
 8017eb6:	187b      	adds	r3, r7, r1
 8017eb8:	2200      	movs	r2, #0
 8017eba:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ebc:	260e      	movs	r6, #14
 8017ebe:	19bb      	adds	r3, r7, r6
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017ec4:	687a      	ldr	r2, [r7, #4]
 8017ec6:	23b0      	movs	r3, #176	; 0xb0
 8017ec8:	009b      	lsls	r3, r3, #2
 8017eca:	58d3      	ldr	r3, [r2, r3]
 8017ecc:	000d      	movs	r5, r1
 8017ece:	187c      	adds	r4, r7, r1
 8017ed0:	0018      	movs	r0, r3
 8017ed2:	f7f6 f8f3 	bl	800e0bc <HAL_PCD_Start>
 8017ed6:	0003      	movs	r3, r0
 8017ed8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017eda:	19bc      	adds	r4, r7, r6
 8017edc:	197b      	adds	r3, r7, r5
 8017ede:	781b      	ldrb	r3, [r3, #0]
 8017ee0:	0018      	movs	r0, r3
 8017ee2:	f000 f9bc 	bl	801825e <USBD_Get_USB_Status>
 8017ee6:	0003      	movs	r3, r0
 8017ee8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017eea:	19bb      	adds	r3, r7, r6
 8017eec:	781b      	ldrb	r3, [r3, #0]
}
 8017eee:	0018      	movs	r0, r3
 8017ef0:	46bd      	mov	sp, r7
 8017ef2:	b005      	add	sp, #20
 8017ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017ef6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ef8:	b085      	sub	sp, #20
 8017efa:	af00      	add	r7, sp, #0
 8017efc:	6078      	str	r0, [r7, #4]
 8017efe:	000c      	movs	r4, r1
 8017f00:	0010      	movs	r0, r2
 8017f02:	0019      	movs	r1, r3
 8017f04:	1cfb      	adds	r3, r7, #3
 8017f06:	1c22      	adds	r2, r4, #0
 8017f08:	701a      	strb	r2, [r3, #0]
 8017f0a:	1cbb      	adds	r3, r7, #2
 8017f0c:	1c02      	adds	r2, r0, #0
 8017f0e:	701a      	strb	r2, [r3, #0]
 8017f10:	003b      	movs	r3, r7
 8017f12:	1c0a      	adds	r2, r1, #0
 8017f14:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f16:	260f      	movs	r6, #15
 8017f18:	19bb      	adds	r3, r7, r6
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f1e:	250e      	movs	r5, #14
 8017f20:	197b      	adds	r3, r7, r5
 8017f22:	2200      	movs	r2, #0
 8017f24:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017f26:	687a      	ldr	r2, [r7, #4]
 8017f28:	23b0      	movs	r3, #176	; 0xb0
 8017f2a:	009b      	lsls	r3, r3, #2
 8017f2c:	58d0      	ldr	r0, [r2, r3]
 8017f2e:	19bc      	adds	r4, r7, r6
 8017f30:	1cbb      	adds	r3, r7, #2
 8017f32:	781d      	ldrb	r5, [r3, #0]
 8017f34:	003b      	movs	r3, r7
 8017f36:	881a      	ldrh	r2, [r3, #0]
 8017f38:	1cfb      	adds	r3, r7, #3
 8017f3a:	7819      	ldrb	r1, [r3, #0]
 8017f3c:	002b      	movs	r3, r5
 8017f3e:	f7f6 fa8a 	bl	800e456 <HAL_PCD_EP_Open>
 8017f42:	0003      	movs	r3, r0
 8017f44:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f46:	250e      	movs	r5, #14
 8017f48:	197c      	adds	r4, r7, r5
 8017f4a:	19bb      	adds	r3, r7, r6
 8017f4c:	781b      	ldrb	r3, [r3, #0]
 8017f4e:	0018      	movs	r0, r3
 8017f50:	f000 f985 	bl	801825e <USBD_Get_USB_Status>
 8017f54:	0003      	movs	r3, r0
 8017f56:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017f58:	197b      	adds	r3, r7, r5
 8017f5a:	781b      	ldrb	r3, [r3, #0]
}
 8017f5c:	0018      	movs	r0, r3
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	b005      	add	sp, #20
 8017f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017f64 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f66:	b085      	sub	sp, #20
 8017f68:	af00      	add	r7, sp, #0
 8017f6a:	6078      	str	r0, [r7, #4]
 8017f6c:	000a      	movs	r2, r1
 8017f6e:	1cfb      	adds	r3, r7, #3
 8017f70:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f72:	210f      	movs	r1, #15
 8017f74:	187b      	adds	r3, r7, r1
 8017f76:	2200      	movs	r2, #0
 8017f78:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f7a:	260e      	movs	r6, #14
 8017f7c:	19bb      	adds	r3, r7, r6
 8017f7e:	2200      	movs	r2, #0
 8017f80:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017f82:	687a      	ldr	r2, [r7, #4]
 8017f84:	23b0      	movs	r3, #176	; 0xb0
 8017f86:	009b      	lsls	r3, r3, #2
 8017f88:	58d2      	ldr	r2, [r2, r3]
 8017f8a:	000d      	movs	r5, r1
 8017f8c:	187c      	adds	r4, r7, r1
 8017f8e:	1cfb      	adds	r3, r7, #3
 8017f90:	781b      	ldrb	r3, [r3, #0]
 8017f92:	0019      	movs	r1, r3
 8017f94:	0010      	movs	r0, r2
 8017f96:	f7f6 fad6 	bl	800e546 <HAL_PCD_EP_Close>
 8017f9a:	0003      	movs	r3, r0
 8017f9c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f9e:	19bc      	adds	r4, r7, r6
 8017fa0:	197b      	adds	r3, r7, r5
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	0018      	movs	r0, r3
 8017fa6:	f000 f95a 	bl	801825e <USBD_Get_USB_Status>
 8017faa:	0003      	movs	r3, r0
 8017fac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017fae:	19bb      	adds	r3, r7, r6
 8017fb0:	781b      	ldrb	r3, [r3, #0]
}
 8017fb2:	0018      	movs	r0, r3
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	b005      	add	sp, #20
 8017fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017fba <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017fba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fbc:	b085      	sub	sp, #20
 8017fbe:	af00      	add	r7, sp, #0
 8017fc0:	6078      	str	r0, [r7, #4]
 8017fc2:	000a      	movs	r2, r1
 8017fc4:	1cfb      	adds	r3, r7, #3
 8017fc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fc8:	210f      	movs	r1, #15
 8017fca:	187b      	adds	r3, r7, r1
 8017fcc:	2200      	movs	r2, #0
 8017fce:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fd0:	260e      	movs	r6, #14
 8017fd2:	19bb      	adds	r3, r7, r6
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017fd8:	687a      	ldr	r2, [r7, #4]
 8017fda:	23b0      	movs	r3, #176	; 0xb0
 8017fdc:	009b      	lsls	r3, r3, #2
 8017fde:	58d2      	ldr	r2, [r2, r3]
 8017fe0:	000d      	movs	r5, r1
 8017fe2:	187c      	adds	r4, r7, r1
 8017fe4:	1cfb      	adds	r3, r7, #3
 8017fe6:	781b      	ldrb	r3, [r3, #0]
 8017fe8:	0019      	movs	r1, r3
 8017fea:	0010      	movs	r0, r2
 8017fec:	f7f6 fba2 	bl	800e734 <HAL_PCD_EP_SetStall>
 8017ff0:	0003      	movs	r3, r0
 8017ff2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ff4:	19bc      	adds	r4, r7, r6
 8017ff6:	197b      	adds	r3, r7, r5
 8017ff8:	781b      	ldrb	r3, [r3, #0]
 8017ffa:	0018      	movs	r0, r3
 8017ffc:	f000 f92f 	bl	801825e <USBD_Get_USB_Status>
 8018000:	0003      	movs	r3, r0
 8018002:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8018004:	19bb      	adds	r3, r7, r6
 8018006:	781b      	ldrb	r3, [r3, #0]
}
 8018008:	0018      	movs	r0, r3
 801800a:	46bd      	mov	sp, r7
 801800c:	b005      	add	sp, #20
 801800e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018010 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018012:	b085      	sub	sp, #20
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
 8018018:	000a      	movs	r2, r1
 801801a:	1cfb      	adds	r3, r7, #3
 801801c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801801e:	210f      	movs	r1, #15
 8018020:	187b      	adds	r3, r7, r1
 8018022:	2200      	movs	r2, #0
 8018024:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018026:	260e      	movs	r6, #14
 8018028:	19bb      	adds	r3, r7, r6
 801802a:	2200      	movs	r2, #0
 801802c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801802e:	687a      	ldr	r2, [r7, #4]
 8018030:	23b0      	movs	r3, #176	; 0xb0
 8018032:	009b      	lsls	r3, r3, #2
 8018034:	58d2      	ldr	r2, [r2, r3]
 8018036:	000d      	movs	r5, r1
 8018038:	187c      	adds	r4, r7, r1
 801803a:	1cfb      	adds	r3, r7, #3
 801803c:	781b      	ldrb	r3, [r3, #0]
 801803e:	0019      	movs	r1, r3
 8018040:	0010      	movs	r0, r2
 8018042:	f7f6 fbd3 	bl	800e7ec <HAL_PCD_EP_ClrStall>
 8018046:	0003      	movs	r3, r0
 8018048:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801804a:	19bc      	adds	r4, r7, r6
 801804c:	197b      	adds	r3, r7, r5
 801804e:	781b      	ldrb	r3, [r3, #0]
 8018050:	0018      	movs	r0, r3
 8018052:	f000 f904 	bl	801825e <USBD_Get_USB_Status>
 8018056:	0003      	movs	r3, r0
 8018058:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801805a:	19bb      	adds	r3, r7, r6
 801805c:	781b      	ldrb	r3, [r3, #0]
}
 801805e:	0018      	movs	r0, r3
 8018060:	46bd      	mov	sp, r7
 8018062:	b005      	add	sp, #20
 8018064:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018066 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018066:	b580      	push	{r7, lr}
 8018068:	b084      	sub	sp, #16
 801806a:	af00      	add	r7, sp, #0
 801806c:	6078      	str	r0, [r7, #4]
 801806e:	000a      	movs	r2, r1
 8018070:	1cfb      	adds	r3, r7, #3
 8018072:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018074:	687a      	ldr	r2, [r7, #4]
 8018076:	23b0      	movs	r3, #176	; 0xb0
 8018078:	009b      	lsls	r3, r3, #2
 801807a:	58d3      	ldr	r3, [r2, r3]
 801807c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801807e:	1cfb      	adds	r3, r7, #3
 8018080:	781b      	ldrb	r3, [r3, #0]
 8018082:	b25b      	sxtb	r3, r3
 8018084:	2b00      	cmp	r3, #0
 8018086:	da0d      	bge.n	80180a4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018088:	1cfb      	adds	r3, r7, #3
 801808a:	781b      	ldrb	r3, [r3, #0]
 801808c:	227f      	movs	r2, #127	; 0x7f
 801808e:	4013      	ands	r3, r2
 8018090:	68f9      	ldr	r1, [r7, #12]
 8018092:	1c5a      	adds	r2, r3, #1
 8018094:	0013      	movs	r3, r2
 8018096:	009b      	lsls	r3, r3, #2
 8018098:	189b      	adds	r3, r3, r2
 801809a:	00db      	lsls	r3, r3, #3
 801809c:	18cb      	adds	r3, r1, r3
 801809e:	3302      	adds	r3, #2
 80180a0:	781b      	ldrb	r3, [r3, #0]
 80180a2:	e00d      	b.n	80180c0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80180a4:	1cfb      	adds	r3, r7, #3
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	227f      	movs	r2, #127	; 0x7f
 80180aa:	401a      	ands	r2, r3
 80180ac:	68f8      	ldr	r0, [r7, #12]
 80180ae:	23b5      	movs	r3, #181	; 0xb5
 80180b0:	0059      	lsls	r1, r3, #1
 80180b2:	0013      	movs	r3, r2
 80180b4:	009b      	lsls	r3, r3, #2
 80180b6:	189b      	adds	r3, r3, r2
 80180b8:	00db      	lsls	r3, r3, #3
 80180ba:	18c3      	adds	r3, r0, r3
 80180bc:	185b      	adds	r3, r3, r1
 80180be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80180c0:	0018      	movs	r0, r3
 80180c2:	46bd      	mov	sp, r7
 80180c4:	b004      	add	sp, #16
 80180c6:	bd80      	pop	{r7, pc}

080180c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80180c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180ca:	b085      	sub	sp, #20
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
 80180d0:	000a      	movs	r2, r1
 80180d2:	1cfb      	adds	r3, r7, #3
 80180d4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180d6:	210f      	movs	r1, #15
 80180d8:	187b      	adds	r3, r7, r1
 80180da:	2200      	movs	r2, #0
 80180dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180de:	260e      	movs	r6, #14
 80180e0:	19bb      	adds	r3, r7, r6
 80180e2:	2200      	movs	r2, #0
 80180e4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80180e6:	687a      	ldr	r2, [r7, #4]
 80180e8:	23b0      	movs	r3, #176	; 0xb0
 80180ea:	009b      	lsls	r3, r3, #2
 80180ec:	58d2      	ldr	r2, [r2, r3]
 80180ee:	000d      	movs	r5, r1
 80180f0:	187c      	adds	r4, r7, r1
 80180f2:	1cfb      	adds	r3, r7, #3
 80180f4:	781b      	ldrb	r3, [r3, #0]
 80180f6:	0019      	movs	r1, r3
 80180f8:	0010      	movs	r0, r2
 80180fa:	f7f6 f981 	bl	800e400 <HAL_PCD_SetAddress>
 80180fe:	0003      	movs	r3, r0
 8018100:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018102:	19bc      	adds	r4, r7, r6
 8018104:	197b      	adds	r3, r7, r5
 8018106:	781b      	ldrb	r3, [r3, #0]
 8018108:	0018      	movs	r0, r3
 801810a:	f000 f8a8 	bl	801825e <USBD_Get_USB_Status>
 801810e:	0003      	movs	r3, r0
 8018110:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8018112:	19bb      	adds	r3, r7, r6
 8018114:	781b      	ldrb	r3, [r3, #0]
}
 8018116:	0018      	movs	r0, r3
 8018118:	46bd      	mov	sp, r7
 801811a:	b005      	add	sp, #20
 801811c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801811e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801811e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018120:	b087      	sub	sp, #28
 8018122:	af00      	add	r7, sp, #0
 8018124:	60f8      	str	r0, [r7, #12]
 8018126:	0008      	movs	r0, r1
 8018128:	607a      	str	r2, [r7, #4]
 801812a:	0019      	movs	r1, r3
 801812c:	230b      	movs	r3, #11
 801812e:	18fb      	adds	r3, r7, r3
 8018130:	1c02      	adds	r2, r0, #0
 8018132:	701a      	strb	r2, [r3, #0]
 8018134:	2408      	movs	r4, #8
 8018136:	193b      	adds	r3, r7, r4
 8018138:	1c0a      	adds	r2, r1, #0
 801813a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801813c:	2117      	movs	r1, #23
 801813e:	187b      	adds	r3, r7, r1
 8018140:	2200      	movs	r2, #0
 8018142:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018144:	2516      	movs	r5, #22
 8018146:	197b      	adds	r3, r7, r5
 8018148:	2200      	movs	r2, #0
 801814a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801814c:	68fa      	ldr	r2, [r7, #12]
 801814e:	23b0      	movs	r3, #176	; 0xb0
 8018150:	009b      	lsls	r3, r3, #2
 8018152:	58d0      	ldr	r0, [r2, r3]
 8018154:	193b      	adds	r3, r7, r4
 8018156:	881d      	ldrh	r5, [r3, #0]
 8018158:	000e      	movs	r6, r1
 801815a:	187c      	adds	r4, r7, r1
 801815c:	687a      	ldr	r2, [r7, #4]
 801815e:	230b      	movs	r3, #11
 8018160:	18fb      	adds	r3, r7, r3
 8018162:	7819      	ldrb	r1, [r3, #0]
 8018164:	002b      	movs	r3, r5
 8018166:	f7f6 fa9c 	bl	800e6a2 <HAL_PCD_EP_Transmit>
 801816a:	0003      	movs	r3, r0
 801816c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801816e:	2516      	movs	r5, #22
 8018170:	197c      	adds	r4, r7, r5
 8018172:	19bb      	adds	r3, r7, r6
 8018174:	781b      	ldrb	r3, [r3, #0]
 8018176:	0018      	movs	r0, r3
 8018178:	f000 f871 	bl	801825e <USBD_Get_USB_Status>
 801817c:	0003      	movs	r3, r0
 801817e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8018180:	197b      	adds	r3, r7, r5
 8018182:	781b      	ldrb	r3, [r3, #0]
}
 8018184:	0018      	movs	r0, r3
 8018186:	46bd      	mov	sp, r7
 8018188:	b007      	add	sp, #28
 801818a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801818c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801818c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801818e:	b087      	sub	sp, #28
 8018190:	af00      	add	r7, sp, #0
 8018192:	60f8      	str	r0, [r7, #12]
 8018194:	0008      	movs	r0, r1
 8018196:	607a      	str	r2, [r7, #4]
 8018198:	0019      	movs	r1, r3
 801819a:	230b      	movs	r3, #11
 801819c:	18fb      	adds	r3, r7, r3
 801819e:	1c02      	adds	r2, r0, #0
 80181a0:	701a      	strb	r2, [r3, #0]
 80181a2:	2408      	movs	r4, #8
 80181a4:	193b      	adds	r3, r7, r4
 80181a6:	1c0a      	adds	r2, r1, #0
 80181a8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181aa:	2117      	movs	r1, #23
 80181ac:	187b      	adds	r3, r7, r1
 80181ae:	2200      	movs	r2, #0
 80181b0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181b2:	2516      	movs	r5, #22
 80181b4:	197b      	adds	r3, r7, r5
 80181b6:	2200      	movs	r2, #0
 80181b8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80181ba:	68fa      	ldr	r2, [r7, #12]
 80181bc:	23b0      	movs	r3, #176	; 0xb0
 80181be:	009b      	lsls	r3, r3, #2
 80181c0:	58d0      	ldr	r0, [r2, r3]
 80181c2:	193b      	adds	r3, r7, r4
 80181c4:	881d      	ldrh	r5, [r3, #0]
 80181c6:	000e      	movs	r6, r1
 80181c8:	187c      	adds	r4, r7, r1
 80181ca:	687a      	ldr	r2, [r7, #4]
 80181cc:	230b      	movs	r3, #11
 80181ce:	18fb      	adds	r3, r7, r3
 80181d0:	7819      	ldrb	r1, [r3, #0]
 80181d2:	002b      	movs	r3, r5
 80181d4:	f7f6 fa08 	bl	800e5e8 <HAL_PCD_EP_Receive>
 80181d8:	0003      	movs	r3, r0
 80181da:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181dc:	2516      	movs	r5, #22
 80181de:	197c      	adds	r4, r7, r5
 80181e0:	19bb      	adds	r3, r7, r6
 80181e2:	781b      	ldrb	r3, [r3, #0]
 80181e4:	0018      	movs	r0, r3
 80181e6:	f000 f83a 	bl	801825e <USBD_Get_USB_Status>
 80181ea:	0003      	movs	r3, r0
 80181ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80181ee:	197b      	adds	r3, r7, r5
 80181f0:	781b      	ldrb	r3, [r3, #0]
}
 80181f2:	0018      	movs	r0, r3
 80181f4:	46bd      	mov	sp, r7
 80181f6:	b007      	add	sp, #28
 80181f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080181fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181fa:	b580      	push	{r7, lr}
 80181fc:	b082      	sub	sp, #8
 80181fe:	af00      	add	r7, sp, #0
 8018200:	6078      	str	r0, [r7, #4]
 8018202:	000a      	movs	r2, r1
 8018204:	1cfb      	adds	r3, r7, #3
 8018206:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018208:	687a      	ldr	r2, [r7, #4]
 801820a:	23b0      	movs	r3, #176	; 0xb0
 801820c:	009b      	lsls	r3, r3, #2
 801820e:	58d2      	ldr	r2, [r2, r3]
 8018210:	1cfb      	adds	r3, r7, #3
 8018212:	781b      	ldrb	r3, [r3, #0]
 8018214:	0019      	movs	r1, r3
 8018216:	0010      	movs	r0, r2
 8018218:	f7f6 fa2a 	bl	800e670 <HAL_PCD_EP_GetRxCount>
 801821c:	0003      	movs	r3, r0
}
 801821e:	0018      	movs	r0, r3
 8018220:	46bd      	mov	sp, r7
 8018222:	b002      	add	sp, #8
 8018224:	bd80      	pop	{r7, pc}
	...

08018228 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b082      	sub	sp, #8
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018230:	4b02      	ldr	r3, [pc, #8]	; (801823c <USBD_static_malloc+0x14>)
}
 8018232:	0018      	movs	r0, r3
 8018234:	46bd      	mov	sp, r7
 8018236:	b002      	add	sp, #8
 8018238:	bd80      	pop	{r7, pc}
 801823a:	46c0      	nop			; (mov r8, r8)
 801823c:	2000129c 	.word	0x2000129c

08018240 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]

}
 8018248:	46c0      	nop			; (mov r8, r8)
 801824a:	46bd      	mov	sp, r7
 801824c:	b002      	add	sp, #8
 801824e:	bd80      	pop	{r7, pc}

08018250 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018254:	f7f4 fb82 	bl	800c95c <SystemClock_Config>
}
 8018258:	46c0      	nop			; (mov r8, r8)
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}

0801825e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801825e:	b580      	push	{r7, lr}
 8018260:	b084      	sub	sp, #16
 8018262:	af00      	add	r7, sp, #0
 8018264:	0002      	movs	r2, r0
 8018266:	1dfb      	adds	r3, r7, #7
 8018268:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801826a:	230f      	movs	r3, #15
 801826c:	18fb      	adds	r3, r7, r3
 801826e:	2200      	movs	r2, #0
 8018270:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8018272:	1dfb      	adds	r3, r7, #7
 8018274:	781b      	ldrb	r3, [r3, #0]
 8018276:	2b03      	cmp	r3, #3
 8018278:	d017      	beq.n	80182aa <USBD_Get_USB_Status+0x4c>
 801827a:	dc1b      	bgt.n	80182b4 <USBD_Get_USB_Status+0x56>
 801827c:	2b02      	cmp	r3, #2
 801827e:	d00f      	beq.n	80182a0 <USBD_Get_USB_Status+0x42>
 8018280:	dc18      	bgt.n	80182b4 <USBD_Get_USB_Status+0x56>
 8018282:	2b00      	cmp	r3, #0
 8018284:	d002      	beq.n	801828c <USBD_Get_USB_Status+0x2e>
 8018286:	2b01      	cmp	r3, #1
 8018288:	d005      	beq.n	8018296 <USBD_Get_USB_Status+0x38>
 801828a:	e013      	b.n	80182b4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801828c:	230f      	movs	r3, #15
 801828e:	18fb      	adds	r3, r7, r3
 8018290:	2200      	movs	r2, #0
 8018292:	701a      	strb	r2, [r3, #0]
    break;
 8018294:	e013      	b.n	80182be <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018296:	230f      	movs	r3, #15
 8018298:	18fb      	adds	r3, r7, r3
 801829a:	2202      	movs	r2, #2
 801829c:	701a      	strb	r2, [r3, #0]
    break;
 801829e:	e00e      	b.n	80182be <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80182a0:	230f      	movs	r3, #15
 80182a2:	18fb      	adds	r3, r7, r3
 80182a4:	2201      	movs	r2, #1
 80182a6:	701a      	strb	r2, [r3, #0]
    break;
 80182a8:	e009      	b.n	80182be <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80182aa:	230f      	movs	r3, #15
 80182ac:	18fb      	adds	r3, r7, r3
 80182ae:	2202      	movs	r2, #2
 80182b0:	701a      	strb	r2, [r3, #0]
    break;
 80182b2:	e004      	b.n	80182be <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80182b4:	230f      	movs	r3, #15
 80182b6:	18fb      	adds	r3, r7, r3
 80182b8:	2202      	movs	r2, #2
 80182ba:	701a      	strb	r2, [r3, #0]
    break;
 80182bc:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80182be:	230f      	movs	r3, #15
 80182c0:	18fb      	adds	r3, r7, r3
 80182c2:	781b      	ldrb	r3, [r3, #0]
}
 80182c4:	0018      	movs	r0, r3
 80182c6:	46bd      	mov	sp, r7
 80182c8:	b004      	add	sp, #16
 80182ca:	bd80      	pop	{r7, pc}

080182cc <atoi>:
 80182cc:	b510      	push	{r4, lr}
 80182ce:	220a      	movs	r2, #10
 80182d0:	2100      	movs	r1, #0
 80182d2:	f000 f925 	bl	8018520 <strtol>
 80182d6:	bd10      	pop	{r4, pc}

080182d8 <__errno>:
 80182d8:	4b01      	ldr	r3, [pc, #4]	; (80182e0 <__errno+0x8>)
 80182da:	6818      	ldr	r0, [r3, #0]
 80182dc:	4770      	bx	lr
 80182de:	46c0      	nop			; (mov r8, r8)
 80182e0:	20000254 	.word	0x20000254

080182e4 <__libc_init_array>:
 80182e4:	b570      	push	{r4, r5, r6, lr}
 80182e6:	2600      	movs	r6, #0
 80182e8:	4d0c      	ldr	r5, [pc, #48]	; (801831c <__libc_init_array+0x38>)
 80182ea:	4c0d      	ldr	r4, [pc, #52]	; (8018320 <__libc_init_array+0x3c>)
 80182ec:	1b64      	subs	r4, r4, r5
 80182ee:	10a4      	asrs	r4, r4, #2
 80182f0:	42a6      	cmp	r6, r4
 80182f2:	d109      	bne.n	8018308 <__libc_init_array+0x24>
 80182f4:	2600      	movs	r6, #0
 80182f6:	f000 fd1b 	bl	8018d30 <_init>
 80182fa:	4d0a      	ldr	r5, [pc, #40]	; (8018324 <__libc_init_array+0x40>)
 80182fc:	4c0a      	ldr	r4, [pc, #40]	; (8018328 <__libc_init_array+0x44>)
 80182fe:	1b64      	subs	r4, r4, r5
 8018300:	10a4      	asrs	r4, r4, #2
 8018302:	42a6      	cmp	r6, r4
 8018304:	d105      	bne.n	8018312 <__libc_init_array+0x2e>
 8018306:	bd70      	pop	{r4, r5, r6, pc}
 8018308:	00b3      	lsls	r3, r6, #2
 801830a:	58eb      	ldr	r3, [r5, r3]
 801830c:	4798      	blx	r3
 801830e:	3601      	adds	r6, #1
 8018310:	e7ee      	b.n	80182f0 <__libc_init_array+0xc>
 8018312:	00b3      	lsls	r3, r6, #2
 8018314:	58eb      	ldr	r3, [r5, r3]
 8018316:	4798      	blx	r3
 8018318:	3601      	adds	r6, #1
 801831a:	e7f2      	b.n	8018302 <__libc_init_array+0x1e>
 801831c:	0801a310 	.word	0x0801a310
 8018320:	0801a310 	.word	0x0801a310
 8018324:	0801a310 	.word	0x0801a310
 8018328:	0801a314 	.word	0x0801a314

0801832c <memcpy>:
 801832c:	2300      	movs	r3, #0
 801832e:	b510      	push	{r4, lr}
 8018330:	429a      	cmp	r2, r3
 8018332:	d100      	bne.n	8018336 <memcpy+0xa>
 8018334:	bd10      	pop	{r4, pc}
 8018336:	5ccc      	ldrb	r4, [r1, r3]
 8018338:	54c4      	strb	r4, [r0, r3]
 801833a:	3301      	adds	r3, #1
 801833c:	e7f8      	b.n	8018330 <memcpy+0x4>

0801833e <memset>:
 801833e:	0003      	movs	r3, r0
 8018340:	1882      	adds	r2, r0, r2
 8018342:	4293      	cmp	r3, r2
 8018344:	d100      	bne.n	8018348 <memset+0xa>
 8018346:	4770      	bx	lr
 8018348:	7019      	strb	r1, [r3, #0]
 801834a:	3301      	adds	r3, #1
 801834c:	e7f9      	b.n	8018342 <memset+0x4>
	...

08018350 <siprintf>:
 8018350:	b40e      	push	{r1, r2, r3}
 8018352:	b500      	push	{lr}
 8018354:	490b      	ldr	r1, [pc, #44]	; (8018384 <siprintf+0x34>)
 8018356:	b09c      	sub	sp, #112	; 0x70
 8018358:	ab1d      	add	r3, sp, #116	; 0x74
 801835a:	9002      	str	r0, [sp, #8]
 801835c:	9006      	str	r0, [sp, #24]
 801835e:	9107      	str	r1, [sp, #28]
 8018360:	9104      	str	r1, [sp, #16]
 8018362:	4809      	ldr	r0, [pc, #36]	; (8018388 <siprintf+0x38>)
 8018364:	4909      	ldr	r1, [pc, #36]	; (801838c <siprintf+0x3c>)
 8018366:	cb04      	ldmia	r3!, {r2}
 8018368:	9105      	str	r1, [sp, #20]
 801836a:	6800      	ldr	r0, [r0, #0]
 801836c:	a902      	add	r1, sp, #8
 801836e:	9301      	str	r3, [sp, #4]
 8018370:	f000 f944 	bl	80185fc <_svfiprintf_r>
 8018374:	2300      	movs	r3, #0
 8018376:	9a02      	ldr	r2, [sp, #8]
 8018378:	7013      	strb	r3, [r2, #0]
 801837a:	b01c      	add	sp, #112	; 0x70
 801837c:	bc08      	pop	{r3}
 801837e:	b003      	add	sp, #12
 8018380:	4718      	bx	r3
 8018382:	46c0      	nop			; (mov r8, r8)
 8018384:	7fffffff 	.word	0x7fffffff
 8018388:	20000254 	.word	0x20000254
 801838c:	ffff0208 	.word	0xffff0208

08018390 <strcat>:
 8018390:	0002      	movs	r2, r0
 8018392:	b510      	push	{r4, lr}
 8018394:	7813      	ldrb	r3, [r2, #0]
 8018396:	0014      	movs	r4, r2
 8018398:	3201      	adds	r2, #1
 801839a:	2b00      	cmp	r3, #0
 801839c:	d1fa      	bne.n	8018394 <strcat+0x4>
 801839e:	5cca      	ldrb	r2, [r1, r3]
 80183a0:	54e2      	strb	r2, [r4, r3]
 80183a2:	3301      	adds	r3, #1
 80183a4:	2a00      	cmp	r2, #0
 80183a6:	d1fa      	bne.n	801839e <strcat+0xe>
 80183a8:	bd10      	pop	{r4, pc}

080183aa <strcpy>:
 80183aa:	0003      	movs	r3, r0
 80183ac:	780a      	ldrb	r2, [r1, #0]
 80183ae:	3101      	adds	r1, #1
 80183b0:	701a      	strb	r2, [r3, #0]
 80183b2:	3301      	adds	r3, #1
 80183b4:	2a00      	cmp	r2, #0
 80183b6:	d1f9      	bne.n	80183ac <strcpy+0x2>
 80183b8:	4770      	bx	lr

080183ba <strncmp>:
 80183ba:	b530      	push	{r4, r5, lr}
 80183bc:	0005      	movs	r5, r0
 80183be:	1e10      	subs	r0, r2, #0
 80183c0:	d00b      	beq.n	80183da <strncmp+0x20>
 80183c2:	2400      	movs	r4, #0
 80183c4:	3a01      	subs	r2, #1
 80183c6:	5d2b      	ldrb	r3, [r5, r4]
 80183c8:	5d08      	ldrb	r0, [r1, r4]
 80183ca:	4283      	cmp	r3, r0
 80183cc:	d104      	bne.n	80183d8 <strncmp+0x1e>
 80183ce:	4294      	cmp	r4, r2
 80183d0:	d002      	beq.n	80183d8 <strncmp+0x1e>
 80183d2:	3401      	adds	r4, #1
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d1f6      	bne.n	80183c6 <strncmp+0xc>
 80183d8:	1a18      	subs	r0, r3, r0
 80183da:	bd30      	pop	{r4, r5, pc}

080183dc <strncpy>:
 80183dc:	0003      	movs	r3, r0
 80183de:	b530      	push	{r4, r5, lr}
 80183e0:	001d      	movs	r5, r3
 80183e2:	2a00      	cmp	r2, #0
 80183e4:	d006      	beq.n	80183f4 <strncpy+0x18>
 80183e6:	780c      	ldrb	r4, [r1, #0]
 80183e8:	3a01      	subs	r2, #1
 80183ea:	3301      	adds	r3, #1
 80183ec:	702c      	strb	r4, [r5, #0]
 80183ee:	3101      	adds	r1, #1
 80183f0:	2c00      	cmp	r4, #0
 80183f2:	d1f5      	bne.n	80183e0 <strncpy+0x4>
 80183f4:	2100      	movs	r1, #0
 80183f6:	189a      	adds	r2, r3, r2
 80183f8:	4293      	cmp	r3, r2
 80183fa:	d100      	bne.n	80183fe <strncpy+0x22>
 80183fc:	bd30      	pop	{r4, r5, pc}
 80183fe:	7019      	strb	r1, [r3, #0]
 8018400:	3301      	adds	r3, #1
 8018402:	e7f9      	b.n	80183f8 <strncpy+0x1c>

08018404 <_strtol_l.isra.0>:
 8018404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018406:	b087      	sub	sp, #28
 8018408:	001e      	movs	r6, r3
 801840a:	9005      	str	r0, [sp, #20]
 801840c:	9101      	str	r1, [sp, #4]
 801840e:	9202      	str	r2, [sp, #8]
 8018410:	2b01      	cmp	r3, #1
 8018412:	d045      	beq.n	80184a0 <_strtol_l.isra.0+0x9c>
 8018414:	0008      	movs	r0, r1
 8018416:	2b24      	cmp	r3, #36	; 0x24
 8018418:	d842      	bhi.n	80184a0 <_strtol_l.isra.0+0x9c>
 801841a:	4b3f      	ldr	r3, [pc, #252]	; (8018518 <_strtol_l.isra.0+0x114>)
 801841c:	2208      	movs	r2, #8
 801841e:	469c      	mov	ip, r3
 8018420:	0003      	movs	r3, r0
 8018422:	4661      	mov	r1, ip
 8018424:	781c      	ldrb	r4, [r3, #0]
 8018426:	1c45      	adds	r5, r0, #1
 8018428:	5d09      	ldrb	r1, [r1, r4]
 801842a:	0028      	movs	r0, r5
 801842c:	000f      	movs	r7, r1
 801842e:	4017      	ands	r7, r2
 8018430:	4211      	tst	r1, r2
 8018432:	d1f5      	bne.n	8018420 <_strtol_l.isra.0+0x1c>
 8018434:	2c2d      	cmp	r4, #45	; 0x2d
 8018436:	d13a      	bne.n	80184ae <_strtol_l.isra.0+0xaa>
 8018438:	2701      	movs	r7, #1
 801843a:	782c      	ldrb	r4, [r5, #0]
 801843c:	1c9d      	adds	r5, r3, #2
 801843e:	2e00      	cmp	r6, #0
 8018440:	d065      	beq.n	801850e <_strtol_l.isra.0+0x10a>
 8018442:	2e10      	cmp	r6, #16
 8018444:	d109      	bne.n	801845a <_strtol_l.isra.0+0x56>
 8018446:	2c30      	cmp	r4, #48	; 0x30
 8018448:	d107      	bne.n	801845a <_strtol_l.isra.0+0x56>
 801844a:	2220      	movs	r2, #32
 801844c:	782b      	ldrb	r3, [r5, #0]
 801844e:	4393      	bics	r3, r2
 8018450:	2b58      	cmp	r3, #88	; 0x58
 8018452:	d157      	bne.n	8018504 <_strtol_l.isra.0+0x100>
 8018454:	2610      	movs	r6, #16
 8018456:	786c      	ldrb	r4, [r5, #1]
 8018458:	3502      	adds	r5, #2
 801845a:	4b30      	ldr	r3, [pc, #192]	; (801851c <_strtol_l.isra.0+0x118>)
 801845c:	0031      	movs	r1, r6
 801845e:	18fb      	adds	r3, r7, r3
 8018460:	0018      	movs	r0, r3
 8018462:	9303      	str	r3, [sp, #12]
 8018464:	f7f0 fef2 	bl	800924c <__aeabi_uidivmod>
 8018468:	2300      	movs	r3, #0
 801846a:	2201      	movs	r2, #1
 801846c:	4684      	mov	ip, r0
 801846e:	0018      	movs	r0, r3
 8018470:	9104      	str	r1, [sp, #16]
 8018472:	4252      	negs	r2, r2
 8018474:	0021      	movs	r1, r4
 8018476:	3930      	subs	r1, #48	; 0x30
 8018478:	2909      	cmp	r1, #9
 801847a:	d81d      	bhi.n	80184b8 <_strtol_l.isra.0+0xb4>
 801847c:	000c      	movs	r4, r1
 801847e:	42a6      	cmp	r6, r4
 8018480:	dd28      	ble.n	80184d4 <_strtol_l.isra.0+0xd0>
 8018482:	2b00      	cmp	r3, #0
 8018484:	db24      	blt.n	80184d0 <_strtol_l.isra.0+0xcc>
 8018486:	0013      	movs	r3, r2
 8018488:	4584      	cmp	ip, r0
 801848a:	d306      	bcc.n	801849a <_strtol_l.isra.0+0x96>
 801848c:	d102      	bne.n	8018494 <_strtol_l.isra.0+0x90>
 801848e:	9904      	ldr	r1, [sp, #16]
 8018490:	42a1      	cmp	r1, r4
 8018492:	db02      	blt.n	801849a <_strtol_l.isra.0+0x96>
 8018494:	2301      	movs	r3, #1
 8018496:	4370      	muls	r0, r6
 8018498:	1820      	adds	r0, r4, r0
 801849a:	782c      	ldrb	r4, [r5, #0]
 801849c:	3501      	adds	r5, #1
 801849e:	e7e9      	b.n	8018474 <_strtol_l.isra.0+0x70>
 80184a0:	f7ff ff1a 	bl	80182d8 <__errno>
 80184a4:	2316      	movs	r3, #22
 80184a6:	6003      	str	r3, [r0, #0]
 80184a8:	2000      	movs	r0, #0
 80184aa:	b007      	add	sp, #28
 80184ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184ae:	2c2b      	cmp	r4, #43	; 0x2b
 80184b0:	d1c5      	bne.n	801843e <_strtol_l.isra.0+0x3a>
 80184b2:	782c      	ldrb	r4, [r5, #0]
 80184b4:	1c9d      	adds	r5, r3, #2
 80184b6:	e7c2      	b.n	801843e <_strtol_l.isra.0+0x3a>
 80184b8:	0021      	movs	r1, r4
 80184ba:	3941      	subs	r1, #65	; 0x41
 80184bc:	2919      	cmp	r1, #25
 80184be:	d801      	bhi.n	80184c4 <_strtol_l.isra.0+0xc0>
 80184c0:	3c37      	subs	r4, #55	; 0x37
 80184c2:	e7dc      	b.n	801847e <_strtol_l.isra.0+0x7a>
 80184c4:	0021      	movs	r1, r4
 80184c6:	3961      	subs	r1, #97	; 0x61
 80184c8:	2919      	cmp	r1, #25
 80184ca:	d803      	bhi.n	80184d4 <_strtol_l.isra.0+0xd0>
 80184cc:	3c57      	subs	r4, #87	; 0x57
 80184ce:	e7d6      	b.n	801847e <_strtol_l.isra.0+0x7a>
 80184d0:	0013      	movs	r3, r2
 80184d2:	e7e2      	b.n	801849a <_strtol_l.isra.0+0x96>
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	da09      	bge.n	80184ec <_strtol_l.isra.0+0xe8>
 80184d8:	2322      	movs	r3, #34	; 0x22
 80184da:	9a05      	ldr	r2, [sp, #20]
 80184dc:	9803      	ldr	r0, [sp, #12]
 80184de:	6013      	str	r3, [r2, #0]
 80184e0:	9b02      	ldr	r3, [sp, #8]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d0e1      	beq.n	80184aa <_strtol_l.isra.0+0xa6>
 80184e6:	1e6b      	subs	r3, r5, #1
 80184e8:	9301      	str	r3, [sp, #4]
 80184ea:	e007      	b.n	80184fc <_strtol_l.isra.0+0xf8>
 80184ec:	2f00      	cmp	r7, #0
 80184ee:	d000      	beq.n	80184f2 <_strtol_l.isra.0+0xee>
 80184f0:	4240      	negs	r0, r0
 80184f2:	9a02      	ldr	r2, [sp, #8]
 80184f4:	2a00      	cmp	r2, #0
 80184f6:	d0d8      	beq.n	80184aa <_strtol_l.isra.0+0xa6>
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d1f4      	bne.n	80184e6 <_strtol_l.isra.0+0xe2>
 80184fc:	9b02      	ldr	r3, [sp, #8]
 80184fe:	9a01      	ldr	r2, [sp, #4]
 8018500:	601a      	str	r2, [r3, #0]
 8018502:	e7d2      	b.n	80184aa <_strtol_l.isra.0+0xa6>
 8018504:	2430      	movs	r4, #48	; 0x30
 8018506:	2e00      	cmp	r6, #0
 8018508:	d1a7      	bne.n	801845a <_strtol_l.isra.0+0x56>
 801850a:	3608      	adds	r6, #8
 801850c:	e7a5      	b.n	801845a <_strtol_l.isra.0+0x56>
 801850e:	2c30      	cmp	r4, #48	; 0x30
 8018510:	d09b      	beq.n	801844a <_strtol_l.isra.0+0x46>
 8018512:	260a      	movs	r6, #10
 8018514:	e7a1      	b.n	801845a <_strtol_l.isra.0+0x56>
 8018516:	46c0      	nop			; (mov r8, r8)
 8018518:	0801a1dd 	.word	0x0801a1dd
 801851c:	7fffffff 	.word	0x7fffffff

08018520 <strtol>:
 8018520:	b510      	push	{r4, lr}
 8018522:	0013      	movs	r3, r2
 8018524:	000a      	movs	r2, r1
 8018526:	0001      	movs	r1, r0
 8018528:	4802      	ldr	r0, [pc, #8]	; (8018534 <strtol+0x14>)
 801852a:	6800      	ldr	r0, [r0, #0]
 801852c:	f7ff ff6a 	bl	8018404 <_strtol_l.isra.0>
 8018530:	bd10      	pop	{r4, pc}
 8018532:	46c0      	nop			; (mov r8, r8)
 8018534:	20000254 	.word	0x20000254

08018538 <__ssputs_r>:
 8018538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801853a:	688e      	ldr	r6, [r1, #8]
 801853c:	b085      	sub	sp, #20
 801853e:	0007      	movs	r7, r0
 8018540:	000c      	movs	r4, r1
 8018542:	9203      	str	r2, [sp, #12]
 8018544:	9301      	str	r3, [sp, #4]
 8018546:	429e      	cmp	r6, r3
 8018548:	d83c      	bhi.n	80185c4 <__ssputs_r+0x8c>
 801854a:	2390      	movs	r3, #144	; 0x90
 801854c:	898a      	ldrh	r2, [r1, #12]
 801854e:	00db      	lsls	r3, r3, #3
 8018550:	421a      	tst	r2, r3
 8018552:	d034      	beq.n	80185be <__ssputs_r+0x86>
 8018554:	2503      	movs	r5, #3
 8018556:	6909      	ldr	r1, [r1, #16]
 8018558:	6823      	ldr	r3, [r4, #0]
 801855a:	1a5b      	subs	r3, r3, r1
 801855c:	9302      	str	r3, [sp, #8]
 801855e:	6963      	ldr	r3, [r4, #20]
 8018560:	9802      	ldr	r0, [sp, #8]
 8018562:	435d      	muls	r5, r3
 8018564:	0feb      	lsrs	r3, r5, #31
 8018566:	195d      	adds	r5, r3, r5
 8018568:	9b01      	ldr	r3, [sp, #4]
 801856a:	106d      	asrs	r5, r5, #1
 801856c:	3301      	adds	r3, #1
 801856e:	181b      	adds	r3, r3, r0
 8018570:	42ab      	cmp	r3, r5
 8018572:	d900      	bls.n	8018576 <__ssputs_r+0x3e>
 8018574:	001d      	movs	r5, r3
 8018576:	0553      	lsls	r3, r2, #21
 8018578:	d532      	bpl.n	80185e0 <__ssputs_r+0xa8>
 801857a:	0029      	movs	r1, r5
 801857c:	0038      	movs	r0, r7
 801857e:	f000 fb27 	bl	8018bd0 <_malloc_r>
 8018582:	1e06      	subs	r6, r0, #0
 8018584:	d109      	bne.n	801859a <__ssputs_r+0x62>
 8018586:	230c      	movs	r3, #12
 8018588:	603b      	str	r3, [r7, #0]
 801858a:	2340      	movs	r3, #64	; 0x40
 801858c:	2001      	movs	r0, #1
 801858e:	89a2      	ldrh	r2, [r4, #12]
 8018590:	4240      	negs	r0, r0
 8018592:	4313      	orrs	r3, r2
 8018594:	81a3      	strh	r3, [r4, #12]
 8018596:	b005      	add	sp, #20
 8018598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801859a:	9a02      	ldr	r2, [sp, #8]
 801859c:	6921      	ldr	r1, [r4, #16]
 801859e:	f7ff fec5 	bl	801832c <memcpy>
 80185a2:	89a3      	ldrh	r3, [r4, #12]
 80185a4:	4a14      	ldr	r2, [pc, #80]	; (80185f8 <__ssputs_r+0xc0>)
 80185a6:	401a      	ands	r2, r3
 80185a8:	2380      	movs	r3, #128	; 0x80
 80185aa:	4313      	orrs	r3, r2
 80185ac:	81a3      	strh	r3, [r4, #12]
 80185ae:	9b02      	ldr	r3, [sp, #8]
 80185b0:	6126      	str	r6, [r4, #16]
 80185b2:	18f6      	adds	r6, r6, r3
 80185b4:	6026      	str	r6, [r4, #0]
 80185b6:	6165      	str	r5, [r4, #20]
 80185b8:	9e01      	ldr	r6, [sp, #4]
 80185ba:	1aed      	subs	r5, r5, r3
 80185bc:	60a5      	str	r5, [r4, #8]
 80185be:	9b01      	ldr	r3, [sp, #4]
 80185c0:	429e      	cmp	r6, r3
 80185c2:	d900      	bls.n	80185c6 <__ssputs_r+0x8e>
 80185c4:	9e01      	ldr	r6, [sp, #4]
 80185c6:	0032      	movs	r2, r6
 80185c8:	9903      	ldr	r1, [sp, #12]
 80185ca:	6820      	ldr	r0, [r4, #0]
 80185cc:	f000 faa3 	bl	8018b16 <memmove>
 80185d0:	68a3      	ldr	r3, [r4, #8]
 80185d2:	2000      	movs	r0, #0
 80185d4:	1b9b      	subs	r3, r3, r6
 80185d6:	60a3      	str	r3, [r4, #8]
 80185d8:	6823      	ldr	r3, [r4, #0]
 80185da:	199e      	adds	r6, r3, r6
 80185dc:	6026      	str	r6, [r4, #0]
 80185de:	e7da      	b.n	8018596 <__ssputs_r+0x5e>
 80185e0:	002a      	movs	r2, r5
 80185e2:	0038      	movs	r0, r7
 80185e4:	f000 fb52 	bl	8018c8c <_realloc_r>
 80185e8:	1e06      	subs	r6, r0, #0
 80185ea:	d1e0      	bne.n	80185ae <__ssputs_r+0x76>
 80185ec:	0038      	movs	r0, r7
 80185ee:	6921      	ldr	r1, [r4, #16]
 80185f0:	f000 faa4 	bl	8018b3c <_free_r>
 80185f4:	e7c7      	b.n	8018586 <__ssputs_r+0x4e>
 80185f6:	46c0      	nop			; (mov r8, r8)
 80185f8:	fffffb7f 	.word	0xfffffb7f

080185fc <_svfiprintf_r>:
 80185fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185fe:	b0a1      	sub	sp, #132	; 0x84
 8018600:	9003      	str	r0, [sp, #12]
 8018602:	001d      	movs	r5, r3
 8018604:	898b      	ldrh	r3, [r1, #12]
 8018606:	000f      	movs	r7, r1
 8018608:	0016      	movs	r6, r2
 801860a:	061b      	lsls	r3, r3, #24
 801860c:	d511      	bpl.n	8018632 <_svfiprintf_r+0x36>
 801860e:	690b      	ldr	r3, [r1, #16]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d10e      	bne.n	8018632 <_svfiprintf_r+0x36>
 8018614:	2140      	movs	r1, #64	; 0x40
 8018616:	f000 fadb 	bl	8018bd0 <_malloc_r>
 801861a:	6038      	str	r0, [r7, #0]
 801861c:	6138      	str	r0, [r7, #16]
 801861e:	2800      	cmp	r0, #0
 8018620:	d105      	bne.n	801862e <_svfiprintf_r+0x32>
 8018622:	230c      	movs	r3, #12
 8018624:	9a03      	ldr	r2, [sp, #12]
 8018626:	3801      	subs	r0, #1
 8018628:	6013      	str	r3, [r2, #0]
 801862a:	b021      	add	sp, #132	; 0x84
 801862c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801862e:	2340      	movs	r3, #64	; 0x40
 8018630:	617b      	str	r3, [r7, #20]
 8018632:	2300      	movs	r3, #0
 8018634:	ac08      	add	r4, sp, #32
 8018636:	6163      	str	r3, [r4, #20]
 8018638:	3320      	adds	r3, #32
 801863a:	7663      	strb	r3, [r4, #25]
 801863c:	3310      	adds	r3, #16
 801863e:	76a3      	strb	r3, [r4, #26]
 8018640:	9507      	str	r5, [sp, #28]
 8018642:	0035      	movs	r5, r6
 8018644:	782b      	ldrb	r3, [r5, #0]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d001      	beq.n	801864e <_svfiprintf_r+0x52>
 801864a:	2b25      	cmp	r3, #37	; 0x25
 801864c:	d147      	bne.n	80186de <_svfiprintf_r+0xe2>
 801864e:	1bab      	subs	r3, r5, r6
 8018650:	9305      	str	r3, [sp, #20]
 8018652:	42b5      	cmp	r5, r6
 8018654:	d00c      	beq.n	8018670 <_svfiprintf_r+0x74>
 8018656:	0032      	movs	r2, r6
 8018658:	0039      	movs	r1, r7
 801865a:	9803      	ldr	r0, [sp, #12]
 801865c:	f7ff ff6c 	bl	8018538 <__ssputs_r>
 8018660:	1c43      	adds	r3, r0, #1
 8018662:	d100      	bne.n	8018666 <_svfiprintf_r+0x6a>
 8018664:	e0ae      	b.n	80187c4 <_svfiprintf_r+0x1c8>
 8018666:	6962      	ldr	r2, [r4, #20]
 8018668:	9b05      	ldr	r3, [sp, #20]
 801866a:	4694      	mov	ip, r2
 801866c:	4463      	add	r3, ip
 801866e:	6163      	str	r3, [r4, #20]
 8018670:	782b      	ldrb	r3, [r5, #0]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d100      	bne.n	8018678 <_svfiprintf_r+0x7c>
 8018676:	e0a5      	b.n	80187c4 <_svfiprintf_r+0x1c8>
 8018678:	2201      	movs	r2, #1
 801867a:	2300      	movs	r3, #0
 801867c:	4252      	negs	r2, r2
 801867e:	6062      	str	r2, [r4, #4]
 8018680:	a904      	add	r1, sp, #16
 8018682:	3254      	adds	r2, #84	; 0x54
 8018684:	1852      	adds	r2, r2, r1
 8018686:	1c6e      	adds	r6, r5, #1
 8018688:	6023      	str	r3, [r4, #0]
 801868a:	60e3      	str	r3, [r4, #12]
 801868c:	60a3      	str	r3, [r4, #8]
 801868e:	7013      	strb	r3, [r2, #0]
 8018690:	65a3      	str	r3, [r4, #88]	; 0x58
 8018692:	2205      	movs	r2, #5
 8018694:	7831      	ldrb	r1, [r6, #0]
 8018696:	4854      	ldr	r0, [pc, #336]	; (80187e8 <_svfiprintf_r+0x1ec>)
 8018698:	f000 fa32 	bl	8018b00 <memchr>
 801869c:	1c75      	adds	r5, r6, #1
 801869e:	2800      	cmp	r0, #0
 80186a0:	d11f      	bne.n	80186e2 <_svfiprintf_r+0xe6>
 80186a2:	6822      	ldr	r2, [r4, #0]
 80186a4:	06d3      	lsls	r3, r2, #27
 80186a6:	d504      	bpl.n	80186b2 <_svfiprintf_r+0xb6>
 80186a8:	2353      	movs	r3, #83	; 0x53
 80186aa:	a904      	add	r1, sp, #16
 80186ac:	185b      	adds	r3, r3, r1
 80186ae:	2120      	movs	r1, #32
 80186b0:	7019      	strb	r1, [r3, #0]
 80186b2:	0713      	lsls	r3, r2, #28
 80186b4:	d504      	bpl.n	80186c0 <_svfiprintf_r+0xc4>
 80186b6:	2353      	movs	r3, #83	; 0x53
 80186b8:	a904      	add	r1, sp, #16
 80186ba:	185b      	adds	r3, r3, r1
 80186bc:	212b      	movs	r1, #43	; 0x2b
 80186be:	7019      	strb	r1, [r3, #0]
 80186c0:	7833      	ldrb	r3, [r6, #0]
 80186c2:	2b2a      	cmp	r3, #42	; 0x2a
 80186c4:	d016      	beq.n	80186f4 <_svfiprintf_r+0xf8>
 80186c6:	0035      	movs	r5, r6
 80186c8:	2100      	movs	r1, #0
 80186ca:	200a      	movs	r0, #10
 80186cc:	68e3      	ldr	r3, [r4, #12]
 80186ce:	782a      	ldrb	r2, [r5, #0]
 80186d0:	1c6e      	adds	r6, r5, #1
 80186d2:	3a30      	subs	r2, #48	; 0x30
 80186d4:	2a09      	cmp	r2, #9
 80186d6:	d94e      	bls.n	8018776 <_svfiprintf_r+0x17a>
 80186d8:	2900      	cmp	r1, #0
 80186da:	d111      	bne.n	8018700 <_svfiprintf_r+0x104>
 80186dc:	e017      	b.n	801870e <_svfiprintf_r+0x112>
 80186de:	3501      	adds	r5, #1
 80186e0:	e7b0      	b.n	8018644 <_svfiprintf_r+0x48>
 80186e2:	4b41      	ldr	r3, [pc, #260]	; (80187e8 <_svfiprintf_r+0x1ec>)
 80186e4:	6822      	ldr	r2, [r4, #0]
 80186e6:	1ac0      	subs	r0, r0, r3
 80186e8:	2301      	movs	r3, #1
 80186ea:	4083      	lsls	r3, r0
 80186ec:	4313      	orrs	r3, r2
 80186ee:	002e      	movs	r6, r5
 80186f0:	6023      	str	r3, [r4, #0]
 80186f2:	e7ce      	b.n	8018692 <_svfiprintf_r+0x96>
 80186f4:	9b07      	ldr	r3, [sp, #28]
 80186f6:	1d19      	adds	r1, r3, #4
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	9107      	str	r1, [sp, #28]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	db01      	blt.n	8018704 <_svfiprintf_r+0x108>
 8018700:	930b      	str	r3, [sp, #44]	; 0x2c
 8018702:	e004      	b.n	801870e <_svfiprintf_r+0x112>
 8018704:	425b      	negs	r3, r3
 8018706:	60e3      	str	r3, [r4, #12]
 8018708:	2302      	movs	r3, #2
 801870a:	4313      	orrs	r3, r2
 801870c:	6023      	str	r3, [r4, #0]
 801870e:	782b      	ldrb	r3, [r5, #0]
 8018710:	2b2e      	cmp	r3, #46	; 0x2e
 8018712:	d10a      	bne.n	801872a <_svfiprintf_r+0x12e>
 8018714:	786b      	ldrb	r3, [r5, #1]
 8018716:	2b2a      	cmp	r3, #42	; 0x2a
 8018718:	d135      	bne.n	8018786 <_svfiprintf_r+0x18a>
 801871a:	9b07      	ldr	r3, [sp, #28]
 801871c:	3502      	adds	r5, #2
 801871e:	1d1a      	adds	r2, r3, #4
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	9207      	str	r2, [sp, #28]
 8018724:	2b00      	cmp	r3, #0
 8018726:	db2b      	blt.n	8018780 <_svfiprintf_r+0x184>
 8018728:	9309      	str	r3, [sp, #36]	; 0x24
 801872a:	4e30      	ldr	r6, [pc, #192]	; (80187ec <_svfiprintf_r+0x1f0>)
 801872c:	2203      	movs	r2, #3
 801872e:	0030      	movs	r0, r6
 8018730:	7829      	ldrb	r1, [r5, #0]
 8018732:	f000 f9e5 	bl	8018b00 <memchr>
 8018736:	2800      	cmp	r0, #0
 8018738:	d006      	beq.n	8018748 <_svfiprintf_r+0x14c>
 801873a:	2340      	movs	r3, #64	; 0x40
 801873c:	1b80      	subs	r0, r0, r6
 801873e:	4083      	lsls	r3, r0
 8018740:	6822      	ldr	r2, [r4, #0]
 8018742:	3501      	adds	r5, #1
 8018744:	4313      	orrs	r3, r2
 8018746:	6023      	str	r3, [r4, #0]
 8018748:	7829      	ldrb	r1, [r5, #0]
 801874a:	2206      	movs	r2, #6
 801874c:	4828      	ldr	r0, [pc, #160]	; (80187f0 <_svfiprintf_r+0x1f4>)
 801874e:	1c6e      	adds	r6, r5, #1
 8018750:	7621      	strb	r1, [r4, #24]
 8018752:	f000 f9d5 	bl	8018b00 <memchr>
 8018756:	2800      	cmp	r0, #0
 8018758:	d03c      	beq.n	80187d4 <_svfiprintf_r+0x1d8>
 801875a:	4b26      	ldr	r3, [pc, #152]	; (80187f4 <_svfiprintf_r+0x1f8>)
 801875c:	2b00      	cmp	r3, #0
 801875e:	d125      	bne.n	80187ac <_svfiprintf_r+0x1b0>
 8018760:	2207      	movs	r2, #7
 8018762:	9b07      	ldr	r3, [sp, #28]
 8018764:	3307      	adds	r3, #7
 8018766:	4393      	bics	r3, r2
 8018768:	3308      	adds	r3, #8
 801876a:	9307      	str	r3, [sp, #28]
 801876c:	6963      	ldr	r3, [r4, #20]
 801876e:	9a04      	ldr	r2, [sp, #16]
 8018770:	189b      	adds	r3, r3, r2
 8018772:	6163      	str	r3, [r4, #20]
 8018774:	e765      	b.n	8018642 <_svfiprintf_r+0x46>
 8018776:	4343      	muls	r3, r0
 8018778:	0035      	movs	r5, r6
 801877a:	2101      	movs	r1, #1
 801877c:	189b      	adds	r3, r3, r2
 801877e:	e7a6      	b.n	80186ce <_svfiprintf_r+0xd2>
 8018780:	2301      	movs	r3, #1
 8018782:	425b      	negs	r3, r3
 8018784:	e7d0      	b.n	8018728 <_svfiprintf_r+0x12c>
 8018786:	2300      	movs	r3, #0
 8018788:	200a      	movs	r0, #10
 801878a:	001a      	movs	r2, r3
 801878c:	3501      	adds	r5, #1
 801878e:	6063      	str	r3, [r4, #4]
 8018790:	7829      	ldrb	r1, [r5, #0]
 8018792:	1c6e      	adds	r6, r5, #1
 8018794:	3930      	subs	r1, #48	; 0x30
 8018796:	2909      	cmp	r1, #9
 8018798:	d903      	bls.n	80187a2 <_svfiprintf_r+0x1a6>
 801879a:	2b00      	cmp	r3, #0
 801879c:	d0c5      	beq.n	801872a <_svfiprintf_r+0x12e>
 801879e:	9209      	str	r2, [sp, #36]	; 0x24
 80187a0:	e7c3      	b.n	801872a <_svfiprintf_r+0x12e>
 80187a2:	4342      	muls	r2, r0
 80187a4:	0035      	movs	r5, r6
 80187a6:	2301      	movs	r3, #1
 80187a8:	1852      	adds	r2, r2, r1
 80187aa:	e7f1      	b.n	8018790 <_svfiprintf_r+0x194>
 80187ac:	ab07      	add	r3, sp, #28
 80187ae:	9300      	str	r3, [sp, #0]
 80187b0:	003a      	movs	r2, r7
 80187b2:	0021      	movs	r1, r4
 80187b4:	4b10      	ldr	r3, [pc, #64]	; (80187f8 <_svfiprintf_r+0x1fc>)
 80187b6:	9803      	ldr	r0, [sp, #12]
 80187b8:	e000      	b.n	80187bc <_svfiprintf_r+0x1c0>
 80187ba:	bf00      	nop
 80187bc:	9004      	str	r0, [sp, #16]
 80187be:	9b04      	ldr	r3, [sp, #16]
 80187c0:	3301      	adds	r3, #1
 80187c2:	d1d3      	bne.n	801876c <_svfiprintf_r+0x170>
 80187c4:	89bb      	ldrh	r3, [r7, #12]
 80187c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80187c8:	065b      	lsls	r3, r3, #25
 80187ca:	d400      	bmi.n	80187ce <_svfiprintf_r+0x1d2>
 80187cc:	e72d      	b.n	801862a <_svfiprintf_r+0x2e>
 80187ce:	2001      	movs	r0, #1
 80187d0:	4240      	negs	r0, r0
 80187d2:	e72a      	b.n	801862a <_svfiprintf_r+0x2e>
 80187d4:	ab07      	add	r3, sp, #28
 80187d6:	9300      	str	r3, [sp, #0]
 80187d8:	003a      	movs	r2, r7
 80187da:	0021      	movs	r1, r4
 80187dc:	4b06      	ldr	r3, [pc, #24]	; (80187f8 <_svfiprintf_r+0x1fc>)
 80187de:	9803      	ldr	r0, [sp, #12]
 80187e0:	f000 f87c 	bl	80188dc <_printf_i>
 80187e4:	e7ea      	b.n	80187bc <_svfiprintf_r+0x1c0>
 80187e6:	46c0      	nop			; (mov r8, r8)
 80187e8:	0801a2dd 	.word	0x0801a2dd
 80187ec:	0801a2e3 	.word	0x0801a2e3
 80187f0:	0801a2e7 	.word	0x0801a2e7
 80187f4:	00000000 	.word	0x00000000
 80187f8:	08018539 	.word	0x08018539

080187fc <_printf_common>:
 80187fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80187fe:	0015      	movs	r5, r2
 8018800:	9301      	str	r3, [sp, #4]
 8018802:	688a      	ldr	r2, [r1, #8]
 8018804:	690b      	ldr	r3, [r1, #16]
 8018806:	000c      	movs	r4, r1
 8018808:	9000      	str	r0, [sp, #0]
 801880a:	4293      	cmp	r3, r2
 801880c:	da00      	bge.n	8018810 <_printf_common+0x14>
 801880e:	0013      	movs	r3, r2
 8018810:	0022      	movs	r2, r4
 8018812:	602b      	str	r3, [r5, #0]
 8018814:	3243      	adds	r2, #67	; 0x43
 8018816:	7812      	ldrb	r2, [r2, #0]
 8018818:	2a00      	cmp	r2, #0
 801881a:	d001      	beq.n	8018820 <_printf_common+0x24>
 801881c:	3301      	adds	r3, #1
 801881e:	602b      	str	r3, [r5, #0]
 8018820:	6823      	ldr	r3, [r4, #0]
 8018822:	069b      	lsls	r3, r3, #26
 8018824:	d502      	bpl.n	801882c <_printf_common+0x30>
 8018826:	682b      	ldr	r3, [r5, #0]
 8018828:	3302      	adds	r3, #2
 801882a:	602b      	str	r3, [r5, #0]
 801882c:	6822      	ldr	r2, [r4, #0]
 801882e:	2306      	movs	r3, #6
 8018830:	0017      	movs	r7, r2
 8018832:	401f      	ands	r7, r3
 8018834:	421a      	tst	r2, r3
 8018836:	d027      	beq.n	8018888 <_printf_common+0x8c>
 8018838:	0023      	movs	r3, r4
 801883a:	3343      	adds	r3, #67	; 0x43
 801883c:	781b      	ldrb	r3, [r3, #0]
 801883e:	1e5a      	subs	r2, r3, #1
 8018840:	4193      	sbcs	r3, r2
 8018842:	6822      	ldr	r2, [r4, #0]
 8018844:	0692      	lsls	r2, r2, #26
 8018846:	d430      	bmi.n	80188aa <_printf_common+0xae>
 8018848:	0022      	movs	r2, r4
 801884a:	9901      	ldr	r1, [sp, #4]
 801884c:	9800      	ldr	r0, [sp, #0]
 801884e:	9e08      	ldr	r6, [sp, #32]
 8018850:	3243      	adds	r2, #67	; 0x43
 8018852:	47b0      	blx	r6
 8018854:	1c43      	adds	r3, r0, #1
 8018856:	d025      	beq.n	80188a4 <_printf_common+0xa8>
 8018858:	2306      	movs	r3, #6
 801885a:	6820      	ldr	r0, [r4, #0]
 801885c:	682a      	ldr	r2, [r5, #0]
 801885e:	68e1      	ldr	r1, [r4, #12]
 8018860:	2500      	movs	r5, #0
 8018862:	4003      	ands	r3, r0
 8018864:	2b04      	cmp	r3, #4
 8018866:	d103      	bne.n	8018870 <_printf_common+0x74>
 8018868:	1a8d      	subs	r5, r1, r2
 801886a:	43eb      	mvns	r3, r5
 801886c:	17db      	asrs	r3, r3, #31
 801886e:	401d      	ands	r5, r3
 8018870:	68a3      	ldr	r3, [r4, #8]
 8018872:	6922      	ldr	r2, [r4, #16]
 8018874:	4293      	cmp	r3, r2
 8018876:	dd01      	ble.n	801887c <_printf_common+0x80>
 8018878:	1a9b      	subs	r3, r3, r2
 801887a:	18ed      	adds	r5, r5, r3
 801887c:	2700      	movs	r7, #0
 801887e:	42bd      	cmp	r5, r7
 8018880:	d120      	bne.n	80188c4 <_printf_common+0xc8>
 8018882:	2000      	movs	r0, #0
 8018884:	e010      	b.n	80188a8 <_printf_common+0xac>
 8018886:	3701      	adds	r7, #1
 8018888:	68e3      	ldr	r3, [r4, #12]
 801888a:	682a      	ldr	r2, [r5, #0]
 801888c:	1a9b      	subs	r3, r3, r2
 801888e:	42bb      	cmp	r3, r7
 8018890:	ddd2      	ble.n	8018838 <_printf_common+0x3c>
 8018892:	0022      	movs	r2, r4
 8018894:	2301      	movs	r3, #1
 8018896:	9901      	ldr	r1, [sp, #4]
 8018898:	9800      	ldr	r0, [sp, #0]
 801889a:	9e08      	ldr	r6, [sp, #32]
 801889c:	3219      	adds	r2, #25
 801889e:	47b0      	blx	r6
 80188a0:	1c43      	adds	r3, r0, #1
 80188a2:	d1f0      	bne.n	8018886 <_printf_common+0x8a>
 80188a4:	2001      	movs	r0, #1
 80188a6:	4240      	negs	r0, r0
 80188a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80188aa:	2030      	movs	r0, #48	; 0x30
 80188ac:	18e1      	adds	r1, r4, r3
 80188ae:	3143      	adds	r1, #67	; 0x43
 80188b0:	7008      	strb	r0, [r1, #0]
 80188b2:	0021      	movs	r1, r4
 80188b4:	1c5a      	adds	r2, r3, #1
 80188b6:	3145      	adds	r1, #69	; 0x45
 80188b8:	7809      	ldrb	r1, [r1, #0]
 80188ba:	18a2      	adds	r2, r4, r2
 80188bc:	3243      	adds	r2, #67	; 0x43
 80188be:	3302      	adds	r3, #2
 80188c0:	7011      	strb	r1, [r2, #0]
 80188c2:	e7c1      	b.n	8018848 <_printf_common+0x4c>
 80188c4:	0022      	movs	r2, r4
 80188c6:	2301      	movs	r3, #1
 80188c8:	9901      	ldr	r1, [sp, #4]
 80188ca:	9800      	ldr	r0, [sp, #0]
 80188cc:	9e08      	ldr	r6, [sp, #32]
 80188ce:	321a      	adds	r2, #26
 80188d0:	47b0      	blx	r6
 80188d2:	1c43      	adds	r3, r0, #1
 80188d4:	d0e6      	beq.n	80188a4 <_printf_common+0xa8>
 80188d6:	3701      	adds	r7, #1
 80188d8:	e7d1      	b.n	801887e <_printf_common+0x82>
	...

080188dc <_printf_i>:
 80188dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188de:	b08b      	sub	sp, #44	; 0x2c
 80188e0:	9206      	str	r2, [sp, #24]
 80188e2:	000a      	movs	r2, r1
 80188e4:	3243      	adds	r2, #67	; 0x43
 80188e6:	9307      	str	r3, [sp, #28]
 80188e8:	9005      	str	r0, [sp, #20]
 80188ea:	9204      	str	r2, [sp, #16]
 80188ec:	7e0a      	ldrb	r2, [r1, #24]
 80188ee:	000c      	movs	r4, r1
 80188f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80188f2:	2a78      	cmp	r2, #120	; 0x78
 80188f4:	d806      	bhi.n	8018904 <_printf_i+0x28>
 80188f6:	2a62      	cmp	r2, #98	; 0x62
 80188f8:	d808      	bhi.n	801890c <_printf_i+0x30>
 80188fa:	2a00      	cmp	r2, #0
 80188fc:	d100      	bne.n	8018900 <_printf_i+0x24>
 80188fe:	e0c0      	b.n	8018a82 <_printf_i+0x1a6>
 8018900:	2a58      	cmp	r2, #88	; 0x58
 8018902:	d052      	beq.n	80189aa <_printf_i+0xce>
 8018904:	0026      	movs	r6, r4
 8018906:	3642      	adds	r6, #66	; 0x42
 8018908:	7032      	strb	r2, [r6, #0]
 801890a:	e022      	b.n	8018952 <_printf_i+0x76>
 801890c:	0010      	movs	r0, r2
 801890e:	3863      	subs	r0, #99	; 0x63
 8018910:	2815      	cmp	r0, #21
 8018912:	d8f7      	bhi.n	8018904 <_printf_i+0x28>
 8018914:	f7f0 fc0a 	bl	800912c <__gnu_thumb1_case_shi>
 8018918:	001f0016 	.word	0x001f0016
 801891c:	fff6fff6 	.word	0xfff6fff6
 8018920:	fff6fff6 	.word	0xfff6fff6
 8018924:	fff6001f 	.word	0xfff6001f
 8018928:	fff6fff6 	.word	0xfff6fff6
 801892c:	00a8fff6 	.word	0x00a8fff6
 8018930:	009a0036 	.word	0x009a0036
 8018934:	fff6fff6 	.word	0xfff6fff6
 8018938:	fff600b9 	.word	0xfff600b9
 801893c:	fff60036 	.word	0xfff60036
 8018940:	009efff6 	.word	0x009efff6
 8018944:	0026      	movs	r6, r4
 8018946:	681a      	ldr	r2, [r3, #0]
 8018948:	3642      	adds	r6, #66	; 0x42
 801894a:	1d11      	adds	r1, r2, #4
 801894c:	6019      	str	r1, [r3, #0]
 801894e:	6813      	ldr	r3, [r2, #0]
 8018950:	7033      	strb	r3, [r6, #0]
 8018952:	2301      	movs	r3, #1
 8018954:	e0a7      	b.n	8018aa6 <_printf_i+0x1ca>
 8018956:	6808      	ldr	r0, [r1, #0]
 8018958:	6819      	ldr	r1, [r3, #0]
 801895a:	1d0a      	adds	r2, r1, #4
 801895c:	0605      	lsls	r5, r0, #24
 801895e:	d50b      	bpl.n	8018978 <_printf_i+0x9c>
 8018960:	680d      	ldr	r5, [r1, #0]
 8018962:	601a      	str	r2, [r3, #0]
 8018964:	2d00      	cmp	r5, #0
 8018966:	da03      	bge.n	8018970 <_printf_i+0x94>
 8018968:	232d      	movs	r3, #45	; 0x2d
 801896a:	9a04      	ldr	r2, [sp, #16]
 801896c:	426d      	negs	r5, r5
 801896e:	7013      	strb	r3, [r2, #0]
 8018970:	4b61      	ldr	r3, [pc, #388]	; (8018af8 <_printf_i+0x21c>)
 8018972:	270a      	movs	r7, #10
 8018974:	9303      	str	r3, [sp, #12]
 8018976:	e032      	b.n	80189de <_printf_i+0x102>
 8018978:	680d      	ldr	r5, [r1, #0]
 801897a:	601a      	str	r2, [r3, #0]
 801897c:	0641      	lsls	r1, r0, #25
 801897e:	d5f1      	bpl.n	8018964 <_printf_i+0x88>
 8018980:	b22d      	sxth	r5, r5
 8018982:	e7ef      	b.n	8018964 <_printf_i+0x88>
 8018984:	680d      	ldr	r5, [r1, #0]
 8018986:	6819      	ldr	r1, [r3, #0]
 8018988:	1d08      	adds	r0, r1, #4
 801898a:	6018      	str	r0, [r3, #0]
 801898c:	062e      	lsls	r6, r5, #24
 801898e:	d501      	bpl.n	8018994 <_printf_i+0xb8>
 8018990:	680d      	ldr	r5, [r1, #0]
 8018992:	e003      	b.n	801899c <_printf_i+0xc0>
 8018994:	066d      	lsls	r5, r5, #25
 8018996:	d5fb      	bpl.n	8018990 <_printf_i+0xb4>
 8018998:	680d      	ldr	r5, [r1, #0]
 801899a:	b2ad      	uxth	r5, r5
 801899c:	4b56      	ldr	r3, [pc, #344]	; (8018af8 <_printf_i+0x21c>)
 801899e:	270a      	movs	r7, #10
 80189a0:	9303      	str	r3, [sp, #12]
 80189a2:	2a6f      	cmp	r2, #111	; 0x6f
 80189a4:	d117      	bne.n	80189d6 <_printf_i+0xfa>
 80189a6:	2708      	movs	r7, #8
 80189a8:	e015      	b.n	80189d6 <_printf_i+0xfa>
 80189aa:	3145      	adds	r1, #69	; 0x45
 80189ac:	700a      	strb	r2, [r1, #0]
 80189ae:	4a52      	ldr	r2, [pc, #328]	; (8018af8 <_printf_i+0x21c>)
 80189b0:	9203      	str	r2, [sp, #12]
 80189b2:	681a      	ldr	r2, [r3, #0]
 80189b4:	6821      	ldr	r1, [r4, #0]
 80189b6:	ca20      	ldmia	r2!, {r5}
 80189b8:	601a      	str	r2, [r3, #0]
 80189ba:	0608      	lsls	r0, r1, #24
 80189bc:	d550      	bpl.n	8018a60 <_printf_i+0x184>
 80189be:	07cb      	lsls	r3, r1, #31
 80189c0:	d502      	bpl.n	80189c8 <_printf_i+0xec>
 80189c2:	2320      	movs	r3, #32
 80189c4:	4319      	orrs	r1, r3
 80189c6:	6021      	str	r1, [r4, #0]
 80189c8:	2710      	movs	r7, #16
 80189ca:	2d00      	cmp	r5, #0
 80189cc:	d103      	bne.n	80189d6 <_printf_i+0xfa>
 80189ce:	2320      	movs	r3, #32
 80189d0:	6822      	ldr	r2, [r4, #0]
 80189d2:	439a      	bics	r2, r3
 80189d4:	6022      	str	r2, [r4, #0]
 80189d6:	0023      	movs	r3, r4
 80189d8:	2200      	movs	r2, #0
 80189da:	3343      	adds	r3, #67	; 0x43
 80189dc:	701a      	strb	r2, [r3, #0]
 80189de:	6863      	ldr	r3, [r4, #4]
 80189e0:	60a3      	str	r3, [r4, #8]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	db03      	blt.n	80189ee <_printf_i+0x112>
 80189e6:	2204      	movs	r2, #4
 80189e8:	6821      	ldr	r1, [r4, #0]
 80189ea:	4391      	bics	r1, r2
 80189ec:	6021      	str	r1, [r4, #0]
 80189ee:	2d00      	cmp	r5, #0
 80189f0:	d102      	bne.n	80189f8 <_printf_i+0x11c>
 80189f2:	9e04      	ldr	r6, [sp, #16]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d00c      	beq.n	8018a12 <_printf_i+0x136>
 80189f8:	9e04      	ldr	r6, [sp, #16]
 80189fa:	0028      	movs	r0, r5
 80189fc:	0039      	movs	r1, r7
 80189fe:	f7f0 fc25 	bl	800924c <__aeabi_uidivmod>
 8018a02:	9b03      	ldr	r3, [sp, #12]
 8018a04:	3e01      	subs	r6, #1
 8018a06:	5c5b      	ldrb	r3, [r3, r1]
 8018a08:	7033      	strb	r3, [r6, #0]
 8018a0a:	002b      	movs	r3, r5
 8018a0c:	0005      	movs	r5, r0
 8018a0e:	429f      	cmp	r7, r3
 8018a10:	d9f3      	bls.n	80189fa <_printf_i+0x11e>
 8018a12:	2f08      	cmp	r7, #8
 8018a14:	d109      	bne.n	8018a2a <_printf_i+0x14e>
 8018a16:	6823      	ldr	r3, [r4, #0]
 8018a18:	07db      	lsls	r3, r3, #31
 8018a1a:	d506      	bpl.n	8018a2a <_printf_i+0x14e>
 8018a1c:	6863      	ldr	r3, [r4, #4]
 8018a1e:	6922      	ldr	r2, [r4, #16]
 8018a20:	4293      	cmp	r3, r2
 8018a22:	dc02      	bgt.n	8018a2a <_printf_i+0x14e>
 8018a24:	2330      	movs	r3, #48	; 0x30
 8018a26:	3e01      	subs	r6, #1
 8018a28:	7033      	strb	r3, [r6, #0]
 8018a2a:	9b04      	ldr	r3, [sp, #16]
 8018a2c:	1b9b      	subs	r3, r3, r6
 8018a2e:	6123      	str	r3, [r4, #16]
 8018a30:	9b07      	ldr	r3, [sp, #28]
 8018a32:	0021      	movs	r1, r4
 8018a34:	9300      	str	r3, [sp, #0]
 8018a36:	9805      	ldr	r0, [sp, #20]
 8018a38:	9b06      	ldr	r3, [sp, #24]
 8018a3a:	aa09      	add	r2, sp, #36	; 0x24
 8018a3c:	f7ff fede 	bl	80187fc <_printf_common>
 8018a40:	1c43      	adds	r3, r0, #1
 8018a42:	d135      	bne.n	8018ab0 <_printf_i+0x1d4>
 8018a44:	2001      	movs	r0, #1
 8018a46:	4240      	negs	r0, r0
 8018a48:	b00b      	add	sp, #44	; 0x2c
 8018a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a4c:	2220      	movs	r2, #32
 8018a4e:	6809      	ldr	r1, [r1, #0]
 8018a50:	430a      	orrs	r2, r1
 8018a52:	6022      	str	r2, [r4, #0]
 8018a54:	0022      	movs	r2, r4
 8018a56:	2178      	movs	r1, #120	; 0x78
 8018a58:	3245      	adds	r2, #69	; 0x45
 8018a5a:	7011      	strb	r1, [r2, #0]
 8018a5c:	4a27      	ldr	r2, [pc, #156]	; (8018afc <_printf_i+0x220>)
 8018a5e:	e7a7      	b.n	80189b0 <_printf_i+0xd4>
 8018a60:	0648      	lsls	r0, r1, #25
 8018a62:	d5ac      	bpl.n	80189be <_printf_i+0xe2>
 8018a64:	b2ad      	uxth	r5, r5
 8018a66:	e7aa      	b.n	80189be <_printf_i+0xe2>
 8018a68:	681a      	ldr	r2, [r3, #0]
 8018a6a:	680d      	ldr	r5, [r1, #0]
 8018a6c:	1d10      	adds	r0, r2, #4
 8018a6e:	6949      	ldr	r1, [r1, #20]
 8018a70:	6018      	str	r0, [r3, #0]
 8018a72:	6813      	ldr	r3, [r2, #0]
 8018a74:	062e      	lsls	r6, r5, #24
 8018a76:	d501      	bpl.n	8018a7c <_printf_i+0x1a0>
 8018a78:	6019      	str	r1, [r3, #0]
 8018a7a:	e002      	b.n	8018a82 <_printf_i+0x1a6>
 8018a7c:	066d      	lsls	r5, r5, #25
 8018a7e:	d5fb      	bpl.n	8018a78 <_printf_i+0x19c>
 8018a80:	8019      	strh	r1, [r3, #0]
 8018a82:	2300      	movs	r3, #0
 8018a84:	9e04      	ldr	r6, [sp, #16]
 8018a86:	6123      	str	r3, [r4, #16]
 8018a88:	e7d2      	b.n	8018a30 <_printf_i+0x154>
 8018a8a:	681a      	ldr	r2, [r3, #0]
 8018a8c:	1d11      	adds	r1, r2, #4
 8018a8e:	6019      	str	r1, [r3, #0]
 8018a90:	6816      	ldr	r6, [r2, #0]
 8018a92:	2100      	movs	r1, #0
 8018a94:	0030      	movs	r0, r6
 8018a96:	6862      	ldr	r2, [r4, #4]
 8018a98:	f000 f832 	bl	8018b00 <memchr>
 8018a9c:	2800      	cmp	r0, #0
 8018a9e:	d001      	beq.n	8018aa4 <_printf_i+0x1c8>
 8018aa0:	1b80      	subs	r0, r0, r6
 8018aa2:	6060      	str	r0, [r4, #4]
 8018aa4:	6863      	ldr	r3, [r4, #4]
 8018aa6:	6123      	str	r3, [r4, #16]
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	9a04      	ldr	r2, [sp, #16]
 8018aac:	7013      	strb	r3, [r2, #0]
 8018aae:	e7bf      	b.n	8018a30 <_printf_i+0x154>
 8018ab0:	6923      	ldr	r3, [r4, #16]
 8018ab2:	0032      	movs	r2, r6
 8018ab4:	9906      	ldr	r1, [sp, #24]
 8018ab6:	9805      	ldr	r0, [sp, #20]
 8018ab8:	9d07      	ldr	r5, [sp, #28]
 8018aba:	47a8      	blx	r5
 8018abc:	1c43      	adds	r3, r0, #1
 8018abe:	d0c1      	beq.n	8018a44 <_printf_i+0x168>
 8018ac0:	6823      	ldr	r3, [r4, #0]
 8018ac2:	079b      	lsls	r3, r3, #30
 8018ac4:	d415      	bmi.n	8018af2 <_printf_i+0x216>
 8018ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ac8:	68e0      	ldr	r0, [r4, #12]
 8018aca:	4298      	cmp	r0, r3
 8018acc:	dabc      	bge.n	8018a48 <_printf_i+0x16c>
 8018ace:	0018      	movs	r0, r3
 8018ad0:	e7ba      	b.n	8018a48 <_printf_i+0x16c>
 8018ad2:	0022      	movs	r2, r4
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	9906      	ldr	r1, [sp, #24]
 8018ad8:	9805      	ldr	r0, [sp, #20]
 8018ada:	9e07      	ldr	r6, [sp, #28]
 8018adc:	3219      	adds	r2, #25
 8018ade:	47b0      	blx	r6
 8018ae0:	1c43      	adds	r3, r0, #1
 8018ae2:	d0af      	beq.n	8018a44 <_printf_i+0x168>
 8018ae4:	3501      	adds	r5, #1
 8018ae6:	68e3      	ldr	r3, [r4, #12]
 8018ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018aea:	1a9b      	subs	r3, r3, r2
 8018aec:	42ab      	cmp	r3, r5
 8018aee:	dcf0      	bgt.n	8018ad2 <_printf_i+0x1f6>
 8018af0:	e7e9      	b.n	8018ac6 <_printf_i+0x1ea>
 8018af2:	2500      	movs	r5, #0
 8018af4:	e7f7      	b.n	8018ae6 <_printf_i+0x20a>
 8018af6:	46c0      	nop			; (mov r8, r8)
 8018af8:	0801a2ee 	.word	0x0801a2ee
 8018afc:	0801a2ff 	.word	0x0801a2ff

08018b00 <memchr>:
 8018b00:	b2c9      	uxtb	r1, r1
 8018b02:	1882      	adds	r2, r0, r2
 8018b04:	4290      	cmp	r0, r2
 8018b06:	d101      	bne.n	8018b0c <memchr+0xc>
 8018b08:	2000      	movs	r0, #0
 8018b0a:	4770      	bx	lr
 8018b0c:	7803      	ldrb	r3, [r0, #0]
 8018b0e:	428b      	cmp	r3, r1
 8018b10:	d0fb      	beq.n	8018b0a <memchr+0xa>
 8018b12:	3001      	adds	r0, #1
 8018b14:	e7f6      	b.n	8018b04 <memchr+0x4>

08018b16 <memmove>:
 8018b16:	b510      	push	{r4, lr}
 8018b18:	4288      	cmp	r0, r1
 8018b1a:	d902      	bls.n	8018b22 <memmove+0xc>
 8018b1c:	188b      	adds	r3, r1, r2
 8018b1e:	4298      	cmp	r0, r3
 8018b20:	d303      	bcc.n	8018b2a <memmove+0x14>
 8018b22:	2300      	movs	r3, #0
 8018b24:	e007      	b.n	8018b36 <memmove+0x20>
 8018b26:	5c8b      	ldrb	r3, [r1, r2]
 8018b28:	5483      	strb	r3, [r0, r2]
 8018b2a:	3a01      	subs	r2, #1
 8018b2c:	d2fb      	bcs.n	8018b26 <memmove+0x10>
 8018b2e:	bd10      	pop	{r4, pc}
 8018b30:	5ccc      	ldrb	r4, [r1, r3]
 8018b32:	54c4      	strb	r4, [r0, r3]
 8018b34:	3301      	adds	r3, #1
 8018b36:	429a      	cmp	r2, r3
 8018b38:	d1fa      	bne.n	8018b30 <memmove+0x1a>
 8018b3a:	e7f8      	b.n	8018b2e <memmove+0x18>

08018b3c <_free_r>:
 8018b3c:	b570      	push	{r4, r5, r6, lr}
 8018b3e:	0005      	movs	r5, r0
 8018b40:	2900      	cmp	r1, #0
 8018b42:	d010      	beq.n	8018b66 <_free_r+0x2a>
 8018b44:	1f0c      	subs	r4, r1, #4
 8018b46:	6823      	ldr	r3, [r4, #0]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	da00      	bge.n	8018b4e <_free_r+0x12>
 8018b4c:	18e4      	adds	r4, r4, r3
 8018b4e:	0028      	movs	r0, r5
 8018b50:	f000 f8d4 	bl	8018cfc <__malloc_lock>
 8018b54:	4a1d      	ldr	r2, [pc, #116]	; (8018bcc <_free_r+0x90>)
 8018b56:	6813      	ldr	r3, [r2, #0]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d105      	bne.n	8018b68 <_free_r+0x2c>
 8018b5c:	6063      	str	r3, [r4, #4]
 8018b5e:	6014      	str	r4, [r2, #0]
 8018b60:	0028      	movs	r0, r5
 8018b62:	f000 f8d3 	bl	8018d0c <__malloc_unlock>
 8018b66:	bd70      	pop	{r4, r5, r6, pc}
 8018b68:	42a3      	cmp	r3, r4
 8018b6a:	d908      	bls.n	8018b7e <_free_r+0x42>
 8018b6c:	6821      	ldr	r1, [r4, #0]
 8018b6e:	1860      	adds	r0, r4, r1
 8018b70:	4283      	cmp	r3, r0
 8018b72:	d1f3      	bne.n	8018b5c <_free_r+0x20>
 8018b74:	6818      	ldr	r0, [r3, #0]
 8018b76:	685b      	ldr	r3, [r3, #4]
 8018b78:	1841      	adds	r1, r0, r1
 8018b7a:	6021      	str	r1, [r4, #0]
 8018b7c:	e7ee      	b.n	8018b5c <_free_r+0x20>
 8018b7e:	001a      	movs	r2, r3
 8018b80:	685b      	ldr	r3, [r3, #4]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d001      	beq.n	8018b8a <_free_r+0x4e>
 8018b86:	42a3      	cmp	r3, r4
 8018b88:	d9f9      	bls.n	8018b7e <_free_r+0x42>
 8018b8a:	6811      	ldr	r1, [r2, #0]
 8018b8c:	1850      	adds	r0, r2, r1
 8018b8e:	42a0      	cmp	r0, r4
 8018b90:	d10b      	bne.n	8018baa <_free_r+0x6e>
 8018b92:	6820      	ldr	r0, [r4, #0]
 8018b94:	1809      	adds	r1, r1, r0
 8018b96:	1850      	adds	r0, r2, r1
 8018b98:	6011      	str	r1, [r2, #0]
 8018b9a:	4283      	cmp	r3, r0
 8018b9c:	d1e0      	bne.n	8018b60 <_free_r+0x24>
 8018b9e:	6818      	ldr	r0, [r3, #0]
 8018ba0:	685b      	ldr	r3, [r3, #4]
 8018ba2:	1841      	adds	r1, r0, r1
 8018ba4:	6011      	str	r1, [r2, #0]
 8018ba6:	6053      	str	r3, [r2, #4]
 8018ba8:	e7da      	b.n	8018b60 <_free_r+0x24>
 8018baa:	42a0      	cmp	r0, r4
 8018bac:	d902      	bls.n	8018bb4 <_free_r+0x78>
 8018bae:	230c      	movs	r3, #12
 8018bb0:	602b      	str	r3, [r5, #0]
 8018bb2:	e7d5      	b.n	8018b60 <_free_r+0x24>
 8018bb4:	6821      	ldr	r1, [r4, #0]
 8018bb6:	1860      	adds	r0, r4, r1
 8018bb8:	4283      	cmp	r3, r0
 8018bba:	d103      	bne.n	8018bc4 <_free_r+0x88>
 8018bbc:	6818      	ldr	r0, [r3, #0]
 8018bbe:	685b      	ldr	r3, [r3, #4]
 8018bc0:	1841      	adds	r1, r0, r1
 8018bc2:	6021      	str	r1, [r4, #0]
 8018bc4:	6063      	str	r3, [r4, #4]
 8018bc6:	6054      	str	r4, [r2, #4]
 8018bc8:	e7ca      	b.n	8018b60 <_free_r+0x24>
 8018bca:	46c0      	nop			; (mov r8, r8)
 8018bcc:	200014bc 	.word	0x200014bc

08018bd0 <_malloc_r>:
 8018bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bd2:	2303      	movs	r3, #3
 8018bd4:	1ccd      	adds	r5, r1, #3
 8018bd6:	439d      	bics	r5, r3
 8018bd8:	3508      	adds	r5, #8
 8018bda:	0006      	movs	r6, r0
 8018bdc:	2d0c      	cmp	r5, #12
 8018bde:	d21f      	bcs.n	8018c20 <_malloc_r+0x50>
 8018be0:	250c      	movs	r5, #12
 8018be2:	42a9      	cmp	r1, r5
 8018be4:	d81e      	bhi.n	8018c24 <_malloc_r+0x54>
 8018be6:	0030      	movs	r0, r6
 8018be8:	f000 f888 	bl	8018cfc <__malloc_lock>
 8018bec:	4925      	ldr	r1, [pc, #148]	; (8018c84 <_malloc_r+0xb4>)
 8018bee:	680a      	ldr	r2, [r1, #0]
 8018bf0:	0014      	movs	r4, r2
 8018bf2:	2c00      	cmp	r4, #0
 8018bf4:	d11a      	bne.n	8018c2c <_malloc_r+0x5c>
 8018bf6:	4f24      	ldr	r7, [pc, #144]	; (8018c88 <_malloc_r+0xb8>)
 8018bf8:	683b      	ldr	r3, [r7, #0]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d104      	bne.n	8018c08 <_malloc_r+0x38>
 8018bfe:	0021      	movs	r1, r4
 8018c00:	0030      	movs	r0, r6
 8018c02:	f000 f869 	bl	8018cd8 <_sbrk_r>
 8018c06:	6038      	str	r0, [r7, #0]
 8018c08:	0029      	movs	r1, r5
 8018c0a:	0030      	movs	r0, r6
 8018c0c:	f000 f864 	bl	8018cd8 <_sbrk_r>
 8018c10:	1c43      	adds	r3, r0, #1
 8018c12:	d12b      	bne.n	8018c6c <_malloc_r+0x9c>
 8018c14:	230c      	movs	r3, #12
 8018c16:	0030      	movs	r0, r6
 8018c18:	6033      	str	r3, [r6, #0]
 8018c1a:	f000 f877 	bl	8018d0c <__malloc_unlock>
 8018c1e:	e003      	b.n	8018c28 <_malloc_r+0x58>
 8018c20:	2d00      	cmp	r5, #0
 8018c22:	dade      	bge.n	8018be2 <_malloc_r+0x12>
 8018c24:	230c      	movs	r3, #12
 8018c26:	6033      	str	r3, [r6, #0]
 8018c28:	2000      	movs	r0, #0
 8018c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c2c:	6823      	ldr	r3, [r4, #0]
 8018c2e:	1b5b      	subs	r3, r3, r5
 8018c30:	d419      	bmi.n	8018c66 <_malloc_r+0x96>
 8018c32:	2b0b      	cmp	r3, #11
 8018c34:	d903      	bls.n	8018c3e <_malloc_r+0x6e>
 8018c36:	6023      	str	r3, [r4, #0]
 8018c38:	18e4      	adds	r4, r4, r3
 8018c3a:	6025      	str	r5, [r4, #0]
 8018c3c:	e003      	b.n	8018c46 <_malloc_r+0x76>
 8018c3e:	6863      	ldr	r3, [r4, #4]
 8018c40:	42a2      	cmp	r2, r4
 8018c42:	d10e      	bne.n	8018c62 <_malloc_r+0x92>
 8018c44:	600b      	str	r3, [r1, #0]
 8018c46:	0030      	movs	r0, r6
 8018c48:	f000 f860 	bl	8018d0c <__malloc_unlock>
 8018c4c:	0020      	movs	r0, r4
 8018c4e:	2207      	movs	r2, #7
 8018c50:	300b      	adds	r0, #11
 8018c52:	1d23      	adds	r3, r4, #4
 8018c54:	4390      	bics	r0, r2
 8018c56:	1ac2      	subs	r2, r0, r3
 8018c58:	4298      	cmp	r0, r3
 8018c5a:	d0e6      	beq.n	8018c2a <_malloc_r+0x5a>
 8018c5c:	1a1b      	subs	r3, r3, r0
 8018c5e:	50a3      	str	r3, [r4, r2]
 8018c60:	e7e3      	b.n	8018c2a <_malloc_r+0x5a>
 8018c62:	6053      	str	r3, [r2, #4]
 8018c64:	e7ef      	b.n	8018c46 <_malloc_r+0x76>
 8018c66:	0022      	movs	r2, r4
 8018c68:	6864      	ldr	r4, [r4, #4]
 8018c6a:	e7c2      	b.n	8018bf2 <_malloc_r+0x22>
 8018c6c:	2303      	movs	r3, #3
 8018c6e:	1cc4      	adds	r4, r0, #3
 8018c70:	439c      	bics	r4, r3
 8018c72:	42a0      	cmp	r0, r4
 8018c74:	d0e1      	beq.n	8018c3a <_malloc_r+0x6a>
 8018c76:	1a21      	subs	r1, r4, r0
 8018c78:	0030      	movs	r0, r6
 8018c7a:	f000 f82d 	bl	8018cd8 <_sbrk_r>
 8018c7e:	1c43      	adds	r3, r0, #1
 8018c80:	d1db      	bne.n	8018c3a <_malloc_r+0x6a>
 8018c82:	e7c7      	b.n	8018c14 <_malloc_r+0x44>
 8018c84:	200014bc 	.word	0x200014bc
 8018c88:	200014c0 	.word	0x200014c0

08018c8c <_realloc_r>:
 8018c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c8e:	0007      	movs	r7, r0
 8018c90:	000d      	movs	r5, r1
 8018c92:	0016      	movs	r6, r2
 8018c94:	2900      	cmp	r1, #0
 8018c96:	d105      	bne.n	8018ca4 <_realloc_r+0x18>
 8018c98:	0011      	movs	r1, r2
 8018c9a:	f7ff ff99 	bl	8018bd0 <_malloc_r>
 8018c9e:	0004      	movs	r4, r0
 8018ca0:	0020      	movs	r0, r4
 8018ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ca4:	2a00      	cmp	r2, #0
 8018ca6:	d103      	bne.n	8018cb0 <_realloc_r+0x24>
 8018ca8:	f7ff ff48 	bl	8018b3c <_free_r>
 8018cac:	0034      	movs	r4, r6
 8018cae:	e7f7      	b.n	8018ca0 <_realloc_r+0x14>
 8018cb0:	f000 f834 	bl	8018d1c <_malloc_usable_size_r>
 8018cb4:	002c      	movs	r4, r5
 8018cb6:	42b0      	cmp	r0, r6
 8018cb8:	d2f2      	bcs.n	8018ca0 <_realloc_r+0x14>
 8018cba:	0031      	movs	r1, r6
 8018cbc:	0038      	movs	r0, r7
 8018cbe:	f7ff ff87 	bl	8018bd0 <_malloc_r>
 8018cc2:	1e04      	subs	r4, r0, #0
 8018cc4:	d0ec      	beq.n	8018ca0 <_realloc_r+0x14>
 8018cc6:	0029      	movs	r1, r5
 8018cc8:	0032      	movs	r2, r6
 8018cca:	f7ff fb2f 	bl	801832c <memcpy>
 8018cce:	0029      	movs	r1, r5
 8018cd0:	0038      	movs	r0, r7
 8018cd2:	f7ff ff33 	bl	8018b3c <_free_r>
 8018cd6:	e7e3      	b.n	8018ca0 <_realloc_r+0x14>

08018cd8 <_sbrk_r>:
 8018cd8:	2300      	movs	r3, #0
 8018cda:	b570      	push	{r4, r5, r6, lr}
 8018cdc:	4d06      	ldr	r5, [pc, #24]	; (8018cf8 <_sbrk_r+0x20>)
 8018cde:	0004      	movs	r4, r0
 8018ce0:	0008      	movs	r0, r1
 8018ce2:	602b      	str	r3, [r5, #0]
 8018ce4:	f7f4 fce0 	bl	800d6a8 <_sbrk>
 8018ce8:	1c43      	adds	r3, r0, #1
 8018cea:	d103      	bne.n	8018cf4 <_sbrk_r+0x1c>
 8018cec:	682b      	ldr	r3, [r5, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d000      	beq.n	8018cf4 <_sbrk_r+0x1c>
 8018cf2:	6023      	str	r3, [r4, #0]
 8018cf4:	bd70      	pop	{r4, r5, r6, pc}
 8018cf6:	46c0      	nop			; (mov r8, r8)
 8018cf8:	200035f4 	.word	0x200035f4

08018cfc <__malloc_lock>:
 8018cfc:	b510      	push	{r4, lr}
 8018cfe:	4802      	ldr	r0, [pc, #8]	; (8018d08 <__malloc_lock+0xc>)
 8018d00:	f000 f814 	bl	8018d2c <__retarget_lock_acquire_recursive>
 8018d04:	bd10      	pop	{r4, pc}
 8018d06:	46c0      	nop			; (mov r8, r8)
 8018d08:	200035fc 	.word	0x200035fc

08018d0c <__malloc_unlock>:
 8018d0c:	b510      	push	{r4, lr}
 8018d0e:	4802      	ldr	r0, [pc, #8]	; (8018d18 <__malloc_unlock+0xc>)
 8018d10:	f000 f80d 	bl	8018d2e <__retarget_lock_release_recursive>
 8018d14:	bd10      	pop	{r4, pc}
 8018d16:	46c0      	nop			; (mov r8, r8)
 8018d18:	200035fc 	.word	0x200035fc

08018d1c <_malloc_usable_size_r>:
 8018d1c:	1f0b      	subs	r3, r1, #4
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	1f18      	subs	r0, r3, #4
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	da01      	bge.n	8018d2a <_malloc_usable_size_r+0xe>
 8018d26:	580b      	ldr	r3, [r1, r0]
 8018d28:	18c0      	adds	r0, r0, r3
 8018d2a:	4770      	bx	lr

08018d2c <__retarget_lock_acquire_recursive>:
 8018d2c:	4770      	bx	lr

08018d2e <__retarget_lock_release_recursive>:
 8018d2e:	4770      	bx	lr

08018d30 <_init>:
 8018d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d32:	46c0      	nop			; (mov r8, r8)
 8018d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d36:	bc08      	pop	{r3}
 8018d38:	469e      	mov	lr, r3
 8018d3a:	4770      	bx	lr

08018d3c <_fini>:
 8018d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d3e:	46c0      	nop			; (mov r8, r8)
 8018d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d42:	bc08      	pop	{r3}
 8018d44:	469e      	mov	lr, r3
 8018d46:	4770      	bx	lr
