
M0_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08009000  08009000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea8  080090c0  080090c0  000090c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b4  08012f68  08012f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801441c  0801441c  00020148  2**0
                  CONTENTS
  4 .ARM          00000000  0801441c  0801441c  00020148  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801441c  0801441c  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801441c  0801441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014420  08014420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  200000c0  08014424  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021cc  20000148  080144ac  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002314  080144ac  00022314  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e3f  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac5  00000000  00000000  00037faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0003ba78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  0003cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a6c  00000000  00000000  0003db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fd4  00000000  00000000  00042584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d417  00000000  00000000  00058558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f596f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f4c  00000000  00000000  000f59c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080090c0 <__do_global_dtors_aux>:
 80090c0:	b510      	push	{r4, lr}
 80090c2:	4c06      	ldr	r4, [pc, #24]	; (80090dc <__do_global_dtors_aux+0x1c>)
 80090c4:	7823      	ldrb	r3, [r4, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d107      	bne.n	80090da <__do_global_dtors_aux+0x1a>
 80090ca:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <__do_global_dtors_aux+0x20>)
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <__do_global_dtors_aux+0x16>
 80090d0:	4804      	ldr	r0, [pc, #16]	; (80090e4 <__do_global_dtors_aux+0x24>)
 80090d2:	e000      	b.n	80090d6 <__do_global_dtors_aux+0x16>
 80090d4:	bf00      	nop
 80090d6:	2301      	movs	r3, #1
 80090d8:	7023      	strb	r3, [r4, #0]
 80090da:	bd10      	pop	{r4, pc}
 80090dc:	20000148 	.word	0x20000148
 80090e0:	00000000 	.word	0x00000000
 80090e4:	08012f50 	.word	0x08012f50

080090e8 <frame_dummy>:
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <frame_dummy+0x14>)
 80090ea:	b510      	push	{r4, lr}
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <frame_dummy+0x10>
 80090f0:	4903      	ldr	r1, [pc, #12]	; (8009100 <frame_dummy+0x18>)
 80090f2:	4804      	ldr	r0, [pc, #16]	; (8009104 <frame_dummy+0x1c>)
 80090f4:	e000      	b.n	80090f8 <frame_dummy+0x10>
 80090f6:	bf00      	nop
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	00000000 	.word	0x00000000
 8009100:	2000014c 	.word	0x2000014c
 8009104:	08012f50 	.word	0x08012f50

08009108 <strcmp>:
 8009108:	7802      	ldrb	r2, [r0, #0]
 800910a:	780b      	ldrb	r3, [r1, #0]
 800910c:	2a00      	cmp	r2, #0
 800910e:	d003      	beq.n	8009118 <strcmp+0x10>
 8009110:	3001      	adds	r0, #1
 8009112:	3101      	adds	r1, #1
 8009114:	429a      	cmp	r2, r3
 8009116:	d0f7      	beq.n	8009108 <strcmp>
 8009118:	1ad0      	subs	r0, r2, r3
 800911a:	4770      	bx	lr

0800911c <strlen>:
 800911c:	2300      	movs	r3, #0
 800911e:	5cc2      	ldrb	r2, [r0, r3]
 8009120:	3301      	adds	r3, #1
 8009122:	2a00      	cmp	r2, #0
 8009124:	d1fb      	bne.n	800911e <strlen+0x2>
 8009126:	1e58      	subs	r0, r3, #1
 8009128:	4770      	bx	lr
	...

0800912c <__gnu_thumb1_case_shi>:
 800912c:	b403      	push	{r0, r1}
 800912e:	4671      	mov	r1, lr
 8009130:	0849      	lsrs	r1, r1, #1
 8009132:	0040      	lsls	r0, r0, #1
 8009134:	0049      	lsls	r1, r1, #1
 8009136:	5e09      	ldrsh	r1, [r1, r0]
 8009138:	0049      	lsls	r1, r1, #1
 800913a:	448e      	add	lr, r1
 800913c:	bc03      	pop	{r0, r1}
 800913e:	4770      	bx	lr

08009140 <__udivsi3>:
 8009140:	2200      	movs	r2, #0
 8009142:	0843      	lsrs	r3, r0, #1
 8009144:	428b      	cmp	r3, r1
 8009146:	d374      	bcc.n	8009232 <__udivsi3+0xf2>
 8009148:	0903      	lsrs	r3, r0, #4
 800914a:	428b      	cmp	r3, r1
 800914c:	d35f      	bcc.n	800920e <__udivsi3+0xce>
 800914e:	0a03      	lsrs	r3, r0, #8
 8009150:	428b      	cmp	r3, r1
 8009152:	d344      	bcc.n	80091de <__udivsi3+0x9e>
 8009154:	0b03      	lsrs	r3, r0, #12
 8009156:	428b      	cmp	r3, r1
 8009158:	d328      	bcc.n	80091ac <__udivsi3+0x6c>
 800915a:	0c03      	lsrs	r3, r0, #16
 800915c:	428b      	cmp	r3, r1
 800915e:	d30d      	bcc.n	800917c <__udivsi3+0x3c>
 8009160:	22ff      	movs	r2, #255	; 0xff
 8009162:	0209      	lsls	r1, r1, #8
 8009164:	ba12      	rev	r2, r2
 8009166:	0c03      	lsrs	r3, r0, #16
 8009168:	428b      	cmp	r3, r1
 800916a:	d302      	bcc.n	8009172 <__udivsi3+0x32>
 800916c:	1212      	asrs	r2, r2, #8
 800916e:	0209      	lsls	r1, r1, #8
 8009170:	d065      	beq.n	800923e <__udivsi3+0xfe>
 8009172:	0b03      	lsrs	r3, r0, #12
 8009174:	428b      	cmp	r3, r1
 8009176:	d319      	bcc.n	80091ac <__udivsi3+0x6c>
 8009178:	e000      	b.n	800917c <__udivsi3+0x3c>
 800917a:	0a09      	lsrs	r1, r1, #8
 800917c:	0bc3      	lsrs	r3, r0, #15
 800917e:	428b      	cmp	r3, r1
 8009180:	d301      	bcc.n	8009186 <__udivsi3+0x46>
 8009182:	03cb      	lsls	r3, r1, #15
 8009184:	1ac0      	subs	r0, r0, r3
 8009186:	4152      	adcs	r2, r2
 8009188:	0b83      	lsrs	r3, r0, #14
 800918a:	428b      	cmp	r3, r1
 800918c:	d301      	bcc.n	8009192 <__udivsi3+0x52>
 800918e:	038b      	lsls	r3, r1, #14
 8009190:	1ac0      	subs	r0, r0, r3
 8009192:	4152      	adcs	r2, r2
 8009194:	0b43      	lsrs	r3, r0, #13
 8009196:	428b      	cmp	r3, r1
 8009198:	d301      	bcc.n	800919e <__udivsi3+0x5e>
 800919a:	034b      	lsls	r3, r1, #13
 800919c:	1ac0      	subs	r0, r0, r3
 800919e:	4152      	adcs	r2, r2
 80091a0:	0b03      	lsrs	r3, r0, #12
 80091a2:	428b      	cmp	r3, r1
 80091a4:	d301      	bcc.n	80091aa <__udivsi3+0x6a>
 80091a6:	030b      	lsls	r3, r1, #12
 80091a8:	1ac0      	subs	r0, r0, r3
 80091aa:	4152      	adcs	r2, r2
 80091ac:	0ac3      	lsrs	r3, r0, #11
 80091ae:	428b      	cmp	r3, r1
 80091b0:	d301      	bcc.n	80091b6 <__udivsi3+0x76>
 80091b2:	02cb      	lsls	r3, r1, #11
 80091b4:	1ac0      	subs	r0, r0, r3
 80091b6:	4152      	adcs	r2, r2
 80091b8:	0a83      	lsrs	r3, r0, #10
 80091ba:	428b      	cmp	r3, r1
 80091bc:	d301      	bcc.n	80091c2 <__udivsi3+0x82>
 80091be:	028b      	lsls	r3, r1, #10
 80091c0:	1ac0      	subs	r0, r0, r3
 80091c2:	4152      	adcs	r2, r2
 80091c4:	0a43      	lsrs	r3, r0, #9
 80091c6:	428b      	cmp	r3, r1
 80091c8:	d301      	bcc.n	80091ce <__udivsi3+0x8e>
 80091ca:	024b      	lsls	r3, r1, #9
 80091cc:	1ac0      	subs	r0, r0, r3
 80091ce:	4152      	adcs	r2, r2
 80091d0:	0a03      	lsrs	r3, r0, #8
 80091d2:	428b      	cmp	r3, r1
 80091d4:	d301      	bcc.n	80091da <__udivsi3+0x9a>
 80091d6:	020b      	lsls	r3, r1, #8
 80091d8:	1ac0      	subs	r0, r0, r3
 80091da:	4152      	adcs	r2, r2
 80091dc:	d2cd      	bcs.n	800917a <__udivsi3+0x3a>
 80091de:	09c3      	lsrs	r3, r0, #7
 80091e0:	428b      	cmp	r3, r1
 80091e2:	d301      	bcc.n	80091e8 <__udivsi3+0xa8>
 80091e4:	01cb      	lsls	r3, r1, #7
 80091e6:	1ac0      	subs	r0, r0, r3
 80091e8:	4152      	adcs	r2, r2
 80091ea:	0983      	lsrs	r3, r0, #6
 80091ec:	428b      	cmp	r3, r1
 80091ee:	d301      	bcc.n	80091f4 <__udivsi3+0xb4>
 80091f0:	018b      	lsls	r3, r1, #6
 80091f2:	1ac0      	subs	r0, r0, r3
 80091f4:	4152      	adcs	r2, r2
 80091f6:	0943      	lsrs	r3, r0, #5
 80091f8:	428b      	cmp	r3, r1
 80091fa:	d301      	bcc.n	8009200 <__udivsi3+0xc0>
 80091fc:	014b      	lsls	r3, r1, #5
 80091fe:	1ac0      	subs	r0, r0, r3
 8009200:	4152      	adcs	r2, r2
 8009202:	0903      	lsrs	r3, r0, #4
 8009204:	428b      	cmp	r3, r1
 8009206:	d301      	bcc.n	800920c <__udivsi3+0xcc>
 8009208:	010b      	lsls	r3, r1, #4
 800920a:	1ac0      	subs	r0, r0, r3
 800920c:	4152      	adcs	r2, r2
 800920e:	08c3      	lsrs	r3, r0, #3
 8009210:	428b      	cmp	r3, r1
 8009212:	d301      	bcc.n	8009218 <__udivsi3+0xd8>
 8009214:	00cb      	lsls	r3, r1, #3
 8009216:	1ac0      	subs	r0, r0, r3
 8009218:	4152      	adcs	r2, r2
 800921a:	0883      	lsrs	r3, r0, #2
 800921c:	428b      	cmp	r3, r1
 800921e:	d301      	bcc.n	8009224 <__udivsi3+0xe4>
 8009220:	008b      	lsls	r3, r1, #2
 8009222:	1ac0      	subs	r0, r0, r3
 8009224:	4152      	adcs	r2, r2
 8009226:	0843      	lsrs	r3, r0, #1
 8009228:	428b      	cmp	r3, r1
 800922a:	d301      	bcc.n	8009230 <__udivsi3+0xf0>
 800922c:	004b      	lsls	r3, r1, #1
 800922e:	1ac0      	subs	r0, r0, r3
 8009230:	4152      	adcs	r2, r2
 8009232:	1a41      	subs	r1, r0, r1
 8009234:	d200      	bcs.n	8009238 <__udivsi3+0xf8>
 8009236:	4601      	mov	r1, r0
 8009238:	4152      	adcs	r2, r2
 800923a:	4610      	mov	r0, r2
 800923c:	4770      	bx	lr
 800923e:	e7ff      	b.n	8009240 <__udivsi3+0x100>
 8009240:	b501      	push	{r0, lr}
 8009242:	2000      	movs	r0, #0
 8009244:	f000 f806 	bl	8009254 <__aeabi_idiv0>
 8009248:	bd02      	pop	{r1, pc}
 800924a:	46c0      	nop			; (mov r8, r8)

0800924c <__aeabi_uidivmod>:
 800924c:	2900      	cmp	r1, #0
 800924e:	d0f7      	beq.n	8009240 <__udivsi3+0x100>
 8009250:	e776      	b.n	8009140 <__udivsi3>
 8009252:	4770      	bx	lr

08009254 <__aeabi_idiv0>:
 8009254:	4770      	bx	lr
 8009256:	46c0      	nop			; (mov r8, r8)

08009258 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800925c:	f3bf 8f4f 	dsb	sy
}
 8009260:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009262:	4b04      	ldr	r3, [pc, #16]	; (8009274 <__NVIC_SystemReset+0x1c>)
 8009264:	4a04      	ldr	r2, [pc, #16]	; (8009278 <__NVIC_SystemReset+0x20>)
 8009266:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009268:	f3bf 8f4f 	dsb	sy
}
 800926c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	e7fd      	b.n	800926e <__NVIC_SystemReset+0x16>
 8009272:	46c0      	nop			; (mov r8, r8)
 8009274:	e000ed00 	.word	0xe000ed00
 8009278:	05fa0004 	.word	0x05fa0004

0800927c <GSM_Init>:
	//sendData("\r\n",UART0);
	//return pec;
}


void GSM_Init(){
 800927c:	b5b0      	push	{r4, r5, r7, lr}
 800927e:	af00      	add	r7, sp, #0
	//gsmState = AutoBaud;
	Debug_Send("GSM Init\r\n");
 8009280:	4b6f      	ldr	r3, [pc, #444]	; (8009440 <GSM_Init+0x1c4>)
 8009282:	0018      	movs	r0, r3
 8009284:	f001 f97a 	bl	800a57c <Debug_Send>
	//gsmInfo.GPRSinterval = 180;
	gsmInfo.GPRSinterval = 30;
 8009288:	4a6e      	ldr	r2, [pc, #440]	; (8009444 <GSM_Init+0x1c8>)
 800928a:	23a0      	movs	r3, #160	; 0xa0
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	211e      	movs	r1, #30
 8009290:	50d1      	str	r1, [r2, r3]
	strcpy(gsmInfo.urlport,"5008");
 8009292:	4a6d      	ldr	r2, [pc, #436]	; (8009448 <GSM_Init+0x1cc>)
 8009294:	4b6d      	ldr	r3, [pc, #436]	; (800944c <GSM_Init+0x1d0>)
 8009296:	0010      	movs	r0, r2
 8009298:	0019      	movs	r1, r3
 800929a:	2305      	movs	r3, #5
 800929c:	001a      	movs	r2, r3
 800929e:	f009 f955 	bl	801254c <memcpy>
	strcpy(gsmInfo.urlport,"5007");
 80092a2:	4a69      	ldr	r2, [pc, #420]	; (8009448 <GSM_Init+0x1cc>)
 80092a4:	4b6a      	ldr	r3, [pc, #424]	; (8009450 <GSM_Init+0x1d4>)
 80092a6:	0010      	movs	r0, r2
 80092a8:	0019      	movs	r1, r3
 80092aa:	2305      	movs	r3, #5
 80092ac:	001a      	movs	r2, r3
 80092ae:	f009 f94d 	bl	801254c <memcpy>
	strcpy(gsmInfo.urlport,"1883");
 80092b2:	4a65      	ldr	r2, [pc, #404]	; (8009448 <GSM_Init+0x1cc>)
 80092b4:	4b67      	ldr	r3, [pc, #412]	; (8009454 <GSM_Init+0x1d8>)
 80092b6:	0010      	movs	r0, r2
 80092b8:	0019      	movs	r1, r3
 80092ba:	2305      	movs	r3, #5
 80092bc:	001a      	movs	r2, r3
 80092be:	f009 f945 	bl	801254c <memcpy>
	//strcpy(gsmInfo.urlport,"5010");
	//strcpy(gsmInfo.urlport,"80");
	strcpy(gsmInfo.url,"escorsocket.ddns.net");
 80092c2:	4b60      	ldr	r3, [pc, #384]	; (8009444 <GSM_Init+0x1c8>)
 80092c4:	4a64      	ldr	r2, [pc, #400]	; (8009458 <GSM_Init+0x1dc>)
 80092c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80092c8:	c313      	stmia	r3!, {r0, r1, r4}
 80092ca:	ca03      	ldmia	r2!, {r0, r1}
 80092cc:	c303      	stmia	r3!, {r0, r1}
 80092ce:	7812      	ldrb	r2, [r2, #0]
 80092d0:	701a      	strb	r2, [r3, #0]
	strcpy(gsmInfo.url,"196.40.108.169");
 80092d2:	4b5c      	ldr	r3, [pc, #368]	; (8009444 <GSM_Init+0x1c8>)
 80092d4:	4a61      	ldr	r2, [pc, #388]	; (800945c <GSM_Init+0x1e0>)
 80092d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80092d8:	c313      	stmia	r3!, {r0, r1, r4}
 80092da:	8811      	ldrh	r1, [r2, #0]
 80092dc:	8019      	strh	r1, [r3, #0]
 80092de:	7892      	ldrb	r2, [r2, #2]
 80092e0:	709a      	strb	r2, [r3, #2]
	//sprintf(temp, "URL:%s, port:%s\r\n",gsmInfo.url,gsmInfo.urlport);
	//Debug_Send(temp);
	//strcpy(gsmInfo.url,"197.94.242.65");
	//strcpy(gsmInfo.url,"102.129.99.123");
	restartTimer = 0;
 80092e2:	4b5f      	ldr	r3, [pc, #380]	; (8009460 <GSM_Init+0x1e4>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
	onTimer = 0;
 80092e8:	4b5e      	ldr	r3, [pc, #376]	; (8009464 <GSM_Init+0x1e8>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, temp1, 20);
 80092ee:	495e      	ldr	r1, [pc, #376]	; (8009468 <GSM_Init+0x1ec>)
 80092f0:	4b5e      	ldr	r3, [pc, #376]	; (800946c <GSM_Init+0x1f0>)
 80092f2:	2214      	movs	r2, #20
 80092f4:	0018      	movs	r0, r3
 80092f6:	f006 fde1 	bl	800febc <HAL_UART_Receive_IT>
	//SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
	SET_BIT(huart2.Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80092fa:	4b5c      	ldr	r3, [pc, #368]	; (800946c <GSM_Init+0x1f0>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	4b5a      	ldr	r3, [pc, #360]	; (800946c <GSM_Init+0x1f0>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2190      	movs	r1, #144	; 0x90
 8009306:	0049      	lsls	r1, r1, #1
 8009308:	430a      	orrs	r2, r1
 800930a:	601a      	str	r2, [r3, #0]
	//HAL_UART_Receive_IT(&huart1, temp, 50);

	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800930c:	4b58      	ldr	r3, [pc, #352]	; (8009470 <GSM_Init+0x1f4>)
 800930e:	2201      	movs	r2, #1
 8009310:	2108      	movs	r1, #8
 8009312:	0018      	movs	r0, r3
 8009314:	f004 ff1c 	bl	800e150 <HAL_GPIO_WritePin>
	smsFlags.gprsActive = 0;
 8009318:	4b56      	ldr	r3, [pc, #344]	; (8009474 <GSM_Init+0x1f8>)
 800931a:	2200      	movs	r2, #0
 800931c:	61da      	str	r2, [r3, #28]
	gsmInfo.socket = 0;
 800931e:	4b49      	ldr	r3, [pc, #292]	; (8009444 <GSM_Init+0x1c8>)
 8009320:	2200      	movs	r2, #0
 8009322:	679a      	str	r2, [r3, #120]	; 0x78
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8009324:	4b52      	ldr	r3, [pc, #328]	; (8009470 <GSM_Init+0x1f4>)
 8009326:	2201      	movs	r2, #1
 8009328:	2108      	movs	r1, #8
 800932a:	0018      	movs	r0, r3
 800932c:	f004 ff10 	bl	800e150 <HAL_GPIO_WritePin>
	gsmInfo.FTP_Open = 0;
 8009330:	4a44      	ldr	r2, [pc, #272]	; (8009444 <GSM_Init+0x1c8>)
 8009332:	23b2      	movs	r3, #178	; 0xb2
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	2100      	movs	r1, #0
 8009338:	50d1      	str	r1, [r2, r3]
	gsmInfo.FS_SeekFlag = 0;
 800933a:	4a42      	ldr	r2, [pc, #264]	; (8009444 <GSM_Init+0x1c8>)
 800933c:	23b4      	movs	r3, #180	; 0xb4
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	2100      	movs	r1, #0
 8009342:	50d1      	str	r1, [r2, r3]
	gsmInfo.FS_Connect = 0;
 8009344:	4a3f      	ldr	r2, [pc, #252]	; (8009444 <GSM_Init+0x1c8>)
 8009346:	23b6      	movs	r3, #182	; 0xb6
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	2100      	movs	r1, #0
 800934c:	50d1      	str	r1, [r2, r3]
	gsmInfo.FTP_Data = 0;
 800934e:	4a3d      	ldr	r2, [pc, #244]	; (8009444 <GSM_Init+0x1c8>)
 8009350:	23b8      	movs	r3, #184	; 0xb8
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	2100      	movs	r1, #0
 8009356:	50d1      	str	r1, [r2, r3]
	gsmInfo.FTP_Save_Addr = eepromOrigin + 1000;
 8009358:	4a3a      	ldr	r2, [pc, #232]	; (8009444 <GSM_Init+0x1c8>)
 800935a:	23ba      	movs	r3, #186	; 0xba
 800935c:	005b      	lsls	r3, r3, #1
 800935e:	4946      	ldr	r1, [pc, #280]	; (8009478 <GSM_Init+0x1fc>)
 8009360:	50d1      	str	r1, [r2, r3]
	gsmInfo.FTP_Size = 0;
 8009362:	4a38      	ldr	r2, [pc, #224]	; (8009444 <GSM_Init+0x1c8>)
 8009364:	23bc      	movs	r3, #188	; 0xbc
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	2100      	movs	r1, #0
 800936a:	50d1      	str	r1, [r2, r3]
	gsmInfo.MQTT = 1;
 800936c:	4a35      	ldr	r2, [pc, #212]	; (8009444 <GSM_Init+0x1c8>)
 800936e:	23be      	movs	r3, #190	; 0xbe
 8009370:	005b      	lsls	r3, r3, #1
 8009372:	2101      	movs	r1, #1
 8009374:	50d1      	str	r1, [r2, r3]
	gsmTimer = 0;
 8009376:	4b41      	ldr	r3, [pc, #260]	; (800947c <GSM_Init+0x200>)
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]
	ftpseek = 0;
 800937c:	4b40      	ldr	r3, [pc, #256]	; (8009480 <GSM_Init+0x204>)
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
	myLongStr(ftpseek,temp1,10,10);
 8009382:	4b3f      	ldr	r3, [pc, #252]	; (8009480 <GSM_Init+0x204>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	0018      	movs	r0, r3
 8009388:	4937      	ldr	r1, [pc, #220]	; (8009468 <GSM_Init+0x1ec>)
 800938a:	230a      	movs	r3, #10
 800938c:	220a      	movs	r2, #10
 800938e:	f004 f853 	bl	800d438 <myLongStr>
	strcpy(temp,"FTP seek init");
 8009392:	4a3c      	ldr	r2, [pc, #240]	; (8009484 <GSM_Init+0x208>)
 8009394:	4b3c      	ldr	r3, [pc, #240]	; (8009488 <GSM_Init+0x20c>)
 8009396:	0010      	movs	r0, r2
 8009398:	0019      	movs	r1, r3
 800939a:	230e      	movs	r3, #14
 800939c:	001a      	movs	r2, r3
 800939e:	f009 f8d5 	bl	801254c <memcpy>
	strcat(temp,temp1);
 80093a2:	4a31      	ldr	r2, [pc, #196]	; (8009468 <GSM_Init+0x1ec>)
 80093a4:	4b37      	ldr	r3, [pc, #220]	; (8009484 <GSM_Init+0x208>)
 80093a6:	0011      	movs	r1, r2
 80093a8:	0018      	movs	r0, r3
 80093aa:	f009 f901 	bl	80125b0 <strcat>
	strcat(temp,"\r\n");
 80093ae:	4b35      	ldr	r3, [pc, #212]	; (8009484 <GSM_Init+0x208>)
 80093b0:	0018      	movs	r0, r3
 80093b2:	f7ff feb3 	bl	800911c <strlen>
 80093b6:	0003      	movs	r3, r0
 80093b8:	001a      	movs	r2, r3
 80093ba:	4b32      	ldr	r3, [pc, #200]	; (8009484 <GSM_Init+0x208>)
 80093bc:	18d2      	adds	r2, r2, r3
 80093be:	4b33      	ldr	r3, [pc, #204]	; (800948c <GSM_Init+0x210>)
 80093c0:	0010      	movs	r0, r2
 80093c2:	0019      	movs	r1, r3
 80093c4:	2303      	movs	r3, #3
 80093c6:	001a      	movs	r2, r3
 80093c8:	f009 f8c0 	bl	801254c <memcpy>
	Debug_Send(temp);
 80093cc:	4b2d      	ldr	r3, [pc, #180]	; (8009484 <GSM_Init+0x208>)
 80093ce:	0018      	movs	r0, r3
 80093d0:	f001 f8d4 	bl	800a57c <Debug_Send>
	strcpy(temp,"M95 address");
 80093d4:	4a2b      	ldr	r2, [pc, #172]	; (8009484 <GSM_Init+0x208>)
 80093d6:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <GSM_Init+0x214>)
 80093d8:	0010      	movs	r0, r2
 80093da:	0019      	movs	r1, r3
 80093dc:	230c      	movs	r3, #12
 80093de:	001a      	movs	r2, r3
 80093e0:	f009 f8b4 	bl	801254c <memcpy>
	myLongStr(gsmInfo.FTP_Save_Addr,temp1,10,10);
 80093e4:	4a17      	ldr	r2, [pc, #92]	; (8009444 <GSM_Init+0x1c8>)
 80093e6:	23ba      	movs	r3, #186	; 0xba
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	58d0      	ldr	r0, [r2, r3]
 80093ec:	491e      	ldr	r1, [pc, #120]	; (8009468 <GSM_Init+0x1ec>)
 80093ee:	230a      	movs	r3, #10
 80093f0:	220a      	movs	r2, #10
 80093f2:	f004 f821 	bl	800d438 <myLongStr>
	strcat(temp,temp1);
 80093f6:	4a1c      	ldr	r2, [pc, #112]	; (8009468 <GSM_Init+0x1ec>)
 80093f8:	4b22      	ldr	r3, [pc, #136]	; (8009484 <GSM_Init+0x208>)
 80093fa:	0011      	movs	r1, r2
 80093fc:	0018      	movs	r0, r3
 80093fe:	f009 f8d7 	bl	80125b0 <strcat>
	strcat(temp,"\r\n");
 8009402:	4b20      	ldr	r3, [pc, #128]	; (8009484 <GSM_Init+0x208>)
 8009404:	0018      	movs	r0, r3
 8009406:	f7ff fe89 	bl	800911c <strlen>
 800940a:	0003      	movs	r3, r0
 800940c:	001a      	movs	r2, r3
 800940e:	4b1d      	ldr	r3, [pc, #116]	; (8009484 <GSM_Init+0x208>)
 8009410:	18d2      	adds	r2, r2, r3
 8009412:	4b1e      	ldr	r3, [pc, #120]	; (800948c <GSM_Init+0x210>)
 8009414:	0010      	movs	r0, r2
 8009416:	0019      	movs	r1, r3
 8009418:	2303      	movs	r3, #3
 800941a:	001a      	movs	r2, r3
 800941c:	f009 f896 	bl	801254c <memcpy>
	Debug_Send(temp);
 8009420:	4b18      	ldr	r3, [pc, #96]	; (8009484 <GSM_Init+0x208>)
 8009422:	0018      	movs	r0, r3
 8009424:	f001 f8aa 	bl	800a57c <Debug_Send>
	gsmInfo.MQTT_Subscribe = 0;
 8009428:	4a06      	ldr	r2, [pc, #24]	; (8009444 <GSM_Init+0x1c8>)
 800942a:	23c4      	movs	r3, #196	; 0xc4
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	2100      	movs	r1, #0
 8009430:	50d1      	str	r1, [r2, r3]
	mqttState = Connect;
 8009432:	4b18      	ldr	r3, [pc, #96]	; (8009494 <GSM_Init+0x218>)
 8009434:	2201      	movs	r2, #1
 8009436:	701a      	strb	r2, [r3, #0]
}
 8009438:	46c0      	nop			; (mov r8, r8)
 800943a:	46bd      	mov	sp, r7
 800943c:	bdb0      	pop	{r4, r5, r7, pc}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	08012f68 	.word	0x08012f68
 8009444:	20001628 	.word	0x20001628
 8009448:	20001646 	.word	0x20001646
 800944c:	08012f74 	.word	0x08012f74
 8009450:	08012f7c 	.word	0x08012f7c
 8009454:	08012f84 	.word	0x08012f84
 8009458:	08012f8c 	.word	0x08012f8c
 800945c:	08012fa4 	.word	0x08012fa4
 8009460:	20000178 	.word	0x20000178
 8009464:	20000164 	.word	0x20000164
 8009468:	20001ea8 	.word	0x20001ea8
 800946c:	2000227c 	.word	0x2000227c
 8009470:	48000400 	.word	0x48000400
 8009474:	2000112c 	.word	0x2000112c
 8009478:	0000ee48 	.word	0x0000ee48
 800947c:	200014f4 	.word	0x200014f4
 8009480:	200000c4 	.word	0x200000c4
 8009484:	20001e24 	.word	0x20001e24
 8009488:	08012fb4 	.word	0x08012fb4
 800948c:	08012fc4 	.word	0x08012fc4
 8009490:	08012fc8 	.word	0x08012fc8
 8009494:	200000d0 	.word	0x200000d0

08009498 <GSM_Service>:

void GSM_Service(){
 8009498:	b590      	push	{r4, r7, lr}
 800949a:	b0c7      	sub	sp, #284	; 0x11c
 800949c:	af00      	add	r7, sp, #0
	//Debug_Send("GSM\r\n");
	char temp[60];
	int tempI;

	//voltage = getVolt();
	myLongStr(voltage,temp1,10,10);
 800949e:	4bf0      	ldr	r3, [pc, #960]	; (8009860 <GSM_Service+0x3c8>)
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	49f0      	ldr	r1, [pc, #960]	; (8009864 <GSM_Service+0x3cc>)
 80094a4:	230a      	movs	r3, #10
 80094a6:	220a      	movs	r2, #10
 80094a8:	f003 ffc6 	bl	800d438 <myLongStr>
	strcat(temp,",");
 80094ac:	24dc      	movs	r4, #220	; 0xdc
 80094ae:	193b      	adds	r3, r7, r4
 80094b0:	0018      	movs	r0, r3
 80094b2:	f7ff fe33 	bl	800911c <strlen>
 80094b6:	0003      	movs	r3, r0
 80094b8:	001a      	movs	r2, r3
 80094ba:	193b      	adds	r3, r7, r4
 80094bc:	189a      	adds	r2, r3, r2
 80094be:	4bea      	ldr	r3, [pc, #936]	; (8009868 <GSM_Service+0x3d0>)
 80094c0:	0010      	movs	r0, r2
 80094c2:	0019      	movs	r1, r3
 80094c4:	2302      	movs	r3, #2
 80094c6:	001a      	movs	r2, r3
 80094c8:	f009 f840 	bl	801254c <memcpy>
	strcat(temp,temp1);
 80094cc:	4ae5      	ldr	r2, [pc, #916]	; (8009864 <GSM_Service+0x3cc>)
 80094ce:	193b      	adds	r3, r7, r4
 80094d0:	0011      	movs	r1, r2
 80094d2:	0018      	movs	r0, r3
 80094d4:	f009 f86c 	bl	80125b0 <strcat>
	//LineSelect(0x80);
	//LCD_Print(temp);

	//tempI = getVolt();
	//tempI = getCurrent();
	switch(gsmState){
 80094d8:	4be4      	ldr	r3, [pc, #912]	; (800986c <GSM_Service+0x3d4>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b37      	cmp	r3, #55	; 0x37
 80094de:	d901      	bls.n	80094e4 <GSM_Service+0x4c>
 80094e0:	f000 fec1 	bl	800a266 <GSM_Service+0xdce>
 80094e4:	009a      	lsls	r2, r3, #2
 80094e6:	4be2      	ldr	r3, [pc, #904]	; (8009870 <GSM_Service+0x3d8>)
 80094e8:	18d3      	adds	r3, r2, r3
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	469f      	mov	pc, r3
	case GSM_Off:
		//Debug_Send("GSM off1\r\n");
		//gsmState = FTP_Close;			//check jumping to bootloader
		if (onTimer < 3){
 80094ee:	4be1      	ldr	r3, [pc, #900]	; (8009874 <GSM_Service+0x3dc>)
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d80e      	bhi.n	8009514 <GSM_Service+0x7c>
			HAL_GPIO_WritePin(GSM_Enable_GPIO_Port, GSM_Enable_Pin, GPIO_PIN_RESET);
 80094f6:	2380      	movs	r3, #128	; 0x80
 80094f8:	021b      	lsls	r3, r3, #8
 80094fa:	48df      	ldr	r0, [pc, #892]	; (8009878 <GSM_Service+0x3e0>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	0019      	movs	r1, r3
 8009500:	f004 fe26 	bl	800e150 <HAL_GPIO_WritePin>
			onTimer++;
 8009504:	4bdb      	ldr	r3, [pc, #876]	; (8009874 <GSM_Service+0x3dc>)
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	3301      	adds	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	4bd9      	ldr	r3, [pc, #868]	; (8009874 <GSM_Service+0x3dc>)
 800950e:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_RESET);
			gsmState = GSM_On;
			//gsmState = AutoBaud;
		}

		break;
 8009510:	f000 fef1 	bl	800a2f6 <GSM_Service+0xe5e>
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_RESET);
 8009514:	4bd9      	ldr	r3, [pc, #868]	; (800987c <GSM_Service+0x3e4>)
 8009516:	2200      	movs	r2, #0
 8009518:	2104      	movs	r1, #4
 800951a:	0018      	movs	r0, r3
 800951c:	f004 fe18 	bl	800e150 <HAL_GPIO_WritePin>
			gsmState = GSM_On;
 8009520:	4bd2      	ldr	r3, [pc, #840]	; (800986c <GSM_Service+0x3d4>)
 8009522:	2202      	movs	r2, #2
 8009524:	701a      	strb	r2, [r3, #0]
		break;
 8009526:	f000 fee6 	bl	800a2f6 <GSM_Service+0xe5e>
	case GSM_On:
		Debug_Send("GSM on\r\n");
 800952a:	4bd5      	ldr	r3, [pc, #852]	; (8009880 <GSM_Service+0x3e8>)
 800952c:	0018      	movs	r0, r3
 800952e:	f001 f825 	bl	800a57c <Debug_Send>
		HAL_GPIO_WritePin(GSM_Enable_GPIO_Port, GSM_Enable_Pin, GPIO_PIN_SET);
 8009532:	2380      	movs	r3, #128	; 0x80
 8009534:	021b      	lsls	r3, r3, #8
 8009536:	48d0      	ldr	r0, [pc, #832]	; (8009878 <GSM_Service+0x3e0>)
 8009538:	2201      	movs	r2, #1
 800953a:	0019      	movs	r1, r3
 800953c:	f004 fe08 	bl	800e150 <HAL_GPIO_WritePin>
		//HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
		onTimer = 0;
 8009540:	4bcc      	ldr	r3, [pc, #816]	; (8009874 <GSM_Service+0x3dc>)
 8009542:	2200      	movs	r2, #0
 8009544:	801a      	strh	r2, [r3, #0]
		gsmState = GSM_Enable;
 8009546:	4bc9      	ldr	r3, [pc, #804]	; (800986c <GSM_Service+0x3d4>)
 8009548:	2203      	movs	r2, #3
 800954a:	701a      	strb	r2, [r3, #0]
		break;
 800954c:	f000 fed3 	bl	800a2f6 <GSM_Service+0xe5e>
	case GSM_Enable:
		Debug_Send("GSM enable\r\n");
 8009550:	4bcc      	ldr	r3, [pc, #816]	; (8009884 <GSM_Service+0x3ec>)
 8009552:	0018      	movs	r0, r3
 8009554:	f001 f812 	bl	800a57c <Debug_Send>
		if (onTimer < 4){
 8009558:	4bc6      	ldr	r3, [pc, #792]	; (8009874 <GSM_Service+0x3dc>)
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	2b03      	cmp	r3, #3
 800955e:	d811      	bhi.n	8009584 <GSM_Service+0xec>
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_SET);
 8009560:	4bc6      	ldr	r3, [pc, #792]	; (800987c <GSM_Service+0x3e4>)
 8009562:	2201      	movs	r2, #1
 8009564:	2104      	movs	r1, #4
 8009566:	0018      	movs	r0, r3
 8009568:	f004 fdf2 	bl	800e150 <HAL_GPIO_WritePin>
			onTimer++;
 800956c:	4bc1      	ldr	r3, [pc, #772]	; (8009874 <GSM_Service+0x3dc>)
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	3301      	adds	r3, #1
 8009572:	b29a      	uxth	r2, r3
 8009574:	4bbf      	ldr	r3, [pc, #764]	; (8009874 <GSM_Service+0x3dc>)
 8009576:	801a      	strh	r2, [r3, #0]
			Debug_Send("GSM on set\r\n");
 8009578:	4bc3      	ldr	r3, [pc, #780]	; (8009888 <GSM_Service+0x3f0>)
 800957a:	0018      	movs	r0, r3
 800957c:	f000 fffe 	bl	800a57c <Debug_Send>
			gsmState = Search;
			//onTimer = 0;
			Debug_Send("GSM reset\r\n");
			//gsmState = AutoBaud;
		}
		break;
 8009580:	f000 feb9 	bl	800a2f6 <GSM_Service+0xe5e>
			HAL_GPIO_WritePin(GSM_On_GPIO_Port, GSM_On_Pin, GPIO_PIN_RESET);
 8009584:	4bbd      	ldr	r3, [pc, #756]	; (800987c <GSM_Service+0x3e4>)
 8009586:	2200      	movs	r2, #0
 8009588:	2104      	movs	r1, #4
 800958a:	0018      	movs	r0, r3
 800958c:	f004 fde0 	bl	800e150 <HAL_GPIO_WritePin>
			gsmState = Search;
 8009590:	4bb6      	ldr	r3, [pc, #728]	; (800986c <GSM_Service+0x3d4>)
 8009592:	2204      	movs	r2, #4
 8009594:	701a      	strb	r2, [r3, #0]
			Debug_Send("GSM reset\r\n");
 8009596:	4bbd      	ldr	r3, [pc, #756]	; (800988c <GSM_Service+0x3f4>)
 8009598:	0018      	movs	r0, r3
 800959a:	f000 ffef 	bl	800a57c <Debug_Send>
		break;
 800959e:	f000 feaa 	bl	800a2f6 <GSM_Service+0xe5e>
	case Search:
		//smsFlags.send = 1;	//test sms function
		//Debug_Send("Search\r\n");
		//GSM_Send("AT+CREG?\r\n");
		GSM_Send("AT+CREG=1\r");
 80095a2:	4bbb      	ldr	r3, [pc, #748]	; (8009890 <GSM_Service+0x3f8>)
 80095a4:	0018      	movs	r0, r3
 80095a6:	f000 ff97 	bl	800a4d8 <GSM_Send>
		gsmState = GPRS_Search;
 80095aa:	4bb0      	ldr	r3, [pc, #704]	; (800986c <GSM_Service+0x3d4>)
 80095ac:	2205      	movs	r2, #5
 80095ae:	701a      	strb	r2, [r3, #0]
		break;
 80095b0:	f000 fea1 	bl	800a2f6 <GSM_Service+0xe5e>
	case GPRS_Search:
		GSM_Send("AT+CGREG=1\r");
 80095b4:	4bb7      	ldr	r3, [pc, #732]	; (8009894 <GSM_Service+0x3fc>)
 80095b6:	0018      	movs	r0, r3
 80095b8:	f000 ff8e 	bl	800a4d8 <GSM_Send>
		gsmState = 0;
 80095bc:	4bab      	ldr	r3, [pc, #684]	; (800986c <GSM_Service+0x3d4>)
 80095be:	2200      	movs	r2, #0
 80095c0:	701a      	strb	r2, [r3, #0]
		break;
 80095c2:	f000 fe98 	bl	800a2f6 <GSM_Service+0xe5e>
	case SMSconfig:
		Debug_Send("testing\r\n");
 80095c6:	4bb4      	ldr	r3, [pc, #720]	; (8009898 <GSM_Service+0x400>)
 80095c8:	0018      	movs	r0, r3
 80095ca:	f000 ffd7 	bl	800a57c <Debug_Send>
		GSM_Send("AT+CMGF=1\r\n");
 80095ce:	4bb3      	ldr	r3, [pc, #716]	; (800989c <GSM_Service+0x404>)
 80095d0:	0018      	movs	r0, r3
 80095d2:	f000 ff81 	bl	800a4d8 <GSM_Send>
		smsFlags.config = 1;
 80095d6:	4bb2      	ldr	r3, [pc, #712]	; (80098a0 <GSM_Service+0x408>)
 80095d8:	2201      	movs	r2, #1
 80095da:	605a      	str	r2, [r3, #4]
		smsFlags.signal = 1;
 80095dc:	4bb0      	ldr	r3, [pc, #704]	; (80098a0 <GSM_Service+0x408>)
 80095de:	2201      	movs	r2, #1
 80095e0:	601a      	str	r2, [r3, #0]
		//sendData(gsmInfo.vth,UART0);
		//gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
		//gsmInfo.vth_l *= 100;

		//gsmState = Imei;
		gsmState = Operator;
 80095e2:	4ba2      	ldr	r3, [pc, #648]	; (800986c <GSM_Service+0x3d4>)
 80095e4:	2207      	movs	r2, #7
 80095e6:	701a      	strb	r2, [r3, #0]
		break;
 80095e8:	f000 fe85 	bl	800a2f6 <GSM_Service+0xe5e>
	case Operator:
		GSM_Send("AT+COPS?\r");
 80095ec:	4bad      	ldr	r3, [pc, #692]	; (80098a4 <GSM_Service+0x40c>)
 80095ee:	0018      	movs	r0, r3
 80095f0:	f000 ff72 	bl	800a4d8 <GSM_Send>
		gsmState = Imei;
 80095f4:	4b9d      	ldr	r3, [pc, #628]	; (800986c <GSM_Service+0x3d4>)
 80095f6:	2208      	movs	r2, #8
 80095f8:	701a      	strb	r2, [r3, #0]
		//gsmState = GPRS_Send;
		//gsmState = SMS_Send;
		break;
 80095fa:	f000 fe7c 	bl	800a2f6 <GSM_Service+0xe5e>
	case Imei:
		GSM_Send("AT+CGSN\r\n");
 80095fe:	4baa      	ldr	r3, [pc, #680]	; (80098a8 <GSM_Service+0x410>)
 8009600:	0018      	movs	r0, r3
 8009602:	f000 ff69 	bl	800a4d8 <GSM_Send>
		//GSM_Send("AT+CGSN?\r\n");
		gsmInfo.imeiFlag = 5;
 8009606:	4aa9      	ldr	r2, [pc, #676]	; (80098ac <GSM_Service+0x414>)
 8009608:	23a8      	movs	r3, #168	; 0xa8
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	2105      	movs	r1, #5
 800960e:	50d1      	str	r1, [r2, r3]
		gsmState = Ccid;
 8009610:	4b96      	ldr	r3, [pc, #600]	; (800986c <GSM_Service+0x3d4>)
 8009612:	2209      	movs	r2, #9
 8009614:	701a      	strb	r2, [r3, #0]

		//gsmState = GPRS_Send;
		gsmState = GprsContext;
 8009616:	4b95      	ldr	r3, [pc, #596]	; (800986c <GSM_Service+0x3d4>)
 8009618:	220a      	movs	r2, #10
 800961a:	701a      	strb	r2, [r3, #0]
		//gsmState = 0;
		break;
 800961c:	f000 fe6b 	bl	800a2f6 <GSM_Service+0xe5e>
	case Ccid:
		GSM_Send("AT+CCID\r\n");
 8009620:	4ba3      	ldr	r3, [pc, #652]	; (80098b0 <GSM_Service+0x418>)
 8009622:	0018      	movs	r0, r3
 8009624:	f000 ff58 	bl	800a4d8 <GSM_Send>
		gsmState = GprsContext;
 8009628:	4b90      	ldr	r3, [pc, #576]	; (800986c <GSM_Service+0x3d4>)
 800962a:	220a      	movs	r2, #10
 800962c:	701a      	strb	r2, [r3, #0]
		gsmState = GPRS_Attach;
 800962e:	4b8f      	ldr	r3, [pc, #572]	; (800986c <GSM_Service+0x3d4>)
 8009630:	2211      	movs	r2, #17
 8009632:	701a      	strb	r2, [r3, #0]
		break;
 8009634:	f000 fe5f 	bl	800a2f6 <GSM_Service+0xe5e>
	case GprsContext:
		//GSM_Send("AT+CGDCONT=1,\"IP\",\"INTERNET\"\r\n");
		GSM_Send("AT+CGDCONT=1,\"ip\",\"internet\"\r\n");
 8009638:	4b9e      	ldr	r3, [pc, #632]	; (80098b4 <GSM_Service+0x41c>)
 800963a:	0018      	movs	r0, r3
 800963c:	f000 ff4c 	bl	800a4d8 <GSM_Send>
		//strcpy(gsmInfo.url,"www.google.com");
		//strcpy(gsmInfo.urlport,"80");
		gsmState = DataMode;
 8009640:	4b8a      	ldr	r3, [pc, #552]	; (800986c <GSM_Service+0x3d4>)
 8009642:	2220      	movs	r2, #32
 8009644:	701a      	strb	r2, [r3, #0]

		//sendSMS("0720631005", smsInfo.build);
		//gsmState = CallerID;
		//gsmState = USSD_Config;
		//gsmState = 0;
		gsmState = FTP_User;
 8009646:	4b89      	ldr	r3, [pc, #548]	; (800986c <GSM_Service+0x3d4>)
 8009648:	2222      	movs	r2, #34	; 0x22
 800964a:	701a      	strb	r2, [r3, #0]
		break;
 800964c:	f000 fe53 	bl	800a2f6 <GSM_Service+0xe5e>
	case DataMode:
		Debug_Send("Check FTP\r\n");
 8009650:	4b99      	ldr	r3, [pc, #612]	; (80098b8 <GSM_Service+0x420>)
 8009652:	0018      	movs	r0, r3
 8009654:	f000 ff92 	bl	800a57c <Debug_Send>
		//GSM_Send("AT+QIMODE=0\r\n");
		//GSM_Send("AT+QIMODE?\r\n");
		//Debug_Send("Build SMS\r\n");
		BuildPower();
 8009658:	f002 f81a 	bl	800b690 <BuildPower>
		//sendSMS("0720631005", smsInfo.build);
		//GSM_Send("AT+CGDCONT=1,\"ip\",\"internet\"\r\n");
		GSM_Send("AT+QFTPOPEN=?\r\n");
 800965c:	4b97      	ldr	r3, [pc, #604]	; (80098bc <GSM_Service+0x424>)
 800965e:	0018      	movs	r0, r3
 8009660:	f000 ff3a 	bl	800a4d8 <GSM_Send>
		gsmState = FTP_Open;
 8009664:	4b81      	ldr	r3, [pc, #516]	; (800986c <GSM_Service+0x3d4>)
 8009666:	2224      	movs	r2, #36	; 0x24
 8009668:	701a      	strb	r2, [r3, #0]

		gsmState = 0;
 800966a:	4b80      	ldr	r3, [pc, #512]	; (800986c <GSM_Service+0x3d4>)
 800966c:	2200      	movs	r2, #0
 800966e:	701a      	strb	r2, [r3, #0]
		gsmState = FTP_User;
 8009670:	4b7e      	ldr	r3, [pc, #504]	; (800986c <GSM_Service+0x3d4>)
 8009672:	2222      	movs	r2, #34	; 0x22
 8009674:	701a      	strb	r2, [r3, #0]
		break;
 8009676:	f000 fe3e 	bl	800a2f6 <GSM_Service+0xe5e>
	case CallerID:
		GSM_Send("AT+CLIP=1\r\n");
 800967a:	4b91      	ldr	r3, [pc, #580]	; (80098c0 <GSM_Service+0x428>)
 800967c:	0018      	movs	r0, r3
 800967e:	f000 ff2b 	bl	800a4d8 <GSM_Send>
		//+CLIP: "+27733507155",145,,,"",0
		gsmState = USSD;		//test
 8009682:	4b7a      	ldr	r3, [pc, #488]	; (800986c <GSM_Service+0x3d4>)
 8009684:	220c      	movs	r2, #12
 8009686:	701a      	strb	r2, [r3, #0]
		gsmState = SMS_Check;
 8009688:	4b78      	ldr	r3, [pc, #480]	; (800986c <GSM_Service+0x3d4>)
 800968a:	220e      	movs	r2, #14
 800968c:	701a      	strb	r2, [r3, #0]
		break;
 800968e:	f000 fe32 	bl	800a2f6 <GSM_Service+0xe5e>
	case USSD:
		if(strncmp(gsmInfo.network,"VodaCom",7)==0)GSM_Send("AT+CUSD=1,\"*100#\"\r\n");
 8009692:	498c      	ldr	r1, [pc, #560]	; (80098c4 <GSM_Service+0x42c>)
 8009694:	4b8c      	ldr	r3, [pc, #560]	; (80098c8 <GSM_Service+0x430>)
 8009696:	2207      	movs	r2, #7
 8009698:	0018      	movs	r0, r3
 800969a:	f008 ff9e 	bl	80125da <strncmp>
 800969e:	1e03      	subs	r3, r0, #0
 80096a0:	d104      	bne.n	80096ac <GSM_Service+0x214>
 80096a2:	4b8a      	ldr	r3, [pc, #552]	; (80098cc <GSM_Service+0x434>)
 80096a4:	0018      	movs	r0, r3
 80096a6:	f000 ff17 	bl	800a4d8 <GSM_Send>
 80096aa:	e00b      	b.n	80096c4 <GSM_Service+0x22c>
		else if(strncmp(gsmInfo.network,"MTN",3)==0)GSM_Send("AT+CUSD=1,\"*141#\"\r\n");
 80096ac:	4988      	ldr	r1, [pc, #544]	; (80098d0 <GSM_Service+0x438>)
 80096ae:	4b86      	ldr	r3, [pc, #536]	; (80098c8 <GSM_Service+0x430>)
 80096b0:	2203      	movs	r2, #3
 80096b2:	0018      	movs	r0, r3
 80096b4:	f008 ff91 	bl	80125da <strncmp>
 80096b8:	1e03      	subs	r3, r0, #0
 80096ba:	d103      	bne.n	80096c4 <GSM_Service+0x22c>
 80096bc:	4b85      	ldr	r3, [pc, #532]	; (80098d4 <GSM_Service+0x43c>)
 80096be:	0018      	movs	r0, r3
 80096c0:	f000 ff0a 	bl	800a4d8 <GSM_Send>
		//tempState = USSD;
		gsmInfo.balanceFlag = 0;
 80096c4:	4a79      	ldr	r2, [pc, #484]	; (80098ac <GSM_Service+0x414>)
 80096c6:	239a      	movs	r3, #154	; 0x9a
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	2100      	movs	r1, #0
 80096cc:	50d1      	str	r1, [r2, r3]
		gsmInfo.balancePending = 1;
 80096ce:	4a77      	ldr	r2, [pc, #476]	; (80098ac <GSM_Service+0x414>)
 80096d0:	239c      	movs	r3, #156	; 0x9c
 80096d2:	005b      	lsls	r3, r3, #1
 80096d4:	2101      	movs	r1, #1
 80096d6:	50d1      	str	r1, [r2, r3]
		gsmState = 0;
 80096d8:	4b64      	ldr	r3, [pc, #400]	; (800986c <GSM_Service+0x3d4>)
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]

		break;
 80096de:	f000 fe0a 	bl	800a2f6 <GSM_Service+0xe5e>

	case SMS_Check:
		GSM_Send("AT+CMGL=\"ALL\"\r\n");
 80096e2:	4b7d      	ldr	r3, [pc, #500]	; (80098d8 <GSM_Service+0x440>)
 80096e4:	0018      	movs	r0, r3
 80096e6:	f000 fef7 	bl	800a4d8 <GSM_Send>
		smsInfo.count = 0;
 80096ea:	4b7c      	ldr	r3, [pc, #496]	; (80098dc <GSM_Service+0x444>)
 80096ec:	22f8      	movs	r2, #248	; 0xf8
 80096ee:	2100      	movs	r1, #0
 80096f0:	5099      	str	r1, [r3, r2]
		//if (gsmInfo.registered == 1) sendData("Unit registered!!!\r\n",UART0);
		gsmState = Signal;		//check signal
 80096f2:	4b5e      	ldr	r3, [pc, #376]	; (800986c <GSM_Service+0x3d4>)
 80096f4:	2218      	movs	r2, #24
 80096f6:	701a      	strb	r2, [r3, #0]
		break;
 80096f8:	f000 fdfd 	bl	800a2f6 <GSM_Service+0xe5e>
	case Signal:
		GSM_Send("AT+CSQ\r\n");
 80096fc:	4b78      	ldr	r3, [pc, #480]	; (80098e0 <GSM_Service+0x448>)
 80096fe:	0018      	movs	r0, r3
 8009700:	f000 feea 	bl	800a4d8 <GSM_Send>
		//else if (smsFlags.gprsActive == 1)gsmState = SocketOpen;
		//else if (smsFlags.gprsPending == 1) gsmState = GPRS_Off;		//switch off gsm if previous socket dial failed
		//else if (gsmInfo.gprsDataPending == 1) gsmInfo.gprsDataPending = 0;
		//else if (gsmInfo.gprsDataPending == 0) gsmState = SocketOpen;
		//else if (gsmInfo.registered == 1) gsmState = SocketOpen;
		/*else */gsmState = 0;
 8009704:	4b59      	ldr	r3, [pc, #356]	; (800986c <GSM_Service+0x3d4>)
 8009706:	2200      	movs	r2, #0
 8009708:	701a      	strb	r2, [r3, #0]
		if (gsmInfo.balanceFlag == 1) gsmState = USSD;
 800970a:	4a68      	ldr	r2, [pc, #416]	; (80098ac <GSM_Service+0x414>)
 800970c:	239a      	movs	r3, #154	; 0x9a
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	58d3      	ldr	r3, [r2, r3]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d001      	beq.n	800971a <GSM_Service+0x282>
 8009716:	f000 fded 	bl	800a2f4 <GSM_Service+0xe5c>
 800971a:	4b54      	ldr	r3, [pc, #336]	; (800986c <GSM_Service+0x3d4>)
 800971c:	220c      	movs	r2, #12
 800971e:	701a      	strb	r2, [r3, #0]

		//buildInfo();
		break;
 8009720:	f000 fde8 	bl	800a2f4 <GSM_Service+0xe5c>
	case SMS_Send:
		smsFlags.send = 1;
 8009724:	4b5e      	ldr	r3, [pc, #376]	; (80098a0 <GSM_Service+0x408>)
 8009726:	2201      	movs	r2, #1
 8009728:	609a      	str	r2, [r3, #8]
		Debug_Send("Send SMS\r\n");
 800972a:	4b6e      	ldr	r3, [pc, #440]	; (80098e4 <GSM_Service+0x44c>)
 800972c:	0018      	movs	r0, r3
 800972e:	f000 ff25 	bl	800a57c <Debug_Send>
		if (CheckUser() == 0){ //if there is no user registered
 8009732:	f001 fe53 	bl	800b3dc <CheckUser>
 8009736:	1e03      	subs	r3, r0, #0
 8009738:	d108      	bne.n	800974c <GSM_Service+0x2b4>
			strcpy(smsInfo.recMSISDN, "0720631005");		//return all sms to admin
 800973a:	4b6b      	ldr	r3, [pc, #428]	; (80098e8 <GSM_Service+0x450>)
 800973c:	4a6b      	ldr	r2, [pc, #428]	; (80098ec <GSM_Service+0x454>)
 800973e:	ca03      	ldmia	r2!, {r0, r1}
 8009740:	c303      	stmia	r3!, {r0, r1}
 8009742:	8811      	ldrh	r1, [r2, #0]
 8009744:	8019      	strh	r1, [r3, #0]
 8009746:	7892      	ldrb	r2, [r2, #2]
 8009748:	709a      	strb	r2, [r3, #2]
 800974a:	e005      	b.n	8009758 <GSM_Service+0x2c0>
		}
		else strcpy(smsInfo.recMSISDN, gsmInfo.msisdn);
 800974c:	4a68      	ldr	r2, [pc, #416]	; (80098f0 <GSM_Service+0x458>)
 800974e:	4b66      	ldr	r3, [pc, #408]	; (80098e8 <GSM_Service+0x450>)
 8009750:	0011      	movs	r1, r2
 8009752:	0018      	movs	r0, r3
 8009754:	f008 ff39 	bl	80125ca <strcpy>
		strcpy(smsInfo.recMSISDN, "0720631005");	//debug
 8009758:	4b63      	ldr	r3, [pc, #396]	; (80098e8 <GSM_Service+0x450>)
 800975a:	4a64      	ldr	r2, [pc, #400]	; (80098ec <GSM_Service+0x454>)
 800975c:	ca03      	ldmia	r2!, {r0, r1}
 800975e:	c303      	stmia	r3!, {r0, r1}
 8009760:	8811      	ldrh	r1, [r2, #0]
 8009762:	8019      	strh	r1, [r3, #0]
 8009764:	7892      	ldrb	r2, [r2, #2]
 8009766:	709a      	strb	r2, [r3, #2]
		Debug_Send("MSISDN:");
 8009768:	4b62      	ldr	r3, [pc, #392]	; (80098f4 <GSM_Service+0x45c>)
 800976a:	0018      	movs	r0, r3
 800976c:	f000 ff06 	bl	800a57c <Debug_Send>
		Debug_Send(smsInfo.recMSISDN);
 8009770:	4b5d      	ldr	r3, [pc, #372]	; (80098e8 <GSM_Service+0x450>)
 8009772:	0018      	movs	r0, r3
 8009774:	f000 ff02 	bl	800a57c <Debug_Send>
		Debug_Send("\r\n");
 8009778:	4b5f      	ldr	r3, [pc, #380]	; (80098f8 <GSM_Service+0x460>)
 800977a:	0018      	movs	r0, r3
 800977c:	f000 fefe 	bl	800a57c <Debug_Send>
		//sendSMS(smsInfo.recMSISDN, smsInfo.build);
		sendSMS("0720631005", smsInfo.build);
 8009780:	4a5e      	ldr	r2, [pc, #376]	; (80098fc <GSM_Service+0x464>)
 8009782:	4b5a      	ldr	r3, [pc, #360]	; (80098ec <GSM_Service+0x454>)
 8009784:	0011      	movs	r1, r2
 8009786:	0018      	movs	r0, r3
 8009788:	f001 fcf0 	bl	800b16c <sendSMS>
		gsmInfo.balanceFlag = 1;
 800978c:	4a47      	ldr	r2, [pc, #284]	; (80098ac <GSM_Service+0x414>)
 800978e:	239a      	movs	r3, #154	; 0x9a
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	2101      	movs	r1, #1
 8009794:	50d1      	str	r1, [r2, r3]
		//sendSMS("0720631005", "TEST");
		gsmState = 0;
 8009796:	4b35      	ldr	r3, [pc, #212]	; (800986c <GSM_Service+0x3d4>)
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
		break;
 800979c:	f000 fdab 	bl	800a2f6 <GSM_Service+0xe5e>
	case SMS_Text:
		//sendData("Insert SMS text\r\n",UART0);
		Debug_Send("SMS\r\n");
 80097a0:	4b57      	ldr	r3, [pc, #348]	; (8009900 <GSM_Service+0x468>)
 80097a2:	0018      	movs	r0, r3
 80097a4:	f000 feea 	bl	800a57c <Debug_Send>
		strcpy(temp,smsInfo.content1);
 80097a8:	4a56      	ldr	r2, [pc, #344]	; (8009904 <GSM_Service+0x46c>)
 80097aa:	24dc      	movs	r4, #220	; 0xdc
 80097ac:	193b      	adds	r3, r7, r4
 80097ae:	0011      	movs	r1, r2
 80097b0:	0018      	movs	r0, r3
 80097b2:	f008 ff0a 	bl	80125ca <strcpy>
		strcat(temp,"\032\r");
 80097b6:	193b      	adds	r3, r7, r4
 80097b8:	0018      	movs	r0, r3
 80097ba:	f7ff fcaf 	bl	800911c <strlen>
 80097be:	0003      	movs	r3, r0
 80097c0:	001a      	movs	r2, r3
 80097c2:	193b      	adds	r3, r7, r4
 80097c4:	189a      	adds	r2, r3, r2
 80097c6:	4b50      	ldr	r3, [pc, #320]	; (8009908 <GSM_Service+0x470>)
 80097c8:	0010      	movs	r0, r2
 80097ca:	0019      	movs	r1, r3
 80097cc:	2303      	movs	r3, #3
 80097ce:	001a      	movs	r2, r3
 80097d0:	f008 febc 	bl	801254c <memcpy>
		GSM_Send(temp);
 80097d4:	193b      	adds	r3, r7, r4
 80097d6:	0018      	movs	r0, r3
 80097d8:	f000 fe7e 	bl	800a4d8 <GSM_Send>
		//GSM_Send(SMScontent);
		//sendByte('1A', UART1);
		//GSM_Send("\032\r");		//1A HEX
		smsFlags.reply = 0;
 80097dc:	4b30      	ldr	r3, [pc, #192]	; (80098a0 <GSM_Service+0x408>)
 80097de:	2200      	movs	r2, #0
 80097e0:	625a      	str	r2, [r3, #36]	; 0x24
		gsmState = 0;
 80097e2:	4b22      	ldr	r3, [pc, #136]	; (800986c <GSM_Service+0x3d4>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	701a      	strb	r2, [r3, #0]
		break;
 80097e8:	f000 fd85 	bl	800a2f6 <GSM_Service+0xe5e>
	case GPRS_Attach:
		GSM_Send("AT+CGATT=1\r\n");
 80097ec:	4b47      	ldr	r3, [pc, #284]	; (800990c <GSM_Service+0x474>)
 80097ee:	0018      	movs	r0, r3
 80097f0:	f000 fe72 	bl	800a4d8 <GSM_Send>
		gsmState = 0;
 80097f4:	4b1d      	ldr	r3, [pc, #116]	; (800986c <GSM_Service+0x3d4>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	701a      	strb	r2, [r3, #0]
		gsmState = GprsContext;
 80097fa:	4b1c      	ldr	r3, [pc, #112]	; (800986c <GSM_Service+0x3d4>)
 80097fc:	220a      	movs	r2, #10
 80097fe:	701a      	strb	r2, [r3, #0]
		break;
 8009800:	f000 fd79 	bl	800a2f6 <GSM_Service+0xe5e>
	case GPRS_On:
		GSM_Send("AT+CGACT=1,1\r\n");
 8009804:	4b42      	ldr	r3, [pc, #264]	; (8009910 <GSM_Service+0x478>)
 8009806:	0018      	movs	r0, r3
 8009808:	f000 fe66 	bl	800a4d8 <GSM_Send>
		smsFlags.gprsPending = 1;
 800980c:	4b24      	ldr	r3, [pc, #144]	; (80098a0 <GSM_Service+0x408>)
 800980e:	2201      	movs	r2, #1
 8009810:	619a      	str	r2, [r3, #24]
		gsmInfo.socket = 0;
 8009812:	4b26      	ldr	r3, [pc, #152]	; (80098ac <GSM_Service+0x414>)
 8009814:	2200      	movs	r2, #0
 8009816:	679a      	str	r2, [r3, #120]	; 0x78
		//gsmState = 0;
		//gsmState = 10;
		gsmState = GPRS_IP;
 8009818:	4b14      	ldr	r3, [pc, #80]	; (800986c <GSM_Service+0x3d4>)
 800981a:	2213      	movs	r2, #19
 800981c:	701a      	strb	r2, [r3, #0]
		break;
 800981e:	f000 fd6a 	bl	800a2f6 <GSM_Service+0xe5e>
	case GPRS_IP:
		GSM_Send("AT+CGPADDR=1\r\n");
 8009822:	4b3c      	ldr	r3, [pc, #240]	; (8009914 <GSM_Service+0x47c>)
 8009824:	0018      	movs	r0, r3
 8009826:	f000 fe57 	bl	800a4d8 <GSM_Send>
		gsmState = 0;
 800982a:	4b10      	ldr	r3, [pc, #64]	; (800986c <GSM_Service+0x3d4>)
 800982c:	2200      	movs	r2, #0
 800982e:	701a      	strb	r2, [r3, #0]
		break;
 8009830:	f000 fd61 	bl	800a2f6 <GSM_Service+0xe5e>
	case GPRS_Off:
		//GSM_Send("AT+MIPCALL=0\r\n");

		HAL_Delay(1);
 8009834:	2001      	movs	r0, #1
 8009836:	f004 f993 	bl	800db60 <HAL_Delay>
		GSM_Send("AT+CGACT=0,1\r\n");
 800983a:	4b37      	ldr	r3, [pc, #220]	; (8009918 <GSM_Service+0x480>)
 800983c:	0018      	movs	r0, r3
 800983e:	f000 fe4b 	bl	800a4d8 <GSM_Send>
		gsmInfo.socket = 0;
 8009842:	4b1a      	ldr	r3, [pc, #104]	; (80098ac <GSM_Service+0x414>)
 8009844:	2200      	movs	r2, #0
 8009846:	679a      	str	r2, [r3, #120]	; 0x78
		smsFlags.gprsActive = 0;
 8009848:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <GSM_Service+0x408>)
 800984a:	2200      	movs	r2, #0
 800984c:	61da      	str	r2, [r3, #28]
		gsmInfo.gprsDataPending = 0;
 800984e:	4b17      	ldr	r3, [pc, #92]	; (80098ac <GSM_Service+0x414>)
 8009850:	2280      	movs	r2, #128	; 0x80
 8009852:	2100      	movs	r1, #0
 8009854:	5099      	str	r1, [r3, r2]
		gsmState = 0;
 8009856:	4b05      	ldr	r3, [pc, #20]	; (800986c <GSM_Service+0x3d4>)
 8009858:	2200      	movs	r2, #0
 800985a:	701a      	strb	r2, [r3, #0]
		//go2boot();
		break;
 800985c:	f000 fd4b 	bl	800a2f6 <GSM_Service+0xe5e>
 8009860:	200014fc 	.word	0x200014fc
 8009864:	20001ea8 	.word	0x20001ea8
 8009868:	08012fd4 	.word	0x08012fd4
 800986c:	200000c0 	.word	0x200000c0
 8009870:	080141d8 	.word	0x080141d8
 8009874:	20000164 	.word	0x20000164
 8009878:	48000800 	.word	0x48000800
 800987c:	48000400 	.word	0x48000400
 8009880:	08012fd8 	.word	0x08012fd8
 8009884:	08012fe4 	.word	0x08012fe4
 8009888:	08012ff4 	.word	0x08012ff4
 800988c:	08013004 	.word	0x08013004
 8009890:	08013010 	.word	0x08013010
 8009894:	0801301c 	.word	0x0801301c
 8009898:	08013028 	.word	0x08013028
 800989c:	08013034 	.word	0x08013034
 80098a0:	2000112c 	.word	0x2000112c
 80098a4:	08013040 	.word	0x08013040
 80098a8:	0801304c 	.word	0x0801304c
 80098ac:	20001628 	.word	0x20001628
 80098b0:	08013058 	.word	0x08013058
 80098b4:	08013064 	.word	0x08013064
 80098b8:	08013084 	.word	0x08013084
 80098bc:	08013090 	.word	0x08013090
 80098c0:	080130a0 	.word	0x080130a0
 80098c4:	080130ac 	.word	0x080130ac
 80098c8:	200016fd 	.word	0x200016fd
 80098cc:	080130b4 	.word	0x080130b4
 80098d0:	080130c8 	.word	0x080130c8
 80098d4:	080130cc 	.word	0x080130cc
 80098d8:	080130e0 	.word	0x080130e0
 80098dc:	20001324 	.word	0x20001324
 80098e0:	080130f0 	.word	0x080130f0
 80098e4:	080130fc 	.word	0x080130fc
 80098e8:	20001328 	.word	0x20001328
 80098ec:	08013108 	.word	0x08013108
 80098f0:	200016da 	.word	0x200016da
 80098f4:	08013114 	.word	0x08013114
 80098f8:	08012fc4 	.word	0x08012fc4
 80098fc:	20001420 	.word	0x20001420
 8009900:	0801311c 	.word	0x0801311c
 8009904:	20001348 	.word	0x20001348
 8009908:	08013124 	.word	0x08013124
 800990c:	08013128 	.word	0x08013128
 8009910:	08013138 	.word	0x08013138
 8009914:	08013148 	.word	0x08013148
 8009918:	08013158 	.word	0x08013158
	case SocketOpen:
		gsmState = 0;
 800991c:	4b76      	ldr	r3, [pc, #472]	; (8009af8 <GSM_Service+0x660>)
 800991e:	2200      	movs	r2, #0
 8009920:	701a      	strb	r2, [r3, #0]
		//sendData("AT+MIPOPEN=1,10,\"139.130.4.5\",80,0\r\n",UART1);		//connect to remote server
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"216.58.223.4\",80,0\r\n",UART1);		//connect to remote server
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"197.159.49.78\",5001,0\r\n",UART1);
		gsmInfo.gprsDataPending = 1;
 8009922:	4b76      	ldr	r3, [pc, #472]	; (8009afc <GSM_Service+0x664>)
 8009924:	2280      	movs	r2, #128	; 0x80
 8009926:	2101      	movs	r1, #1
 8009928:	5099      	str	r1, [r3, r2]
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"196.40.183.39\",5001,0\r\n",UART1);
		//if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"102.129.99.123\",5001,0\r\n",UART1);

		char temp[200];
		//strcpy(temp,"AT+MIPOPEN=1,5001,\"");
		strcpy(temp,"AT+QIOPEN=1,\"TCP\",\"");
 800992a:	003b      	movs	r3, r7
 800992c:	4a74      	ldr	r2, [pc, #464]	; (8009b00 <GSM_Service+0x668>)
 800992e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8009930:	c313      	stmia	r3!, {r0, r1, r4}
 8009932:	ca03      	ldmia	r2!, {r0, r1}
 8009934:	c303      	stmia	r3!, {r0, r1}
		strcpy(temp,"AT+QIOPEN=\"TCP\",\"");
 8009936:	003b      	movs	r3, r7
 8009938:	4a72      	ldr	r2, [pc, #456]	; (8009b04 <GSM_Service+0x66c>)
 800993a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800993c:	c313      	stmia	r3!, {r0, r1, r4}
 800993e:	6811      	ldr	r1, [r2, #0]
 8009940:	6019      	str	r1, [r3, #0]
 8009942:	8892      	ldrh	r2, [r2, #4]
 8009944:	809a      	strh	r2, [r3, #4]
		strcat(temp,gsmInfo.url);
 8009946:	4a6d      	ldr	r2, [pc, #436]	; (8009afc <GSM_Service+0x664>)
 8009948:	003b      	movs	r3, r7
 800994a:	0011      	movs	r1, r2
 800994c:	0018      	movs	r0, r3
 800994e:	f008 fe2f 	bl	80125b0 <strcat>
		strcat(temp,"\",");
 8009952:	003b      	movs	r3, r7
 8009954:	0018      	movs	r0, r3
 8009956:	f7ff fbe1 	bl	800911c <strlen>
 800995a:	0003      	movs	r3, r0
 800995c:	001a      	movs	r2, r3
 800995e:	003b      	movs	r3, r7
 8009960:	189a      	adds	r2, r3, r2
 8009962:	4b69      	ldr	r3, [pc, #420]	; (8009b08 <GSM_Service+0x670>)
 8009964:	0010      	movs	r0, r2
 8009966:	0019      	movs	r1, r3
 8009968:	2303      	movs	r3, #3
 800996a:	001a      	movs	r2, r3
 800996c:	f008 fdee 	bl	801254c <memcpy>
		strcat(temp,gsmInfo.urlport);
 8009970:	4a66      	ldr	r2, [pc, #408]	; (8009b0c <GSM_Service+0x674>)
 8009972:	003b      	movs	r3, r7
 8009974:	0011      	movs	r1, r2
 8009976:	0018      	movs	r0, r3
 8009978:	f008 fe1a 	bl	80125b0 <strcat>
		strcat (temp,"\r\n");
 800997c:	003b      	movs	r3, r7
 800997e:	0018      	movs	r0, r3
 8009980:	f7ff fbcc 	bl	800911c <strlen>
 8009984:	0003      	movs	r3, r0
 8009986:	001a      	movs	r2, r3
 8009988:	003b      	movs	r3, r7
 800998a:	189a      	adds	r2, r3, r2
 800998c:	4b60      	ldr	r3, [pc, #384]	; (8009b10 <GSM_Service+0x678>)
 800998e:	0010      	movs	r0, r2
 8009990:	0019      	movs	r1, r3
 8009992:	2303      	movs	r3, #3
 8009994:	001a      	movs	r2, r3
 8009996:	f008 fdd9 	bl	801254c <memcpy>
		Debug_Send("build socket\r\n");
 800999a:	4b5e      	ldr	r3, [pc, #376]	; (8009b14 <GSM_Service+0x67c>)
 800999c:	0018      	movs	r0, r3
 800999e:	f000 fded 	bl	800a57c <Debug_Send>
		//strcat (temp,",0\r\n");
		if (gsmInfo.socket == 0){
 80099a2:	4b56      	ldr	r3, [pc, #344]	; (8009afc <GSM_Service+0x664>)
 80099a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10d      	bne.n	80099c6 <GSM_Service+0x52e>
			//sendData("AT+MIPOPEN=1,5001,\"102.129.99.123\",5000,0\r\n",UART1);
			Debug_Send("Open socket\r\n");
 80099aa:	4b5b      	ldr	r3, [pc, #364]	; (8009b18 <GSM_Service+0x680>)
 80099ac:	0018      	movs	r0, r3
 80099ae:	f000 fde5 	bl	800a57c <Debug_Send>
			Debug_Send(temp);
 80099b2:	003b      	movs	r3, r7
 80099b4:	0018      	movs	r0, r3
 80099b6:	f000 fde1 	bl	800a57c <Debug_Send>
			GSM_Send(temp);
 80099ba:	003b      	movs	r3, r7
 80099bc:	0018      	movs	r0, r3
 80099be:	f000 fd8b 	bl	800a4d8 <GSM_Send>
			//sendData("Socket open\r\n",UART0);
		}
		//sendData("AT+MIPOPEN=?\r\n",UART1);
		//gsmState = GPRS_Write;
		//if (gsmInfo.gprsDataPending == 0) gsmState = 0;
		break;
 80099c2:	f000 fc98 	bl	800a2f6 <GSM_Service+0xe5e>
			gsmState = SocketClose;
 80099c6:	4b4c      	ldr	r3, [pc, #304]	; (8009af8 <GSM_Service+0x660>)
 80099c8:	2216      	movs	r2, #22
 80099ca:	701a      	strb	r2, [r3, #0]
		break;
 80099cc:	f000 fc93 	bl	800a2f6 <GSM_Service+0xe5e>
	case SocketClose:
		//GSM_Send("AT+MIPCLOSE=1\r\n");
		Debug_Send("Close socket\r\n");
 80099d0:	4b52      	ldr	r3, [pc, #328]	; (8009b1c <GSM_Service+0x684>)
 80099d2:	0018      	movs	r0, r3
 80099d4:	f000 fdd2 	bl	800a57c <Debug_Send>
		GSM_Send("AT+QICLOSE\r\n");
 80099d8:	4b51      	ldr	r3, [pc, #324]	; (8009b20 <GSM_Service+0x688>)
 80099da:	0018      	movs	r0, r3
 80099dc:	f000 fd7c 	bl	800a4d8 <GSM_Send>
		gsmInfo.gprsDataPending = 0;
 80099e0:	4b46      	ldr	r3, [pc, #280]	; (8009afc <GSM_Service+0x664>)
 80099e2:	2280      	movs	r2, #128	; 0x80
 80099e4:	2100      	movs	r1, #0
 80099e6:	5099      	str	r1, [r3, r2]
		gsmState = 0;
 80099e8:	4b43      	ldr	r3, [pc, #268]	; (8009af8 <GSM_Service+0x660>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	701a      	strb	r2, [r3, #0]
		break;
 80099ee:	f000 fc82 	bl	800a2f6 <GSM_Service+0xe5e>
	case SMS_Del:
		//smsFlags.send = 1;
		//GSM_Send("AT+CMGD=");
		//GSM_Send(smsInfo.index);
		strcpy(temp,"AT+CMGD=");
 80099f2:	003b      	movs	r3, r7
 80099f4:	4a4b      	ldr	r2, [pc, #300]	; (8009b24 <GSM_Service+0x68c>)
 80099f6:	ca03      	ldmia	r2!, {r0, r1}
 80099f8:	c303      	stmia	r3!, {r0, r1}
 80099fa:	7812      	ldrb	r2, [r2, #0]
 80099fc:	701a      	strb	r2, [r3, #0]
		strcat(temp,smsInfo.index);
 80099fe:	4a4a      	ldr	r2, [pc, #296]	; (8009b28 <GSM_Service+0x690>)
 8009a00:	003b      	movs	r3, r7
 8009a02:	0011      	movs	r1, r2
 8009a04:	0018      	movs	r0, r3
 8009a06:	f008 fdd3 	bl	80125b0 <strcat>
		strcat(temp,"\r\n");
 8009a0a:	003b      	movs	r3, r7
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f7ff fb85 	bl	800911c <strlen>
 8009a12:	0003      	movs	r3, r0
 8009a14:	001a      	movs	r2, r3
 8009a16:	003b      	movs	r3, r7
 8009a18:	189a      	adds	r2, r3, r2
 8009a1a:	4b3d      	ldr	r3, [pc, #244]	; (8009b10 <GSM_Service+0x678>)
 8009a1c:	0010      	movs	r0, r2
 8009a1e:	0019      	movs	r1, r3
 8009a20:	2303      	movs	r3, #3
 8009a22:	001a      	movs	r2, r3
 8009a24:	f008 fd92 	bl	801254c <memcpy>
		//sendData("4",UART1);
		//GSM_Send("\r\n");
		GSM_Send(temp);
 8009a28:	003b      	movs	r3, r7
 8009a2a:	0018      	movs	r0, r3
 8009a2c:	f000 fd54 	bl	800a4d8 <GSM_Send>
		smsFlags.del = 0;
 8009a30:	4b3e      	ldr	r3, [pc, #248]	; (8009b2c <GSM_Service+0x694>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	621a      	str	r2, [r3, #32]
		gsmState = 0;
 8009a36:	4b30      	ldr	r3, [pc, #192]	; (8009af8 <GSM_Service+0x660>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	701a      	strb	r2, [r3, #0]
		break;
 8009a3c:	f000 fc5b 	bl	800a2f6 <GSM_Service+0xe5e>
		//sendData("AT+MIPOPEN=?\r\n",UART1);

		gsmState = 0;
		break;*/
	case GPRS_Write:
		gsmInfo.dataFlag = 1;
 8009a40:	4a2e      	ldr	r2, [pc, #184]	; (8009afc <GSM_Service+0x664>)
 8009a42:	23aa      	movs	r3, #170	; 0xaa
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	2101      	movs	r1, #1
 8009a48:	50d1      	str	r1, [r2, r3]
		//Debug_Send("GPRS write\r\n");
		if (gsmInfo.MQTT == 0){
 8009a4a:	4a2c      	ldr	r2, [pc, #176]	; (8009afc <GSM_Service+0x664>)
 8009a4c:	23be      	movs	r3, #190	; 0xbe
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	58d3      	ldr	r3, [r2, r3]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d000      	beq.n	8009a58 <GSM_Service+0x5c0>
 8009a56:	e199      	b.n	8009d8c <GSM_Service+0x8f4>
			if (gsmInfo.registered == 0){
 8009a58:	4b28      	ldr	r3, [pc, #160]	; (8009afc <GSM_Service+0x664>)
 8009a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d177      	bne.n	8009b50 <GSM_Service+0x6b8>
				Debug_Send("unregistered\r\n");
 8009a60:	4b33      	ldr	r3, [pc, #204]	; (8009b30 <GSM_Service+0x698>)
 8009a62:	0018      	movs	r0, r3
 8009a64:	f000 fd8a 	bl	800a57c <Debug_Send>
				strcpy(tempGPRS,"imei:");
 8009a68:	4a32      	ldr	r2, [pc, #200]	; (8009b34 <GSM_Service+0x69c>)
 8009a6a:	4b33      	ldr	r3, [pc, #204]	; (8009b38 <GSM_Service+0x6a0>)
 8009a6c:	0010      	movs	r0, r2
 8009a6e:	0019      	movs	r1, r3
 8009a70:	2306      	movs	r3, #6
 8009a72:	001a      	movs	r2, r3
 8009a74:	f008 fd6a 	bl	801254c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.imei);
 8009a78:	4a30      	ldr	r2, [pc, #192]	; (8009b3c <GSM_Service+0x6a4>)
 8009a7a:	4b2e      	ldr	r3, [pc, #184]	; (8009b34 <GSM_Service+0x69c>)
 8009a7c:	0011      	movs	r1, r2
 8009a7e:	0018      	movs	r0, r3
 8009a80:	f008 fd96 	bl	80125b0 <strcat>

				int temp3;
				char temp2[20];
				//temp3 = getVolt();
				myLongStr(voltage,temp2,10,10);
 8009a84:	4b2e      	ldr	r3, [pc, #184]	; (8009b40 <GSM_Service+0x6a8>)
 8009a86:	6818      	ldr	r0, [r3, #0]
 8009a88:	24c8      	movs	r4, #200	; 0xc8
 8009a8a:	1939      	adds	r1, r7, r4
 8009a8c:	230a      	movs	r3, #10
 8009a8e:	220a      	movs	r2, #10
 8009a90:	f003 fcd2 	bl	800d438 <myLongStr>
				strcat(tempGPRS,",v:");
 8009a94:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <GSM_Service+0x69c>)
 8009a96:	0018      	movs	r0, r3
 8009a98:	f7ff fb40 	bl	800911c <strlen>
 8009a9c:	0003      	movs	r3, r0
 8009a9e:	001a      	movs	r2, r3
 8009aa0:	4b24      	ldr	r3, [pc, #144]	; (8009b34 <GSM_Service+0x69c>)
 8009aa2:	18d2      	adds	r2, r2, r3
 8009aa4:	4b27      	ldr	r3, [pc, #156]	; (8009b44 <GSM_Service+0x6ac>)
 8009aa6:	0010      	movs	r0, r2
 8009aa8:	0019      	movs	r1, r3
 8009aaa:	2304      	movs	r3, #4
 8009aac:	001a      	movs	r2, r3
 8009aae:	f008 fd4d 	bl	801254c <memcpy>
				strcat(tempGPRS,temp2);
 8009ab2:	193a      	adds	r2, r7, r4
 8009ab4:	4b1f      	ldr	r3, [pc, #124]	; (8009b34 <GSM_Service+0x69c>)
 8009ab6:	0011      	movs	r1, r2
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f008 fd79 	bl	80125b0 <strcat>
				//temp3 = getCurrent();
				myLongStr(current1,temp2,10,10);
 8009abe:	4b22      	ldr	r3, [pc, #136]	; (8009b48 <GSM_Service+0x6b0>)
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	1939      	adds	r1, r7, r4
 8009ac4:	230a      	movs	r3, #10
 8009ac6:	220a      	movs	r2, #10
 8009ac8:	f003 fcb6 	bl	800d438 <myLongStr>
				strcat(tempGPRS,",c:");
 8009acc:	4b19      	ldr	r3, [pc, #100]	; (8009b34 <GSM_Service+0x69c>)
 8009ace:	0018      	movs	r0, r3
 8009ad0:	f7ff fb24 	bl	800911c <strlen>
 8009ad4:	0003      	movs	r3, r0
 8009ad6:	001a      	movs	r2, r3
 8009ad8:	4b16      	ldr	r3, [pc, #88]	; (8009b34 <GSM_Service+0x69c>)
 8009ada:	18d2      	adds	r2, r2, r3
 8009adc:	4b1b      	ldr	r3, [pc, #108]	; (8009b4c <GSM_Service+0x6b4>)
 8009ade:	0010      	movs	r0, r2
 8009ae0:	0019      	movs	r1, r3
 8009ae2:	2304      	movs	r3, #4
 8009ae4:	001a      	movs	r2, r3
 8009ae6:	f008 fd31 	bl	801254c <memcpy>
				strcat(tempGPRS,temp2);
 8009aea:	193a      	adds	r2, r7, r4
 8009aec:	4b11      	ldr	r3, [pc, #68]	; (8009b34 <GSM_Service+0x69c>)
 8009aee:	0011      	movs	r1, r2
 8009af0:	0018      	movs	r0, r3
 8009af2:	f008 fd5d 	bl	80125b0 <strcat>
 8009af6:	e039      	b.n	8009b6c <GSM_Service+0x6d4>
 8009af8:	200000c0 	.word	0x200000c0
 8009afc:	20001628 	.word	0x20001628
 8009b00:	08013168 	.word	0x08013168
 8009b04:	0801317c 	.word	0x0801317c
 8009b08:	08013190 	.word	0x08013190
 8009b0c:	20001646 	.word	0x20001646
 8009b10:	08012fc4 	.word	0x08012fc4
 8009b14:	08013194 	.word	0x08013194
 8009b18:	080131a4 	.word	0x080131a4
 8009b1c:	080131b4 	.word	0x080131b4
 8009b20:	080131c4 	.word	0x080131c4
 8009b24:	080131d4 	.word	0x080131d4
 8009b28:	20001324 	.word	0x20001324
 8009b2c:	2000112c 	.word	0x2000112c
 8009b30:	080131e0 	.word	0x080131e0
 8009b34:	200014c8 	.word	0x200014c8
 8009b38:	080131f0 	.word	0x080131f0
 8009b3c:	2000164c 	.word	0x2000164c
 8009b40:	200014fc 	.word	0x200014fc
 8009b44:	080131f8 	.word	0x080131f8
 8009b48:	200018a4 	.word	0x200018a4
 8009b4c:	080131fc 	.word	0x080131fc
			}
			else {
				strcpy(tempGPRS,"user:");
 8009b50:	4ae9      	ldr	r2, [pc, #932]	; (8009ef8 <GSM_Service+0xa60>)
 8009b52:	4bea      	ldr	r3, [pc, #936]	; (8009efc <GSM_Service+0xa64>)
 8009b54:	0010      	movs	r0, r2
 8009b56:	0019      	movs	r1, r3
 8009b58:	2306      	movs	r3, #6
 8009b5a:	001a      	movs	r2, r3
 8009b5c:	f008 fcf6 	bl	801254c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.user);
 8009b60:	4ae7      	ldr	r2, [pc, #924]	; (8009f00 <GSM_Service+0xa68>)
 8009b62:	4be5      	ldr	r3, [pc, #916]	; (8009ef8 <GSM_Service+0xa60>)
 8009b64:	0011      	movs	r1, r2
 8009b66:	0018      	movs	r0, r3
 8009b68:	f008 fd22 	bl	80125b0 <strcat>
					sprintf (tempv,".%d", owData[3]);
					strcat(tempGPRS,tempv);
				}*/
			}
			//GPRS_SendData(tempGPRS);
			if (gsmInfo.userFlag == 1){
 8009b6c:	4be5      	ldr	r3, [pc, #916]	; (8009f04 <GSM_Service+0xa6c>)
 8009b6e:	2284      	movs	r2, #132	; 0x84
 8009b70:	589b      	ldr	r3, [r3, r2]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d124      	bne.n	8009bc0 <GSM_Service+0x728>
				gsmInfo.userFlag = 0;
 8009b76:	4be3      	ldr	r3, [pc, #908]	; (8009f04 <GSM_Service+0xa6c>)
 8009b78:	2284      	movs	r2, #132	; 0x84
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	5099      	str	r1, [r3, r2]
				strcpy(tempGPRS,",");
 8009b7e:	4ade      	ldr	r2, [pc, #888]	; (8009ef8 <GSM_Service+0xa60>)
 8009b80:	4be1      	ldr	r3, [pc, #900]	; (8009f08 <GSM_Service+0xa70>)
 8009b82:	0010      	movs	r0, r2
 8009b84:	0019      	movs	r1, r3
 8009b86:	2302      	movs	r3, #2
 8009b88:	001a      	movs	r2, r3
 8009b8a:	f008 fcdf 	bl	801254c <memcpy>
				strcat(tempGPRS,"user:");
 8009b8e:	4bda      	ldr	r3, [pc, #872]	; (8009ef8 <GSM_Service+0xa60>)
 8009b90:	0018      	movs	r0, r3
 8009b92:	f7ff fac3 	bl	800911c <strlen>
 8009b96:	0003      	movs	r3, r0
 8009b98:	001a      	movs	r2, r3
 8009b9a:	4bd7      	ldr	r3, [pc, #860]	; (8009ef8 <GSM_Service+0xa60>)
 8009b9c:	18d2      	adds	r2, r2, r3
 8009b9e:	4bd7      	ldr	r3, [pc, #860]	; (8009efc <GSM_Service+0xa64>)
 8009ba0:	0010      	movs	r0, r2
 8009ba2:	0019      	movs	r1, r3
 8009ba4:	2306      	movs	r3, #6
 8009ba6:	001a      	movs	r2, r3
 8009ba8:	f008 fcd0 	bl	801254c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.user);
 8009bac:	4ad4      	ldr	r2, [pc, #848]	; (8009f00 <GSM_Service+0xa68>)
 8009bae:	4bd2      	ldr	r3, [pc, #840]	; (8009ef8 <GSM_Service+0xa60>)
 8009bb0:	0011      	movs	r1, r2
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f008 fcfc 	bl	80125b0 <strcat>


				//strcat(tempGPRS,",");
				//sendData(tempGPRS,UART0);
				GPRS_SendData(tempGPRS);
 8009bb8:	4bcf      	ldr	r3, [pc, #828]	; (8009ef8 <GSM_Service+0xa60>)
 8009bba:	0018      	movs	r0, r3
 8009bbc:	f001 fee2 	bl	800b984 <GPRS_SendData>
			}

			if (gsmInfo.msisdnFlag == 1){
 8009bc0:	4bd0      	ldr	r3, [pc, #832]	; (8009f04 <GSM_Service+0xa6c>)
 8009bc2:	2288      	movs	r2, #136	; 0x88
 8009bc4:	589b      	ldr	r3, [r3, r2]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d124      	bne.n	8009c14 <GSM_Service+0x77c>
				gsmInfo.msisdnFlag = 0;
 8009bca:	4bce      	ldr	r3, [pc, #824]	; (8009f04 <GSM_Service+0xa6c>)
 8009bcc:	2288      	movs	r2, #136	; 0x88
 8009bce:	2100      	movs	r1, #0
 8009bd0:	5099      	str	r1, [r3, r2]
				strcpy(tempGPRS,",");
 8009bd2:	4ac9      	ldr	r2, [pc, #804]	; (8009ef8 <GSM_Service+0xa60>)
 8009bd4:	4bcc      	ldr	r3, [pc, #816]	; (8009f08 <GSM_Service+0xa70>)
 8009bd6:	0010      	movs	r0, r2
 8009bd8:	0019      	movs	r1, r3
 8009bda:	2302      	movs	r3, #2
 8009bdc:	001a      	movs	r2, r3
 8009bde:	f008 fcb5 	bl	801254c <memcpy>
				strcat(tempGPRS,"msisdn:");
 8009be2:	4bc5      	ldr	r3, [pc, #788]	; (8009ef8 <GSM_Service+0xa60>)
 8009be4:	0018      	movs	r0, r3
 8009be6:	f7ff fa99 	bl	800911c <strlen>
 8009bea:	0003      	movs	r3, r0
 8009bec:	001a      	movs	r2, r3
 8009bee:	4bc2      	ldr	r3, [pc, #776]	; (8009ef8 <GSM_Service+0xa60>)
 8009bf0:	18d2      	adds	r2, r2, r3
 8009bf2:	4bc6      	ldr	r3, [pc, #792]	; (8009f0c <GSM_Service+0xa74>)
 8009bf4:	0010      	movs	r0, r2
 8009bf6:	0019      	movs	r1, r3
 8009bf8:	2308      	movs	r3, #8
 8009bfa:	001a      	movs	r2, r3
 8009bfc:	f008 fca6 	bl	801254c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.msisdn);
 8009c00:	4ac3      	ldr	r2, [pc, #780]	; (8009f10 <GSM_Service+0xa78>)
 8009c02:	4bbd      	ldr	r3, [pc, #756]	; (8009ef8 <GSM_Service+0xa60>)
 8009c04:	0011      	movs	r1, r2
 8009c06:	0018      	movs	r0, r3
 8009c08:	f008 fcd2 	bl	80125b0 <strcat>
				//sendData(tempGPRS,UART0);
				GPRS_SendData(tempGPRS);
 8009c0c:	4bba      	ldr	r3, [pc, #744]	; (8009ef8 <GSM_Service+0xa60>)
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f001 feb8 	bl	800b984 <GPRS_SendData>
			}

			if (gsmInfo.passwordFlag == 1){
 8009c14:	4bbb      	ldr	r3, [pc, #748]	; (8009f04 <GSM_Service+0xa6c>)
 8009c16:	228c      	movs	r2, #140	; 0x8c
 8009c18:	589b      	ldr	r3, [r3, r2]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d124      	bne.n	8009c68 <GSM_Service+0x7d0>
				gsmInfo.passwordFlag = 0;
 8009c1e:	4bb9      	ldr	r3, [pc, #740]	; (8009f04 <GSM_Service+0xa6c>)
 8009c20:	228c      	movs	r2, #140	; 0x8c
 8009c22:	2100      	movs	r1, #0
 8009c24:	5099      	str	r1, [r3, r2]
				strcpy(tempGPRS,",");
 8009c26:	4ab4      	ldr	r2, [pc, #720]	; (8009ef8 <GSM_Service+0xa60>)
 8009c28:	4bb7      	ldr	r3, [pc, #732]	; (8009f08 <GSM_Service+0xa70>)
 8009c2a:	0010      	movs	r0, r2
 8009c2c:	0019      	movs	r1, r3
 8009c2e:	2302      	movs	r3, #2
 8009c30:	001a      	movs	r2, r3
 8009c32:	f008 fc8b 	bl	801254c <memcpy>
				strcat(tempGPRS,"password:");
 8009c36:	4bb0      	ldr	r3, [pc, #704]	; (8009ef8 <GSM_Service+0xa60>)
 8009c38:	0018      	movs	r0, r3
 8009c3a:	f7ff fa6f 	bl	800911c <strlen>
 8009c3e:	0003      	movs	r3, r0
 8009c40:	001a      	movs	r2, r3
 8009c42:	4bad      	ldr	r3, [pc, #692]	; (8009ef8 <GSM_Service+0xa60>)
 8009c44:	18d2      	adds	r2, r2, r3
 8009c46:	4bb3      	ldr	r3, [pc, #716]	; (8009f14 <GSM_Service+0xa7c>)
 8009c48:	0010      	movs	r0, r2
 8009c4a:	0019      	movs	r1, r3
 8009c4c:	230a      	movs	r3, #10
 8009c4e:	001a      	movs	r2, r3
 8009c50:	f008 fc7c 	bl	801254c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.password);
 8009c54:	4ab0      	ldr	r2, [pc, #704]	; (8009f18 <GSM_Service+0xa80>)
 8009c56:	4ba8      	ldr	r3, [pc, #672]	; (8009ef8 <GSM_Service+0xa60>)
 8009c58:	0011      	movs	r1, r2
 8009c5a:	0018      	movs	r0, r3
 8009c5c:	f008 fca8 	bl	80125b0 <strcat>
				//sendData(tempGPRS,UART0);
				GPRS_SendData(tempGPRS);
 8009c60:	4ba5      	ldr	r3, [pc, #660]	; (8009ef8 <GSM_Service+0xa60>)
 8009c62:	0018      	movs	r0, r3
 8009c64:	f001 fe8e 	bl	800b984 <GPRS_SendData>
			}
			if (gsmInfo.relayFlag == 1){
 8009c68:	4aa6      	ldr	r2, [pc, #664]	; (8009f04 <GSM_Service+0xa6c>)
 8009c6a:	238c      	movs	r3, #140	; 0x8c
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	58d3      	ldr	r3, [r2, r3]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d11f      	bne.n	8009cb4 <GSM_Service+0x81c>
				gsmInfo.relayFlag = 0;
 8009c74:	4aa3      	ldr	r2, [pc, #652]	; (8009f04 <GSM_Service+0xa6c>)
 8009c76:	238c      	movs	r3, #140	; 0x8c
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	50d1      	str	r1, [r2, r3]
				strcpy(tempGPRS,",");
 8009c7e:	4a9e      	ldr	r2, [pc, #632]	; (8009ef8 <GSM_Service+0xa60>)
 8009c80:	4ba1      	ldr	r3, [pc, #644]	; (8009f08 <GSM_Service+0xa70>)
 8009c82:	0010      	movs	r0, r2
 8009c84:	0019      	movs	r1, r3
 8009c86:	2302      	movs	r3, #2
 8009c88:	001a      	movs	r2, r3
 8009c8a:	f008 fc5f 	bl	801254c <memcpy>
				strcat(tempGPRS,"relay:");
 8009c8e:	4b9a      	ldr	r3, [pc, #616]	; (8009ef8 <GSM_Service+0xa60>)
 8009c90:	0018      	movs	r0, r3
 8009c92:	f7ff fa43 	bl	800911c <strlen>
 8009c96:	0003      	movs	r3, r0
 8009c98:	001a      	movs	r2, r3
 8009c9a:	4b97      	ldr	r3, [pc, #604]	; (8009ef8 <GSM_Service+0xa60>)
 8009c9c:	18d2      	adds	r2, r2, r3
 8009c9e:	4b9f      	ldr	r3, [pc, #636]	; (8009f1c <GSM_Service+0xa84>)
 8009ca0:	0010      	movs	r0, r2
 8009ca2:	0019      	movs	r1, r3
 8009ca4:	2307      	movs	r3, #7
 8009ca6:	001a      	movs	r2, r3
 8009ca8:	f008 fc50 	bl	801254c <memcpy>
				//if (RELAY == 1) strcat(tempGPRS,"ON");
				//else strcat(tempGPRS,"OFF");
				GPRS_SendData(tempGPRS);
 8009cac:	4b92      	ldr	r3, [pc, #584]	; (8009ef8 <GSM_Service+0xa60>)
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f001 fe68 	bl	800b984 <GPRS_SendData>
			}
			if (gsmInfo.vthFlag == 1){
 8009cb4:	4a93      	ldr	r2, [pc, #588]	; (8009f04 <GSM_Service+0xa6c>)
 8009cb6:	238a      	movs	r3, #138	; 0x8a
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	58d3      	ldr	r3, [r2, r3]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d125      	bne.n	8009d0c <GSM_Service+0x874>
				gsmInfo.vthFlag = 0;
 8009cc0:	4a90      	ldr	r2, [pc, #576]	; (8009f04 <GSM_Service+0xa6c>)
 8009cc2:	238a      	movs	r3, #138	; 0x8a
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	50d1      	str	r1, [r2, r3]
				strcpy(tempGPRS,",");
 8009cca:	4a8b      	ldr	r2, [pc, #556]	; (8009ef8 <GSM_Service+0xa60>)
 8009ccc:	4b8e      	ldr	r3, [pc, #568]	; (8009f08 <GSM_Service+0xa70>)
 8009cce:	0010      	movs	r0, r2
 8009cd0:	0019      	movs	r1, r3
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	001a      	movs	r2, r3
 8009cd6:	f008 fc39 	bl	801254c <memcpy>
				strcat(tempGPRS,"vth:");
 8009cda:	4b87      	ldr	r3, [pc, #540]	; (8009ef8 <GSM_Service+0xa60>)
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f7ff fa1d 	bl	800911c <strlen>
 8009ce2:	0003      	movs	r3, r0
 8009ce4:	001a      	movs	r2, r3
 8009ce6:	4b84      	ldr	r3, [pc, #528]	; (8009ef8 <GSM_Service+0xa60>)
 8009ce8:	18d2      	adds	r2, r2, r3
 8009cea:	4b8d      	ldr	r3, [pc, #564]	; (8009f20 <GSM_Service+0xa88>)
 8009cec:	0010      	movs	r0, r2
 8009cee:	0019      	movs	r1, r3
 8009cf0:	2305      	movs	r3, #5
 8009cf2:	001a      	movs	r2, r3
 8009cf4:	f008 fc2a 	bl	801254c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.vth);
 8009cf8:	4a8a      	ldr	r2, [pc, #552]	; (8009f24 <GSM_Service+0xa8c>)
 8009cfa:	4b7f      	ldr	r3, [pc, #508]	; (8009ef8 <GSM_Service+0xa60>)
 8009cfc:	0011      	movs	r1, r2
 8009cfe:	0018      	movs	r0, r3
 8009d00:	f008 fc56 	bl	80125b0 <strcat>
				GPRS_SendData(tempGPRS);
 8009d04:	4b7c      	ldr	r3, [pc, #496]	; (8009ef8 <GSM_Service+0xa60>)
 8009d06:	0018      	movs	r0, r3
 8009d08:	f001 fe3c 	bl	800b984 <GPRS_SendData>
			}
			if (gsmInfo.ccidFlag == 1){
 8009d0c:	4a7d      	ldr	r2, [pc, #500]	; (8009f04 <GSM_Service+0xa6c>)
 8009d0e:	238e      	movs	r3, #142	; 0x8e
 8009d10:	005b      	lsls	r3, r3, #1
 8009d12:	58d3      	ldr	r3, [r2, r3]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d125      	bne.n	8009d64 <GSM_Service+0x8cc>
				gsmInfo.ccidFlag = 0;
 8009d18:	4a7a      	ldr	r2, [pc, #488]	; (8009f04 <GSM_Service+0xa6c>)
 8009d1a:	238e      	movs	r3, #142	; 0x8e
 8009d1c:	005b      	lsls	r3, r3, #1
 8009d1e:	2100      	movs	r1, #0
 8009d20:	50d1      	str	r1, [r2, r3]
				strcpy(tempGPRS,",");
 8009d22:	4a75      	ldr	r2, [pc, #468]	; (8009ef8 <GSM_Service+0xa60>)
 8009d24:	4b78      	ldr	r3, [pc, #480]	; (8009f08 <GSM_Service+0xa70>)
 8009d26:	0010      	movs	r0, r2
 8009d28:	0019      	movs	r1, r3
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	001a      	movs	r2, r3
 8009d2e:	f008 fc0d 	bl	801254c <memcpy>
				strcat(tempGPRS,"ccid:");
 8009d32:	4b71      	ldr	r3, [pc, #452]	; (8009ef8 <GSM_Service+0xa60>)
 8009d34:	0018      	movs	r0, r3
 8009d36:	f7ff f9f1 	bl	800911c <strlen>
 8009d3a:	0003      	movs	r3, r0
 8009d3c:	001a      	movs	r2, r3
 8009d3e:	4b6e      	ldr	r3, [pc, #440]	; (8009ef8 <GSM_Service+0xa60>)
 8009d40:	18d2      	adds	r2, r2, r3
 8009d42:	4b79      	ldr	r3, [pc, #484]	; (8009f28 <GSM_Service+0xa90>)
 8009d44:	0010      	movs	r0, r2
 8009d46:	0019      	movs	r1, r3
 8009d48:	2306      	movs	r3, #6
 8009d4a:	001a      	movs	r2, r3
 8009d4c:	f008 fbfe 	bl	801254c <memcpy>
				strcat(tempGPRS,(char*)gsmInfo.ccid);
 8009d50:	4a76      	ldr	r2, [pc, #472]	; (8009f2c <GSM_Service+0xa94>)
 8009d52:	4b69      	ldr	r3, [pc, #420]	; (8009ef8 <GSM_Service+0xa60>)
 8009d54:	0011      	movs	r1, r2
 8009d56:	0018      	movs	r0, r3
 8009d58:	f008 fc2a 	bl	80125b0 <strcat>
				GPRS_SendData(tempGPRS);
 8009d5c:	4b66      	ldr	r3, [pc, #408]	; (8009ef8 <GSM_Service+0xa60>)
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f001 fe10 	bl	800b984 <GPRS_SendData>
			}
			strcat(tempGPRS,"\32\r");
 8009d64:	4b64      	ldr	r3, [pc, #400]	; (8009ef8 <GSM_Service+0xa60>)
 8009d66:	0018      	movs	r0, r3
 8009d68:	f7ff f9d8 	bl	800911c <strlen>
 8009d6c:	0003      	movs	r3, r0
 8009d6e:	001a      	movs	r2, r3
 8009d70:	4b61      	ldr	r3, [pc, #388]	; (8009ef8 <GSM_Service+0xa60>)
 8009d72:	18d2      	adds	r2, r2, r3
 8009d74:	4b6e      	ldr	r3, [pc, #440]	; (8009f30 <GSM_Service+0xa98>)
 8009d76:	0010      	movs	r0, r2
 8009d78:	0019      	movs	r1, r3
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	001a      	movs	r2, r3
 8009d7e:	f008 fbe5 	bl	801254c <memcpy>
			//GSM_Send(tempGPRS);
			GSM_Send(tempGPRS);
 8009d82:	4b5d      	ldr	r3, [pc, #372]	; (8009ef8 <GSM_Service+0xa60>)
 8009d84:	0018      	movs	r0, r3
 8009d86:	f000 fba7 	bl	800a4d8 <GSM_Send>
 8009d8a:	e046      	b.n	8009e1a <GSM_Service+0x982>
			//connect("test2");
			//connect1("test2",temp);
			//gsmInfo.MQTT_Data = 1;
			//Debug_Send("Send MQTT data\n");

			switch(mqttState){
 8009d8c:	4b69      	ldr	r3, [pc, #420]	; (8009f34 <GSM_Service+0xa9c>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	2b05      	cmp	r3, #5
 8009d92:	d83b      	bhi.n	8009e0c <GSM_Service+0x974>
 8009d94:	009a      	lsls	r2, r3, #2
 8009d96:	4b68      	ldr	r3, [pc, #416]	; (8009f38 <GSM_Service+0xaa0>)
 8009d98:	18d3      	adds	r3, r2, r3
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	469f      	mov	pc, r3
			case Connect:
				Debug_Send("Send connect-\r\n");
 8009d9e:	4b67      	ldr	r3, [pc, #412]	; (8009f3c <GSM_Service+0xaa4>)
 8009da0:	0018      	movs	r0, r3
 8009da2:	f000 fbeb 	bl	800a57c <Debug_Send>
				MQTT_ConnectF();
 8009da6:	f002 fd19 	bl	800c7dc <MQTT_ConnectF>
				mqttCounter = 0;
 8009daa:	4b65      	ldr	r3, [pc, #404]	; (8009f40 <GSM_Service+0xaa8>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
				//mqttState++;
				break;
 8009db0:	e02c      	b.n	8009e0c <GSM_Service+0x974>
			case Subscribe:
				Debug_Send("Send subscribe-\r\n");
 8009db2:	4b64      	ldr	r3, [pc, #400]	; (8009f44 <GSM_Service+0xaac>)
 8009db4:	0018      	movs	r0, r3
 8009db6:	f000 fbe1 	bl	800a57c <Debug_Send>
				MQTT_SuscribeF();
 8009dba:	f002 fd57 	bl	800c86c <MQTT_SuscribeF>
				break;
 8009dbe:	e025      	b.n	8009e0c <GSM_Service+0x974>
			case Publish:

				//MQTT_Publish_F();
				//GSM_Send_Bin(tempGPRS, mqttInfo.length);

				strcpy(msg,"GSM1:");
 8009dc0:	4a61      	ldr	r2, [pc, #388]	; (8009f48 <GSM_Service+0xab0>)
 8009dc2:	4b62      	ldr	r3, [pc, #392]	; (8009f4c <GSM_Service+0xab4>)
 8009dc4:	0010      	movs	r0, r2
 8009dc6:	0019      	movs	r1, r3
 8009dc8:	2306      	movs	r3, #6
 8009dca:	001a      	movs	r2, r3
 8009dcc:	f008 fbbe 	bl	801254c <memcpy>
				myLongStr(mCounter,tempCount,10,10);
 8009dd0:	4b5f      	ldr	r3, [pc, #380]	; (8009f50 <GSM_Service+0xab8>)
 8009dd2:	6818      	ldr	r0, [r3, #0]
 8009dd4:	495f      	ldr	r1, [pc, #380]	; (8009f54 <GSM_Service+0xabc>)
 8009dd6:	230a      	movs	r3, #10
 8009dd8:	220a      	movs	r2, #10
 8009dda:	f003 fb2d 	bl	800d438 <myLongStr>
				strcat(msg,tempCount);
 8009dde:	4a5d      	ldr	r2, [pc, #372]	; (8009f54 <GSM_Service+0xabc>)
 8009de0:	4b59      	ldr	r3, [pc, #356]	; (8009f48 <GSM_Service+0xab0>)
 8009de2:	0011      	movs	r1, r2
 8009de4:	0018      	movs	r0, r3
 8009de6:	f008 fbe3 	bl	80125b0 <strcat>
				MQTT_Publish_F(msg);
 8009dea:	4b57      	ldr	r3, [pc, #348]	; (8009f48 <GSM_Service+0xab0>)
 8009dec:	0018      	movs	r0, r3
 8009dee:	f002 fd77 	bl	800c8e0 <MQTT_Publish_F>
				mCounter++;
 8009df2:	4b57      	ldr	r3, [pc, #348]	; (8009f50 <GSM_Service+0xab8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	1c5a      	adds	r2, r3, #1
 8009df8:	4b55      	ldr	r3, [pc, #340]	; (8009f50 <GSM_Service+0xab8>)
 8009dfa:	601a      	str	r2, [r3, #0]
				//MQTT_Publish_F("test");
				break;
 8009dfc:	e006      	b.n	8009e0c <GSM_Service+0x974>
			case Unsubscribe:


				break;
			case Ping:
				Debug_Send("Send ping-\r\n");
 8009dfe:	4b56      	ldr	r3, [pc, #344]	; (8009f58 <GSM_Service+0xac0>)
 8009e00:	0018      	movs	r0, r3
 8009e02:	f000 fbbb 	bl	800a57c <Debug_Send>
				MQTT_Ping_F();
 8009e06:	f002 fdeb 	bl	800c9e0 <MQTT_Ping_F>

				break;
 8009e0a:	46c0      	nop			; (mov r8, r8)
			}

			Debug_Send("done\n");
 8009e0c:	4b53      	ldr	r3, [pc, #332]	; (8009f5c <GSM_Service+0xac4>)
 8009e0e:	0018      	movs	r0, r3
 8009e10:	f000 fbb4 	bl	800a57c <Debug_Send>
			//GSM_Send("MQTT\r\n");
			mqttSend = 1;
 8009e14:	4b52      	ldr	r3, [pc, #328]	; (8009f60 <GSM_Service+0xac8>)
 8009e16:	2201      	movs	r2, #1
 8009e18:	601a      	str	r2, [r3, #0]
		}

		//GSM_Send("\032\r");
		gsmState = 0;
 8009e1a:	4b52      	ldr	r3, [pc, #328]	; (8009f64 <GSM_Service+0xacc>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	701a      	strb	r2, [r3, #0]
		GSM_Send("\"\r\n");
		gsmState = GPRS_Send;*/
		//sprintf (tempGPRS,"GPRS Write:GSM state-%d\r\n", gsmState);
		//sendData(tempGPRS,UART0);
		//sendData("-gprs\r\n",UART0);
		break;
 8009e20:	e269      	b.n	800a2f6 <GSM_Service+0xe5e>
	case AT:
		Debug_Send("Get MQTT data\n");
 8009e22:	4b51      	ldr	r3, [pc, #324]	; (8009f68 <GSM_Service+0xad0>)
 8009e24:	0018      	movs	r0, r3
 8009e26:	f000 fba9 	bl	800a57c <Debug_Send>
		GSM_Send("AT\r");
 8009e2a:	4b50      	ldr	r3, [pc, #320]	; (8009f6c <GSM_Service+0xad4>)
 8009e2c:	0018      	movs	r0, r3
 8009e2e:	f000 fb53 	bl	800a4d8 <GSM_Send>
		gsmState = 0;
 8009e32:	4b4c      	ldr	r3, [pc, #304]	; (8009f64 <GSM_Service+0xacc>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	701a      	strb	r2, [r3, #0]
		break;
 8009e38:	e25d      	b.n	800a2f6 <GSM_Service+0xe5e>
	case GPRS_Send:
		//GSM_Send("AT+MIPPUSH=1\r\n");	//listen for incoming connections
		if (gsmInfo.socket == 1){
 8009e3a:	4b32      	ldr	r3, [pc, #200]	; (8009f04 <GSM_Service+0xa6c>)
 8009e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d110      	bne.n	8009e64 <GSM_Service+0x9cc>
			Debug_Send("Send GPRS data!\n");
 8009e42:	4b4b      	ldr	r3, [pc, #300]	; (8009f70 <GSM_Service+0xad8>)
 8009e44:	0018      	movs	r0, r3
 8009e46:	f000 fb99 	bl	800a57c <Debug_Send>
			GSM_Send("AT+QISEND\r");
 8009e4a:	4b4a      	ldr	r3, [pc, #296]	; (8009f74 <GSM_Service+0xadc>)
 8009e4c:	0018      	movs	r0, r3
 8009e4e:	f000 fb43 	bl	800a4d8 <GSM_Send>

			/*GSM_Send(tempGPRS);
			GSM_Send("\032\r");*/
			gsmInfo.dataFlag = 0;
 8009e52:	4a2c      	ldr	r2, [pc, #176]	; (8009f04 <GSM_Service+0xa6c>)
 8009e54:	23aa      	movs	r3, #170	; 0xaa
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	2100      	movs	r1, #0
 8009e5a:	50d1      	str	r1, [r2, r3]
			gsmState = 0;
 8009e5c:	4b41      	ldr	r3, [pc, #260]	; (8009f64 <GSM_Service+0xacc>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	701a      	strb	r2, [r3, #0]
		}
		else{
			gsmState = GPRS_Off;
		}
		break;
 8009e62:	e248      	b.n	800a2f6 <GSM_Service+0xe5e>
			gsmState = GPRS_Off;
 8009e64:	4b3f      	ldr	r3, [pc, #252]	; (8009f64 <GSM_Service+0xacc>)
 8009e66:	2214      	movs	r2, #20
 8009e68:	701a      	strb	r2, [r3, #0]
		break;
 8009e6a:	e244      	b.n	800a2f6 <GSM_Service+0xe5e>
	case GPRS_SendMode:
		GSM_Send("AT+ATO\r");
 8009e6c:	4b42      	ldr	r3, [pc, #264]	; (8009f78 <GSM_Service+0xae0>)
 8009e6e:	0018      	movs	r0, r3
 8009e70:	f000 fb32 	bl	800a4d8 <GSM_Send>

		break;
 8009e74:	e23f      	b.n	800a2f6 <GSM_Service+0xe5e>
	case GPRS_SendModeTRans:
		GSM_Send("test\r");
 8009e76:	4b41      	ldr	r3, [pc, #260]	; (8009f7c <GSM_Service+0xae4>)
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f000 fb2d 	bl	800a4d8 <GSM_Send>

		break;
 8009e7e:	e23a      	b.n	800a2f6 <GSM_Service+0xe5e>
	case AutoBaud:
		Debug_Send("Auto baud\r\n");
 8009e80:	4b3f      	ldr	r3, [pc, #252]	; (8009f80 <GSM_Service+0xae8>)
 8009e82:	0018      	movs	r0, r3
 8009e84:	f000 fb7a 	bl	800a57c <Debug_Send>
		GSM_Send("AT\r\n");
 8009e88:	4b3e      	ldr	r3, [pc, #248]	; (8009f84 <GSM_Service+0xaec>)
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	f000 fb24 	bl	800a4d8 <GSM_Send>

		break;
 8009e90:	e231      	b.n	800a2f6 <GSM_Service+0xe5e>
			gsmState = Search;
			GSM_ON = 0;
		}
		break;*/
	case FTP_User:
		Debug_Send("Set FTP user\r\n");
 8009e92:	4b3d      	ldr	r3, [pc, #244]	; (8009f88 <GSM_Service+0xaf0>)
 8009e94:	0018      	movs	r0, r3
 8009e96:	f000 fb71 	bl	800a57c <Debug_Send>
		GSM_Send("AT+QFTPUSER=\"testuser\"\r\n");
 8009e9a:	4b3c      	ldr	r3, [pc, #240]	; (8009f8c <GSM_Service+0xaf4>)
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	f000 fb1b 	bl	800a4d8 <GSM_Send>
		gsmState = FTP_Password;
 8009ea2:	4b30      	ldr	r3, [pc, #192]	; (8009f64 <GSM_Service+0xacc>)
 8009ea4:	2223      	movs	r2, #35	; 0x23
 8009ea6:	701a      	strb	r2, [r3, #0]

		break;
 8009ea8:	e225      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FTP_Password:
		Debug_Send("Set FTP password\r\n");
 8009eaa:	4b39      	ldr	r3, [pc, #228]	; (8009f90 <GSM_Service+0xaf8>)
 8009eac:	0018      	movs	r0, r3
 8009eae:	f000 fb65 	bl	800a57c <Debug_Send>
		GSM_Send("AT+QFTPPASS=\"admin\"\r\n");
 8009eb2:	4b38      	ldr	r3, [pc, #224]	; (8009f94 <GSM_Service+0xafc>)
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	f000 fb0f 	bl	800a4d8 <GSM_Send>
		gsmState = FTP_Config;
 8009eba:	4b2a      	ldr	r3, [pc, #168]	; (8009f64 <GSM_Service+0xacc>)
 8009ebc:	222a      	movs	r2, #42	; 0x2a
 8009ebe:	701a      	strb	r2, [r3, #0]
		//sendSMS("0720631005", "test SIM IMC");
		gsmState = 0;
 8009ec0:	4b28      	ldr	r3, [pc, #160]	; (8009f64 <GSM_Service+0xacc>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	701a      	strb	r2, [r3, #0]
		//gsmState = SMS_Send;
		break;
 8009ec6:	e216      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FTP_Config:
		Debug_Send("FTP config\r\n");
 8009ec8:	4b33      	ldr	r3, [pc, #204]	; (8009f98 <GSM_Service+0xb00>)
 8009eca:	0018      	movs	r0, r3
 8009ecc:	f000 fb56 	bl	800a57c <Debug_Send>
		//GSM_Send("AT+QFTPCFG=4,\"/COM/\"\r\n");
		GSM_Send("AT+QFTPCFG=4,\"/RAM/\"\r\n");
 8009ed0:	4b32      	ldr	r3, [pc, #200]	; (8009f9c <GSM_Service+0xb04>)
 8009ed2:	0018      	movs	r0, r3
 8009ed4:	f000 fb00 	bl	800a4d8 <GSM_Send>
		//GSM_Send("AT+QFTPCFG=3\r\n");
		gsmState = FTP_Config1;
 8009ed8:	4b22      	ldr	r3, [pc, #136]	; (8009f64 <GSM_Service+0xacc>)
 8009eda:	222b      	movs	r2, #43	; 0x2b
 8009edc:	701a      	strb	r2, [r3, #0]
		break;
 8009ede:	e20a      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FTP_Config1:
		Debug_Send("FTP config1\r\n");
 8009ee0:	4b2f      	ldr	r3, [pc, #188]	; (8009fa0 <GSM_Service+0xb08>)
 8009ee2:	0018      	movs	r0, r3
 8009ee4:	f000 fb4a 	bl	800a57c <Debug_Send>
		GSM_Send("AT+QFTPCFG=1,1\r\n");
 8009ee8:	4b2e      	ldr	r3, [pc, #184]	; (8009fa4 <GSM_Service+0xb0c>)
 8009eea:	0018      	movs	r0, r3
 8009eec:	f000 faf4 	bl	800a4d8 <GSM_Send>
		gsmState = FTP_Download;
 8009ef0:	4b1c      	ldr	r3, [pc, #112]	; (8009f64 <GSM_Service+0xacc>)
 8009ef2:	2227      	movs	r2, #39	; 0x27
 8009ef4:	701a      	strb	r2, [r3, #0]
		break;
 8009ef6:	e1fe      	b.n	800a2f6 <GSM_Service+0xe5e>
 8009ef8:	200014c8 	.word	0x200014c8
 8009efc:	08013200 	.word	0x08013200
 8009f00:	200016bc 	.word	0x200016bc
 8009f04:	20001628 	.word	0x20001628
 8009f08:	08012fd4 	.word	0x08012fd4
 8009f0c:	08013208 	.word	0x08013208
 8009f10:	200016da 	.word	0x200016da
 8009f14:	08013210 	.word	0x08013210
 8009f18:	200016ee 	.word	0x200016ee
 8009f1c:	0801321c 	.word	0x0801321c
 8009f20:	08013224 	.word	0x08013224
 8009f24:	2000172c 	.word	0x2000172c
 8009f28:	0801322c 	.word	0x0801322c
 8009f2c:	20001674 	.word	0x20001674
 8009f30:	08013124 	.word	0x08013124
 8009f34:	200000d0 	.word	0x200000d0
 8009f38:	080142b8 	.word	0x080142b8
 8009f3c:	08013234 	.word	0x08013234
 8009f40:	200014f0 	.word	0x200014f0
 8009f44:	08013244 	.word	0x08013244
 8009f48:	20001310 	.word	0x20001310
 8009f4c:	08013258 	.word	0x08013258
 8009f50:	200014f8 	.word	0x200014f8
 8009f54:	20001620 	.word	0x20001620
 8009f58:	08013260 	.word	0x08013260
 8009f5c:	08013270 	.word	0x08013270
 8009f60:	20000184 	.word	0x20000184
 8009f64:	200000c0 	.word	0x200000c0
 8009f68:	08013278 	.word	0x08013278
 8009f6c:	08013288 	.word	0x08013288
 8009f70:	0801328c 	.word	0x0801328c
 8009f74:	080132a0 	.word	0x080132a0
 8009f78:	080132ac 	.word	0x080132ac
 8009f7c:	080132b4 	.word	0x080132b4
 8009f80:	080132bc 	.word	0x080132bc
 8009f84:	080132c8 	.word	0x080132c8
 8009f88:	080132d0 	.word	0x080132d0
 8009f8c:	080132e0 	.word	0x080132e0
 8009f90:	080132fc 	.word	0x080132fc
 8009f94:	08013310 	.word	0x08013310
 8009f98:	08013328 	.word	0x08013328
 8009f9c:	08013338 	.word	0x08013338
 8009fa0:	08013350 	.word	0x08013350
 8009fa4:	08013360 	.word	0x08013360
	case FTP_Open:
		Debug_Send("FTP open\r\n");
 8009fa8:	4bb0      	ldr	r3, [pc, #704]	; (800a26c <GSM_Service+0xdd4>)
 8009faa:	0018      	movs	r0, r3
 8009fac:	f000 fae6 	bl	800a57c <Debug_Send>
		GSM_Send("AT+QFTPOPEN=\"196.40.108.169\",\"21\"\r\n");
 8009fb0:	4baf      	ldr	r3, [pc, #700]	; (800a270 <GSM_Service+0xdd8>)
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f000 fa90 	bl	800a4d8 <GSM_Send>
		gsmInfo.FTP_Open = 1;
 8009fb8:	4aae      	ldr	r2, [pc, #696]	; (800a274 <GSM_Service+0xddc>)
 8009fba:	23b2      	movs	r3, #178	; 0xb2
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	50d1      	str	r1, [r2, r3]
		gsmState = FTP_Status;
 8009fc2:	4bad      	ldr	r3, [pc, #692]	; (800a278 <GSM_Service+0xde0>)
 8009fc4:	2225      	movs	r2, #37	; 0x25
 8009fc6:	701a      	strb	r2, [r3, #0]
		//gsmState = 0;
		break;
 8009fc8:	e195      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FTP_Status:
		Debug_Send("FTP status\r\n");
 8009fca:	4bac      	ldr	r3, [pc, #688]	; (800a27c <GSM_Service+0xde4>)
 8009fcc:	0018      	movs	r0, r3
 8009fce:	f000 fad5 	bl	800a57c <Debug_Send>
		GSM_Send("AT+QFTPSTAT\r\n");
 8009fd2:	4bab      	ldr	r3, [pc, #684]	; (800a280 <GSM_Service+0xde8>)
 8009fd4:	0018      	movs	r0, r3
 8009fd6:	f000 fa7f 	bl	800a4d8 <GSM_Send>
		gsmState = 0;
 8009fda:	4ba7      	ldr	r3, [pc, #668]	; (800a278 <GSM_Service+0xde0>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	701a      	strb	r2, [r3, #0]
		break;
 8009fe0:	e189      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FTP_Path:
		Debug_Send("FTP path\r\n");
 8009fe2:	4ba8      	ldr	r3, [pc, #672]	; (800a284 <GSM_Service+0xdec>)
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f000 fac9 	bl	800a57c <Debug_Send>
		GSM_Send("AT+QFTPPATH=\"/srv/ftp/\"\r\n");
 8009fea:	4ba7      	ldr	r3, [pc, #668]	; (800a288 <GSM_Service+0xdf0>)
 8009fec:	0018      	movs	r0, r3
 8009fee:	f000 fa73 	bl	800a4d8 <GSM_Send>
		gsmState = FTP_List;
 8009ff2:	4ba1      	ldr	r3, [pc, #644]	; (800a278 <GSM_Service+0xde0>)
 8009ff4:	2229      	movs	r2, #41	; 0x29
 8009ff6:	701a      	strb	r2, [r3, #0]
		gsmState = FTP_Config;
 8009ff8:	4b9f      	ldr	r3, [pc, #636]	; (800a278 <GSM_Service+0xde0>)
 8009ffa:	222a      	movs	r2, #42	; 0x2a
 8009ffc:	701a      	strb	r2, [r3, #0]
		break;
 8009ffe:	e17a      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FTP_List:
		Debug_Send("FTP list\r\n");
 800a000:	4ba2      	ldr	r3, [pc, #648]	; (800a28c <GSM_Service+0xdf4>)
 800a002:	0018      	movs	r0, r3
 800a004:	f000 faba 	bl	800a57c <Debug_Send>
		GSM_Send("AT+QFTPNLST\r\n");
 800a008:	4ba1      	ldr	r3, [pc, #644]	; (800a290 <GSM_Service+0xdf8>)
 800a00a:	0018      	movs	r0, r3
 800a00c:	f000 fa64 	bl	800a4d8 <GSM_Send>
		gsmState = 0;
 800a010:	4b99      	ldr	r3, [pc, #612]	; (800a278 <GSM_Service+0xde0>)
 800a012:	2200      	movs	r2, #0
 800a014:	701a      	strb	r2, [r3, #0]
		break;
 800a016:	e16e      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FTP_Size:
		Debug_Send("FTP size\r\n");
 800a018:	4b9e      	ldr	r3, [pc, #632]	; (800a294 <GSM_Service+0xdfc>)
 800a01a:	0018      	movs	r0, r3
 800a01c:	f000 faae 	bl	800a57c <Debug_Send>
		//GSM_Send("AT+QFTPSIZE=\"/srv/ftp/Test.csv\"\r\n");
		//GSM_Send("AT+QFTPSIZE=\"/srv/ftp/GSM_Test.bin\"\r\n");
		GSM_Send("AT+QFTPSIZE=\"/srv/ftp/M0_Test.hex\"\r\n");
 800a020:	4b9d      	ldr	r3, [pc, #628]	; (800a298 <GSM_Service+0xe00>)
 800a022:	0018      	movs	r0, r3
 800a024:	f000 fa58 	bl	800a4d8 <GSM_Send>
		gsmState = 0;
 800a028:	4b93      	ldr	r3, [pc, #588]	; (800a278 <GSM_Service+0xde0>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	701a      	strb	r2, [r3, #0]
		break;
 800a02e:	e162      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FTP_Download:
		Debug_Send("Get FTP\r\n");
 800a030:	4b9a      	ldr	r3, [pc, #616]	; (800a29c <GSM_Service+0xe04>)
 800a032:	0018      	movs	r0, r3
 800a034:	f000 faa2 	bl	800a57c <Debug_Send>
		//GSM_Send("AT+QFTPGET=\"Test.csv\"\r\n");
		//GSM_Send("AT+QFTPGET=\"/srv/ftp/GSM_Test.bin\",50000\r\n");
		GSM_Send("AT+QFTPGET=\"GSM_Test2.bin\"\r\n");
 800a038:	4b99      	ldr	r3, [pc, #612]	; (800a2a0 <GSM_Service+0xe08>)
 800a03a:	0018      	movs	r0, r3
 800a03c:	f000 fa4c 	bl	800a4d8 <GSM_Send>
		//GSM_Send("AT+QFTPGET=\"M0_Test.hex\"\r\n");
		//GSM_Send("AT+QFTPGET=\"M0_Test.bin\"\r\n");
		//GSM_Send("AT+QFTPGET=\"M0_Test-B611.hex\"\r\n");
		//GSM_Send("AT+QFTPGET=\"hexTest.hex\"\r\n");
		gsmState = FS_Storage;
 800a040:	4b8d      	ldr	r3, [pc, #564]	; (800a278 <GSM_Service+0xde0>)
 800a042:	222d      	movs	r2, #45	; 0x2d
 800a044:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 800a046:	4b8c      	ldr	r3, [pc, #560]	; (800a278 <GSM_Service+0xde0>)
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
		break;
 800a04c:	e153      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FTP_Close:
		Debug_Send("FTP close\r\n");
 800a04e:	4b95      	ldr	r3, [pc, #596]	; (800a2a4 <GSM_Service+0xe0c>)
 800a050:	0018      	movs	r0, r3
 800a052:	f000 fa93 	bl	800a57c <Debug_Send>
		GSM_Send("AT+QFTPCLOSE\r\n");
 800a056:	4b94      	ldr	r3, [pc, #592]	; (800a2a8 <GSM_Service+0xe10>)
 800a058:	0018      	movs	r0, r3
 800a05a:	f000 fa3d 	bl	800a4d8 <GSM_Send>
		//Debug_Send("Jump to bootloader\r\n");
		gsmState = 0;
 800a05e:	4b86      	ldr	r3, [pc, #536]	; (800a278 <GSM_Service+0xde0>)
 800a060:	2200      	movs	r2, #0
 800a062:	701a      	strb	r2, [r3, #0]
		//NVIC_SystemReset();
		/*uint32_t addr = *(uint32_t*) (resetAddr + 4);	//get PC location
		resetFunc = (fPointer) addr;
		__set_MSP(*(uint32_t*) resetAddr);
		resetFunc();*/
		break;
 800a064:	e147      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FS_Storage:
		gsmInfo.FTP_Data = 0;
 800a066:	4a83      	ldr	r2, [pc, #524]	; (800a274 <GSM_Service+0xddc>)
 800a068:	23b8      	movs	r3, #184	; 0xb8
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	2100      	movs	r1, #0
 800a06e:	50d1      	str	r1, [r2, r3]
		GSM_Send("AT+QFLDS=\"RAM\"\r\n");
 800a070:	4b8e      	ldr	r3, [pc, #568]	; (800a2ac <GSM_Service+0xe14>)
 800a072:	0018      	movs	r0, r3
 800a074:	f000 fa30 	bl	800a4d8 <GSM_Send>
		gsmState = 0;
 800a078:	4b7f      	ldr	r3, [pc, #508]	; (800a278 <GSM_Service+0xde0>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	701a      	strb	r2, [r3, #0]
		break;
 800a07e:	e13a      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FS_SList:

		GSM_Send("AT+QFLST=\"RAM:*\"\r\n");
 800a080:	4b8b      	ldr	r3, [pc, #556]	; (800a2b0 <GSM_Service+0xe18>)
 800a082:	0018      	movs	r0, r3
 800a084:	f000 fa28 	bl	800a4d8 <GSM_Send>
		gsmState = 0;
 800a088:	4b7b      	ldr	r3, [pc, #492]	; (800a278 <GSM_Service+0xde0>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	701a      	strb	r2, [r3, #0]
		break;
 800a08e:	e132      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FS_Download:
		//GSM_Send("AT+QFDWL=\"RAM:Test.csv\"\r\n");
		GSM_Send("AT+QFDWL=\"RAM:M0_Test.bin\"\r\n");
 800a090:	4b88      	ldr	r3, [pc, #544]	; (800a2b4 <GSM_Service+0xe1c>)
 800a092:	0018      	movs	r0, r3
 800a094:	f000 fa20 	bl	800a4d8 <GSM_Send>
		gsmState = 0;
 800a098:	4b77      	ldr	r3, [pc, #476]	; (800a278 <GSM_Service+0xde0>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	701a      	strb	r2, [r3, #0]
		break;
 800a09e:	e12a      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FS_Open:
		//GSM_Send("AT+QFOPEN=\"RAM:Test.csv\",0\r\n");
		//GSM_Send("AT+QFOPEN=\"RAM:M0_Test.hex\",0\r\n");
		//GSM_Send("AT+QFOPEN=\"M0_Test.bin\"\r\n");
		GSM_Send("AT+QFOPEN=\"GSM_Test2.bin\"\r\n");
 800a0a0:	4b85      	ldr	r3, [pc, #532]	; (800a2b8 <GSM_Service+0xe20>)
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	f000 fa18 	bl	800a4d8 <GSM_Send>
		//GSM_Send("AT+QFOPEN=\"RAM:M0_Test-B611.hex\",0\r\n");
		//GSM_Send("AT+QFOPEN=\"hexTest.hex\",0\r\n");
		gsmState = 0;
 800a0a8:	4b73      	ldr	r3, [pc, #460]	; (800a278 <GSM_Service+0xde0>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	701a      	strb	r2, [r3, #0]
		break;
 800a0ae:	e122      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FS_Seek:
		Debug_Send("Seek file\r\n");
 800a0b0:	4b82      	ldr	r3, [pc, #520]	; (800a2bc <GSM_Service+0xe24>)
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	f000 fa62 	bl	800a57c <Debug_Send>
		//Debug_Send("AT+QFSEEK=");
		//Debug_Send(FID);
		//Debug_Send(",0,0\r\n");
		strcpy(temp,"AT+QFSEEK=");
 800a0b8:	003b      	movs	r3, r7
 800a0ba:	4a81      	ldr	r2, [pc, #516]	; (800a2c0 <GSM_Service+0xe28>)
 800a0bc:	ca03      	ldmia	r2!, {r0, r1}
 800a0be:	c303      	stmia	r3!, {r0, r1}
 800a0c0:	8811      	ldrh	r1, [r2, #0]
 800a0c2:	8019      	strh	r1, [r3, #0]
 800a0c4:	7892      	ldrb	r2, [r2, #2]
 800a0c6:	709a      	strb	r2, [r3, #2]
		strcat(temp,FID);
 800a0c8:	4a7e      	ldr	r2, [pc, #504]	; (800a2c4 <GSM_Service+0xe2c>)
 800a0ca:	003b      	movs	r3, r7
 800a0cc:	0011      	movs	r1, r2
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	f008 fa6e 	bl	80125b0 <strcat>
		strcat(temp,",");
 800a0d4:	003b      	movs	r3, r7
 800a0d6:	0018      	movs	r0, r3
 800a0d8:	f7ff f820 	bl	800911c <strlen>
 800a0dc:	0003      	movs	r3, r0
 800a0de:	001a      	movs	r2, r3
 800a0e0:	003b      	movs	r3, r7
 800a0e2:	189a      	adds	r2, r3, r2
 800a0e4:	4b78      	ldr	r3, [pc, #480]	; (800a2c8 <GSM_Service+0xe30>)
 800a0e6:	0010      	movs	r0, r2
 800a0e8:	0019      	movs	r1, r3
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	001a      	movs	r2, r3
 800a0ee:	f008 fa2d 	bl	801254c <memcpy>
		myLongStr((long)ftpseek,temp1,11,10);
 800a0f2:	4b76      	ldr	r3, [pc, #472]	; (800a2cc <GSM_Service+0xe34>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	4975      	ldr	r1, [pc, #468]	; (800a2d0 <GSM_Service+0xe38>)
 800a0fa:	230a      	movs	r3, #10
 800a0fc:	220b      	movs	r2, #11
 800a0fe:	f003 f99b 	bl	800d438 <myLongStr>
		strcat(temp,temp1);
 800a102:	4a73      	ldr	r2, [pc, #460]	; (800a2d0 <GSM_Service+0xe38>)
 800a104:	003b      	movs	r3, r7
 800a106:	0011      	movs	r1, r2
 800a108:	0018      	movs	r0, r3
 800a10a:	f008 fa51 	bl	80125b0 <strcat>
		//strcat(temp,",0\r\n");

		strcat(temp,"\r\n");
 800a10e:	003b      	movs	r3, r7
 800a110:	0018      	movs	r0, r3
 800a112:	f7ff f803 	bl	800911c <strlen>
 800a116:	0003      	movs	r3, r0
 800a118:	001a      	movs	r2, r3
 800a11a:	003b      	movs	r3, r7
 800a11c:	189a      	adds	r2, r3, r2
 800a11e:	4b6d      	ldr	r3, [pc, #436]	; (800a2d4 <GSM_Service+0xe3c>)
 800a120:	0010      	movs	r0, r2
 800a122:	0019      	movs	r1, r3
 800a124:	2303      	movs	r3, #3
 800a126:	001a      	movs	r2, r3
 800a128:	f008 fa10 	bl	801254c <memcpy>
		//sprintf(temp, "AT+QFSEEK=%s,%i\r\n",FID,(int)ftpseek);
		//Debug_Send(temp);
		GSM_Send(temp);
 800a12c:	003b      	movs	r3, r7
 800a12e:	0018      	movs	r0, r3
 800a130:	f000 f9d2 	bl	800a4d8 <GSM_Send>
		/*GSM_Send("AT+QFSEEK=");
		GSM_Send(FID);
		GSM_Send(",0\r\n");*/
		gsmInfo.FS_SeekFlag = 1;
 800a134:	4a4f      	ldr	r2, [pc, #316]	; (800a274 <GSM_Service+0xddc>)
 800a136:	23b4      	movs	r3, #180	; 0xb4
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	2101      	movs	r1, #1
 800a13c:	50d1      	str	r1, [r2, r3]
		gsmState = 0;
 800a13e:	4b4e      	ldr	r3, [pc, #312]	; (800a278 <GSM_Service+0xde0>)
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]
		break;
 800a144:	e0d7      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FS_Read:
		//Debug_Send("Read file\r\n");
		//GSM_Send("AT+QFREAD=");
		//GSM_Send(FID);
		strcpy(temp,"AT+QFREAD=");
 800a146:	003b      	movs	r3, r7
 800a148:	4a63      	ldr	r2, [pc, #396]	; (800a2d8 <GSM_Service+0xe40>)
 800a14a:	ca03      	ldmia	r2!, {r0, r1}
 800a14c:	c303      	stmia	r3!, {r0, r1}
 800a14e:	8811      	ldrh	r1, [r2, #0]
 800a150:	8019      	strh	r1, [r3, #0]
 800a152:	7892      	ldrb	r2, [r2, #2]
 800a154:	709a      	strb	r2, [r3, #2]
		strcat(temp,FID);
 800a156:	4a5b      	ldr	r2, [pc, #364]	; (800a2c4 <GSM_Service+0xe2c>)
 800a158:	003b      	movs	r3, r7
 800a15a:	0011      	movs	r1, r2
 800a15c:	0018      	movs	r0, r3
 800a15e:	f008 fa27 	bl	80125b0 <strcat>
		strcat(temp,",");
 800a162:	003b      	movs	r3, r7
 800a164:	0018      	movs	r0, r3
 800a166:	f7fe ffd9 	bl	800911c <strlen>
 800a16a:	0003      	movs	r3, r0
 800a16c:	001a      	movs	r2, r3
 800a16e:	003b      	movs	r3, r7
 800a170:	189a      	adds	r2, r3, r2
 800a172:	4b55      	ldr	r3, [pc, #340]	; (800a2c8 <GSM_Service+0xe30>)
 800a174:	0010      	movs	r0, r2
 800a176:	0019      	movs	r1, r3
 800a178:	2302      	movs	r3, #2
 800a17a:	001a      	movs	r2, r3
 800a17c:	f008 f9e6 	bl	801254c <memcpy>
		myLongStr(ftpPacket,temp1,10,10);
 800a180:	4b56      	ldr	r3, [pc, #344]	; (800a2dc <GSM_Service+0xe44>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	0018      	movs	r0, r3
 800a186:	4952      	ldr	r1, [pc, #328]	; (800a2d0 <GSM_Service+0xe38>)
 800a188:	230a      	movs	r3, #10
 800a18a:	220a      	movs	r2, #10
 800a18c:	f003 f954 	bl	800d438 <myLongStr>
		strcat(temp,temp1);
 800a190:	4a4f      	ldr	r2, [pc, #316]	; (800a2d0 <GSM_Service+0xe38>)
 800a192:	003b      	movs	r3, r7
 800a194:	0011      	movs	r1, r2
 800a196:	0018      	movs	r0, r3
 800a198:	f008 fa0a 	bl	80125b0 <strcat>
		strcat(temp,"\r\n");
 800a19c:	003b      	movs	r3, r7
 800a19e:	0018      	movs	r0, r3
 800a1a0:	f7fe ffbc 	bl	800911c <strlen>
 800a1a4:	0003      	movs	r3, r0
 800a1a6:	001a      	movs	r2, r3
 800a1a8:	003b      	movs	r3, r7
 800a1aa:	189a      	adds	r2, r3, r2
 800a1ac:	4b49      	ldr	r3, [pc, #292]	; (800a2d4 <GSM_Service+0xe3c>)
 800a1ae:	0010      	movs	r0, r2
 800a1b0:	0019      	movs	r1, r3
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	001a      	movs	r2, r3
 800a1b6:	f008 f9c9 	bl	801254c <memcpy>
		//Debug_Send(temp);
		GSM_Send(temp);
 800a1ba:	003b      	movs	r3, r7
 800a1bc:	0018      	movs	r0, r3
 800a1be:	f000 f98b 	bl	800a4d8 <GSM_Send>


		ftpRead = 1;
 800a1c2:	4b47      	ldr	r3, [pc, #284]	; (800a2e0 <GSM_Service+0xe48>)
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	701a      	strb	r2, [r3, #0]
		//if ((filesize - ftpseek) < 60)
		//if ((filesize - ftpseek) < 60)
		gsmState = 0;
 800a1c8:	4b2b      	ldr	r3, [pc, #172]	; (800a278 <GSM_Service+0xde0>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	701a      	strb	r2, [r3, #0]
		gsmState = FS_Seek;
 800a1ce:	4b2a      	ldr	r3, [pc, #168]	; (800a278 <GSM_Service+0xde0>)
 800a1d0:	2230      	movs	r2, #48	; 0x30
 800a1d2:	701a      	strb	r2, [r3, #0]
		//ftpseek += ftpinc;
		ftpseek += ftpPacket;
 800a1d4:	4b3d      	ldr	r3, [pc, #244]	; (800a2cc <GSM_Service+0xe34>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	4b40      	ldr	r3, [pc, #256]	; (800a2dc <GSM_Service+0xe44>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	18d2      	adds	r2, r2, r3
 800a1de:	4b3b      	ldr	r3, [pc, #236]	; (800a2cc <GSM_Service+0xe34>)
 800a1e0:	601a      	str	r2, [r3, #0]
		/*if (ftpseek > filesize) {
			ftpseek -= ftpinc;
			ftpPacket = filesize - ftpseek;
			gsmState = 0;
		}*/
		break;
 800a1e2:	e088      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FS_Close:
		Debug_Send("Close file\r\n");
 800a1e4:	4b3f      	ldr	r3, [pc, #252]	; (800a2e4 <GSM_Service+0xe4c>)
 800a1e6:	0018      	movs	r0, r3
 800a1e8:	f000 f9c8 	bl	800a57c <Debug_Send>
		strcpy(temp,"AT+QFCLOSE=");
 800a1ec:	003b      	movs	r3, r7
 800a1ee:	4a3e      	ldr	r2, [pc, #248]	; (800a2e8 <GSM_Service+0xe50>)
 800a1f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 800a1f2:	c313      	stmia	r3!, {r0, r1, r4}
		strcat(temp,FID);
 800a1f4:	4a33      	ldr	r2, [pc, #204]	; (800a2c4 <GSM_Service+0xe2c>)
 800a1f6:	003b      	movs	r3, r7
 800a1f8:	0011      	movs	r1, r2
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	f008 f9d8 	bl	80125b0 <strcat>
		strcat(temp,"\r\n");
 800a200:	003b      	movs	r3, r7
 800a202:	0018      	movs	r0, r3
 800a204:	f7fe ff8a 	bl	800911c <strlen>
 800a208:	0003      	movs	r3, r0
 800a20a:	001a      	movs	r2, r3
 800a20c:	003b      	movs	r3, r7
 800a20e:	189a      	adds	r2, r3, r2
 800a210:	4b30      	ldr	r3, [pc, #192]	; (800a2d4 <GSM_Service+0xe3c>)
 800a212:	0010      	movs	r0, r2
 800a214:	0019      	movs	r1, r3
 800a216:	2303      	movs	r3, #3
 800a218:	001a      	movs	r2, r3
 800a21a:	f008 f997 	bl	801254c <memcpy>
		Debug_Send(temp);
 800a21e:	003b      	movs	r3, r7
 800a220:	0018      	movs	r0, r3
 800a222:	f000 f9ab 	bl	800a57c <Debug_Send>
		GSM_Send(temp);
 800a226:	003b      	movs	r3, r7
 800a228:	0018      	movs	r0, r3
 800a22a:	f000 f955 	bl	800a4d8 <GSM_Send>
		ftpseek = 0;
 800a22e:	4b27      	ldr	r3, [pc, #156]	; (800a2cc <GSM_Service+0xe34>)
 800a230:	2200      	movs	r2, #0
 800a232:	601a      	str	r2, [r3, #0]
		/*flashRead(1000, temp, gsmInfo.FTP_Size);	//Service , Message , Max , Min , Average , Count , frequency ,Timed
		Debug_Send("Flash:");
		Debug_Send(temp);
		Debug_Send("\r\n");*/
		//flashWrite(900,"U",1);
		gsmInfo.FTP_Size = 0;
 800a234:	4a0f      	ldr	r2, [pc, #60]	; (800a274 <GSM_Service+0xddc>)
 800a236:	23bc      	movs	r3, #188	; 0xbc
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	2100      	movs	r1, #0
 800a23c:	50d1      	str	r1, [r2, r3]

		gsmState = FlashWrite;
 800a23e:	4b0e      	ldr	r3, [pc, #56]	; (800a278 <GSM_Service+0xde0>)
 800a240:	2234      	movs	r2, #52	; 0x34
 800a242:	701a      	strb	r2, [r3, #0]
		break;
 800a244:	e057      	b.n	800a2f6 <GSM_Service+0xe5e>
	case FlashWrite:
		Debug_Send("Set flash flag\r\n");
 800a246:	4b29      	ldr	r3, [pc, #164]	; (800a2ec <GSM_Service+0xe54>)
 800a248:	0018      	movs	r0, r3
 800a24a:	f000 f997 	bl	800a57c <Debug_Send>
		//flashWrite(900,"UL",2);
		Debug_Send("Done\r\n");
 800a24e:	4b28      	ldr	r3, [pc, #160]	; (800a2f0 <GSM_Service+0xe58>)
 800a250:	0018      	movs	r0, r3
 800a252:	f000 f993 	bl	800a57c <Debug_Send>
		gsmState = FTP_Close;
 800a256:	4b08      	ldr	r3, [pc, #32]	; (800a278 <GSM_Service+0xde0>)
 800a258:	2226      	movs	r2, #38	; 0x26
 800a25a:	701a      	strb	r2, [r3, #0]
		break;
 800a25c:	e04b      	b.n	800a2f6 <GSM_Service+0xe5e>
	case MQTT_Connect:
		//connect("test1");
		gsmState = 0;
 800a25e:	4b06      	ldr	r3, [pc, #24]	; (800a278 <GSM_Service+0xde0>)
 800a260:	2200      	movs	r2, #0
 800a262:	701a      	strb	r2, [r3, #0]
		break;
 800a264:	e047      	b.n	800a2f6 <GSM_Service+0xe5e>


		break;
	default:

		break;
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	e045      	b.n	800a2f6 <GSM_Service+0xe5e>
 800a26a:	46c0      	nop			; (mov r8, r8)
 800a26c:	08013374 	.word	0x08013374
 800a270:	08013380 	.word	0x08013380
 800a274:	20001628 	.word	0x20001628
 800a278:	200000c0 	.word	0x200000c0
 800a27c:	080133a4 	.word	0x080133a4
 800a280:	080133b4 	.word	0x080133b4
 800a284:	080133c4 	.word	0x080133c4
 800a288:	080133d0 	.word	0x080133d0
 800a28c:	080133ec 	.word	0x080133ec
 800a290:	080133f8 	.word	0x080133f8
 800a294:	08013408 	.word	0x08013408
 800a298:	08013414 	.word	0x08013414
 800a29c:	0801343c 	.word	0x0801343c
 800a2a0:	08013448 	.word	0x08013448
 800a2a4:	08013468 	.word	0x08013468
 800a2a8:	08013474 	.word	0x08013474
 800a2ac:	08013484 	.word	0x08013484
 800a2b0:	08013498 	.word	0x08013498
 800a2b4:	080134ac 	.word	0x080134ac
 800a2b8:	080134cc 	.word	0x080134cc
 800a2bc:	080134e8 	.word	0x080134e8
 800a2c0:	080134f4 	.word	0x080134f4
 800a2c4:	20001890 	.word	0x20001890
 800a2c8:	08012fd4 	.word	0x08012fd4
 800a2cc:	200000c4 	.word	0x200000c4
 800a2d0:	20001ea8 	.word	0x20001ea8
 800a2d4:	08012fc4 	.word	0x08012fc4
 800a2d8:	08013500 	.word	0x08013500
 800a2dc:	200000cc 	.word	0x200000cc
 800a2e0:	20001888 	.word	0x20001888
 800a2e4:	0801350c 	.word	0x0801350c
 800a2e8:	0801351c 	.word	0x0801351c
 800a2ec:	08013528 	.word	0x08013528
 800a2f0:	0801353c 	.word	0x0801353c
		break;
 800a2f4:	46c0      	nop			; (mov r8, r8)
	//if (smsFlags.prompt == 1){

	//	smsFlags.prompt = 0;
	//}
	//if ((gsmTimer < 20)&&(smsFlags.signal == 1)){			//restarts cycle
		if (gsmInfo.socket == 0)gsmTimer++;
 800a2f6:	4b6a      	ldr	r3, [pc, #424]	; (800a4a0 <GSM_Service+0x1008>)
 800a2f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d104      	bne.n	800a308 <GSM_Service+0xe70>
 800a2fe:	4b69      	ldr	r3, [pc, #420]	; (800a4a4 <GSM_Service+0x100c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	4b67      	ldr	r3, [pc, #412]	; (800a4a4 <GSM_Service+0x100c>)
 800a306:	601a      	str	r2, [r3, #0]
		//strcat(count,"\r\n");
		//sprintf(count, "%d", gsmTimer);
		//sprintf(count, "%d", gsmState);
		//sendData(count,UART0);
		//sendData("\r\n",UART0);
		if (mqttFlag.subscribe == 1){
 800a308:	4b67      	ldr	r3, [pc, #412]	; (800a4a8 <GSM_Service+0x1010>)
 800a30a:	785b      	ldrb	r3, [r3, #1]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d104      	bne.n	800a31a <GSM_Service+0xe82>
			mqttInfo.timer++;
 800a310:	4b66      	ldr	r3, [pc, #408]	; (800a4ac <GSM_Service+0x1014>)
 800a312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	4b65      	ldr	r3, [pc, #404]	; (800a4ac <GSM_Service+0x1014>)
 800a318:	675a      	str	r2, [r3, #116]	; 0x74
		}
		//if ((mqttInfo.timer > 30)&&(gsmInfo.MQTT_Data == 0)){
			if (mqttInfo.timer > 30){		//test server
 800a31a:	4b64      	ldr	r3, [pc, #400]	; (800a4ac <GSM_Service+0x1014>)
 800a31c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a31e:	2b1e      	cmp	r3, #30
 800a320:	dd0c      	ble.n	800a33c <GSM_Service+0xea4>

			mqttInfo.timer = 0;
 800a322:	4b62      	ldr	r3, [pc, #392]	; (800a4ac <GSM_Service+0x1014>)
 800a324:	2200      	movs	r2, #0
 800a326:	675a      	str	r2, [r3, #116]	; 0x74
			//mqttState = Publish;
			//gsmState = GPRS_Send;
			//MQTT_Publish_F("tes1");

			mqttState = Publish;
 800a328:	4b61      	ldr	r3, [pc, #388]	; (800a4b0 <GSM_Service+0x1018>)
 800a32a:	2203      	movs	r2, #3
 800a32c:	701a      	strb	r2, [r3, #0]
			//mqttState = Ping;
			gsmState = GPRS_Send;
 800a32e:	4b61      	ldr	r3, [pc, #388]	; (800a4b4 <GSM_Service+0x101c>)
 800a330:	221c      	movs	r2, #28
 800a332:	701a      	strb	r2, [r3, #0]
			Debug_Send("MQTT Recy1\n");
 800a334:	4b60      	ldr	r3, [pc, #384]	; (800a4b8 <GSM_Service+0x1020>)
 800a336:	0018      	movs	r0, r3
 800a338:	f000 f920 	bl	800a57c <Debug_Send>
		}
		//if ((gsmTimer >= 20)&&(smsFlags.config == 1)&&(gsmInfo.socket == 0)){
		if ((gsmTimer >= 20)&&(smsFlags.config == 1)&&(gsmInfo.FTP_Open == 0)){
 800a33c:	4b59      	ldr	r3, [pc, #356]	; (800a4a4 <GSM_Service+0x100c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b13      	cmp	r3, #19
 800a342:	dd19      	ble.n	800a378 <GSM_Service+0xee0>
 800a344:	4b5d      	ldr	r3, [pc, #372]	; (800a4bc <GSM_Service+0x1024>)
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d115      	bne.n	800a378 <GSM_Service+0xee0>
 800a34c:	4a54      	ldr	r2, [pc, #336]	; (800a4a0 <GSM_Service+0x1008>)
 800a34e:	23b2      	movs	r3, #178	; 0xb2
 800a350:	005b      	lsls	r3, r3, #1
 800a352:	58d3      	ldr	r3, [r2, r3]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10f      	bne.n	800a378 <GSM_Service+0xee0>
			gsmTimer = 0;
 800a358:	4b52      	ldr	r3, [pc, #328]	; (800a4a4 <GSM_Service+0x100c>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]
			Debug_Send("Recy\n");
 800a35e:	4b58      	ldr	r3, [pc, #352]	; (800a4c0 <GSM_Service+0x1028>)
 800a360:	0018      	movs	r0, r3
 800a362:	f000 f90b 	bl	800a57c <Debug_Send>
			//gsmState = SMS_Check;
			gsmState = USSD;		//test
 800a366:	4b53      	ldr	r3, [pc, #332]	; (800a4b4 <GSM_Service+0x101c>)
 800a368:	220c      	movs	r2, #12
 800a36a:	701a      	strb	r2, [r3, #0]
			gsmState = SMS_Check;
 800a36c:	4b51      	ldr	r3, [pc, #324]	; (800a4b4 <GSM_Service+0x101c>)
 800a36e:	220e      	movs	r2, #14
 800a370:	701a      	strb	r2, [r3, #0]
			gsmState = Signal;
 800a372:	4b50      	ldr	r3, [pc, #320]	; (800a4b4 <GSM_Service+0x101c>)
 800a374:	2218      	movs	r2, #24
 800a376:	701a      	strb	r2, [r3, #0]

		}
		if ((smsFlags.gprsActive == 0)&&(smsFlags.signal == 1))gsmInfo.GPRStimer++;
 800a378:	4b50      	ldr	r3, [pc, #320]	; (800a4bc <GSM_Service+0x1024>)
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10c      	bne.n	800a39a <GSM_Service+0xf02>
 800a380:	4b4e      	ldr	r3, [pc, #312]	; (800a4bc <GSM_Service+0x1024>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d108      	bne.n	800a39a <GSM_Service+0xf02>
 800a388:	4a45      	ldr	r2, [pc, #276]	; (800a4a0 <GSM_Service+0x1008>)
 800a38a:	239e      	movs	r3, #158	; 0x9e
 800a38c:	005b      	lsls	r3, r3, #1
 800a38e:	58d3      	ldr	r3, [r2, r3]
 800a390:	1c59      	adds	r1, r3, #1
 800a392:	4a43      	ldr	r2, [pc, #268]	; (800a4a0 <GSM_Service+0x1008>)
 800a394:	239e      	movs	r3, #158	; 0x9e
 800a396:	005b      	lsls	r3, r3, #1
 800a398:	50d1      	str	r1, [r2, r3]
		//sprintf(temp, "gprs %i state %i v:%i c %i T:%i\r\n",gsmInfo.GPRStimer, gsmState, smsFlags.send, smsFlags.signal, gsmTimeout);

		if ((gsmInfo.GPRStimer >= gsmInfo.GPRSinterval)&&(gsmState == 0)&&(smsFlags.send == 0)&&(smsFlags.signal == 1)&&(gsmInfo.FTP_Open == 0)){
 800a39a:	4a41      	ldr	r2, [pc, #260]	; (800a4a0 <GSM_Service+0x1008>)
 800a39c:	239e      	movs	r3, #158	; 0x9e
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	58d2      	ldr	r2, [r2, r3]
 800a3a2:	493f      	ldr	r1, [pc, #252]	; (800a4a0 <GSM_Service+0x1008>)
 800a3a4:	23a0      	movs	r3, #160	; 0xa0
 800a3a6:	005b      	lsls	r3, r3, #1
 800a3a8:	58cb      	ldr	r3, [r1, r3]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	db2d      	blt.n	800a40a <GSM_Service+0xf72>
 800a3ae:	4b41      	ldr	r3, [pc, #260]	; (800a4b4 <GSM_Service+0x101c>)
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d129      	bne.n	800a40a <GSM_Service+0xf72>
 800a3b6:	4b41      	ldr	r3, [pc, #260]	; (800a4bc <GSM_Service+0x1024>)
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d125      	bne.n	800a40a <GSM_Service+0xf72>
 800a3be:	4b3f      	ldr	r3, [pc, #252]	; (800a4bc <GSM_Service+0x1024>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d121      	bne.n	800a40a <GSM_Service+0xf72>
 800a3c6:	4a36      	ldr	r2, [pc, #216]	; (800a4a0 <GSM_Service+0x1008>)
 800a3c8:	23b2      	movs	r3, #178	; 0xb2
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	58d3      	ldr	r3, [r2, r3]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d11b      	bne.n	800a40a <GSM_Service+0xf72>
			gsmInfo.GPRStimer = 0;
 800a3d2:	4a33      	ldr	r2, [pc, #204]	; (800a4a0 <GSM_Service+0x1008>)
 800a3d4:	239e      	movs	r3, #158	; 0x9e
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	2100      	movs	r1, #0
 800a3da:	50d1      	str	r1, [r2, r3]
			if (smsFlags.gprsActive == 0) gsmState = GPRS_On;
 800a3dc:	4b37      	ldr	r3, [pc, #220]	; (800a4bc <GSM_Service+0x1024>)
 800a3de:	69db      	ldr	r3, [r3, #28]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d103      	bne.n	800a3ec <GSM_Service+0xf54>
 800a3e4:	4b33      	ldr	r3, [pc, #204]	; (800a4b4 <GSM_Service+0x101c>)
 800a3e6:	2212      	movs	r2, #18
 800a3e8:	701a      	strb	r2, [r3, #0]
 800a3ea:	e00e      	b.n	800a40a <GSM_Service+0xf72>
			else if (smsFlags.gprsActive == 1)gsmState = SocketOpen;
 800a3ec:	4b33      	ldr	r3, [pc, #204]	; (800a4bc <GSM_Service+0x1024>)
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d103      	bne.n	800a3fc <GSM_Service+0xf64>
 800a3f4:	4b2f      	ldr	r3, [pc, #188]	; (800a4b4 <GSM_Service+0x101c>)
 800a3f6:	2215      	movs	r2, #21
 800a3f8:	701a      	strb	r2, [r3, #0]
 800a3fa:	e006      	b.n	800a40a <GSM_Service+0xf72>
			else if (smsFlags.gprsPending == 1) gsmState = GPRS_Off;		//switch off gsm if previous
 800a3fc:	4b2f      	ldr	r3, [pc, #188]	; (800a4bc <GSM_Service+0x1024>)
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d102      	bne.n	800a40a <GSM_Service+0xf72>
 800a404:	4b2b      	ldr	r3, [pc, #172]	; (800a4b4 <GSM_Service+0x101c>)
 800a406:	2214      	movs	r2, #20
 800a408:	701a      	strb	r2, [r3, #0]
		}

		//if (gsmState == 0) gsmInfo.Timeout++;
		if(gsmInfo.Timeout >= 60){
 800a40a:	4a25      	ldr	r2, [pc, #148]	; (800a4a0 <GSM_Service+0x1008>)
 800a40c:	23b0      	movs	r3, #176	; 0xb0
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	58d3      	ldr	r3, [r2, r3]
 800a412:	2b3b      	cmp	r3, #59	; 0x3b
 800a414:	dd09      	ble.n	800a42a <GSM_Service+0xf92>
			gsmInfo.Timeout = 0;
 800a416:	4a22      	ldr	r2, [pc, #136]	; (800a4a0 <GSM_Service+0x1008>)
 800a418:	23b0      	movs	r3, #176	; 0xb0
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	2100      	movs	r1, #0
 800a41e:	50d1      	str	r1, [r2, r3]
			GSM_Init();
 800a420:	f7fe ff2c 	bl	800927c <GSM_Init>
			gsmState = GSM_Off;
 800a424:	4b23      	ldr	r3, [pc, #140]	; (800a4b4 <GSM_Service+0x101c>)
 800a426:	2201      	movs	r2, #1
 800a428:	701a      	strb	r2, [r3, #0]

		}
		//smsTimer++;
		if ((smsTimer >= 3600)&&(gsmState == 0)&&(gsmInfo.socket == 0)&&(smsFlags.signal == 1)){
 800a42a:	4b26      	ldr	r3, [pc, #152]	; (800a4c4 <GSM_Service+0x102c>)
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	23e1      	movs	r3, #225	; 0xe1
 800a430:	011b      	lsls	r3, r3, #4
 800a432:	429a      	cmp	r2, r3
 800a434:	db19      	blt.n	800a46a <GSM_Service+0xfd2>
 800a436:	4b1f      	ldr	r3, [pc, #124]	; (800a4b4 <GSM_Service+0x101c>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d115      	bne.n	800a46a <GSM_Service+0xfd2>
 800a43e:	4b18      	ldr	r3, [pc, #96]	; (800a4a0 <GSM_Service+0x1008>)
 800a440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a442:	2b00      	cmp	r3, #0
 800a444:	d111      	bne.n	800a46a <GSM_Service+0xfd2>
 800a446:	4b1d      	ldr	r3, [pc, #116]	; (800a4bc <GSM_Service+0x1024>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d10d      	bne.n	800a46a <GSM_Service+0xfd2>
			smsTimer = 0;
 800a44e:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <GSM_Service+0x102c>)
 800a450:	2200      	movs	r2, #0
 800a452:	601a      	str	r2, [r3, #0]
			strcpy(smsInfo.build,"test");
 800a454:	4b1c      	ldr	r3, [pc, #112]	; (800a4c8 <GSM_Service+0x1030>)
 800a456:	4a1d      	ldr	r2, [pc, #116]	; (800a4cc <GSM_Service+0x1034>)
 800a458:	6811      	ldr	r1, [r2, #0]
 800a45a:	6019      	str	r1, [r3, #0]
 800a45c:	7912      	ldrb	r2, [r2, #4]
 800a45e:	711a      	strb	r2, [r3, #4]
			BuildPower();
 800a460:	f001 f916 	bl	800b690 <BuildPower>
			gsmState = SMS_Send;
 800a464:	4b13      	ldr	r3, [pc, #76]	; (800a4b4 <GSM_Service+0x101c>)
 800a466:	220f      	movs	r2, #15
 800a468:	701a      	strb	r2, [r3, #0]
		}
		if ((gsmInfo.GPRStimer >= 30) && (smsFlags.signal== 0)){
 800a46a:	4a0d      	ldr	r2, [pc, #52]	; (800a4a0 <GSM_Service+0x1008>)
 800a46c:	239e      	movs	r3, #158	; 0x9e
 800a46e:	005b      	lsls	r3, r3, #1
 800a470:	58d3      	ldr	r3, [r2, r3]
 800a472:	2b1d      	cmp	r3, #29
 800a474:	dd06      	ble.n	800a484 <GSM_Service+0xfec>
 800a476:	4b11      	ldr	r3, [pc, #68]	; (800a4bc <GSM_Service+0x1024>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d102      	bne.n	800a484 <GSM_Service+0xfec>
			gsmTimeout =  10;
 800a47e:	4b14      	ldr	r3, [pc, #80]	; (800a4d0 <GSM_Service+0x1038>)
 800a480:	220a      	movs	r2, #10
 800a482:	601a      	str	r2, [r3, #0]
		//restartTimer = 0;
		//gsmState = 30;
	//}
		//buildInfo();
	//}
		if (gsmSend == 1) gsmTimeout++;
 800a484:	4b13      	ldr	r3, [pc, #76]	; (800a4d4 <GSM_Service+0x103c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d104      	bne.n	800a496 <GSM_Service+0xffe>
 800a48c:	4b10      	ldr	r3, [pc, #64]	; (800a4d0 <GSM_Service+0x1038>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	1c5a      	adds	r2, r3, #1
 800a492:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <GSM_Service+0x1038>)
 800a494:	601a      	str	r2, [r3, #0]
		//Debug_Send(temp);

}
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	46bd      	mov	sp, r7
 800a49a:	b047      	add	sp, #284	; 0x11c
 800a49c:	bd90      	pop	{r4, r7, pc}
 800a49e:	46c0      	nop			; (mov r8, r8)
 800a4a0:	20001628 	.word	0x20001628
 800a4a4:	200014f4 	.word	0x200014f4
 800a4a8:	20001614 	.word	0x20001614
 800a4ac:	20001288 	.word	0x20001288
 800a4b0:	200000d0 	.word	0x200000d0
 800a4b4:	200000c0 	.word	0x200000c0
 800a4b8:	08013544 	.word	0x08013544
 800a4bc:	2000112c 	.word	0x2000112c
 800a4c0:	08013550 	.word	0x08013550
 800a4c4:	2000188c 	.word	0x2000188c
 800a4c8:	20001420 	.word	0x20001420
 800a4cc:	08013558 	.word	0x08013558
 800a4d0:	2000017c 	.word	0x2000017c
 800a4d4:	20000180 	.word	0x20000180

0800a4d8 <GSM_Send>:
	GSM_Send(",0\r\n");*/
	gsmInfo.FS_SeekFlag = 1;
	gsmState = 0;
}

void GSM_Send(char* data){
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
	int size;
	int timeout = 5;
 800a4e0:	2305      	movs	r3, #5
 800a4e2:	60fb      	str	r3, [r7, #12]
	size = strlen(data);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	0018      	movs	r0, r3
 800a4e8:	f7fe fe18 	bl	800911c <strlen>
 800a4ec:	0003      	movs	r3, r0
 800a4ee:	60bb      	str	r3, [r7, #8]
	//HAL_UART_Transmit(&huart2, (uint8_t*)data, size, timeout);

	HAL_UART_Transmit_IT(&huart2, data, size);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <GSM_Send+0x48>)
 800a4f8:	0018      	movs	r0, r3
 800a4fa:	f005 fc5f 	bl	800fdbc <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 50);
 800a4fe:	4909      	ldr	r1, [pc, #36]	; (800a524 <GSM_Send+0x4c>)
 800a500:	4b07      	ldr	r3, [pc, #28]	; (800a520 <GSM_Send+0x48>)
 800a502:	2232      	movs	r2, #50	; 0x32
 800a504:	0018      	movs	r0, r3
 800a506:	f005 fcd9 	bl	800febc <HAL_UART_Receive_IT>
	gsmTimeout = 0;
 800a50a:	4b07      	ldr	r3, [pc, #28]	; (800a528 <GSM_Send+0x50>)
 800a50c:	2200      	movs	r2, #0
 800a50e:	601a      	str	r2, [r3, #0]
	gsmSend = 1;
 800a510:	4b06      	ldr	r3, [pc, #24]	; (800a52c <GSM_Send+0x54>)
 800a512:	2201      	movs	r2, #1
 800a514:	601a      	str	r2, [r3, #0]
}
 800a516:	46c0      	nop			; (mov r8, r8)
 800a518:	46bd      	mov	sp, r7
 800a51a:	b004      	add	sp, #16
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	46c0      	nop			; (mov r8, r8)
 800a520:	2000227c 	.word	0x2000227c
 800a524:	200017b8 	.word	0x200017b8
 800a528:	2000017c 	.word	0x2000017c
 800a52c:	20000180 	.word	0x20000180

0800a530 <GSM_Send_Bin>:

void GSM_Send_Bin(char* data, int size){
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
	//int size;
	int timeout = 5;
 800a53a:	2305      	movs	r3, #5
 800a53c:	60fb      	str	r3, [r7, #12]
	//size = strlen(data);
	//HAL_UART_Transmit(&huart2, (uint8_t*)data, size, timeout);

	HAL_UART_Transmit_IT(&huart2, data, size);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	b29a      	uxth	r2, r3
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	4b09      	ldr	r3, [pc, #36]	; (800a56c <GSM_Send_Bin+0x3c>)
 800a546:	0018      	movs	r0, r3
 800a548:	f005 fc38 	bl	800fdbc <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, (uint8_t *) dummy, 50);
 800a54c:	4908      	ldr	r1, [pc, #32]	; (800a570 <GSM_Send_Bin+0x40>)
 800a54e:	4b07      	ldr	r3, [pc, #28]	; (800a56c <GSM_Send_Bin+0x3c>)
 800a550:	2232      	movs	r2, #50	; 0x32
 800a552:	0018      	movs	r0, r3
 800a554:	f005 fcb2 	bl	800febc <HAL_UART_Receive_IT>
	gsmTimeout = 0;
 800a558:	4b06      	ldr	r3, [pc, #24]	; (800a574 <GSM_Send_Bin+0x44>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	601a      	str	r2, [r3, #0]
	gsmSend = 1;
 800a55e:	4b06      	ldr	r3, [pc, #24]	; (800a578 <GSM_Send_Bin+0x48>)
 800a560:	2201      	movs	r2, #1
 800a562:	601a      	str	r2, [r3, #0]
}
 800a564:	46c0      	nop			; (mov r8, r8)
 800a566:	46bd      	mov	sp, r7
 800a568:	b004      	add	sp, #16
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	2000227c 	.word	0x2000227c
 800a570:	200017b8 	.word	0x200017b8
 800a574:	2000017c 	.word	0x2000017c
 800a578:	20000180 	.word	0x20000180

0800a57c <Debug_Send>:

void Debug_Send(char* data){
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
	int size;
	int timeout = 25;
 800a584:	2319      	movs	r3, #25
 800a586:	60fb      	str	r3, [r7, #12]
	size = strlen(data);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	0018      	movs	r0, r3
 800a58c:	f7fe fdc6 	bl	800911c <strlen>
 800a590:	0003      	movs	r3, r0
 800a592:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (uint8_t*)data, size, timeout);
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	b29a      	uxth	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6879      	ldr	r1, [r7, #4]
 800a59c:	4803      	ldr	r0, [pc, #12]	; (800a5ac <Debug_Send+0x30>)
 800a59e:	f005 fb63 	bl	800fc68 <HAL_UART_Transmit>
	//HAL_UART_Transmit_IT(&huart1, data, size);
}
 800a5a2:	46c0      	nop			; (mov r8, r8)
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	b004      	add	sp, #16
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	46c0      	nop			; (mov r8, r8)
 800a5ac:	200021e0 	.word	0x200021e0

0800a5b0 <recData>:
	  }
	huart1.Instance->TDR = (data & (uint8_t)0xFFU);

}

void recData(){
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800a5b4:	2380      	movs	r3, #128	; 0x80
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4a38      	ldr	r2, [pc, #224]	; (800a69c <recData+0xec>)
 800a5ba:	0019      	movs	r1, r3
 800a5bc:	0010      	movs	r0, r2
 800a5be:	f003 fde4 	bl	800e18a <HAL_GPIO_TogglePin>
		gsmInfo.Prompt = 0;
		Debug_Send("got prompt2\r\n");
		if (gsmInfo.socket == 1) gsmState = GPRS_Write;
		else gsmState = SMS_Text;
	}*/
		if (recBuffPointerWrite != recBuffPointerRead){
 800a5c2:	4b37      	ldr	r3, [pc, #220]	; (800a6a0 <recData+0xf0>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	4b37      	ldr	r3, [pc, #220]	; (800a6a4 <recData+0xf4>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d062      	beq.n	800a694 <recData+0xe4>
			//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			gsmSend = 0;
 800a5ce:	4b36      	ldr	r3, [pc, #216]	; (800a6a8 <recData+0xf8>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	601a      	str	r2, [r3, #0]
			//if (recBuffDebug[recBuffPointerRead] != 0x0A){
				procBuff[procBuffpointer] = recBuffDebug[recBuffPointerRead];
 800a5d4:	4b33      	ldr	r3, [pc, #204]	; (800a6a4 <recData+0xf4>)
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	4b34      	ldr	r3, [pc, #208]	; (800a6ac <recData+0xfc>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4934      	ldr	r1, [pc, #208]	; (800a6b0 <recData+0x100>)
 800a5de:	5c89      	ldrb	r1, [r1, r2]
 800a5e0:	4a34      	ldr	r2, [pc, #208]	; (800a6b4 <recData+0x104>)
 800a5e2:	54d1      	strb	r1, [r2, r3]
				//HAL_UART_Transmit(&huart1, procBuff[procBuffpointer], 1, 10);
				/*if (recBuff[recBuffPointerRead] != 0x0A)*/ //SendChar(procBuff[procBuffpointer]);
				recBuffPointerRead++;
 800a5e4:	4b2f      	ldr	r3, [pc, #188]	; (800a6a4 <recData+0xf4>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	1c5a      	adds	r2, r3, #1
 800a5ea:	4b2e      	ldr	r3, [pc, #184]	; (800a6a4 <recData+0xf4>)
 800a5ec:	601a      	str	r2, [r3, #0]
				if (recBuffPointerRead > recBuffSize) recBuffPointerRead = 0;
 800a5ee:	4b2d      	ldr	r3, [pc, #180]	; (800a6a4 <recData+0xf4>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	2396      	movs	r3, #150	; 0x96
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	dd02      	ble.n	800a600 <recData+0x50>
 800a5fa:	4b2a      	ldr	r3, [pc, #168]	; (800a6a4 <recData+0xf4>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
				procBuffpointer++;
 800a600:	4b2a      	ldr	r3, [pc, #168]	; (800a6ac <recData+0xfc>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	4b29      	ldr	r3, [pc, #164]	; (800a6ac <recData+0xfc>)
 800a608:	601a      	str	r2, [r3, #0]
				if (procBuffpointer > procBuffSize) procBuffpointer = 0;
 800a60a:	4b28      	ldr	r3, [pc, #160]	; (800a6ac <recData+0xfc>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b64      	cmp	r3, #100	; 0x64
 800a610:	dd02      	ble.n	800a618 <recData+0x68>
 800a612:	4b26      	ldr	r3, [pc, #152]	; (800a6ac <recData+0xfc>)
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]
			//}

			//if (procBuff[procBuffpointer - 1] == '>'){
			if (procBuff[procBuffpointer - 1] == 62){
 800a618:	4b24      	ldr	r3, [pc, #144]	; (800a6ac <recData+0xfc>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3b01      	subs	r3, #1
 800a61e:	4a25      	ldr	r2, [pc, #148]	; (800a6b4 <recData+0x104>)
 800a620:	5cd3      	ldrb	r3, [r2, r3]
 800a622:	2b3e      	cmp	r3, #62	; 0x3e
 800a624:	d10a      	bne.n	800a63c <recData+0x8c>
			//if (procBuff[procBuffpointer] == '>'){
				//Debug_Send("got prompt\r\n");
				if (gsmInfo.socket == 1) gsmState = GPRS_Write;
 800a626:	4b24      	ldr	r3, [pc, #144]	; (800a6b8 <recData+0x108>)
 800a628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d103      	bne.n	800a636 <recData+0x86>
 800a62e:	4b23      	ldr	r3, [pc, #140]	; (800a6bc <recData+0x10c>)
 800a630:	221b      	movs	r2, #27
 800a632:	701a      	strb	r2, [r3, #0]
 800a634:	e002      	b.n	800a63c <recData+0x8c>
				else gsmState = SMS_Text;
 800a636:	4b21      	ldr	r3, [pc, #132]	; (800a6bc <recData+0x10c>)
 800a638:	2210      	movs	r2, #16
 800a63a:	701a      	strb	r2, [r3, #0]
			}

			//MQTT_Service(procBuff[procBuffpointer - 1]);
			int state;
			get = MQTT_Service(procBuff[procBuffpointer - 1], mqttState);
 800a63c:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <recData+0xfc>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3b01      	subs	r3, #1
 800a642:	4a1c      	ldr	r2, [pc, #112]	; (800a6b4 <recData+0x104>)
 800a644:	5cd2      	ldrb	r2, [r2, r3]
 800a646:	4b1e      	ldr	r3, [pc, #120]	; (800a6c0 <recData+0x110>)
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	0019      	movs	r1, r3
 800a64c:	0010      	movs	r0, r2
 800a64e:	f001 fcf3 	bl	800c038 <MQTT_Service>
 800a652:	0002      	movs	r2, r0
 800a654:	4b1b      	ldr	r3, [pc, #108]	; (800a6c4 <recData+0x114>)
 800a656:	601a      	str	r2, [r3, #0]
			Debug_Send(temp1);
			Debug_Send(" - ");
			myLongStr(mqttState,temp1,10,10);
			Debug_Send(temp1);
			Debug_Send("\r\n");*/
			if (get->send == 1){
 800a658:	4b1a      	ldr	r3, [pc, #104]	; (800a6c4 <recData+0x114>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	791b      	ldrb	r3, [r3, #4]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d107      	bne.n	800a672 <recData+0xc2>
				//Debug_Send("got send\r\n");
				gsmState = GPRS_Send;
 800a662:	4b16      	ldr	r3, [pc, #88]	; (800a6bc <recData+0x10c>)
 800a664:	221c      	movs	r2, #28
 800a666:	701a      	strb	r2, [r3, #0]
				mqttState = get->state;
 800a668:	4b16      	ldr	r3, [pc, #88]	; (800a6c4 <recData+0x114>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	7a1a      	ldrb	r2, [r3, #8]
 800a66e:	4b14      	ldr	r3, [pc, #80]	; (800a6c0 <recData+0x110>)
 800a670:	701a      	strb	r2, [r3, #0]
					Debug_Send("mqtt stop sub\r\n");
				}
				Debug_Send("subscribe\r\n");
			}*/

			if (procBuff[procBuffpointer - 1] == 0x0A){
 800a672:	4b0e      	ldr	r3, [pc, #56]	; (800a6ac <recData+0xfc>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3b01      	subs	r3, #1
 800a678:	4a0e      	ldr	r2, [pc, #56]	; (800a6b4 <recData+0x104>)
 800a67a:	5cd3      	ldrb	r3, [r2, r3]
 800a67c:	2b0a      	cmp	r3, #10
 800a67e:	d109      	bne.n	800a694 <recData+0xe4>
				//procBuff[procBuffpointer - 1] = 0;
				procBuff[procBuffpointer] = 0;
 800a680:	4b0a      	ldr	r3, [pc, #40]	; (800a6ac <recData+0xfc>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a0b      	ldr	r2, [pc, #44]	; (800a6b4 <recData+0x104>)
 800a686:	2100      	movs	r1, #0
 800a688:	54d1      	strb	r1, [r2, r3]
				procBuffpointer = 0;
 800a68a:	4b08      	ldr	r3, [pc, #32]	; (800a6ac <recData+0xfc>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	601a      	str	r2, [r3, #0]
				//sendData(procBuff,UART0);
				//sendData("\r\n",UART0);
				//Debug_Send("A");
				//procBuffpointer--;
				procData();
 800a690:	f000 f81a 	bl	800a6c8 <procData>
				//("0x0D\r\n");

			}
		}
	//}
}
 800a694:	46c0      	nop			; (mov r8, r8)
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	46c0      	nop			; (mov r8, r8)
 800a69c:	48000400 	.word	0x48000400
 800a6a0:	20000168 	.word	0x20000168
 800a6a4:	2000016c 	.word	0x2000016c
 800a6a8:	20000180 	.word	0x20000180
 800a6ac:	20000170 	.word	0x20000170
 800a6b0:	2000115c 	.word	0x2000115c
 800a6b4:	20001518 	.word	0x20001518
 800a6b8:	20001628 	.word	0x20001628
 800a6bc:	200000c0 	.word	0x200000c0
 800a6c0:	200000d0 	.word	0x200000d0
 800a6c4:	200017b4 	.word	0x200017b4

0800a6c8 <procData>:
}




void procData(){		//process line
 800a6c8:	b590      	push	{r4, r7, lr}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af02      	add	r7, sp, #8
	//Debug_Send("Rx:");
	//Debug_Send(procBuff);
	//Debug_Send("\r\n");
	//if (gsmInfo.FTP_Data == 0){
		strcpy(temp,"Rx1:");
 800a6ce:	4adc      	ldr	r2, [pc, #880]	; (800aa40 <procData+0x378>)
 800a6d0:	4bdc      	ldr	r3, [pc, #880]	; (800aa44 <procData+0x37c>)
 800a6d2:	0010      	movs	r0, r2
 800a6d4:	0019      	movs	r1, r3
 800a6d6:	2305      	movs	r3, #5
 800a6d8:	001a      	movs	r2, r3
 800a6da:	f007 ff37 	bl	801254c <memcpy>
		strcat(temp,procBuff);
 800a6de:	4ada      	ldr	r2, [pc, #872]	; (800aa48 <procData+0x380>)
 800a6e0:	4bd7      	ldr	r3, [pc, #860]	; (800aa40 <procData+0x378>)
 800a6e2:	0011      	movs	r1, r2
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	f007 ff63 	bl	80125b0 <strcat>
		//strcat(temp,"\r\n");
		Debug_Send(temp);
 800a6ea:	4bd5      	ldr	r3, [pc, #852]	; (800aa40 <procData+0x378>)
 800a6ec:	0018      	movs	r0, r3
 800a6ee:	f7ff ff45 	bl	800a57c <Debug_Send>
	//}
	if (procBuff[0] == 0x02) Debug_Send("Unit connected to MQTT\r\n");
 800a6f2:	4bd5      	ldr	r3, [pc, #852]	; (800aa48 <procData+0x380>)
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d103      	bne.n	800a702 <procData+0x3a>
 800a6fa:	4bd4      	ldr	r3, [pc, #848]	; (800aa4c <procData+0x384>)
 800a6fc:	0018      	movs	r0, r3
 800a6fe:	f7ff ff3d 	bl	800a57c <Debug_Send>
		Debug_Send("MQTT1: ");
		Debug_Send(temp1);
		Debug_Send("\r\n");
		gsmInfo.MQTT_Data = 0;
	}*/
	uint8_t crc = 0;
 800a702:	1dfb      	adds	r3, r7, #7
 800a704:	2200      	movs	r2, #0
 800a706:	701a      	strb	r2, [r3, #0]
	if (smsFlags.content == 1){
 800a708:	4bd1      	ldr	r3, [pc, #836]	; (800aa50 <procData+0x388>)
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d111      	bne.n	800a734 <procData+0x6c>
		smsFlags.content = 0;
 800a710:	4bcf      	ldr	r3, [pc, #828]	; (800aa50 <procData+0x388>)
 800a712:	2200      	movs	r2, #0
 800a714:	611a      	str	r2, [r3, #16]
		smsFlags.del = 1;
 800a716:	4bce      	ldr	r3, [pc, #824]	; (800aa50 <procData+0x388>)
 800a718:	2201      	movs	r2, #1
 800a71a:	621a      	str	r2, [r3, #32]
		//if(strncmp((char*)smsInfo.index,"1",2)==0){
			//sendData("Got index: ",UART0);
			//sendData(smsInfo.index,UART0);
			//sendData("\r\n",UART0);
			strcpy(smsInfo.content1,procBuff);	//store SMS content
 800a71c:	4aca      	ldr	r2, [pc, #808]	; (800aa48 <procData+0x380>)
 800a71e:	4bcd      	ldr	r3, [pc, #820]	; (800aa54 <procData+0x38c>)
 800a720:	0011      	movs	r1, r2
 800a722:	0018      	movs	r0, r3
 800a724:	f007 ff51 	bl	80125ca <strcpy>
		}*/
		//sendData("SMS conent:",UART0);
		//sendData(smsInfo.content,UART0);
		//sendData("\r\n",UART0);
		//sendData("Got SMS content\r\n",UART0);
			Debug_Send("SMS Process Done\r\n");
 800a728:	4bcb      	ldr	r3, [pc, #812]	; (800aa58 <procData+0x390>)
 800a72a:	0018      	movs	r0, r3
 800a72c:	f7ff ff26 	bl	800a57c <Debug_Send>


	//sendData(procBuff,UART0);
	//sendData("\r\n",UART0);
	//else if(strncmp((char*)procBuff,"+SIM READY1",8)==0);		//unsolicited
}
 800a730:	f000 fbda 	bl	800aee8 <procData+0x820>
	else if (gsmInfo.imeiFlag > 1){
 800a734:	4ac9      	ldr	r2, [pc, #804]	; (800aa5c <procData+0x394>)
 800a736:	23a8      	movs	r3, #168	; 0xa8
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	58d3      	ldr	r3, [r2, r3]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	dd19      	ble.n	800a774 <procData+0xac>
		Debug_Send("DEC imei\r\n");
 800a740:	4bc7      	ldr	r3, [pc, #796]	; (800aa60 <procData+0x398>)
 800a742:	0018      	movs	r0, r3
 800a744:	f7ff ff1a 	bl	800a57c <Debug_Send>
		len = strlen((char*)procBuff);
 800a748:	4bbf      	ldr	r3, [pc, #764]	; (800aa48 <procData+0x380>)
 800a74a:	0018      	movs	r0, r3
 800a74c:	f7fe fce6 	bl	800911c <strlen>
 800a750:	0003      	movs	r3, r0
 800a752:	603b      	str	r3, [r7, #0]
		if (len  >= 9)getIMEI();
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2b08      	cmp	r3, #8
 800a758:	dd01      	ble.n	800a75e <procData+0x96>
 800a75a:	f000 fd5d 	bl	800b218 <getIMEI>
		gsmInfo.imeiFlag--;
 800a75e:	4abf      	ldr	r2, [pc, #764]	; (800aa5c <procData+0x394>)
 800a760:	23a8      	movs	r3, #168	; 0xa8
 800a762:	005b      	lsls	r3, r3, #1
 800a764:	58d3      	ldr	r3, [r2, r3]
 800a766:	1e59      	subs	r1, r3, #1
 800a768:	4abc      	ldr	r2, [pc, #752]	; (800aa5c <procData+0x394>)
 800a76a:	23a8      	movs	r3, #168	; 0xa8
 800a76c:	005b      	lsls	r3, r3, #1
 800a76e:	50d1      	str	r1, [r2, r3]
}
 800a770:	f000 fbba 	bl	800aee8 <procData+0x820>
	else if (gsmInfo.FTP_Data == 1){
 800a774:	4ab9      	ldr	r2, [pc, #740]	; (800aa5c <procData+0x394>)
 800a776:	23b8      	movs	r3, #184	; 0xb8
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	58d3      	ldr	r3, [r2, r3]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d000      	beq.n	800a782 <procData+0xba>
 800a780:	e081      	b.n	800a886 <procData+0x1be>
		 myLongStr(ftpReceived[0],temp,10,10);
 800a782:	4bb8      	ldr	r3, [pc, #736]	; (800aa64 <procData+0x39c>)
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	0018      	movs	r0, r3
 800a788:	49ad      	ldr	r1, [pc, #692]	; (800aa40 <procData+0x378>)
 800a78a:	230a      	movs	r3, #10
 800a78c:	220a      	movs	r2, #10
 800a78e:	f002 fe53 	bl	800d438 <myLongStr>
		 Debug_Send("First byte: ");
 800a792:	4bb5      	ldr	r3, [pc, #724]	; (800aa68 <procData+0x3a0>)
 800a794:	0018      	movs	r0, r3
 800a796:	f7ff fef1 	bl	800a57c <Debug_Send>
		 Debug_Send(temp);
 800a79a:	4ba9      	ldr	r3, [pc, #676]	; (800aa40 <procData+0x378>)
 800a79c:	0018      	movs	r0, r3
 800a79e:	f7ff feed 	bl	800a57c <Debug_Send>
		 Debug_Send("\r\n");
 800a7a2:	4bb2      	ldr	r3, [pc, #712]	; (800aa6c <procData+0x3a4>)
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	f7ff fee9 	bl	800a57c <Debug_Send>
		 myLongStr(ftpReceived[1],temp,10,10);
 800a7aa:	4bae      	ldr	r3, [pc, #696]	; (800aa64 <procData+0x39c>)
 800a7ac:	785b      	ldrb	r3, [r3, #1]
 800a7ae:	0018      	movs	r0, r3
 800a7b0:	49a3      	ldr	r1, [pc, #652]	; (800aa40 <procData+0x378>)
 800a7b2:	230a      	movs	r3, #10
 800a7b4:	220a      	movs	r2, #10
 800a7b6:	f002 fe3f 	bl	800d438 <myLongStr>
		 Debug_Send("Second byte: ");
 800a7ba:	4bad      	ldr	r3, [pc, #692]	; (800aa70 <procData+0x3a8>)
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f7ff fedd 	bl	800a57c <Debug_Send>
		 Debug_Send(temp);
 800a7c2:	4b9f      	ldr	r3, [pc, #636]	; (800aa40 <procData+0x378>)
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	f7ff fed9 	bl	800a57c <Debug_Send>
		 Debug_Send("\r\n");
 800a7ca:	4ba8      	ldr	r3, [pc, #672]	; (800aa6c <procData+0x3a4>)
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	f7ff fed5 	bl	800a57c <Debug_Send>
		 while (crc == 0){
 800a7d2:	e031      	b.n	800a838 <procData+0x170>
			flashWrite(gsmInfo.FTP_Save_Addr,ftpReceived, ftpReceive);
 800a7d4:	4aa1      	ldr	r2, [pc, #644]	; (800aa5c <procData+0x394>)
 800a7d6:	23ba      	movs	r3, #186	; 0xba
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	58d0      	ldr	r0, [r2, r3]
 800a7dc:	4ba5      	ldr	r3, [pc, #660]	; (800aa74 <procData+0x3ac>)
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	4ba0      	ldr	r3, [pc, #640]	; (800aa64 <procData+0x39c>)
 800a7e2:	0019      	movs	r1, r3
 800a7e4:	f002 fca4 	bl	800d130 <flashWrite>
			flashRead(gsmInfo.FTP_Save_Addr,temp, ftpReceive);
 800a7e8:	4a9c      	ldr	r2, [pc, #624]	; (800aa5c <procData+0x394>)
 800a7ea:	23ba      	movs	r3, #186	; 0xba
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	58d0      	ldr	r0, [r2, r3]
 800a7f0:	4ba0      	ldr	r3, [pc, #640]	; (800aa74 <procData+0x3ac>)
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	4b92      	ldr	r3, [pc, #584]	; (800aa40 <procData+0x378>)
 800a7f6:	0019      	movs	r1, r3
 800a7f8:	f002 fcf0 	bl	800d1dc <flashRead>
			ftpReceived[ftpReceive] = 0;
 800a7fc:	4b9d      	ldr	r3, [pc, #628]	; (800aa74 <procData+0x3ac>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a98      	ldr	r2, [pc, #608]	; (800aa64 <procData+0x39c>)
 800a802:	2100      	movs	r1, #0
 800a804:	54d1      	strb	r1, [r2, r3]
			temp[ftpReceive] = 0;
 800a806:	4b9b      	ldr	r3, [pc, #620]	; (800aa74 <procData+0x3ac>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a8d      	ldr	r2, [pc, #564]	; (800aa40 <procData+0x378>)
 800a80c:	2100      	movs	r1, #0
 800a80e:	54d1      	strb	r1, [r2, r3]
			if (strcmp(ftpReceived,temp) == 0){
 800a810:	4a8b      	ldr	r2, [pc, #556]	; (800aa40 <procData+0x378>)
 800a812:	4b94      	ldr	r3, [pc, #592]	; (800aa64 <procData+0x39c>)
 800a814:	0011      	movs	r1, r2
 800a816:	0018      	movs	r0, r3
 800a818:	f7fe fc76 	bl	8009108 <strcmp>
 800a81c:	0001      	movs	r1, r0
 800a81e:	1dfb      	adds	r3, r7, #7
 800a820:	1dfa      	adds	r2, r7, #7
 800a822:	7812      	ldrb	r2, [r2, #0]
 800a824:	701a      	strb	r2, [r3, #0]
 800a826:	2900      	cmp	r1, #0
 800a828:	d106      	bne.n	800a838 <procData+0x170>
				Debug_Send("Data written!\r\n");
 800a82a:	4b93      	ldr	r3, [pc, #588]	; (800aa78 <procData+0x3b0>)
 800a82c:	0018      	movs	r0, r3
 800a82e:	f7ff fea5 	bl	800a57c <Debug_Send>
				crc = 1;
 800a832:	1dfb      	adds	r3, r7, #7
 800a834:	2201      	movs	r2, #1
 800a836:	701a      	strb	r2, [r3, #0]
		 while (crc == 0){
 800a838:	1dfb      	adds	r3, r7, #7
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d0c9      	beq.n	800a7d4 <procData+0x10c>
		 crc = 0;
 800a840:	1dfb      	adds	r3, r7, #7
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]
			gsmInfo.FTP_Save_Addr += ftpReceive;
 800a846:	4a85      	ldr	r2, [pc, #532]	; (800aa5c <procData+0x394>)
 800a848:	23ba      	movs	r3, #186	; 0xba
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	58d3      	ldr	r3, [r2, r3]
 800a84e:	001a      	movs	r2, r3
 800a850:	4b88      	ldr	r3, [pc, #544]	; (800aa74 <procData+0x3ac>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	18d3      	adds	r3, r2, r3
 800a856:	0019      	movs	r1, r3
 800a858:	4a80      	ldr	r2, [pc, #512]	; (800aa5c <procData+0x394>)
 800a85a:	23ba      	movs	r3, #186	; 0xba
 800a85c:	005b      	lsls	r3, r3, #1
 800a85e:	50d1      	str	r1, [r2, r3]
			gsmInfo.FTP_Size += ftpReceive;
 800a860:	4a7e      	ldr	r2, [pc, #504]	; (800aa5c <procData+0x394>)
 800a862:	23bc      	movs	r3, #188	; 0xbc
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	58d3      	ldr	r3, [r2, r3]
 800a868:	001a      	movs	r2, r3
 800a86a:	4b82      	ldr	r3, [pc, #520]	; (800aa74 <procData+0x3ac>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	18d3      	adds	r3, r2, r3
 800a870:	0019      	movs	r1, r3
 800a872:	4a7a      	ldr	r2, [pc, #488]	; (800aa5c <procData+0x394>)
 800a874:	23bc      	movs	r3, #188	; 0xbc
 800a876:	005b      	lsls	r3, r3, #1
 800a878:	50d1      	str	r1, [r2, r3]
			gsmInfo.FTP_Data = 0;
 800a87a:	4a78      	ldr	r2, [pc, #480]	; (800aa5c <procData+0x394>)
 800a87c:	23b8      	movs	r3, #184	; 0xb8
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	2100      	movs	r1, #0
 800a882:	50d1      	str	r1, [r2, r3]
}
 800a884:	e330      	b.n	800aee8 <procData+0x820>
	else if ((gsmInfo.FTP_Data == 2)&&(procBuff[0] == ':')){
 800a886:	4a75      	ldr	r2, [pc, #468]	; (800aa5c <procData+0x394>)
 800a888:	23b8      	movs	r3, #184	; 0xb8
 800a88a:	005b      	lsls	r3, r3, #1
 800a88c:	58d3      	ldr	r3, [r2, r3]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d139      	bne.n	800a906 <procData+0x23e>
 800a892:	4b6d      	ldr	r3, [pc, #436]	; (800aa48 <procData+0x380>)
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b3a      	cmp	r3, #58	; 0x3a
 800a898:	d135      	bne.n	800a906 <procData+0x23e>
		Debug_Send("Write Data!\r\n");
 800a89a:	4b78      	ldr	r3, [pc, #480]	; (800aa7c <procData+0x3b4>)
 800a89c:	0018      	movs	r0, r3
 800a89e:	f7ff fe6d 	bl	800a57c <Debug_Send>
		strcat(procBuff,"\r\n");
 800a8a2:	4b69      	ldr	r3, [pc, #420]	; (800aa48 <procData+0x380>)
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	f7fe fc39 	bl	800911c <strlen>
 800a8aa:	0003      	movs	r3, r0
 800a8ac:	001a      	movs	r2, r3
 800a8ae:	4b66      	ldr	r3, [pc, #408]	; (800aa48 <procData+0x380>)
 800a8b0:	18d2      	adds	r2, r2, r3
 800a8b2:	4b6e      	ldr	r3, [pc, #440]	; (800aa6c <procData+0x3a4>)
 800a8b4:	0010      	movs	r0, r2
 800a8b6:	0019      	movs	r1, r3
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	001a      	movs	r2, r3
 800a8bc:	f007 fe46 	bl	801254c <memcpy>
		flashWrite(gsmInfo.FTP_Save_Addr,(char*)procBuff, strlen((char*)procBuff));
 800a8c0:	4a66      	ldr	r2, [pc, #408]	; (800aa5c <procData+0x394>)
 800a8c2:	23ba      	movs	r3, #186	; 0xba
 800a8c4:	005b      	lsls	r3, r3, #1
 800a8c6:	58d4      	ldr	r4, [r2, r3]
 800a8c8:	4b5f      	ldr	r3, [pc, #380]	; (800aa48 <procData+0x380>)
 800a8ca:	0018      	movs	r0, r3
 800a8cc:	f7fe fc26 	bl	800911c <strlen>
 800a8d0:	0002      	movs	r2, r0
 800a8d2:	4b5d      	ldr	r3, [pc, #372]	; (800aa48 <procData+0x380>)
 800a8d4:	0019      	movs	r1, r3
 800a8d6:	0020      	movs	r0, r4
 800a8d8:	f002 fc2a 	bl	800d130 <flashWrite>
		gsmInfo.FTP_Save_Addr += strlen((char*)procBuff);
 800a8dc:	4a5f      	ldr	r2, [pc, #380]	; (800aa5c <procData+0x394>)
 800a8de:	23ba      	movs	r3, #186	; 0xba
 800a8e0:	005b      	lsls	r3, r3, #1
 800a8e2:	58d3      	ldr	r3, [r2, r3]
 800a8e4:	001c      	movs	r4, r3
 800a8e6:	4b58      	ldr	r3, [pc, #352]	; (800aa48 <procData+0x380>)
 800a8e8:	0018      	movs	r0, r3
 800a8ea:	f7fe fc17 	bl	800911c <strlen>
 800a8ee:	0003      	movs	r3, r0
 800a8f0:	18e3      	adds	r3, r4, r3
 800a8f2:	0019      	movs	r1, r3
 800a8f4:	4a59      	ldr	r2, [pc, #356]	; (800aa5c <procData+0x394>)
 800a8f6:	23ba      	movs	r3, #186	; 0xba
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	50d1      	str	r1, [r2, r3]
		ftpinc = 0;
 800a8fc:	4b60      	ldr	r3, [pc, #384]	; (800aa80 <procData+0x3b8>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
	else if ((gsmInfo.FTP_Data == 2)&&(procBuff[0] == ':')){
 800a902:	46c0      	nop			; (mov r8, r8)
}
 800a904:	e2f0      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"AT+CGSN",7)==0){
 800a906:	495f      	ldr	r1, [pc, #380]	; (800aa84 <procData+0x3bc>)
 800a908:	4b4f      	ldr	r3, [pc, #316]	; (800aa48 <procData+0x380>)
 800a90a:	2207      	movs	r2, #7
 800a90c:	0018      	movs	r0, r3
 800a90e:	f007 fe64 	bl	80125da <strncmp>
 800a912:	1e03      	subs	r3, r0, #0
 800a914:	d105      	bne.n	800a922 <procData+0x25a>
			gsmInfo.imeiFlag = 5;
 800a916:	4a51      	ldr	r2, [pc, #324]	; (800aa5c <procData+0x394>)
 800a918:	23a8      	movs	r3, #168	; 0xa8
 800a91a:	005b      	lsls	r3, r3, #1
 800a91c:	2105      	movs	r1, #5
 800a91e:	50d1      	str	r1, [r2, r3]
}
 800a920:	e2e2      	b.n	800aee8 <procData+0x820>
	else if (gsmInfo.GPRS_Rec == 1){
 800a922:	4a4e      	ldr	r2, [pc, #312]	; (800aa5c <procData+0x394>)
 800a924:	23ac      	movs	r3, #172	; 0xac
 800a926:	005b      	lsls	r3, r3, #1
 800a928:	58d3      	ldr	r3, [r2, r3]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d102      	bne.n	800a934 <procData+0x26c>
		DataDecrypt();
 800a92e:	f001 f84b 	bl	800b9c8 <DataDecrypt>
}
 800a932:	e2d9      	b.n	800aee8 <procData+0x820>
	else if (gsmInfo.GPRS_Rec > 1) gsmInfo.GPRS_Rec--;
 800a934:	4a49      	ldr	r2, [pc, #292]	; (800aa5c <procData+0x394>)
 800a936:	23ac      	movs	r3, #172	; 0xac
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	58d3      	ldr	r3, [r2, r3]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	dd09      	ble.n	800a954 <procData+0x28c>
 800a940:	4a46      	ldr	r2, [pc, #280]	; (800aa5c <procData+0x394>)
 800a942:	23ac      	movs	r3, #172	; 0xac
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	58d3      	ldr	r3, [r2, r3]
 800a948:	1e59      	subs	r1, r3, #1
 800a94a:	4a44      	ldr	r2, [pc, #272]	; (800aa5c <procData+0x394>)
 800a94c:	23ac      	movs	r3, #172	; 0xac
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	50d1      	str	r1, [r2, r3]
}
 800a952:	e2c9      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+CREG: 0,1",10)==0)gsmState = SMSconfig;
 800a954:	494c      	ldr	r1, [pc, #304]	; (800aa88 <procData+0x3c0>)
 800a956:	4b3c      	ldr	r3, [pc, #240]	; (800aa48 <procData+0x380>)
 800a958:	220a      	movs	r2, #10
 800a95a:	0018      	movs	r0, r3
 800a95c:	f007 fe3d 	bl	80125da <strncmp>
 800a960:	1e03      	subs	r3, r0, #0
 800a962:	d103      	bne.n	800a96c <procData+0x2a4>
 800a964:	4b49      	ldr	r3, [pc, #292]	; (800aa8c <procData+0x3c4>)
 800a966:	2206      	movs	r2, #6
 800a968:	701a      	strb	r2, [r3, #0]
}
 800a96a:	e2bd      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+CREG: 1",8)==0)gsmState = SMSconfig;
 800a96c:	4948      	ldr	r1, [pc, #288]	; (800aa90 <procData+0x3c8>)
 800a96e:	4b36      	ldr	r3, [pc, #216]	; (800aa48 <procData+0x380>)
 800a970:	2208      	movs	r2, #8
 800a972:	0018      	movs	r0, r3
 800a974:	f007 fe31 	bl	80125da <strncmp>
 800a978:	1e03      	subs	r3, r0, #0
 800a97a:	d103      	bne.n	800a984 <procData+0x2bc>
 800a97c:	4b43      	ldr	r3, [pc, #268]	; (800aa8c <procData+0x3c4>)
 800a97e:	2206      	movs	r2, #6
 800a980:	701a      	strb	r2, [r3, #0]
}
 800a982:	e2b1      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+CGREG: 1",9)==0) Debug_Send("GOT GPRS!!!!!!!\r\n");
 800a984:	4943      	ldr	r1, [pc, #268]	; (800aa94 <procData+0x3cc>)
 800a986:	4b30      	ldr	r3, [pc, #192]	; (800aa48 <procData+0x380>)
 800a988:	2209      	movs	r2, #9
 800a98a:	0018      	movs	r0, r3
 800a98c:	f007 fe25 	bl	80125da <strncmp>
 800a990:	1e03      	subs	r3, r0, #0
 800a992:	d104      	bne.n	800a99e <procData+0x2d6>
 800a994:	4b40      	ldr	r3, [pc, #256]	; (800aa98 <procData+0x3d0>)
 800a996:	0018      	movs	r0, r3
 800a998:	f7ff fdf0 	bl	800a57c <Debug_Send>
}
 800a99c:	e2a4      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+CSQ",4)==0)getSignal();
 800a99e:	493f      	ldr	r1, [pc, #252]	; (800aa9c <procData+0x3d4>)
 800a9a0:	4b29      	ldr	r3, [pc, #164]	; (800aa48 <procData+0x380>)
 800a9a2:	2204      	movs	r2, #4
 800a9a4:	0018      	movs	r0, r3
 800a9a6:	f007 fe18 	bl	80125da <strncmp>
 800a9aa:	1e03      	subs	r3, r0, #0
 800a9ac:	d102      	bne.n	800a9b4 <procData+0x2ec>
 800a9ae:	f000 fc7b 	bl	800b2a8 <getSignal>
}
 800a9b2:	e299      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+CMGS:",6)==0)smsFlags.send = 0;
 800a9b4:	493a      	ldr	r1, [pc, #232]	; (800aaa0 <procData+0x3d8>)
 800a9b6:	4b24      	ldr	r3, [pc, #144]	; (800aa48 <procData+0x380>)
 800a9b8:	2206      	movs	r2, #6
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	f007 fe0d 	bl	80125da <strncmp>
 800a9c0:	1e03      	subs	r3, r0, #0
 800a9c2:	d103      	bne.n	800a9cc <procData+0x304>
 800a9c4:	4b22      	ldr	r3, [pc, #136]	; (800aa50 <procData+0x388>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	609a      	str	r2, [r3, #8]
}
 800a9ca:	e28d      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+CCID:",6)==0)getCCID();
 800a9cc:	4935      	ldr	r1, [pc, #212]	; (800aaa4 <procData+0x3dc>)
 800a9ce:	4b1e      	ldr	r3, [pc, #120]	; (800aa48 <procData+0x380>)
 800a9d0:	2206      	movs	r2, #6
 800a9d2:	0018      	movs	r0, r3
 800a9d4:	f007 fe01 	bl	80125da <strncmp>
 800a9d8:	1e03      	subs	r3, r0, #0
 800a9da:	d102      	bne.n	800a9e2 <procData+0x31a>
 800a9dc:	f000 fc52 	bl	800b284 <getCCID>
}
 800a9e0:	e282      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"OK",3)==0)	OK();
 800a9e2:	4a31      	ldr	r2, [pc, #196]	; (800aaa8 <procData+0x3e0>)
 800a9e4:	4b18      	ldr	r3, [pc, #96]	; (800aa48 <procData+0x380>)
 800a9e6:	0011      	movs	r1, r2
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	f7fe fb8d 	bl	8009108 <strcmp>
 800a9ee:	1e03      	subs	r3, r0, #0
 800a9f0:	d102      	bne.n	800a9f8 <procData+0x330>
 800a9f2:	f000 ff61 	bl	800b8b8 <OK>
}
 800a9f6:	e277      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+CGPADDR",8)==0)Context();
 800a9f8:	492c      	ldr	r1, [pc, #176]	; (800aaac <procData+0x3e4>)
 800a9fa:	4b13      	ldr	r3, [pc, #76]	; (800aa48 <procData+0x380>)
 800a9fc:	2208      	movs	r2, #8
 800a9fe:	0018      	movs	r0, r3
 800aa00:	f007 fdeb 	bl	80125da <strncmp>
 800aa04:	1e03      	subs	r3, r0, #0
 800aa06:	d102      	bne.n	800aa0e <procData+0x346>
 800aa08:	f000 fee2 	bl	800b7d0 <Context>
}
 800aa0c:	e26c      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"CONNECT",6)==0){
 800aa0e:	4928      	ldr	r1, [pc, #160]	; (800aab0 <procData+0x3e8>)
 800aa10:	4b0d      	ldr	r3, [pc, #52]	; (800aa48 <procData+0x380>)
 800aa12:	2206      	movs	r2, #6
 800aa14:	0018      	movs	r0, r3
 800aa16:	f007 fde0 	bl	80125da <strncmp>
 800aa1a:	1e03      	subs	r3, r0, #0
 800aa1c:	d000      	beq.n	800aa20 <procData+0x358>
 800aa1e:	e0b2      	b.n	800ab86 <procData+0x4be>
		if (strlen(procBuff) < 7){
 800aa20:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <procData+0x380>)
 800aa22:	0018      	movs	r0, r3
 800aa24:	f7fe fb7a 	bl	800911c <strlen>
 800aa28:	0003      	movs	r3, r0
 800aa2a:	2b06      	cmp	r3, #6
 800aa2c:	d842      	bhi.n	800aab4 <procData+0x3ec>
			gsmInfo.gprsDataPending = 0;
 800aa2e:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <procData+0x394>)
 800aa30:	2280      	movs	r2, #128	; 0x80
 800aa32:	2100      	movs	r1, #0
 800aa34:	5099      	str	r1, [r3, r2]
			gsmInfo.socket = 1;
 800aa36:	4b09      	ldr	r3, [pc, #36]	; (800aa5c <procData+0x394>)
 800aa38:	2201      	movs	r2, #1
 800aa3a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800aa3c:	e254      	b.n	800aee8 <procData+0x820>
 800aa3e:	46c0      	nop			; (mov r8, r8)
 800aa40:	20001e24 	.word	0x20001e24
 800aa44:	080135e0 	.word	0x080135e0
 800aa48:	20001518 	.word	0x20001518
 800aa4c:	080135e8 	.word	0x080135e8
 800aa50:	2000112c 	.word	0x2000112c
 800aa54:	20001348 	.word	0x20001348
 800aa58:	08013604 	.word	0x08013604
 800aa5c:	20001628 	.word	0x20001628
 800aa60:	08013618 	.word	0x08013618
 800aa64:	200017ec 	.word	0x200017ec
 800aa68:	08013624 	.word	0x08013624
 800aa6c:	08012fc4 	.word	0x08012fc4
 800aa70:	08013634 	.word	0x08013634
 800aa74:	20001884 	.word	0x20001884
 800aa78:	08013644 	.word	0x08013644
 800aa7c:	08013654 	.word	0x08013654
 800aa80:	200000c8 	.word	0x200000c8
 800aa84:	08013664 	.word	0x08013664
 800aa88:	0801366c 	.word	0x0801366c
 800aa8c:	200000c0 	.word	0x200000c0
 800aa90:	08013678 	.word	0x08013678
 800aa94:	08013684 	.word	0x08013684
 800aa98:	08013690 	.word	0x08013690
 800aa9c:	080136a4 	.word	0x080136a4
 800aaa0:	080136ac 	.word	0x080136ac
 800aaa4:	080136b4 	.word	0x080136b4
 800aaa8:	080136bc 	.word	0x080136bc
 800aaac:	080136c0 	.word	0x080136c0
 800aab0:	080136cc 	.word	0x080136cc
			if (ftpRead == 1){
 800aab4:	4bce      	ldr	r3, [pc, #824]	; (800adf0 <procData+0x728>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d13f      	bne.n	800ab3c <procData+0x474>
				ftpinc = 0;
 800aabc:	4bcd      	ldr	r3, [pc, #820]	; (800adf4 <procData+0x72c>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]
				ftpPad = 0;
 800aac2:	4bcd      	ldr	r3, [pc, #820]	; (800adf8 <procData+0x730>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	701a      	strb	r2, [r3, #0]
				myStrSection(procBuff,temp,10,' ',1);
 800aac8:	49cc      	ldr	r1, [pc, #816]	; (800adfc <procData+0x734>)
 800aaca:	48cd      	ldr	r0, [pc, #820]	; (800ae00 <procData+0x738>)
 800aacc:	2301      	movs	r3, #1
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	2320      	movs	r3, #32
 800aad2:	220a      	movs	r2, #10
 800aad4:	f002 fc1b 	bl	800d30e <myStrSection>
				ftpReceive = atoi(temp);
 800aad8:	4bc8      	ldr	r3, [pc, #800]	; (800adfc <procData+0x734>)
 800aada:	0018      	movs	r0, r3
 800aadc:	f007 fd06 	bl	80124ec <atoi>
 800aae0:	0003      	movs	r3, r0
 800aae2:	001a      	movs	r2, r3
 800aae4:	4bc7      	ldr	r3, [pc, #796]	; (800ae04 <procData+0x73c>)
 800aae6:	601a      	str	r2, [r3, #0]
				gsmInfo.FTP_Data = 1;
 800aae8:	4ac7      	ldr	r2, [pc, #796]	; (800ae08 <procData+0x740>)
 800aaea:	23b8      	movs	r3, #184	; 0xb8
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	2101      	movs	r1, #1
 800aaf0:	50d1      	str	r1, [r2, r3]
				getFtp();
 800aaf2:	f000 fa0b 	bl	800af0c <getFtp>
				if (ftpPacket > ftpReceive){
 800aaf6:	4bc5      	ldr	r3, [pc, #788]	; (800ae0c <procData+0x744>)
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	4bc2      	ldr	r3, [pc, #776]	; (800ae04 <procData+0x73c>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d92f      	bls.n	800ab62 <procData+0x49a>
					flashWrite(eepromOrigin + 900,"UL",2);
 800ab02:	4bc3      	ldr	r3, [pc, #780]	; (800ae10 <procData+0x748>)
 800ab04:	48c3      	ldr	r0, [pc, #780]	; (800ae14 <procData+0x74c>)
 800ab06:	2202      	movs	r2, #2
 800ab08:	0019      	movs	r1, r3
 800ab0a:	f002 fb11 	bl	800d130 <flashWrite>
					Debug_Send("FTP DONE!!!!!!!\r\n");
 800ab0e:	4bc2      	ldr	r3, [pc, #776]	; (800ae18 <procData+0x750>)
 800ab10:	0018      	movs	r0, r3
 800ab12:	f7ff fd33 	bl	800a57c <Debug_Send>
					gsmInfo.FS_Connect = 0;
 800ab16:	4abc      	ldr	r2, [pc, #752]	; (800ae08 <procData+0x740>)
 800ab18:	23b6      	movs	r3, #182	; 0xb6
 800ab1a:	005b      	lsls	r3, r3, #1
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	50d1      	str	r1, [r2, r3]
					ftpRead = 0;
 800ab20:	4bb3      	ldr	r3, [pc, #716]	; (800adf0 <procData+0x728>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	701a      	strb	r2, [r3, #0]
					gsmState = FS_Close;
 800ab26:	4bbd      	ldr	r3, [pc, #756]	; (800ae1c <procData+0x754>)
 800ab28:	2233      	movs	r2, #51	; 0x33
 800ab2a:	701a      	strb	r2, [r3, #0]
					gsmInfo.FTP_Save_Addr = 1000;
 800ab2c:	4ab6      	ldr	r2, [pc, #728]	; (800ae08 <procData+0x740>)
 800ab2e:	23ba      	movs	r3, #186	; 0xba
 800ab30:	005b      	lsls	r3, r3, #1
 800ab32:	21fa      	movs	r1, #250	; 0xfa
 800ab34:	0089      	lsls	r1, r1, #2
 800ab36:	50d1      	str	r1, [r2, r3]
					NVIC_SystemReset();
 800ab38:	f7fe fb8e 	bl	8009258 <__NVIC_SystemReset>
				gsmInfo.gprsDataPending = 0;
 800ab3c:	4bb2      	ldr	r3, [pc, #712]	; (800ae08 <procData+0x740>)
 800ab3e:	2280      	movs	r2, #128	; 0x80
 800ab40:	2100      	movs	r1, #0
 800ab42:	5099      	str	r1, [r3, r2]
				gsmInfo.socket = 1;
 800ab44:	4bb0      	ldr	r3, [pc, #704]	; (800ae08 <procData+0x740>)
 800ab46:	2201      	movs	r2, #1
 800ab48:	679a      	str	r2, [r3, #120]	; 0x78
				gsmState = GPRS_Send;
 800ab4a:	4bb4      	ldr	r3, [pc, #720]	; (800ae1c <procData+0x754>)
 800ab4c:	221c      	movs	r2, #28
 800ab4e:	701a      	strb	r2, [r3, #0]
				Debug_Send("connected1\r\n");
 800ab50:	4bb3      	ldr	r3, [pc, #716]	; (800ae20 <procData+0x758>)
 800ab52:	0018      	movs	r0, r3
 800ab54:	f7ff fd12 	bl	800a57c <Debug_Send>
				gsmInfo.FTP_Data = 2;
 800ab58:	4aab      	ldr	r2, [pc, #684]	; (800ae08 <procData+0x740>)
 800ab5a:	23b8      	movs	r3, #184	; 0xb8
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	2102      	movs	r1, #2
 800ab60:	50d1      	str	r1, [r2, r3]
			if (gsmInfo.MQTT == 1){
 800ab62:	4aa9      	ldr	r2, [pc, #676]	; (800ae08 <procData+0x740>)
 800ab64:	23be      	movs	r3, #190	; 0xbe
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	58d3      	ldr	r3, [r2, r3]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d000      	beq.n	800ab70 <procData+0x4a8>
 800ab6e:	e1bb      	b.n	800aee8 <procData+0x820>
				Debug_Send("Open MQTT server\r\n");
 800ab70:	4bac      	ldr	r3, [pc, #688]	; (800ae24 <procData+0x75c>)
 800ab72:	0018      	movs	r0, r3
 800ab74:	f7ff fd02 	bl	800a57c <Debug_Send>
				gsmState = GPRS_Send;
 800ab78:	4ba8      	ldr	r3, [pc, #672]	; (800ae1c <procData+0x754>)
 800ab7a:	221c      	movs	r2, #28
 800ab7c:	701a      	strb	r2, [r3, #0]
				mqttState = Connect;
 800ab7e:	4baa      	ldr	r3, [pc, #680]	; (800ae28 <procData+0x760>)
 800ab80:	2201      	movs	r2, #1
 800ab82:	701a      	strb	r2, [r3, #0]
}
 800ab84:	e1b0      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"ALREADY CONNECT",15)==0){
 800ab86:	49a9      	ldr	r1, [pc, #676]	; (800ae2c <procData+0x764>)
 800ab88:	4b9d      	ldr	r3, [pc, #628]	; (800ae00 <procData+0x738>)
 800ab8a:	220f      	movs	r2, #15
 800ab8c:	0018      	movs	r0, r3
 800ab8e:	f007 fd24 	bl	80125da <strncmp>
 800ab92:	1e03      	subs	r3, r0, #0
 800ab94:	d106      	bne.n	800aba4 <procData+0x4dc>
		gsmState = SocketClose;
 800ab96:	4ba1      	ldr	r3, [pc, #644]	; (800ae1c <procData+0x754>)
 800ab98:	2216      	movs	r2, #22
 800ab9a:	701a      	strb	r2, [r3, #0]
		gsmInfo.socket = 0;
 800ab9c:	4b9a      	ldr	r3, [pc, #616]	; (800ae08 <procData+0x740>)
 800ab9e:	2200      	movs	r2, #0
 800aba0:	679a      	str	r2, [r3, #120]	; 0x78
}
 800aba2:	e1a1      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"CONNECT FAIL",13)==0){
 800aba4:	4aa2      	ldr	r2, [pc, #648]	; (800ae30 <procData+0x768>)
 800aba6:	4b96      	ldr	r3, [pc, #600]	; (800ae00 <procData+0x738>)
 800aba8:	0011      	movs	r1, r2
 800abaa:	0018      	movs	r0, r3
 800abac:	f7fe faac 	bl	8009108 <strcmp>
 800abb0:	1e03      	subs	r3, r0, #0
 800abb2:	d103      	bne.n	800abbc <procData+0x4f4>
		gsmState = GPRS_Off;
 800abb4:	4b99      	ldr	r3, [pc, #612]	; (800ae1c <procData+0x754>)
 800abb6:	2214      	movs	r2, #20
 800abb8:	701a      	strb	r2, [r3, #0]
}
 800abba:	e195      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"CONNECT OK",11)==0){
 800abbc:	4a9d      	ldr	r2, [pc, #628]	; (800ae34 <procData+0x76c>)
 800abbe:	4b90      	ldr	r3, [pc, #576]	; (800ae00 <procData+0x738>)
 800abc0:	0011      	movs	r1, r2
 800abc2:	0018      	movs	r0, r3
 800abc4:	f7fe faa0 	bl	8009108 <strcmp>
 800abc8:	1e03      	subs	r3, r0, #0
 800abca:	d10e      	bne.n	800abea <procData+0x522>
		gsmInfo.gprsDataPending = 0;
 800abcc:	4b8e      	ldr	r3, [pc, #568]	; (800ae08 <procData+0x740>)
 800abce:	2280      	movs	r2, #128	; 0x80
 800abd0:	2100      	movs	r1, #0
 800abd2:	5099      	str	r1, [r3, r2]
		gsmInfo.socket = 1;
 800abd4:	4b8c      	ldr	r3, [pc, #560]	; (800ae08 <procData+0x740>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	679a      	str	r2, [r3, #120]	; 0x78
		gsmState = GPRS_Send;
 800abda:	4b90      	ldr	r3, [pc, #576]	; (800ae1c <procData+0x754>)
 800abdc:	221c      	movs	r2, #28
 800abde:	701a      	strb	r2, [r3, #0]
		Debug_Send("connected\r\n");
 800abe0:	4b95      	ldr	r3, [pc, #596]	; (800ae38 <procData+0x770>)
 800abe2:	0018      	movs	r0, r3
 800abe4:	f7ff fcca 	bl	800a57c <Debug_Send>
}
 800abe8:	e17e      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"SEND OK",7)==0){	//data sent
 800abea:	4994      	ldr	r1, [pc, #592]	; (800ae3c <procData+0x774>)
 800abec:	4b84      	ldr	r3, [pc, #528]	; (800ae00 <procData+0x738>)
 800abee:	2207      	movs	r2, #7
 800abf0:	0018      	movs	r0, r3
 800abf2:	f007 fcf2 	bl	80125da <strncmp>
 800abf6:	1e03      	subs	r3, r0, #0
 800abf8:	d10d      	bne.n	800ac16 <procData+0x54e>
		gsmInfo.MQTT_Data = 1;
 800abfa:	4a83      	ldr	r2, [pc, #524]	; (800ae08 <procData+0x740>)
 800abfc:	23c0      	movs	r3, #192	; 0xc0
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	2101      	movs	r1, #1
 800ac02:	50d1      	str	r1, [r2, r3]
		if (mqttFlag.connect == 1) mqttFlag.connect = 2;
 800ac04:	4b8e      	ldr	r3, [pc, #568]	; (800ae40 <procData+0x778>)
 800ac06:	78db      	ldrb	r3, [r3, #3]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d000      	beq.n	800ac0e <procData+0x546>
 800ac0c:	e16c      	b.n	800aee8 <procData+0x820>
 800ac0e:	4b8c      	ldr	r3, [pc, #560]	; (800ae40 <procData+0x778>)
 800ac10:	2202      	movs	r2, #2
 800ac12:	70da      	strb	r2, [r3, #3]
}
 800ac14:	e168      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"CLOSED",6)==0){	//socket closed by remote
 800ac16:	498b      	ldr	r1, [pc, #556]	; (800ae44 <procData+0x77c>)
 800ac18:	4b79      	ldr	r3, [pc, #484]	; (800ae00 <procData+0x738>)
 800ac1a:	2206      	movs	r2, #6
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	f007 fcdc 	bl	80125da <strncmp>
 800ac22:	1e03      	subs	r3, r0, #0
 800ac24:	d117      	bne.n	800ac56 <procData+0x58e>
		gsmInfo.socket = 0;
 800ac26:	4b78      	ldr	r3, [pc, #480]	; (800ae08 <procData+0x740>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	679a      	str	r2, [r3, #120]	; 0x78
		gsmTimer = 0;
 800ac2c:	4b86      	ldr	r3, [pc, #536]	; (800ae48 <procData+0x780>)
 800ac2e:	2200      	movs	r2, #0
 800ac30:	601a      	str	r2, [r3, #0]
		Debug_Send("Socket closed\r\n");
 800ac32:	4b86      	ldr	r3, [pc, #536]	; (800ae4c <procData+0x784>)
 800ac34:	0018      	movs	r0, r3
 800ac36:	f7ff fca1 	bl	800a57c <Debug_Send>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_SET);
 800ac3a:	2380      	movs	r3, #128	; 0x80
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	4884      	ldr	r0, [pc, #528]	; (800ae50 <procData+0x788>)
 800ac40:	2201      	movs	r2, #1
 800ac42:	0019      	movs	r1, r3
 800ac44:	f003 fa84 	bl	800e150 <HAL_GPIO_WritePin>
		gsmState = GPRS_Off;
 800ac48:	4b74      	ldr	r3, [pc, #464]	; (800ae1c <procData+0x754>)
 800ac4a:	2214      	movs	r2, #20
 800ac4c:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 800ac4e:	4b73      	ldr	r3, [pc, #460]	; (800ae1c <procData+0x754>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	701a      	strb	r2, [r3, #0]
}
 800ac54:	e148      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"CLOSE OK",8)==0){
 800ac56:	497f      	ldr	r1, [pc, #508]	; (800ae54 <procData+0x78c>)
 800ac58:	4b69      	ldr	r3, [pc, #420]	; (800ae00 <procData+0x738>)
 800ac5a:	2208      	movs	r2, #8
 800ac5c:	0018      	movs	r0, r3
 800ac5e:	f007 fcbc 	bl	80125da <strncmp>
 800ac62:	1e03      	subs	r3, r0, #0
 800ac64:	d110      	bne.n	800ac88 <procData+0x5c0>
		gsmInfo.socket = 0;
 800ac66:	4b68      	ldr	r3, [pc, #416]	; (800ae08 <procData+0x740>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	679a      	str	r2, [r3, #120]	; 0x78
		gsmTimer = 0;
 800ac6c:	4b76      	ldr	r3, [pc, #472]	; (800ae48 <procData+0x780>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	601a      	str	r2, [r3, #0]
		Debug_Send("Socket forced closed\r\n");
 800ac72:	4b79      	ldr	r3, [pc, #484]	; (800ae58 <procData+0x790>)
 800ac74:	0018      	movs	r0, r3
 800ac76:	f7ff fc81 	bl	800a57c <Debug_Send>
		gsmState = GPRS_Off;
 800ac7a:	4b68      	ldr	r3, [pc, #416]	; (800ae1c <procData+0x754>)
 800ac7c:	2214      	movs	r2, #20
 800ac7e:	701a      	strb	r2, [r3, #0]
		gsmState = 0;
 800ac80:	4b66      	ldr	r3, [pc, #408]	; (800ae1c <procData+0x754>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	701a      	strb	r2, [r3, #0]
}
 800ac86:	e12f      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFTPOPEN:",10)==0)FTP_OpenF();
 800ac88:	4974      	ldr	r1, [pc, #464]	; (800ae5c <procData+0x794>)
 800ac8a:	4b5d      	ldr	r3, [pc, #372]	; (800ae00 <procData+0x738>)
 800ac8c:	220a      	movs	r2, #10
 800ac8e:	0018      	movs	r0, r3
 800ac90:	f007 fca3 	bl	80125da <strncmp>
 800ac94:	1e03      	subs	r3, r0, #0
 800ac96:	d102      	bne.n	800ac9e <procData+0x5d6>
 800ac98:	f000 f9f8 	bl	800b08c <FTP_OpenF>
}
 800ac9c:	e124      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFTPSTAT:",10)==0)FTP_StatusF();
 800ac9e:	4970      	ldr	r1, [pc, #448]	; (800ae60 <procData+0x798>)
 800aca0:	4b57      	ldr	r3, [pc, #348]	; (800ae00 <procData+0x738>)
 800aca2:	220a      	movs	r2, #10
 800aca4:	0018      	movs	r0, r3
 800aca6:	f007 fc98 	bl	80125da <strncmp>
 800acaa:	1e03      	subs	r3, r0, #0
 800acac:	d102      	bne.n	800acb4 <procData+0x5ec>
 800acae:	f000 fa2d 	bl	800b10c <FTP_StatusF>
}
 800acb2:	e119      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFTPNLST",9)==0)gsmState = FTP_Config;
 800acb4:	496b      	ldr	r1, [pc, #428]	; (800ae64 <procData+0x79c>)
 800acb6:	4b52      	ldr	r3, [pc, #328]	; (800ae00 <procData+0x738>)
 800acb8:	2209      	movs	r2, #9
 800acba:	0018      	movs	r0, r3
 800acbc:	f007 fc8d 	bl	80125da <strncmp>
 800acc0:	1e03      	subs	r3, r0, #0
 800acc2:	d103      	bne.n	800accc <procData+0x604>
 800acc4:	4b55      	ldr	r3, [pc, #340]	; (800ae1c <procData+0x754>)
 800acc6:	222a      	movs	r2, #42	; 0x2a
 800acc8:	701a      	strb	r2, [r3, #0]
}
 800acca:	e10d      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFTPGET",8)==0)gsmState = FS_Storage;
 800accc:	4966      	ldr	r1, [pc, #408]	; (800ae68 <procData+0x7a0>)
 800acce:	4b4c      	ldr	r3, [pc, #304]	; (800ae00 <procData+0x738>)
 800acd0:	2208      	movs	r2, #8
 800acd2:	0018      	movs	r0, r3
 800acd4:	f007 fc81 	bl	80125da <strncmp>
 800acd8:	1e03      	subs	r3, r0, #0
 800acda:	d103      	bne.n	800ace4 <procData+0x61c>
 800acdc:	4b4f      	ldr	r3, [pc, #316]	; (800ae1c <procData+0x754>)
 800acde:	222d      	movs	r2, #45	; 0x2d
 800ace0:	701a      	strb	r2, [r3, #0]
}
 800ace2:	e101      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFLDS",6)==0)gsmState = FS_SList;
 800ace4:	4961      	ldr	r1, [pc, #388]	; (800ae6c <procData+0x7a4>)
 800ace6:	4b46      	ldr	r3, [pc, #280]	; (800ae00 <procData+0x738>)
 800ace8:	2206      	movs	r2, #6
 800acea:	0018      	movs	r0, r3
 800acec:	f007 fc75 	bl	80125da <strncmp>
 800acf0:	1e03      	subs	r3, r0, #0
 800acf2:	d103      	bne.n	800acfc <procData+0x634>
 800acf4:	4b49      	ldr	r3, [pc, #292]	; (800ae1c <procData+0x754>)
 800acf6:	222e      	movs	r2, #46	; 0x2e
 800acf8:	701a      	strb	r2, [r3, #0]
}
 800acfa:	e0f5      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFLST",6)==0)FileSize();
 800acfc:	495c      	ldr	r1, [pc, #368]	; (800ae70 <procData+0x7a8>)
 800acfe:	4b40      	ldr	r3, [pc, #256]	; (800ae00 <procData+0x738>)
 800ad00:	2206      	movs	r2, #6
 800ad02:	0018      	movs	r0, r3
 800ad04:	f007 fc69 	bl	80125da <strncmp>
 800ad08:	1e03      	subs	r3, r0, #0
 800ad0a:	d102      	bne.n	800ad12 <procData+0x64a>
 800ad0c:	f000 f948 	bl	800afa0 <FileSize>
}
 800ad10:	e0ea      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFOPEN",7)==0) FS_Open_F();
 800ad12:	4958      	ldr	r1, [pc, #352]	; (800ae74 <procData+0x7ac>)
 800ad14:	4b3a      	ldr	r3, [pc, #232]	; (800ae00 <procData+0x738>)
 800ad16:	2207      	movs	r2, #7
 800ad18:	0018      	movs	r0, r3
 800ad1a:	f007 fc5e 	bl	80125da <strncmp>
 800ad1e:	1e03      	subs	r3, r0, #0
 800ad20:	d102      	bne.n	800ad28 <procData+0x660>
 800ad22:	f000 f985 	bl	800b030 <FS_Open_F>
}
 800ad26:	e0df      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFDWL",6)==0)gsmState = FTP_Close;
 800ad28:	4953      	ldr	r1, [pc, #332]	; (800ae78 <procData+0x7b0>)
 800ad2a:	4b35      	ldr	r3, [pc, #212]	; (800ae00 <procData+0x738>)
 800ad2c:	2206      	movs	r2, #6
 800ad2e:	0018      	movs	r0, r3
 800ad30:	f007 fc53 	bl	80125da <strncmp>
 800ad34:	1e03      	subs	r3, r0, #0
 800ad36:	d103      	bne.n	800ad40 <procData+0x678>
 800ad38:	4b38      	ldr	r3, [pc, #224]	; (800ae1c <procData+0x754>)
 800ad3a:	2226      	movs	r2, #38	; 0x26
 800ad3c:	701a      	strb	r2, [r3, #0]
}
 800ad3e:	e0d3      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFTPSIZE",9)==0)gsmState = FTP_Close;
 800ad40:	494e      	ldr	r1, [pc, #312]	; (800ae7c <procData+0x7b4>)
 800ad42:	4b2f      	ldr	r3, [pc, #188]	; (800ae00 <procData+0x738>)
 800ad44:	2209      	movs	r2, #9
 800ad46:	0018      	movs	r0, r3
 800ad48:	f007 fc47 	bl	80125da <strncmp>
 800ad4c:	1e03      	subs	r3, r0, #0
 800ad4e:	d103      	bne.n	800ad58 <procData+0x690>
 800ad50:	4b32      	ldr	r3, [pc, #200]	; (800ae1c <procData+0x754>)
 800ad52:	2226      	movs	r2, #38	; 0x26
 800ad54:	701a      	strb	r2, [r3, #0]
}
 800ad56:	e0c7      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFTPCLOSE",10)==0){
 800ad58:	4949      	ldr	r1, [pc, #292]	; (800ae80 <procData+0x7b8>)
 800ad5a:	4b29      	ldr	r3, [pc, #164]	; (800ae00 <procData+0x738>)
 800ad5c:	220a      	movs	r2, #10
 800ad5e:	0018      	movs	r0, r3
 800ad60:	f007 fc3b 	bl	80125da <strncmp>
 800ad64:	1e03      	subs	r3, r0, #0
 800ad66:	d108      	bne.n	800ad7a <procData+0x6b2>
		gsmInfo.FTP_Open = 0;
 800ad68:	4a27      	ldr	r2, [pc, #156]	; (800ae08 <procData+0x740>)
 800ad6a:	23b2      	movs	r3, #178	; 0xb2
 800ad6c:	005b      	lsls	r3, r3, #1
 800ad6e:	2100      	movs	r1, #0
 800ad70:	50d1      	str	r1, [r2, r3]
		gsmState = GPRS_Off;
 800ad72:	4b2a      	ldr	r3, [pc, #168]	; (800ae1c <procData+0x754>)
 800ad74:	2214      	movs	r2, #20
 800ad76:	701a      	strb	r2, [r3, #0]
}
 800ad78:	e0b6      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+QFTPSIZE",9)==0) gsmState = FTP_Download;
 800ad7a:	4940      	ldr	r1, [pc, #256]	; (800ae7c <procData+0x7b4>)
 800ad7c:	4b20      	ldr	r3, [pc, #128]	; (800ae00 <procData+0x738>)
 800ad7e:	2209      	movs	r2, #9
 800ad80:	0018      	movs	r0, r3
 800ad82:	f007 fc2a 	bl	80125da <strncmp>
 800ad86:	1e03      	subs	r3, r0, #0
 800ad88:	d103      	bne.n	800ad92 <procData+0x6ca>
 800ad8a:	4b24      	ldr	r3, [pc, #144]	; (800ae1c <procData+0x754>)
 800ad8c:	2227      	movs	r2, #39	; 0x27
 800ad8e:	701a      	strb	r2, [r3, #0]
}
 800ad90:	e0aa      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+MIPCLOSE",9)==0)gsmState = GPRS_Off;
 800ad92:	493c      	ldr	r1, [pc, #240]	; (800ae84 <procData+0x7bc>)
 800ad94:	4b1a      	ldr	r3, [pc, #104]	; (800ae00 <procData+0x738>)
 800ad96:	2209      	movs	r2, #9
 800ad98:	0018      	movs	r0, r3
 800ad9a:	f007 fc1e 	bl	80125da <strncmp>
 800ad9e:	1e03      	subs	r3, r0, #0
 800ada0:	d103      	bne.n	800adaa <procData+0x6e2>
 800ada2:	4b1e      	ldr	r3, [pc, #120]	; (800ae1c <procData+0x754>)
 800ada4:	2214      	movs	r2, #20
 800ada6:	701a      	strb	r2, [r3, #0]
}
 800ada8:	e09e      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"SEND FAIL",8)==0)gsmState = GPRS_Off;
 800adaa:	4937      	ldr	r1, [pc, #220]	; (800ae88 <procData+0x7c0>)
 800adac:	4b14      	ldr	r3, [pc, #80]	; (800ae00 <procData+0x738>)
 800adae:	2208      	movs	r2, #8
 800adb0:	0018      	movs	r0, r3
 800adb2:	f007 fc12 	bl	80125da <strncmp>
 800adb6:	1e03      	subs	r3, r0, #0
 800adb8:	d103      	bne.n	800adc2 <procData+0x6fa>
 800adba:	4b18      	ldr	r3, [pc, #96]	; (800ae1c <procData+0x754>)
 800adbc:	2214      	movs	r2, #20
 800adbe:	701a      	strb	r2, [r3, #0]
}
 800adc0:	e092      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+CMGL",5)==0) GotSMS();
 800adc2:	4932      	ldr	r1, [pc, #200]	; (800ae8c <procData+0x7c4>)
 800adc4:	4b0e      	ldr	r3, [pc, #56]	; (800ae00 <procData+0x738>)
 800adc6:	2205      	movs	r2, #5
 800adc8:	0018      	movs	r0, r3
 800adca:	f007 fc06 	bl	80125da <strncmp>
 800adce:	1e03      	subs	r3, r0, #0
 800add0:	d102      	bne.n	800add8 <procData+0x710>
 800add2:	f000 fd41 	bl	800b858 <GotSMS>
}
 800add6:	e087      	b.n	800aee8 <procData+0x820>
	else if(strncmp((char*)procBuff,"+CPIN: NOT READY",16)==0){
 800add8:	492d      	ldr	r1, [pc, #180]	; (800ae90 <procData+0x7c8>)
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <procData+0x738>)
 800addc:	2210      	movs	r2, #16
 800adde:	0018      	movs	r0, r3
 800ade0:	f007 fbfb 	bl	80125da <strncmp>
 800ade4:	1e03      	subs	r3, r0, #0
 800ade6:	d155      	bne.n	800ae94 <procData+0x7cc>
		GSM_Init();
 800ade8:	f7fe fa48 	bl	800927c <GSM_Init>
}
 800adec:	e07c      	b.n	800aee8 <procData+0x820>
 800adee:	46c0      	nop			; (mov r8, r8)
 800adf0:	20001888 	.word	0x20001888
 800adf4:	200000c8 	.word	0x200000c8
 800adf8:	200018a8 	.word	0x200018a8
 800adfc:	20001e24 	.word	0x20001e24
 800ae00:	20001518 	.word	0x20001518
 800ae04:	20001884 	.word	0x20001884
 800ae08:	20001628 	.word	0x20001628
 800ae0c:	200000cc 	.word	0x200000cc
 800ae10:	080136d4 	.word	0x080136d4
 800ae14:	0000ede4 	.word	0x0000ede4
 800ae18:	080136d8 	.word	0x080136d8
 800ae1c:	200000c0 	.word	0x200000c0
 800ae20:	080136ec 	.word	0x080136ec
 800ae24:	080136fc 	.word	0x080136fc
 800ae28:	200000d0 	.word	0x200000d0
 800ae2c:	08013710 	.word	0x08013710
 800ae30:	08013720 	.word	0x08013720
 800ae34:	08013730 	.word	0x08013730
 800ae38:	0801373c 	.word	0x0801373c
 800ae3c:	08013748 	.word	0x08013748
 800ae40:	20001614 	.word	0x20001614
 800ae44:	08013750 	.word	0x08013750
 800ae48:	200014f4 	.word	0x200014f4
 800ae4c:	08013758 	.word	0x08013758
 800ae50:	48000400 	.word	0x48000400
 800ae54:	08013768 	.word	0x08013768
 800ae58:	08013774 	.word	0x08013774
 800ae5c:	0801378c 	.word	0x0801378c
 800ae60:	08013798 	.word	0x08013798
 800ae64:	080137a4 	.word	0x080137a4
 800ae68:	080137b0 	.word	0x080137b0
 800ae6c:	080137bc 	.word	0x080137bc
 800ae70:	080137c4 	.word	0x080137c4
 800ae74:	080137cc 	.word	0x080137cc
 800ae78:	080137d4 	.word	0x080137d4
 800ae7c:	080137dc 	.word	0x080137dc
 800ae80:	080137e8 	.word	0x080137e8
 800ae84:	080137f4 	.word	0x080137f4
 800ae88:	08013800 	.word	0x08013800
 800ae8c:	0801380c 	.word	0x0801380c
 800ae90:	08013814 	.word	0x08013814
	else if(strncmp((char*)procBuff,"ERROR",5)==0){
 800ae94:	4916      	ldr	r1, [pc, #88]	; (800aef0 <procData+0x828>)
 800ae96:	4b17      	ldr	r3, [pc, #92]	; (800aef4 <procData+0x82c>)
 800ae98:	2205      	movs	r2, #5
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	f007 fb9d 	bl	80125da <strncmp>
 800aea0:	1e03      	subs	r3, r0, #0
 800aea2:	d117      	bne.n	800aed4 <procData+0x80c>
		onTimer = 0;
 800aea4:	4b14      	ldr	r3, [pc, #80]	; (800aef8 <procData+0x830>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	801a      	strh	r2, [r3, #0]
		smsFlags.config = 0;
 800aeaa:	4b14      	ldr	r3, [pc, #80]	; (800aefc <procData+0x834>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	605a      	str	r2, [r3, #4]
		smsFlags.gprsActive = 0;
 800aeb0:	4b12      	ldr	r3, [pc, #72]	; (800aefc <procData+0x834>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	61da      	str	r2, [r3, #28]
		if (gsmInfo.balancePending == 1){
 800aeb6:	4a12      	ldr	r2, [pc, #72]	; (800af00 <procData+0x838>)
 800aeb8:	239c      	movs	r3, #156	; 0x9c
 800aeba:	005b      	lsls	r3, r3, #1
 800aebc:	58d3      	ldr	r3, [r2, r3]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d112      	bne.n	800aee8 <procData+0x820>
			gsmInfo.balancePending = 0;
 800aec2:	4a0f      	ldr	r2, [pc, #60]	; (800af00 <procData+0x838>)
 800aec4:	239c      	movs	r3, #156	; 0x9c
 800aec6:	005b      	lsls	r3, r3, #1
 800aec8:	2100      	movs	r1, #0
 800aeca:	50d1      	str	r1, [r2, r3]
			gsmState = 0;
 800aecc:	4b0d      	ldr	r3, [pc, #52]	; (800af04 <procData+0x83c>)
 800aece:	2200      	movs	r2, #0
 800aed0:	701a      	strb	r2, [r3, #0]
}
 800aed2:	e009      	b.n	800aee8 <procData+0x820>
	else if (gsmInfo.GPRS_Rec == 1){
 800aed4:	4a0a      	ldr	r2, [pc, #40]	; (800af00 <procData+0x838>)
 800aed6:	23ac      	movs	r3, #172	; 0xac
 800aed8:	005b      	lsls	r3, r3, #1
 800aeda:	58d3      	ldr	r3, [r2, r3]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d103      	bne.n	800aee8 <procData+0x820>
		Debug_Send("Socket forced closed\r\n");
 800aee0:	4b09      	ldr	r3, [pc, #36]	; (800af08 <procData+0x840>)
 800aee2:	0018      	movs	r0, r3
 800aee4:	f7ff fb4a 	bl	800a57c <Debug_Send>
}
 800aee8:	46c0      	nop			; (mov r8, r8)
 800aeea:	46bd      	mov	sp, r7
 800aeec:	b003      	add	sp, #12
 800aeee:	bd90      	pop	{r4, r7, pc}
 800aef0:	08013828 	.word	0x08013828
 800aef4:	20001518 	.word	0x20001518
 800aef8:	20000164 	.word	0x20000164
 800aefc:	2000112c 	.word	0x2000112c
 800af00:	20001628 	.word	0x20001628
 800af04:	200000c0 	.word	0x200000c0
 800af08:	08013774 	.word	0x08013774

0800af0c <getFtp>:
void Download(){


}

void getFtp(){
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0
	while(ftpinc < ftpPacket){
 800af10:	e02a      	b.n	800af68 <getFtp+0x5c>
		if (recBuffPointerWrite != recBuffPointerRead){
 800af12:	4b1b      	ldr	r3, [pc, #108]	; (800af80 <getFtp+0x74>)
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	4b1b      	ldr	r3, [pc, #108]	; (800af84 <getFtp+0x78>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d024      	beq.n	800af68 <getFtp+0x5c>
			//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			gsmSend = 0;
 800af1e:	4b1a      	ldr	r3, [pc, #104]	; (800af88 <getFtp+0x7c>)
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
			//if (recBuffDebug[recBuffPointerRead] != 0x0A){
				ftpReceived[ftpinc] = recBuffDebug[recBuffPointerRead];
 800af24:	4b17      	ldr	r3, [pc, #92]	; (800af84 <getFtp+0x78>)
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	4b18      	ldr	r3, [pc, #96]	; (800af8c <getFtp+0x80>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4918      	ldr	r1, [pc, #96]	; (800af90 <getFtp+0x84>)
 800af2e:	5c89      	ldrb	r1, [r1, r2]
 800af30:	4a18      	ldr	r2, [pc, #96]	; (800af94 <getFtp+0x88>)
 800af32:	54d1      	strb	r1, [r2, r3]
				//HAL_UART_Transmit(&huart1, procBuff[procBuffpointer], 1, 10);
				/*if (recBuff[recBuffPointerRead] != 0x0A)*/ //SendChar(procBuff[procBuffpointer]);
				recBuffPointerRead++;
 800af34:	4b13      	ldr	r3, [pc, #76]	; (800af84 <getFtp+0x78>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	4b12      	ldr	r3, [pc, #72]	; (800af84 <getFtp+0x78>)
 800af3c:	601a      	str	r2, [r3, #0]
				if (ftpPad == 1) ftpinc++;
 800af3e:	4b16      	ldr	r3, [pc, #88]	; (800af98 <getFtp+0x8c>)
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d104      	bne.n	800af50 <getFtp+0x44>
 800af46:	4b11      	ldr	r3, [pc, #68]	; (800af8c <getFtp+0x80>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	1c5a      	adds	r2, r3, #1
 800af4c:	4b0f      	ldr	r3, [pc, #60]	; (800af8c <getFtp+0x80>)
 800af4e:	601a      	str	r2, [r3, #0]
				if (recBuffPointerRead > recBuffSize) recBuffPointerRead = 0;
 800af50:	4b0c      	ldr	r3, [pc, #48]	; (800af84 <getFtp+0x78>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	2396      	movs	r3, #150	; 0x96
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	429a      	cmp	r2, r3
 800af5a:	dd02      	ble.n	800af62 <getFtp+0x56>
 800af5c:	4b09      	ldr	r3, [pc, #36]	; (800af84 <getFtp+0x78>)
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]
				ftpPad = 1;
 800af62:	4b0d      	ldr	r3, [pc, #52]	; (800af98 <getFtp+0x8c>)
 800af64:	2201      	movs	r2, #1
 800af66:	701a      	strb	r2, [r3, #0]
	while(ftpinc < ftpPacket){
 800af68:	4b08      	ldr	r3, [pc, #32]	; (800af8c <getFtp+0x80>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	001a      	movs	r2, r3
 800af6e:	4b0b      	ldr	r3, [pc, #44]	; (800af9c <getFtp+0x90>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	429a      	cmp	r2, r3
 800af74:	d3cd      	bcc.n	800af12 <getFtp+0x6>
				//procBuffpointer++;
				//if (procBuffpointer > procBuffSize) procBuffpointer = 0;
			//}
		}
	}
}
 800af76:	46c0      	nop			; (mov r8, r8)
 800af78:	46c0      	nop			; (mov r8, r8)
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	46c0      	nop			; (mov r8, r8)
 800af80:	20000168 	.word	0x20000168
 800af84:	2000016c 	.word	0x2000016c
 800af88:	20000180 	.word	0x20000180
 800af8c:	200000c8 	.word	0x200000c8
 800af90:	2000115c 	.word	0x2000115c
 800af94:	200017ec 	.word	0x200017ec
 800af98:	200018a8 	.word	0x200018a8
 800af9c:	200000cc 	.word	0x200000cc

0800afa0 <FileSize>:
	Debug_Send(temp1);
	Debug_Send("\r\n");
	gsmState = FTP_Close;
}

void FileSize(){
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af02      	add	r7, sp, #8
	gsmState = FS_Open;
 800afa6:	4b1a      	ldr	r3, [pc, #104]	; (800b010 <FileSize+0x70>)
 800afa8:	2232      	movs	r2, #50	; 0x32
 800afaa:	701a      	strb	r2, [r3, #0]
	myStrSection(procBuff,temp,10,',',1);
 800afac:	4919      	ldr	r1, [pc, #100]	; (800b014 <FileSize+0x74>)
 800afae:	481a      	ldr	r0, [pc, #104]	; (800b018 <FileSize+0x78>)
 800afb0:	2301      	movs	r3, #1
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	232c      	movs	r3, #44	; 0x2c
 800afb6:	220a      	movs	r2, #10
 800afb8:	f002 f9a9 	bl	800d30e <myStrSection>
	flashWrite(eepromOrigin + 910,temp,strlen(temp) + 1);
 800afbc:	4b15      	ldr	r3, [pc, #84]	; (800b014 <FileSize+0x74>)
 800afbe:	0018      	movs	r0, r3
 800afc0:	f7fe f8ac 	bl	800911c <strlen>
 800afc4:	0003      	movs	r3, r0
 800afc6:	1c5a      	adds	r2, r3, #1
 800afc8:	4b12      	ldr	r3, [pc, #72]	; (800b014 <FileSize+0x74>)
 800afca:	4814      	ldr	r0, [pc, #80]	; (800b01c <FileSize+0x7c>)
 800afcc:	0019      	movs	r1, r3
 800afce:	f002 f8af 	bl	800d130 <flashWrite>
	filesize = atoi(temp);
 800afd2:	4b10      	ldr	r3, [pc, #64]	; (800b014 <FileSize+0x74>)
 800afd4:	0018      	movs	r0, r3
 800afd6:	f007 fa89 	bl	80124ec <atoi>
 800afda:	0003      	movs	r3, r0
 800afdc:	001a      	movs	r2, r3
 800afde:	4b10      	ldr	r3, [pc, #64]	; (800b020 <FileSize+0x80>)
 800afe0:	601a      	str	r2, [r3, #0]
	myLongStr(filesize,temp1,10,10);
 800afe2:	4b0f      	ldr	r3, [pc, #60]	; (800b020 <FileSize+0x80>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	0018      	movs	r0, r3
 800afe8:	490e      	ldr	r1, [pc, #56]	; (800b024 <FileSize+0x84>)
 800afea:	230a      	movs	r3, #10
 800afec:	220a      	movs	r2, #10
 800afee:	f002 fa23 	bl	800d438 <myLongStr>
	Debug_Send("File size: ");
 800aff2:	4b0d      	ldr	r3, [pc, #52]	; (800b028 <FileSize+0x88>)
 800aff4:	0018      	movs	r0, r3
 800aff6:	f7ff fac1 	bl	800a57c <Debug_Send>
	Debug_Send(temp1);
 800affa:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <FileSize+0x84>)
 800affc:	0018      	movs	r0, r3
 800affe:	f7ff fabd 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800b002:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <FileSize+0x8c>)
 800b004:	0018      	movs	r0, r3
 800b006:	f7ff fab9 	bl	800a57c <Debug_Send>
}
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	200000c0 	.word	0x200000c0
 800b014:	20001e24 	.word	0x20001e24
 800b018:	20001518 	.word	0x20001518
 800b01c:	0000edee 	.word	0x0000edee
 800b020:	20001500 	.word	0x20001500
 800b024:	20001ea8 	.word	0x20001ea8
 800b028:	08013840 	.word	0x08013840
 800b02c:	08012fc4 	.word	0x08012fc4

0800b030 <FS_Open_F>:

void FS_Open_F(){
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af02      	add	r7, sp, #8
	//Debug_Send("Open file\r\n");
	myStrSection(procBuff, FID,30,' ',1);
 800b036:	490f      	ldr	r1, [pc, #60]	; (800b074 <FS_Open_F+0x44>)
 800b038:	480f      	ldr	r0, [pc, #60]	; (800b078 <FS_Open_F+0x48>)
 800b03a:	2301      	movs	r3, #1
 800b03c:	9300      	str	r3, [sp, #0]
 800b03e:	2320      	movs	r3, #32
 800b040:	221e      	movs	r2, #30
 800b042:	f002 f964 	bl	800d30e <myStrSection>
	Debug_Send(FID);
 800b046:	4b0b      	ldr	r3, [pc, #44]	; (800b074 <FS_Open_F+0x44>)
 800b048:	0018      	movs	r0, r3
 800b04a:	f7ff fa97 	bl	800a57c <Debug_Send>
	Debug_Send(" Opened\r\n");
 800b04e:	4b0b      	ldr	r3, [pc, #44]	; (800b07c <FS_Open_F+0x4c>)
 800b050:	0018      	movs	r0, r3
 800b052:	f7ff fa93 	bl	800a57c <Debug_Send>
	gsmState = FS_Seek;
 800b056:	4b0a      	ldr	r3, [pc, #40]	; (800b080 <FS_Open_F+0x50>)
 800b058:	2230      	movs	r2, #48	; 0x30
 800b05a:	701a      	strb	r2, [r3, #0]
	ftpRead = 1;
 800b05c:	4b09      	ldr	r3, [pc, #36]	; (800b084 <FS_Open_F+0x54>)
 800b05e:	2201      	movs	r2, #1
 800b060:	701a      	strb	r2, [r3, #0]
	gsmInfo.FS_Connect = 1;
 800b062:	4a09      	ldr	r2, [pc, #36]	; (800b088 <FS_Open_F+0x58>)
 800b064:	23b6      	movs	r3, #182	; 0xb6
 800b066:	005b      	lsls	r3, r3, #1
 800b068:	2101      	movs	r1, #1
 800b06a:	50d1      	str	r1, [r2, r3]
	//gsmState = FS_Read;
}
 800b06c:	46c0      	nop			; (mov r8, r8)
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	46c0      	nop			; (mov r8, r8)
 800b074:	20001890 	.word	0x20001890
 800b078:	20001518 	.word	0x20001518
 800b07c:	0801384c 	.word	0x0801384c
 800b080:	200000c0 	.word	0x200000c0
 800b084:	20001888 	.word	0x20001888
 800b088:	20001628 	.word	0x20001628

0800b08c <FTP_OpenF>:

void FTP_OpenF(){
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b088      	sub	sp, #32
 800b090:	af02      	add	r7, sp, #8
	char tmp[20];
	myStrSection(procBuff, tmp,30,':',1);
 800b092:	0039      	movs	r1, r7
 800b094:	4817      	ldr	r0, [pc, #92]	; (800b0f4 <FTP_OpenF+0x68>)
 800b096:	2301      	movs	r3, #1
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	233a      	movs	r3, #58	; 0x3a
 800b09c:	221e      	movs	r2, #30
 800b09e:	f002 f936 	bl	800d30e <myStrSection>
	Debug_Send("FTP Check open");
 800b0a2:	4b15      	ldr	r3, [pc, #84]	; (800b0f8 <FTP_OpenF+0x6c>)
 800b0a4:	0018      	movs	r0, r3
 800b0a6:	f7ff fa69 	bl	800a57c <Debug_Send>
	Debug_Send(tmp);
 800b0aa:	003b      	movs	r3, r7
 800b0ac:	0018      	movs	r0, r3
 800b0ae:	f7ff fa65 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800b0b2:	4b12      	ldr	r3, [pc, #72]	; (800b0fc <FTP_OpenF+0x70>)
 800b0b4:	0018      	movs	r0, r3
 800b0b6:	f7ff fa61 	bl	800a57c <Debug_Send>
	int len = strlen(tmp);
 800b0ba:	003b      	movs	r3, r7
 800b0bc:	0018      	movs	r0, r3
 800b0be:	f7fe f82d 	bl	800911c <strlen>
 800b0c2:	0003      	movs	r3, r0
 800b0c4:	617b      	str	r3, [r7, #20]
	//if (strncmp((char*)tmp,"0",1)){ //connection successful
	if (len < 2){
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	dc07      	bgt.n	800b0dc <FTP_OpenF+0x50>
		Debug_Send("FTP Connected\r\n");
 800b0cc:	4b0c      	ldr	r3, [pc, #48]	; (800b100 <FTP_OpenF+0x74>)
 800b0ce:	0018      	movs	r0, r3
 800b0d0:	f7ff fa54 	bl	800a57c <Debug_Send>
		gsmState = FTP_Path;
 800b0d4:	4b0b      	ldr	r3, [pc, #44]	; (800b104 <FTP_OpenF+0x78>)
 800b0d6:	222c      	movs	r2, #44	; 0x2c
 800b0d8:	701a      	strb	r2, [r3, #0]
		gsmState = FTP_Close;
	}
	//Debug_Send("FTP connected\r\n");
	//gsmState = FTP_Download;
	//gsmState = FTP_Path;
}
 800b0da:	e006      	b.n	800b0ea <FTP_OpenF+0x5e>
		Debug_Send("FTP NOT Connected\r\n");
 800b0dc:	4b0a      	ldr	r3, [pc, #40]	; (800b108 <FTP_OpenF+0x7c>)
 800b0de:	0018      	movs	r0, r3
 800b0e0:	f7ff fa4c 	bl	800a57c <Debug_Send>
		gsmState = FTP_Close;
 800b0e4:	4b07      	ldr	r3, [pc, #28]	; (800b104 <FTP_OpenF+0x78>)
 800b0e6:	2226      	movs	r2, #38	; 0x26
 800b0e8:	701a      	strb	r2, [r3, #0]
}
 800b0ea:	46c0      	nop			; (mov r8, r8)
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	b006      	add	sp, #24
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	46c0      	nop			; (mov r8, r8)
 800b0f4:	20001518 	.word	0x20001518
 800b0f8:	08013858 	.word	0x08013858
 800b0fc:	08012fc4 	.word	0x08012fc4
 800b100:	08013868 	.word	0x08013868
 800b104:	200000c0 	.word	0x200000c0
 800b108:	08013878 	.word	0x08013878

0800b10c <FTP_StatusF>:

void FTP_StatusF(){
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b088      	sub	sp, #32
 800b110:	af02      	add	r7, sp, #8
	char tmp [20];
	Debug_Send("FTP Check status ");
 800b112:	4b12      	ldr	r3, [pc, #72]	; (800b15c <FTP_StatusF+0x50>)
 800b114:	0018      	movs	r0, r3
 800b116:	f7ff fa31 	bl	800a57c <Debug_Send>
	myStrSection(procBuff, tmp,30,' ',1);
 800b11a:	0039      	movs	r1, r7
 800b11c:	4810      	ldr	r0, [pc, #64]	; (800b160 <FTP_StatusF+0x54>)
 800b11e:	2301      	movs	r3, #1
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	2320      	movs	r3, #32
 800b124:	221e      	movs	r2, #30
 800b126:	f002 f8f2 	bl	800d30e <myStrSection>
	Debug_Send(tmp);
 800b12a:	003b      	movs	r3, r7
 800b12c:	0018      	movs	r0, r3
 800b12e:	f7ff fa25 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800b132:	4b0c      	ldr	r3, [pc, #48]	; (800b164 <FTP_StatusF+0x58>)
 800b134:	0018      	movs	r0, r3
 800b136:	f7ff fa21 	bl	800a57c <Debug_Send>
	int len = strlen(tmp);
 800b13a:	003b      	movs	r3, r7
 800b13c:	0018      	movs	r0, r3
 800b13e:	f7fd ffed 	bl	800911c <strlen>
 800b142:	0003      	movs	r3, r0
 800b144:	617b      	str	r3, [r7, #20]
	/*if (strncmp((char*)tmp,"OPENING",7)) gsmState = 0;
	else if (strncmp((char*)tmp,"OPENED",7)) gsmState = FTP_Path;*/
	if (len == 6) gsmState = FTP_Path;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2b06      	cmp	r3, #6
 800b14a:	d102      	bne.n	800b152 <FTP_StatusF+0x46>
 800b14c:	4b06      	ldr	r3, [pc, #24]	; (800b168 <FTP_StatusF+0x5c>)
 800b14e:	222c      	movs	r2, #44	; 0x2c
 800b150:	701a      	strb	r2, [r3, #0]
}
 800b152:	46c0      	nop			; (mov r8, r8)
 800b154:	46bd      	mov	sp, r7
 800b156:	b006      	add	sp, #24
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	0801388c 	.word	0x0801388c
 800b160:	20001518 	.word	0x20001518
 800b164:	08012fc4 	.word	0x08012fc4
 800b168:	200000c0 	.word	0x200000c0

0800b16c <sendSMS>:

void sendSMS(char* num, char* msg){
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
	if (smsFlags.signal == 0) return;
 800b176:	4b21      	ldr	r3, [pc, #132]	; (800b1fc <sendSMS+0x90>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d035      	beq.n	800b1ea <sendSMS+0x7e>
	if (smsFlags.config == 0) return;
 800b17e:	4b1f      	ldr	r3, [pc, #124]	; (800b1fc <sendSMS+0x90>)
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d033      	beq.n	800b1ee <sendSMS+0x82>
	if (gsmInfo.low == 1) return;
 800b186:	4a1e      	ldr	r2, [pc, #120]	; (800b200 <sendSMS+0x94>)
 800b188:	2380      	movs	r3, #128	; 0x80
 800b18a:	005b      	lsls	r3, r3, #1
 800b18c:	58d3      	ldr	r3, [r2, r3]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d02f      	beq.n	800b1f2 <sendSMS+0x86>
	//char sms
	//sendData("Send SMS\r\n",UART0);
	Debug_Send("Send SMS\r\n");
 800b192:	4b1c      	ldr	r3, [pc, #112]	; (800b204 <sendSMS+0x98>)
 800b194:	0018      	movs	r0, r3
 800b196:	f7ff f9f1 	bl	800a57c <Debug_Send>
	strcpy (temp, "AT+CMGS=\"");
 800b19a:	4a1b      	ldr	r2, [pc, #108]	; (800b208 <sendSMS+0x9c>)
 800b19c:	4b1b      	ldr	r3, [pc, #108]	; (800b20c <sendSMS+0xa0>)
 800b19e:	0010      	movs	r0, r2
 800b1a0:	0019      	movs	r1, r3
 800b1a2:	230a      	movs	r3, #10
 800b1a4:	001a      	movs	r2, r3
 800b1a6:	f007 f9d1 	bl	801254c <memcpy>
	strcat(temp,num);
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	4b16      	ldr	r3, [pc, #88]	; (800b208 <sendSMS+0x9c>)
 800b1ae:	0011      	movs	r1, r2
 800b1b0:	0018      	movs	r0, r3
 800b1b2:	f007 f9fd 	bl	80125b0 <strcat>
	strcat(temp,"\"\r\n");
 800b1b6:	4b14      	ldr	r3, [pc, #80]	; (800b208 <sendSMS+0x9c>)
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	f7fd ffaf 	bl	800911c <strlen>
 800b1be:	0003      	movs	r3, r0
 800b1c0:	001a      	movs	r2, r3
 800b1c2:	4b11      	ldr	r3, [pc, #68]	; (800b208 <sendSMS+0x9c>)
 800b1c4:	18d2      	adds	r2, r2, r3
 800b1c6:	4b12      	ldr	r3, [pc, #72]	; (800b210 <sendSMS+0xa4>)
 800b1c8:	0010      	movs	r0, r2
 800b1ca:	0019      	movs	r1, r3
 800b1cc:	2304      	movs	r3, #4
 800b1ce:	001a      	movs	r2, r3
 800b1d0:	f007 f9bc 	bl	801254c <memcpy>
	GSM_Send(temp);
 800b1d4:	4b0c      	ldr	r3, [pc, #48]	; (800b208 <sendSMS+0x9c>)
 800b1d6:	0018      	movs	r0, r3
 800b1d8:	f7ff f97e 	bl	800a4d8 <GSM_Send>

	//GSM_Send("AT+CMGS=\"");
	//GSM_Send(num);,
	//GSM_Send("\"\r\n");
	//sendData("AT+CMGS=\"0720631005\"\r\n",UART1);
	strcpy(smsInfo.content1,msg);
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	4b0d      	ldr	r3, [pc, #52]	; (800b214 <sendSMS+0xa8>)
 800b1e0:	0011      	movs	r1, r2
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	f007 f9f1 	bl	80125ca <strcpy>
 800b1e8:	e004      	b.n	800b1f4 <sendSMS+0x88>
	if (smsFlags.signal == 0) return;
 800b1ea:	46c0      	nop			; (mov r8, r8)
 800b1ec:	e002      	b.n	800b1f4 <sendSMS+0x88>
	if (smsFlags.config == 0) return;
 800b1ee:	46c0      	nop			; (mov r8, r8)
 800b1f0:	e000      	b.n	800b1f4 <sendSMS+0x88>
	if (gsmInfo.low == 1) return;
 800b1f2:	46c0      	nop			; (mov r8, r8)
	//smsFlags.send = 0;
}
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	b002      	add	sp, #8
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	46c0      	nop			; (mov r8, r8)
 800b1fc:	2000112c 	.word	0x2000112c
 800b200:	20001628 	.word	0x20001628
 800b204:	080130fc 	.word	0x080130fc
 800b208:	20001e24 	.word	0x20001e24
 800b20c:	080138a0 	.word	0x080138a0
 800b210:	080138ac 	.word	0x080138ac
 800b214:	20001348 	.word	0x20001348

0800b218 <getIMEI>:
		errorCounter = 0;
		gsmState = 20;
	}
}*/

void getIMEI(){
 800b218:	b580      	push	{r7, lr}
 800b21a:	af00      	add	r7, sp, #0
	//myStrSection(procBuff, gsmInfo.imei,30,'"',1);
	/*Debug_Send("Procbuff:");
	Debug_Send(procBuff);
	Debug_Send("\r\n");*/
	strcpy(gsmInfo.imei,procBuff);
 800b21c:	4a12      	ldr	r2, [pc, #72]	; (800b268 <getIMEI+0x50>)
 800b21e:	4b13      	ldr	r3, [pc, #76]	; (800b26c <getIMEI+0x54>)
 800b220:	0011      	movs	r1, r2
 800b222:	0018      	movs	r0, r3
 800b224:	f007 f9d1 	bl	80125ca <strcpy>
	if (strncmp(gsmInfo.imei, "AT+CGSN", 7)== 0) gsmState = Imei;
 800b228:	4911      	ldr	r1, [pc, #68]	; (800b270 <getIMEI+0x58>)
 800b22a:	4b10      	ldr	r3, [pc, #64]	; (800b26c <getIMEI+0x54>)
 800b22c:	2207      	movs	r2, #7
 800b22e:	0018      	movs	r0, r3
 800b230:	f007 f9d3 	bl	80125da <strncmp>
 800b234:	1e03      	subs	r3, r0, #0
 800b236:	d102      	bne.n	800b23e <getIMEI+0x26>
 800b238:	4b0e      	ldr	r3, [pc, #56]	; (800b274 <getIMEI+0x5c>)
 800b23a:	2208      	movs	r2, #8
 800b23c:	701a      	strb	r2, [r3, #0]
	Debug_Send("IMEI:");
 800b23e:	4b0e      	ldr	r3, [pc, #56]	; (800b278 <getIMEI+0x60>)
 800b240:	0018      	movs	r0, r3
 800b242:	f7ff f99b 	bl	800a57c <Debug_Send>
	Debug_Send(gsmInfo.imei);
 800b246:	4b09      	ldr	r3, [pc, #36]	; (800b26c <getIMEI+0x54>)
 800b248:	0018      	movs	r0, r3
 800b24a:	f7ff f997 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800b24e:	4b0b      	ldr	r3, [pc, #44]	; (800b27c <getIMEI+0x64>)
 800b250:	0018      	movs	r0, r3
 800b252:	f7ff f993 	bl	800a57c <Debug_Send>
	gsmInfo.imeiFlag = 0;
 800b256:	4a0a      	ldr	r2, [pc, #40]	; (800b280 <getIMEI+0x68>)
 800b258:	23a8      	movs	r3, #168	; 0xa8
 800b25a:	005b      	lsls	r3, r3, #1
 800b25c:	2100      	movs	r1, #0
 800b25e:	50d1      	str	r1, [r2, r3]
	//sendData("IMEI:",UART0);
	//sendData(gsmInfo.imei,UART0);
	//sendData("\r\n",UART0);
}
 800b260:	46c0      	nop			; (mov r8, r8)
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	46c0      	nop			; (mov r8, r8)
 800b268:	20001518 	.word	0x20001518
 800b26c:	2000164c 	.word	0x2000164c
 800b270:	08013664 	.word	0x08013664
 800b274:	200000c0 	.word	0x200000c0
 800b278:	080138b0 	.word	0x080138b0
 800b27c:	08012fc4 	.word	0x08012fc4
 800b280:	20001628 	.word	0x20001628

0800b284 <getCCID>:

void getCCID(){
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af02      	add	r7, sp, #8
	myStrSection(procBuff, gsmInfo.ccid,30,' ',1);
 800b28a:	4905      	ldr	r1, [pc, #20]	; (800b2a0 <getCCID+0x1c>)
 800b28c:	4805      	ldr	r0, [pc, #20]	; (800b2a4 <getCCID+0x20>)
 800b28e:	2301      	movs	r3, #1
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	2320      	movs	r3, #32
 800b294:	221e      	movs	r2, #30
 800b296:	f002 f83a 	bl	800d30e <myStrSection>
	//sendData("CCID:",UART0);
	//sendData(gsmInfo.ccid,UART0);
	//sendData("\r\n",UART0);
}
 800b29a:	46c0      	nop			; (mov r8, r8)
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	20001674 	.word	0x20001674
 800b2a4:	20001518 	.word	0x20001518

0800b2a8 <getSignal>:

void getSignal(){
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af02      	add	r7, sp, #8
	myStrSection(procBuff, quality,3,' ',1);
 800b2ae:	490f      	ldr	r1, [pc, #60]	; (800b2ec <getSignal+0x44>)
 800b2b0:	480f      	ldr	r0, [pc, #60]	; (800b2f0 <getSignal+0x48>)
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	2320      	movs	r3, #32
 800b2b8:	2203      	movs	r2, #3
 800b2ba:	f002 f828 	bl	800d30e <myStrSection>
	int temp2;
	int temp3;
	temp2 = atoi(quality);
 800b2be:	4b0b      	ldr	r3, [pc, #44]	; (800b2ec <getSignal+0x44>)
 800b2c0:	0018      	movs	r0, r3
 800b2c2:	f007 f913 	bl	80124ec <atoi>
 800b2c6:	0003      	movs	r3, r0
 800b2c8:	607b      	str	r3, [r7, #4]
	temp2 *= 2;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	607b      	str	r3, [r7, #4]
	temp3 = 113 - temp2;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2271      	movs	r2, #113	; 0x71
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	603b      	str	r3, [r7, #0]
	sprintf (quality," -%ddBm", temp3);
 800b2d8:	683a      	ldr	r2, [r7, #0]
 800b2da:	4906      	ldr	r1, [pc, #24]	; (800b2f4 <getSignal+0x4c>)
 800b2dc:	4b03      	ldr	r3, [pc, #12]	; (800b2ec <getSignal+0x44>)
 800b2de:	0018      	movs	r0, r3
 800b2e0:	f007 f946 	bl	8012570 <siprintf>
}
 800b2e4:	46c0      	nop			; (mov r8, r8)
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	b002      	add	sp, #8
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	20001504 	.word	0x20001504
 800b2f0:	20001518 	.word	0x20001518
 800b2f4:	080138b8 	.word	0x080138b8

0800b2f8 <RegisterConfirm>:
		index++;
		myStrSection(smsInfo.content1, pair,100,',',index);
	}
}

void RegisterConfirm(){
 800b2f8:	b590      	push	{r4, r7, lr}
 800b2fa:	b089      	sub	sp, #36	; 0x24
 800b2fc:	af00      	add	r7, sp, #0
	char temps[30];
	strcpy(smsInfo.content1,"Unit registered\n");
 800b2fe:	4b2b      	ldr	r3, [pc, #172]	; (800b3ac <RegisterConfirm+0xb4>)
 800b300:	4a2b      	ldr	r2, [pc, #172]	; (800b3b0 <RegisterConfirm+0xb8>)
 800b302:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b304:	c313      	stmia	r3!, {r0, r1, r4}
 800b306:	6811      	ldr	r1, [r2, #0]
 800b308:	6019      	str	r1, [r3, #0]
 800b30a:	7912      	ldrb	r2, [r2, #4]
 800b30c:	711a      	strb	r2, [r3, #4]
	sprintf(temps,"User: %s\n",gsmInfo.user);
 800b30e:	4a29      	ldr	r2, [pc, #164]	; (800b3b4 <RegisterConfirm+0xbc>)
 800b310:	4929      	ldr	r1, [pc, #164]	; (800b3b8 <RegisterConfirm+0xc0>)
 800b312:	003b      	movs	r3, r7
 800b314:	0018      	movs	r0, r3
 800b316:	f007 f92b 	bl	8012570 <siprintf>
	strcat(smsInfo.content1,temps);
 800b31a:	003a      	movs	r2, r7
 800b31c:	4b23      	ldr	r3, [pc, #140]	; (800b3ac <RegisterConfirm+0xb4>)
 800b31e:	0011      	movs	r1, r2
 800b320:	0018      	movs	r0, r3
 800b322:	f007 f945 	bl	80125b0 <strcat>
	sprintf(temps,"MSISDN: %s\n",gsmInfo.msisdn);
 800b326:	4a25      	ldr	r2, [pc, #148]	; (800b3bc <RegisterConfirm+0xc4>)
 800b328:	4925      	ldr	r1, [pc, #148]	; (800b3c0 <RegisterConfirm+0xc8>)
 800b32a:	003b      	movs	r3, r7
 800b32c:	0018      	movs	r0, r3
 800b32e:	f007 f91f 	bl	8012570 <siprintf>
	strcat(smsInfo.content1,temps);
 800b332:	003a      	movs	r2, r7
 800b334:	4b1d      	ldr	r3, [pc, #116]	; (800b3ac <RegisterConfirm+0xb4>)
 800b336:	0011      	movs	r1, r2
 800b338:	0018      	movs	r0, r3
 800b33a:	f007 f939 	bl	80125b0 <strcat>
	strcat(smsInfo.content1,"URL: ");
 800b33e:	4b1b      	ldr	r3, [pc, #108]	; (800b3ac <RegisterConfirm+0xb4>)
 800b340:	0018      	movs	r0, r3
 800b342:	f7fd feeb 	bl	800911c <strlen>
 800b346:	0003      	movs	r3, r0
 800b348:	001a      	movs	r2, r3
 800b34a:	4b18      	ldr	r3, [pc, #96]	; (800b3ac <RegisterConfirm+0xb4>)
 800b34c:	18d2      	adds	r2, r2, r3
 800b34e:	4b1d      	ldr	r3, [pc, #116]	; (800b3c4 <RegisterConfirm+0xcc>)
 800b350:	0010      	movs	r0, r2
 800b352:	0019      	movs	r1, r3
 800b354:	2306      	movs	r3, #6
 800b356:	001a      	movs	r2, r3
 800b358:	f007 f8f8 	bl	801254c <memcpy>
	strcat(smsInfo.content1,gsmInfo.url);
 800b35c:	4a1a      	ldr	r2, [pc, #104]	; (800b3c8 <RegisterConfirm+0xd0>)
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <RegisterConfirm+0xb4>)
 800b360:	0011      	movs	r1, r2
 800b362:	0018      	movs	r0, r3
 800b364:	f007 f924 	bl	80125b0 <strcat>
	strcat(smsInfo.content1,":");
 800b368:	4b10      	ldr	r3, [pc, #64]	; (800b3ac <RegisterConfirm+0xb4>)
 800b36a:	0018      	movs	r0, r3
 800b36c:	f7fd fed6 	bl	800911c <strlen>
 800b370:	0003      	movs	r3, r0
 800b372:	001a      	movs	r2, r3
 800b374:	4b0d      	ldr	r3, [pc, #52]	; (800b3ac <RegisterConfirm+0xb4>)
 800b376:	18d2      	adds	r2, r2, r3
 800b378:	4b14      	ldr	r3, [pc, #80]	; (800b3cc <RegisterConfirm+0xd4>)
 800b37a:	0010      	movs	r0, r2
 800b37c:	0019      	movs	r1, r3
 800b37e:	2302      	movs	r3, #2
 800b380:	001a      	movs	r2, r3
 800b382:	f007 f8e3 	bl	801254c <memcpy>
	strcat(smsInfo.content1,gsmInfo.urlport);
 800b386:	4a12      	ldr	r2, [pc, #72]	; (800b3d0 <RegisterConfirm+0xd8>)
 800b388:	4b08      	ldr	r3, [pc, #32]	; (800b3ac <RegisterConfirm+0xb4>)
 800b38a:	0011      	movs	r1, r2
 800b38c:	0018      	movs	r0, r3
 800b38e:	f007 f90f 	bl	80125b0 <strcat>
	strcpy (smsInfo.build, smsInfo.content1);
 800b392:	4a06      	ldr	r2, [pc, #24]	; (800b3ac <RegisterConfirm+0xb4>)
 800b394:	4b0f      	ldr	r3, [pc, #60]	; (800b3d4 <RegisterConfirm+0xdc>)
 800b396:	0011      	movs	r1, r2
 800b398:	0018      	movs	r0, r3
 800b39a:	f007 f916 	bl	80125ca <strcpy>
	smsFlags.reply = 1;
 800b39e:	4b0e      	ldr	r3, [pc, #56]	; (800b3d8 <RegisterConfirm+0xe0>)
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	625a      	str	r2, [r3, #36]	; 0x24

}
 800b3a4:	46c0      	nop			; (mov r8, r8)
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	b009      	add	sp, #36	; 0x24
 800b3aa:	bd90      	pop	{r4, r7, pc}
 800b3ac:	20001348 	.word	0x20001348
 800b3b0:	08013948 	.word	0x08013948
 800b3b4:	200016bc 	.word	0x200016bc
 800b3b8:	0801395c 	.word	0x0801395c
 800b3bc:	200016da 	.word	0x200016da
 800b3c0:	08013968 	.word	0x08013968
 800b3c4:	08013974 	.word	0x08013974
 800b3c8:	20001628 	.word	0x20001628
 800b3cc:	08013574 	.word	0x08013574
 800b3d0:	20001646 	.word	0x20001646
 800b3d4:	20001420 	.word	0x20001420
 800b3d8:	2000112c 	.word	0x2000112c

0800b3dc <CheckUser>:

char CheckUser(){
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	af00      	add	r7, sp, #0
	Debug_Send("Check user\r\n");
 800b3e0:	4b11      	ldr	r3, [pc, #68]	; (800b428 <CheckUser+0x4c>)
 800b3e2:	0018      	movs	r0, r3
 800b3e4:	f7ff f8ca 	bl	800a57c <Debug_Send>
	if (strlen(gsmInfo.msisdn) < 2) return 0;
 800b3e8:	4b10      	ldr	r3, [pc, #64]	; (800b42c <CheckUser+0x50>)
 800b3ea:	0018      	movs	r0, r3
 800b3ec:	f7fd fe96 	bl	800911c <strlen>
 800b3f0:	0003      	movs	r3, r0
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d801      	bhi.n	800b3fa <CheckUser+0x1e>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	e012      	b.n	800b420 <CheckUser+0x44>
	if (strncmp(smsInfo.recMSISDN, gsmInfo.msisdn, 16) == 0){
 800b3fa:	490c      	ldr	r1, [pc, #48]	; (800b42c <CheckUser+0x50>)
 800b3fc:	4b0c      	ldr	r3, [pc, #48]	; (800b430 <CheckUser+0x54>)
 800b3fe:	2210      	movs	r2, #16
 800b400:	0018      	movs	r0, r3
 800b402:	f007 f8ea 	bl	80125da <strncmp>
 800b406:	1e03      	subs	r3, r0, #0
 800b408:	d105      	bne.n	800b416 <CheckUser+0x3a>
		Debug_Send("Found user\r\n");
 800b40a:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <CheckUser+0x58>)
 800b40c:	0018      	movs	r0, r3
 800b40e:	f7ff f8b5 	bl	800a57c <Debug_Send>
		return 1;
 800b412:	2301      	movs	r3, #1
 800b414:	e004      	b.n	800b420 <CheckUser+0x44>
	}
	else {
		Debug_Send("No user found\r\n");
 800b416:	4b08      	ldr	r3, [pc, #32]	; (800b438 <CheckUser+0x5c>)
 800b418:	0018      	movs	r0, r3
 800b41a:	f7ff f8af 	bl	800a57c <Debug_Send>
		return 0;
 800b41e:	2300      	movs	r3, #0
	}
}
 800b420:	0018      	movs	r0, r3
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	46c0      	nop			; (mov r8, r8)
 800b428:	0801397c 	.word	0x0801397c
 800b42c:	200016da 	.word	0x200016da
 800b430:	20001328 	.word	0x20001328
 800b434:	0801398c 	.word	0x0801398c
 800b438:	0801399c 	.word	0x0801399c

0800b43c <buildInfo>:
	//sendData(result,UART0);
	//strcpy(str, result);

}

void buildInfo(){
 800b43c:	b590      	push	{r4, r7, lr}
 800b43e:	b08f      	sub	sp, #60	; 0x3c
 800b440:	af00      	add	r7, sp, #0
	Debug_Send("Build INFO SMS\r\n");
 800b442:	4b79      	ldr	r3, [pc, #484]	; (800b628 <buildInfo+0x1ec>)
 800b444:	0018      	movs	r0, r3
 800b446:	f7ff f899 	bl	800a57c <Debug_Send>
	//strcpy(SMScontent,"Powerbox is active\n ");
	char temps[40];
	char adcv[10];
	//GetADC(adcv);
	strcpy(smsInfo.content1,"GSM active\n");
 800b44a:	4b78      	ldr	r3, [pc, #480]	; (800b62c <buildInfo+0x1f0>)
 800b44c:	4a78      	ldr	r2, [pc, #480]	; (800b630 <buildInfo+0x1f4>)
 800b44e:	ca13      	ldmia	r2!, {r0, r1, r4}
 800b450:	c313      	stmia	r3!, {r0, r1, r4}
	sprintf(temps,"V: %s\n",adcv);
 800b452:	1d3a      	adds	r2, r7, #4
 800b454:	4977      	ldr	r1, [pc, #476]	; (800b634 <buildInfo+0x1f8>)
 800b456:	2410      	movs	r4, #16
 800b458:	193b      	adds	r3, r7, r4
 800b45a:	0018      	movs	r0, r3
 800b45c:	f007 f888 	bl	8012570 <siprintf>
	strcpy(smsInfo.content1,temps);
 800b460:	193a      	adds	r2, r7, r4
 800b462:	4b72      	ldr	r3, [pc, #456]	; (800b62c <buildInfo+0x1f0>)
 800b464:	0011      	movs	r1, r2
 800b466:	0018      	movs	r0, r3
 800b468:	f007 f8af 	bl	80125ca <strcpy>
	sprintf(temps,"Thresh: %sV\n",gsmInfo.vth);
 800b46c:	4a72      	ldr	r2, [pc, #456]	; (800b638 <buildInfo+0x1fc>)
 800b46e:	4973      	ldr	r1, [pc, #460]	; (800b63c <buildInfo+0x200>)
 800b470:	193b      	adds	r3, r7, r4
 800b472:	0018      	movs	r0, r3
 800b474:	f007 f87c 	bl	8012570 <siprintf>
	strcat(smsInfo.content1,temps);
 800b478:	193a      	adds	r2, r7, r4
 800b47a:	4b6c      	ldr	r3, [pc, #432]	; (800b62c <buildInfo+0x1f0>)
 800b47c:	0011      	movs	r1, r2
 800b47e:	0018      	movs	r0, r3
 800b480:	f007 f896 	bl	80125b0 <strcat>
	//sprintf(temps,"CCID: %s\n",gsmInfo.ccid);
	if (gsmInfo.ccidStatus == 1) strcat(smsInfo.content1,"CCID miss-matched!\r\n");
 800b484:	4a6e      	ldr	r2, [pc, #440]	; (800b640 <buildInfo+0x204>)
 800b486:	2398      	movs	r3, #152	; 0x98
 800b488:	005b      	lsls	r3, r3, #1
 800b48a:	58d3      	ldr	r3, [r2, r3]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d10e      	bne.n	800b4ae <buildInfo+0x72>
 800b490:	4b66      	ldr	r3, [pc, #408]	; (800b62c <buildInfo+0x1f0>)
 800b492:	0018      	movs	r0, r3
 800b494:	f7fd fe42 	bl	800911c <strlen>
 800b498:	0003      	movs	r3, r0
 800b49a:	001a      	movs	r2, r3
 800b49c:	4b63      	ldr	r3, [pc, #396]	; (800b62c <buildInfo+0x1f0>)
 800b49e:	18d2      	adds	r2, r2, r3
 800b4a0:	4b68      	ldr	r3, [pc, #416]	; (800b644 <buildInfo+0x208>)
 800b4a2:	0010      	movs	r0, r2
 800b4a4:	0019      	movs	r1, r3
 800b4a6:	2315      	movs	r3, #21
 800b4a8:	001a      	movs	r2, r3
 800b4aa:	f007 f84f 	bl	801254c <memcpy>
	//sprintf(temps,"mode: %s\n",smsInfo.IP);
	//strcat(SMScontent,temps);
	if (gsmInfo.modeFlag == 1) strcat(smsInfo.content1,"Mode:Pulse\r\n");
 800b4ae:	4a64      	ldr	r2, [pc, #400]	; (800b640 <buildInfo+0x204>)
 800b4b0:	2394      	movs	r3, #148	; 0x94
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	58d3      	ldr	r3, [r2, r3]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d10f      	bne.n	800b4da <buildInfo+0x9e>
 800b4ba:	4b5c      	ldr	r3, [pc, #368]	; (800b62c <buildInfo+0x1f0>)
 800b4bc:	0018      	movs	r0, r3
 800b4be:	f7fd fe2d 	bl	800911c <strlen>
 800b4c2:	0003      	movs	r3, r0
 800b4c4:	001a      	movs	r2, r3
 800b4c6:	4b59      	ldr	r3, [pc, #356]	; (800b62c <buildInfo+0x1f0>)
 800b4c8:	18d2      	adds	r2, r2, r3
 800b4ca:	4b5f      	ldr	r3, [pc, #380]	; (800b648 <buildInfo+0x20c>)
 800b4cc:	0010      	movs	r0, r2
 800b4ce:	0019      	movs	r1, r3
 800b4d0:	230d      	movs	r3, #13
 800b4d2:	001a      	movs	r2, r3
 800b4d4:	f007 f83a 	bl	801254c <memcpy>
 800b4d8:	e00e      	b.n	800b4f8 <buildInfo+0xbc>
	else strcat(smsInfo.content1,"Mode: Latch\r\n");
 800b4da:	4b54      	ldr	r3, [pc, #336]	; (800b62c <buildInfo+0x1f0>)
 800b4dc:	0018      	movs	r0, r3
 800b4de:	f7fd fe1d 	bl	800911c <strlen>
 800b4e2:	0003      	movs	r3, r0
 800b4e4:	001a      	movs	r2, r3
 800b4e6:	4b51      	ldr	r3, [pc, #324]	; (800b62c <buildInfo+0x1f0>)
 800b4e8:	18d2      	adds	r2, r2, r3
 800b4ea:	4b58      	ldr	r3, [pc, #352]	; (800b64c <buildInfo+0x210>)
 800b4ec:	0010      	movs	r0, r2
 800b4ee:	0019      	movs	r1, r3
 800b4f0:	230e      	movs	r3, #14
 800b4f2:	001a      	movs	r2, r3
 800b4f4:	f007 f82a 	bl	801254c <memcpy>
	if (gsmInfo.activeFlag == 1) strcat(smsInfo.content1,"Status:Active\r\n");
 800b4f8:	4a51      	ldr	r2, [pc, #324]	; (800b640 <buildInfo+0x204>)
 800b4fa:	2390      	movs	r3, #144	; 0x90
 800b4fc:	005b      	lsls	r3, r3, #1
 800b4fe:	58d3      	ldr	r3, [r2, r3]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d10f      	bne.n	800b524 <buildInfo+0xe8>
 800b504:	4b49      	ldr	r3, [pc, #292]	; (800b62c <buildInfo+0x1f0>)
 800b506:	0018      	movs	r0, r3
 800b508:	f7fd fe08 	bl	800911c <strlen>
 800b50c:	0003      	movs	r3, r0
 800b50e:	001a      	movs	r2, r3
 800b510:	4b46      	ldr	r3, [pc, #280]	; (800b62c <buildInfo+0x1f0>)
 800b512:	18d2      	adds	r2, r2, r3
 800b514:	4b4e      	ldr	r3, [pc, #312]	; (800b650 <buildInfo+0x214>)
 800b516:	0010      	movs	r0, r2
 800b518:	0019      	movs	r1, r3
 800b51a:	2310      	movs	r3, #16
 800b51c:	001a      	movs	r2, r3
 800b51e:	f007 f815 	bl	801254c <memcpy>
 800b522:	e00e      	b.n	800b542 <buildInfo+0x106>
	else strcat(smsInfo.content1,"Status: Suspended\r\n");
 800b524:	4b41      	ldr	r3, [pc, #260]	; (800b62c <buildInfo+0x1f0>)
 800b526:	0018      	movs	r0, r3
 800b528:	f7fd fdf8 	bl	800911c <strlen>
 800b52c:	0003      	movs	r3, r0
 800b52e:	001a      	movs	r2, r3
 800b530:	4b3e      	ldr	r3, [pc, #248]	; (800b62c <buildInfo+0x1f0>)
 800b532:	18d2      	adds	r2, r2, r3
 800b534:	4b47      	ldr	r3, [pc, #284]	; (800b654 <buildInfo+0x218>)
 800b536:	0010      	movs	r0, r2
 800b538:	0019      	movs	r1, r3
 800b53a:	2314      	movs	r3, #20
 800b53c:	001a      	movs	r2, r3
 800b53e:	f007 f805 	bl	801254c <memcpy>
	//if (RELAY == 1) strcat(SMScontent,"Relay: ON\r\n");
	//else strcat(SMScontent,"Relay: OFF\r\n");
	sprintf(temps,"Airtime: %s\n",gsmInfo.balance);
 800b542:	4a45      	ldr	r2, [pc, #276]	; (800b658 <buildInfo+0x21c>)
 800b544:	4945      	ldr	r1, [pc, #276]	; (800b65c <buildInfo+0x220>)
 800b546:	2410      	movs	r4, #16
 800b548:	193b      	adds	r3, r7, r4
 800b54a:	0018      	movs	r0, r3
 800b54c:	f007 f810 	bl	8012570 <siprintf>
	strcat(smsInfo.content1,temps);
 800b550:	193a      	adds	r2, r7, r4
 800b552:	4b36      	ldr	r3, [pc, #216]	; (800b62c <buildInfo+0x1f0>)
 800b554:	0011      	movs	r1, r2
 800b556:	0018      	movs	r0, r3
 800b558:	f007 f82a 	bl	80125b0 <strcat>
	sprintf(temps,"User: %s\n",gsmInfo.user);
 800b55c:	4a40      	ldr	r2, [pc, #256]	; (800b660 <buildInfo+0x224>)
 800b55e:	4941      	ldr	r1, [pc, #260]	; (800b664 <buildInfo+0x228>)
 800b560:	193b      	adds	r3, r7, r4
 800b562:	0018      	movs	r0, r3
 800b564:	f007 f804 	bl	8012570 <siprintf>
	strcat(smsInfo.content1,temps);
 800b568:	193a      	adds	r2, r7, r4
 800b56a:	4b30      	ldr	r3, [pc, #192]	; (800b62c <buildInfo+0x1f0>)
 800b56c:	0011      	movs	r1, r2
 800b56e:	0018      	movs	r0, r3
 800b570:	f007 f81e 	bl	80125b0 <strcat>
	sprintf(temps,"MSISDN: %s\n",gsmInfo.msisdn);
 800b574:	4a3c      	ldr	r2, [pc, #240]	; (800b668 <buildInfo+0x22c>)
 800b576:	493d      	ldr	r1, [pc, #244]	; (800b66c <buildInfo+0x230>)
 800b578:	193b      	adds	r3, r7, r4
 800b57a:	0018      	movs	r0, r3
 800b57c:	f006 fff8 	bl	8012570 <siprintf>
	strcat(smsInfo.content1,temps);
 800b580:	193a      	adds	r2, r7, r4
 800b582:	4b2a      	ldr	r3, [pc, #168]	; (800b62c <buildInfo+0x1f0>)
 800b584:	0011      	movs	r1, r2
 800b586:	0018      	movs	r0, r3
 800b588:	f007 f812 	bl	80125b0 <strcat>
	quality[0] = 0x20;
 800b58c:	4b38      	ldr	r3, [pc, #224]	; (800b670 <buildInfo+0x234>)
 800b58e:	2220      	movs	r2, #32
 800b590:	701a      	strb	r2, [r3, #0]
	sprintf(temps,"Signal:%s\n",quality);
 800b592:	4a37      	ldr	r2, [pc, #220]	; (800b670 <buildInfo+0x234>)
 800b594:	4937      	ldr	r1, [pc, #220]	; (800b674 <buildInfo+0x238>)
 800b596:	193b      	adds	r3, r7, r4
 800b598:	0018      	movs	r0, r3
 800b59a:	f006 ffe9 	bl	8012570 <siprintf>
	strcat(smsInfo.content1,temps);
 800b59e:	193a      	adds	r2, r7, r4
 800b5a0:	4b22      	ldr	r3, [pc, #136]	; (800b62c <buildInfo+0x1f0>)
 800b5a2:	0011      	movs	r1, r2
 800b5a4:	0018      	movs	r0, r3
 800b5a6:	f007 f803 	bl	80125b0 <strcat>
	strcat(smsInfo.content1,"URL: ");
 800b5aa:	4b20      	ldr	r3, [pc, #128]	; (800b62c <buildInfo+0x1f0>)
 800b5ac:	0018      	movs	r0, r3
 800b5ae:	f7fd fdb5 	bl	800911c <strlen>
 800b5b2:	0003      	movs	r3, r0
 800b5b4:	001a      	movs	r2, r3
 800b5b6:	4b1d      	ldr	r3, [pc, #116]	; (800b62c <buildInfo+0x1f0>)
 800b5b8:	18d2      	adds	r2, r2, r3
 800b5ba:	4b2f      	ldr	r3, [pc, #188]	; (800b678 <buildInfo+0x23c>)
 800b5bc:	0010      	movs	r0, r2
 800b5be:	0019      	movs	r1, r3
 800b5c0:	2306      	movs	r3, #6
 800b5c2:	001a      	movs	r2, r3
 800b5c4:	f006 ffc2 	bl	801254c <memcpy>
	strcat(smsInfo.content1,gsmInfo.url);
 800b5c8:	4a1d      	ldr	r2, [pc, #116]	; (800b640 <buildInfo+0x204>)
 800b5ca:	4b18      	ldr	r3, [pc, #96]	; (800b62c <buildInfo+0x1f0>)
 800b5cc:	0011      	movs	r1, r2
 800b5ce:	0018      	movs	r0, r3
 800b5d0:	f006 ffee 	bl	80125b0 <strcat>
	strcat(smsInfo.content1,":");
 800b5d4:	4b15      	ldr	r3, [pc, #84]	; (800b62c <buildInfo+0x1f0>)
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	f7fd fda0 	bl	800911c <strlen>
 800b5dc:	0003      	movs	r3, r0
 800b5de:	001a      	movs	r2, r3
 800b5e0:	4b12      	ldr	r3, [pc, #72]	; (800b62c <buildInfo+0x1f0>)
 800b5e2:	18d2      	adds	r2, r2, r3
 800b5e4:	4b25      	ldr	r3, [pc, #148]	; (800b67c <buildInfo+0x240>)
 800b5e6:	0010      	movs	r0, r2
 800b5e8:	0019      	movs	r1, r3
 800b5ea:	2302      	movs	r3, #2
 800b5ec:	001a      	movs	r2, r3
 800b5ee:	f006 ffad 	bl	801254c <memcpy>
	strcat(smsInfo.content1,gsmInfo.urlport);
 800b5f2:	4a23      	ldr	r2, [pc, #140]	; (800b680 <buildInfo+0x244>)
 800b5f4:	4b0d      	ldr	r3, [pc, #52]	; (800b62c <buildInfo+0x1f0>)
 800b5f6:	0011      	movs	r1, r2
 800b5f8:	0018      	movs	r0, r3
 800b5fa:	f006 ffd9 	bl	80125b0 <strcat>
	/*rtc time;
	time = getUptime();
	char temp1[30];
	sprintf (temp1,"Uptime: %.2dw %.2dd %.2dh %.2dm %.2ds\n", time.weeks, time.days, time.hours, time.minutes, time.seconds);
	strcat(SMScontent,temp1);*/
	strcpy (smsInfo.build, smsInfo.content1);
 800b5fe:	4a0b      	ldr	r2, [pc, #44]	; (800b62c <buildInfo+0x1f0>)
 800b600:	4b20      	ldr	r3, [pc, #128]	; (800b684 <buildInfo+0x248>)
 800b602:	0011      	movs	r1, r2
 800b604:	0018      	movs	r0, r3
 800b606:	f006 ffe0 	bl	80125ca <strcpy>
	//sendData("\r\nSMS content:",UART0);
	//sendData(SMScontent,UART0);
	//sendData("\r\n",UART0);
	//sendData("\r\nSMSinfo build:",UART0);
	Debug_Send(smsInfo.build);
 800b60a:	4b1e      	ldr	r3, [pc, #120]	; (800b684 <buildInfo+0x248>)
 800b60c:	0018      	movs	r0, r3
 800b60e:	f7fe ffb5 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800b612:	4b1d      	ldr	r3, [pc, #116]	; (800b688 <buildInfo+0x24c>)
 800b614:	0018      	movs	r0, r3
 800b616:	f7fe ffb1 	bl	800a57c <Debug_Send>
	smsFlags.reply = 1;			//generates reply sms
 800b61a:	4b1c      	ldr	r3, [pc, #112]	; (800b68c <buildInfo+0x250>)
 800b61c:	2201      	movs	r2, #1
 800b61e:	625a      	str	r2, [r3, #36]	; 0x24
	//strcpy(smsInfo.recMSISDN,"0720631005");	//debug for sms from rtc
}
 800b620:	46c0      	nop			; (mov r8, r8)
 800b622:	46bd      	mov	sp, r7
 800b624:	b00f      	add	sp, #60	; 0x3c
 800b626:	bd90      	pop	{r4, r7, pc}
 800b628:	080139f8 	.word	0x080139f8
 800b62c:	20001348 	.word	0x20001348
 800b630:	08013a0c 	.word	0x08013a0c
 800b634:	08013a18 	.word	0x08013a18
 800b638:	2000172c 	.word	0x2000172c
 800b63c:	08013a20 	.word	0x08013a20
 800b640:	20001628 	.word	0x20001628
 800b644:	08013a30 	.word	0x08013a30
 800b648:	08013a48 	.word	0x08013a48
 800b64c:	08013a58 	.word	0x08013a58
 800b650:	08013a68 	.word	0x08013a68
 800b654:	08013a78 	.word	0x08013a78
 800b658:	20001716 	.word	0x20001716
 800b65c:	08013a8c 	.word	0x08013a8c
 800b660:	200016bc 	.word	0x200016bc
 800b664:	0801395c 	.word	0x0801395c
 800b668:	200016da 	.word	0x200016da
 800b66c:	08013968 	.word	0x08013968
 800b670:	20001504 	.word	0x20001504
 800b674:	08013a9c 	.word	0x08013a9c
 800b678:	08013974 	.word	0x08013974
 800b67c:	08013574 	.word	0x08013574
 800b680:	20001646 	.word	0x20001646
 800b684:	20001420 	.word	0x20001420
 800b688:	08012fc4 	.word	0x08012fc4
 800b68c:	2000112c 	.word	0x2000112c

0800b690 <BuildPower>:

void BuildPower(){
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
	int temp3;
	char temp2[20];
	//temp3 = getVolt();
	myLongStr(voltage,temp2,10,10);
 800b696:	4b45      	ldr	r3, [pc, #276]	; (800b7ac <BuildPower+0x11c>)
 800b698:	6818      	ldr	r0, [r3, #0]
 800b69a:	1d39      	adds	r1, r7, #4
 800b69c:	230a      	movs	r3, #10
 800b69e:	220a      	movs	r2, #10
 800b6a0:	f001 feca 	bl	800d438 <myLongStr>
	strcpy (smsInfo.build, "IMC v4.08\n");
 800b6a4:	4b42      	ldr	r3, [pc, #264]	; (800b7b0 <BuildPower+0x120>)
 800b6a6:	4a43      	ldr	r2, [pc, #268]	; (800b7b4 <BuildPower+0x124>)
 800b6a8:	ca03      	ldmia	r2!, {r0, r1}
 800b6aa:	c303      	stmia	r3!, {r0, r1}
 800b6ac:	8811      	ldrh	r1, [r2, #0]
 800b6ae:	8019      	strh	r1, [r3, #0]
 800b6b0:	7892      	ldrb	r2, [r2, #2]
 800b6b2:	709a      	strb	r2, [r3, #2]
	strcat(smsInfo.build,"IMEI: ");
 800b6b4:	4b3e      	ldr	r3, [pc, #248]	; (800b7b0 <BuildPower+0x120>)
 800b6b6:	0018      	movs	r0, r3
 800b6b8:	f7fd fd30 	bl	800911c <strlen>
 800b6bc:	0003      	movs	r3, r0
 800b6be:	001a      	movs	r2, r3
 800b6c0:	4b3b      	ldr	r3, [pc, #236]	; (800b7b0 <BuildPower+0x120>)
 800b6c2:	18d2      	adds	r2, r2, r3
 800b6c4:	4b3c      	ldr	r3, [pc, #240]	; (800b7b8 <BuildPower+0x128>)
 800b6c6:	0010      	movs	r0, r2
 800b6c8:	0019      	movs	r1, r3
 800b6ca:	2307      	movs	r3, #7
 800b6cc:	001a      	movs	r2, r3
 800b6ce:	f006 ff3d 	bl	801254c <memcpy>
	strcat(smsInfo.build, gsmInfo.imei);
 800b6d2:	4a3a      	ldr	r2, [pc, #232]	; (800b7bc <BuildPower+0x12c>)
 800b6d4:	4b36      	ldr	r3, [pc, #216]	; (800b7b0 <BuildPower+0x120>)
 800b6d6:	0011      	movs	r1, r2
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f006 ff69 	bl	80125b0 <strcat>
	strcat(smsInfo.build,"\n");
 800b6de:	4b34      	ldr	r3, [pc, #208]	; (800b7b0 <BuildPower+0x120>)
 800b6e0:	0018      	movs	r0, r3
 800b6e2:	f7fd fd1b 	bl	800911c <strlen>
 800b6e6:	0003      	movs	r3, r0
 800b6e8:	001a      	movs	r2, r3
 800b6ea:	4b31      	ldr	r3, [pc, #196]	; (800b7b0 <BuildPower+0x120>)
 800b6ec:	18d2      	adds	r2, r2, r3
 800b6ee:	4b34      	ldr	r3, [pc, #208]	; (800b7c0 <BuildPower+0x130>)
 800b6f0:	0010      	movs	r0, r2
 800b6f2:	0019      	movs	r1, r3
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	001a      	movs	r2, r3
 800b6f8:	f006 ff28 	bl	801254c <memcpy>
	strcat (smsInfo.build, "Voltage:");
 800b6fc:	4b2c      	ldr	r3, [pc, #176]	; (800b7b0 <BuildPower+0x120>)
 800b6fe:	0018      	movs	r0, r3
 800b700:	f7fd fd0c 	bl	800911c <strlen>
 800b704:	0003      	movs	r3, r0
 800b706:	001a      	movs	r2, r3
 800b708:	4b29      	ldr	r3, [pc, #164]	; (800b7b0 <BuildPower+0x120>)
 800b70a:	18d2      	adds	r2, r2, r3
 800b70c:	4b2d      	ldr	r3, [pc, #180]	; (800b7c4 <BuildPower+0x134>)
 800b70e:	0010      	movs	r0, r2
 800b710:	0019      	movs	r1, r3
 800b712:	2309      	movs	r3, #9
 800b714:	001a      	movs	r2, r3
 800b716:	f006 ff19 	bl	801254c <memcpy>
	strcat (smsInfo.build, temp2);
 800b71a:	1d3a      	adds	r2, r7, #4
 800b71c:	4b24      	ldr	r3, [pc, #144]	; (800b7b0 <BuildPower+0x120>)
 800b71e:	0011      	movs	r1, r2
 800b720:	0018      	movs	r0, r3
 800b722:	f006 ff45 	bl	80125b0 <strcat>
	strcat (smsInfo.build, "\n");
 800b726:	4b22      	ldr	r3, [pc, #136]	; (800b7b0 <BuildPower+0x120>)
 800b728:	0018      	movs	r0, r3
 800b72a:	f7fd fcf7 	bl	800911c <strlen>
 800b72e:	0003      	movs	r3, r0
 800b730:	001a      	movs	r2, r3
 800b732:	4b1f      	ldr	r3, [pc, #124]	; (800b7b0 <BuildPower+0x120>)
 800b734:	18d2      	adds	r2, r2, r3
 800b736:	4b22      	ldr	r3, [pc, #136]	; (800b7c0 <BuildPower+0x130>)
 800b738:	0010      	movs	r0, r2
 800b73a:	0019      	movs	r1, r3
 800b73c:	2302      	movs	r3, #2
 800b73e:	001a      	movs	r2, r3
 800b740:	f006 ff04 	bl	801254c <memcpy>
	//temp3 = getCurrent();
	myLongStr(current1,temp2,10,10);
 800b744:	4b20      	ldr	r3, [pc, #128]	; (800b7c8 <BuildPower+0x138>)
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	1d39      	adds	r1, r7, #4
 800b74a:	230a      	movs	r3, #10
 800b74c:	220a      	movs	r2, #10
 800b74e:	f001 fe73 	bl	800d438 <myLongStr>
	strcat (smsInfo.build, "Current:");
 800b752:	4b17      	ldr	r3, [pc, #92]	; (800b7b0 <BuildPower+0x120>)
 800b754:	0018      	movs	r0, r3
 800b756:	f7fd fce1 	bl	800911c <strlen>
 800b75a:	0003      	movs	r3, r0
 800b75c:	001a      	movs	r2, r3
 800b75e:	4b14      	ldr	r3, [pc, #80]	; (800b7b0 <BuildPower+0x120>)
 800b760:	18d2      	adds	r2, r2, r3
 800b762:	4b1a      	ldr	r3, [pc, #104]	; (800b7cc <BuildPower+0x13c>)
 800b764:	0010      	movs	r0, r2
 800b766:	0019      	movs	r1, r3
 800b768:	2309      	movs	r3, #9
 800b76a:	001a      	movs	r2, r3
 800b76c:	f006 feee 	bl	801254c <memcpy>
	strcat (smsInfo.build, temp2);
 800b770:	1d3a      	adds	r2, r7, #4
 800b772:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <BuildPower+0x120>)
 800b774:	0011      	movs	r1, r2
 800b776:	0018      	movs	r0, r3
 800b778:	f006 ff1a 	bl	80125b0 <strcat>
	strcat (smsInfo.build, "\n");
 800b77c:	4b0c      	ldr	r3, [pc, #48]	; (800b7b0 <BuildPower+0x120>)
 800b77e:	0018      	movs	r0, r3
 800b780:	f7fd fccc 	bl	800911c <strlen>
 800b784:	0003      	movs	r3, r0
 800b786:	001a      	movs	r2, r3
 800b788:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <BuildPower+0x120>)
 800b78a:	18d2      	adds	r2, r2, r3
 800b78c:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <BuildPower+0x130>)
 800b78e:	0010      	movs	r0, r2
 800b790:	0019      	movs	r1, r3
 800b792:	2302      	movs	r3, #2
 800b794:	001a      	movs	r2, r3
 800b796:	f006 fed9 	bl	801254c <memcpy>
	//strcpy(gsmInfo.imei,procBuff);
	//sprintf(smsInfo.build, "IMC4.08\n IMEI:%s v:%i c %i\r\n",gsmInfo.imei, voltage, current1);

	Debug_Send(smsInfo.build);
 800b79a:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <BuildPower+0x120>)
 800b79c:	0018      	movs	r0, r3
 800b79e:	f7fe feed 	bl	800a57c <Debug_Send>
}
 800b7a2:	46c0      	nop			; (mov r8, r8)
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	b006      	add	sp, #24
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	46c0      	nop			; (mov r8, r8)
 800b7ac:	200014fc 	.word	0x200014fc
 800b7b0:	20001420 	.word	0x20001420
 800b7b4:	08013aa8 	.word	0x08013aa8
 800b7b8:	08013ab4 	.word	0x08013ab4
 800b7bc:	2000164c 	.word	0x2000164c
 800b7c0:	08013abc 	.word	0x08013abc
 800b7c4:	08013ac0 	.word	0x08013ac0
 800b7c8:	200018a4 	.word	0x200018a4
 800b7cc:	08013acc 	.word	0x08013acc

0800b7d0 <Context>:

void Context(){	//MIPCALL
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af02      	add	r7, sp, #8

	myStrSection(procBuff, smsInfo.IP,15,'"',1);
 800b7d6:	4919      	ldr	r1, [pc, #100]	; (800b83c <Context+0x6c>)
 800b7d8:	4819      	ldr	r0, [pc, #100]	; (800b840 <Context+0x70>)
 800b7da:	2301      	movs	r3, #1
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	2322      	movs	r3, #34	; 0x22
 800b7e0:	220f      	movs	r2, #15
 800b7e2:	f001 fd94 	bl	800d30e <myStrSection>
	if (strlen(smsInfo.IP) > 3){
 800b7e6:	4b15      	ldr	r3, [pc, #84]	; (800b83c <Context+0x6c>)
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f7fd fc97 	bl	800911c <strlen>
 800b7ee:	0003      	movs	r3, r0
 800b7f0:	2b03      	cmp	r3, #3
 800b7f2:	d915      	bls.n	800b820 <Context+0x50>
		smsFlags.gprsActive = 1;		//if gotten IP
 800b7f4:	4b13      	ldr	r3, [pc, #76]	; (800b844 <Context+0x74>)
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	61da      	str	r2, [r3, #28]
		smsFlags.gprsPending = 0;
 800b7fa:	4b12      	ldr	r3, [pc, #72]	; (800b844 <Context+0x74>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	619a      	str	r2, [r3, #24]
		gsmState = SocketOpen;
 800b800:	4b11      	ldr	r3, [pc, #68]	; (800b848 <Context+0x78>)
 800b802:	2215      	movs	r2, #21
 800b804:	701a      	strb	r2, [r3, #0]
		//gsmState = FTP_Open;
		//gsmState = FTP_Read;
		Debug_Send("IP:");
 800b806:	4b11      	ldr	r3, [pc, #68]	; (800b84c <Context+0x7c>)
 800b808:	0018      	movs	r0, r3
 800b80a:	f7fe feb7 	bl	800a57c <Debug_Send>
		Debug_Send(smsInfo.IP);
 800b80e:	4b0b      	ldr	r3, [pc, #44]	; (800b83c <Context+0x6c>)
 800b810:	0018      	movs	r0, r3
 800b812:	f7fe feb3 	bl	800a57c <Debug_Send>
		Debug_Send("\r\n");
 800b816:	4b0e      	ldr	r3, [pc, #56]	; (800b850 <Context+0x80>)
 800b818:	0018      	movs	r0, r3
 800b81a:	f7fe feaf 	bl	800a57c <Debug_Send>
			//gsmInfo.alarm = 0;
			gsmState = SMS_Send;
		}
		//sendData("Context closed\r\n",UART0);
	}
}
 800b81e:	e00a      	b.n	800b836 <Context+0x66>
		smsFlags.gprsActive = 0;
 800b820:	4b08      	ldr	r3, [pc, #32]	; (800b844 <Context+0x74>)
 800b822:	2200      	movs	r2, #0
 800b824:	61da      	str	r2, [r3, #28]
		if (gsmInfo.alarm == 1){
 800b826:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <Context+0x84>)
 800b828:	2290      	movs	r2, #144	; 0x90
 800b82a:	589b      	ldr	r3, [r3, r2]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d102      	bne.n	800b836 <Context+0x66>
			gsmState = SMS_Send;
 800b830:	4b05      	ldr	r3, [pc, #20]	; (800b848 <Context+0x78>)
 800b832:	220f      	movs	r2, #15
 800b834:	701a      	strb	r2, [r3, #0]
}
 800b836:	46c0      	nop			; (mov r8, r8)
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	200013fc 	.word	0x200013fc
 800b840:	20001518 	.word	0x20001518
 800b844:	2000112c 	.word	0x2000112c
 800b848:	200000c0 	.word	0x200000c0
 800b84c:	08013ad8 	.word	0x08013ad8
 800b850:	08012fc4 	.word	0x08012fc4
 800b854:	20001628 	.word	0x20001628

0800b858 <GotSMS>:

void Socket2(){

}

void GotSMS(){
 800b858:	b580      	push	{r7, lr}
 800b85a:	b086      	sub	sp, #24
 800b85c:	af02      	add	r7, sp, #8
	if (smsFlags.reply == 1) return;
 800b85e:	4b12      	ldr	r3, [pc, #72]	; (800b8a8 <GotSMS+0x50>)
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	2b01      	cmp	r3, #1
 800b864:	d01b      	beq.n	800b89e <GotSMS+0x46>
	char section[15];
	//char tempData[90];
	//strcpy(tempData,procBuff);
	//sendData("SMS info:\r\n",UART0);
	myStrSection(procBuff, section,10,',',0);
 800b866:	0039      	movs	r1, r7
 800b868:	4810      	ldr	r0, [pc, #64]	; (800b8ac <GotSMS+0x54>)
 800b86a:	2300      	movs	r3, #0
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	232c      	movs	r3, #44	; 0x2c
 800b870:	220a      	movs	r2, #10
 800b872:	f001 fd4c 	bl	800d30e <myStrSection>
	myStrSection(section, smsInfo.index,3,' ',1);
 800b876:	490e      	ldr	r1, [pc, #56]	; (800b8b0 <GotSMS+0x58>)
 800b878:	0038      	movs	r0, r7
 800b87a:	2301      	movs	r3, #1
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	2320      	movs	r3, #32
 800b880:	2203      	movs	r2, #3
 800b882:	f001 fd44 	bl	800d30e <myStrSection>
	myStrSection(procBuff, smsInfo.recMSISDN,20,'"',3);
 800b886:	490b      	ldr	r1, [pc, #44]	; (800b8b4 <GotSMS+0x5c>)
 800b888:	4808      	ldr	r0, [pc, #32]	; (800b8ac <GotSMS+0x54>)
 800b88a:	2303      	movs	r3, #3
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	2322      	movs	r3, #34	; 0x22
 800b890:	2214      	movs	r2, #20
 800b892:	f001 fd3c 	bl	800d30e <myStrSection>
	//sendData(smsInfo.recMSISDN,UART0);
	//sendData(smsInfo.index,UART0);
	//sendData("\r\n",UART0);
	//sendData(smsInfo.index,UART0);
	//sendData("\r\n",UART0);
	smsFlags.content = 1;
 800b896:	4b04      	ldr	r3, [pc, #16]	; (800b8a8 <GotSMS+0x50>)
 800b898:	2201      	movs	r2, #1
 800b89a:	611a      	str	r2, [r3, #16]
 800b89c:	e000      	b.n	800b8a0 <GotSMS+0x48>
	if (smsFlags.reply == 1) return;
 800b89e:	46c0      	nop			; (mov r8, r8)
}
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	b004      	add	sp, #16
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	46c0      	nop			; (mov r8, r8)
 800b8a8:	2000112c 	.word	0x2000112c
 800b8ac:	20001518 	.word	0x20001518
 800b8b0:	20001324 	.word	0x20001324
 800b8b4:	20001328 	.word	0x20001328

0800b8b8 <OK>:

void OK(){
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0

	//Debug_Send("Got OK\r\n");
	errorTimer = 0;
 800b8bc:	4b2b      	ldr	r3, [pc, #172]	; (800b96c <OK+0xb4>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	601a      	str	r2, [r3, #0]
	gsmTimer = 0;
 800b8c2:	4b2b      	ldr	r3, [pc, #172]	; (800b970 <OK+0xb8>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	601a      	str	r2, [r3, #0]
	//if (gsmState == GPRS_On) gsmState = SocketOpen;
	if (smsFlags.reply == 1){		//sent when sms built
 800b8c8:	4b2a      	ldr	r3, [pc, #168]	; (800b974 <OK+0xbc>)
 800b8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d10a      	bne.n	800b8e6 <OK+0x2e>
	//if (smsFlags.send == 1){
		if ((smsFlags.config == 1)&&(smsFlags.gprsActive == 0)) gsmState = SMS_Send;
 800b8d0:	4b28      	ldr	r3, [pc, #160]	; (800b974 <OK+0xbc>)
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d106      	bne.n	800b8e6 <OK+0x2e>
 800b8d8:	4b26      	ldr	r3, [pc, #152]	; (800b974 <OK+0xbc>)
 800b8da:	69db      	ldr	r3, [r3, #28]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d102      	bne.n	800b8e6 <OK+0x2e>
 800b8e0:	4b25      	ldr	r3, [pc, #148]	; (800b978 <OK+0xc0>)
 800b8e2:	220f      	movs	r2, #15
 800b8e4:	701a      	strb	r2, [r3, #0]
		//sendData("Send OK\r\n",UART0);
	}
	if (gsmState == GprsContext) smsFlags.context = 1;
 800b8e6:	4b24      	ldr	r3, [pc, #144]	; (800b978 <OK+0xc0>)
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b0a      	cmp	r3, #10
 800b8ec:	d102      	bne.n	800b8f4 <OK+0x3c>
 800b8ee:	4b21      	ldr	r3, [pc, #132]	; (800b974 <OK+0xbc>)
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	615a      	str	r2, [r3, #20]
	if (smsFlags.del == 1) gsmState = SMS_Del;	//set when sms content read
 800b8f4:	4b1f      	ldr	r3, [pc, #124]	; (800b974 <OK+0xbc>)
 800b8f6:	6a1b      	ldr	r3, [r3, #32]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d102      	bne.n	800b902 <OK+0x4a>
 800b8fc:	4b1e      	ldr	r3, [pc, #120]	; (800b978 <OK+0xc0>)
 800b8fe:	2217      	movs	r2, #23
 800b900:	701a      	strb	r2, [r3, #0]
	if (gsmState == AutoBaud) gsmState = Search;
 800b902:	4b1d      	ldr	r3, [pc, #116]	; (800b978 <OK+0xc0>)
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	2b1f      	cmp	r3, #31
 800b908:	d102      	bne.n	800b910 <OK+0x58>
 800b90a:	4b1b      	ldr	r3, [pc, #108]	; (800b978 <OK+0xc0>)
 800b90c:	2204      	movs	r2, #4
 800b90e:	701a      	strb	r2, [r3, #0]
	if (gsmState == GPRS_SendMode) gsmState = GPRS_SendModeTRans;
 800b910:	4b19      	ldr	r3, [pc, #100]	; (800b978 <OK+0xc0>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	2b1d      	cmp	r3, #29
 800b916:	d102      	bne.n	800b91e <OK+0x66>
 800b918:	4b17      	ldr	r3, [pc, #92]	; (800b978 <OK+0xc0>)
 800b91a:	221e      	movs	r2, #30
 800b91c:	701a      	strb	r2, [r3, #0]
	if ((gsmInfo.FS_SeekFlag == 1)&&(gsmInfo.FS_Connect== 1)){
 800b91e:	4a17      	ldr	r2, [pc, #92]	; (800b97c <OK+0xc4>)
 800b920:	23b4      	movs	r3, #180	; 0xb4
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	58d3      	ldr	r3, [r2, r3]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d10d      	bne.n	800b946 <OK+0x8e>
 800b92a:	4a14      	ldr	r2, [pc, #80]	; (800b97c <OK+0xc4>)
 800b92c:	23b6      	movs	r3, #182	; 0xb6
 800b92e:	005b      	lsls	r3, r3, #1
 800b930:	58d3      	ldr	r3, [r2, r3]
 800b932:	2b01      	cmp	r3, #1
 800b934:	d107      	bne.n	800b946 <OK+0x8e>
		//Read();
		gsmInfo.FS_SeekFlag = 0;
 800b936:	4a11      	ldr	r2, [pc, #68]	; (800b97c <OK+0xc4>)
 800b938:	23b4      	movs	r3, #180	; 0xb4
 800b93a:	005b      	lsls	r3, r3, #1
 800b93c:	2100      	movs	r1, #0
 800b93e:	50d1      	str	r1, [r2, r3]
		gsmState = FS_Read;
 800b940:	4b0d      	ldr	r3, [pc, #52]	; (800b978 <OK+0xc0>)
 800b942:	2231      	movs	r2, #49	; 0x31
 800b944:	701a      	strb	r2, [r3, #0]
	}
	if ((ftpRead == 1)&&(gsmInfo.FS_Connect == 1)){
 800b946:	4b0e      	ldr	r3, [pc, #56]	; (800b980 <OK+0xc8>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d10b      	bne.n	800b966 <OK+0xae>
 800b94e:	4a0b      	ldr	r2, [pc, #44]	; (800b97c <OK+0xc4>)
 800b950:	23b6      	movs	r3, #182	; 0xb6
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	58d3      	ldr	r3, [r2, r3]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d105      	bne.n	800b966 <OK+0xae>
		ftpRead = 0;
 800b95a:	4b09      	ldr	r3, [pc, #36]	; (800b980 <OK+0xc8>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	701a      	strb	r2, [r3, #0]
		gsmState = FS_Seek;
 800b960:	4b05      	ldr	r3, [pc, #20]	; (800b978 <OK+0xc0>)
 800b962:	2230      	movs	r2, #48	; 0x30
 800b964:	701a      	strb	r2, [r3, #0]
	}
	//if (gsmState == 12) gsmState = 6;
	//sprintf(count, "GSM state=%d", gsmState);
	//sendData(count,UART0);
	//sendData("\r\n",UART0);
}
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	20000174 	.word	0x20000174
 800b970:	200014f4 	.word	0x200014f4
 800b974:	2000112c 	.word	0x2000112c
 800b978:	200000c0 	.word	0x200000c0
 800b97c:	20001628 	.word	0x20001628
 800b980:	20001888 	.word	0x20001888

0800b984 <GPRS_SendData>:

void GPRS_SendData(char* gprs){
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
	int len;
	len = strlen(gprs);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	0018      	movs	r0, r3
 800b990:	f7fd fbc4 	bl	800911c <strlen>
 800b994:	0003      	movs	r3, r0
 800b996:	60fb      	str	r3, [r7, #12]
	Debug_Send(gprs);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	0018      	movs	r0, r3
 800b99c:	f7fe fdee 	bl	800a57c <Debug_Send>
	Debug_Send("-send\r\n");
 800b9a0:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <GPRS_SendData+0x3c>)
 800b9a2:	0018      	movs	r0, r3
 800b9a4:	f7fe fdea 	bl	800a57c <Debug_Send>
	GSM_Send(gprs);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	0018      	movs	r0, r3
 800b9ac:	f7fe fd94 	bl	800a4d8 <GSM_Send>
	//sendData("\r\n",UART1);
	//sendData(GPRSresult,UART0);
	//sendData("\r\n",UART0);
	//sprintf (temp,"GPRS send:GSM state-%d\r\n", gsmState);
	//	sendData(temp,UART0);
	GPRSresult[0] = 0;
 800b9b0:	4b04      	ldr	r3, [pc, #16]	; (800b9c4 <GPRS_SendData+0x40>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	701a      	strb	r2, [r3, #0]
}
 800b9b6:	46c0      	nop			; (mov r8, r8)
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	b004      	add	sp, #16
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	46c0      	nop			; (mov r8, r8)
 800b9c0:	08013adc 	.word	0x08013adc
 800b9c4:	20001308 	.word	0x20001308

0800b9c8 <DataDecrypt>:
		//sendData("Connection closed automatically due to non � fatal alert\r\n",UART0);
		gsmState = GPRS_Off;  		//close socket
	}
}

void DataDecrypt(){
 800b9c8:	b5b0      	push	{r4, r5, r7, lr}
 800b9ca:	b0f8      	sub	sp, #480	; 0x1e0
 800b9cc:	af02      	add	r7, sp, #8
	Debug_Send("Decrypt\r\n");
 800b9ce:	4bd8      	ldr	r3, [pc, #864]	; (800bd30 <DataDecrypt+0x368>)
 800b9d0:	0018      	movs	r0, r3
 800b9d2:	f7fe fdd3 	bl	800a57c <Debug_Send>
	Debug_Send(procBuff);
 800b9d6:	4bd7      	ldr	r3, [pc, #860]	; (800bd34 <DataDecrypt+0x36c>)
 800b9d8:	0018      	movs	r0, r3
 800b9da:	f7fe fdcf 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800b9de:	4bd6      	ldr	r3, [pc, #856]	; (800bd38 <DataDecrypt+0x370>)
 800b9e0:	0018      	movs	r0, r3
 800b9e2:	f7fe fdcb 	bl	800a57c <Debug_Send>
	//char test1[10];
	char temp[180];
	char temp1[50];
	//strcpy(procBuff,"696E672F");
	int len;
	int index = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	24ea      	movs	r4, #234	; 0xea
 800b9ea:	0064      	lsls	r4, r4, #1
 800b9ec:	193a      	adds	r2, r7, r4
 800b9ee:	6013      	str	r3, [r2, #0]
	char hex[4];
	int hexIndex = 0;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	22e8      	movs	r2, #232	; 0xe8
 800b9f4:	0052      	lsls	r2, r2, #1
 800b9f6:	18ba      	adds	r2, r7, r2
 800b9f8:	6013      	str	r3, [r2, #0]
	int count = 0;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	22e6      	movs	r2, #230	; 0xe6
 800b9fe:	0052      	lsls	r2, r2, #1
 800ba00:	18ba      	adds	r2, r7, r2
 800ba02:	6013      	str	r3, [r2, #0]
	}
	//recIndex++;
	receive[recIndex] = 0;
	index = 0;
	myStrSection(receive, temp ,160,';',index);*/
	strcpy(receive,procBuff);
 800ba04:	4acb      	ldr	r2, [pc, #812]	; (800bd34 <DataDecrypt+0x36c>)
 800ba06:	252c      	movs	r5, #44	; 0x2c
 800ba08:	197b      	adds	r3, r7, r5
 800ba0a:	0011      	movs	r1, r2
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	f006 fddc 	bl	80125ca <strcpy>
	myStrSection(receive, temp ,160,';',index);
 800ba12:	193b      	adds	r3, r7, r4
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	228c      	movs	r2, #140	; 0x8c
 800ba1a:	0052      	lsls	r2, r2, #1
 800ba1c:	18b9      	adds	r1, r7, r2
 800ba1e:	1978      	adds	r0, r7, r5
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	233b      	movs	r3, #59	; 0x3b
 800ba24:	22a0      	movs	r2, #160	; 0xa0
 800ba26:	f001 fc72 	bl	800d30e <myStrSection>

	while (strlen(temp) > 1){
 800ba2a:	e26f      	b.n	800bf0c <DataDecrypt+0x544>
		Debug_Send(temp);
 800ba2c:	248c      	movs	r4, #140	; 0x8c
 800ba2e:	0064      	lsls	r4, r4, #1
 800ba30:	193b      	adds	r3, r7, r4
 800ba32:	0018      	movs	r0, r3
 800ba34:	f7fe fda2 	bl	800a57c <Debug_Send>
		Debug_Send("\r\n");
 800ba38:	4bbf      	ldr	r3, [pc, #764]	; (800bd38 <DataDecrypt+0x370>)
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f7fe fd9e 	bl	800a57c <Debug_Send>
		if(strncmp((char*)temp,"user",4)==0){
 800ba40:	49be      	ldr	r1, [pc, #760]	; (800bd3c <DataDecrypt+0x374>)
 800ba42:	193b      	adds	r3, r7, r4
 800ba44:	2204      	movs	r2, #4
 800ba46:	0018      	movs	r0, r3
 800ba48:	f006 fdc7 	bl	80125da <strncmp>
 800ba4c:	1e03      	subs	r3, r0, #0
 800ba4e:	d12b      	bne.n	800baa8 <DataDecrypt+0xe0>
			myStrSection(temp, temp1 ,40,':',1);
 800ba50:	25e4      	movs	r5, #228	; 0xe4
 800ba52:	1979      	adds	r1, r7, r5
 800ba54:	1938      	adds	r0, r7, r4
 800ba56:	2301      	movs	r3, #1
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	233a      	movs	r3, #58	; 0x3a
 800ba5c:	2228      	movs	r2, #40	; 0x28
 800ba5e:	f001 fc56 	bl	800d30e <myStrSection>
			myStrSection(temp1, gsmInfo.user ,30,',',0);
 800ba62:	49b7      	ldr	r1, [pc, #732]	; (800bd40 <DataDecrypt+0x378>)
 800ba64:	1978      	adds	r0, r7, r5
 800ba66:	2300      	movs	r3, #0
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	232c      	movs	r3, #44	; 0x2c
 800ba6c:	221e      	movs	r2, #30
 800ba6e:	f001 fc4e 	bl	800d30e <myStrSection>
			myStrSection(temp1, gsmInfo.msisdn ,30,',',1);
 800ba72:	49b4      	ldr	r1, [pc, #720]	; (800bd44 <DataDecrypt+0x37c>)
 800ba74:	1978      	adds	r0, r7, r5
 800ba76:	2301      	movs	r3, #1
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	232c      	movs	r3, #44	; 0x2c
 800ba7c:	221e      	movs	r2, #30
 800ba7e:	f001 fc46 	bl	800d30e <myStrSection>
			Debug_Send(gsmInfo.user);
 800ba82:	4baf      	ldr	r3, [pc, #700]	; (800bd40 <DataDecrypt+0x378>)
 800ba84:	0018      	movs	r0, r3
 800ba86:	f7fe fd79 	bl	800a57c <Debug_Send>
			Debug_Send(" - ");
 800ba8a:	4baf      	ldr	r3, [pc, #700]	; (800bd48 <DataDecrypt+0x380>)
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	f7fe fd75 	bl	800a57c <Debug_Send>
			Debug_Send(gsmInfo.msisdn);
 800ba92:	4bac      	ldr	r3, [pc, #688]	; (800bd44 <DataDecrypt+0x37c>)
 800ba94:	0018      	movs	r0, r3
 800ba96:	f7fe fd71 	bl	800a57c <Debug_Send>
			//LED = 0;
			Debug_Send("\r\n");
 800ba9a:	4ba7      	ldr	r3, [pc, #668]	; (800bd38 <DataDecrypt+0x370>)
 800ba9c:	0018      	movs	r0, r3
 800ba9e:	f7fe fd6d 	bl	800a57c <Debug_Send>
			gsmInfo.registered = 1;
 800baa2:	4baa      	ldr	r3, [pc, #680]	; (800bd4c <DataDecrypt+0x384>)
 800baa4:	2201      	movs	r2, #1
 800baa6:	67da      	str	r2, [r3, #124]	; 0x7c
		}
		if(strncmp((char*)temp,"output",5)==0){
 800baa8:	49a9      	ldr	r1, [pc, #676]	; (800bd50 <DataDecrypt+0x388>)
 800baaa:	238c      	movs	r3, #140	; 0x8c
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	18fb      	adds	r3, r7, r3
 800bab0:	2205      	movs	r2, #5
 800bab2:	0018      	movs	r0, r3
 800bab4:	f006 fd91 	bl	80125da <strncmp>
 800bab8:	1e03      	subs	r3, r0, #0
 800baba:	d11b      	bne.n	800baf4 <DataDecrypt+0x12c>
			char state[5];
			myStrSection(receive, state ,4,':',1);
 800babc:	2424      	movs	r4, #36	; 0x24
 800babe:	1939      	adds	r1, r7, r4
 800bac0:	232c      	movs	r3, #44	; 0x2c
 800bac2:	18f8      	adds	r0, r7, r3
 800bac4:	2301      	movs	r3, #1
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	233a      	movs	r3, #58	; 0x3a
 800baca:	2204      	movs	r2, #4
 800bacc:	f001 fc1f 	bl	800d30e <myStrSection>
			if(strncmp(state,"ON",2)==0){
 800bad0:	49a0      	ldr	r1, [pc, #640]	; (800bd54 <DataDecrypt+0x38c>)
 800bad2:	193b      	adds	r3, r7, r4
 800bad4:	2202      	movs	r2, #2
 800bad6:	0018      	movs	r0, r3
 800bad8:	f006 fd7f 	bl	80125da <strncmp>
				if (gsmInfo.updateFlag == 0){
					//if (gsmInfo.activeFlag == 1) RELAY = 1;
				}
			}
			if(strncmp(state,"OFF",3)==0){
 800badc:	499e      	ldr	r1, [pc, #632]	; (800bd58 <DataDecrypt+0x390>)
 800bade:	193b      	adds	r3, r7, r4
 800bae0:	2203      	movs	r2, #3
 800bae2:	0018      	movs	r0, r3
 800bae4:	f006 fd79 	bl	80125da <strncmp>
 800bae8:	1e03      	subs	r3, r0, #0
 800baea:	d103      	bne.n	800baf4 <DataDecrypt+0x12c>
				Debug_Send("Off\r\n");
 800baec:	4b9b      	ldr	r3, [pc, #620]	; (800bd5c <DataDecrypt+0x394>)
 800baee:	0018      	movs	r0, r3
 800baf0:	f7fe fd44 	bl	800a57c <Debug_Send>
					//if (gsmInfo.activeFlag == 1) RELAY = 0;
				}
			}
			//CheckUser();
		}
		if(strncmp((char*)temp,"mode",4)==0){
 800baf4:	499a      	ldr	r1, [pc, #616]	; (800bd60 <DataDecrypt+0x398>)
 800baf6:	248c      	movs	r4, #140	; 0x8c
 800baf8:	0064      	lsls	r4, r4, #1
 800bafa:	193b      	adds	r3, r7, r4
 800bafc:	2204      	movs	r2, #4
 800bafe:	0018      	movs	r0, r3
 800bb00:	f006 fd6b 	bl	80125da <strncmp>
 800bb04:	1e03      	subs	r3, r0, #0
 800bb06:	d130      	bne.n	800bb6a <DataDecrypt+0x1a2>
			Debug_Send("GOT MODE!!!!!\r\n");
 800bb08:	4b96      	ldr	r3, [pc, #600]	; (800bd64 <DataDecrypt+0x39c>)
 800bb0a:	0018      	movs	r0, r3
 800bb0c:	f7fe fd36 	bl	800a57c <Debug_Send>
			myStrSection(temp, temp1 ,40,':',1);
 800bb10:	25e4      	movs	r5, #228	; 0xe4
 800bb12:	1979      	adds	r1, r7, r5
 800bb14:	1938      	adds	r0, r7, r4
 800bb16:	2301      	movs	r3, #1
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	233a      	movs	r3, #58	; 0x3a
 800bb1c:	2228      	movs	r2, #40	; 0x28
 800bb1e:	f001 fbf6 	bl	800d30e <myStrSection>
			if (strncmp(temp1,"latch",5)==0){
 800bb22:	4991      	ldr	r1, [pc, #580]	; (800bd68 <DataDecrypt+0x3a0>)
 800bb24:	197b      	adds	r3, r7, r5
 800bb26:	2205      	movs	r2, #5
 800bb28:	0018      	movs	r0, r3
 800bb2a:	f006 fd56 	bl	80125da <strncmp>
 800bb2e:	1e03      	subs	r3, r0, #0
 800bb30:	d104      	bne.n	800bb3c <DataDecrypt+0x174>
				gsmInfo.modeFlag = 0;
 800bb32:	4a86      	ldr	r2, [pc, #536]	; (800bd4c <DataDecrypt+0x384>)
 800bb34:	2394      	movs	r3, #148	; 0x94
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	2100      	movs	r1, #0
 800bb3a:	50d1      	str	r1, [r2, r3]
			}
			if (strncmp(temp1,"pulse",5)==0){
 800bb3c:	498b      	ldr	r1, [pc, #556]	; (800bd6c <DataDecrypt+0x3a4>)
 800bb3e:	23e4      	movs	r3, #228	; 0xe4
 800bb40:	18fb      	adds	r3, r7, r3
 800bb42:	2205      	movs	r2, #5
 800bb44:	0018      	movs	r0, r3
 800bb46:	f006 fd48 	bl	80125da <strncmp>
 800bb4a:	1e03      	subs	r3, r0, #0
 800bb4c:	d104      	bne.n	800bb58 <DataDecrypt+0x190>
				gsmInfo.modeFlag = 1;
 800bb4e:	4a7f      	ldr	r2, [pc, #508]	; (800bd4c <DataDecrypt+0x384>)
 800bb50:	2394      	movs	r3, #148	; 0x94
 800bb52:	005b      	lsls	r3, r3, #1
 800bb54:	2101      	movs	r1, #1
 800bb56:	50d1      	str	r1, [r2, r3]
			}
			Debug_Send(temp1);
 800bb58:	23e4      	movs	r3, #228	; 0xe4
 800bb5a:	18fb      	adds	r3, r7, r3
 800bb5c:	0018      	movs	r0, r3
 800bb5e:	f7fe fd0d 	bl	800a57c <Debug_Send>
			Debug_Send("\r\n");
 800bb62:	4b75      	ldr	r3, [pc, #468]	; (800bd38 <DataDecrypt+0x370>)
 800bb64:	0018      	movs	r0, r3
 800bb66:	f7fe fd09 	bl	800a57c <Debug_Send>
		}
		if(strncmp((char*)temp,"ccid",4)==0){
 800bb6a:	4981      	ldr	r1, [pc, #516]	; (800bd70 <DataDecrypt+0x3a8>)
 800bb6c:	248c      	movs	r4, #140	; 0x8c
 800bb6e:	0064      	lsls	r4, r4, #1
 800bb70:	193b      	adds	r3, r7, r4
 800bb72:	2204      	movs	r2, #4
 800bb74:	0018      	movs	r0, r3
 800bb76:	f006 fd30 	bl	80125da <strncmp>
 800bb7a:	1e03      	subs	r3, r0, #0
 800bb7c:	d122      	bne.n	800bbc4 <DataDecrypt+0x1fc>
			char ccid1[30];
			myStrSection(temp, ccid1 ,40,':',1);
 800bb7e:	1d39      	adds	r1, r7, #4
 800bb80:	1938      	adds	r0, r7, r4
 800bb82:	2301      	movs	r3, #1
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	233a      	movs	r3, #58	; 0x3a
 800bb88:	2228      	movs	r2, #40	; 0x28
 800bb8a:	f001 fbc0 	bl	800d30e <myStrSection>
			if (strncmp(gsmInfo.ccid,ccid1,25)==0){
 800bb8e:	1d39      	adds	r1, r7, #4
 800bb90:	4b78      	ldr	r3, [pc, #480]	; (800bd74 <DataDecrypt+0x3ac>)
 800bb92:	2219      	movs	r2, #25
 800bb94:	0018      	movs	r0, r3
 800bb96:	f006 fd20 	bl	80125da <strncmp>
 800bb9a:	1e03      	subs	r3, r0, #0
 800bb9c:	d109      	bne.n	800bbb2 <DataDecrypt+0x1ea>
				Debug_Send("CCID same\r\n");
 800bb9e:	4b76      	ldr	r3, [pc, #472]	; (800bd78 <DataDecrypt+0x3b0>)
 800bba0:	0018      	movs	r0, r3
 800bba2:	f7fe fceb 	bl	800a57c <Debug_Send>
				gsmInfo.ccidStatus = 0;
 800bba6:	4a69      	ldr	r2, [pc, #420]	; (800bd4c <DataDecrypt+0x384>)
 800bba8:	2398      	movs	r3, #152	; 0x98
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	2100      	movs	r1, #0
 800bbae:	50d1      	str	r1, [r2, r3]
 800bbb0:	e008      	b.n	800bbc4 <DataDecrypt+0x1fc>
			}
			else{
				//alarmFunc(ccid);
				//RELAY = 0;
				Debug_Send("CCID differ\r\n");
 800bbb2:	4b72      	ldr	r3, [pc, #456]	; (800bd7c <DataDecrypt+0x3b4>)
 800bbb4:	0018      	movs	r0, r3
 800bbb6:	f7fe fce1 	bl	800a57c <Debug_Send>
				gsmInfo.ccidStatus = 1;
 800bbba:	4a64      	ldr	r2, [pc, #400]	; (800bd4c <DataDecrypt+0x384>)
 800bbbc:	2398      	movs	r3, #152	; 0x98
 800bbbe:	005b      	lsls	r3, r3, #1
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	50d1      	str	r1, [r2, r3]
			}
		}
		if(strncmp((char*)temp,"status",6)==0){
 800bbc4:	496e      	ldr	r1, [pc, #440]	; (800bd80 <DataDecrypt+0x3b8>)
 800bbc6:	248c      	movs	r4, #140	; 0x8c
 800bbc8:	0064      	lsls	r4, r4, #1
 800bbca:	193b      	adds	r3, r7, r4
 800bbcc:	2206      	movs	r2, #6
 800bbce:	0018      	movs	r0, r3
 800bbd0:	f006 fd03 	bl	80125da <strncmp>

		}
		if(strncmp((char*)temp,"vth1",4)==0){
 800bbd4:	496b      	ldr	r1, [pc, #428]	; (800bd84 <DataDecrypt+0x3bc>)
 800bbd6:	193b      	adds	r3, r7, r4
 800bbd8:	2204      	movs	r2, #4
 800bbda:	0018      	movs	r0, r3
 800bbdc:	f006 fcfd 	bl	80125da <strncmp>
 800bbe0:	1e03      	subs	r3, r0, #0
 800bbe2:	d12e      	bne.n	800bc42 <DataDecrypt+0x27a>
			if (gsmInfo.vthFlag == 0){
 800bbe4:	4a59      	ldr	r2, [pc, #356]	; (800bd4c <DataDecrypt+0x384>)
 800bbe6:	238a      	movs	r3, #138	; 0x8a
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	58d3      	ldr	r3, [r2, r3]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d120      	bne.n	800bc32 <DataDecrypt+0x26a>
				Debug_Send("GOT THV!!!!!\r\n");
 800bbf0:	4b65      	ldr	r3, [pc, #404]	; (800bd88 <DataDecrypt+0x3c0>)
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	f7fe fcc2 	bl	800a57c <Debug_Send>
				myStrSection(temp, gsmInfo.vth ,5,':',1);
 800bbf8:	4964      	ldr	r1, [pc, #400]	; (800bd8c <DataDecrypt+0x3c4>)
 800bbfa:	1938      	adds	r0, r7, r4
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	233a      	movs	r3, #58	; 0x3a
 800bc02:	2205      	movs	r2, #5
 800bc04:	f001 fb83 	bl	800d30e <myStrSection>
				gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
 800bc08:	4b60      	ldr	r3, [pc, #384]	; (800bd8c <DataDecrypt+0x3c4>)
 800bc0a:	210a      	movs	r1, #10
 800bc0c:	0018      	movs	r0, r3
 800bc0e:	f001 fd0b 	bl	800d628 <myStrLong>
 800bc12:	0001      	movs	r1, r0
 800bc14:	4a4d      	ldr	r2, [pc, #308]	; (800bd4c <DataDecrypt+0x384>)
 800bc16:	2388      	movs	r3, #136	; 0x88
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	50d1      	str	r1, [r2, r3]
				gsmInfo.vth_l *= 100;
 800bc1c:	4a4b      	ldr	r2, [pc, #300]	; (800bd4c <DataDecrypt+0x384>)
 800bc1e:	2388      	movs	r3, #136	; 0x88
 800bc20:	005b      	lsls	r3, r3, #1
 800bc22:	58d3      	ldr	r3, [r2, r3]
 800bc24:	2264      	movs	r2, #100	; 0x64
 800bc26:	435a      	muls	r2, r3
 800bc28:	0011      	movs	r1, r2
 800bc2a:	4a48      	ldr	r2, [pc, #288]	; (800bd4c <DataDecrypt+0x384>)
 800bc2c:	2388      	movs	r3, #136	; 0x88
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	50d1      	str	r1, [r2, r3]
			}
			Debug_Send(gsmInfo.vth);
 800bc32:	4b56      	ldr	r3, [pc, #344]	; (800bd8c <DataDecrypt+0x3c4>)
 800bc34:	0018      	movs	r0, r3
 800bc36:	f7fe fca1 	bl	800a57c <Debug_Send>
			Debug_Send("\r\n");
 800bc3a:	4b3f      	ldr	r3, [pc, #252]	; (800bd38 <DataDecrypt+0x370>)
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	f7fe fc9d 	bl	800a57c <Debug_Send>

		}
		if(strncmp((char*)smsInfo.content1,"vth",5)==0){
 800bc42:	4a53      	ldr	r2, [pc, #332]	; (800bd90 <DataDecrypt+0x3c8>)
 800bc44:	4b53      	ldr	r3, [pc, #332]	; (800bd94 <DataDecrypt+0x3cc>)
 800bc46:	0011      	movs	r1, r2
 800bc48:	0018      	movs	r0, r3
 800bc4a:	f7fd fa5d 	bl	8009108 <strcmp>
 800bc4e:	1e03      	subs	r3, r0, #0
 800bc50:	d11c      	bne.n	800bc8c <DataDecrypt+0x2c4>
			myStrSection(smsInfo.content1, gsmInfo.vth,4,':',1);
 800bc52:	494e      	ldr	r1, [pc, #312]	; (800bd8c <DataDecrypt+0x3c4>)
 800bc54:	484f      	ldr	r0, [pc, #316]	; (800bd94 <DataDecrypt+0x3cc>)
 800bc56:	2301      	movs	r3, #1
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	233a      	movs	r3, #58	; 0x3a
 800bc5c:	2204      	movs	r2, #4
 800bc5e:	f001 fb56 	bl	800d30e <myStrSection>
			//gsmInfo.vth_f = atof(gsmInfo.vth);
			gsmInfo.vth_l = myStrLong(gsmInfo.vth, 10);
 800bc62:	4b4a      	ldr	r3, [pc, #296]	; (800bd8c <DataDecrypt+0x3c4>)
 800bc64:	210a      	movs	r1, #10
 800bc66:	0018      	movs	r0, r3
 800bc68:	f001 fcde 	bl	800d628 <myStrLong>
 800bc6c:	0001      	movs	r1, r0
 800bc6e:	4a37      	ldr	r2, [pc, #220]	; (800bd4c <DataDecrypt+0x384>)
 800bc70:	2388      	movs	r3, #136	; 0x88
 800bc72:	005b      	lsls	r3, r3, #1
 800bc74:	50d1      	str	r1, [r2, r3]
			gsmInfo.vth_l *= 100;
 800bc76:	4a35      	ldr	r2, [pc, #212]	; (800bd4c <DataDecrypt+0x384>)
 800bc78:	2388      	movs	r3, #136	; 0x88
 800bc7a:	005b      	lsls	r3, r3, #1
 800bc7c:	58d3      	ldr	r3, [r2, r3]
 800bc7e:	2264      	movs	r2, #100	; 0x64
 800bc80:	435a      	muls	r2, r3
 800bc82:	0011      	movs	r1, r2
 800bc84:	4a31      	ldr	r2, [pc, #196]	; (800bd4c <DataDecrypt+0x384>)
 800bc86:	2388      	movs	r3, #136	; 0x88
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	50d1      	str	r1, [r2, r3]
		}
		if(strncmp((char*)temp,"mode",4)==0){
 800bc8c:	4934      	ldr	r1, [pc, #208]	; (800bd60 <DataDecrypt+0x398>)
 800bc8e:	248c      	movs	r4, #140	; 0x8c
 800bc90:	0064      	lsls	r4, r4, #1
 800bc92:	193b      	adds	r3, r7, r4
 800bc94:	2204      	movs	r2, #4
 800bc96:	0018      	movs	r0, r3
 800bc98:	f006 fc9f 	bl	80125da <strncmp>

		}
		if(strncmp((char*)temp,"status",5)==0){
 800bc9c:	4938      	ldr	r1, [pc, #224]	; (800bd80 <DataDecrypt+0x3b8>)
 800bc9e:	193b      	adds	r3, r7, r4
 800bca0:	2205      	movs	r2, #5
 800bca2:	0018      	movs	r0, r3
 800bca4:	f006 fc99 	bl	80125da <strncmp>
 800bca8:	1e03      	subs	r3, r0, #0
 800bcaa:	d121      	bne.n	800bcf0 <DataDecrypt+0x328>
			myStrSection(temp, temp1 ,4,':',1);
 800bcac:	25e4      	movs	r5, #228	; 0xe4
 800bcae:	1979      	adds	r1, r7, r5
 800bcb0:	1938      	adds	r0, r7, r4
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	233a      	movs	r3, #58	; 0x3a
 800bcb8:	2204      	movs	r2, #4
 800bcba:	f001 fb28 	bl	800d30e <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800bcbe:	197b      	adds	r3, r7, r5
 800bcc0:	781a      	ldrb	r2, [r3, #0]
 800bcc2:	4b35      	ldr	r3, [pc, #212]	; (800bd98 <DataDecrypt+0x3d0>)
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	d109      	bne.n	800bcde <DataDecrypt+0x316>
				Debug_Send("Unit active\r\n");
 800bcca:	4b34      	ldr	r3, [pc, #208]	; (800bd9c <DataDecrypt+0x3d4>)
 800bccc:	0018      	movs	r0, r3
 800bcce:	f7fe fc55 	bl	800a57c <Debug_Send>
				gsmInfo.activeFlag = 1;
 800bcd2:	4a1e      	ldr	r2, [pc, #120]	; (800bd4c <DataDecrypt+0x384>)
 800bcd4:	2390      	movs	r3, #144	; 0x90
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	2101      	movs	r1, #1
 800bcda:	50d1      	str	r1, [r2, r3]
 800bcdc:	e008      	b.n	800bcf0 <DataDecrypt+0x328>
			}
			else{
				gsmInfo.activeFlag = 0;
 800bcde:	4a1b      	ldr	r2, [pc, #108]	; (800bd4c <DataDecrypt+0x384>)
 800bce0:	2390      	movs	r3, #144	; 0x90
 800bce2:	005b      	lsls	r3, r3, #1
 800bce4:	2100      	movs	r1, #0
 800bce6:	50d1      	str	r1, [r2, r3]
				Debug_Send("Unit not active\r\n");
 800bce8:	4b2d      	ldr	r3, [pc, #180]	; (800bda0 <DataDecrypt+0x3d8>)
 800bcea:	0018      	movs	r0, r3
 800bcec:	f7fe fc46 	bl	800a57c <Debug_Send>
			}
		}
		if(strncmp((char*)temp,"sms",3)==0){
 800bcf0:	492c      	ldr	r1, [pc, #176]	; (800bda4 <DataDecrypt+0x3dc>)
 800bcf2:	248c      	movs	r4, #140	; 0x8c
 800bcf4:	0064      	lsls	r4, r4, #1
 800bcf6:	193b      	adds	r3, r7, r4
 800bcf8:	2203      	movs	r2, #3
 800bcfa:	0018      	movs	r0, r3
 800bcfc:	f006 fc6d 	bl	80125da <strncmp>
 800bd00:	1e03      	subs	r3, r0, #0
 800bd02:	d157      	bne.n	800bdb4 <DataDecrypt+0x3ec>
			myStrSection(temp, temp1 ,4,':',1);
 800bd04:	25e4      	movs	r5, #228	; 0xe4
 800bd06:	1979      	adds	r1, r7, r5
 800bd08:	1938      	adds	r0, r7, r4
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	233a      	movs	r3, #58	; 0x3a
 800bd10:	2204      	movs	r2, #4
 800bd12:	f001 fafc 	bl	800d30e <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800bd16:	197b      	adds	r3, r7, r5
 800bd18:	781a      	ldrb	r2, [r3, #0]
 800bd1a:	4b1f      	ldr	r3, [pc, #124]	; (800bd98 <DataDecrypt+0x3d0>)
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	d144      	bne.n	800bdac <DataDecrypt+0x3e4>
				Debug_Send("Generate SMS\r\n");
 800bd22:	4b21      	ldr	r3, [pc, #132]	; (800bda8 <DataDecrypt+0x3e0>)
 800bd24:	0018      	movs	r0, r3
 800bd26:	f7fe fc29 	bl	800a57c <Debug_Send>
				buildInfo();
 800bd2a:	f7ff fb87 	bl	800b43c <buildInfo>
 800bd2e:	e041      	b.n	800bdb4 <DataDecrypt+0x3ec>
 800bd30:	08013b08 	.word	0x08013b08
 800bd34:	20001518 	.word	0x20001518
 800bd38:	08012fc4 	.word	0x08012fc4
 800bd3c:	08013b14 	.word	0x08013b14
 800bd40:	200016bc 	.word	0x200016bc
 800bd44:	200016da 	.word	0x200016da
 800bd48:	080135b0 	.word	0x080135b0
 800bd4c:	20001628 	.word	0x20001628
 800bd50:	08013b1c 	.word	0x08013b1c
 800bd54:	080138e8 	.word	0x080138e8
 800bd58:	080138ec 	.word	0x080138ec
 800bd5c:	08013b24 	.word	0x08013b24
 800bd60:	08013b2c 	.word	0x08013b2c
 800bd64:	08013b34 	.word	0x08013b34
 800bd68:	08013b44 	.word	0x08013b44
 800bd6c:	08013b4c 	.word	0x08013b4c
 800bd70:	08013b54 	.word	0x08013b54
 800bd74:	20001674 	.word	0x20001674
 800bd78:	08013b5c 	.word	0x08013b5c
 800bd7c:	08013b68 	.word	0x08013b68
 800bd80:	08013b78 	.word	0x08013b78
 800bd84:	08013b80 	.word	0x08013b80
 800bd88:	08013b88 	.word	0x08013b88
 800bd8c:	2000172c 	.word	0x2000172c
 800bd90:	08013b98 	.word	0x08013b98
 800bd94:	20001348 	.word	0x20001348
 800bd98:	08013ae8 	.word	0x08013ae8
 800bd9c:	08013b9c 	.word	0x08013b9c
 800bda0:	08013bac 	.word	0x08013bac
 800bda4:	08013bc0 	.word	0x08013bc0
 800bda8:	08013bc4 	.word	0x08013bc4
			}
			else Debug_Send("Dont generate SMS\r\n");
 800bdac:	4b6a      	ldr	r3, [pc, #424]	; (800bf58 <DataDecrypt+0x590>)
 800bdae:	0018      	movs	r0, r3
 800bdb0:	f7fe fbe4 	bl	800a57c <Debug_Send>
		}
		if(strncmp((char*)temp,"sync",4)==0){
 800bdb4:	4969      	ldr	r1, [pc, #420]	; (800bf5c <DataDecrypt+0x594>)
 800bdb6:	248c      	movs	r4, #140	; 0x8c
 800bdb8:	0064      	lsls	r4, r4, #1
 800bdba:	193b      	adds	r3, r7, r4
 800bdbc:	2204      	movs	r2, #4
 800bdbe:	0018      	movs	r0, r3
 800bdc0:	f006 fc0b 	bl	80125da <strncmp>
 800bdc4:	1e03      	subs	r3, r0, #0
 800bdc6:	d117      	bne.n	800bdf8 <DataDecrypt+0x430>
			myStrSection(temp, temp1 ,4,':',1);
 800bdc8:	25e4      	movs	r5, #228	; 0xe4
 800bdca:	1979      	adds	r1, r7, r5
 800bdcc:	1938      	adds	r0, r7, r4
 800bdce:	2301      	movs	r3, #1
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	233a      	movs	r3, #58	; 0x3a
 800bdd4:	2204      	movs	r2, #4
 800bdd6:	f001 fa9a 	bl	800d30e <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800bdda:	197b      	adds	r3, r7, r5
 800bddc:	781a      	ldrb	r2, [r3, #0]
 800bdde:	4b60      	ldr	r3, [pc, #384]	; (800bf60 <DataDecrypt+0x598>)
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	d104      	bne.n	800bdf0 <DataDecrypt+0x428>
				Debug_Send("Unit active\r\n");
 800bde6:	4b5f      	ldr	r3, [pc, #380]	; (800bf64 <DataDecrypt+0x59c>)
 800bde8:	0018      	movs	r0, r3
 800bdea:	f7fe fbc7 	bl	800a57c <Debug_Send>
 800bdee:	e003      	b.n	800bdf8 <DataDecrypt+0x430>
			}
			else Debug_Send("Unit not active\r\n");
 800bdf0:	4b5d      	ldr	r3, [pc, #372]	; (800bf68 <DataDecrypt+0x5a0>)
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	f7fe fbc2 	bl	800a57c <Debug_Send>
		}
		if(strncmp((char*)temp,"vthresh",7)==0){
 800bdf8:	495c      	ldr	r1, [pc, #368]	; (800bf6c <DataDecrypt+0x5a4>)
 800bdfa:	248c      	movs	r4, #140	; 0x8c
 800bdfc:	0064      	lsls	r4, r4, #1
 800bdfe:	193b      	adds	r3, r7, r4
 800be00:	2207      	movs	r2, #7
 800be02:	0018      	movs	r0, r3
 800be04:	f006 fbe9 	bl	80125da <strncmp>
 800be08:	1e03      	subs	r3, r0, #0
 800be0a:	d121      	bne.n	800be50 <DataDecrypt+0x488>
			myStrSection(temp, temp1 ,4,':',1);
 800be0c:	25e4      	movs	r5, #228	; 0xe4
 800be0e:	1979      	adds	r1, r7, r5
 800be10:	1938      	adds	r0, r7, r4
 800be12:	2301      	movs	r3, #1
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	233a      	movs	r3, #58	; 0x3a
 800be18:	2204      	movs	r2, #4
 800be1a:	f001 fa78 	bl	800d30e <myStrSection>
			if(strncmp(temp1,"1",1)==0){
 800be1e:	197b      	adds	r3, r7, r5
 800be20:	781a      	ldrb	r2, [r3, #0]
 800be22:	4b4f      	ldr	r3, [pc, #316]	; (800bf60 <DataDecrypt+0x598>)
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	d109      	bne.n	800be3e <DataDecrypt+0x476>
				Debug_Send("Threshold active\r\n");
 800be2a:	4b51      	ldr	r3, [pc, #324]	; (800bf70 <DataDecrypt+0x5a8>)
 800be2c:	0018      	movs	r0, r3
 800be2e:	f7fe fba5 	bl	800a57c <Debug_Send>
				gsmInfo.vThreshold = 1;
 800be32:	4a50      	ldr	r2, [pc, #320]	; (800bf74 <DataDecrypt+0x5ac>)
 800be34:	2396      	movs	r3, #150	; 0x96
 800be36:	005b      	lsls	r3, r3, #1
 800be38:	2101      	movs	r1, #1
 800be3a:	50d1      	str	r1, [r2, r3]
 800be3c:	e008      	b.n	800be50 <DataDecrypt+0x488>
			}
			else{
				Debug_Send("Threshold not active\r\n");
 800be3e:	4b4e      	ldr	r3, [pc, #312]	; (800bf78 <DataDecrypt+0x5b0>)
 800be40:	0018      	movs	r0, r3
 800be42:	f7fe fb9b 	bl	800a57c <Debug_Send>
				gsmInfo.vThreshold = 0;
 800be46:	4a4b      	ldr	r2, [pc, #300]	; (800bf74 <DataDecrypt+0x5ac>)
 800be48:	2396      	movs	r3, #150	; 0x96
 800be4a:	005b      	lsls	r3, r3, #1
 800be4c:	2100      	movs	r1, #0
 800be4e:	50d1      	str	r1, [r2, r3]
			}
		}
		if(strncmp((char*)temp,"saved",5)==0){
 800be50:	494a      	ldr	r1, [pc, #296]	; (800bf7c <DataDecrypt+0x5b4>)
 800be52:	238c      	movs	r3, #140	; 0x8c
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	18fb      	adds	r3, r7, r3
 800be58:	2205      	movs	r2, #5
 800be5a:	0018      	movs	r0, r3
 800be5c:	f006 fbbd 	bl	80125da <strncmp>
 800be60:	1e03      	subs	r3, r0, #0
 800be62:	d109      	bne.n	800be78 <DataDecrypt+0x4b0>
			Debug_Send("Generate registration SMS\r\n");
 800be64:	4b46      	ldr	r3, [pc, #280]	; (800bf80 <DataDecrypt+0x5b8>)
 800be66:	0018      	movs	r0, r3
 800be68:	f7fe fb88 	bl	800a57c <Debug_Send>
			RegisterConfirm();
 800be6c:	f7ff fa44 	bl	800b2f8 <RegisterConfirm>
			Debug_Send("Registration SMS generated\r\n");
 800be70:	4b44      	ldr	r3, [pc, #272]	; (800bf84 <DataDecrypt+0x5bc>)
 800be72:	0018      	movs	r0, r3
 800be74:	f7fe fb82 	bl	800a57c <Debug_Send>
		}
		if(strncmp((char*)temp,"tmg",3)==0){
 800be78:	4943      	ldr	r1, [pc, #268]	; (800bf88 <DataDecrypt+0x5c0>)
 800be7a:	248c      	movs	r4, #140	; 0x8c
 800be7c:	0064      	lsls	r4, r4, #1
 800be7e:	193b      	adds	r3, r7, r4
 800be80:	2203      	movs	r2, #3
 800be82:	0018      	movs	r0, r3
 800be84:	f006 fba9 	bl	80125da <strncmp>
 800be88:	1e03      	subs	r3, r0, #0
 800be8a:	d11e      	bne.n	800beca <DataDecrypt+0x502>
			myStrSection(temp, gsmInfo.GPRSint,20,':',1);
 800be8c:	493f      	ldr	r1, [pc, #252]	; (800bf8c <DataDecrypt+0x5c4>)
 800be8e:	1938      	adds	r0, r7, r4
 800be90:	2301      	movs	r3, #1
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	233a      	movs	r3, #58	; 0x3a
 800be96:	2214      	movs	r2, #20
 800be98:	f001 fa39 	bl	800d30e <myStrSection>
			gsmInfo.GPRSinterval = myStrLong(gsmInfo.GPRSint, 10);
 800be9c:	4b3b      	ldr	r3, [pc, #236]	; (800bf8c <DataDecrypt+0x5c4>)
 800be9e:	210a      	movs	r1, #10
 800bea0:	0018      	movs	r0, r3
 800bea2:	f001 fbc1 	bl	800d628 <myStrLong>
 800bea6:	0001      	movs	r1, r0
 800bea8:	4a32      	ldr	r2, [pc, #200]	; (800bf74 <DataDecrypt+0x5ac>)
 800beaa:	23a0      	movs	r3, #160	; 0xa0
 800beac:	005b      	lsls	r3, r3, #1
 800beae:	50d1      	str	r1, [r2, r3]
			gsmInfo.GPRSinterval *= 60;
 800beb0:	4a30      	ldr	r2, [pc, #192]	; (800bf74 <DataDecrypt+0x5ac>)
 800beb2:	23a0      	movs	r3, #160	; 0xa0
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	58d2      	ldr	r2, [r2, r3]
 800beb8:	0013      	movs	r3, r2
 800beba:	011b      	lsls	r3, r3, #4
 800bebc:	1a9b      	subs	r3, r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	0019      	movs	r1, r3
 800bec2:	4a2c      	ldr	r2, [pc, #176]	; (800bf74 <DataDecrypt+0x5ac>)
 800bec4:	23a0      	movs	r3, #160	; 0xa0
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	50d1      	str	r1, [r2, r3]
			//gsmInfo.vth_f = atof(gsmInfo.vth);


			//gsmInfo.vthFlag = 1;
		}
		if(strncmp((char*)temp,"no user",7)==0){
 800beca:	4931      	ldr	r1, [pc, #196]	; (800bf90 <DataDecrypt+0x5c8>)
 800becc:	238c      	movs	r3, #140	; 0x8c
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	18fb      	adds	r3, r7, r3
 800bed2:	2207      	movs	r2, #7
 800bed4:	0018      	movs	r0, r3
 800bed6:	f006 fb80 	bl	80125da <strncmp>
 800beda:	1e03      	subs	r3, r0, #0
 800bedc:	d102      	bne.n	800bee4 <DataDecrypt+0x51c>
			//LED = 1;
			gsmInfo.registered = 0;
 800bede:	4b25      	ldr	r3, [pc, #148]	; (800bf74 <DataDecrypt+0x5ac>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	67da      	str	r2, [r3, #124]	; 0x7c
		}
		index++;
 800bee4:	22ea      	movs	r2, #234	; 0xea
 800bee6:	0052      	lsls	r2, r2, #1
 800bee8:	18bb      	adds	r3, r7, r2
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3301      	adds	r3, #1
 800beee:	18b9      	adds	r1, r7, r2
 800bef0:	600b      	str	r3, [r1, #0]
		myStrSection(receive, temp ,160,';',index);
 800bef2:	18bb      	adds	r3, r7, r2
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	228c      	movs	r2, #140	; 0x8c
 800befa:	0052      	lsls	r2, r2, #1
 800befc:	18b9      	adds	r1, r7, r2
 800befe:	222c      	movs	r2, #44	; 0x2c
 800bf00:	18b8      	adds	r0, r7, r2
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	233b      	movs	r3, #59	; 0x3b
 800bf06:	22a0      	movs	r2, #160	; 0xa0
 800bf08:	f001 fa01 	bl	800d30e <myStrSection>
	while (strlen(temp) > 1){
 800bf0c:	238c      	movs	r3, #140	; 0x8c
 800bf0e:	005b      	lsls	r3, r3, #1
 800bf10:	18fb      	adds	r3, r7, r3
 800bf12:	0018      	movs	r0, r3
 800bf14:	f7fd f902 	bl	800911c <strlen>
 800bf18:	0003      	movs	r3, r0
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d900      	bls.n	800bf20 <DataDecrypt+0x558>
 800bf1e:	e585      	b.n	800ba2c <DataDecrypt+0x64>
	}
	//if(strncmp((char*)temp,"vth",3)==0){
	gsmInfo.updateFlag = 0;
 800bf20:	4a14      	ldr	r2, [pc, #80]	; (800bf74 <DataDecrypt+0x5ac>)
 800bf22:	2392      	movs	r3, #146	; 0x92
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	2100      	movs	r1, #0
 800bf28:	50d1      	str	r1, [r2, r3]
	//}
	//Debug_Send(receive);
	//Debug_Send("\r\n");
	receive[0] = 0;
 800bf2a:	4b1a      	ldr	r3, [pc, #104]	; (800bf94 <DataDecrypt+0x5cc>)
 800bf2c:	22ec      	movs	r2, #236	; 0xec
 800bf2e:	0052      	lsls	r2, r2, #1
 800bf30:	4694      	mov	ip, r2
 800bf32:	44bc      	add	ip, r7
 800bf34:	4463      	add	r3, ip
 800bf36:	2200      	movs	r2, #0
 800bf38:	701a      	strb	r2, [r3, #0]
	gsmState = SocketClose;
 800bf3a:	4b17      	ldr	r3, [pc, #92]	; (800bf98 <DataDecrypt+0x5d0>)
 800bf3c:	2216      	movs	r2, #22
 800bf3e:	701a      	strb	r2, [r3, #0]
	gsmInfo.GPRS_Rec = 0;
 800bf40:	4a0c      	ldr	r2, [pc, #48]	; (800bf74 <DataDecrypt+0x5ac>)
 800bf42:	23ac      	movs	r3, #172	; 0xac
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	2100      	movs	r1, #0
 800bf48:	50d1      	str	r1, [r2, r3]
	gsmState = 0;
 800bf4a:	4b13      	ldr	r3, [pc, #76]	; (800bf98 <DataDecrypt+0x5d0>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	701a      	strb	r2, [r3, #0]
}
 800bf50:	46c0      	nop			; (mov r8, r8)
 800bf52:	46bd      	mov	sp, r7
 800bf54:	b076      	add	sp, #472	; 0x1d8
 800bf56:	bdb0      	pop	{r4, r5, r7, pc}
 800bf58:	08013bd4 	.word	0x08013bd4
 800bf5c:	080135c4 	.word	0x080135c4
 800bf60:	08013ae8 	.word	0x08013ae8
 800bf64:	08013b9c 	.word	0x08013b9c
 800bf68:	08013bac 	.word	0x08013bac
 800bf6c:	08013be8 	.word	0x08013be8
 800bf70:	08013bf0 	.word	0x08013bf0
 800bf74:	20001628 	.word	0x20001628
 800bf78:	08013c04 	.word	0x08013c04
 800bf7c:	08013c1c 	.word	0x08013c1c
 800bf80:	08013c24 	.word	0x08013c24
 800bf84:	08013c40 	.word	0x08013c40
 800bf88:	08013c60 	.word	0x08013c60
 800bf8c:	2000176c 	.word	0x2000176c
 800bf90:	08013c64 	.word	0x08013c64
 800bf94:	fffffe54 	.word	0xfffffe54
 800bf98:	200000c0 	.word	0x200000c0

0800bf9c <GSM_Receive>:
	 //sendData(testS,UART0);
	return count;
}


void GSM_Receive(char in){
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	0002      	movs	r2, r0
 800bfa4:	1dfb      	adds	r3, r7, #7
 800bfa6:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	gsmInfo.Timeout = 0;
 800bfa8:	4a1d      	ldr	r2, [pc, #116]	; (800c020 <GSM_Receive+0x84>)
 800bfaa:	23b0      	movs	r3, #176	; 0xb0
 800bfac:	005b      	lsls	r3, r3, #1
 800bfae:	2100      	movs	r1, #0
 800bfb0:	50d1      	str	r1, [r2, r3]
	//HAL_UART_Receive_IT(&huart2, temp, 50);

	if (ftpinc < 60){
 800bfb2:	4b1c      	ldr	r3, [pc, #112]	; (800c024 <GSM_Receive+0x88>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2b3b      	cmp	r3, #59	; 0x3b
 800bfb8:	dc11      	bgt.n	800bfde <GSM_Receive+0x42>
	//if (gsmInfo.FTP_Data > 0){
		ftpReceived[ftpinc] = in;
 800bfba:	4b1a      	ldr	r3, [pc, #104]	; (800c024 <GSM_Receive+0x88>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a1a      	ldr	r2, [pc, #104]	; (800c028 <GSM_Receive+0x8c>)
 800bfc0:	1df9      	adds	r1, r7, #7
 800bfc2:	7809      	ldrb	r1, [r1, #0]
 800bfc4:	54d1      	strb	r1, [r2, r3]
		//HAL_UART_Transmit(&huart1, ftpReceived[ftpinc], 1, 10);
		ftpinc++;
 800bfc6:	4b17      	ldr	r3, [pc, #92]	; (800c024 <GSM_Receive+0x88>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	4b15      	ldr	r3, [pc, #84]	; (800c024 <GSM_Receive+0x88>)
 800bfce:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800bfd0:	2380      	movs	r3, #128	; 0x80
 800bfd2:	005b      	lsls	r3, r3, #1
 800bfd4:	4a15      	ldr	r2, [pc, #84]	; (800c02c <GSM_Receive+0x90>)
 800bfd6:	0019      	movs	r1, r3
 800bfd8:	0010      	movs	r0, r2
 800bfda:	f002 f8d6 	bl	800e18a <HAL_GPIO_TogglePin>
	}
	//else{
		if (in == '>') gsmInfo.Prompt = 1;
 800bfde:	1dfb      	adds	r3, r7, #7
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	2b3e      	cmp	r3, #62	; 0x3e
 800bfe4:	d104      	bne.n	800bff0 <GSM_Receive+0x54>
 800bfe6:	4a0e      	ldr	r2, [pc, #56]	; (800c020 <GSM_Receive+0x84>)
 800bfe8:	23ae      	movs	r3, #174	; 0xae
 800bfea:	005b      	lsls	r3, r3, #1
 800bfec:	2101      	movs	r1, #1
 800bfee:	50d1      	str	r1, [r2, r3]
		//if (in != 0x0A){
			recBuffDebug[recBuffPointerWrite] = in;
 800bff0:	4b0f      	ldr	r3, [pc, #60]	; (800c030 <GSM_Receive+0x94>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4a0f      	ldr	r2, [pc, #60]	; (800c034 <GSM_Receive+0x98>)
 800bff6:	1df9      	adds	r1, r7, #7
 800bff8:	7809      	ldrb	r1, [r1, #0]
 800bffa:	54d1      	strb	r1, [r2, r3]
			//HAL_UART_Transmit(&huart1, recBuff[recBuffPointerWrite], 2, 10);
			//huart1.Instance->TDR = in;
			recBuffPointerWrite++;
 800bffc:	4b0c      	ldr	r3, [pc, #48]	; (800c030 <GSM_Receive+0x94>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	1c5a      	adds	r2, r3, #1
 800c002:	4b0b      	ldr	r3, [pc, #44]	; (800c030 <GSM_Receive+0x94>)
 800c004:	601a      	str	r2, [r3, #0]
			if (recBuffPointerWrite > recBuffSize) recBuffPointerWrite = 0;
 800c006:	4b0a      	ldr	r3, [pc, #40]	; (800c030 <GSM_Receive+0x94>)
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	2396      	movs	r3, #150	; 0x96
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	429a      	cmp	r2, r3
 800c010:	dd02      	ble.n	800c018 <GSM_Receive+0x7c>
 800c012:	4b07      	ldr	r3, [pc, #28]	; (800c030 <GSM_Receive+0x94>)
 800c014:	2200      	movs	r2, #0
 800c016:	601a      	str	r2, [r3, #0]
		//}
	//}

}
 800c018:	46c0      	nop			; (mov r8, r8)
 800c01a:	46bd      	mov	sp, r7
 800c01c:	b002      	add	sp, #8
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	20001628 	.word	0x20001628
 800c024:	200000c8 	.word	0x200000c8
 800c028:	200017ec 	.word	0x200017ec
 800c02c:	48000400 	.word	0x48000400
 800c030:	20000168 	.word	0x20000168
 800c034:	2000115c 	.word	0x2000115c

0800c038 <MQTT_Service>:
MQTTFlag mqttFlag;
MQTTInfo mqttInfo;
MQTT_State mqttState1;
char tempGPRS[30];

MQTTFlag* MQTT_Service(uint8_t data, uint32_t state){
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	0002      	movs	r2, r0
 800c040:	6039      	str	r1, [r7, #0]
 800c042:	1dfb      	adds	r3, r7, #7
 800c044:	701a      	strb	r2, [r3, #0]
	int val = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	61fb      	str	r3, [r7, #28]
	val = state;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	61fb      	str	r3, [r7, #28]
	mqttFlag.send = 0;
 800c04e:	4b62      	ldr	r3, [pc, #392]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c050:	2200      	movs	r2, #0
 800c052:	711a      	strb	r2, [r3, #4]
	if (data == 0x02){
 800c054:	1dfb      	adds	r3, r7, #7
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d109      	bne.n	800c070 <MQTT_Service+0x38>
		Debug_Send("conn new\r\n");
 800c05c:	4b5f      	ldr	r3, [pc, #380]	; (800c1dc <MQTT_Service+0x1a4>)
 800c05e:	0018      	movs	r0, r3
 800c060:	f7fe fa8c 	bl	800a57c <Debug_Send>
		mqttFlag.data = 1;
 800c064:	4b5c      	ldr	r3, [pc, #368]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c066:	2201      	movs	r2, #1
 800c068:	701a      	strb	r2, [r3, #0]
		mqttInfo.Buffpointer = 0;
 800c06a:	4b5d      	ldr	r3, [pc, #372]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	605a      	str	r2, [r3, #4]


	}
	if (data == 0x90){
 800c070:	1dfb      	adds	r3, r7, #7
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	2b90      	cmp	r3, #144	; 0x90
 800c076:	d114      	bne.n	800c0a2 <MQTT_Service+0x6a>
		Debug_Send("subscribed new!!!!\r\n");
 800c078:	4b5a      	ldr	r3, [pc, #360]	; (800c1e4 <MQTT_Service+0x1ac>)
 800c07a:	0018      	movs	r0, r3
 800c07c:	f7fe fa7e 	bl	800a57c <Debug_Send>
		mqttInfo.Buffpointer = 0;
 800c080:	4b57      	ldr	r3, [pc, #348]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c082:	2200      	movs	r2, #0
 800c084:	605a      	str	r2, [r3, #4]
		mqttFlag.data = 1;
 800c086:	4b54      	ldr	r3, [pc, #336]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c088:	2201      	movs	r2, #1
 800c08a:	701a      	strb	r2, [r3, #0]
		mqttFlag.subscribe = 1;
 800c08c:	4b52      	ldr	r3, [pc, #328]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c08e:	2201      	movs	r2, #1
 800c090:	705a      	strb	r2, [r3, #1]
		mqttState1 = Publish;
 800c092:	4b55      	ldr	r3, [pc, #340]	; (800c1e8 <MQTT_Service+0x1b0>)
 800c094:	2203      	movs	r2, #3
 800c096:	701a      	strb	r2, [r3, #0]
		mqttFlag.state = Publish;
 800c098:	4b4f      	ldr	r3, [pc, #316]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c09a:	2203      	movs	r2, #3
 800c09c:	721a      	strb	r2, [r3, #8]
		val = Publish;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	61fb      	str	r3, [r7, #28]
	}
	if ((data == '1')&&(mqttFlag.subscribe == 1)&&(mqttFlag.busy == 0)){
 800c0a2:	1dfb      	adds	r3, r7, #7
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	2b31      	cmp	r3, #49	; 0x31
 800c0a8:	d110      	bne.n	800c0cc <MQTT_Service+0x94>
 800c0aa:	4b4b      	ldr	r3, [pc, #300]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c0ac:	785b      	ldrb	r3, [r3, #1]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d10c      	bne.n	800c0cc <MQTT_Service+0x94>
 800c0b2:	4b49      	ldr	r3, [pc, #292]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c0b4:	79db      	ldrb	r3, [r3, #7]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d108      	bne.n	800c0cc <MQTT_Service+0x94>
		//Debug_Send("pusblish retain!!!\r\n");
		mqttFlag.data = 1;
 800c0ba:	4b47      	ldr	r3, [pc, #284]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c0bc:	2201      	movs	r2, #1
 800c0be:	701a      	strb	r2, [r3, #0]
		mqttInfo.Buffpointer = 0;
 800c0c0:	4b47      	ldr	r3, [pc, #284]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	605a      	str	r2, [r3, #4]
		mqttFlag.busy = 1;
 800c0c6:	4b44      	ldr	r3, [pc, #272]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	71da      	strb	r2, [r3, #7]
	}
	if ((data == '0')&&(mqttFlag.subscribe == 1)&&(mqttFlag.busy == 0)){
 800c0cc:	1dfb      	adds	r3, r7, #7
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	2b30      	cmp	r3, #48	; 0x30
 800c0d2:	d110      	bne.n	800c0f6 <MQTT_Service+0xbe>
 800c0d4:	4b40      	ldr	r3, [pc, #256]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c0d6:	785b      	ldrb	r3, [r3, #1]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d10c      	bne.n	800c0f6 <MQTT_Service+0xbe>
 800c0dc:	4b3e      	ldr	r3, [pc, #248]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c0de:	79db      	ldrb	r3, [r3, #7]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d108      	bne.n	800c0f6 <MQTT_Service+0xbe>
		//Debug_Send("pusblish normal!!!\r\n");
		mqttFlag.data = 1;
 800c0e4:	4b3c      	ldr	r3, [pc, #240]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	701a      	strb	r2, [r3, #0]
		mqttInfo.Buffpointer = 0;
 800c0ea:	4b3d      	ldr	r3, [pc, #244]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	605a      	str	r2, [r3, #4]
		mqttFlag.busy = 1;
 800c0f0:	4b39      	ldr	r3, [pc, #228]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	71da      	strb	r2, [r3, #7]
	}
	char temp1[20];
	if (mqttFlag.data == 1){
 800c0f6:	4b38      	ldr	r3, [pc, #224]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d167      	bne.n	800c1ce <MQTT_Service+0x196>
		mqttInfo.packet[mqttInfo.Buffpointer] = data;
 800c0fe:	4b38      	ldr	r3, [pc, #224]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	4a37      	ldr	r2, [pc, #220]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c104:	18d3      	adds	r3, r2, r3
 800c106:	1dfa      	adds	r2, r7, #7
 800c108:	7812      	ldrb	r2, [r2, #0]
 800c10a:	761a      	strb	r2, [r3, #24]
		//Debug_Send("\r\n");
		myLongStr(mqttInfo.packet[mqttInfo.Buffpointer],temp1,10,10);
		Debug_Send(" ");
		Debug_Send(temp1);
		Debug_Send("\r\n");*/
		if ((mqttInfo.packet[mqttInfo.Buffpointer] == 0x02)&&(mqttFlag.connect == 2)){
 800c10c:	4b34      	ldr	r3, [pc, #208]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	4a33      	ldr	r2, [pc, #204]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c112:	18d3      	adds	r3, r2, r3
 800c114:	7e1b      	ldrb	r3, [r3, #24]
 800c116:	2b02      	cmp	r3, #2
 800c118:	d112      	bne.n	800c140 <MQTT_Service+0x108>
 800c11a:	4b2f      	ldr	r3, [pc, #188]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c11c:	78db      	ldrb	r3, [r3, #3]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d10e      	bne.n	800c140 <MQTT_Service+0x108>
			Debug_Send("Connected new\r\n");
 800c122:	4b32      	ldr	r3, [pc, #200]	; (800c1ec <MQTT_Service+0x1b4>)
 800c124:	0018      	movs	r0, r3
 800c126:	f7fe fa29 	bl	800a57c <Debug_Send>
			mqttState1 = Subscribe;
 800c12a:	4b2f      	ldr	r3, [pc, #188]	; (800c1e8 <MQTT_Service+0x1b0>)
 800c12c:	2202      	movs	r2, #2
 800c12e:	701a      	strb	r2, [r3, #0]
			mqttFlag.state = Subscribe;
 800c130:	4b29      	ldr	r3, [pc, #164]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c132:	2202      	movs	r2, #2
 800c134:	721a      	strb	r2, [r3, #8]
			mqttFlag.connect = 3;
 800c136:	4b28      	ldr	r3, [pc, #160]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c138:	2203      	movs	r2, #3
 800c13a:	70da      	strb	r2, [r3, #3]
			val = Subscribe;
 800c13c:	2302      	movs	r3, #2
 800c13e:	61fb      	str	r3, [r7, #28]

			//gsmState = GPRS_Send;
		}
		if (mqttInfo.Buffpointer == 1){
 800c140:	4b27      	ldr	r3, [pc, #156]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d106      	bne.n	800c156 <MQTT_Service+0x11e>
			mqttInfo.Size = mqttInfo.packet[mqttInfo.Buffpointer];
 800c148:	4b25      	ldr	r3, [pc, #148]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	4a24      	ldr	r2, [pc, #144]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c14e:	18d3      	adds	r3, r2, r3
 800c150:	7e1a      	ldrb	r2, [r3, #24]
 800c152:	4b23      	ldr	r3, [pc, #140]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c154:	701a      	strb	r2, [r3, #0]
			Debug_Send("Size n: ");
			Debug_Send(temp1);
			Debug_Send("\r\n");*/
		}

		if (mqttInfo.Buffpointer == 4){	//check when byte 3 arrives
 800c156:	4b22      	ldr	r3, [pc, #136]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	d10d      	bne.n	800c17a <MQTT_Service+0x142>
			//Debug_Send("check packet validity n\r\n");
			if((mqttInfo.packet[1] > 30)||(mqttInfo.packet[3] > 30)){
 800c15e:	4b20      	ldr	r3, [pc, #128]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c160:	7e5b      	ldrb	r3, [r3, #25]
 800c162:	2b1e      	cmp	r3, #30
 800c164:	d803      	bhi.n	800c16e <MQTT_Service+0x136>
 800c166:	4b1e      	ldr	r3, [pc, #120]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c168:	7edb      	ldrb	r3, [r3, #27]
 800c16a:	2b1e      	cmp	r3, #30
 800c16c:	d905      	bls.n	800c17a <MQTT_Service+0x142>
				//Debug_Send("packet invalid,topic or packet size 2 large n\r\n");
				//mqttFlag.Data = 0;
				mqttFlag.data = 0;
 800c16e:	4b1a      	ldr	r3, [pc, #104]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c170:	2200      	movs	r2, #0
 800c172:	701a      	strb	r2, [r3, #0]
				//mqttInfo.Buffpointer = 0;
				mqttInfo.Buffpointer = 0;
 800c174:	4b1a      	ldr	r3, [pc, #104]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c176:	2200      	movs	r2, #0
 800c178:	605a      	str	r2, [r3, #4]
			if((mqttInfo.packet[1] > 30)||(mqttInfo.packet[3] > 30)){

			}
		}

		if(mqttInfo.Buffpointer>mqttInfo.Size){
 800c17a:	4b19      	ldr	r3, [pc, #100]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	4a18      	ldr	r2, [pc, #96]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c180:	7812      	ldrb	r2, [r2, #0]
 800c182:	4293      	cmp	r3, r2
 800c184:	dd1e      	ble.n	800c1c4 <MQTT_Service+0x18c>
			if ((mqttInfo.packet[0] == 2)&&(mqttInfo.Size == 0)){
 800c186:	4b16      	ldr	r3, [pc, #88]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c188:	7e1b      	ldrb	r3, [r3, #24]
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d108      	bne.n	800c1a0 <MQTT_Service+0x168>
 800c18e:	4b14      	ldr	r3, [pc, #80]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d104      	bne.n	800c1a0 <MQTT_Service+0x168>
				//Debug_Send("Confirmed connect\r\n");
				val = 2;
 800c196:	2302      	movs	r3, #2
 800c198:	61fb      	str	r3, [r7, #28]
				mqttFlag.send = 1;
 800c19a:	4b0f      	ldr	r3, [pc, #60]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c19c:	2201      	movs	r2, #1
 800c19e:	711a      	strb	r2, [r3, #4]
			}
			mqttInfo.Buffpointer = 0;
 800c1a0:	4b0f      	ldr	r3, [pc, #60]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	605a      	str	r2, [r3, #4]
			//Debug_Send("mqtt stop new\r\n");
			mqttFlag.busy = 0;
 800c1a6:	4b0c      	ldr	r3, [pc, #48]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	71da      	strb	r2, [r3, #7]
			if ((mqttFlag.subscribe == 1)&&(mqttInfo.Size > 3)) MQTT_ProcessF1("tst");
 800c1ac:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <MQTT_Service+0x1a0>)
 800c1ae:	785b      	ldrb	r3, [r3, #1]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d107      	bne.n	800c1c4 <MQTT_Service+0x18c>
 800c1b4:	4b0a      	ldr	r3, [pc, #40]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	2b03      	cmp	r3, #3
 800c1ba:	d903      	bls.n	800c1c4 <MQTT_Service+0x18c>
 800c1bc:	4b0c      	ldr	r3, [pc, #48]	; (800c1f0 <MQTT_Service+0x1b8>)
 800c1be:	0018      	movs	r0, r3
 800c1c0:	f000 f818 	bl	800c1f4 <MQTT_ProcessF1>
		}
		mqttInfo.Buffpointer++;
 800c1c4:	4b06      	ldr	r3, [pc, #24]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	1c5a      	adds	r2, r3, #1
 800c1ca:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <MQTT_Service+0x1a8>)
 800c1cc:	605a      	str	r2, [r3, #4]
		//if ((MQTTBuffpointer > gsmInfo.MQTT_Size + 2)||(gsmInfo.MQTT_Size == 0)) MQTT_Process();
	}
	return &mqttFlag;
 800c1ce:	4b02      	ldr	r3, [pc, #8]	; (800c1d8 <MQTT_Service+0x1a0>)
}
 800c1d0:	0018      	movs	r0, r3
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	b008      	add	sp, #32
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	20001614 	.word	0x20001614
 800c1dc:	08013c6c 	.word	0x08013c6c
 800c1e0:	20001288 	.word	0x20001288
 800c1e4:	08013c78 	.word	0x08013c78
 800c1e8:	200018a9 	.word	0x200018a9
 800c1ec:	08013c90 	.word	0x08013c90
 800c1f0:	08013ca0 	.word	0x08013ca0

0800c1f4 <MQTT_ProcessF1>:

void MQTT_ProcessF1(uint8_t *data){
 800c1f4:	b5b0      	push	{r4, r5, r7, lr}
 800c1f6:	b09c      	sub	sp, #112	; 0x70
 800c1f8:	af02      	add	r7, sp, #8
 800c1fa:	6078      	str	r0, [r7, #4]
	Debug_Send("Process MQTT new\r\n");
 800c1fc:	4b04      	ldr	r3, [pc, #16]	; (800c210 <MQTT_ProcessF1+0x1c>)
 800c1fe:	0018      	movs	r0, r3
 800c200:	f7fe f9bc 	bl	800a57c <Debug_Send>
	int counter;
	char cnt[10];
	int start = 4;
 800c204:	2304      	movs	r3, #4
 800c206:	663b      	str	r3, [r7, #96]	; 0x60
	int len;
	char temp[30];
	char temp1[30];
	for (counter = 0; counter < mqttInfo.Size; counter++){
 800c208:	2300      	movs	r3, #0
 800c20a:	667b      	str	r3, [r7, #100]	; 0x64
 800c20c:	e02d      	b.n	800c26a <MQTT_ProcessF1+0x76>
 800c20e:	46c0      	nop			; (mov r8, r8)
 800c210:	08013ca4 	.word	0x08013ca4
		myLongStr(counter,cnt,10,10);
 800c214:	244c      	movs	r4, #76	; 0x4c
 800c216:	1939      	adds	r1, r7, r4
 800c218:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c21a:	230a      	movs	r3, #10
 800c21c:	220a      	movs	r2, #10
 800c21e:	f001 f90b 	bl	800d438 <myLongStr>

		myLongStr(mqttInfo.packet[mqttInfo.Buffpointer],temp,10,10);
 800c222:	4bec      	ldr	r3, [pc, #944]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	4aeb      	ldr	r2, [pc, #940]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c228:	18d3      	adds	r3, r2, r3
 800c22a:	7e1b      	ldrb	r3, [r3, #24]
 800c22c:	0018      	movs	r0, r3
 800c22e:	252c      	movs	r5, #44	; 0x2c
 800c230:	1979      	adds	r1, r7, r5
 800c232:	230a      	movs	r3, #10
 800c234:	220a      	movs	r2, #10
 800c236:	f001 f8ff 	bl	800d438 <myLongStr>
		Debug_Send(cnt);
 800c23a:	193b      	adds	r3, r7, r4
 800c23c:	0018      	movs	r0, r3
 800c23e:	f7fe f99d 	bl	800a57c <Debug_Send>
		Debug_Send(":");
 800c242:	4be5      	ldr	r3, [pc, #916]	; (800c5d8 <MQTT_ProcessF1+0x3e4>)
 800c244:	0018      	movs	r0, r3
 800c246:	f7fe f999 	bl	800a57c <Debug_Send>
		Debug_Send(temp);
 800c24a:	197b      	adds	r3, r7, r5
 800c24c:	0018      	movs	r0, r3
 800c24e:	f7fe f995 	bl	800a57c <Debug_Send>
		//Debug_Send("\r\n");
		Debug_Send(" ");
 800c252:	4be2      	ldr	r3, [pc, #904]	; (800c5dc <MQTT_ProcessF1+0x3e8>)
 800c254:	0018      	movs	r0, r3
 800c256:	f7fe f991 	bl	800a57c <Debug_Send>
		mqttInfo.Buffpointer++;
 800c25a:	4bde      	ldr	r3, [pc, #888]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	1c5a      	adds	r2, r3, #1
 800c260:	4bdc      	ldr	r3, [pc, #880]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c262:	605a      	str	r2, [r3, #4]
	for (counter = 0; counter < mqttInfo.Size; counter++){
 800c264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c266:	3301      	adds	r3, #1
 800c268:	667b      	str	r3, [r7, #100]	; 0x64
 800c26a:	4bda      	ldr	r3, [pc, #872]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	001a      	movs	r2, r3
 800c270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c272:	4293      	cmp	r3, r2
 800c274:	dbce      	blt.n	800c214 <MQTT_ProcessF1+0x20>
	}
	len = mqttInfo.Size;
 800c276:	4bd7      	ldr	r3, [pc, #860]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	65fb      	str	r3, [r7, #92]	; 0x5c
	//byteCopy(mqttReceived, temp, start, start + len);
	byteCopy(mqttInfo.packet, temp, start, len);
 800c27c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c27e:	b2da      	uxtb	r2, r3
 800c280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c282:	b2db      	uxtb	r3, r3
 800c284:	242c      	movs	r4, #44	; 0x2c
 800c286:	1939      	adds	r1, r7, r4
 800c288:	48d5      	ldr	r0, [pc, #852]	; (800c5e0 <MQTT_ProcessF1+0x3ec>)
 800c28a:	f000 fbf9 	bl	800ca80 <byteCopy>
	Debug_Send("\r\nPacket:");
 800c28e:	4bd5      	ldr	r3, [pc, #852]	; (800c5e4 <MQTT_ProcessF1+0x3f0>)
 800c290:	0018      	movs	r0, r3
 800c292:	f7fe f973 	bl	800a57c <Debug_Send>
	Debug_Send(temp);
 800c296:	193b      	adds	r3, r7, r4
 800c298:	0018      	movs	r0, r3
 800c29a:	f7fe f96f 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800c29e:	4bd2      	ldr	r3, [pc, #840]	; (800c5e8 <MQTT_ProcessF1+0x3f4>)
 800c2a0:	0018      	movs	r0, r3
 800c2a2:	f7fe f96b 	bl	800a57c <Debug_Send>
	mqttInfo.packetLength = mqttInfo.packet[1] ;
 800c2a6:	4bcb      	ldr	r3, [pc, #812]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c2a8:	7e5b      	ldrb	r3, [r3, #25]
 800c2aa:	001a      	movs	r2, r3
 800c2ac:	4bc9      	ldr	r3, [pc, #804]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c2ae:	60da      	str	r2, [r3, #12]
	myLongStr(mqttInfo.packetLength,temp1,10,10);
 800c2b0:	4bc8      	ldr	r3, [pc, #800]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c2b2:	68d8      	ldr	r0, [r3, #12]
 800c2b4:	240c      	movs	r4, #12
 800c2b6:	1939      	adds	r1, r7, r4
 800c2b8:	230a      	movs	r3, #10
 800c2ba:	220a      	movs	r2, #10
 800c2bc:	f001 f8bc 	bl	800d438 <myLongStr>
	Debug_Send("packet size ");
 800c2c0:	4bca      	ldr	r3, [pc, #808]	; (800c5ec <MQTT_ProcessF1+0x3f8>)
 800c2c2:	0018      	movs	r0, r3
 800c2c4:	f7fe f95a 	bl	800a57c <Debug_Send>
	Debug_Send(temp1);
 800c2c8:	193b      	adds	r3, r7, r4
 800c2ca:	0018      	movs	r0, r3
 800c2cc:	f7fe f956 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800c2d0:	4bc5      	ldr	r3, [pc, #788]	; (800c5e8 <MQTT_ProcessF1+0x3f4>)
 800c2d2:	0018      	movs	r0, r3
 800c2d4:	f7fe f952 	bl	800a57c <Debug_Send>
	mqttInfo.topicLength = mqttInfo.packet[3];
 800c2d8:	4bbe      	ldr	r3, [pc, #760]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c2da:	7edb      	ldrb	r3, [r3, #27]
 800c2dc:	001a      	movs	r2, r3
 800c2de:	4bbd      	ldr	r3, [pc, #756]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c2e0:	611a      	str	r2, [r3, #16]
	myLongStr(mqttInfo.topicLength,temp1,10,10);
 800c2e2:	4bbc      	ldr	r3, [pc, #752]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c2e4:	6918      	ldr	r0, [r3, #16]
 800c2e6:	1939      	adds	r1, r7, r4
 800c2e8:	230a      	movs	r3, #10
 800c2ea:	220a      	movs	r2, #10
 800c2ec:	f001 f8a4 	bl	800d438 <myLongStr>
	Debug_Send("topic size ");
 800c2f0:	4bbf      	ldr	r3, [pc, #764]	; (800c5f0 <MQTT_ProcessF1+0x3fc>)
 800c2f2:	0018      	movs	r0, r3
 800c2f4:	f7fe f942 	bl	800a57c <Debug_Send>
	Debug_Send(temp1);
 800c2f8:	193b      	adds	r3, r7, r4
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	f7fe f93e 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800c300:	4bb9      	ldr	r3, [pc, #740]	; (800c5e8 <MQTT_ProcessF1+0x3f4>)
 800c302:	0018      	movs	r0, r3
 800c304:	f7fe f93a 	bl	800a57c <Debug_Send>
	myLongStr(mqttInfo.packetLength - mqttInfo.topicLength - 2,temp1,10,10);
 800c308:	4bb2      	ldr	r3, [pc, #712]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c30a:	68da      	ldr	r2, [r3, #12]
 800c30c:	4bb1      	ldr	r3, [pc, #708]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	1e98      	subs	r0, r3, #2
 800c314:	1939      	adds	r1, r7, r4
 800c316:	230a      	movs	r3, #10
 800c318:	220a      	movs	r2, #10
 800c31a:	f001 f88d 	bl	800d438 <myLongStr>
	Debug_Send("msg size ");
 800c31e:	4bb5      	ldr	r3, [pc, #724]	; (800c5f4 <MQTT_ProcessF1+0x400>)
 800c320:	0018      	movs	r0, r3
 800c322:	f7fe f92b 	bl	800a57c <Debug_Send>
	Debug_Send(temp1);
 800c326:	193b      	adds	r3, r7, r4
 800c328:	0018      	movs	r0, r3
 800c32a:	f7fe f927 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800c32e:	4bae      	ldr	r3, [pc, #696]	; (800c5e8 <MQTT_ProcessF1+0x3f4>)
 800c330:	0018      	movs	r0, r3
 800c332:	f7fe f923 	bl	800a57c <Debug_Send>
	mqttInfo.packet[0] = 0;
 800c336:	4ba7      	ldr	r3, [pc, #668]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c338:	2200      	movs	r2, #0
 800c33a:	761a      	strb	r2, [r3, #24]
	mqttInfo.topic[0] = 0;
 800c33c:	4ba5      	ldr	r3, [pc, #660]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c33e:	224a      	movs	r2, #74	; 0x4a
 800c340:	2100      	movs	r1, #0
 800c342:	5499      	strb	r1, [r3, r2]
	mqttInfo.data[0] = 0;
 800c344:	4ba3      	ldr	r3, [pc, #652]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c346:	225e      	movs	r2, #94	; 0x5e
 800c348:	2100      	movs	r1, #0
 800c34a:	5499      	strb	r1, [r3, r2]
	if ((mqttFlag.subscribe == 1)&&(mqttInfo.topicLength > 2)){
 800c34c:	4baa      	ldr	r3, [pc, #680]	; (800c5f8 <MQTT_ProcessF1+0x404>)
 800c34e:	785b      	ldrb	r3, [r3, #1]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d000      	beq.n	800c356 <MQTT_ProcessF1+0x162>
 800c354:	e226      	b.n	800c7a4 <MQTT_ProcessF1+0x5b0>
 800c356:	4b9f      	ldr	r3, [pc, #636]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	dc00      	bgt.n	800c360 <MQTT_ProcessF1+0x16c>
 800c35e:	e221      	b.n	800c7a4 <MQTT_ProcessF1+0x5b0>
		byteCopy(mqttInfo.packet, temp1, 4, mqttInfo.packetLength + 1);
 800c360:	4b9c      	ldr	r3, [pc, #624]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	b2db      	uxtb	r3, r3
 800c366:	3301      	adds	r3, #1
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	1939      	adds	r1, r7, r4
 800c36c:	489c      	ldr	r0, [pc, #624]	; (800c5e0 <MQTT_ProcessF1+0x3ec>)
 800c36e:	2204      	movs	r2, #4
 800c370:	f000 fb86 	bl	800ca80 <byteCopy>
		byteCopy(mqttInfo.packet, mqttInfo.topic, 4, mqttInfo.topicLength + 3);
 800c374:	4b97      	ldr	r3, [pc, #604]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	3303      	adds	r3, #3
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	499f      	ldr	r1, [pc, #636]	; (800c5fc <MQTT_ProcessF1+0x408>)
 800c380:	4897      	ldr	r0, [pc, #604]	; (800c5e0 <MQTT_ProcessF1+0x3ec>)
 800c382:	2204      	movs	r2, #4
 800c384:	f000 fb7c 	bl	800ca80 <byteCopy>
		byteCopy(mqttInfo.packet, mqttInfo.data, 4 + mqttInfo.topicLength, mqttInfo.packetLength + 1);
 800c388:	4b92      	ldr	r3, [pc, #584]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	3304      	adds	r3, #4
 800c390:	b2da      	uxtb	r2, r3
 800c392:	4b90      	ldr	r3, [pc, #576]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	b2db      	uxtb	r3, r3
 800c398:	3301      	adds	r3, #1
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	4998      	ldr	r1, [pc, #608]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c39e:	4890      	ldr	r0, [pc, #576]	; (800c5e0 <MQTT_ProcessF1+0x3ec>)
 800c3a0:	f000 fb6e 	bl	800ca80 <byteCopy>
		//strncpy(mqttInfo.packet,)
		Debug_Send(temp1);
 800c3a4:	193b      	adds	r3, r7, r4
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	f7fe f8e8 	bl	800a57c <Debug_Send>
		Debug_Send(" - ");
 800c3ac:	4b95      	ldr	r3, [pc, #596]	; (800c604 <MQTT_ProcessF1+0x410>)
 800c3ae:	0018      	movs	r0, r3
 800c3b0:	f7fe f8e4 	bl	800a57c <Debug_Send>
		Debug_Send(mqttInfo.topic);
 800c3b4:	4b91      	ldr	r3, [pc, #580]	; (800c5fc <MQTT_ProcessF1+0x408>)
 800c3b6:	0018      	movs	r0, r3
 800c3b8:	f7fe f8e0 	bl	800a57c <Debug_Send>
		Debug_Send(" - ");
 800c3bc:	4b91      	ldr	r3, [pc, #580]	; (800c604 <MQTT_ProcessF1+0x410>)
 800c3be:	0018      	movs	r0, r3
 800c3c0:	f7fe f8dc 	bl	800a57c <Debug_Send>
		Debug_Send(mqttInfo.data);
 800c3c4:	4b8e      	ldr	r3, [pc, #568]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c3c6:	0018      	movs	r0, r3
 800c3c8:	f7fe f8d8 	bl	800a57c <Debug_Send>
		Debug_Send("\r\n");
 800c3cc:	4b86      	ldr	r3, [pc, #536]	; (800c5e8 <MQTT_ProcessF1+0x3f4>)
 800c3ce:	0018      	movs	r0, r3
 800c3d0:	f7fe f8d4 	bl	800a57c <Debug_Send>
		if (strncmp(mqttInfo.data,"mag",3) == 0){
 800c3d4:	498c      	ldr	r1, [pc, #560]	; (800c608 <MQTT_ProcessF1+0x414>)
 800c3d6:	4b8a      	ldr	r3, [pc, #552]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c3d8:	2203      	movs	r2, #3
 800c3da:	0018      	movs	r0, r3
 800c3dc:	f006 f8fd 	bl	80125da <strncmp>
 800c3e0:	1e03      	subs	r3, r0, #0
 800c3e2:	d103      	bne.n	800c3ec <MQTT_ProcessF1+0x1f8>
			Debug_Send("Got mag\r\n");
 800c3e4:	4b89      	ldr	r3, [pc, #548]	; (800c60c <MQTT_ProcessF1+0x418>)
 800c3e6:	0018      	movs	r0, r3
 800c3e8:	f7fe f8c8 	bl	800a57c <Debug_Send>
			//mqttState = Publish;
			//gsmState = GPRS_Send;
			//MQTT_Publish_F("got mag");
		}
		if (strncmp(mqttInfo.data,"sync",3) == 0){
 800c3ec:	4988      	ldr	r1, [pc, #544]	; (800c610 <MQTT_ProcessF1+0x41c>)
 800c3ee:	4b84      	ldr	r3, [pc, #528]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c3f0:	2203      	movs	r2, #3
 800c3f2:	0018      	movs	r0, r3
 800c3f4:	f006 f8f1 	bl	80125da <strncmp>
			//MQTT_Publish_F("got sync");
		}
		int ln2;
		ln2 = mqttInfo.packetLength - mqttInfo.topicLength - 2;
 800c3f8:	4b76      	ldr	r3, [pc, #472]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c3fa:	68da      	ldr	r2, [r3, #12]
 800c3fc:	4b75      	ldr	r3, [pc, #468]	; (800c5d4 <MQTT_ProcessF1+0x3e0>)
 800c3fe:	691b      	ldr	r3, [r3, #16]
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	3b02      	subs	r3, #2
 800c404:	65bb      	str	r3, [r7, #88]	; 0x58
		if (strncmp(mqttInfo.data,"l1",2) == 0){
 800c406:	4983      	ldr	r1, [pc, #524]	; (800c614 <MQTT_ProcessF1+0x420>)
 800c408:	4b7d      	ldr	r3, [pc, #500]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c40a:	2202      	movs	r2, #2
 800c40c:	0018      	movs	r0, r3
 800c40e:	f006 f8e4 	bl	80125da <strncmp>
 800c412:	1e03      	subs	r3, r0, #0
 800c414:	d13a      	bne.n	800c48c <MQTT_ProcessF1+0x298>
			strncpy(temp1,mqttInfo.data,ln2);
 800c416:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c418:	4979      	ldr	r1, [pc, #484]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c41a:	250c      	movs	r5, #12
 800c41c:	197b      	adds	r3, r7, r5
 800c41e:	0018      	movs	r0, r3
 800c420:	f006 f8ec 	bl	80125fc <strncpy>
			myStrSection(temp1,temp,10,',',1);
 800c424:	242c      	movs	r4, #44	; 0x2c
 800c426:	1939      	adds	r1, r7, r4
 800c428:	1978      	adds	r0, r7, r5
 800c42a:	2301      	movs	r3, #1
 800c42c:	9300      	str	r3, [sp, #0]
 800c42e:	232c      	movs	r3, #44	; 0x2c
 800c430:	220a      	movs	r2, #10
 800c432:	f000 ff6c 	bl	800d30e <myStrSection>
			Debug_Send(temp);
 800c436:	193b      	adds	r3, r7, r4
 800c438:	0018      	movs	r0, r3
 800c43a:	f7fe f89f 	bl	800a57c <Debug_Send>
			Debug_Send("\r\n");
 800c43e:	4b6a      	ldr	r3, [pc, #424]	; (800c5e8 <MQTT_ProcessF1+0x3f4>)
 800c440:	0018      	movs	r0, r3
 800c442:	f7fe f89b 	bl	800a57c <Debug_Send>
			if(strncmp(temp,"on",2) == 0){
 800c446:	4974      	ldr	r1, [pc, #464]	; (800c618 <MQTT_ProcessF1+0x424>)
 800c448:	193b      	adds	r3, r7, r4
 800c44a:	2202      	movs	r2, #2
 800c44c:	0018      	movs	r0, r3
 800c44e:	f006 f8c4 	bl	80125da <strncmp>
 800c452:	1e03      	subs	r3, r0, #0
 800c454:	d108      	bne.n	800c468 <MQTT_ProcessF1+0x274>
				//MQTT_Publish_F("got light on");
				RelayOn();
 800c456:	f000 fae7 	bl	800ca28 <RelayOn>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED3_Pin,GPIO_PIN_RESET);
 800c45a:	2380      	movs	r3, #128	; 0x80
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	486f      	ldr	r0, [pc, #444]	; (800c61c <MQTT_ProcessF1+0x428>)
 800c460:	2200      	movs	r2, #0
 800c462:	0019      	movs	r1, r3
 800c464:	f001 fe74 	bl	800e150 <HAL_GPIO_WritePin>
			}
			if(strncmp(temp,"off",3) == 0){
 800c468:	496d      	ldr	r1, [pc, #436]	; (800c620 <MQTT_ProcessF1+0x42c>)
 800c46a:	232c      	movs	r3, #44	; 0x2c
 800c46c:	18fb      	adds	r3, r7, r3
 800c46e:	2203      	movs	r2, #3
 800c470:	0018      	movs	r0, r3
 800c472:	f006 f8b2 	bl	80125da <strncmp>
 800c476:	1e03      	subs	r3, r0, #0
 800c478:	d108      	bne.n	800c48c <MQTT_ProcessF1+0x298>
				//MQTT_Publish_F("got light off");
				RelayOff();
 800c47a:	f000 faeb 	bl	800ca54 <RelayOff>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,GPIO_PIN_SET);
 800c47e:	2380      	movs	r3, #128	; 0x80
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	4868      	ldr	r0, [pc, #416]	; (800c624 <MQTT_ProcessF1+0x430>)
 800c484:	2201      	movs	r2, #1
 800c486:	0019      	movs	r1, r3
 800c488:	f001 fe62 	bl	800e150 <HAL_GPIO_WritePin>
			}
		}
		if (strncmp(mqttInfo.data,"l2",2) == 0){
 800c48c:	4966      	ldr	r1, [pc, #408]	; (800c628 <MQTT_ProcessF1+0x434>)
 800c48e:	4b5c      	ldr	r3, [pc, #368]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c490:	2202      	movs	r2, #2
 800c492:	0018      	movs	r0, r3
 800c494:	f006 f8a1 	bl	80125da <strncmp>
 800c498:	1e03      	subs	r3, r0, #0
 800c49a:	d136      	bne.n	800c50a <MQTT_ProcessF1+0x316>
			strncpy(temp1,mqttInfo.data,ln2);
 800c49c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c49e:	4958      	ldr	r1, [pc, #352]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c4a0:	250c      	movs	r5, #12
 800c4a2:	197b      	adds	r3, r7, r5
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	f006 f8a9 	bl	80125fc <strncpy>
			myStrSection(temp1,temp,10,',',1);
 800c4aa:	242c      	movs	r4, #44	; 0x2c
 800c4ac:	1939      	adds	r1, r7, r4
 800c4ae:	1978      	adds	r0, r7, r5
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	232c      	movs	r3, #44	; 0x2c
 800c4b6:	220a      	movs	r2, #10
 800c4b8:	f000 ff29 	bl	800d30e <myStrSection>
			Debug_Send(temp);
 800c4bc:	193b      	adds	r3, r7, r4
 800c4be:	0018      	movs	r0, r3
 800c4c0:	f7fe f85c 	bl	800a57c <Debug_Send>
			Debug_Send("\r\n");
 800c4c4:	4b48      	ldr	r3, [pc, #288]	; (800c5e8 <MQTT_ProcessF1+0x3f4>)
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	f7fe f858 	bl	800a57c <Debug_Send>
			if(strncmp(temp,"on",2) == 0){
 800c4cc:	4952      	ldr	r1, [pc, #328]	; (800c618 <MQTT_ProcessF1+0x424>)
 800c4ce:	193b      	adds	r3, r7, r4
 800c4d0:	2202      	movs	r2, #2
 800c4d2:	0018      	movs	r0, r3
 800c4d4:	f006 f881 	bl	80125da <strncmp>
 800c4d8:	1e03      	subs	r3, r0, #0
 800c4da:	d106      	bne.n	800c4ea <MQTT_ProcessF1+0x2f6>
				//MQTT_Publish_F("got light on");
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_RESET);
 800c4dc:	2380      	movs	r3, #128	; 0x80
 800c4de:	01db      	lsls	r3, r3, #7
 800c4e0:	484e      	ldr	r0, [pc, #312]	; (800c61c <MQTT_ProcessF1+0x428>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	0019      	movs	r1, r3
 800c4e6:	f001 fe33 	bl	800e150 <HAL_GPIO_WritePin>
			}
			if(strncmp(temp,"off",3) == 0){
 800c4ea:	494d      	ldr	r1, [pc, #308]	; (800c620 <MQTT_ProcessF1+0x42c>)
 800c4ec:	232c      	movs	r3, #44	; 0x2c
 800c4ee:	18fb      	adds	r3, r7, r3
 800c4f0:	2203      	movs	r2, #3
 800c4f2:	0018      	movs	r0, r3
 800c4f4:	f006 f871 	bl	80125da <strncmp>
 800c4f8:	1e03      	subs	r3, r0, #0
 800c4fa:	d106      	bne.n	800c50a <MQTT_ProcessF1+0x316>
				//MQTT_Publish_F("got light off");
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);
 800c4fc:	2380      	movs	r3, #128	; 0x80
 800c4fe:	01db      	lsls	r3, r3, #7
 800c500:	4846      	ldr	r0, [pc, #280]	; (800c61c <MQTT_ProcessF1+0x428>)
 800c502:	2201      	movs	r2, #1
 800c504:	0019      	movs	r1, r3
 800c506:	f001 fe23 	bl	800e150 <HAL_GPIO_WritePin>
			}
		}
		if (strncmp(mqttInfo.data,"l3",2) == 0){
 800c50a:	4948      	ldr	r1, [pc, #288]	; (800c62c <MQTT_ProcessF1+0x438>)
 800c50c:	4b3c      	ldr	r3, [pc, #240]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c50e:	2202      	movs	r2, #2
 800c510:	0018      	movs	r0, r3
 800c512:	f006 f862 	bl	80125da <strncmp>
 800c516:	1e03      	subs	r3, r0, #0
 800c518:	d136      	bne.n	800c588 <MQTT_ProcessF1+0x394>
			strncpy(temp1,mqttInfo.data,ln2);
 800c51a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c51c:	4938      	ldr	r1, [pc, #224]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c51e:	250c      	movs	r5, #12
 800c520:	197b      	adds	r3, r7, r5
 800c522:	0018      	movs	r0, r3
 800c524:	f006 f86a 	bl	80125fc <strncpy>
			myStrSection(temp1,temp,10,',',1);
 800c528:	242c      	movs	r4, #44	; 0x2c
 800c52a:	1939      	adds	r1, r7, r4
 800c52c:	1978      	adds	r0, r7, r5
 800c52e:	2301      	movs	r3, #1
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	232c      	movs	r3, #44	; 0x2c
 800c534:	220a      	movs	r2, #10
 800c536:	f000 feea 	bl	800d30e <myStrSection>
			Debug_Send(temp);
 800c53a:	193b      	adds	r3, r7, r4
 800c53c:	0018      	movs	r0, r3
 800c53e:	f7fe f81d 	bl	800a57c <Debug_Send>
			Debug_Send("\r\n");
 800c542:	4b29      	ldr	r3, [pc, #164]	; (800c5e8 <MQTT_ProcessF1+0x3f4>)
 800c544:	0018      	movs	r0, r3
 800c546:	f7fe f819 	bl	800a57c <Debug_Send>
			if(strncmp(temp,"on",2) == 0){
 800c54a:	4933      	ldr	r1, [pc, #204]	; (800c618 <MQTT_ProcessF1+0x424>)
 800c54c:	193b      	adds	r3, r7, r4
 800c54e:	2202      	movs	r2, #2
 800c550:	0018      	movs	r0, r3
 800c552:	f006 f842 	bl	80125da <strncmp>
 800c556:	1e03      	subs	r3, r0, #0
 800c558:	d106      	bne.n	800c568 <MQTT_ProcessF1+0x374>
				//MQTT_Publish_F("got light on");
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_RESET);
 800c55a:	2380      	movs	r3, #128	; 0x80
 800c55c:	019b      	lsls	r3, r3, #6
 800c55e:	482f      	ldr	r0, [pc, #188]	; (800c61c <MQTT_ProcessF1+0x428>)
 800c560:	2200      	movs	r2, #0
 800c562:	0019      	movs	r1, r3
 800c564:	f001 fdf4 	bl	800e150 <HAL_GPIO_WritePin>
			}
			if(strncmp(temp,"off",3) == 0){
 800c568:	492d      	ldr	r1, [pc, #180]	; (800c620 <MQTT_ProcessF1+0x42c>)
 800c56a:	232c      	movs	r3, #44	; 0x2c
 800c56c:	18fb      	adds	r3, r7, r3
 800c56e:	2203      	movs	r2, #3
 800c570:	0018      	movs	r0, r3
 800c572:	f006 f832 	bl	80125da <strncmp>
 800c576:	1e03      	subs	r3, r0, #0
 800c578:	d106      	bne.n	800c588 <MQTT_ProcessF1+0x394>
				//MQTT_Publish_F("got light off");
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,GPIO_PIN_SET);
 800c57a:	2380      	movs	r3, #128	; 0x80
 800c57c:	019b      	lsls	r3, r3, #6
 800c57e:	4827      	ldr	r0, [pc, #156]	; (800c61c <MQTT_ProcessF1+0x428>)
 800c580:	2201      	movs	r2, #1
 800c582:	0019      	movs	r1, r3
 800c584:	f001 fde4 	bl	800e150 <HAL_GPIO_WritePin>
			}
		}
		if (strncmp(mqttInfo.data,"l4",2) == 0){
 800c588:	4929      	ldr	r1, [pc, #164]	; (800c630 <MQTT_ProcessF1+0x43c>)
 800c58a:	4b1d      	ldr	r3, [pc, #116]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c58c:	2202      	movs	r2, #2
 800c58e:	0018      	movs	r0, r3
 800c590:	f006 f823 	bl	80125da <strncmp>
 800c594:	1e03      	subs	r3, r0, #0
 800c596:	d16a      	bne.n	800c66e <MQTT_ProcessF1+0x47a>
			strncpy(temp1,mqttInfo.data,ln2);
 800c598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c59a:	4919      	ldr	r1, [pc, #100]	; (800c600 <MQTT_ProcessF1+0x40c>)
 800c59c:	250c      	movs	r5, #12
 800c59e:	197b      	adds	r3, r7, r5
 800c5a0:	0018      	movs	r0, r3
 800c5a2:	f006 f82b 	bl	80125fc <strncpy>
			myStrSection(temp1,temp,10,',',1);
 800c5a6:	242c      	movs	r4, #44	; 0x2c
 800c5a8:	1939      	adds	r1, r7, r4
 800c5aa:	1978      	adds	r0, r7, r5
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	232c      	movs	r3, #44	; 0x2c
 800c5b2:	220a      	movs	r2, #10
 800c5b4:	f000 feab 	bl	800d30e <myStrSection>
			Debug_Send(temp);
 800c5b8:	193b      	adds	r3, r7, r4
 800c5ba:	0018      	movs	r0, r3
 800c5bc:	f7fd ffde 	bl	800a57c <Debug_Send>
			Debug_Send("\r\n");
 800c5c0:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <MQTT_ProcessF1+0x3f4>)
 800c5c2:	0018      	movs	r0, r3
 800c5c4:	f7fd ffda 	bl	800a57c <Debug_Send>
			if(strncmp(temp,"on",2) == 0){
 800c5c8:	4913      	ldr	r1, [pc, #76]	; (800c618 <MQTT_ProcessF1+0x424>)
 800c5ca:	193b      	adds	r3, r7, r4
 800c5cc:	2202      	movs	r2, #2
 800c5ce:	0018      	movs	r0, r3
 800c5d0:	e030      	b.n	800c634 <MQTT_ProcessF1+0x440>
 800c5d2:	46c0      	nop			; (mov r8, r8)
 800c5d4:	20001288 	.word	0x20001288
 800c5d8:	08013cb8 	.word	0x08013cb8
 800c5dc:	08013cbc 	.word	0x08013cbc
 800c5e0:	200012a0 	.word	0x200012a0
 800c5e4:	08013cc0 	.word	0x08013cc0
 800c5e8:	08013ccc 	.word	0x08013ccc
 800c5ec:	08013cd0 	.word	0x08013cd0
 800c5f0:	08013ce0 	.word	0x08013ce0
 800c5f4:	08013cec 	.word	0x08013cec
 800c5f8:	20001614 	.word	0x20001614
 800c5fc:	200012d2 	.word	0x200012d2
 800c600:	200012e6 	.word	0x200012e6
 800c604:	08013cf8 	.word	0x08013cf8
 800c608:	08013cfc 	.word	0x08013cfc
 800c60c:	08013d00 	.word	0x08013d00
 800c610:	08013d0c 	.word	0x08013d0c
 800c614:	08013d14 	.word	0x08013d14
 800c618:	08013d18 	.word	0x08013d18
 800c61c:	48000800 	.word	0x48000800
 800c620:	08013d1c 	.word	0x08013d1c
 800c624:	48000400 	.word	0x48000400
 800c628:	08013d20 	.word	0x08013d20
 800c62c:	08013d24 	.word	0x08013d24
 800c630:	08013d28 	.word	0x08013d28
 800c634:	f005 ffd1 	bl	80125da <strncmp>
 800c638:	1e03      	subs	r3, r0, #0
 800c63a:	d107      	bne.n	800c64c <MQTT_ProcessF1+0x458>
				//MQTT_Publish_F("got light on");
				HAL_GPIO_WritePin(Sensor1_GPIO_Port, Sensor1_Pin,GPIO_PIN_RESET);
 800c63c:	2380      	movs	r3, #128	; 0x80
 800c63e:	01d9      	lsls	r1, r3, #7
 800c640:	2390      	movs	r3, #144	; 0x90
 800c642:	05db      	lsls	r3, r3, #23
 800c644:	2200      	movs	r2, #0
 800c646:	0018      	movs	r0, r3
 800c648:	f001 fd82 	bl	800e150 <HAL_GPIO_WritePin>
			}
			if(strncmp(temp,"off",3) == 0){
 800c64c:	4959      	ldr	r1, [pc, #356]	; (800c7b4 <MQTT_ProcessF1+0x5c0>)
 800c64e:	232c      	movs	r3, #44	; 0x2c
 800c650:	18fb      	adds	r3, r7, r3
 800c652:	2203      	movs	r2, #3
 800c654:	0018      	movs	r0, r3
 800c656:	f005 ffc0 	bl	80125da <strncmp>
 800c65a:	1e03      	subs	r3, r0, #0
 800c65c:	d107      	bne.n	800c66e <MQTT_ProcessF1+0x47a>
				//MQTT_Publish_F("got light off");
				HAL_GPIO_WritePin(Sensor1_GPIO_Port, Sensor1_Pin,GPIO_PIN_SET);
 800c65e:	2380      	movs	r3, #128	; 0x80
 800c660:	01d9      	lsls	r1, r3, #7
 800c662:	2390      	movs	r3, #144	; 0x90
 800c664:	05db      	lsls	r3, r3, #23
 800c666:	2201      	movs	r2, #1
 800c668:	0018      	movs	r0, r3
 800c66a:	f001 fd71 	bl	800e150 <HAL_GPIO_WritePin>
			}
		}
		if (strncmp(mqttInfo.data,"l5",2) == 0){
 800c66e:	4952      	ldr	r1, [pc, #328]	; (800c7b8 <MQTT_ProcessF1+0x5c4>)
 800c670:	4b52      	ldr	r3, [pc, #328]	; (800c7bc <MQTT_ProcessF1+0x5c8>)
 800c672:	2202      	movs	r2, #2
 800c674:	0018      	movs	r0, r3
 800c676:	f005 ffb0 	bl	80125da <strncmp>
 800c67a:	1e03      	subs	r3, r0, #0
 800c67c:	d138      	bne.n	800c6f0 <MQTT_ProcessF1+0x4fc>
			strncpy(temp1,mqttInfo.data,ln2);
 800c67e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c680:	494e      	ldr	r1, [pc, #312]	; (800c7bc <MQTT_ProcessF1+0x5c8>)
 800c682:	250c      	movs	r5, #12
 800c684:	197b      	adds	r3, r7, r5
 800c686:	0018      	movs	r0, r3
 800c688:	f005 ffb8 	bl	80125fc <strncpy>
			myStrSection(temp1,temp,10,',',1);
 800c68c:	242c      	movs	r4, #44	; 0x2c
 800c68e:	1939      	adds	r1, r7, r4
 800c690:	1978      	adds	r0, r7, r5
 800c692:	2301      	movs	r3, #1
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	232c      	movs	r3, #44	; 0x2c
 800c698:	220a      	movs	r2, #10
 800c69a:	f000 fe38 	bl	800d30e <myStrSection>
			Debug_Send(temp);
 800c69e:	193b      	adds	r3, r7, r4
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	f7fd ff6b 	bl	800a57c <Debug_Send>
			Debug_Send("\r\n");
 800c6a6:	4b46      	ldr	r3, [pc, #280]	; (800c7c0 <MQTT_ProcessF1+0x5cc>)
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	f7fd ff67 	bl	800a57c <Debug_Send>
			if(strncmp(temp,"on",2) == 0){
 800c6ae:	4945      	ldr	r1, [pc, #276]	; (800c7c4 <MQTT_ProcessF1+0x5d0>)
 800c6b0:	193b      	adds	r3, r7, r4
 800c6b2:	2202      	movs	r2, #2
 800c6b4:	0018      	movs	r0, r3
 800c6b6:	f005 ff90 	bl	80125da <strncmp>
 800c6ba:	1e03      	subs	r3, r0, #0
 800c6bc:	d107      	bne.n	800c6ce <MQTT_ProcessF1+0x4da>
				//MQTT_Publish_F("got light on");
				HAL_GPIO_WritePin(Sensor2_GPIO_Port, Sensor2_Pin,GPIO_PIN_RESET);
 800c6be:	2380      	movs	r3, #128	; 0x80
 800c6c0:	0119      	lsls	r1, r3, #4
 800c6c2:	2390      	movs	r3, #144	; 0x90
 800c6c4:	05db      	lsls	r3, r3, #23
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	0018      	movs	r0, r3
 800c6ca:	f001 fd41 	bl	800e150 <HAL_GPIO_WritePin>
			}
			if(strncmp(temp,"off",3) == 0){
 800c6ce:	4939      	ldr	r1, [pc, #228]	; (800c7b4 <MQTT_ProcessF1+0x5c0>)
 800c6d0:	232c      	movs	r3, #44	; 0x2c
 800c6d2:	18fb      	adds	r3, r7, r3
 800c6d4:	2203      	movs	r2, #3
 800c6d6:	0018      	movs	r0, r3
 800c6d8:	f005 ff7f 	bl	80125da <strncmp>
 800c6dc:	1e03      	subs	r3, r0, #0
 800c6de:	d107      	bne.n	800c6f0 <MQTT_ProcessF1+0x4fc>
				//MQTT_Publish_F("got light off");
				HAL_GPIO_WritePin(Sensor2_GPIO_Port, Sensor2_Pin,GPIO_PIN_SET);
 800c6e0:	2380      	movs	r3, #128	; 0x80
 800c6e2:	0119      	lsls	r1, r3, #4
 800c6e4:	2390      	movs	r3, #144	; 0x90
 800c6e6:	05db      	lsls	r3, r3, #23
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	0018      	movs	r0, r3
 800c6ec:	f001 fd30 	bl	800e150 <HAL_GPIO_WritePin>
			}
		}
		if (strncmp(mqttInfo.data,"l6",2) == 0){
 800c6f0:	4935      	ldr	r1, [pc, #212]	; (800c7c8 <MQTT_ProcessF1+0x5d4>)
 800c6f2:	4b32      	ldr	r3, [pc, #200]	; (800c7bc <MQTT_ProcessF1+0x5c8>)
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	f005 ff6f 	bl	80125da <strncmp>
 800c6fc:	1e03      	subs	r3, r0, #0
 800c6fe:	d136      	bne.n	800c76e <MQTT_ProcessF1+0x57a>
			strncpy(temp1,mqttInfo.data,ln2);
 800c700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c702:	492e      	ldr	r1, [pc, #184]	; (800c7bc <MQTT_ProcessF1+0x5c8>)
 800c704:	250c      	movs	r5, #12
 800c706:	197b      	adds	r3, r7, r5
 800c708:	0018      	movs	r0, r3
 800c70a:	f005 ff77 	bl	80125fc <strncpy>
			myStrSection(temp1,temp,10,',',1);
 800c70e:	242c      	movs	r4, #44	; 0x2c
 800c710:	1939      	adds	r1, r7, r4
 800c712:	1978      	adds	r0, r7, r5
 800c714:	2301      	movs	r3, #1
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	232c      	movs	r3, #44	; 0x2c
 800c71a:	220a      	movs	r2, #10
 800c71c:	f000 fdf7 	bl	800d30e <myStrSection>
			Debug_Send(temp);
 800c720:	193b      	adds	r3, r7, r4
 800c722:	0018      	movs	r0, r3
 800c724:	f7fd ff2a 	bl	800a57c <Debug_Send>
			Debug_Send("\r\n");
 800c728:	4b25      	ldr	r3, [pc, #148]	; (800c7c0 <MQTT_ProcessF1+0x5cc>)
 800c72a:	0018      	movs	r0, r3
 800c72c:	f7fd ff26 	bl	800a57c <Debug_Send>
			if(strncmp(temp,"on",2) == 0){
 800c730:	4924      	ldr	r1, [pc, #144]	; (800c7c4 <MQTT_ProcessF1+0x5d0>)
 800c732:	193b      	adds	r3, r7, r4
 800c734:	2202      	movs	r2, #2
 800c736:	0018      	movs	r0, r3
 800c738:	f005 ff4f 	bl	80125da <strncmp>
 800c73c:	1e03      	subs	r3, r0, #0
 800c73e:	d106      	bne.n	800c74e <MQTT_ProcessF1+0x55a>
				//MQTT_Publish_F("got light on");
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_RESET);
 800c740:	2380      	movs	r3, #128	; 0x80
 800c742:	015b      	lsls	r3, r3, #5
 800c744:	4821      	ldr	r0, [pc, #132]	; (800c7cc <MQTT_ProcessF1+0x5d8>)
 800c746:	2200      	movs	r2, #0
 800c748:	0019      	movs	r1, r3
 800c74a:	f001 fd01 	bl	800e150 <HAL_GPIO_WritePin>
			}
			if(strncmp(temp,"off",3) == 0){
 800c74e:	4919      	ldr	r1, [pc, #100]	; (800c7b4 <MQTT_ProcessF1+0x5c0>)
 800c750:	232c      	movs	r3, #44	; 0x2c
 800c752:	18fb      	adds	r3, r7, r3
 800c754:	2203      	movs	r2, #3
 800c756:	0018      	movs	r0, r3
 800c758:	f005 ff3f 	bl	80125da <strncmp>
 800c75c:	1e03      	subs	r3, r0, #0
 800c75e:	d106      	bne.n	800c76e <MQTT_ProcessF1+0x57a>
				//MQTT_Publish_F("got light off");
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,GPIO_PIN_SET);
 800c760:	2380      	movs	r3, #128	; 0x80
 800c762:	015b      	lsls	r3, r3, #5
 800c764:	4819      	ldr	r0, [pc, #100]	; (800c7cc <MQTT_ProcessF1+0x5d8>)
 800c766:	2201      	movs	r2, #1
 800c768:	0019      	movs	r1, r3
 800c76a:	f001 fcf1 	bl	800e150 <HAL_GPIO_WritePin>
			}
		}
		if (strncmp(mqttInfo.data,"retain",3) == 0){
 800c76e:	4918      	ldr	r1, [pc, #96]	; (800c7d0 <MQTT_ProcessF1+0x5dc>)
 800c770:	4b12      	ldr	r3, [pc, #72]	; (800c7bc <MQTT_ProcessF1+0x5c8>)
 800c772:	2203      	movs	r2, #3
 800c774:	0018      	movs	r0, r3
 800c776:	f005 ff30 	bl	80125da <strncmp>
 800c77a:	1e03      	subs	r3, r0, #0
 800c77c:	d106      	bne.n	800c78c <MQTT_ProcessF1+0x598>
			//MQTT_Publish_F("got retain");
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_RESET);
 800c77e:	2380      	movs	r3, #128	; 0x80
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	4812      	ldr	r0, [pc, #72]	; (800c7cc <MQTT_ProcessF1+0x5d8>)
 800c784:	2200      	movs	r2, #0
 800c786:	0019      	movs	r1, r3
 800c788:	f001 fce2 	bl	800e150 <HAL_GPIO_WritePin>
		}
		if (strncmp(mqttInfo.data,"mag",3) == 0){
 800c78c:	4911      	ldr	r1, [pc, #68]	; (800c7d4 <MQTT_ProcessF1+0x5e0>)
 800c78e:	4b0b      	ldr	r3, [pc, #44]	; (800c7bc <MQTT_ProcessF1+0x5c8>)
 800c790:	2203      	movs	r2, #3
 800c792:	0018      	movs	r0, r3
 800c794:	f005 ff21 	bl	80125da <strncmp>

		}
		if (strncmp(mqttInfo.data,"mag",3) == 0){
 800c798:	490e      	ldr	r1, [pc, #56]	; (800c7d4 <MQTT_ProcessF1+0x5e0>)
 800c79a:	4b08      	ldr	r3, [pc, #32]	; (800c7bc <MQTT_ProcessF1+0x5c8>)
 800c79c:	2203      	movs	r2, #3
 800c79e:	0018      	movs	r0, r3
 800c7a0:	f005 ff1b 	bl	80125da <strncmp>

		}
	}
	mqttFlag.data = 0;
 800c7a4:	4b0c      	ldr	r3, [pc, #48]	; (800c7d8 <MQTT_ProcessF1+0x5e4>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	701a      	strb	r2, [r3, #0]
}
 800c7aa:	46c0      	nop			; (mov r8, r8)
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	b01a      	add	sp, #104	; 0x68
 800c7b0:	bdb0      	pop	{r4, r5, r7, pc}
 800c7b2:	46c0      	nop			; (mov r8, r8)
 800c7b4:	08013d1c 	.word	0x08013d1c
 800c7b8:	08013d2c 	.word	0x08013d2c
 800c7bc:	200012e6 	.word	0x200012e6
 800c7c0:	08013ccc 	.word	0x08013ccc
 800c7c4:	08013d18 	.word	0x08013d18
 800c7c8:	08013d30 	.word	0x08013d30
 800c7cc:	48000400 	.word	0x48000400
 800c7d0:	08013d34 	.word	0x08013d34
 800c7d4:	08013cfc 	.word	0x08013cfc
 800c7d8:	20001614 	.word	0x20001614

0800c7dc <MQTT_ConnectF>:

void MQTT_ConnectF(){
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	af00      	add	r7, sp, #0
	tempGPRS[0] = 0x10;
 800c7e0:	4b20      	ldr	r3, [pc, #128]	; (800c864 <MQTT_ConnectF+0x88>)
 800c7e2:	2210      	movs	r2, #16
 800c7e4:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x0E;
 800c7e6:	4b1f      	ldr	r3, [pc, #124]	; (800c864 <MQTT_ConnectF+0x88>)
 800c7e8:	220e      	movs	r2, #14
 800c7ea:	705a      	strb	r2, [r3, #1]
	tempGPRS[2] = 0x00;
 800c7ec:	4b1d      	ldr	r3, [pc, #116]	; (800c864 <MQTT_ConnectF+0x88>)
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x04;
 800c7f2:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <MQTT_ConnectF+0x88>)
 800c7f4:	2204      	movs	r2, #4
 800c7f6:	70da      	strb	r2, [r3, #3]
	tempGPRS[4] = 'M';
 800c7f8:	4b1a      	ldr	r3, [pc, #104]	; (800c864 <MQTT_ConnectF+0x88>)
 800c7fa:	224d      	movs	r2, #77	; 0x4d
 800c7fc:	711a      	strb	r2, [r3, #4]
	tempGPRS[5] = 'Q';
 800c7fe:	4b19      	ldr	r3, [pc, #100]	; (800c864 <MQTT_ConnectF+0x88>)
 800c800:	2251      	movs	r2, #81	; 0x51
 800c802:	715a      	strb	r2, [r3, #5]
	tempGPRS[6] = 'T';
 800c804:	4b17      	ldr	r3, [pc, #92]	; (800c864 <MQTT_ConnectF+0x88>)
 800c806:	2254      	movs	r2, #84	; 0x54
 800c808:	719a      	strb	r2, [r3, #6]
	tempGPRS[7] = 'T';
 800c80a:	4b16      	ldr	r3, [pc, #88]	; (800c864 <MQTT_ConnectF+0x88>)
 800c80c:	2254      	movs	r2, #84	; 0x54
 800c80e:	71da      	strb	r2, [r3, #7]
	tempGPRS[8] = 0x04;
 800c810:	4b14      	ldr	r3, [pc, #80]	; (800c864 <MQTT_ConnectF+0x88>)
 800c812:	2204      	movs	r2, #4
 800c814:	721a      	strb	r2, [r3, #8]
	tempGPRS[9] = 0x02;
 800c816:	4b13      	ldr	r3, [pc, #76]	; (800c864 <MQTT_ConnectF+0x88>)
 800c818:	2202      	movs	r2, #2
 800c81a:	725a      	strb	r2, [r3, #9]
	tempGPRS[10] = 0x0A;
 800c81c:	4b11      	ldr	r3, [pc, #68]	; (800c864 <MQTT_ConnectF+0x88>)
 800c81e:	220a      	movs	r2, #10
 800c820:	729a      	strb	r2, [r3, #10]
	tempGPRS[11] = 0x78;
 800c822:	4b10      	ldr	r3, [pc, #64]	; (800c864 <MQTT_ConnectF+0x88>)
 800c824:	2278      	movs	r2, #120	; 0x78
 800c826:	72da      	strb	r2, [r3, #11]
	tempGPRS[12] = 0x00;
 800c828:	4b0e      	ldr	r3, [pc, #56]	; (800c864 <MQTT_ConnectF+0x88>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	731a      	strb	r2, [r3, #12]
	tempGPRS[13] = 0x02;
 800c82e:	4b0d      	ldr	r3, [pc, #52]	; (800c864 <MQTT_ConnectF+0x88>)
 800c830:	2202      	movs	r2, #2
 800c832:	735a      	strb	r2, [r3, #13]

	tempGPRS[14] = 'P';
 800c834:	4b0b      	ldr	r3, [pc, #44]	; (800c864 <MQTT_ConnectF+0x88>)
 800c836:	2250      	movs	r2, #80	; 0x50
 800c838:	739a      	strb	r2, [r3, #14]
	tempGPRS[15] = '3';
 800c83a:	4b0a      	ldr	r3, [pc, #40]	; (800c864 <MQTT_ConnectF+0x88>)
 800c83c:	2233      	movs	r2, #51	; 0x33
 800c83e:	73da      	strb	r2, [r3, #15]

	tempGPRS[16] = 0x1A;
 800c840:	4b08      	ldr	r3, [pc, #32]	; (800c864 <MQTT_ConnectF+0x88>)
 800c842:	221a      	movs	r2, #26
 800c844:	741a      	strb	r2, [r3, #16]
	tempGPRS[17] = 0x0D;
 800c846:	4b07      	ldr	r3, [pc, #28]	; (800c864 <MQTT_ConnectF+0x88>)
 800c848:	220d      	movs	r2, #13
 800c84a:	745a      	strb	r2, [r3, #17]
	GSM_Send_Bin(tempGPRS, 18);
 800c84c:	4b05      	ldr	r3, [pc, #20]	; (800c864 <MQTT_ConnectF+0x88>)
 800c84e:	2112      	movs	r1, #18
 800c850:	0018      	movs	r0, r3
 800c852:	f7fd fe6d 	bl	800a530 <GSM_Send_Bin>
	mqttFlag.connect = 1;
 800c856:	4b04      	ldr	r3, [pc, #16]	; (800c868 <MQTT_ConnectF+0x8c>)
 800c858:	2201      	movs	r2, #1
 800c85a:	70da      	strb	r2, [r3, #3]
	//mqttState = Connect;
	//gsmState = GPRS_Send;
}
 800c85c:	46c0      	nop			; (mov r8, r8)
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	46c0      	nop			; (mov r8, r8)
 800c864:	200014c8 	.word	0x200014c8
 800c868:	20001614 	.word	0x20001614

0800c86c <MQTT_SuscribeF>:

void MQTT_SuscribeF(){
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
	tempGPRS[0] = 0x82;
 800c870:	4b1a      	ldr	r3, [pc, #104]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c872:	2282      	movs	r2, #130	; 0x82
 800c874:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x0A;
 800c876:	4b19      	ldr	r3, [pc, #100]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c878:	220a      	movs	r2, #10
 800c87a:	705a      	strb	r2, [r3, #1]
	tempGPRS[2] = 0x00;
 800c87c:	4b17      	ldr	r3, [pc, #92]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c87e:	2200      	movs	r2, #0
 800c880:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x00;
 800c882:	4b16      	ldr	r3, [pc, #88]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c884:	2200      	movs	r2, #0
 800c886:	70da      	strb	r2, [r3, #3]
	tempGPRS[4] = 0x00;
 800c888:	4b14      	ldr	r3, [pc, #80]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c88a:	2200      	movs	r2, #0
 800c88c:	711a      	strb	r2, [r3, #4]
	tempGPRS[5] = 0x05;
 800c88e:	4b13      	ldr	r3, [pc, #76]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c890:	2205      	movs	r2, #5
 800c892:	715a      	strb	r2, [r3, #5]
	tempGPRS[6] = 'h';
 800c894:	4b11      	ldr	r3, [pc, #68]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c896:	2268      	movs	r2, #104	; 0x68
 800c898:	719a      	strb	r2, [r3, #6]
	tempGPRS[7] = 'o';
 800c89a:	4b10      	ldr	r3, [pc, #64]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c89c:	226f      	movs	r2, #111	; 0x6f
 800c89e:	71da      	strb	r2, [r3, #7]
	tempGPRS[8] = 'u';
 800c8a0:	4b0e      	ldr	r3, [pc, #56]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c8a2:	2275      	movs	r2, #117	; 0x75
 800c8a4:	721a      	strb	r2, [r3, #8]
	tempGPRS[9] = 's';
 800c8a6:	4b0d      	ldr	r3, [pc, #52]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c8a8:	2273      	movs	r2, #115	; 0x73
 800c8aa:	725a      	strb	r2, [r3, #9]
	tempGPRS[10] = 'e';
 800c8ac:	4b0b      	ldr	r3, [pc, #44]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c8ae:	2265      	movs	r2, #101	; 0x65
 800c8b0:	729a      	strb	r2, [r3, #10]
	tempGPRS[11] = 0x00;
 800c8b2:	4b0a      	ldr	r3, [pc, #40]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	72da      	strb	r2, [r3, #11]
	tempGPRS[12] = 0x00;
 800c8b8:	4b08      	ldr	r3, [pc, #32]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	731a      	strb	r2, [r3, #12]

	tempGPRS[13] = 0x1A;
 800c8be:	4b07      	ldr	r3, [pc, #28]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c8c0:	221a      	movs	r2, #26
 800c8c2:	735a      	strb	r2, [r3, #13]
	tempGPRS[14] = 0x0D;
 800c8c4:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c8c6:	220d      	movs	r2, #13
 800c8c8:	739a      	strb	r2, [r3, #14]
	GSM_Send_Bin(tempGPRS, 15);
 800c8ca:	4b04      	ldr	r3, [pc, #16]	; (800c8dc <MQTT_SuscribeF+0x70>)
 800c8cc:	210f      	movs	r1, #15
 800c8ce:	0018      	movs	r0, r3
 800c8d0:	f7fd fe2e 	bl	800a530 <GSM_Send_Bin>
	//mqttState = Subscribe;
	//gsmState = GPRS_Send;
}
 800c8d4:	46c0      	nop			; (mov r8, r8)
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	46c0      	nop			; (mov r8, r8)
 800c8dc:	200014c8 	.word	0x200014c8

0800c8e0 <MQTT_Publish_F>:

void MQTT_Publish_F(uint8_t *data){
 800c8e0:	b590      	push	{r4, r7, lr}
 800c8e2:	b089      	sub	sp, #36	; 0x24
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
	//Debug_Send("Publish Func\n");
	//Debug_Send(data);
	//Debug_Send("\r\n");
	tempGPRS[0] = 0x30;
 800c8e8:	4b38      	ldr	r3, [pc, #224]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c8ea:	2230      	movs	r2, #48	; 0x30
 800c8ec:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x0A;
 800c8ee:	4b37      	ldr	r3, [pc, #220]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c8f0:	220a      	movs	r2, #10
 800c8f2:	705a      	strb	r2, [r3, #1]
	tempGPRS[2] = 0x00;
 800c8f4:	4b35      	ldr	r3, [pc, #212]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x05;
 800c8fa:	4b34      	ldr	r3, [pc, #208]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c8fc:	2205      	movs	r2, #5
 800c8fe:	70da      	strb	r2, [r3, #3]
	tempGPRS[4] = 'h';
 800c900:	4b32      	ldr	r3, [pc, #200]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c902:	2268      	movs	r2, #104	; 0x68
 800c904:	711a      	strb	r2, [r3, #4]
	tempGPRS[5] = 'o';
 800c906:	4b31      	ldr	r3, [pc, #196]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c908:	226f      	movs	r2, #111	; 0x6f
 800c90a:	715a      	strb	r2, [r3, #5]
	tempGPRS[6] = 'u';
 800c90c:	4b2f      	ldr	r3, [pc, #188]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c90e:	2275      	movs	r2, #117	; 0x75
 800c910:	719a      	strb	r2, [r3, #6]
	tempGPRS[7] = 's';
 800c912:	4b2e      	ldr	r3, [pc, #184]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c914:	2273      	movs	r2, #115	; 0x73
 800c916:	71da      	strb	r2, [r3, #7]
	tempGPRS[8] = 'e';
 800c918:	4b2c      	ldr	r3, [pc, #176]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c91a:	2265      	movs	r2, #101	; 0x65
 800c91c:	721a      	strb	r2, [r3, #8]
	tempGPRS[9] = 'o';
 800c91e:	4b2b      	ldr	r3, [pc, #172]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c920:	226f      	movs	r2, #111	; 0x6f
 800c922:	725a      	strb	r2, [r3, #9]
	tempGPRS[10] = 'f';
 800c924:	4b29      	ldr	r3, [pc, #164]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c926:	2266      	movs	r2, #102	; 0x66
 800c928:	729a      	strb	r2, [r3, #10]
	tempGPRS[11] = 'f';
 800c92a:	4b28      	ldr	r3, [pc, #160]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c92c:	2266      	movs	r2, #102	; 0x66
 800c92e:	72da      	strb	r2, [r3, #11]

	int counter;
	counter = 9;
 800c930:	2309      	movs	r3, #9
 800c932:	61fb      	str	r3, [r7, #28]
	while(*data != 0){
 800c934:	e00b      	b.n	800c94e <MQTT_Publish_F+0x6e>
		tempGPRS[counter] = *data++;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	1c5a      	adds	r2, r3, #1
 800c93a:	607a      	str	r2, [r7, #4]
 800c93c:	7819      	ldrb	r1, [r3, #0]
 800c93e:	4a23      	ldr	r2, [pc, #140]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	18d3      	adds	r3, r2, r3
 800c944:	1c0a      	adds	r2, r1, #0
 800c946:	701a      	strb	r2, [r3, #0]
		counter++;
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	3301      	adds	r3, #1
 800c94c:	61fb      	str	r3, [r7, #28]
	while(*data != 0){
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1ef      	bne.n	800c936 <MQTT_Publish_F+0x56>
	}
	char temp1[20];
	myLongStr(counter,temp1,10,10);
 800c956:	2408      	movs	r4, #8
 800c958:	1939      	adds	r1, r7, r4
 800c95a:	69f8      	ldr	r0, [r7, #28]
 800c95c:	230a      	movs	r3, #10
 800c95e:	220a      	movs	r2, #10
 800c960:	f000 fd6a 	bl	800d438 <myLongStr>
	Debug_Send("Chars count:");
 800c964:	4b1a      	ldr	r3, [pc, #104]	; (800c9d0 <MQTT_Publish_F+0xf0>)
 800c966:	0018      	movs	r0, r3
 800c968:	f7fd fe08 	bl	800a57c <Debug_Send>
	Debug_Send(temp1);
 800c96c:	193b      	adds	r3, r7, r4
 800c96e:	0018      	movs	r0, r3
 800c970:	f7fd fe04 	bl	800a57c <Debug_Send>
	Debug_Send("\r\n");
 800c974:	4b17      	ldr	r3, [pc, #92]	; (800c9d4 <MQTT_Publish_F+0xf4>)
 800c976:	0018      	movs	r0, r3
 800c978:	f7fd fe00 	bl	800a57c <Debug_Send>


	tempGPRS[counter] = 0x1A;
 800c97c:	4a13      	ldr	r2, [pc, #76]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	18d3      	adds	r3, r2, r3
 800c982:	221a      	movs	r2, #26
 800c984:	701a      	strb	r2, [r3, #0]
	counter++;
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	3301      	adds	r3, #1
 800c98a:	61fb      	str	r3, [r7, #28]
	tempGPRS[counter] = 0x0D;
 800c98c:	4a0f      	ldr	r2, [pc, #60]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	18d3      	adds	r3, r2, r3
 800c992:	220d      	movs	r2, #13
 800c994:	701a      	strb	r2, [r3, #0]
	counter++;
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	3301      	adds	r3, #1
 800c99a:	61fb      	str	r3, [r7, #28]

	//GSM_Send_Bin(tempGPRS, 14);
	//mqttInfo.length = 14;
	mqttInfo.length = counter;
 800c99c:	4b0e      	ldr	r3, [pc, #56]	; (800c9d8 <MQTT_Publish_F+0xf8>)
 800c99e:	69fa      	ldr	r2, [r7, #28]
 800c9a0:	609a      	str	r2, [r3, #8]
	tempGPRS[1] = counter - 4;
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	3b04      	subs	r3, #4
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	4b08      	ldr	r3, [pc, #32]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c9ac:	705a      	strb	r2, [r3, #1]
	GSM_Send_Bin(tempGPRS, counter);
 800c9ae:	69fa      	ldr	r2, [r7, #28]
 800c9b0:	4b06      	ldr	r3, [pc, #24]	; (800c9cc <MQTT_Publish_F+0xec>)
 800c9b2:	0011      	movs	r1, r2
 800c9b4:	0018      	movs	r0, r3
 800c9b6:	f7fd fdbb 	bl	800a530 <GSM_Send_Bin>
	Debug_Send("Publish sent\r\n");
 800c9ba:	4b08      	ldr	r3, [pc, #32]	; (800c9dc <MQTT_Publish_F+0xfc>)
 800c9bc:	0018      	movs	r0, r3
 800c9be:	f7fd fddd 	bl	800a57c <Debug_Send>
	/*myLongStr(mqttInfo.length,temp1,10,10);
	Debug_Send("Length:");
	Debug_Send(temp1);
	Debug_Send("\r\n");*/
}
 800c9c2:	46c0      	nop			; (mov r8, r8)
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	b009      	add	sp, #36	; 0x24
 800c9c8:	bd90      	pop	{r4, r7, pc}
 800c9ca:	46c0      	nop			; (mov r8, r8)
 800c9cc:	200014c8 	.word	0x200014c8
 800c9d0:	08013d3c 	.word	0x08013d3c
 800c9d4:	08013ccc 	.word	0x08013ccc
 800c9d8:	20001288 	.word	0x20001288
 800c9dc:	08013d4c 	.word	0x08013d4c

0800c9e0 <MQTT_Ping_F>:

void MQTT_Ping_F(){
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	af00      	add	r7, sp, #0
	Debug_Send("Build ping msg\r\n");
 800c9e4:	4b0d      	ldr	r3, [pc, #52]	; (800ca1c <MQTT_Ping_F+0x3c>)
 800c9e6:	0018      	movs	r0, r3
 800c9e8:	f7fd fdc8 	bl	800a57c <Debug_Send>
	tempGPRS[0] = 0xC0;
 800c9ec:	4b0c      	ldr	r3, [pc, #48]	; (800ca20 <MQTT_Ping_F+0x40>)
 800c9ee:	22c0      	movs	r2, #192	; 0xc0
 800c9f0:	701a      	strb	r2, [r3, #0]
	tempGPRS[1] = 0x00;
 800c9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <MQTT_Ping_F+0x40>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	705a      	strb	r2, [r3, #1]

	mqttInfo.length = 2;
 800c9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ca24 <MQTT_Ping_F+0x44>)
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	609a      	str	r2, [r3, #8]
	tempGPRS[2] = 0x1A;
 800c9fe:	4b08      	ldr	r3, [pc, #32]	; (800ca20 <MQTT_Ping_F+0x40>)
 800ca00:	221a      	movs	r2, #26
 800ca02:	709a      	strb	r2, [r3, #2]
	tempGPRS[3] = 0x0D;
 800ca04:	4b06      	ldr	r3, [pc, #24]	; (800ca20 <MQTT_Ping_F+0x40>)
 800ca06:	220d      	movs	r2, #13
 800ca08:	70da      	strb	r2, [r3, #3]
	GSM_Send_Bin(tempGPRS, 4);
 800ca0a:	4b05      	ldr	r3, [pc, #20]	; (800ca20 <MQTT_Ping_F+0x40>)
 800ca0c:	2104      	movs	r1, #4
 800ca0e:	0018      	movs	r0, r3
 800ca10:	f7fd fd8e 	bl	800a530 <GSM_Send_Bin>
	//WifiState = IP_Send;
	//mqttFlag.publish = 1;
	//mqttFlag.send = 1;
	//GSM_Send_Bin(temp1, 14);
}
 800ca14:	46c0      	nop			; (mov r8, r8)
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	46c0      	nop			; (mov r8, r8)
 800ca1c:	08013d5c 	.word	0x08013d5c
 800ca20:	200014c8 	.word	0x200014c8
 800ca24:	20001288 	.word	0x20001288

0800ca28 <RelayOn>:
/* USER CODE BEGIN Includes */
#include "GSM.h"
//#include "motor.h"
/* USER CODE END Includes */

void RelayOn(){
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RelayOpen_GPIO_Port, RelayClose_Pin, GPIO_PIN_SET);
 800ca2c:	4b08      	ldr	r3, [pc, #32]	; (800ca50 <RelayOn+0x28>)
 800ca2e:	2201      	movs	r2, #1
 800ca30:	2120      	movs	r1, #32
 800ca32:	0018      	movs	r0, r3
 800ca34:	f001 fb8c 	bl	800e150 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800ca38:	2032      	movs	r0, #50	; 0x32
 800ca3a:	f001 f891 	bl	800db60 <HAL_Delay>
	HAL_GPIO_WritePin(RelayOpen_GPIO_Port, RelayClose_Pin, GPIO_PIN_RESET);
 800ca3e:	4b04      	ldr	r3, [pc, #16]	; (800ca50 <RelayOn+0x28>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	2120      	movs	r1, #32
 800ca44:	0018      	movs	r0, r3
 800ca46:	f001 fb83 	bl	800e150 <HAL_GPIO_WritePin>
}
 800ca4a:	46c0      	nop			; (mov r8, r8)
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	48000400 	.word	0x48000400

0800ca54 <RelayOff>:

void RelayOff(){
 800ca54:	b580      	push	{r7, lr}
 800ca56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RelayOpen_GPIO_Port, RelayOpen_Pin, GPIO_PIN_SET);
 800ca58:	4b08      	ldr	r3, [pc, #32]	; (800ca7c <RelayOff+0x28>)
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	2110      	movs	r1, #16
 800ca5e:	0018      	movs	r0, r3
 800ca60:	f001 fb76 	bl	800e150 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800ca64:	2032      	movs	r0, #50	; 0x32
 800ca66:	f001 f87b 	bl	800db60 <HAL_Delay>
	HAL_GPIO_WritePin(RelayOpen_GPIO_Port, RelayOpen_Pin, GPIO_PIN_RESET);
 800ca6a:	4b04      	ldr	r3, [pc, #16]	; (800ca7c <RelayOff+0x28>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	2110      	movs	r1, #16
 800ca70:	0018      	movs	r0, r3
 800ca72:	f001 fb6d 	bl	800e150 <HAL_GPIO_WritePin>
}
 800ca76:	46c0      	nop			; (mov r8, r8)
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	48000400 	.word	0x48000400

0800ca80 <byteCopy>:
		WifiState = Dial;
		Wifi_Init();
	}
}

int byteCopy(uint8_t *source, uint8_t *dest, uint8_t start, uint8_t stop){
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	0019      	movs	r1, r3
 800ca8c:	1dfb      	adds	r3, r7, #7
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	1dbb      	adds	r3, r7, #6
 800ca92:	1c0a      	adds	r2, r1, #0
 800ca94:	701a      	strb	r2, [r3, #0]
	 int val;
	 val = -1;
 800ca96:	2301      	movs	r3, #1
 800ca98:	425b      	negs	r3, r3
 800ca9a:	61bb      	str	r3, [r7, #24]
	 if (start > stop){
 800ca9c:	1dfa      	adds	r2, r7, #7
 800ca9e:	1dbb      	adds	r3, r7, #6
 800caa0:	7812      	ldrb	r2, [r2, #0]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d906      	bls.n	800cab6 <byteCopy+0x36>
		 Debug_Send("Index error\r\n");
 800caa8:	4b23      	ldr	r3, [pc, #140]	; (800cb38 <byteCopy+0xb8>)
 800caaa:	0018      	movs	r0, r3
 800caac:	f7fd fd66 	bl	800a57c <Debug_Send>
		 return -1;
 800cab0:	2301      	movs	r3, #1
 800cab2:	425b      	negs	r3, r3
 800cab4:	e03b      	b.n	800cb2e <byteCopy+0xae>
	 }
	 uint8_t difference;
	 uint8_t count;
	 uint8_t* source1;
	 difference = stop - start + 1;
 800cab6:	1dba      	adds	r2, r7, #6
 800cab8:	1dfb      	adds	r3, r7, #7
 800caba:	7812      	ldrb	r2, [r2, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	b2da      	uxtb	r2, r3
 800cac2:	2317      	movs	r3, #23
 800cac4:	18fb      	adds	r3, r7, r3
 800cac6:	3201      	adds	r2, #1
 800cac8:	701a      	strb	r2, [r3, #0]
	 source += start;
 800caca:	1dfb      	adds	r3, r7, #7
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	18d3      	adds	r3, r2, r3
 800cad2:	60fb      	str	r3, [r7, #12]
	 source1 = source;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	613b      	str	r3, [r7, #16]
	 source1 += start;
 800cad8:	1dfb      	adds	r3, r7, #7
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	18d3      	adds	r3, r2, r3
 800cae0:	613b      	str	r3, [r7, #16]
	 for (count = 0; count < difference; count++){
 800cae2:	231f      	movs	r3, #31
 800cae4:	18fb      	adds	r3, r7, r3
 800cae6:	2200      	movs	r2, #0
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	e00f      	b.n	800cb0c <byteCopy+0x8c>
		 *dest = *source;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	781a      	ldrb	r2, [r3, #0]
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	701a      	strb	r2, [r3, #0]
		 dest++;
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	3301      	adds	r3, #1
 800caf8:	60bb      	str	r3, [r7, #8]
		 source++;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	3301      	adds	r3, #1
 800cafe:	60fb      	str	r3, [r7, #12]
	 for (count = 0; count < difference; count++){
 800cb00:	211f      	movs	r1, #31
 800cb02:	187b      	adds	r3, r7, r1
 800cb04:	781a      	ldrb	r2, [r3, #0]
 800cb06:	187b      	adds	r3, r7, r1
 800cb08:	3201      	adds	r2, #1
 800cb0a:	701a      	strb	r2, [r3, #0]
 800cb0c:	231f      	movs	r3, #31
 800cb0e:	18fa      	adds	r2, r7, r3
 800cb10:	2317      	movs	r3, #23
 800cb12:	18fb      	adds	r3, r7, r3
 800cb14:	7812      	ldrb	r2, [r2, #0]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d3e7      	bcc.n	800caec <byteCopy+0x6c>
	 }
	 dest++;
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	60bb      	str	r3, [r7, #8]
	 *dest = 0;
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	2200      	movs	r2, #0
 800cb26:	701a      	strb	r2, [r3, #0]
	 //Debug_Send(dest);
	 //Debug_Send("\r\n");
	 val = 1;
 800cb28:	2301      	movs	r3, #1
 800cb2a:	61bb      	str	r3, [r7, #24]
	 return val;
 800cb2c:	69bb      	ldr	r3, [r7, #24]
}
 800cb2e:	0018      	movs	r0, r3
 800cb30:	46bd      	mov	sp, r7
 800cb32:	b008      	add	sp, #32
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	46c0      	nop			; (mov r8, r8)
 800cb38:	080140f0 	.word	0x080140f0

0800cb3c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	4a06      	ldr	r2, [pc, #24]	; (800cb64 <vApplicationGetIdleTaskMemory+0x28>)
 800cb4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	4a05      	ldr	r2, [pc, #20]	; (800cb68 <vApplicationGetIdleTaskMemory+0x2c>)
 800cb52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2280      	movs	r2, #128	; 0x80
 800cb58:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800cb5a:	46c0      	nop			; (mov r8, r8)
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	b004      	add	sp, #16
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	46c0      	nop			; (mov r8, r8)
 800cb64:	20000188 	.word	0x20000188
 800cb68:	200001dc 	.word	0x200001dc

0800cb6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cb6c:	b5b0      	push	{r4, r5, r7, lr}
 800cb6e:	b08e      	sub	sp, #56	; 0x38
 800cb70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	remap();
 800cb72:	f000 fa05 	bl	800cf80 <remap>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cb76:	f000 ff8f 	bl	800da98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cb7a:	f000 f859 	bl	800cc30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cb7e:	f000 f96f 	bl	800ce60 <MX_GPIO_Init>
  MX_SPI2_Init();
 800cb82:	f000 f8ad 	bl	800cce0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800cb86:	f000 f8e9 	bl	800cd5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800cb8a:	f000 f917 	bl	800cdbc <MX_USART2_UART_Init>
  MX_WWDG_Init();
 800cb8e:	f000 f945 	bl	800ce1c <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin,GPIO_PIN_SET);
 800cb92:	2380      	movs	r3, #128	; 0x80
 800cb94:	0059      	lsls	r1, r3, #1
 800cb96:	2390      	movs	r3, #144	; 0x90
 800cb98:	05db      	lsls	r3, r3, #23
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	0018      	movs	r0, r3
 800cb9e:	f001 fad7 	bl	800e150 <HAL_GPIO_WritePin>
  //MQTT_Init();
  GSM_Init();
 800cba2:	f7fc fb6b 	bl	800927c <GSM_Init>
  //Wifi_Init();
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);		//wifi enable
 800cba6:	2380      	movs	r3, #128	; 0x80
 800cba8:	01db      	lsls	r3, r3, #7
 800cbaa:	481b      	ldr	r0, [pc, #108]	; (800cc18 <main+0xac>)
 800cbac:	2201      	movs	r2, #1
 800cbae:	0019      	movs	r1, r3
 800cbb0:	f001 face 	bl	800e150 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin,GPIO_PIN_SET);
 800cbb4:	2380      	movs	r3, #128	; 0x80
 800cbb6:	005b      	lsls	r3, r3, #1
 800cbb8:	4818      	ldr	r0, [pc, #96]	; (800cc1c <main+0xb0>)
 800cbba:	2201      	movs	r2, #1
 800cbbc:	0019      	movs	r1, r3
 800cbbe:	f001 fac7 	bl	800e150 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin,GPIO_PIN_SET);
 800cbc2:	4b16      	ldr	r3, [pc, #88]	; (800cc1c <main+0xb0>)
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	2108      	movs	r1, #8
 800cbc8:	0018      	movs	r0, r3
 800cbca:	f001 fac1 	bl	800e150 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800cbce:	211c      	movs	r1, #28
 800cbd0:	187b      	adds	r3, r7, r1
 800cbd2:	4a13      	ldr	r2, [pc, #76]	; (800cc20 <main+0xb4>)
 800cbd4:	ca31      	ldmia	r2!, {r0, r4, r5}
 800cbd6:	c331      	stmia	r3!, {r0, r4, r5}
 800cbd8:	ca31      	ldmia	r2!, {r0, r4, r5}
 800cbda:	c331      	stmia	r3!, {r0, r4, r5}
 800cbdc:	6812      	ldr	r2, [r2, #0]
 800cbde:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800cbe0:	187b      	adds	r3, r7, r1
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	0018      	movs	r0, r3
 800cbe6:	f004 fbe3 	bl	80113b0 <osThreadCreate>
 800cbea:	0002      	movs	r2, r0
 800cbec:	4b0d      	ldr	r3, [pc, #52]	; (800cc24 <main+0xb8>)
 800cbee:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800cbf0:	003b      	movs	r3, r7
 800cbf2:	4a0d      	ldr	r2, [pc, #52]	; (800cc28 <main+0xbc>)
 800cbf4:	ca13      	ldmia	r2!, {r0, r1, r4}
 800cbf6:	c313      	stmia	r3!, {r0, r1, r4}
 800cbf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 800cbfa:	c313      	stmia	r3!, {r0, r1, r4}
 800cbfc:	6812      	ldr	r2, [r2, #0]
 800cbfe:	601a      	str	r2, [r3, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800cc00:	003b      	movs	r3, r7
 800cc02:	2100      	movs	r1, #0
 800cc04:	0018      	movs	r0, r3
 800cc06:	f004 fbd3 	bl	80113b0 <osThreadCreate>
 800cc0a:	0002      	movs	r2, r0
 800cc0c:	4b07      	ldr	r3, [pc, #28]	; (800cc2c <main+0xc0>)
 800cc0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800cc10:	f004 fbc6 	bl	80113a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800cc14:	e7fe      	b.n	800cc14 <main+0xa8>
 800cc16:	46c0      	nop			; (mov r8, r8)
 800cc18:	48000800 	.word	0x48000800
 800cc1c:	48000400 	.word	0x48000400
 800cc20:	08014138 	.word	0x08014138
 800cc24:	20002178 	.word	0x20002178
 800cc28:	08014154 	.word	0x08014154
 800cc2c:	20002264 	.word	0x20002264

0800cc30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cc30:	b590      	push	{r4, r7, lr}
 800cc32:	b099      	sub	sp, #100	; 0x64
 800cc34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cc36:	242c      	movs	r4, #44	; 0x2c
 800cc38:	193b      	adds	r3, r7, r4
 800cc3a:	0018      	movs	r0, r3
 800cc3c:	2334      	movs	r3, #52	; 0x34
 800cc3e:	001a      	movs	r2, r3
 800cc40:	2100      	movs	r1, #0
 800cc42:	f005 fc8c 	bl	801255e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cc46:	231c      	movs	r3, #28
 800cc48:	18fb      	adds	r3, r7, r3
 800cc4a:	0018      	movs	r0, r3
 800cc4c:	2310      	movs	r3, #16
 800cc4e:	001a      	movs	r2, r3
 800cc50:	2100      	movs	r1, #0
 800cc52:	f005 fc84 	bl	801255e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cc56:	003b      	movs	r3, r7
 800cc58:	0018      	movs	r0, r3
 800cc5a:	231c      	movs	r3, #28
 800cc5c:	001a      	movs	r2, r3
 800cc5e:	2100      	movs	r1, #0
 800cc60:	f005 fc7d 	bl	801255e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800cc64:	193b      	adds	r3, r7, r4
 800cc66:	2220      	movs	r2, #32
 800cc68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800cc6a:	193b      	adds	r3, r7, r4
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800cc70:	193b      	adds	r3, r7, r4
 800cc72:	2200      	movs	r2, #0
 800cc74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cc76:	193b      	adds	r3, r7, r4
 800cc78:	0018      	movs	r0, r3
 800cc7a:	f001 faa1 	bl	800e1c0 <HAL_RCC_OscConfig>
 800cc7e:	1e03      	subs	r3, r0, #0
 800cc80:	d001      	beq.n	800cc86 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800cc82:	f000 fb3f 	bl	800d304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cc86:	211c      	movs	r1, #28
 800cc88:	187b      	adds	r3, r7, r1
 800cc8a:	2207      	movs	r2, #7
 800cc8c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800cc8e:	187b      	adds	r3, r7, r1
 800cc90:	2203      	movs	r2, #3
 800cc92:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cc94:	187b      	adds	r3, r7, r1
 800cc96:	2200      	movs	r2, #0
 800cc98:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800cc9a:	187b      	adds	r3, r7, r1
 800cc9c:	2280      	movs	r2, #128	; 0x80
 800cc9e:	00d2      	lsls	r2, r2, #3
 800cca0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800cca2:	187b      	adds	r3, r7, r1
 800cca4:	2101      	movs	r1, #1
 800cca6:	0018      	movs	r0, r3
 800cca8:	f001 fe10 	bl	800e8cc <HAL_RCC_ClockConfig>
 800ccac:	1e03      	subs	r3, r0, #0
 800ccae:	d001      	beq.n	800ccb4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800ccb0:	f000 fb28 	bl	800d304 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 800ccb4:	003b      	movs	r3, r7
 800ccb6:	2203      	movs	r2, #3
 800ccb8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800ccba:	003b      	movs	r3, r7
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ccc0:	003b      	movs	r3, r7
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ccc6:	003b      	movs	r3, r7
 800ccc8:	0018      	movs	r0, r3
 800ccca:	f001 ff79 	bl	800ebc0 <HAL_RCCEx_PeriphCLKConfig>
 800ccce:	1e03      	subs	r3, r0, #0
 800ccd0:	d001      	beq.n	800ccd6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800ccd2:	f000 fb17 	bl	800d304 <Error_Handler>
  }
}
 800ccd6:	46c0      	nop			; (mov r8, r8)
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	b019      	add	sp, #100	; 0x64
 800ccdc:	bd90      	pop	{r4, r7, pc}
	...

0800cce0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800cce4:	4b1b      	ldr	r3, [pc, #108]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cce6:	4a1c      	ldr	r2, [pc, #112]	; (800cd58 <MX_SPI2_Init+0x78>)
 800cce8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800ccea:	4b1a      	ldr	r3, [pc, #104]	; (800cd54 <MX_SPI2_Init+0x74>)
 800ccec:	2282      	movs	r2, #130	; 0x82
 800ccee:	0052      	lsls	r2, r2, #1
 800ccf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800ccf2:	4b18      	ldr	r3, [pc, #96]	; (800cd54 <MX_SPI2_Init+0x74>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800ccf8:	4b16      	ldr	r3, [pc, #88]	; (800cd54 <MX_SPI2_Init+0x74>)
 800ccfa:	22e0      	movs	r2, #224	; 0xe0
 800ccfc:	00d2      	lsls	r2, r2, #3
 800ccfe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800cd00:	4b14      	ldr	r3, [pc, #80]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800cd06:	4b13      	ldr	r3, [pc, #76]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800cd0c:	4b11      	ldr	r3, [pc, #68]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd0e:	2280      	movs	r2, #128	; 0x80
 800cd10:	0092      	lsls	r2, r2, #2
 800cd12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800cd14:	4b0f      	ldr	r3, [pc, #60]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd16:	2220      	movs	r2, #32
 800cd18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800cd1a:	4b0e      	ldr	r3, [pc, #56]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800cd20:	4b0c      	ldr	r3, [pc, #48]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cd26:	4b0b      	ldr	r3, [pc, #44]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800cd2c:	4b09      	ldr	r3, [pc, #36]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd2e:	2207      	movs	r2, #7
 800cd30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800cd32:	4b08      	ldr	r3, [pc, #32]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800cd38:	4b06      	ldr	r3, [pc, #24]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd3a:	2208      	movs	r2, #8
 800cd3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800cd3e:	4b05      	ldr	r3, [pc, #20]	; (800cd54 <MX_SPI2_Init+0x74>)
 800cd40:	0018      	movs	r0, r3
 800cd42:	f002 f83b 	bl	800edbc <HAL_SPI_Init>
 800cd46:	1e03      	subs	r3, r0, #0
 800cd48:	d001      	beq.n	800cd4e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800cd4a:	f000 fadb 	bl	800d304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800cd4e:	46c0      	nop			; (mov r8, r8)
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	2000217c 	.word	0x2000217c
 800cd58:	40003800 	.word	0x40003800

0800cd5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800cd60:	4b14      	ldr	r3, [pc, #80]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cd62:	4a15      	ldr	r2, [pc, #84]	; (800cdb8 <MX_USART1_UART_Init+0x5c>)
 800cd64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800cd66:	4b13      	ldr	r3, [pc, #76]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cd68:	22e1      	movs	r2, #225	; 0xe1
 800cd6a:	0252      	lsls	r2, r2, #9
 800cd6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cd6e:	4b11      	ldr	r3, [pc, #68]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cd74:	4b0f      	ldr	r3, [pc, #60]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cd7a:	4b0e      	ldr	r3, [pc, #56]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cd80:	4b0c      	ldr	r3, [pc, #48]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cd82:	220c      	movs	r2, #12
 800cd84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cd86:	4b0b      	ldr	r3, [pc, #44]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cd8c:	4b09      	ldr	r3, [pc, #36]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cd92:	4b08      	ldr	r3, [pc, #32]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cd98:	4b06      	ldr	r3, [pc, #24]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cd9e:	4b05      	ldr	r3, [pc, #20]	; (800cdb4 <MX_USART1_UART_Init+0x58>)
 800cda0:	0018      	movs	r0, r3
 800cda2:	f002 ff0d 	bl	800fbc0 <HAL_UART_Init>
 800cda6:	1e03      	subs	r3, r0, #0
 800cda8:	d001      	beq.n	800cdae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800cdaa:	f000 faab 	bl	800d304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800cdae:	46c0      	nop			; (mov r8, r8)
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	200021e0 	.word	0x200021e0
 800cdb8:	40013800 	.word	0x40013800

0800cdbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800cdc0:	4b14      	ldr	r3, [pc, #80]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800cdc2:	4a15      	ldr	r2, [pc, #84]	; (800ce18 <MX_USART2_UART_Init+0x5c>)
 800cdc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800cdc6:	4b13      	ldr	r3, [pc, #76]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800cdc8:	22e1      	movs	r2, #225	; 0xe1
 800cdca:	0252      	lsls	r2, r2, #9
 800cdcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cdce:	4b11      	ldr	r3, [pc, #68]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800cdd4:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800cdda:	4b0e      	ldr	r3, [pc, #56]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800cde0:	4b0c      	ldr	r3, [pc, #48]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800cde2:	220c      	movs	r2, #12
 800cde4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cde6:	4b0b      	ldr	r3, [pc, #44]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800cdec:	4b09      	ldr	r3, [pc, #36]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800cdee:	2200      	movs	r2, #0
 800cdf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cdf2:	4b08      	ldr	r3, [pc, #32]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cdf8:	4b06      	ldr	r3, [pc, #24]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800cdfe:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <MX_USART2_UART_Init+0x58>)
 800ce00:	0018      	movs	r0, r3
 800ce02:	f002 fedd 	bl	800fbc0 <HAL_UART_Init>
 800ce06:	1e03      	subs	r3, r0, #0
 800ce08:	d001      	beq.n	800ce0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800ce0a:	f000 fa7b 	bl	800d304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ce0e:	46c0      	nop			; (mov r8, r8)
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	2000227c 	.word	0x2000227c
 800ce18:	40004400 	.word	0x40004400

0800ce1c <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 800ce20:	4b0d      	ldr	r3, [pc, #52]	; (800ce58 <MX_WWDG_Init+0x3c>)
 800ce22:	4a0e      	ldr	r2, [pc, #56]	; (800ce5c <MX_WWDG_Init+0x40>)
 800ce24:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 800ce26:	4b0c      	ldr	r3, [pc, #48]	; (800ce58 <MX_WWDG_Init+0x3c>)
 800ce28:	22c0      	movs	r2, #192	; 0xc0
 800ce2a:	0052      	lsls	r2, r2, #1
 800ce2c:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 126;
 800ce2e:	4b0a      	ldr	r3, [pc, #40]	; (800ce58 <MX_WWDG_Init+0x3c>)
 800ce30:	227e      	movs	r2, #126	; 0x7e
 800ce32:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 800ce34:	4b08      	ldr	r3, [pc, #32]	; (800ce58 <MX_WWDG_Init+0x3c>)
 800ce36:	227f      	movs	r2, #127	; 0x7f
 800ce38:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800ce3a:	4b07      	ldr	r3, [pc, #28]	; (800ce58 <MX_WWDG_Init+0x3c>)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 800ce40:	4b05      	ldr	r3, [pc, #20]	; (800ce58 <MX_WWDG_Init+0x3c>)
 800ce42:	0018      	movs	r0, r3
 800ce44:	f004 fa60 	bl	8011308 <HAL_WWDG_Init>
 800ce48:	1e03      	subs	r3, r0, #0
 800ce4a:	d001      	beq.n	800ce50 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 800ce4c:	f000 fa5a 	bl	800d304 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 800ce50:	46c0      	nop			; (mov r8, r8)
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	46c0      	nop			; (mov r8, r8)
 800ce58:	20002268 	.word	0x20002268
 800ce5c:	40002c00 	.word	0x40002c00

0800ce60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ce60:	b590      	push	{r4, r7, lr}
 800ce62:	b089      	sub	sp, #36	; 0x24
 800ce64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce66:	240c      	movs	r4, #12
 800ce68:	193b      	adds	r3, r7, r4
 800ce6a:	0018      	movs	r0, r3
 800ce6c:	2314      	movs	r3, #20
 800ce6e:	001a      	movs	r2, r3
 800ce70:	2100      	movs	r1, #0
 800ce72:	f005 fb74 	bl	801255e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ce76:	4b3e      	ldr	r3, [pc, #248]	; (800cf70 <MX_GPIO_Init+0x110>)
 800ce78:	695a      	ldr	r2, [r3, #20]
 800ce7a:	4b3d      	ldr	r3, [pc, #244]	; (800cf70 <MX_GPIO_Init+0x110>)
 800ce7c:	2180      	movs	r1, #128	; 0x80
 800ce7e:	0309      	lsls	r1, r1, #12
 800ce80:	430a      	orrs	r2, r1
 800ce82:	615a      	str	r2, [r3, #20]
 800ce84:	4b3a      	ldr	r3, [pc, #232]	; (800cf70 <MX_GPIO_Init+0x110>)
 800ce86:	695a      	ldr	r2, [r3, #20]
 800ce88:	2380      	movs	r3, #128	; 0x80
 800ce8a:	031b      	lsls	r3, r3, #12
 800ce8c:	4013      	ands	r3, r2
 800ce8e:	60bb      	str	r3, [r7, #8]
 800ce90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce92:	4b37      	ldr	r3, [pc, #220]	; (800cf70 <MX_GPIO_Init+0x110>)
 800ce94:	695a      	ldr	r2, [r3, #20]
 800ce96:	4b36      	ldr	r3, [pc, #216]	; (800cf70 <MX_GPIO_Init+0x110>)
 800ce98:	2180      	movs	r1, #128	; 0x80
 800ce9a:	0289      	lsls	r1, r1, #10
 800ce9c:	430a      	orrs	r2, r1
 800ce9e:	615a      	str	r2, [r3, #20]
 800cea0:	4b33      	ldr	r3, [pc, #204]	; (800cf70 <MX_GPIO_Init+0x110>)
 800cea2:	695a      	ldr	r2, [r3, #20]
 800cea4:	2380      	movs	r3, #128	; 0x80
 800cea6:	029b      	lsls	r3, r3, #10
 800cea8:	4013      	ands	r3, r2
 800ceaa:	607b      	str	r3, [r7, #4]
 800ceac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ceae:	4b30      	ldr	r3, [pc, #192]	; (800cf70 <MX_GPIO_Init+0x110>)
 800ceb0:	695a      	ldr	r2, [r3, #20]
 800ceb2:	4b2f      	ldr	r3, [pc, #188]	; (800cf70 <MX_GPIO_Init+0x110>)
 800ceb4:	2180      	movs	r1, #128	; 0x80
 800ceb6:	02c9      	lsls	r1, r1, #11
 800ceb8:	430a      	orrs	r2, r1
 800ceba:	615a      	str	r2, [r3, #20]
 800cebc:	4b2c      	ldr	r3, [pc, #176]	; (800cf70 <MX_GPIO_Init+0x110>)
 800cebe:	695a      	ldr	r2, [r3, #20]
 800cec0:	2380      	movs	r3, #128	; 0x80
 800cec2:	02db      	lsls	r3, r3, #11
 800cec4:	4013      	ands	r3, r2
 800cec6:	603b      	str	r3, [r7, #0]
 800cec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|GSM_Enable_Pin, GPIO_PIN_RESET);
 800ceca:	23e0      	movs	r3, #224	; 0xe0
 800cecc:	021b      	lsls	r3, r3, #8
 800cece:	4829      	ldr	r0, [pc, #164]	; (800cf74 <MX_GPIO_Init+0x114>)
 800ced0:	2200      	movs	r2, #0
 800ced2:	0019      	movs	r1, r3
 800ced4:	f001 f93c 	bl	800e150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GSM_On_Pin|Buzzer_Pin|LED5_Pin|RelayOpen_Pin
 800ced8:	4927      	ldr	r1, [pc, #156]	; (800cf78 <MX_GPIO_Init+0x118>)
 800ceda:	4b28      	ldr	r3, [pc, #160]	; (800cf7c <MX_GPIO_Init+0x11c>)
 800cedc:	2200      	movs	r2, #0
 800cede:	0018      	movs	r0, r3
 800cee0:	f001 f936 	bl	800e150 <HAL_GPIO_WritePin>
                          |RelayClose_Pin|LED4_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|Sensor2_Pin|Sensor1_Pin, GPIO_PIN_RESET);
 800cee4:	2392      	movs	r3, #146	; 0x92
 800cee6:	01d9      	lsls	r1, r3, #7
 800cee8:	2390      	movs	r3, #144	; 0x90
 800ceea:	05db      	lsls	r3, r3, #23
 800ceec:	2200      	movs	r2, #0
 800ceee:	0018      	movs	r0, r3
 800cef0:	f001 f92e 	bl	800e150 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin GSM_Enable_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GSM_Enable_Pin;
 800cef4:	193b      	adds	r3, r7, r4
 800cef6:	22e0      	movs	r2, #224	; 0xe0
 800cef8:	0212      	lsls	r2, r2, #8
 800cefa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cefc:	193b      	adds	r3, r7, r4
 800cefe:	2201      	movs	r2, #1
 800cf00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf02:	193b      	adds	r3, r7, r4
 800cf04:	2200      	movs	r2, #0
 800cf06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf08:	193b      	adds	r3, r7, r4
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf0e:	193b      	adds	r3, r7, r4
 800cf10:	4a18      	ldr	r2, [pc, #96]	; (800cf74 <MX_GPIO_Init+0x114>)
 800cf12:	0019      	movs	r1, r3
 800cf14:	0010      	movs	r0, r2
 800cf16:	f000 ffa3 	bl	800de60 <HAL_GPIO_Init>

  /*Configure GPIO pins : GSM_On_Pin Buzzer_Pin LED5_Pin RelayOpen_Pin
                           RelayClose_Pin LED4_Pin LED3_Pin */
  GPIO_InitStruct.Pin = GSM_On_Pin|Buzzer_Pin|LED5_Pin|RelayOpen_Pin
 800cf1a:	193b      	adds	r3, r7, r4
 800cf1c:	4a16      	ldr	r2, [pc, #88]	; (800cf78 <MX_GPIO_Init+0x118>)
 800cf1e:	601a      	str	r2, [r3, #0]
                          |RelayClose_Pin|LED4_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cf20:	193b      	adds	r3, r7, r4
 800cf22:	2201      	movs	r2, #1
 800cf24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf26:	193b      	adds	r3, r7, r4
 800cf28:	2200      	movs	r2, #0
 800cf2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf2c:	193b      	adds	r3, r7, r4
 800cf2e:	2200      	movs	r2, #0
 800cf30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf32:	193b      	adds	r3, r7, r4
 800cf34:	4a11      	ldr	r2, [pc, #68]	; (800cf7c <MX_GPIO_Init+0x11c>)
 800cf36:	0019      	movs	r1, r3
 800cf38:	0010      	movs	r0, r2
 800cf3a:	f000 ff91 	bl	800de60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin Sensor2_Pin Sensor1_Pin */
  GPIO_InitStruct.Pin = CS_Pin|Sensor2_Pin|Sensor1_Pin;
 800cf3e:	0021      	movs	r1, r4
 800cf40:	187b      	adds	r3, r7, r1
 800cf42:	2292      	movs	r2, #146	; 0x92
 800cf44:	01d2      	lsls	r2, r2, #7
 800cf46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cf48:	187b      	adds	r3, r7, r1
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf4e:	187b      	adds	r3, r7, r1
 800cf50:	2200      	movs	r2, #0
 800cf52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf54:	187b      	adds	r3, r7, r1
 800cf56:	2200      	movs	r2, #0
 800cf58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf5a:	187a      	adds	r2, r7, r1
 800cf5c:	2390      	movs	r3, #144	; 0x90
 800cf5e:	05db      	lsls	r3, r3, #23
 800cf60:	0011      	movs	r1, r2
 800cf62:	0018      	movs	r0, r3
 800cf64:	f000 ff7c 	bl	800de60 <HAL_GPIO_Init>

}
 800cf68:	46c0      	nop			; (mov r8, r8)
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	b009      	add	sp, #36	; 0x24
 800cf6e:	bd90      	pop	{r4, r7, pc}
 800cf70:	40021000 	.word	0x40021000
 800cf74:	48000800 	.word	0x48000800
 800cf78:	0000133c 	.word	0x0000133c
 800cf7c:	48000400 	.word	0x48000400

0800cf80 <remap>:
	 //Debug_Send(flash);
	 Debug_Send("\r\n");

 }*/

void remap(){
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
	 // Copy interrupt vector table to the RAM.
	 volatile uint32_t *VectorTable = (volatile uint32_t *)0x20000000;
 800cf86:	2380      	movs	r3, #128	; 0x80
 800cf88:	059b      	lsls	r3, r3, #22
 800cf8a:	60bb      	str	r3, [r7, #8]
	 uint32_t ui32_VectorIndex = 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	60fb      	str	r3, [r7, #12]

	 for(ui32_VectorIndex = 0; ui32_VectorIndex < 48; ui32_VectorIndex++)
 800cf90:	2300      	movs	r3, #0
 800cf92:	60fb      	str	r3, [r7, #12]
 800cf94:	e00e      	b.n	800cfb4 <remap+0x34>
	 {
		 VectorTable[ui32_VectorIndex] = *(__IO uint32_t*)((uint32_t) 0x8009000 + (ui32_VectorIndex << 2));
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4a1c      	ldr	r2, [pc, #112]	; (800d00c <remap+0x8c>)
 800cf9c:	4694      	mov	ip, r2
 800cf9e:	4463      	add	r3, ip
 800cfa0:	001a      	movs	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	68b9      	ldr	r1, [r7, #8]
 800cfa8:	18cb      	adds	r3, r1, r3
 800cfaa:	6812      	ldr	r2, [r2, #0]
 800cfac:	601a      	str	r2, [r3, #0]
	 for(ui32_VectorIndex = 0; ui32_VectorIndex < 48; ui32_VectorIndex++)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	60fb      	str	r3, [r7, #12]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2b2f      	cmp	r3, #47	; 0x2f
 800cfb8:	d9ed      	bls.n	800cf96 <remap+0x16>
	 }

	 __HAL_RCC_AHB_FORCE_RESET();
 800cfba:	4b15      	ldr	r3, [pc, #84]	; (800d010 <remap+0x90>)
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	4252      	negs	r2, r2
 800cfc0:	629a      	str	r2, [r3, #40]	; 0x28

	 //  Enable SYSCFG peripheral clock
	 __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cfc2:	4b13      	ldr	r3, [pc, #76]	; (800d010 <remap+0x90>)
 800cfc4:	699a      	ldr	r2, [r3, #24]
 800cfc6:	4b12      	ldr	r3, [pc, #72]	; (800d010 <remap+0x90>)
 800cfc8:	2101      	movs	r1, #1
 800cfca:	430a      	orrs	r2, r1
 800cfcc:	619a      	str	r2, [r3, #24]
 800cfce:	4b10      	ldr	r3, [pc, #64]	; (800d010 <remap+0x90>)
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	4013      	ands	r3, r2
 800cfd6:	607b      	str	r3, [r7, #4]
 800cfd8:	687b      	ldr	r3, [r7, #4]

	 __HAL_RCC_AHB_RELEASE_RESET();
 800cfda:	4b0d      	ldr	r3, [pc, #52]	; (800d010 <remap+0x90>)
 800cfdc:	2200      	movs	r2, #0
 800cfde:	629a      	str	r2, [r3, #40]	; 0x28

	 // Remap RAM into 0x0000 0000
	 __HAL_SYSCFG_REMAPMEMORY_SRAM();
 800cfe0:	4b0c      	ldr	r3, [pc, #48]	; (800d014 <remap+0x94>)
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	4b0b      	ldr	r3, [pc, #44]	; (800d014 <remap+0x94>)
 800cfe6:	2103      	movs	r1, #3
 800cfe8:	438a      	bics	r2, r1
 800cfea:	601a      	str	r2, [r3, #0]
 800cfec:	4b09      	ldr	r3, [pc, #36]	; (800d014 <remap+0x94>)
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	4b08      	ldr	r3, [pc, #32]	; (800d014 <remap+0x94>)
 800cff2:	2103      	movs	r1, #3
 800cff4:	430a      	orrs	r2, r1
 800cff6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800cff8:	b662      	cpsie	i
}
 800cffa:	46c0      	nop			; (mov r8, r8)

	 __enable_irq();
	 Debug_Send("test Vector table remapped\r\n");
 800cffc:	4b06      	ldr	r3, [pc, #24]	; (800d018 <remap+0x98>)
 800cffe:	0018      	movs	r0, r3
 800d000:	f7fd fabc 	bl	800a57c <Debug_Send>
}
 800d004:	46c0      	nop			; (mov r8, r8)
 800d006:	46bd      	mov	sp, r7
 800d008:	b004      	add	sp, #16
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	08009000 	.word	0x08009000
 800d010:	40021000 	.word	0x40021000
 800d014:	40010000 	.word	0x40010000
 800d018:	08014170 	.word	0x08014170

0800d01c <flashPut>:

void flashPut(uint32_t p_addr,char* data, uint32_t size){
 800d01c:	b590      	push	{r4, r7, lr}
 800d01e:	b08d      	sub	sp, #52	; 0x34
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
	 unsigned char temp[30];
	 Debug_Send("Flash write: ");
 800d028:	4b3c      	ldr	r3, [pc, #240]	; (800d11c <flashPut+0x100>)
 800d02a:	0018      	movs	r0, r3
 800d02c:	f7fd faa6 	bl	800a57c <Debug_Send>
	 /*Debug_Send(data);
	 if(data[0] == 0x0a) Debug_Send("a");
	 if(*data == 0x0a) Debug_Send("A");
	 if(data[0] == 0x0d) Debug_Send("d");
	 if(*data == 0x0d) Debug_Send("D");*/
	 Debug_Send(" at: ");
 800d030:	4b3b      	ldr	r3, [pc, #236]	; (800d120 <flashPut+0x104>)
 800d032:	0018      	movs	r0, r3
 800d034:	f7fd faa2 	bl	800a57c <Debug_Send>
	 myLongStr(p_addr,temp,10,10);
 800d038:	2410      	movs	r4, #16
 800d03a:	1939      	adds	r1, r7, r4
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	230a      	movs	r3, #10
 800d040:	220a      	movs	r2, #10
 800d042:	f000 f9f9 	bl	800d438 <myLongStr>
	 Debug_Send(temp);
 800d046:	193b      	adds	r3, r7, r4
 800d048:	0018      	movs	r0, r3
 800d04a:	f7fd fa97 	bl	800a57c <Debug_Send>
	 Debug_Send(" , ");
 800d04e:	4b35      	ldr	r3, [pc, #212]	; (800d124 <flashPut+0x108>)
 800d050:	0018      	movs	r0, r3
 800d052:	f7fd fa93 	bl	800a57c <Debug_Send>
	 myLongStr(size,temp,10,10);
 800d056:	1939      	adds	r1, r7, r4
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	230a      	movs	r3, #10
 800d05c:	220a      	movs	r2, #10
 800d05e:	f000 f9eb 	bl	800d438 <myLongStr>
	 Debug_Send(temp);
 800d062:	193b      	adds	r3, r7, r4
 800d064:	0018      	movs	r0, r3
 800d066:	f7fd fa89 	bl	800a57c <Debug_Send>
	 Debug_Send("\r\n");
 800d06a:	4b2f      	ldr	r3, [pc, #188]	; (800d128 <flashPut+0x10c>)
 800d06c:	0018      	movs	r0, r3
 800d06e:	f7fd fa85 	bl	800a57c <Debug_Send>
	 flashBusy();
 800d072:	f000 f8f1 	bl	800d258 <flashBusy>
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);	//set write enable flag
 800d076:	2380      	movs	r3, #128	; 0x80
 800d078:	0059      	lsls	r1, r3, #1
 800d07a:	2390      	movs	r3, #144	; 0x90
 800d07c:	05db      	lsls	r3, r3, #23
 800d07e:	2200      	movs	r2, #0
 800d080:	0018      	movs	r0, r3
 800d082:	f001 f865 	bl	800e150 <HAL_GPIO_WritePin>
	 temp[0] = M95_WRITE_EN;
 800d086:	193b      	adds	r3, r7, r4
 800d088:	2206      	movs	r2, #6
 800d08a:	701a      	strb	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi2,temp,1,100);
 800d08c:	1939      	adds	r1, r7, r4
 800d08e:	4827      	ldr	r0, [pc, #156]	; (800d12c <flashPut+0x110>)
 800d090:	2364      	movs	r3, #100	; 0x64
 800d092:	2201      	movs	r2, #1
 800d094:	f001 ff4a 	bl	800ef2c <HAL_SPI_Transmit>
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800d098:	2380      	movs	r3, #128	; 0x80
 800d09a:	0059      	lsls	r1, r3, #1
 800d09c:	2390      	movs	r3, #144	; 0x90
 800d09e:	05db      	lsls	r3, r3, #23
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	0018      	movs	r0, r3
 800d0a4:	f001 f854 	bl	800e150 <HAL_GPIO_WritePin>
	 HAL_Delay(1);
 800d0a8:	2001      	movs	r0, #1
 800d0aa:	f000 fd59 	bl	800db60 <HAL_Delay>

	 //uint32_t p_addr = 30;

	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);	//load address
 800d0ae:	2380      	movs	r3, #128	; 0x80
 800d0b0:	0059      	lsls	r1, r3, #1
 800d0b2:	2390      	movs	r3, #144	; 0x90
 800d0b4:	05db      	lsls	r3, r3, #23
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	0018      	movs	r0, r3
 800d0ba:	f001 f849 	bl	800e150 <HAL_GPIO_WritePin>
	 temp[0] = M95_WRITE;
 800d0be:	193b      	adds	r3, r7, r4
 800d0c0:	2202      	movs	r2, #2
 800d0c2:	701a      	strb	r2, [r3, #0]
	 temp[1] = (p_addr>>16)&0xff;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	0c1b      	lsrs	r3, r3, #16
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	193b      	adds	r3, r7, r4
 800d0cc:	705a      	strb	r2, [r3, #1]
	 temp[2] = (p_addr>>8)&0xff;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	0a1b      	lsrs	r3, r3, #8
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	193b      	adds	r3, r7, r4
 800d0d6:	709a      	strb	r2, [r3, #2]
	 temp[3] = p_addr&0xff;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	b2da      	uxtb	r2, r3
 800d0dc:	193b      	adds	r3, r7, r4
 800d0de:	70da      	strb	r2, [r3, #3]

	 HAL_SPI_Transmit(&hspi2,temp,4,100);						//transmit address
 800d0e0:	1939      	adds	r1, r7, r4
 800d0e2:	4812      	ldr	r0, [pc, #72]	; (800d12c <flashPut+0x110>)
 800d0e4:	2364      	movs	r3, #100	; 0x64
 800d0e6:	2204      	movs	r2, #4
 800d0e8:	f001 ff20 	bl	800ef2c <HAL_SPI_Transmit>

	 temp[0] = 68;
 800d0ec:	193b      	adds	r3, r7, r4
 800d0ee:	2244      	movs	r2, #68	; 0x44
 800d0f0:	701a      	strb	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi2,data,size,100);						//transmit data
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	68b9      	ldr	r1, [r7, #8]
 800d0f8:	480c      	ldr	r0, [pc, #48]	; (800d12c <flashPut+0x110>)
 800d0fa:	2364      	movs	r3, #100	; 0x64
 800d0fc:	f001 ff16 	bl	800ef2c <HAL_SPI_Transmit>
	 HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800d100:	2380      	movs	r3, #128	; 0x80
 800d102:	0059      	lsls	r1, r3, #1
 800d104:	2390      	movs	r3, #144	; 0x90
 800d106:	05db      	lsls	r3, r3, #23
 800d108:	2201      	movs	r2, #1
 800d10a:	0018      	movs	r0, r3
 800d10c:	f001 f820 	bl	800e150 <HAL_GPIO_WritePin>

	 flashBusy();
 800d110:	f000 f8a2 	bl	800d258 <flashBusy>

}
 800d114:	46c0      	nop			; (mov r8, r8)
 800d116:	46bd      	mov	sp, r7
 800d118:	b00d      	add	sp, #52	; 0x34
 800d11a:	bd90      	pop	{r4, r7, pc}
 800d11c:	08014190 	.word	0x08014190
 800d120:	080141a0 	.word	0x080141a0
 800d124:	080141a8 	.word	0x080141a8
 800d128:	080141ac 	.word	0x080141ac
 800d12c:	2000217c 	.word	0x2000217c

0800d130 <flashWrite>:

void flashWrite( unsigned long p_addr,const char *p_buffer,unsigned short p_size){
 800d130:	b590      	push	{r4, r7, lr}
 800d132:	b087      	sub	sp, #28
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	1dbb      	adds	r3, r7, #6
 800d13c:	801a      	strh	r2, [r3, #0]
	//Flash_CS_Low();

	//myTRACE_Print(p_buffer);
	//myTRACE_Print(" p_buffer\n");
	//flash_struct.isBusy = 1;
	m95_size=p_size;
 800d13e:	2314      	movs	r3, #20
 800d140:	18fb      	adds	r3, r7, r3
 800d142:	1dba      	adds	r2, r7, #6
 800d144:	8812      	ldrh	r2, [r2, #0]
 800d146:	801a      	strh	r2, [r3, #0]
	//m95_tmp=p_addr/256;
	//m95_page_size=256-(p_addr-(m95_tmp*256));

	m95_page_size =256 - ( p_addr % 256);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	22ff      	movs	r2, #255	; 0xff
 800d14e:	4013      	ands	r3, r2
 800d150:	b29a      	uxth	r2, r3
 800d152:	2316      	movs	r3, #22
 800d154:	18fb      	adds	r3, r7, r3
 800d156:	2180      	movs	r1, #128	; 0x80
 800d158:	0049      	lsls	r1, r1, #1
 800d15a:	1a8a      	subs	r2, r1, r2
 800d15c:	801a      	strh	r2, [r3, #0]
	while(m95_size){
 800d15e:	e032      	b.n	800d1c6 <flashWrite+0x96>
		if(m95_size>m95_page_size)
 800d160:	2314      	movs	r3, #20
 800d162:	18fa      	adds	r2, r7, r3
 800d164:	2116      	movs	r1, #22
 800d166:	187b      	adds	r3, r7, r1
 800d168:	8812      	ldrh	r2, [r2, #0]
 800d16a:	881b      	ldrh	r3, [r3, #0]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d905      	bls.n	800d17c <flashWrite+0x4c>
			m95_write_size=m95_page_size;
 800d170:	2312      	movs	r3, #18
 800d172:	18fb      	adds	r3, r7, r3
 800d174:	187a      	adds	r2, r7, r1
 800d176:	8812      	ldrh	r2, [r2, #0]
 800d178:	801a      	strh	r2, [r3, #0]
 800d17a:	e005      	b.n	800d188 <flashWrite+0x58>
		else
			m95_write_size=m95_size;
 800d17c:	2312      	movs	r3, #18
 800d17e:	18fb      	adds	r3, r7, r3
 800d180:	2214      	movs	r2, #20
 800d182:	18ba      	adds	r2, r7, r2
 800d184:	8812      	ldrh	r2, [r2, #0]
 800d186:	801a      	strh	r2, [r3, #0]
		flashPut(p_addr,p_buffer,m95_write_size);
 800d188:	2412      	movs	r4, #18
 800d18a:	193b      	adds	r3, r7, r4
 800d18c:	881a      	ldrh	r2, [r3, #0]
 800d18e:	68b9      	ldr	r1, [r7, #8]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	0018      	movs	r0, r3
 800d194:	f7ff ff42 	bl	800d01c <flashPut>
		m95_size-=m95_write_size;
 800d198:	2214      	movs	r2, #20
 800d19a:	18bb      	adds	r3, r7, r2
 800d19c:	18b9      	adds	r1, r7, r2
 800d19e:	193a      	adds	r2, r7, r4
 800d1a0:	8809      	ldrh	r1, [r1, #0]
 800d1a2:	8812      	ldrh	r2, [r2, #0]
 800d1a4:	1a8a      	subs	r2, r1, r2
 800d1a6:	801a      	strh	r2, [r3, #0]
		p_buffer+=m95_write_size;
 800d1a8:	193b      	adds	r3, r7, r4
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	18d3      	adds	r3, r2, r3
 800d1b0:	60bb      	str	r3, [r7, #8]
		p_addr+=m95_write_size;
 800d1b2:	193b      	adds	r3, r7, r4
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	18d3      	adds	r3, r2, r3
 800d1ba:	60fb      	str	r3, [r7, #12]
		m95_page_size=256;
 800d1bc:	2316      	movs	r3, #22
 800d1be:	18fb      	adds	r3, r7, r3
 800d1c0:	2280      	movs	r2, #128	; 0x80
 800d1c2:	0052      	lsls	r2, r2, #1
 800d1c4:	801a      	strh	r2, [r3, #0]
	while(m95_size){
 800d1c6:	2314      	movs	r3, #20
 800d1c8:	18fb      	adds	r3, r7, r3
 800d1ca:	881b      	ldrh	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1c7      	bne.n	800d160 <flashWrite+0x30>
	}
	//flash_struct.isBusy = 0;
	//Flash_CS_Hi();

}
 800d1d0:	46c0      	nop			; (mov r8, r8)
 800d1d2:	46c0      	nop			; (mov r8, r8)
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	b007      	add	sp, #28
 800d1d8:	bd90      	pop	{r4, r7, pc}
	...

0800d1dc <flashRead>:

void flashRead(uint32_t p_addr, char* data, uint32_t size){
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b08a      	sub	sp, #40	; 0x28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
	 /*Debug_Send("Flash read at: ");
	 myLongStr(p_addr,temp,10,10);
	 Debug_Send(temp);
	 Debug_Send("\r\n");*/

	flashBusy();
 800d1e8:	f000 f836 	bl	800d258 <flashBusy>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800d1ec:	2380      	movs	r3, #128	; 0x80
 800d1ee:	0059      	lsls	r1, r3, #1
 800d1f0:	2390      	movs	r3, #144	; 0x90
 800d1f2:	05db      	lsls	r3, r3, #23
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	f000 ffaa 	bl	800e150 <HAL_GPIO_WritePin>
	//uint32_t p_addr = 30;
	 temp[0] = M95_READ;
 800d1fc:	2114      	movs	r1, #20
 800d1fe:	187b      	adds	r3, r7, r1
 800d200:	2203      	movs	r2, #3
 800d202:	701a      	strb	r2, [r3, #0]
	 temp[1] = (p_addr>>16)&0xff;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	0c1b      	lsrs	r3, r3, #16
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	187b      	adds	r3, r7, r1
 800d20c:	705a      	strb	r2, [r3, #1]
	 temp[2] = (p_addr>>8)&0xff;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	0a1b      	lsrs	r3, r3, #8
 800d212:	b2da      	uxtb	r2, r3
 800d214:	187b      	adds	r3, r7, r1
 800d216:	709a      	strb	r2, [r3, #2]
	 temp[3] = p_addr&0xff;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	187b      	adds	r3, r7, r1
 800d21e:	70da      	strb	r2, [r3, #3]

	HAL_SPI_Transmit(&hspi2,temp,4,100);
 800d220:	1879      	adds	r1, r7, r1
 800d222:	480c      	ldr	r0, [pc, #48]	; (800d254 <flashRead+0x78>)
 800d224:	2364      	movs	r3, #100	; 0x64
 800d226:	2204      	movs	r2, #4
 800d228:	f001 fe80 	bl	800ef2c <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi2,data,size,100);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	b29a      	uxth	r2, r3
 800d230:	68b9      	ldr	r1, [r7, #8]
 800d232:	4808      	ldr	r0, [pc, #32]	; (800d254 <flashRead+0x78>)
 800d234:	2364      	movs	r3, #100	; 0x64
 800d236:	f001 ffd1 	bl	800f1dc <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800d23a:	2380      	movs	r3, #128	; 0x80
 800d23c:	0059      	lsls	r1, r3, #1
 800d23e:	2390      	movs	r3, #144	; 0x90
 800d240:	05db      	lsls	r3, r3, #23
 800d242:	2201      	movs	r2, #1
 800d244:	0018      	movs	r0, r3
 800d246:	f000 ff83 	bl	800e150 <HAL_GPIO_WritePin>
	 Debug_Send(temp);
	 Debug_Send(" , ");
	 myLongStr(size,temp,10,10);
	 Debug_Send(temp);
	 Debug_Send("\r\n");*/
}
 800d24a:	46c0      	nop			; (mov r8, r8)
 800d24c:	46bd      	mov	sp, r7
 800d24e:	b00a      	add	sp, #40	; 0x28
 800d250:	bd80      	pop	{r7, pc}
 800d252:	46c0      	nop			; (mov r8, r8)
 800d254:	2000217c 	.word	0x2000217c

0800d258 <flashBusy>:

void flashBusy(){
 800d258:	b580      	push	{r7, lr}
 800d25a:	b086      	sub	sp, #24
 800d25c:	af00      	add	r7, sp, #0
	 char temp[20];
	 temp[0] = M95_STATUS;
 800d25e:	1d3b      	adds	r3, r7, #4
 800d260:	2205      	movs	r2, #5
 800d262:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800d264:	2380      	movs	r3, #128	; 0x80
 800d266:	0059      	lsls	r1, r3, #1
 800d268:	2390      	movs	r3, #144	; 0x90
 800d26a:	05db      	lsls	r3, r3, #23
 800d26c:	2200      	movs	r2, #0
 800d26e:	0018      	movs	r0, r3
 800d270:	f000 ff6e 	bl	800e150 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2,temp,1,100);
 800d274:	1d39      	adds	r1, r7, #4
 800d276:	4812      	ldr	r0, [pc, #72]	; (800d2c0 <flashBusy+0x68>)
 800d278:	2364      	movs	r3, #100	; 0x64
 800d27a:	2201      	movs	r2, #1
 800d27c:	f001 fe56 	bl	800ef2c <HAL_SPI_Transmit>
	//SPI_Write(M95_STATUS);
	HAL_SPI_Receive(&hspi2,temp,1,100);
 800d280:	1d39      	adds	r1, r7, #4
 800d282:	480f      	ldr	r0, [pc, #60]	; (800d2c0 <flashBusy+0x68>)
 800d284:	2364      	movs	r3, #100	; 0x64
 800d286:	2201      	movs	r2, #1
 800d288:	f001 ffa8 	bl	800f1dc <HAL_SPI_Receive>
	//m95_status=SPI_Write(0);
	while(temp[0]&0x01){
 800d28c:	e005      	b.n	800d29a <flashBusy+0x42>
		//SET_ROLL();
		//ROLL_UP();
		HAL_SPI_Receive(&hspi2,temp,1,100);
 800d28e:	1d39      	adds	r1, r7, #4
 800d290:	480b      	ldr	r0, [pc, #44]	; (800d2c0 <flashBusy+0x68>)
 800d292:	2364      	movs	r3, #100	; 0x64
 800d294:	2201      	movs	r2, #1
 800d296:	f001 ffa1 	bl	800f1dc <HAL_SPI_Receive>
	while(temp[0]&0x01){
 800d29a:	1d3b      	adds	r3, r7, #4
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	001a      	movs	r2, r3
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	d1f3      	bne.n	800d28e <flashBusy+0x36>
		//DWT_Delay_us(20);
		//m95_status=SPI_Write(0);
		//if(Boot_Bit)
		//	HAL_IWDG_Refresh(&hiwdg);						// RELOAD WDT WHILE FLASH IS BUSY
	}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800d2a6:	2380      	movs	r3, #128	; 0x80
 800d2a8:	0059      	lsls	r1, r3, #1
 800d2aa:	2390      	movs	r3, #144	; 0x90
 800d2ac:	05db      	lsls	r3, r3, #23
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	0018      	movs	r0, r3
 800d2b2:	f000 ff4d 	bl	800e150 <HAL_GPIO_WritePin>
}
 800d2b6:	46c0      	nop			; (mov r8, r8)
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	b006      	add	sp, #24
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	46c0      	nop			; (mov r8, r8)
 800d2c0:	2000217c 	.word	0x2000217c

0800d2c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800d2cc:	23fa      	movs	r3, #250	; 0xfa
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	0018      	movs	r0, r3
 800d2d2:	f004 f8ba 	bl	801144a <osDelay>
    //Debug_Send("M0 test running\r\n");
	/*if(mqttSend == 1){
		mqttSend = 0;
		Debug_Send("Publish func returnd\r\n");
	}*/
    GSM_Service();
 800d2d6:	f7fc f8df 	bl	8009498 <GSM_Service>
  {
 800d2da:	e7f7      	b.n	800d2cc <StartDefaultTask+0x8>

0800d2dc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 800d2e4:	2032      	movs	r0, #50	; 0x32
 800d2e6:	f004 f8b0 	bl	801144a <osDelay>
    recData();
 800d2ea:	f7fd f961 	bl	800a5b0 <recData>
    hwwdg.Init.Counter = 127;
 800d2ee:	4b04      	ldr	r3, [pc, #16]	; (800d300 <StartTask02+0x24>)
 800d2f0:	227f      	movs	r2, #127	; 0x7f
 800d2f2:	60da      	str	r2, [r3, #12]
    HAL_WWDG_Refresh(&hwwdg);
 800d2f4:	4b02      	ldr	r3, [pc, #8]	; (800d300 <StartTask02+0x24>)
 800d2f6:	0018      	movs	r0, r3
 800d2f8:	f004 f82b 	bl	8011352 <HAL_WWDG_Refresh>
  {
 800d2fc:	e7f2      	b.n	800d2e4 <StartTask02+0x8>
 800d2fe:	46c0      	nop			; (mov r8, r8)
 800d300:	20002268 	.word	0x20002268

0800d304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d308:	b672      	cpsid	i
}
 800d30a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d30c:	e7fe      	b.n	800d30c <Error_Handler+0x8>

0800d30e <myStrSection>:
//#include "GSM.h"

//volatile unsigned char msisdn[80];
const char hex[16] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

short myStrSection(char *p_str,char *p_result,unsigned char p_size,char p_char,char p_pos){
 800d30e:	b580      	push	{r7, lr}
 800d310:	b086      	sub	sp, #24
 800d312:	af00      	add	r7, sp, #0
 800d314:	60f8      	str	r0, [r7, #12]
 800d316:	60b9      	str	r1, [r7, #8]
 800d318:	0019      	movs	r1, r3
 800d31a:	1dfb      	adds	r3, r7, #7
 800d31c:	701a      	strb	r2, [r3, #0]
 800d31e:	1dbb      	adds	r3, r7, #6
 800d320:	1c0a      	adds	r2, r1, #0
 800d322:	701a      	strb	r2, [r3, #0]
	short string_index;
	short result_index;
	char tmp_pos;

	string_index=0;
 800d324:	2316      	movs	r3, #22
 800d326:	18fb      	adds	r3, r7, r3
 800d328:	2200      	movs	r2, #0
 800d32a:	801a      	strh	r2, [r3, #0]
	result_index=0;
 800d32c:	2314      	movs	r3, #20
 800d32e:	18fb      	adds	r3, r7, r3
 800d330:	2200      	movs	r2, #0
 800d332:	801a      	strh	r2, [r3, #0]
	tmp_pos=0;
 800d334:	2313      	movs	r3, #19
 800d336:	18fb      	adds	r3, r7, r3
 800d338:	2200      	movs	r2, #0
 800d33a:	701a      	strb	r2, [r3, #0]
	p_size--;
 800d33c:	1dfb      	adds	r3, r7, #7
 800d33e:	781a      	ldrb	r2, [r3, #0]
 800d340:	1dfb      	adds	r3, r7, #7
 800d342:	3a01      	subs	r2, #1
 800d344:	701a      	strb	r2, [r3, #0]
	while(p_str[string_index]!=0){
 800d346:	e04a      	b.n	800d3de <myStrSection+0xd0>
		if(p_str[string_index]==p_char){
 800d348:	2316      	movs	r3, #22
 800d34a:	18fb      	adds	r3, r7, r3
 800d34c:	2200      	movs	r2, #0
 800d34e:	5e9b      	ldrsh	r3, [r3, r2]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	18d3      	adds	r3, r2, r3
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	1dba      	adds	r2, r7, #6
 800d358:	7812      	ldrb	r2, [r2, #0]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d111      	bne.n	800d382 <myStrSection+0x74>

			if(tmp_pos==p_pos)break;
 800d35e:	2113      	movs	r1, #19
 800d360:	187a      	adds	r2, r7, r1
 800d362:	2320      	movs	r3, #32
 800d364:	18fb      	adds	r3, r7, r3
 800d366:	7812      	ldrb	r2, [r2, #0]
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d041      	beq.n	800d3f2 <myStrSection+0xe4>
			tmp_pos++;
 800d36e:	187b      	adds	r3, r7, r1
 800d370:	781a      	ldrb	r2, [r3, #0]
 800d372:	187b      	adds	r3, r7, r1
 800d374:	3201      	adds	r2, #1
 800d376:	701a      	strb	r2, [r3, #0]
			result_index=0;
 800d378:	2314      	movs	r3, #20
 800d37a:	18fb      	adds	r3, r7, r3
 800d37c:	2200      	movs	r2, #0
 800d37e:	801a      	strh	r2, [r3, #0]
 800d380:	e024      	b.n	800d3cc <myStrSection+0xbe>
		}else{
			if(p_str[string_index]>=' '){
 800d382:	2116      	movs	r1, #22
 800d384:	187b      	adds	r3, r7, r1
 800d386:	2200      	movs	r2, #0
 800d388:	5e9b      	ldrsh	r3, [r3, r2]
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	18d3      	adds	r3, r2, r3
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b1f      	cmp	r3, #31
 800d392:	d91b      	bls.n	800d3cc <myStrSection+0xbe>
				p_result[result_index]=p_str[string_index];				if(result_index<p_size)result_index++;
 800d394:	187b      	adds	r3, r7, r1
 800d396:	2200      	movs	r2, #0
 800d398:	5e9b      	ldrsh	r3, [r3, r2]
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	18d2      	adds	r2, r2, r3
 800d39e:	2014      	movs	r0, #20
 800d3a0:	183b      	adds	r3, r7, r0
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	5e5b      	ldrsh	r3, [r3, r1]
 800d3a6:	68b9      	ldr	r1, [r7, #8]
 800d3a8:	18cb      	adds	r3, r1, r3
 800d3aa:	7812      	ldrb	r2, [r2, #0]
 800d3ac:	701a      	strb	r2, [r3, #0]
 800d3ae:	183b      	adds	r3, r7, r0
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	5e9a      	ldrsh	r2, [r3, r2]
 800d3b4:	1dfb      	adds	r3, r7, #7
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	da07      	bge.n	800d3cc <myStrSection+0xbe>
 800d3bc:	183b      	adds	r3, r7, r0
 800d3be:	2200      	movs	r2, #0
 800d3c0:	5e9b      	ldrsh	r3, [r3, r2]
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	183b      	adds	r3, r7, r0
 800d3ca:	801a      	strh	r2, [r3, #0]
			}
		}
		string_index++;
 800d3cc:	2116      	movs	r1, #22
 800d3ce:	187b      	adds	r3, r7, r1
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	5e9b      	ldrsh	r3, [r3, r2]
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	187b      	adds	r3, r7, r1
 800d3dc:	801a      	strh	r2, [r3, #0]
	while(p_str[string_index]!=0){
 800d3de:	2316      	movs	r3, #22
 800d3e0:	18fb      	adds	r3, r7, r3
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	5e9b      	ldrsh	r3, [r3, r2]
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	18d3      	adds	r3, r2, r3
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1ab      	bne.n	800d348 <myStrSection+0x3a>
 800d3f0:	e000      	b.n	800d3f4 <myStrSection+0xe6>
			if(tmp_pos==p_pos)break;
 800d3f2:	46c0      	nop			; (mov r8, r8)
	}
	if(tmp_pos!=p_pos){
 800d3f4:	2313      	movs	r3, #19
 800d3f6:	18fa      	adds	r2, r7, r3
 800d3f8:	2320      	movs	r3, #32
 800d3fa:	18fb      	adds	r3, r7, r3
 800d3fc:	7812      	ldrb	r2, [r2, #0]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	429a      	cmp	r2, r3
 800d402:	d008      	beq.n	800d416 <myStrSection+0x108>
		result_index=0;
 800d404:	2314      	movs	r3, #20
 800d406:	18fb      	adds	r3, r7, r3
 800d408:	2200      	movs	r2, #0
 800d40a:	801a      	strh	r2, [r3, #0]
		string_index=-1;
 800d40c:	2316      	movs	r3, #22
 800d40e:	18fb      	adds	r3, r7, r3
 800d410:	2201      	movs	r2, #1
 800d412:	4252      	negs	r2, r2
 800d414:	801a      	strh	r2, [r3, #0]
	}
	p_result[result_index]=0;
 800d416:	2314      	movs	r3, #20
 800d418:	18fb      	adds	r3, r7, r3
 800d41a:	2200      	movs	r2, #0
 800d41c:	5e9b      	ldrsh	r3, [r3, r2]
 800d41e:	68ba      	ldr	r2, [r7, #8]
 800d420:	18d3      	adds	r3, r2, r3
 800d422:	2200      	movs	r2, #0
 800d424:	701a      	strb	r2, [r3, #0]

	return string_index;
 800d426:	2316      	movs	r3, #22
 800d428:	18fb      	adds	r3, r7, r3
 800d42a:	2200      	movs	r2, #0
 800d42c:	5e9b      	ldrsh	r3, [r3, r2]
}
 800d42e:	0018      	movs	r0, r3
 800d430:	46bd      	mov	sp, r7
 800d432:	b006      	add	sp, #24
 800d434:	bd80      	pop	{r7, pc}
	...

0800d438 <myLongStr>:


char* myLongStr(signed long p_val,char *p_dest,short p_size,char p_base){
 800d438:	b580      	push	{r7, lr}
 800d43a:	b086      	sub	sp, #24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	0019      	movs	r1, r3
 800d444:	1dbb      	adds	r3, r7, #6
 800d446:	801a      	strh	r2, [r3, #0]
 800d448:	1d7b      	adds	r3, r7, #5
 800d44a:	1c0a      	adds	r2, r1, #0
 800d44c:	701a      	strb	r2, [r3, #0]
	unsigned long tmp_index;
	short tmp_size;
	char tmp_val;
	char tmp_iszero;

	tmp_size=0;
 800d44e:	2112      	movs	r1, #18
 800d450:	187b      	adds	r3, r7, r1
 800d452:	2200      	movs	r2, #0
 800d454:	801a      	strh	r2, [r3, #0]
	tmp_iszero=1;
 800d456:	2311      	movs	r3, #17
 800d458:	18fb      	adds	r3, r7, r3
 800d45a:	2201      	movs	r2, #1
 800d45c:	701a      	strb	r2, [r3, #0]

	if(p_base==10){
 800d45e:	1d7b      	adds	r3, r7, #5
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	2b0a      	cmp	r3, #10
 800d464:	d15f      	bne.n	800d526 <myLongStr+0xee>
		tmp_index=1000000000;
 800d466:	4b6f      	ldr	r3, [pc, #444]	; (800d624 <myLongStr+0x1ec>)
 800d468:	617b      	str	r3, [r7, #20]

		if(p_val<0){
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	da56      	bge.n	800d51e <myLongStr+0xe6>
			p_val*=-1;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	425b      	negs	r3, r3
 800d474:	60fb      	str	r3, [r7, #12]
			p_dest[tmp_size]='-';
 800d476:	187b      	adds	r3, r7, r1
 800d478:	2200      	movs	r2, #0
 800d47a:	5e9b      	ldrsh	r3, [r3, r2]
 800d47c:	68ba      	ldr	r2, [r7, #8]
 800d47e:	18d3      	adds	r3, r2, r3
 800d480:	222d      	movs	r2, #45	; 0x2d
 800d482:	701a      	strb	r2, [r3, #0]
			tmp_size++;
 800d484:	187b      	adds	r3, r7, r1
 800d486:	2200      	movs	r2, #0
 800d488:	5e9b      	ldrsh	r3, [r3, r2]
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	3301      	adds	r3, #1
 800d48e:	b29a      	uxth	r2, r3
 800d490:	187b      	adds	r3, r7, r1
 800d492:	801a      	strh	r2, [r3, #0]
		}

		while(tmp_index>0){
 800d494:	e043      	b.n	800d51e <myLongStr+0xe6>
			tmp_val=p_val/tmp_index;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6979      	ldr	r1, [r7, #20]
 800d49a:	0018      	movs	r0, r3
 800d49c:	f7fb fe50 	bl	8009140 <__udivsi3>
 800d4a0:	0003      	movs	r3, r0
 800d4a2:	001a      	movs	r2, r3
 800d4a4:	2110      	movs	r1, #16
 800d4a6:	187b      	adds	r3, r7, r1
 800d4a8:	701a      	strb	r2, [r3, #0]
			if(tmp_val>0)tmp_iszero=0;
 800d4aa:	187b      	adds	r3, r7, r1
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d003      	beq.n	800d4ba <myLongStr+0x82>
 800d4b2:	2311      	movs	r3, #17
 800d4b4:	18fb      	adds	r3, r7, r3
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	701a      	strb	r2, [r3, #0]
			if(tmp_iszero==0){
 800d4ba:	2311      	movs	r3, #17
 800d4bc:	18fb      	adds	r3, r7, r3
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d113      	bne.n	800d4ec <myLongStr+0xb4>
				p_dest[tmp_size]=tmp_val+0x30;
 800d4c4:	2112      	movs	r1, #18
 800d4c6:	187b      	adds	r3, r7, r1
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	5e9b      	ldrsh	r3, [r3, r2]
 800d4cc:	68ba      	ldr	r2, [r7, #8]
 800d4ce:	18d3      	adds	r3, r2, r3
 800d4d0:	2210      	movs	r2, #16
 800d4d2:	18ba      	adds	r2, r7, r2
 800d4d4:	7812      	ldrb	r2, [r2, #0]
 800d4d6:	3230      	adds	r2, #48	; 0x30
 800d4d8:	b2d2      	uxtb	r2, r2
 800d4da:	701a      	strb	r2, [r3, #0]
				tmp_size++;
 800d4dc:	187b      	adds	r3, r7, r1
 800d4de:	2200      	movs	r2, #0
 800d4e0:	5e9b      	ldrsh	r3, [r3, r2]
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	187b      	adds	r3, r7, r1
 800d4ea:	801a      	strh	r2, [r3, #0]
			}
			p_val=p_val-(tmp_val*tmp_index);
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	2310      	movs	r3, #16
 800d4f0:	18fb      	adds	r3, r7, r3
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	6979      	ldr	r1, [r7, #20]
 800d4f6:	434b      	muls	r3, r1
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	60fb      	str	r3, [r7, #12]
			tmp_index/=10;
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	210a      	movs	r1, #10
 800d500:	0018      	movs	r0, r3
 800d502:	f7fb fe1d 	bl	8009140 <__udivsi3>
 800d506:	0003      	movs	r3, r0
 800d508:	617b      	str	r3, [r7, #20]
			if(tmp_size>=(p_size-1))break;
 800d50a:	2312      	movs	r3, #18
 800d50c:	18fb      	adds	r3, r7, r3
 800d50e:	2200      	movs	r2, #0
 800d510:	5e9a      	ldrsh	r2, [r3, r2]
 800d512:	1dbb      	adds	r3, r7, #6
 800d514:	2100      	movs	r1, #0
 800d516:	5e5b      	ldrsh	r3, [r3, r1]
 800d518:	3b01      	subs	r3, #1
 800d51a:	429a      	cmp	r2, r3
 800d51c:	da5d      	bge.n	800d5da <myLongStr+0x1a2>
		while(tmp_index>0){
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1b8      	bne.n	800d496 <myLongStr+0x5e>
 800d524:	e05c      	b.n	800d5e0 <myLongStr+0x1a8>
		}

	}
	else if(p_base==16){
 800d526:	1d7b      	adds	r3, r7, #5
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	2b10      	cmp	r3, #16
 800d52c:	d158      	bne.n	800d5e0 <myLongStr+0x1a8>
		tmp_index=32;
 800d52e:	2320      	movs	r3, #32
 800d530:	617b      	str	r3, [r7, #20]
		while(tmp_index>0){
 800d532:	e04e      	b.n	800d5d2 <myLongStr+0x19a>
			tmp_val=(p_val>>(tmp_index-4))&0x0f;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	3b04      	subs	r3, #4
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	411a      	asrs	r2, r3
 800d53c:	0013      	movs	r3, r2
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	2010      	movs	r0, #16
 800d542:	183b      	adds	r3, r7, r0
 800d544:	210f      	movs	r1, #15
 800d546:	400a      	ands	r2, r1
 800d548:	701a      	strb	r2, [r3, #0]

			if(tmp_val>0)tmp_iszero=0;
 800d54a:	183b      	adds	r3, r7, r0
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <myLongStr+0x122>
 800d552:	2311      	movs	r3, #17
 800d554:	18fb      	adds	r3, r7, r3
 800d556:	2200      	movs	r2, #0
 800d558:	701a      	strb	r2, [r3, #0]
			if(tmp_iszero==0){
 800d55a:	2311      	movs	r3, #17
 800d55c:	18fb      	adds	r3, r7, r3
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d129      	bne.n	800d5b8 <myLongStr+0x180>
				if(tmp_val<=9)p_dest[tmp_size]=tmp_val+0x30;
 800d564:	2110      	movs	r1, #16
 800d566:	187b      	adds	r3, r7, r1
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	2b09      	cmp	r3, #9
 800d56c:	d80b      	bhi.n	800d586 <myLongStr+0x14e>
 800d56e:	2312      	movs	r3, #18
 800d570:	18fb      	adds	r3, r7, r3
 800d572:	2200      	movs	r2, #0
 800d574:	5e9b      	ldrsh	r3, [r3, r2]
 800d576:	68ba      	ldr	r2, [r7, #8]
 800d578:	18d3      	adds	r3, r2, r3
 800d57a:	187a      	adds	r2, r7, r1
 800d57c:	7812      	ldrb	r2, [r2, #0]
 800d57e:	3230      	adds	r2, #48	; 0x30
 800d580:	b2d2      	uxtb	r2, r2
 800d582:	701a      	strb	r2, [r3, #0]
 800d584:	e00f      	b.n	800d5a6 <myLongStr+0x16e>
				else if(tmp_val>=10)p_dest[tmp_size]=(tmp_val-10)+'A';
 800d586:	2110      	movs	r1, #16
 800d588:	187b      	adds	r3, r7, r1
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	2b09      	cmp	r3, #9
 800d58e:	d90a      	bls.n	800d5a6 <myLongStr+0x16e>
 800d590:	2312      	movs	r3, #18
 800d592:	18fb      	adds	r3, r7, r3
 800d594:	2200      	movs	r2, #0
 800d596:	5e9b      	ldrsh	r3, [r3, r2]
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	18d3      	adds	r3, r2, r3
 800d59c:	187a      	adds	r2, r7, r1
 800d59e:	7812      	ldrb	r2, [r2, #0]
 800d5a0:	3237      	adds	r2, #55	; 0x37
 800d5a2:	b2d2      	uxtb	r2, r2
 800d5a4:	701a      	strb	r2, [r3, #0]
				tmp_size++;
 800d5a6:	2112      	movs	r1, #18
 800d5a8:	187b      	adds	r3, r7, r1
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	5e9b      	ldrsh	r3, [r3, r2]
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	187b      	adds	r3, r7, r1
 800d5b6:	801a      	strh	r2, [r3, #0]
			}

			tmp_index-=4;
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	3b04      	subs	r3, #4
 800d5bc:	617b      	str	r3, [r7, #20]
			if(tmp_size>=(p_size-1))break;
 800d5be:	2312      	movs	r3, #18
 800d5c0:	18fb      	adds	r3, r7, r3
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	5e9a      	ldrsh	r2, [r3, r2]
 800d5c6:	1dbb      	adds	r3, r7, #6
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	5e5b      	ldrsh	r3, [r3, r1]
 800d5cc:	3b01      	subs	r3, #1
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	da05      	bge.n	800d5de <myLongStr+0x1a6>
		while(tmp_index>0){
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1ad      	bne.n	800d534 <myLongStr+0xfc>
 800d5d8:	e002      	b.n	800d5e0 <myLongStr+0x1a8>
			if(tmp_size>=(p_size-1))break;
 800d5da:	46c0      	nop			; (mov r8, r8)
 800d5dc:	e000      	b.n	800d5e0 <myLongStr+0x1a8>
			if(tmp_size>=(p_size-1))break;
 800d5de:	46c0      	nop			; (mov r8, r8)
		}

	}

	if(tmp_iszero==1){
 800d5e0:	2311      	movs	r3, #17
 800d5e2:	18fb      	adds	r3, r7, r3
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d10f      	bne.n	800d60a <myLongStr+0x1d2>
		p_dest[tmp_size]='0';
 800d5ea:	2112      	movs	r1, #18
 800d5ec:	187b      	adds	r3, r7, r1
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	5e9b      	ldrsh	r3, [r3, r2]
 800d5f2:	68ba      	ldr	r2, [r7, #8]
 800d5f4:	18d3      	adds	r3, r2, r3
 800d5f6:	2230      	movs	r2, #48	; 0x30
 800d5f8:	701a      	strb	r2, [r3, #0]
		tmp_size++;
 800d5fa:	187b      	adds	r3, r7, r1
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	5e9b      	ldrsh	r3, [r3, r2]
 800d600:	b29b      	uxth	r3, r3
 800d602:	3301      	adds	r3, #1
 800d604:	b29a      	uxth	r2, r3
 800d606:	187b      	adds	r3, r7, r1
 800d608:	801a      	strh	r2, [r3, #0]
	}

	p_dest[tmp_size]=0;
 800d60a:	2312      	movs	r3, #18
 800d60c:	18fb      	adds	r3, r7, r3
 800d60e:	2200      	movs	r2, #0
 800d610:	5e9b      	ldrsh	r3, [r3, r2]
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	18d3      	adds	r3, r2, r3
 800d616:	2200      	movs	r2, #0
 800d618:	701a      	strb	r2, [r3, #0]
	return p_dest;
 800d61a:	68bb      	ldr	r3, [r7, #8]
}
 800d61c:	0018      	movs	r0, r3
 800d61e:	46bd      	mov	sp, r7
 800d620:	b006      	add	sp, #24
 800d622:	bd80      	pop	{r7, pc}
 800d624:	3b9aca00 	.word	0x3b9aca00

0800d628 <myStrLong>:

long myStrLong(char *p_str,char p_base){
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
 800d630:	000a      	movs	r2, r1
 800d632:	1cfb      	adds	r3, r7, #3
 800d634:	701a      	strb	r2, [r3, #0]
	long tmp_long;
	tmp_long=0;
 800d636:	2300      	movs	r3, #0
 800d638:	60fb      	str	r3, [r7, #12]
	if(p_base==10){
 800d63a:	1cfb      	adds	r3, r7, #3
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	2b0a      	cmp	r3, #10
 800d640:	d120      	bne.n	800d684 <myStrLong+0x5c>
		while(*p_str != 0){
 800d642:	e01a      	b.n	800d67a <myStrLong+0x52>
			if((*p_str>='0')&&(*p_str<='9')){
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	2b2f      	cmp	r3, #47	; 0x2f
 800d64a:	d90f      	bls.n	800d66c <myStrLong+0x44>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b39      	cmp	r3, #57	; 0x39
 800d652:	d80b      	bhi.n	800d66c <myStrLong+0x44>
				tmp_long*=10;
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	0013      	movs	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	189b      	adds	r3, r3, r2
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	60fb      	str	r3, [r7, #12]
				tmp_long+=*p_str-0x30;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	3b30      	subs	r3, #48	; 0x30
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	18d3      	adds	r3, r2, r3
 800d66a:	60fb      	str	r3, [r7, #12]
			}
			if(*p_str>='.')
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	2b2d      	cmp	r3, #45	; 0x2d
 800d672:	d902      	bls.n	800d67a <myStrLong+0x52>
			p_str++;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	3301      	adds	r3, #1
 800d678:	607b      	str	r3, [r7, #4]
		while(*p_str != 0){
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1e0      	bne.n	800d644 <myStrLong+0x1c>
 800d682:	e03e      	b.n	800d702 <myStrLong+0xda>
		}
	}
	else if(p_base==16){
 800d684:	1cfb      	adds	r3, r7, #3
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	2b10      	cmp	r3, #16
 800d68a:	d13a      	bne.n	800d702 <myStrLong+0xda>
		while(*p_str != 0){
 800d68c:	e035      	b.n	800d6fa <myStrLong+0xd2>
			if(*p_str>='0'){
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b2f      	cmp	r3, #47	; 0x2f
 800d694:	d92e      	bls.n	800d6f4 <myStrLong+0xcc>
				tmp_long=tmp_long<<4;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	011b      	lsls	r3, r3, #4
 800d69a:	60fb      	str	r3, [r7, #12]
				if((*p_str>='0')&&(*p_str<='9'))tmp_long|=*p_str-'0';
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	2b2f      	cmp	r3, #47	; 0x2f
 800d6a2:	d90a      	bls.n	800d6ba <myStrLong+0x92>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b39      	cmp	r3, #57	; 0x39
 800d6aa:	d806      	bhi.n	800d6ba <myStrLong+0x92>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	3b30      	subs	r3, #48	; 0x30
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	60fb      	str	r3, [r7, #12]
 800d6b8:	e01c      	b.n	800d6f4 <myStrLong+0xcc>
				else if((*p_str>='a')&&(*p_str<='f'))tmp_long|=(*p_str-'a')+10;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	2b60      	cmp	r3, #96	; 0x60
 800d6c0:	d90a      	bls.n	800d6d8 <myStrLong+0xb0>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	2b66      	cmp	r3, #102	; 0x66
 800d6c8:	d806      	bhi.n	800d6d8 <myStrLong+0xb0>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	781b      	ldrb	r3, [r3, #0]
 800d6ce:	3b57      	subs	r3, #87	; 0x57
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	60fb      	str	r3, [r7, #12]
 800d6d6:	e00d      	b.n	800d6f4 <myStrLong+0xcc>
				else if((*p_str>='A')&&(*p_str<='F'))tmp_long|=(*p_str-'A')+10;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	2b40      	cmp	r3, #64	; 0x40
 800d6de:	d909      	bls.n	800d6f4 <myStrLong+0xcc>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	2b46      	cmp	r3, #70	; 0x46
 800d6e6:	d805      	bhi.n	800d6f4 <myStrLong+0xcc>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	3b37      	subs	r3, #55	; 0x37
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	60fb      	str	r3, [r7, #12]
			}
			p_str++;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	607b      	str	r3, [r7, #4]
		while(*p_str != 0){
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d1c5      	bne.n	800d68e <myStrLong+0x66>
		}
	}
	return tmp_long;
 800d702:	68fb      	ldr	r3, [r7, #12]
}
 800d704:	0018      	movs	r0, r3
 800d706:	46bd      	mov	sp, r7
 800d708:	b004      	add	sp, #16
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d712:	4b12      	ldr	r3, [pc, #72]	; (800d75c <HAL_MspInit+0x50>)
 800d714:	699a      	ldr	r2, [r3, #24]
 800d716:	4b11      	ldr	r3, [pc, #68]	; (800d75c <HAL_MspInit+0x50>)
 800d718:	2101      	movs	r1, #1
 800d71a:	430a      	orrs	r2, r1
 800d71c:	619a      	str	r2, [r3, #24]
 800d71e:	4b0f      	ldr	r3, [pc, #60]	; (800d75c <HAL_MspInit+0x50>)
 800d720:	699b      	ldr	r3, [r3, #24]
 800d722:	2201      	movs	r2, #1
 800d724:	4013      	ands	r3, r2
 800d726:	607b      	str	r3, [r7, #4]
 800d728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d72a:	4b0c      	ldr	r3, [pc, #48]	; (800d75c <HAL_MspInit+0x50>)
 800d72c:	69da      	ldr	r2, [r3, #28]
 800d72e:	4b0b      	ldr	r3, [pc, #44]	; (800d75c <HAL_MspInit+0x50>)
 800d730:	2180      	movs	r1, #128	; 0x80
 800d732:	0549      	lsls	r1, r1, #21
 800d734:	430a      	orrs	r2, r1
 800d736:	61da      	str	r2, [r3, #28]
 800d738:	4b08      	ldr	r3, [pc, #32]	; (800d75c <HAL_MspInit+0x50>)
 800d73a:	69da      	ldr	r2, [r3, #28]
 800d73c:	2380      	movs	r3, #128	; 0x80
 800d73e:	055b      	lsls	r3, r3, #21
 800d740:	4013      	ands	r3, r2
 800d742:	603b      	str	r3, [r7, #0]
 800d744:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800d746:	2302      	movs	r3, #2
 800d748:	425b      	negs	r3, r3
 800d74a:	2200      	movs	r2, #0
 800d74c:	2103      	movs	r1, #3
 800d74e:	0018      	movs	r0, r3
 800d750:	f000 fad6 	bl	800dd00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d754:	46c0      	nop			; (mov r8, r8)
 800d756:	46bd      	mov	sp, r7
 800d758:	b002      	add	sp, #8
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	40021000 	.word	0x40021000

0800d760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d760:	b590      	push	{r4, r7, lr}
 800d762:	b08b      	sub	sp, #44	; 0x2c
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d768:	2414      	movs	r4, #20
 800d76a:	193b      	adds	r3, r7, r4
 800d76c:	0018      	movs	r0, r3
 800d76e:	2314      	movs	r3, #20
 800d770:	001a      	movs	r2, r3
 800d772:	2100      	movs	r1, #0
 800d774:	f004 fef3 	bl	801255e <memset>
  if(hspi->Instance==SPI2)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a1c      	ldr	r2, [pc, #112]	; (800d7f0 <HAL_SPI_MspInit+0x90>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d132      	bne.n	800d7e8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d782:	4b1c      	ldr	r3, [pc, #112]	; (800d7f4 <HAL_SPI_MspInit+0x94>)
 800d784:	69da      	ldr	r2, [r3, #28]
 800d786:	4b1b      	ldr	r3, [pc, #108]	; (800d7f4 <HAL_SPI_MspInit+0x94>)
 800d788:	2180      	movs	r1, #128	; 0x80
 800d78a:	01c9      	lsls	r1, r1, #7
 800d78c:	430a      	orrs	r2, r1
 800d78e:	61da      	str	r2, [r3, #28]
 800d790:	4b18      	ldr	r3, [pc, #96]	; (800d7f4 <HAL_SPI_MspInit+0x94>)
 800d792:	69da      	ldr	r2, [r3, #28]
 800d794:	2380      	movs	r3, #128	; 0x80
 800d796:	01db      	lsls	r3, r3, #7
 800d798:	4013      	ands	r3, r2
 800d79a:	613b      	str	r3, [r7, #16]
 800d79c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d79e:	4b15      	ldr	r3, [pc, #84]	; (800d7f4 <HAL_SPI_MspInit+0x94>)
 800d7a0:	695a      	ldr	r2, [r3, #20]
 800d7a2:	4b14      	ldr	r3, [pc, #80]	; (800d7f4 <HAL_SPI_MspInit+0x94>)
 800d7a4:	2180      	movs	r1, #128	; 0x80
 800d7a6:	02c9      	lsls	r1, r1, #11
 800d7a8:	430a      	orrs	r2, r1
 800d7aa:	615a      	str	r2, [r3, #20]
 800d7ac:	4b11      	ldr	r3, [pc, #68]	; (800d7f4 <HAL_SPI_MspInit+0x94>)
 800d7ae:	695a      	ldr	r2, [r3, #20]
 800d7b0:	2380      	movs	r3, #128	; 0x80
 800d7b2:	02db      	lsls	r3, r3, #11
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	60fb      	str	r3, [r7, #12]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800d7ba:	193b      	adds	r3, r7, r4
 800d7bc:	22e0      	movs	r2, #224	; 0xe0
 800d7be:	0212      	lsls	r2, r2, #8
 800d7c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7c2:	0021      	movs	r1, r4
 800d7c4:	187b      	adds	r3, r7, r1
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7ca:	187b      	adds	r3, r7, r1
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d7d0:	187b      	adds	r3, r7, r1
 800d7d2:	2203      	movs	r2, #3
 800d7d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800d7d6:	187b      	adds	r3, r7, r1
 800d7d8:	2200      	movs	r2, #0
 800d7da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d7dc:	187b      	adds	r3, r7, r1
 800d7de:	4a06      	ldr	r2, [pc, #24]	; (800d7f8 <HAL_SPI_MspInit+0x98>)
 800d7e0:	0019      	movs	r1, r3
 800d7e2:	0010      	movs	r0, r2
 800d7e4:	f000 fb3c 	bl	800de60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800d7e8:	46c0      	nop			; (mov r8, r8)
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	b00b      	add	sp, #44	; 0x2c
 800d7ee:	bd90      	pop	{r4, r7, pc}
 800d7f0:	40003800 	.word	0x40003800
 800d7f4:	40021000 	.word	0x40021000
 800d7f8:	48000400 	.word	0x48000400

0800d7fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d7fc:	b590      	push	{r4, r7, lr}
 800d7fe:	b08d      	sub	sp, #52	; 0x34
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d804:	241c      	movs	r4, #28
 800d806:	193b      	adds	r3, r7, r4
 800d808:	0018      	movs	r0, r3
 800d80a:	2314      	movs	r3, #20
 800d80c:	001a      	movs	r2, r3
 800d80e:	2100      	movs	r1, #0
 800d810:	f004 fea5 	bl	801255e <memset>
  if(huart->Instance==USART1)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a49      	ldr	r2, [pc, #292]	; (800d940 <HAL_UART_MspInit+0x144>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d134      	bne.n	800d888 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d81e:	4b49      	ldr	r3, [pc, #292]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d820:	699a      	ldr	r2, [r3, #24]
 800d822:	4b48      	ldr	r3, [pc, #288]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d824:	2180      	movs	r1, #128	; 0x80
 800d826:	01c9      	lsls	r1, r1, #7
 800d828:	430a      	orrs	r2, r1
 800d82a:	619a      	str	r2, [r3, #24]
 800d82c:	4b45      	ldr	r3, [pc, #276]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d82e:	699a      	ldr	r2, [r3, #24]
 800d830:	2380      	movs	r3, #128	; 0x80
 800d832:	01db      	lsls	r3, r3, #7
 800d834:	4013      	ands	r3, r2
 800d836:	61bb      	str	r3, [r7, #24]
 800d838:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d83a:	4b42      	ldr	r3, [pc, #264]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d83c:	695a      	ldr	r2, [r3, #20]
 800d83e:	4b41      	ldr	r3, [pc, #260]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d840:	2180      	movs	r1, #128	; 0x80
 800d842:	0289      	lsls	r1, r1, #10
 800d844:	430a      	orrs	r2, r1
 800d846:	615a      	str	r2, [r3, #20]
 800d848:	4b3e      	ldr	r3, [pc, #248]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d84a:	695a      	ldr	r2, [r3, #20]
 800d84c:	2380      	movs	r3, #128	; 0x80
 800d84e:	029b      	lsls	r3, r3, #10
 800d850:	4013      	ands	r3, r2
 800d852:	617b      	str	r3, [r7, #20]
 800d854:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d856:	193b      	adds	r3, r7, r4
 800d858:	22c0      	movs	r2, #192	; 0xc0
 800d85a:	00d2      	lsls	r2, r2, #3
 800d85c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d85e:	0021      	movs	r1, r4
 800d860:	187b      	adds	r3, r7, r1
 800d862:	2202      	movs	r2, #2
 800d864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d866:	187b      	adds	r3, r7, r1
 800d868:	2200      	movs	r2, #0
 800d86a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d86c:	187b      	adds	r3, r7, r1
 800d86e:	2203      	movs	r2, #3
 800d870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800d872:	187b      	adds	r3, r7, r1
 800d874:	2201      	movs	r2, #1
 800d876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d878:	187a      	adds	r2, r7, r1
 800d87a:	2390      	movs	r3, #144	; 0x90
 800d87c:	05db      	lsls	r3, r3, #23
 800d87e:	0011      	movs	r1, r2
 800d880:	0018      	movs	r0, r3
 800d882:	f000 faed 	bl	800de60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800d886:	e056      	b.n	800d936 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a2e      	ldr	r2, [pc, #184]	; (800d948 <HAL_UART_MspInit+0x14c>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d151      	bne.n	800d936 <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800d892:	4b2c      	ldr	r3, [pc, #176]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d894:	69da      	ldr	r2, [r3, #28]
 800d896:	4b2b      	ldr	r3, [pc, #172]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d898:	2180      	movs	r1, #128	; 0x80
 800d89a:	0289      	lsls	r1, r1, #10
 800d89c:	430a      	orrs	r2, r1
 800d89e:	61da      	str	r2, [r3, #28]
 800d8a0:	4b28      	ldr	r3, [pc, #160]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d8a2:	69da      	ldr	r2, [r3, #28]
 800d8a4:	2380      	movs	r3, #128	; 0x80
 800d8a6:	029b      	lsls	r3, r3, #10
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	613b      	str	r3, [r7, #16]
 800d8ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8ae:	4b25      	ldr	r3, [pc, #148]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d8b0:	695a      	ldr	r2, [r3, #20]
 800d8b2:	4b24      	ldr	r3, [pc, #144]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d8b4:	2180      	movs	r1, #128	; 0x80
 800d8b6:	0289      	lsls	r1, r1, #10
 800d8b8:	430a      	orrs	r2, r1
 800d8ba:	615a      	str	r2, [r3, #20]
 800d8bc:	4b21      	ldr	r3, [pc, #132]	; (800d944 <HAL_UART_MspInit+0x148>)
 800d8be:	695a      	ldr	r2, [r3, #20]
 800d8c0:	2380      	movs	r3, #128	; 0x80
 800d8c2:	029b      	lsls	r3, r3, #10
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	60fb      	str	r3, [r7, #12]
 800d8c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d8ca:	241c      	movs	r4, #28
 800d8cc:	193b      	adds	r3, r7, r4
 800d8ce:	2204      	movs	r2, #4
 800d8d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d8d2:	193b      	adds	r3, r7, r4
 800d8d4:	2202      	movs	r2, #2
 800d8d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d8d8:	193b      	adds	r3, r7, r4
 800d8da:	2200      	movs	r2, #0
 800d8dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d8de:	193b      	adds	r3, r7, r4
 800d8e0:	2203      	movs	r2, #3
 800d8e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800d8e4:	193b      	adds	r3, r7, r4
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8ea:	193a      	adds	r2, r7, r4
 800d8ec:	2390      	movs	r3, #144	; 0x90
 800d8ee:	05db      	lsls	r3, r3, #23
 800d8f0:	0011      	movs	r1, r2
 800d8f2:	0018      	movs	r0, r3
 800d8f4:	f000 fab4 	bl	800de60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800d8f8:	0021      	movs	r1, r4
 800d8fa:	187b      	adds	r3, r7, r1
 800d8fc:	2208      	movs	r2, #8
 800d8fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d900:	187b      	adds	r3, r7, r1
 800d902:	2202      	movs	r2, #2
 800d904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d906:	187b      	adds	r3, r7, r1
 800d908:	2201      	movs	r2, #1
 800d90a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d90c:	187b      	adds	r3, r7, r1
 800d90e:	2203      	movs	r2, #3
 800d910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800d912:	187b      	adds	r3, r7, r1
 800d914:	2201      	movs	r2, #1
 800d916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d918:	187a      	adds	r2, r7, r1
 800d91a:	2390      	movs	r3, #144	; 0x90
 800d91c:	05db      	lsls	r3, r3, #23
 800d91e:	0011      	movs	r1, r2
 800d920:	0018      	movs	r0, r3
 800d922:	f000 fa9d 	bl	800de60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800d926:	2200      	movs	r2, #0
 800d928:	2103      	movs	r1, #3
 800d92a:	201c      	movs	r0, #28
 800d92c:	f000 f9e8 	bl	800dd00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800d930:	201c      	movs	r0, #28
 800d932:	f000 f9fa 	bl	800dd2a <HAL_NVIC_EnableIRQ>
}
 800d936:	46c0      	nop			; (mov r8, r8)
 800d938:	46bd      	mov	sp, r7
 800d93a:	b00d      	add	sp, #52	; 0x34
 800d93c:	bd90      	pop	{r4, r7, pc}
 800d93e:	46c0      	nop			; (mov r8, r8)
 800d940:	40013800 	.word	0x40013800
 800d944:	40021000 	.word	0x40021000
 800d948:	40004400 	.word	0x40004400

0800d94c <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a0a      	ldr	r2, [pc, #40]	; (800d984 <HAL_WWDG_MspInit+0x38>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d10d      	bne.n	800d97a <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800d95e:	4b0a      	ldr	r3, [pc, #40]	; (800d988 <HAL_WWDG_MspInit+0x3c>)
 800d960:	69da      	ldr	r2, [r3, #28]
 800d962:	4b09      	ldr	r3, [pc, #36]	; (800d988 <HAL_WWDG_MspInit+0x3c>)
 800d964:	2180      	movs	r1, #128	; 0x80
 800d966:	0109      	lsls	r1, r1, #4
 800d968:	430a      	orrs	r2, r1
 800d96a:	61da      	str	r2, [r3, #28]
 800d96c:	4b06      	ldr	r3, [pc, #24]	; (800d988 <HAL_WWDG_MspInit+0x3c>)
 800d96e:	69da      	ldr	r2, [r3, #28]
 800d970:	2380      	movs	r3, #128	; 0x80
 800d972:	011b      	lsls	r3, r3, #4
 800d974:	4013      	ands	r3, r2
 800d976:	60fb      	str	r3, [r7, #12]
 800d978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 800d97a:	46c0      	nop			; (mov r8, r8)
 800d97c:	46bd      	mov	sp, r7
 800d97e:	b004      	add	sp, #16
 800d980:	bd80      	pop	{r7, pc}
 800d982:	46c0      	nop			; (mov r8, r8)
 800d984:	40002c00 	.word	0x40002c00
 800d988:	40021000 	.word	0x40021000

0800d98c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d990:	e7fe      	b.n	800d990 <NMI_Handler+0x4>

0800d992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d992:	b580      	push	{r7, lr}
 800d994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d996:	e7fe      	b.n	800d996 <HardFault_Handler+0x4>

0800d998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d99c:	f000 f8c4 	bl	800db28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d9a0:	f004 fa5e 	bl	8011e60 <xTaskGetSchedulerState>
 800d9a4:	0003      	movs	r3, r0
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d001      	beq.n	800d9ae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800d9aa:	f004 fbbd 	bl	8012128 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d9ae:	46c0      	nop			; (mov r8, r8)
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800d9b8:	4b03      	ldr	r3, [pc, #12]	; (800d9c8 <USART2_IRQHandler+0x14>)
 800d9ba:	0018      	movs	r0, r3
 800d9bc:	f002 fae0 	bl	800ff80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800d9c0:	46c0      	nop			; (mov r8, r8)
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	46c0      	nop			; (mov r8, r8)
 800d9c8:	2000227c 	.word	0x2000227c

0800d9cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b086      	sub	sp, #24
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d9d4:	4a14      	ldr	r2, [pc, #80]	; (800da28 <_sbrk+0x5c>)
 800d9d6:	4b15      	ldr	r3, [pc, #84]	; (800da2c <_sbrk+0x60>)
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d9e0:	4b13      	ldr	r3, [pc, #76]	; (800da30 <_sbrk+0x64>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d102      	bne.n	800d9ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d9e8:	4b11      	ldr	r3, [pc, #68]	; (800da30 <_sbrk+0x64>)
 800d9ea:	4a12      	ldr	r2, [pc, #72]	; (800da34 <_sbrk+0x68>)
 800d9ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d9ee:	4b10      	ldr	r3, [pc, #64]	; (800da30 <_sbrk+0x64>)
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	18d3      	adds	r3, r2, r3
 800d9f6:	693a      	ldr	r2, [r7, #16]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d207      	bcs.n	800da0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d9fc:	f004 fd7c 	bl	80124f8 <__errno>
 800da00:	0003      	movs	r3, r0
 800da02:	220c      	movs	r2, #12
 800da04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800da06:	2301      	movs	r3, #1
 800da08:	425b      	negs	r3, r3
 800da0a:	e009      	b.n	800da20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800da0c:	4b08      	ldr	r3, [pc, #32]	; (800da30 <_sbrk+0x64>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800da12:	4b07      	ldr	r3, [pc, #28]	; (800da30 <_sbrk+0x64>)
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	18d2      	adds	r2, r2, r3
 800da1a:	4b05      	ldr	r3, [pc, #20]	; (800da30 <_sbrk+0x64>)
 800da1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800da1e:	68fb      	ldr	r3, [r7, #12]
}
 800da20:	0018      	movs	r0, r3
 800da22:	46bd      	mov	sp, r7
 800da24:	b006      	add	sp, #24
 800da26:	bd80      	pop	{r7, pc}
 800da28:	20004000 	.word	0x20004000
 800da2c:	00000400 	.word	0x00000400
 800da30:	200003dc 	.word	0x200003dc
 800da34:	20002318 	.word	0x20002318

0800da38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800da3c:	46c0      	nop			; (mov r8, r8)
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
	...

0800da44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800da44:	480d      	ldr	r0, [pc, #52]	; (800da7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800da46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800da48:	480d      	ldr	r0, [pc, #52]	; (800da80 <LoopForever+0x6>)
  ldr r1, =_edata
 800da4a:	490e      	ldr	r1, [pc, #56]	; (800da84 <LoopForever+0xa>)
  ldr r2, =_sidata
 800da4c:	4a0e      	ldr	r2, [pc, #56]	; (800da88 <LoopForever+0xe>)
  movs r3, #0
 800da4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800da50:	e002      	b.n	800da58 <LoopCopyDataInit>

0800da52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800da52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800da54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800da56:	3304      	adds	r3, #4

0800da58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800da58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800da5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800da5c:	d3f9      	bcc.n	800da52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800da5e:	4a0b      	ldr	r2, [pc, #44]	; (800da8c <LoopForever+0x12>)
  ldr r4, =_ebss
 800da60:	4c0b      	ldr	r4, [pc, #44]	; (800da90 <LoopForever+0x16>)
  movs r3, #0
 800da62:	2300      	movs	r3, #0
  b LoopFillZerobss
 800da64:	e001      	b.n	800da6a <LoopFillZerobss>

0800da66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800da66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800da68:	3204      	adds	r2, #4

0800da6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800da6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800da6c:	d3fb      	bcc.n	800da66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800da6e:	f7ff ffe3 	bl	800da38 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800da72:	f004 fd47 	bl	8012504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800da76:	f7ff f879 	bl	800cb6c <main>

0800da7a <LoopForever>:

LoopForever:
    b LoopForever
 800da7a:	e7fe      	b.n	800da7a <LoopForever>
  ldr   r0, =_estack
 800da7c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800da80:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 800da84:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 800da88:	08014424 	.word	0x08014424
  ldr r2, =_sbss
 800da8c:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 800da90:	20002314 	.word	0x20002314

0800da94 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800da94:	e7fe      	b.n	800da94 <ADC1_COMP_IRQHandler>
	...

0800da98 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800da9c:	4b07      	ldr	r3, [pc, #28]	; (800dabc <HAL_Init+0x24>)
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	4b06      	ldr	r3, [pc, #24]	; (800dabc <HAL_Init+0x24>)
 800daa2:	2110      	movs	r1, #16
 800daa4:	430a      	orrs	r2, r1
 800daa6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800daa8:	2003      	movs	r0, #3
 800daaa:	f000 f809 	bl	800dac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800daae:	f7ff fe2d 	bl	800d70c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800dab2:	2300      	movs	r3, #0
}
 800dab4:	0018      	movs	r0, r3
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	46c0      	nop			; (mov r8, r8)
 800dabc:	40022000 	.word	0x40022000

0800dac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dac0:	b590      	push	{r4, r7, lr}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800dac8:	4b14      	ldr	r3, [pc, #80]	; (800db1c <HAL_InitTick+0x5c>)
 800daca:	681c      	ldr	r4, [r3, #0]
 800dacc:	4b14      	ldr	r3, [pc, #80]	; (800db20 <HAL_InitTick+0x60>)
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	0019      	movs	r1, r3
 800dad2:	23fa      	movs	r3, #250	; 0xfa
 800dad4:	0098      	lsls	r0, r3, #2
 800dad6:	f7fb fb33 	bl	8009140 <__udivsi3>
 800dada:	0003      	movs	r3, r0
 800dadc:	0019      	movs	r1, r3
 800dade:	0020      	movs	r0, r4
 800dae0:	f7fb fb2e 	bl	8009140 <__udivsi3>
 800dae4:	0003      	movs	r3, r0
 800dae6:	0018      	movs	r0, r3
 800dae8:	f000 f92f 	bl	800dd4a <HAL_SYSTICK_Config>
 800daec:	1e03      	subs	r3, r0, #0
 800daee:	d001      	beq.n	800daf4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800daf0:	2301      	movs	r3, #1
 800daf2:	e00f      	b.n	800db14 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b03      	cmp	r3, #3
 800daf8:	d80b      	bhi.n	800db12 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800dafa:	6879      	ldr	r1, [r7, #4]
 800dafc:	2301      	movs	r3, #1
 800dafe:	425b      	negs	r3, r3
 800db00:	2200      	movs	r2, #0
 800db02:	0018      	movs	r0, r3
 800db04:	f000 f8fc 	bl	800dd00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800db08:	4b06      	ldr	r3, [pc, #24]	; (800db24 <HAL_InitTick+0x64>)
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	e000      	b.n	800db14 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800db12:	2301      	movs	r3, #1
}
 800db14:	0018      	movs	r0, r3
 800db16:	46bd      	mov	sp, r7
 800db18:	b003      	add	sp, #12
 800db1a:	bd90      	pop	{r4, r7, pc}
 800db1c:	200000d4 	.word	0x200000d4
 800db20:	200000dc 	.word	0x200000dc
 800db24:	200000d8 	.word	0x200000d8

0800db28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800db2c:	4b05      	ldr	r3, [pc, #20]	; (800db44 <HAL_IncTick+0x1c>)
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	001a      	movs	r2, r3
 800db32:	4b05      	ldr	r3, [pc, #20]	; (800db48 <HAL_IncTick+0x20>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	18d2      	adds	r2, r2, r3
 800db38:	4b03      	ldr	r3, [pc, #12]	; (800db48 <HAL_IncTick+0x20>)
 800db3a:	601a      	str	r2, [r3, #0]
}
 800db3c:	46c0      	nop			; (mov r8, r8)
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	46c0      	nop			; (mov r8, r8)
 800db44:	200000dc 	.word	0x200000dc
 800db48:	20002300 	.word	0x20002300

0800db4c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	af00      	add	r7, sp, #0
  return uwTick;
 800db50:	4b02      	ldr	r3, [pc, #8]	; (800db5c <HAL_GetTick+0x10>)
 800db52:	681b      	ldr	r3, [r3, #0]
}
 800db54:	0018      	movs	r0, r3
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	46c0      	nop			; (mov r8, r8)
 800db5c:	20002300 	.word	0x20002300

0800db60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800db68:	f7ff fff0 	bl	800db4c <HAL_GetTick>
 800db6c:	0003      	movs	r3, r0
 800db6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	3301      	adds	r3, #1
 800db78:	d005      	beq.n	800db86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800db7a:	4b0a      	ldr	r3, [pc, #40]	; (800dba4 <HAL_Delay+0x44>)
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	001a      	movs	r2, r3
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	189b      	adds	r3, r3, r2
 800db84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800db86:	46c0      	nop			; (mov r8, r8)
 800db88:	f7ff ffe0 	bl	800db4c <HAL_GetTick>
 800db8c:	0002      	movs	r2, r0
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	68fa      	ldr	r2, [r7, #12]
 800db94:	429a      	cmp	r2, r3
 800db96:	d8f7      	bhi.n	800db88 <HAL_Delay+0x28>
  {
  }
}
 800db98:	46c0      	nop			; (mov r8, r8)
 800db9a:	46c0      	nop			; (mov r8, r8)
 800db9c:	46bd      	mov	sp, r7
 800db9e:	b004      	add	sp, #16
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	46c0      	nop			; (mov r8, r8)
 800dba4:	200000dc 	.word	0x200000dc

0800dba8 <__NVIC_EnableIRQ>:
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	0002      	movs	r2, r0
 800dbb0:	1dfb      	adds	r3, r7, #7
 800dbb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800dbb4:	1dfb      	adds	r3, r7, #7
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	2b7f      	cmp	r3, #127	; 0x7f
 800dbba:	d809      	bhi.n	800dbd0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dbbc:	1dfb      	adds	r3, r7, #7
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	001a      	movs	r2, r3
 800dbc2:	231f      	movs	r3, #31
 800dbc4:	401a      	ands	r2, r3
 800dbc6:	4b04      	ldr	r3, [pc, #16]	; (800dbd8 <__NVIC_EnableIRQ+0x30>)
 800dbc8:	2101      	movs	r1, #1
 800dbca:	4091      	lsls	r1, r2
 800dbcc:	000a      	movs	r2, r1
 800dbce:	601a      	str	r2, [r3, #0]
}
 800dbd0:	46c0      	nop			; (mov r8, r8)
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	b002      	add	sp, #8
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	e000e100 	.word	0xe000e100

0800dbdc <__NVIC_SetPriority>:
{
 800dbdc:	b590      	push	{r4, r7, lr}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	0002      	movs	r2, r0
 800dbe4:	6039      	str	r1, [r7, #0]
 800dbe6:	1dfb      	adds	r3, r7, #7
 800dbe8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800dbea:	1dfb      	adds	r3, r7, #7
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b7f      	cmp	r3, #127	; 0x7f
 800dbf0:	d828      	bhi.n	800dc44 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dbf2:	4a2f      	ldr	r2, [pc, #188]	; (800dcb0 <__NVIC_SetPriority+0xd4>)
 800dbf4:	1dfb      	adds	r3, r7, #7
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	b25b      	sxtb	r3, r3
 800dbfa:	089b      	lsrs	r3, r3, #2
 800dbfc:	33c0      	adds	r3, #192	; 0xc0
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	589b      	ldr	r3, [r3, r2]
 800dc02:	1dfa      	adds	r2, r7, #7
 800dc04:	7812      	ldrb	r2, [r2, #0]
 800dc06:	0011      	movs	r1, r2
 800dc08:	2203      	movs	r2, #3
 800dc0a:	400a      	ands	r2, r1
 800dc0c:	00d2      	lsls	r2, r2, #3
 800dc0e:	21ff      	movs	r1, #255	; 0xff
 800dc10:	4091      	lsls	r1, r2
 800dc12:	000a      	movs	r2, r1
 800dc14:	43d2      	mvns	r2, r2
 800dc16:	401a      	ands	r2, r3
 800dc18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	019b      	lsls	r3, r3, #6
 800dc1e:	22ff      	movs	r2, #255	; 0xff
 800dc20:	401a      	ands	r2, r3
 800dc22:	1dfb      	adds	r3, r7, #7
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	0018      	movs	r0, r3
 800dc28:	2303      	movs	r3, #3
 800dc2a:	4003      	ands	r3, r0
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dc30:	481f      	ldr	r0, [pc, #124]	; (800dcb0 <__NVIC_SetPriority+0xd4>)
 800dc32:	1dfb      	adds	r3, r7, #7
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	b25b      	sxtb	r3, r3
 800dc38:	089b      	lsrs	r3, r3, #2
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	33c0      	adds	r3, #192	; 0xc0
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	501a      	str	r2, [r3, r0]
}
 800dc42:	e031      	b.n	800dca8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dc44:	4a1b      	ldr	r2, [pc, #108]	; (800dcb4 <__NVIC_SetPriority+0xd8>)
 800dc46:	1dfb      	adds	r3, r7, #7
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	0019      	movs	r1, r3
 800dc4c:	230f      	movs	r3, #15
 800dc4e:	400b      	ands	r3, r1
 800dc50:	3b08      	subs	r3, #8
 800dc52:	089b      	lsrs	r3, r3, #2
 800dc54:	3306      	adds	r3, #6
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	18d3      	adds	r3, r2, r3
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	1dfa      	adds	r2, r7, #7
 800dc60:	7812      	ldrb	r2, [r2, #0]
 800dc62:	0011      	movs	r1, r2
 800dc64:	2203      	movs	r2, #3
 800dc66:	400a      	ands	r2, r1
 800dc68:	00d2      	lsls	r2, r2, #3
 800dc6a:	21ff      	movs	r1, #255	; 0xff
 800dc6c:	4091      	lsls	r1, r2
 800dc6e:	000a      	movs	r2, r1
 800dc70:	43d2      	mvns	r2, r2
 800dc72:	401a      	ands	r2, r3
 800dc74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	019b      	lsls	r3, r3, #6
 800dc7a:	22ff      	movs	r2, #255	; 0xff
 800dc7c:	401a      	ands	r2, r3
 800dc7e:	1dfb      	adds	r3, r7, #7
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	0018      	movs	r0, r3
 800dc84:	2303      	movs	r3, #3
 800dc86:	4003      	ands	r3, r0
 800dc88:	00db      	lsls	r3, r3, #3
 800dc8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dc8c:	4809      	ldr	r0, [pc, #36]	; (800dcb4 <__NVIC_SetPriority+0xd8>)
 800dc8e:	1dfb      	adds	r3, r7, #7
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	001c      	movs	r4, r3
 800dc94:	230f      	movs	r3, #15
 800dc96:	4023      	ands	r3, r4
 800dc98:	3b08      	subs	r3, #8
 800dc9a:	089b      	lsrs	r3, r3, #2
 800dc9c:	430a      	orrs	r2, r1
 800dc9e:	3306      	adds	r3, #6
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	18c3      	adds	r3, r0, r3
 800dca4:	3304      	adds	r3, #4
 800dca6:	601a      	str	r2, [r3, #0]
}
 800dca8:	46c0      	nop			; (mov r8, r8)
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	b003      	add	sp, #12
 800dcae:	bd90      	pop	{r4, r7, pc}
 800dcb0:	e000e100 	.word	0xe000e100
 800dcb4:	e000ed00 	.word	0xe000ed00

0800dcb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	1e5a      	subs	r2, r3, #1
 800dcc4:	2380      	movs	r3, #128	; 0x80
 800dcc6:	045b      	lsls	r3, r3, #17
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d301      	bcc.n	800dcd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800dccc:	2301      	movs	r3, #1
 800dcce:	e010      	b.n	800dcf2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800dcd0:	4b0a      	ldr	r3, [pc, #40]	; (800dcfc <SysTick_Config+0x44>)
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	3a01      	subs	r2, #1
 800dcd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800dcd8:	2301      	movs	r3, #1
 800dcda:	425b      	negs	r3, r3
 800dcdc:	2103      	movs	r1, #3
 800dcde:	0018      	movs	r0, r3
 800dce0:	f7ff ff7c 	bl	800dbdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dce4:	4b05      	ldr	r3, [pc, #20]	; (800dcfc <SysTick_Config+0x44>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dcea:	4b04      	ldr	r3, [pc, #16]	; (800dcfc <SysTick_Config+0x44>)
 800dcec:	2207      	movs	r2, #7
 800dcee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	0018      	movs	r0, r3
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	b002      	add	sp, #8
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	46c0      	nop			; (mov r8, r8)
 800dcfc:	e000e010 	.word	0xe000e010

0800dd00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60b9      	str	r1, [r7, #8]
 800dd08:	607a      	str	r2, [r7, #4]
 800dd0a:	210f      	movs	r1, #15
 800dd0c:	187b      	adds	r3, r7, r1
 800dd0e:	1c02      	adds	r2, r0, #0
 800dd10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800dd12:	68ba      	ldr	r2, [r7, #8]
 800dd14:	187b      	adds	r3, r7, r1
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	b25b      	sxtb	r3, r3
 800dd1a:	0011      	movs	r1, r2
 800dd1c:	0018      	movs	r0, r3
 800dd1e:	f7ff ff5d 	bl	800dbdc <__NVIC_SetPriority>
}
 800dd22:	46c0      	nop			; (mov r8, r8)
 800dd24:	46bd      	mov	sp, r7
 800dd26:	b004      	add	sp, #16
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b082      	sub	sp, #8
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	0002      	movs	r2, r0
 800dd32:	1dfb      	adds	r3, r7, #7
 800dd34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dd36:	1dfb      	adds	r3, r7, #7
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	b25b      	sxtb	r3, r3
 800dd3c:	0018      	movs	r0, r3
 800dd3e:	f7ff ff33 	bl	800dba8 <__NVIC_EnableIRQ>
}
 800dd42:	46c0      	nop			; (mov r8, r8)
 800dd44:	46bd      	mov	sp, r7
 800dd46:	b002      	add	sp, #8
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b082      	sub	sp, #8
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	0018      	movs	r0, r3
 800dd56:	f7ff ffaf 	bl	800dcb8 <SysTick_Config>
 800dd5a:	0003      	movs	r3, r0
}
 800dd5c:	0018      	movs	r0, r3
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	b002      	add	sp, #8
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2221      	movs	r2, #33	; 0x21
 800dd70:	5c9b      	ldrb	r3, [r3, r2]
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b02      	cmp	r3, #2
 800dd76:	d008      	beq.n	800dd8a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2204      	movs	r2, #4
 800dd7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2220      	movs	r2, #32
 800dd82:	2100      	movs	r1, #0
 800dd84:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	e020      	b.n	800ddcc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	210e      	movs	r1, #14
 800dd96:	438a      	bics	r2, r1
 800dd98:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2101      	movs	r1, #1
 800dda6:	438a      	bics	r2, r1
 800dda8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb2:	2101      	movs	r1, #1
 800ddb4:	4091      	lsls	r1, r2
 800ddb6:	000a      	movs	r2, r1
 800ddb8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2221      	movs	r2, #33	; 0x21
 800ddbe:	2101      	movs	r1, #1
 800ddc0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2220      	movs	r2, #32
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800ddca:	2300      	movs	r3, #0
}
 800ddcc:	0018      	movs	r0, r3
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	b002      	add	sp, #8
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dddc:	210f      	movs	r1, #15
 800ddde:	187b      	adds	r3, r7, r1
 800dde0:	2200      	movs	r2, #0
 800dde2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2221      	movs	r2, #33	; 0x21
 800dde8:	5c9b      	ldrb	r3, [r3, r2]
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d006      	beq.n	800ddfe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2204      	movs	r2, #4
 800ddf4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800ddf6:	187b      	adds	r3, r7, r1
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	701a      	strb	r2, [r3, #0]
 800ddfc:	e028      	b.n	800de50 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	210e      	movs	r1, #14
 800de0a:	438a      	bics	r2, r1
 800de0c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2101      	movs	r1, #1
 800de1a:	438a      	bics	r2, r1
 800de1c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de26:	2101      	movs	r1, #1
 800de28:	4091      	lsls	r1, r2
 800de2a:	000a      	movs	r2, r1
 800de2c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2221      	movs	r2, #33	; 0x21
 800de32:	2101      	movs	r1, #1
 800de34:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2220      	movs	r2, #32
 800de3a:	2100      	movs	r1, #0
 800de3c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de42:	2b00      	cmp	r3, #0
 800de44:	d004      	beq.n	800de50 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	0010      	movs	r0, r2
 800de4e:	4798      	blx	r3
    } 
  }
  return status;
 800de50:	230f      	movs	r3, #15
 800de52:	18fb      	adds	r3, r7, r3
 800de54:	781b      	ldrb	r3, [r3, #0]
}
 800de56:	0018      	movs	r0, r3
 800de58:	46bd      	mov	sp, r7
 800de5a:	b004      	add	sp, #16
 800de5c:	bd80      	pop	{r7, pc}
	...

0800de60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800de6a:	2300      	movs	r3, #0
 800de6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800de6e:	e155      	b.n	800e11c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2101      	movs	r1, #1
 800de76:	697a      	ldr	r2, [r7, #20]
 800de78:	4091      	lsls	r1, r2
 800de7a:	000a      	movs	r2, r1
 800de7c:	4013      	ands	r3, r2
 800de7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d100      	bne.n	800de88 <HAL_GPIO_Init+0x28>
 800de86:	e146      	b.n	800e116 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	2203      	movs	r2, #3
 800de8e:	4013      	ands	r3, r2
 800de90:	2b01      	cmp	r3, #1
 800de92:	d005      	beq.n	800dea0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	2203      	movs	r2, #3
 800de9a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d130      	bne.n	800df02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	005b      	lsls	r3, r3, #1
 800deaa:	2203      	movs	r2, #3
 800deac:	409a      	lsls	r2, r3
 800deae:	0013      	movs	r3, r2
 800deb0:	43da      	mvns	r2, r3
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	4013      	ands	r3, r2
 800deb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	68da      	ldr	r2, [r3, #12]
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	005b      	lsls	r3, r3, #1
 800dec0:	409a      	lsls	r2, r3
 800dec2:	0013      	movs	r3, r2
 800dec4:	693a      	ldr	r2, [r7, #16]
 800dec6:	4313      	orrs	r3, r2
 800dec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ded6:	2201      	movs	r2, #1
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	409a      	lsls	r2, r3
 800dedc:	0013      	movs	r3, r2
 800dede:	43da      	mvns	r2, r3
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	4013      	ands	r3, r2
 800dee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	091b      	lsrs	r3, r3, #4
 800deec:	2201      	movs	r2, #1
 800deee:	401a      	ands	r2, r3
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	409a      	lsls	r2, r3
 800def4:	0013      	movs	r3, r2
 800def6:	693a      	ldr	r2, [r7, #16]
 800def8:	4313      	orrs	r3, r2
 800defa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	693a      	ldr	r2, [r7, #16]
 800df00:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	2203      	movs	r2, #3
 800df08:	4013      	ands	r3, r2
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d017      	beq.n	800df3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	005b      	lsls	r3, r3, #1
 800df18:	2203      	movs	r2, #3
 800df1a:	409a      	lsls	r2, r3
 800df1c:	0013      	movs	r3, r2
 800df1e:	43da      	mvns	r2, r3
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	4013      	ands	r3, r2
 800df24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	689a      	ldr	r2, [r3, #8]
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	409a      	lsls	r2, r3
 800df30:	0013      	movs	r3, r2
 800df32:	693a      	ldr	r2, [r7, #16]
 800df34:	4313      	orrs	r3, r2
 800df36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	693a      	ldr	r2, [r7, #16]
 800df3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	2203      	movs	r2, #3
 800df44:	4013      	ands	r3, r2
 800df46:	2b02      	cmp	r3, #2
 800df48:	d123      	bne.n	800df92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	08da      	lsrs	r2, r3, #3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	3208      	adds	r2, #8
 800df52:	0092      	lsls	r2, r2, #2
 800df54:	58d3      	ldr	r3, [r2, r3]
 800df56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	2207      	movs	r2, #7
 800df5c:	4013      	ands	r3, r2
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	220f      	movs	r2, #15
 800df62:	409a      	lsls	r2, r3
 800df64:	0013      	movs	r3, r2
 800df66:	43da      	mvns	r2, r3
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	4013      	ands	r3, r2
 800df6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	691a      	ldr	r2, [r3, #16]
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	2107      	movs	r1, #7
 800df76:	400b      	ands	r3, r1
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	409a      	lsls	r2, r3
 800df7c:	0013      	movs	r3, r2
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	4313      	orrs	r3, r2
 800df82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	08da      	lsrs	r2, r3, #3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	3208      	adds	r2, #8
 800df8c:	0092      	lsls	r2, r2, #2
 800df8e:	6939      	ldr	r1, [r7, #16]
 800df90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	005b      	lsls	r3, r3, #1
 800df9c:	2203      	movs	r2, #3
 800df9e:	409a      	lsls	r2, r3
 800dfa0:	0013      	movs	r3, r2
 800dfa2:	43da      	mvns	r2, r3
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	4013      	ands	r3, r2
 800dfa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	2203      	movs	r2, #3
 800dfb0:	401a      	ands	r2, r3
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	005b      	lsls	r3, r3, #1
 800dfb6:	409a      	lsls	r2, r3
 800dfb8:	0013      	movs	r3, r2
 800dfba:	693a      	ldr	r2, [r7, #16]
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	693a      	ldr	r2, [r7, #16]
 800dfc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	685a      	ldr	r2, [r3, #4]
 800dfca:	23c0      	movs	r3, #192	; 0xc0
 800dfcc:	029b      	lsls	r3, r3, #10
 800dfce:	4013      	ands	r3, r2
 800dfd0:	d100      	bne.n	800dfd4 <HAL_GPIO_Init+0x174>
 800dfd2:	e0a0      	b.n	800e116 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dfd4:	4b57      	ldr	r3, [pc, #348]	; (800e134 <HAL_GPIO_Init+0x2d4>)
 800dfd6:	699a      	ldr	r2, [r3, #24]
 800dfd8:	4b56      	ldr	r3, [pc, #344]	; (800e134 <HAL_GPIO_Init+0x2d4>)
 800dfda:	2101      	movs	r1, #1
 800dfdc:	430a      	orrs	r2, r1
 800dfde:	619a      	str	r2, [r3, #24]
 800dfe0:	4b54      	ldr	r3, [pc, #336]	; (800e134 <HAL_GPIO_Init+0x2d4>)
 800dfe2:	699b      	ldr	r3, [r3, #24]
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	4013      	ands	r3, r2
 800dfe8:	60bb      	str	r3, [r7, #8]
 800dfea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800dfec:	4a52      	ldr	r2, [pc, #328]	; (800e138 <HAL_GPIO_Init+0x2d8>)
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	089b      	lsrs	r3, r3, #2
 800dff2:	3302      	adds	r3, #2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	589b      	ldr	r3, [r3, r2]
 800dff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	2203      	movs	r2, #3
 800dffe:	4013      	ands	r3, r2
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	220f      	movs	r2, #15
 800e004:	409a      	lsls	r2, r3
 800e006:	0013      	movs	r3, r2
 800e008:	43da      	mvns	r2, r3
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	4013      	ands	r3, r2
 800e00e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	2390      	movs	r3, #144	; 0x90
 800e014:	05db      	lsls	r3, r3, #23
 800e016:	429a      	cmp	r2, r3
 800e018:	d019      	beq.n	800e04e <HAL_GPIO_Init+0x1ee>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a47      	ldr	r2, [pc, #284]	; (800e13c <HAL_GPIO_Init+0x2dc>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d013      	beq.n	800e04a <HAL_GPIO_Init+0x1ea>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4a46      	ldr	r2, [pc, #280]	; (800e140 <HAL_GPIO_Init+0x2e0>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d00d      	beq.n	800e046 <HAL_GPIO_Init+0x1e6>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4a45      	ldr	r2, [pc, #276]	; (800e144 <HAL_GPIO_Init+0x2e4>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d007      	beq.n	800e042 <HAL_GPIO_Init+0x1e2>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4a44      	ldr	r2, [pc, #272]	; (800e148 <HAL_GPIO_Init+0x2e8>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d101      	bne.n	800e03e <HAL_GPIO_Init+0x1de>
 800e03a:	2304      	movs	r3, #4
 800e03c:	e008      	b.n	800e050 <HAL_GPIO_Init+0x1f0>
 800e03e:	2305      	movs	r3, #5
 800e040:	e006      	b.n	800e050 <HAL_GPIO_Init+0x1f0>
 800e042:	2303      	movs	r3, #3
 800e044:	e004      	b.n	800e050 <HAL_GPIO_Init+0x1f0>
 800e046:	2302      	movs	r3, #2
 800e048:	e002      	b.n	800e050 <HAL_GPIO_Init+0x1f0>
 800e04a:	2301      	movs	r3, #1
 800e04c:	e000      	b.n	800e050 <HAL_GPIO_Init+0x1f0>
 800e04e:	2300      	movs	r3, #0
 800e050:	697a      	ldr	r2, [r7, #20]
 800e052:	2103      	movs	r1, #3
 800e054:	400a      	ands	r2, r1
 800e056:	0092      	lsls	r2, r2, #2
 800e058:	4093      	lsls	r3, r2
 800e05a:	693a      	ldr	r2, [r7, #16]
 800e05c:	4313      	orrs	r3, r2
 800e05e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800e060:	4935      	ldr	r1, [pc, #212]	; (800e138 <HAL_GPIO_Init+0x2d8>)
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	089b      	lsrs	r3, r3, #2
 800e066:	3302      	adds	r3, #2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	693a      	ldr	r2, [r7, #16]
 800e06c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e06e:	4b37      	ldr	r3, [pc, #220]	; (800e14c <HAL_GPIO_Init+0x2ec>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	43da      	mvns	r2, r3
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	4013      	ands	r3, r2
 800e07c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	685a      	ldr	r2, [r3, #4]
 800e082:	2380      	movs	r3, #128	; 0x80
 800e084:	025b      	lsls	r3, r3, #9
 800e086:	4013      	ands	r3, r2
 800e088:	d003      	beq.n	800e092 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800e08a:	693a      	ldr	r2, [r7, #16]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	4313      	orrs	r3, r2
 800e090:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800e092:	4b2e      	ldr	r3, [pc, #184]	; (800e14c <HAL_GPIO_Init+0x2ec>)
 800e094:	693a      	ldr	r2, [r7, #16]
 800e096:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800e098:	4b2c      	ldr	r3, [pc, #176]	; (800e14c <HAL_GPIO_Init+0x2ec>)
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	43da      	mvns	r2, r3
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	685a      	ldr	r2, [r3, #4]
 800e0ac:	2380      	movs	r3, #128	; 0x80
 800e0ae:	029b      	lsls	r3, r3, #10
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	d003      	beq.n	800e0bc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800e0b4:	693a      	ldr	r2, [r7, #16]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800e0bc:	4b23      	ldr	r3, [pc, #140]	; (800e14c <HAL_GPIO_Init+0x2ec>)
 800e0be:	693a      	ldr	r2, [r7, #16]
 800e0c0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e0c2:	4b22      	ldr	r3, [pc, #136]	; (800e14c <HAL_GPIO_Init+0x2ec>)
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	43da      	mvns	r2, r3
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	4013      	ands	r3, r2
 800e0d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	2380      	movs	r3, #128	; 0x80
 800e0d8:	035b      	lsls	r3, r3, #13
 800e0da:	4013      	ands	r3, r2
 800e0dc:	d003      	beq.n	800e0e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800e0de:	693a      	ldr	r2, [r7, #16]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800e0e6:	4b19      	ldr	r3, [pc, #100]	; (800e14c <HAL_GPIO_Init+0x2ec>)
 800e0e8:	693a      	ldr	r2, [r7, #16]
 800e0ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800e0ec:	4b17      	ldr	r3, [pc, #92]	; (800e14c <HAL_GPIO_Init+0x2ec>)
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	43da      	mvns	r2, r3
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	4013      	ands	r3, r2
 800e0fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	2380      	movs	r3, #128	; 0x80
 800e102:	039b      	lsls	r3, r3, #14
 800e104:	4013      	ands	r3, r2
 800e106:	d003      	beq.n	800e110 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800e110:	4b0e      	ldr	r3, [pc, #56]	; (800e14c <HAL_GPIO_Init+0x2ec>)
 800e112:	693a      	ldr	r2, [r7, #16]
 800e114:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	3301      	adds	r3, #1
 800e11a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	40da      	lsrs	r2, r3
 800e124:	1e13      	subs	r3, r2, #0
 800e126:	d000      	beq.n	800e12a <HAL_GPIO_Init+0x2ca>
 800e128:	e6a2      	b.n	800de70 <HAL_GPIO_Init+0x10>
  } 
}
 800e12a:	46c0      	nop			; (mov r8, r8)
 800e12c:	46c0      	nop			; (mov r8, r8)
 800e12e:	46bd      	mov	sp, r7
 800e130:	b006      	add	sp, #24
 800e132:	bd80      	pop	{r7, pc}
 800e134:	40021000 	.word	0x40021000
 800e138:	40010000 	.word	0x40010000
 800e13c:	48000400 	.word	0x48000400
 800e140:	48000800 	.word	0x48000800
 800e144:	48000c00 	.word	0x48000c00
 800e148:	48001000 	.word	0x48001000
 800e14c:	40010400 	.word	0x40010400

0800e150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	0008      	movs	r0, r1
 800e15a:	0011      	movs	r1, r2
 800e15c:	1cbb      	adds	r3, r7, #2
 800e15e:	1c02      	adds	r2, r0, #0
 800e160:	801a      	strh	r2, [r3, #0]
 800e162:	1c7b      	adds	r3, r7, #1
 800e164:	1c0a      	adds	r2, r1, #0
 800e166:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800e168:	1c7b      	adds	r3, r7, #1
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d004      	beq.n	800e17a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e170:	1cbb      	adds	r3, r7, #2
 800e172:	881a      	ldrh	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e178:	e003      	b.n	800e182 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e17a:	1cbb      	adds	r3, r7, #2
 800e17c:	881a      	ldrh	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e182:	46c0      	nop			; (mov r8, r8)
 800e184:	46bd      	mov	sp, r7
 800e186:	b002      	add	sp, #8
 800e188:	bd80      	pop	{r7, pc}

0800e18a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b084      	sub	sp, #16
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	000a      	movs	r2, r1
 800e194:	1cbb      	adds	r3, r7, #2
 800e196:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	695b      	ldr	r3, [r3, #20]
 800e19c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800e19e:	1cbb      	adds	r3, r7, #2
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	4013      	ands	r3, r2
 800e1a6:	041a      	lsls	r2, r3, #16
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	43db      	mvns	r3, r3
 800e1ac:	1cb9      	adds	r1, r7, #2
 800e1ae:	8809      	ldrh	r1, [r1, #0]
 800e1b0:	400b      	ands	r3, r1
 800e1b2:	431a      	orrs	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	619a      	str	r2, [r3, #24]
}
 800e1b8:	46c0      	nop			; (mov r8, r8)
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	b004      	add	sp, #16
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b088      	sub	sp, #32
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d102      	bne.n	800e1d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	f000 fb76 	bl	800e8c0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	4013      	ands	r3, r2
 800e1dc:	d100      	bne.n	800e1e0 <HAL_RCC_OscConfig+0x20>
 800e1de:	e08e      	b.n	800e2fe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800e1e0:	4bc5      	ldr	r3, [pc, #788]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	220c      	movs	r2, #12
 800e1e6:	4013      	ands	r3, r2
 800e1e8:	2b04      	cmp	r3, #4
 800e1ea:	d00e      	beq.n	800e20a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800e1ec:	4bc2      	ldr	r3, [pc, #776]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	220c      	movs	r2, #12
 800e1f2:	4013      	ands	r3, r2
 800e1f4:	2b08      	cmp	r3, #8
 800e1f6:	d117      	bne.n	800e228 <HAL_RCC_OscConfig+0x68>
 800e1f8:	4bbf      	ldr	r3, [pc, #764]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e1fa:	685a      	ldr	r2, [r3, #4]
 800e1fc:	23c0      	movs	r3, #192	; 0xc0
 800e1fe:	025b      	lsls	r3, r3, #9
 800e200:	401a      	ands	r2, r3
 800e202:	2380      	movs	r3, #128	; 0x80
 800e204:	025b      	lsls	r3, r3, #9
 800e206:	429a      	cmp	r2, r3
 800e208:	d10e      	bne.n	800e228 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e20a:	4bbb      	ldr	r3, [pc, #748]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	2380      	movs	r3, #128	; 0x80
 800e210:	029b      	lsls	r3, r3, #10
 800e212:	4013      	ands	r3, r2
 800e214:	d100      	bne.n	800e218 <HAL_RCC_OscConfig+0x58>
 800e216:	e071      	b.n	800e2fc <HAL_RCC_OscConfig+0x13c>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d000      	beq.n	800e222 <HAL_RCC_OscConfig+0x62>
 800e220:	e06c      	b.n	800e2fc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	f000 fb4c 	bl	800e8c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d107      	bne.n	800e240 <HAL_RCC_OscConfig+0x80>
 800e230:	4bb1      	ldr	r3, [pc, #708]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	4bb0      	ldr	r3, [pc, #704]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e236:	2180      	movs	r1, #128	; 0x80
 800e238:	0249      	lsls	r1, r1, #9
 800e23a:	430a      	orrs	r2, r1
 800e23c:	601a      	str	r2, [r3, #0]
 800e23e:	e02f      	b.n	800e2a0 <HAL_RCC_OscConfig+0xe0>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d10c      	bne.n	800e262 <HAL_RCC_OscConfig+0xa2>
 800e248:	4bab      	ldr	r3, [pc, #684]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	4baa      	ldr	r3, [pc, #680]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e24e:	49ab      	ldr	r1, [pc, #684]	; (800e4fc <HAL_RCC_OscConfig+0x33c>)
 800e250:	400a      	ands	r2, r1
 800e252:	601a      	str	r2, [r3, #0]
 800e254:	4ba8      	ldr	r3, [pc, #672]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	4ba7      	ldr	r3, [pc, #668]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e25a:	49a9      	ldr	r1, [pc, #676]	; (800e500 <HAL_RCC_OscConfig+0x340>)
 800e25c:	400a      	ands	r2, r1
 800e25e:	601a      	str	r2, [r3, #0]
 800e260:	e01e      	b.n	800e2a0 <HAL_RCC_OscConfig+0xe0>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	2b05      	cmp	r3, #5
 800e268:	d10e      	bne.n	800e288 <HAL_RCC_OscConfig+0xc8>
 800e26a:	4ba3      	ldr	r3, [pc, #652]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	4ba2      	ldr	r3, [pc, #648]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e270:	2180      	movs	r1, #128	; 0x80
 800e272:	02c9      	lsls	r1, r1, #11
 800e274:	430a      	orrs	r2, r1
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	4b9f      	ldr	r3, [pc, #636]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	4b9e      	ldr	r3, [pc, #632]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e27e:	2180      	movs	r1, #128	; 0x80
 800e280:	0249      	lsls	r1, r1, #9
 800e282:	430a      	orrs	r2, r1
 800e284:	601a      	str	r2, [r3, #0]
 800e286:	e00b      	b.n	800e2a0 <HAL_RCC_OscConfig+0xe0>
 800e288:	4b9b      	ldr	r3, [pc, #620]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	4b9a      	ldr	r3, [pc, #616]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e28e:	499b      	ldr	r1, [pc, #620]	; (800e4fc <HAL_RCC_OscConfig+0x33c>)
 800e290:	400a      	ands	r2, r1
 800e292:	601a      	str	r2, [r3, #0]
 800e294:	4b98      	ldr	r3, [pc, #608]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	4b97      	ldr	r3, [pc, #604]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e29a:	4999      	ldr	r1, [pc, #612]	; (800e500 <HAL_RCC_OscConfig+0x340>)
 800e29c:	400a      	ands	r2, r1
 800e29e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d014      	beq.n	800e2d2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e2a8:	f7ff fc50 	bl	800db4c <HAL_GetTick>
 800e2ac:	0003      	movs	r3, r0
 800e2ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e2b0:	e008      	b.n	800e2c4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e2b2:	f7ff fc4b 	bl	800db4c <HAL_GetTick>
 800e2b6:	0002      	movs	r2, r0
 800e2b8:	69bb      	ldr	r3, [r7, #24]
 800e2ba:	1ad3      	subs	r3, r2, r3
 800e2bc:	2b64      	cmp	r3, #100	; 0x64
 800e2be:	d901      	bls.n	800e2c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	e2fd      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e2c4:	4b8c      	ldr	r3, [pc, #560]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e2c6:	681a      	ldr	r2, [r3, #0]
 800e2c8:	2380      	movs	r3, #128	; 0x80
 800e2ca:	029b      	lsls	r3, r3, #10
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	d0f0      	beq.n	800e2b2 <HAL_RCC_OscConfig+0xf2>
 800e2d0:	e015      	b.n	800e2fe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e2d2:	f7ff fc3b 	bl	800db4c <HAL_GetTick>
 800e2d6:	0003      	movs	r3, r0
 800e2d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e2da:	e008      	b.n	800e2ee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e2dc:	f7ff fc36 	bl	800db4c <HAL_GetTick>
 800e2e0:	0002      	movs	r2, r0
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	1ad3      	subs	r3, r2, r3
 800e2e6:	2b64      	cmp	r3, #100	; 0x64
 800e2e8:	d901      	bls.n	800e2ee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800e2ea:	2303      	movs	r3, #3
 800e2ec:	e2e8      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e2ee:	4b82      	ldr	r3, [pc, #520]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	2380      	movs	r3, #128	; 0x80
 800e2f4:	029b      	lsls	r3, r3, #10
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	d1f0      	bne.n	800e2dc <HAL_RCC_OscConfig+0x11c>
 800e2fa:	e000      	b.n	800e2fe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e2fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2202      	movs	r2, #2
 800e304:	4013      	ands	r3, r2
 800e306:	d100      	bne.n	800e30a <HAL_RCC_OscConfig+0x14a>
 800e308:	e06c      	b.n	800e3e4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800e30a:	4b7b      	ldr	r3, [pc, #492]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	220c      	movs	r2, #12
 800e310:	4013      	ands	r3, r2
 800e312:	d00e      	beq.n	800e332 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800e314:	4b78      	ldr	r3, [pc, #480]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	220c      	movs	r2, #12
 800e31a:	4013      	ands	r3, r2
 800e31c:	2b08      	cmp	r3, #8
 800e31e:	d11f      	bne.n	800e360 <HAL_RCC_OscConfig+0x1a0>
 800e320:	4b75      	ldr	r3, [pc, #468]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e322:	685a      	ldr	r2, [r3, #4]
 800e324:	23c0      	movs	r3, #192	; 0xc0
 800e326:	025b      	lsls	r3, r3, #9
 800e328:	401a      	ands	r2, r3
 800e32a:	2380      	movs	r3, #128	; 0x80
 800e32c:	021b      	lsls	r3, r3, #8
 800e32e:	429a      	cmp	r2, r3
 800e330:	d116      	bne.n	800e360 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e332:	4b71      	ldr	r3, [pc, #452]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2202      	movs	r2, #2
 800e338:	4013      	ands	r3, r2
 800e33a:	d005      	beq.n	800e348 <HAL_RCC_OscConfig+0x188>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d001      	beq.n	800e348 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800e344:	2301      	movs	r3, #1
 800e346:	e2bb      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e348:	4b6b      	ldr	r3, [pc, #428]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	22f8      	movs	r2, #248	; 0xf8
 800e34e:	4393      	bics	r3, r2
 800e350:	0019      	movs	r1, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	691b      	ldr	r3, [r3, #16]
 800e356:	00da      	lsls	r2, r3, #3
 800e358:	4b67      	ldr	r3, [pc, #412]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e35a:	430a      	orrs	r2, r1
 800e35c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e35e:	e041      	b.n	800e3e4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d024      	beq.n	800e3b2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e368:	4b63      	ldr	r3, [pc, #396]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	4b62      	ldr	r3, [pc, #392]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e36e:	2101      	movs	r1, #1
 800e370:	430a      	orrs	r2, r1
 800e372:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e374:	f7ff fbea 	bl	800db4c <HAL_GetTick>
 800e378:	0003      	movs	r3, r0
 800e37a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e37c:	e008      	b.n	800e390 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e37e:	f7ff fbe5 	bl	800db4c <HAL_GetTick>
 800e382:	0002      	movs	r2, r0
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	1ad3      	subs	r3, r2, r3
 800e388:	2b02      	cmp	r3, #2
 800e38a:	d901      	bls.n	800e390 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800e38c:	2303      	movs	r3, #3
 800e38e:	e297      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e390:	4b59      	ldr	r3, [pc, #356]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2202      	movs	r2, #2
 800e396:	4013      	ands	r3, r2
 800e398:	d0f1      	beq.n	800e37e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e39a:	4b57      	ldr	r3, [pc, #348]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	22f8      	movs	r2, #248	; 0xf8
 800e3a0:	4393      	bics	r3, r2
 800e3a2:	0019      	movs	r1, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	691b      	ldr	r3, [r3, #16]
 800e3a8:	00da      	lsls	r2, r3, #3
 800e3aa:	4b53      	ldr	r3, [pc, #332]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e3ac:	430a      	orrs	r2, r1
 800e3ae:	601a      	str	r2, [r3, #0]
 800e3b0:	e018      	b.n	800e3e4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e3b2:	4b51      	ldr	r3, [pc, #324]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	4b50      	ldr	r3, [pc, #320]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e3b8:	2101      	movs	r1, #1
 800e3ba:	438a      	bics	r2, r1
 800e3bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e3be:	f7ff fbc5 	bl	800db4c <HAL_GetTick>
 800e3c2:	0003      	movs	r3, r0
 800e3c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e3c6:	e008      	b.n	800e3da <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e3c8:	f7ff fbc0 	bl	800db4c <HAL_GetTick>
 800e3cc:	0002      	movs	r2, r0
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	2b02      	cmp	r3, #2
 800e3d4:	d901      	bls.n	800e3da <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800e3d6:	2303      	movs	r3, #3
 800e3d8:	e272      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e3da:	4b47      	ldr	r3, [pc, #284]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2202      	movs	r2, #2
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	d1f1      	bne.n	800e3c8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2208      	movs	r2, #8
 800e3ea:	4013      	ands	r3, r2
 800e3ec:	d036      	beq.n	800e45c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	69db      	ldr	r3, [r3, #28]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d019      	beq.n	800e42a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e3f6:	4b40      	ldr	r3, [pc, #256]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e3f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3fa:	4b3f      	ldr	r3, [pc, #252]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e3fc:	2101      	movs	r1, #1
 800e3fe:	430a      	orrs	r2, r1
 800e400:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e402:	f7ff fba3 	bl	800db4c <HAL_GetTick>
 800e406:	0003      	movs	r3, r0
 800e408:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e40a:	e008      	b.n	800e41e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e40c:	f7ff fb9e 	bl	800db4c <HAL_GetTick>
 800e410:	0002      	movs	r2, r0
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	2b02      	cmp	r3, #2
 800e418:	d901      	bls.n	800e41e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800e41a:	2303      	movs	r3, #3
 800e41c:	e250      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e41e:	4b36      	ldr	r3, [pc, #216]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e422:	2202      	movs	r2, #2
 800e424:	4013      	ands	r3, r2
 800e426:	d0f1      	beq.n	800e40c <HAL_RCC_OscConfig+0x24c>
 800e428:	e018      	b.n	800e45c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e42a:	4b33      	ldr	r3, [pc, #204]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e42c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e42e:	4b32      	ldr	r3, [pc, #200]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e430:	2101      	movs	r1, #1
 800e432:	438a      	bics	r2, r1
 800e434:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e436:	f7ff fb89 	bl	800db4c <HAL_GetTick>
 800e43a:	0003      	movs	r3, r0
 800e43c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e43e:	e008      	b.n	800e452 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e440:	f7ff fb84 	bl	800db4c <HAL_GetTick>
 800e444:	0002      	movs	r2, r0
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	2b02      	cmp	r3, #2
 800e44c:	d901      	bls.n	800e452 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800e44e:	2303      	movs	r3, #3
 800e450:	e236      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e452:	4b29      	ldr	r3, [pc, #164]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e456:	2202      	movs	r2, #2
 800e458:	4013      	ands	r3, r2
 800e45a:	d1f1      	bne.n	800e440 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2204      	movs	r2, #4
 800e462:	4013      	ands	r3, r2
 800e464:	d100      	bne.n	800e468 <HAL_RCC_OscConfig+0x2a8>
 800e466:	e0b5      	b.n	800e5d4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e468:	201f      	movs	r0, #31
 800e46a:	183b      	adds	r3, r7, r0
 800e46c:	2200      	movs	r2, #0
 800e46e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e470:	4b21      	ldr	r3, [pc, #132]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e472:	69da      	ldr	r2, [r3, #28]
 800e474:	2380      	movs	r3, #128	; 0x80
 800e476:	055b      	lsls	r3, r3, #21
 800e478:	4013      	ands	r3, r2
 800e47a:	d110      	bne.n	800e49e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e47c:	4b1e      	ldr	r3, [pc, #120]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e47e:	69da      	ldr	r2, [r3, #28]
 800e480:	4b1d      	ldr	r3, [pc, #116]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e482:	2180      	movs	r1, #128	; 0x80
 800e484:	0549      	lsls	r1, r1, #21
 800e486:	430a      	orrs	r2, r1
 800e488:	61da      	str	r2, [r3, #28]
 800e48a:	4b1b      	ldr	r3, [pc, #108]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e48c:	69da      	ldr	r2, [r3, #28]
 800e48e:	2380      	movs	r3, #128	; 0x80
 800e490:	055b      	lsls	r3, r3, #21
 800e492:	4013      	ands	r3, r2
 800e494:	60fb      	str	r3, [r7, #12]
 800e496:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800e498:	183b      	adds	r3, r7, r0
 800e49a:	2201      	movs	r2, #1
 800e49c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e49e:	4b19      	ldr	r3, [pc, #100]	; (800e504 <HAL_RCC_OscConfig+0x344>)
 800e4a0:	681a      	ldr	r2, [r3, #0]
 800e4a2:	2380      	movs	r3, #128	; 0x80
 800e4a4:	005b      	lsls	r3, r3, #1
 800e4a6:	4013      	ands	r3, r2
 800e4a8:	d11a      	bne.n	800e4e0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e4aa:	4b16      	ldr	r3, [pc, #88]	; (800e504 <HAL_RCC_OscConfig+0x344>)
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	4b15      	ldr	r3, [pc, #84]	; (800e504 <HAL_RCC_OscConfig+0x344>)
 800e4b0:	2180      	movs	r1, #128	; 0x80
 800e4b2:	0049      	lsls	r1, r1, #1
 800e4b4:	430a      	orrs	r2, r1
 800e4b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e4b8:	f7ff fb48 	bl	800db4c <HAL_GetTick>
 800e4bc:	0003      	movs	r3, r0
 800e4be:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e4c0:	e008      	b.n	800e4d4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e4c2:	f7ff fb43 	bl	800db4c <HAL_GetTick>
 800e4c6:	0002      	movs	r2, r0
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	1ad3      	subs	r3, r2, r3
 800e4cc:	2b64      	cmp	r3, #100	; 0x64
 800e4ce:	d901      	bls.n	800e4d4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800e4d0:	2303      	movs	r3, #3
 800e4d2:	e1f5      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e4d4:	4b0b      	ldr	r3, [pc, #44]	; (800e504 <HAL_RCC_OscConfig+0x344>)
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	2380      	movs	r3, #128	; 0x80
 800e4da:	005b      	lsls	r3, r3, #1
 800e4dc:	4013      	ands	r3, r2
 800e4de:	d0f0      	beq.n	800e4c2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d10f      	bne.n	800e508 <HAL_RCC_OscConfig+0x348>
 800e4e8:	4b03      	ldr	r3, [pc, #12]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e4ea:	6a1a      	ldr	r2, [r3, #32]
 800e4ec:	4b02      	ldr	r3, [pc, #8]	; (800e4f8 <HAL_RCC_OscConfig+0x338>)
 800e4ee:	2101      	movs	r1, #1
 800e4f0:	430a      	orrs	r2, r1
 800e4f2:	621a      	str	r2, [r3, #32]
 800e4f4:	e036      	b.n	800e564 <HAL_RCC_OscConfig+0x3a4>
 800e4f6:	46c0      	nop			; (mov r8, r8)
 800e4f8:	40021000 	.word	0x40021000
 800e4fc:	fffeffff 	.word	0xfffeffff
 800e500:	fffbffff 	.word	0xfffbffff
 800e504:	40007000 	.word	0x40007000
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d10c      	bne.n	800e52a <HAL_RCC_OscConfig+0x36a>
 800e510:	4bca      	ldr	r3, [pc, #808]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e512:	6a1a      	ldr	r2, [r3, #32]
 800e514:	4bc9      	ldr	r3, [pc, #804]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e516:	2101      	movs	r1, #1
 800e518:	438a      	bics	r2, r1
 800e51a:	621a      	str	r2, [r3, #32]
 800e51c:	4bc7      	ldr	r3, [pc, #796]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e51e:	6a1a      	ldr	r2, [r3, #32]
 800e520:	4bc6      	ldr	r3, [pc, #792]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e522:	2104      	movs	r1, #4
 800e524:	438a      	bics	r2, r1
 800e526:	621a      	str	r2, [r3, #32]
 800e528:	e01c      	b.n	800e564 <HAL_RCC_OscConfig+0x3a4>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	689b      	ldr	r3, [r3, #8]
 800e52e:	2b05      	cmp	r3, #5
 800e530:	d10c      	bne.n	800e54c <HAL_RCC_OscConfig+0x38c>
 800e532:	4bc2      	ldr	r3, [pc, #776]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e534:	6a1a      	ldr	r2, [r3, #32]
 800e536:	4bc1      	ldr	r3, [pc, #772]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e538:	2104      	movs	r1, #4
 800e53a:	430a      	orrs	r2, r1
 800e53c:	621a      	str	r2, [r3, #32]
 800e53e:	4bbf      	ldr	r3, [pc, #764]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e540:	6a1a      	ldr	r2, [r3, #32]
 800e542:	4bbe      	ldr	r3, [pc, #760]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e544:	2101      	movs	r1, #1
 800e546:	430a      	orrs	r2, r1
 800e548:	621a      	str	r2, [r3, #32]
 800e54a:	e00b      	b.n	800e564 <HAL_RCC_OscConfig+0x3a4>
 800e54c:	4bbb      	ldr	r3, [pc, #748]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e54e:	6a1a      	ldr	r2, [r3, #32]
 800e550:	4bba      	ldr	r3, [pc, #744]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e552:	2101      	movs	r1, #1
 800e554:	438a      	bics	r2, r1
 800e556:	621a      	str	r2, [r3, #32]
 800e558:	4bb8      	ldr	r3, [pc, #736]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e55a:	6a1a      	ldr	r2, [r3, #32]
 800e55c:	4bb7      	ldr	r3, [pc, #732]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e55e:	2104      	movs	r1, #4
 800e560:	438a      	bics	r2, r1
 800e562:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d014      	beq.n	800e596 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e56c:	f7ff faee 	bl	800db4c <HAL_GetTick>
 800e570:	0003      	movs	r3, r0
 800e572:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e574:	e009      	b.n	800e58a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e576:	f7ff fae9 	bl	800db4c <HAL_GetTick>
 800e57a:	0002      	movs	r2, r0
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	4aaf      	ldr	r2, [pc, #700]	; (800e840 <HAL_RCC_OscConfig+0x680>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d901      	bls.n	800e58a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800e586:	2303      	movs	r3, #3
 800e588:	e19a      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e58a:	4bac      	ldr	r3, [pc, #688]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e58c:	6a1b      	ldr	r3, [r3, #32]
 800e58e:	2202      	movs	r2, #2
 800e590:	4013      	ands	r3, r2
 800e592:	d0f0      	beq.n	800e576 <HAL_RCC_OscConfig+0x3b6>
 800e594:	e013      	b.n	800e5be <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e596:	f7ff fad9 	bl	800db4c <HAL_GetTick>
 800e59a:	0003      	movs	r3, r0
 800e59c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e59e:	e009      	b.n	800e5b4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e5a0:	f7ff fad4 	bl	800db4c <HAL_GetTick>
 800e5a4:	0002      	movs	r2, r0
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	1ad3      	subs	r3, r2, r3
 800e5aa:	4aa5      	ldr	r2, [pc, #660]	; (800e840 <HAL_RCC_OscConfig+0x680>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d901      	bls.n	800e5b4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800e5b0:	2303      	movs	r3, #3
 800e5b2:	e185      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e5b4:	4ba1      	ldr	r3, [pc, #644]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e5b6:	6a1b      	ldr	r3, [r3, #32]
 800e5b8:	2202      	movs	r2, #2
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	d1f0      	bne.n	800e5a0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800e5be:	231f      	movs	r3, #31
 800e5c0:	18fb      	adds	r3, r7, r3
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d105      	bne.n	800e5d4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e5c8:	4b9c      	ldr	r3, [pc, #624]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e5ca:	69da      	ldr	r2, [r3, #28]
 800e5cc:	4b9b      	ldr	r3, [pc, #620]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e5ce:	499d      	ldr	r1, [pc, #628]	; (800e844 <HAL_RCC_OscConfig+0x684>)
 800e5d0:	400a      	ands	r2, r1
 800e5d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2210      	movs	r2, #16
 800e5da:	4013      	ands	r3, r2
 800e5dc:	d063      	beq.n	800e6a6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	695b      	ldr	r3, [r3, #20]
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d12a      	bne.n	800e63c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800e5e6:	4b95      	ldr	r3, [pc, #596]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e5e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5ea:	4b94      	ldr	r3, [pc, #592]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e5ec:	2104      	movs	r1, #4
 800e5ee:	430a      	orrs	r2, r1
 800e5f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800e5f2:	4b92      	ldr	r3, [pc, #584]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e5f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5f6:	4b91      	ldr	r3, [pc, #580]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e5f8:	2101      	movs	r1, #1
 800e5fa:	430a      	orrs	r2, r1
 800e5fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e5fe:	f7ff faa5 	bl	800db4c <HAL_GetTick>
 800e602:	0003      	movs	r3, r0
 800e604:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800e606:	e008      	b.n	800e61a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800e608:	f7ff faa0 	bl	800db4c <HAL_GetTick>
 800e60c:	0002      	movs	r2, r0
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	2b02      	cmp	r3, #2
 800e614:	d901      	bls.n	800e61a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800e616:	2303      	movs	r3, #3
 800e618:	e152      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800e61a:	4b88      	ldr	r3, [pc, #544]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e61e:	2202      	movs	r2, #2
 800e620:	4013      	ands	r3, r2
 800e622:	d0f1      	beq.n	800e608 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800e624:	4b85      	ldr	r3, [pc, #532]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e628:	22f8      	movs	r2, #248	; 0xf8
 800e62a:	4393      	bics	r3, r2
 800e62c:	0019      	movs	r1, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	699b      	ldr	r3, [r3, #24]
 800e632:	00da      	lsls	r2, r3, #3
 800e634:	4b81      	ldr	r3, [pc, #516]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e636:	430a      	orrs	r2, r1
 800e638:	635a      	str	r2, [r3, #52]	; 0x34
 800e63a:	e034      	b.n	800e6a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	695b      	ldr	r3, [r3, #20]
 800e640:	3305      	adds	r3, #5
 800e642:	d111      	bne.n	800e668 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800e644:	4b7d      	ldr	r3, [pc, #500]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e648:	4b7c      	ldr	r3, [pc, #496]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e64a:	2104      	movs	r1, #4
 800e64c:	438a      	bics	r2, r1
 800e64e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800e650:	4b7a      	ldr	r3, [pc, #488]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e654:	22f8      	movs	r2, #248	; 0xf8
 800e656:	4393      	bics	r3, r2
 800e658:	0019      	movs	r1, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	699b      	ldr	r3, [r3, #24]
 800e65e:	00da      	lsls	r2, r3, #3
 800e660:	4b76      	ldr	r3, [pc, #472]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e662:	430a      	orrs	r2, r1
 800e664:	635a      	str	r2, [r3, #52]	; 0x34
 800e666:	e01e      	b.n	800e6a6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800e668:	4b74      	ldr	r3, [pc, #464]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e66a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e66c:	4b73      	ldr	r3, [pc, #460]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e66e:	2104      	movs	r1, #4
 800e670:	430a      	orrs	r2, r1
 800e672:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800e674:	4b71      	ldr	r3, [pc, #452]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e678:	4b70      	ldr	r3, [pc, #448]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e67a:	2101      	movs	r1, #1
 800e67c:	438a      	bics	r2, r1
 800e67e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e680:	f7ff fa64 	bl	800db4c <HAL_GetTick>
 800e684:	0003      	movs	r3, r0
 800e686:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800e688:	e008      	b.n	800e69c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800e68a:	f7ff fa5f 	bl	800db4c <HAL_GetTick>
 800e68e:	0002      	movs	r2, r0
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	1ad3      	subs	r3, r2, r3
 800e694:	2b02      	cmp	r3, #2
 800e696:	d901      	bls.n	800e69c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800e698:	2303      	movs	r3, #3
 800e69a:	e111      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800e69c:	4b67      	ldr	r3, [pc, #412]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6a0:	2202      	movs	r2, #2
 800e6a2:	4013      	ands	r3, r2
 800e6a4:	d1f1      	bne.n	800e68a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2220      	movs	r2, #32
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	d05c      	beq.n	800e76a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800e6b0:	4b62      	ldr	r3, [pc, #392]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	220c      	movs	r2, #12
 800e6b6:	4013      	ands	r3, r2
 800e6b8:	2b0c      	cmp	r3, #12
 800e6ba:	d00e      	beq.n	800e6da <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800e6bc:	4b5f      	ldr	r3, [pc, #380]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	220c      	movs	r2, #12
 800e6c2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800e6c4:	2b08      	cmp	r3, #8
 800e6c6:	d114      	bne.n	800e6f2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800e6c8:	4b5c      	ldr	r3, [pc, #368]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e6ca:	685a      	ldr	r2, [r3, #4]
 800e6cc:	23c0      	movs	r3, #192	; 0xc0
 800e6ce:	025b      	lsls	r3, r3, #9
 800e6d0:	401a      	ands	r2, r3
 800e6d2:	23c0      	movs	r3, #192	; 0xc0
 800e6d4:	025b      	lsls	r3, r3, #9
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d10b      	bne.n	800e6f2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800e6da:	4b58      	ldr	r3, [pc, #352]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e6dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6de:	2380      	movs	r3, #128	; 0x80
 800e6e0:	025b      	lsls	r3, r3, #9
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	d040      	beq.n	800e768 <HAL_RCC_OscConfig+0x5a8>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6a1b      	ldr	r3, [r3, #32]
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d03c      	beq.n	800e768 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e0e6      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6a1b      	ldr	r3, [r3, #32]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d01b      	beq.n	800e732 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800e6fa:	4b50      	ldr	r3, [pc, #320]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e6fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6fe:	4b4f      	ldr	r3, [pc, #316]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e700:	2180      	movs	r1, #128	; 0x80
 800e702:	0249      	lsls	r1, r1, #9
 800e704:	430a      	orrs	r2, r1
 800e706:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e708:	f7ff fa20 	bl	800db4c <HAL_GetTick>
 800e70c:	0003      	movs	r3, r0
 800e70e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800e710:	e008      	b.n	800e724 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e712:	f7ff fa1b 	bl	800db4c <HAL_GetTick>
 800e716:	0002      	movs	r2, r0
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	1ad3      	subs	r3, r2, r3
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d901      	bls.n	800e724 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800e720:	2303      	movs	r3, #3
 800e722:	e0cd      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800e724:	4b45      	ldr	r3, [pc, #276]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e728:	2380      	movs	r3, #128	; 0x80
 800e72a:	025b      	lsls	r3, r3, #9
 800e72c:	4013      	ands	r3, r2
 800e72e:	d0f0      	beq.n	800e712 <HAL_RCC_OscConfig+0x552>
 800e730:	e01b      	b.n	800e76a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800e732:	4b42      	ldr	r3, [pc, #264]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e736:	4b41      	ldr	r3, [pc, #260]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e738:	4943      	ldr	r1, [pc, #268]	; (800e848 <HAL_RCC_OscConfig+0x688>)
 800e73a:	400a      	ands	r2, r1
 800e73c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e73e:	f7ff fa05 	bl	800db4c <HAL_GetTick>
 800e742:	0003      	movs	r3, r0
 800e744:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800e746:	e008      	b.n	800e75a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e748:	f7ff fa00 	bl	800db4c <HAL_GetTick>
 800e74c:	0002      	movs	r2, r0
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	1ad3      	subs	r3, r2, r3
 800e752:	2b02      	cmp	r3, #2
 800e754:	d901      	bls.n	800e75a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800e756:	2303      	movs	r3, #3
 800e758:	e0b2      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800e75a:	4b38      	ldr	r3, [pc, #224]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e75c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e75e:	2380      	movs	r3, #128	; 0x80
 800e760:	025b      	lsls	r3, r3, #9
 800e762:	4013      	ands	r3, r2
 800e764:	d1f0      	bne.n	800e748 <HAL_RCC_OscConfig+0x588>
 800e766:	e000      	b.n	800e76a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800e768:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d100      	bne.n	800e774 <HAL_RCC_OscConfig+0x5b4>
 800e772:	e0a4      	b.n	800e8be <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e774:	4b31      	ldr	r3, [pc, #196]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	220c      	movs	r2, #12
 800e77a:	4013      	ands	r3, r2
 800e77c:	2b08      	cmp	r3, #8
 800e77e:	d100      	bne.n	800e782 <HAL_RCC_OscConfig+0x5c2>
 800e780:	e078      	b.n	800e874 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e786:	2b02      	cmp	r3, #2
 800e788:	d14c      	bne.n	800e824 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e78a:	4b2c      	ldr	r3, [pc, #176]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	4b2b      	ldr	r3, [pc, #172]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e790:	492e      	ldr	r1, [pc, #184]	; (800e84c <HAL_RCC_OscConfig+0x68c>)
 800e792:	400a      	ands	r2, r1
 800e794:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e796:	f7ff f9d9 	bl	800db4c <HAL_GetTick>
 800e79a:	0003      	movs	r3, r0
 800e79c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e79e:	e008      	b.n	800e7b2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e7a0:	f7ff f9d4 	bl	800db4c <HAL_GetTick>
 800e7a4:	0002      	movs	r2, r0
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	2b02      	cmp	r3, #2
 800e7ac:	d901      	bls.n	800e7b2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	e086      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e7b2:	4b22      	ldr	r3, [pc, #136]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	2380      	movs	r3, #128	; 0x80
 800e7b8:	049b      	lsls	r3, r3, #18
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	d1f0      	bne.n	800e7a0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e7be:	4b1f      	ldr	r3, [pc, #124]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c2:	220f      	movs	r2, #15
 800e7c4:	4393      	bics	r3, r2
 800e7c6:	0019      	movs	r1, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7cc:	4b1b      	ldr	r3, [pc, #108]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e7ce:	430a      	orrs	r2, r1
 800e7d0:	62da      	str	r2, [r3, #44]	; 0x2c
 800e7d2:	4b1a      	ldr	r3, [pc, #104]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	4a1e      	ldr	r2, [pc, #120]	; (800e850 <HAL_RCC_OscConfig+0x690>)
 800e7d8:	4013      	ands	r3, r2
 800e7da:	0019      	movs	r1, r3
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e4:	431a      	orrs	r2, r3
 800e7e6:	4b15      	ldr	r3, [pc, #84]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e7e8:	430a      	orrs	r2, r1
 800e7ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e7ec:	4b13      	ldr	r3, [pc, #76]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	4b12      	ldr	r3, [pc, #72]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e7f2:	2180      	movs	r1, #128	; 0x80
 800e7f4:	0449      	lsls	r1, r1, #17
 800e7f6:	430a      	orrs	r2, r1
 800e7f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e7fa:	f7ff f9a7 	bl	800db4c <HAL_GetTick>
 800e7fe:	0003      	movs	r3, r0
 800e800:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800e802:	e008      	b.n	800e816 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e804:	f7ff f9a2 	bl	800db4c <HAL_GetTick>
 800e808:	0002      	movs	r2, r0
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	2b02      	cmp	r3, #2
 800e810:	d901      	bls.n	800e816 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800e812:	2303      	movs	r3, #3
 800e814:	e054      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800e816:	4b09      	ldr	r3, [pc, #36]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	2380      	movs	r3, #128	; 0x80
 800e81c:	049b      	lsls	r3, r3, #18
 800e81e:	4013      	ands	r3, r2
 800e820:	d0f0      	beq.n	800e804 <HAL_RCC_OscConfig+0x644>
 800e822:	e04c      	b.n	800e8be <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e824:	4b05      	ldr	r3, [pc, #20]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	4b04      	ldr	r3, [pc, #16]	; (800e83c <HAL_RCC_OscConfig+0x67c>)
 800e82a:	4908      	ldr	r1, [pc, #32]	; (800e84c <HAL_RCC_OscConfig+0x68c>)
 800e82c:	400a      	ands	r2, r1
 800e82e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e830:	f7ff f98c 	bl	800db4c <HAL_GetTick>
 800e834:	0003      	movs	r3, r0
 800e836:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e838:	e015      	b.n	800e866 <HAL_RCC_OscConfig+0x6a6>
 800e83a:	46c0      	nop			; (mov r8, r8)
 800e83c:	40021000 	.word	0x40021000
 800e840:	00001388 	.word	0x00001388
 800e844:	efffffff 	.word	0xefffffff
 800e848:	fffeffff 	.word	0xfffeffff
 800e84c:	feffffff 	.word	0xfeffffff
 800e850:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800e854:	f7ff f97a 	bl	800db4c <HAL_GetTick>
 800e858:	0002      	movs	r2, r0
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d901      	bls.n	800e866 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800e862:	2303      	movs	r3, #3
 800e864:	e02c      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800e866:	4b18      	ldr	r3, [pc, #96]	; (800e8c8 <HAL_RCC_OscConfig+0x708>)
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	2380      	movs	r3, #128	; 0x80
 800e86c:	049b      	lsls	r3, r3, #18
 800e86e:	4013      	ands	r3, r2
 800e870:	d1f0      	bne.n	800e854 <HAL_RCC_OscConfig+0x694>
 800e872:	e024      	b.n	800e8be <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d101      	bne.n	800e880 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800e87c:	2301      	movs	r3, #1
 800e87e:	e01f      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800e880:	4b11      	ldr	r3, [pc, #68]	; (800e8c8 <HAL_RCC_OscConfig+0x708>)
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800e886:	4b10      	ldr	r3, [pc, #64]	; (800e8c8 <HAL_RCC_OscConfig+0x708>)
 800e888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800e88c:	697a      	ldr	r2, [r7, #20]
 800e88e:	23c0      	movs	r3, #192	; 0xc0
 800e890:	025b      	lsls	r3, r3, #9
 800e892:	401a      	ands	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e898:	429a      	cmp	r2, r3
 800e89a:	d10e      	bne.n	800e8ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	220f      	movs	r2, #15
 800e8a0:	401a      	ands	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d107      	bne.n	800e8ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	23f0      	movs	r3, #240	; 0xf0
 800e8ae:	039b      	lsls	r3, r3, #14
 800e8b0:	401a      	ands	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d001      	beq.n	800e8be <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e000      	b.n	800e8c0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	0018      	movs	r0, r3
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	b008      	add	sp, #32
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	40021000 	.word	0x40021000

0800e8cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e0bf      	b.n	800ea60 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e8e0:	4b61      	ldr	r3, [pc, #388]	; (800ea68 <HAL_RCC_ClockConfig+0x19c>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	4013      	ands	r3, r2
 800e8e8:	683a      	ldr	r2, [r7, #0]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d911      	bls.n	800e912 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e8ee:	4b5e      	ldr	r3, [pc, #376]	; (800ea68 <HAL_RCC_ClockConfig+0x19c>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	4393      	bics	r3, r2
 800e8f6:	0019      	movs	r1, r3
 800e8f8:	4b5b      	ldr	r3, [pc, #364]	; (800ea68 <HAL_RCC_ClockConfig+0x19c>)
 800e8fa:	683a      	ldr	r2, [r7, #0]
 800e8fc:	430a      	orrs	r2, r1
 800e8fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e900:	4b59      	ldr	r3, [pc, #356]	; (800ea68 <HAL_RCC_ClockConfig+0x19c>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2201      	movs	r2, #1
 800e906:	4013      	ands	r3, r2
 800e908:	683a      	ldr	r2, [r7, #0]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d001      	beq.n	800e912 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800e90e:	2301      	movs	r3, #1
 800e910:	e0a6      	b.n	800ea60 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2202      	movs	r2, #2
 800e918:	4013      	ands	r3, r2
 800e91a:	d015      	beq.n	800e948 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2204      	movs	r2, #4
 800e922:	4013      	ands	r3, r2
 800e924:	d006      	beq.n	800e934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800e926:	4b51      	ldr	r3, [pc, #324]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e928:	685a      	ldr	r2, [r3, #4]
 800e92a:	4b50      	ldr	r3, [pc, #320]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e92c:	21e0      	movs	r1, #224	; 0xe0
 800e92e:	00c9      	lsls	r1, r1, #3
 800e930:	430a      	orrs	r2, r1
 800e932:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e934:	4b4d      	ldr	r3, [pc, #308]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	22f0      	movs	r2, #240	; 0xf0
 800e93a:	4393      	bics	r3, r2
 800e93c:	0019      	movs	r1, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	689a      	ldr	r2, [r3, #8]
 800e942:	4b4a      	ldr	r3, [pc, #296]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e944:	430a      	orrs	r2, r1
 800e946:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	2201      	movs	r2, #1
 800e94e:	4013      	ands	r3, r2
 800e950:	d04c      	beq.n	800e9ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	2b01      	cmp	r3, #1
 800e958:	d107      	bne.n	800e96a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e95a:	4b44      	ldr	r3, [pc, #272]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e95c:	681a      	ldr	r2, [r3, #0]
 800e95e:	2380      	movs	r3, #128	; 0x80
 800e960:	029b      	lsls	r3, r3, #10
 800e962:	4013      	ands	r3, r2
 800e964:	d120      	bne.n	800e9a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800e966:	2301      	movs	r3, #1
 800e968:	e07a      	b.n	800ea60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	2b02      	cmp	r3, #2
 800e970:	d107      	bne.n	800e982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e972:	4b3e      	ldr	r3, [pc, #248]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	2380      	movs	r3, #128	; 0x80
 800e978:	049b      	lsls	r3, r3, #18
 800e97a:	4013      	ands	r3, r2
 800e97c:	d114      	bne.n	800e9a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800e97e:	2301      	movs	r3, #1
 800e980:	e06e      	b.n	800ea60 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	2b03      	cmp	r3, #3
 800e988:	d107      	bne.n	800e99a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800e98a:	4b38      	ldr	r3, [pc, #224]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e98c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e98e:	2380      	movs	r3, #128	; 0x80
 800e990:	025b      	lsls	r3, r3, #9
 800e992:	4013      	ands	r3, r2
 800e994:	d108      	bne.n	800e9a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	e062      	b.n	800ea60 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e99a:	4b34      	ldr	r3, [pc, #208]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2202      	movs	r2, #2
 800e9a0:	4013      	ands	r3, r2
 800e9a2:	d101      	bne.n	800e9a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e05b      	b.n	800ea60 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e9a8:	4b30      	ldr	r3, [pc, #192]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	2203      	movs	r2, #3
 800e9ae:	4393      	bics	r3, r2
 800e9b0:	0019      	movs	r1, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	685a      	ldr	r2, [r3, #4]
 800e9b6:	4b2d      	ldr	r3, [pc, #180]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e9b8:	430a      	orrs	r2, r1
 800e9ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e9bc:	f7ff f8c6 	bl	800db4c <HAL_GetTick>
 800e9c0:	0003      	movs	r3, r0
 800e9c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e9c4:	e009      	b.n	800e9da <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e9c6:	f7ff f8c1 	bl	800db4c <HAL_GetTick>
 800e9ca:	0002      	movs	r2, r0
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	4a27      	ldr	r2, [pc, #156]	; (800ea70 <HAL_RCC_ClockConfig+0x1a4>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d901      	bls.n	800e9da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e9d6:	2303      	movs	r3, #3
 800e9d8:	e042      	b.n	800ea60 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e9da:	4b24      	ldr	r3, [pc, #144]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	220c      	movs	r2, #12
 800e9e0:	401a      	ands	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	009b      	lsls	r3, r3, #2
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d1ec      	bne.n	800e9c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e9ec:	4b1e      	ldr	r3, [pc, #120]	; (800ea68 <HAL_RCC_ClockConfig+0x19c>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	4013      	ands	r3, r2
 800e9f4:	683a      	ldr	r2, [r7, #0]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d211      	bcs.n	800ea1e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e9fa:	4b1b      	ldr	r3, [pc, #108]	; (800ea68 <HAL_RCC_ClockConfig+0x19c>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2201      	movs	r2, #1
 800ea00:	4393      	bics	r3, r2
 800ea02:	0019      	movs	r1, r3
 800ea04:	4b18      	ldr	r3, [pc, #96]	; (800ea68 <HAL_RCC_ClockConfig+0x19c>)
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	430a      	orrs	r2, r1
 800ea0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ea0c:	4b16      	ldr	r3, [pc, #88]	; (800ea68 <HAL_RCC_ClockConfig+0x19c>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2201      	movs	r2, #1
 800ea12:	4013      	ands	r3, r2
 800ea14:	683a      	ldr	r2, [r7, #0]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d001      	beq.n	800ea1e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e020      	b.n	800ea60 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	2204      	movs	r2, #4
 800ea24:	4013      	ands	r3, r2
 800ea26:	d009      	beq.n	800ea3c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800ea28:	4b10      	ldr	r3, [pc, #64]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	4a11      	ldr	r2, [pc, #68]	; (800ea74 <HAL_RCC_ClockConfig+0x1a8>)
 800ea2e:	4013      	ands	r3, r2
 800ea30:	0019      	movs	r1, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	68da      	ldr	r2, [r3, #12]
 800ea36:	4b0d      	ldr	r3, [pc, #52]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800ea38:	430a      	orrs	r2, r1
 800ea3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800ea3c:	f000 f820 	bl	800ea80 <HAL_RCC_GetSysClockFreq>
 800ea40:	0001      	movs	r1, r0
 800ea42:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <HAL_RCC_ClockConfig+0x1a0>)
 800ea44:	685b      	ldr	r3, [r3, #4]
 800ea46:	091b      	lsrs	r3, r3, #4
 800ea48:	220f      	movs	r2, #15
 800ea4a:	4013      	ands	r3, r2
 800ea4c:	4a0a      	ldr	r2, [pc, #40]	; (800ea78 <HAL_RCC_ClockConfig+0x1ac>)
 800ea4e:	5cd3      	ldrb	r3, [r2, r3]
 800ea50:	000a      	movs	r2, r1
 800ea52:	40da      	lsrs	r2, r3
 800ea54:	4b09      	ldr	r3, [pc, #36]	; (800ea7c <HAL_RCC_ClockConfig+0x1b0>)
 800ea56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800ea58:	2003      	movs	r0, #3
 800ea5a:	f7ff f831 	bl	800dac0 <HAL_InitTick>
  
  return HAL_OK;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	0018      	movs	r0, r3
 800ea62:	46bd      	mov	sp, r7
 800ea64:	b004      	add	sp, #16
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	40022000 	.word	0x40022000
 800ea6c:	40021000 	.word	0x40021000
 800ea70:	00001388 	.word	0x00001388
 800ea74:	fffff8ff 	.word	0xfffff8ff
 800ea78:	080142d0 	.word	0x080142d0
 800ea7c:	200000d4 	.word	0x200000d4

0800ea80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ea80:	b590      	push	{r4, r7, lr}
 800ea82:	b08f      	sub	sp, #60	; 0x3c
 800ea84:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800ea86:	2314      	movs	r3, #20
 800ea88:	18fb      	adds	r3, r7, r3
 800ea8a:	4a38      	ldr	r2, [pc, #224]	; (800eb6c <HAL_RCC_GetSysClockFreq+0xec>)
 800ea8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800ea8e:	c313      	stmia	r3!, {r0, r1, r4}
 800ea90:	6812      	ldr	r2, [r2, #0]
 800ea92:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800ea94:	1d3b      	adds	r3, r7, #4
 800ea96:	4a36      	ldr	r2, [pc, #216]	; (800eb70 <HAL_RCC_GetSysClockFreq+0xf0>)
 800ea98:	ca13      	ldmia	r2!, {r0, r1, r4}
 800ea9a:	c313      	stmia	r3!, {r0, r1, r4}
 800ea9c:	6812      	ldr	r2, [r2, #0]
 800ea9e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	62bb      	str	r3, [r7, #40]	; 0x28
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	637b      	str	r3, [r7, #52]	; 0x34
 800eaac:	2300      	movs	r3, #0
 800eaae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800eab0:	2300      	movs	r3, #0
 800eab2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800eab4:	4b2f      	ldr	r3, [pc, #188]	; (800eb74 <HAL_RCC_GetSysClockFreq+0xf4>)
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800eaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabc:	220c      	movs	r2, #12
 800eabe:	4013      	ands	r3, r2
 800eac0:	2b0c      	cmp	r3, #12
 800eac2:	d047      	beq.n	800eb54 <HAL_RCC_GetSysClockFreq+0xd4>
 800eac4:	d849      	bhi.n	800eb5a <HAL_RCC_GetSysClockFreq+0xda>
 800eac6:	2b04      	cmp	r3, #4
 800eac8:	d002      	beq.n	800ead0 <HAL_RCC_GetSysClockFreq+0x50>
 800eaca:	2b08      	cmp	r3, #8
 800eacc:	d003      	beq.n	800ead6 <HAL_RCC_GetSysClockFreq+0x56>
 800eace:	e044      	b.n	800eb5a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ead0:	4b29      	ldr	r3, [pc, #164]	; (800eb78 <HAL_RCC_GetSysClockFreq+0xf8>)
 800ead2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800ead4:	e044      	b.n	800eb60 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	0c9b      	lsrs	r3, r3, #18
 800eada:	220f      	movs	r2, #15
 800eadc:	4013      	ands	r3, r2
 800eade:	2214      	movs	r2, #20
 800eae0:	18ba      	adds	r2, r7, r2
 800eae2:	5cd3      	ldrb	r3, [r2, r3]
 800eae4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800eae6:	4b23      	ldr	r3, [pc, #140]	; (800eb74 <HAL_RCC_GetSysClockFreq+0xf4>)
 800eae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaea:	220f      	movs	r2, #15
 800eaec:	4013      	ands	r3, r2
 800eaee:	1d3a      	adds	r2, r7, #4
 800eaf0:	5cd3      	ldrb	r3, [r2, r3]
 800eaf2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800eaf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaf6:	23c0      	movs	r3, #192	; 0xc0
 800eaf8:	025b      	lsls	r3, r3, #9
 800eafa:	401a      	ands	r2, r3
 800eafc:	2380      	movs	r3, #128	; 0x80
 800eafe:	025b      	lsls	r3, r3, #9
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d109      	bne.n	800eb18 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800eb04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb06:	481c      	ldr	r0, [pc, #112]	; (800eb78 <HAL_RCC_GetSysClockFreq+0xf8>)
 800eb08:	f7fa fb1a 	bl	8009140 <__udivsi3>
 800eb0c:	0003      	movs	r3, r0
 800eb0e:	001a      	movs	r2, r3
 800eb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb12:	4353      	muls	r3, r2
 800eb14:	637b      	str	r3, [r7, #52]	; 0x34
 800eb16:	e01a      	b.n	800eb4e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800eb18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb1a:	23c0      	movs	r3, #192	; 0xc0
 800eb1c:	025b      	lsls	r3, r3, #9
 800eb1e:	401a      	ands	r2, r3
 800eb20:	23c0      	movs	r3, #192	; 0xc0
 800eb22:	025b      	lsls	r3, r3, #9
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d109      	bne.n	800eb3c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800eb28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb2a:	4814      	ldr	r0, [pc, #80]	; (800eb7c <HAL_RCC_GetSysClockFreq+0xfc>)
 800eb2c:	f7fa fb08 	bl	8009140 <__udivsi3>
 800eb30:	0003      	movs	r3, r0
 800eb32:	001a      	movs	r2, r3
 800eb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb36:	4353      	muls	r3, r2
 800eb38:	637b      	str	r3, [r7, #52]	; 0x34
 800eb3a:	e008      	b.n	800eb4e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800eb3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb3e:	480e      	ldr	r0, [pc, #56]	; (800eb78 <HAL_RCC_GetSysClockFreq+0xf8>)
 800eb40:	f7fa fafe 	bl	8009140 <__udivsi3>
 800eb44:	0003      	movs	r3, r0
 800eb46:	001a      	movs	r2, r3
 800eb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4a:	4353      	muls	r3, r2
 800eb4c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800eb4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800eb52:	e005      	b.n	800eb60 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800eb54:	4b09      	ldr	r3, [pc, #36]	; (800eb7c <HAL_RCC_GetSysClockFreq+0xfc>)
 800eb56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800eb58:	e002      	b.n	800eb60 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800eb5a:	4b07      	ldr	r3, [pc, #28]	; (800eb78 <HAL_RCC_GetSysClockFreq+0xf8>)
 800eb5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800eb5e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800eb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800eb62:	0018      	movs	r0, r3
 800eb64:	46bd      	mov	sp, r7
 800eb66:	b00f      	add	sp, #60	; 0x3c
 800eb68:	bd90      	pop	{r4, r7, pc}
 800eb6a:	46c0      	nop			; (mov r8, r8)
 800eb6c:	080141b0 	.word	0x080141b0
 800eb70:	080141c0 	.word	0x080141c0
 800eb74:	40021000 	.word	0x40021000
 800eb78:	007a1200 	.word	0x007a1200
 800eb7c:	02dc6c00 	.word	0x02dc6c00

0800eb80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800eb84:	4b02      	ldr	r3, [pc, #8]	; (800eb90 <HAL_RCC_GetHCLKFreq+0x10>)
 800eb86:	681b      	ldr	r3, [r3, #0]
}
 800eb88:	0018      	movs	r0, r3
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	46c0      	nop			; (mov r8, r8)
 800eb90:	200000d4 	.word	0x200000d4

0800eb94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800eb98:	f7ff fff2 	bl	800eb80 <HAL_RCC_GetHCLKFreq>
 800eb9c:	0001      	movs	r1, r0
 800eb9e:	4b06      	ldr	r3, [pc, #24]	; (800ebb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	0a1b      	lsrs	r3, r3, #8
 800eba4:	2207      	movs	r2, #7
 800eba6:	4013      	ands	r3, r2
 800eba8:	4a04      	ldr	r2, [pc, #16]	; (800ebbc <HAL_RCC_GetPCLK1Freq+0x28>)
 800ebaa:	5cd3      	ldrb	r3, [r2, r3]
 800ebac:	40d9      	lsrs	r1, r3
 800ebae:	000b      	movs	r3, r1
}    
 800ebb0:	0018      	movs	r0, r3
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	46c0      	nop			; (mov r8, r8)
 800ebb8:	40021000 	.word	0x40021000
 800ebbc:	080142e0 	.word	0x080142e0

0800ebc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b086      	sub	sp, #24
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	2380      	movs	r3, #128	; 0x80
 800ebd6:	025b      	lsls	r3, r3, #9
 800ebd8:	4013      	ands	r3, r2
 800ebda:	d100      	bne.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800ebdc:	e08e      	b.n	800ecfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800ebde:	2017      	movs	r0, #23
 800ebe0:	183b      	adds	r3, r7, r0
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ebe6:	4b6e      	ldr	r3, [pc, #440]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ebe8:	69da      	ldr	r2, [r3, #28]
 800ebea:	2380      	movs	r3, #128	; 0x80
 800ebec:	055b      	lsls	r3, r3, #21
 800ebee:	4013      	ands	r3, r2
 800ebf0:	d110      	bne.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ebf2:	4b6b      	ldr	r3, [pc, #428]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ebf4:	69da      	ldr	r2, [r3, #28]
 800ebf6:	4b6a      	ldr	r3, [pc, #424]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ebf8:	2180      	movs	r1, #128	; 0x80
 800ebfa:	0549      	lsls	r1, r1, #21
 800ebfc:	430a      	orrs	r2, r1
 800ebfe:	61da      	str	r2, [r3, #28]
 800ec00:	4b67      	ldr	r3, [pc, #412]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ec02:	69da      	ldr	r2, [r3, #28]
 800ec04:	2380      	movs	r3, #128	; 0x80
 800ec06:	055b      	lsls	r3, r3, #21
 800ec08:	4013      	ands	r3, r2
 800ec0a:	60bb      	str	r3, [r7, #8]
 800ec0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ec0e:	183b      	adds	r3, r7, r0
 800ec10:	2201      	movs	r2, #1
 800ec12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ec14:	4b63      	ldr	r3, [pc, #396]	; (800eda4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	2380      	movs	r3, #128	; 0x80
 800ec1a:	005b      	lsls	r3, r3, #1
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	d11a      	bne.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ec20:	4b60      	ldr	r3, [pc, #384]	; (800eda4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	4b5f      	ldr	r3, [pc, #380]	; (800eda4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800ec26:	2180      	movs	r1, #128	; 0x80
 800ec28:	0049      	lsls	r1, r1, #1
 800ec2a:	430a      	orrs	r2, r1
 800ec2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ec2e:	f7fe ff8d 	bl	800db4c <HAL_GetTick>
 800ec32:	0003      	movs	r3, r0
 800ec34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ec36:	e008      	b.n	800ec4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ec38:	f7fe ff88 	bl	800db4c <HAL_GetTick>
 800ec3c:	0002      	movs	r2, r0
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	1ad3      	subs	r3, r2, r3
 800ec42:	2b64      	cmp	r3, #100	; 0x64
 800ec44:	d901      	bls.n	800ec4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800ec46:	2303      	movs	r3, #3
 800ec48:	e0a6      	b.n	800ed98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ec4a:	4b56      	ldr	r3, [pc, #344]	; (800eda4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	2380      	movs	r3, #128	; 0x80
 800ec50:	005b      	lsls	r3, r3, #1
 800ec52:	4013      	ands	r3, r2
 800ec54:	d0f0      	beq.n	800ec38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ec56:	4b52      	ldr	r3, [pc, #328]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ec58:	6a1a      	ldr	r2, [r3, #32]
 800ec5a:	23c0      	movs	r3, #192	; 0xc0
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	4013      	ands	r3, r2
 800ec60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d034      	beq.n	800ecd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	23c0      	movs	r3, #192	; 0xc0
 800ec6e:	009b      	lsls	r3, r3, #2
 800ec70:	4013      	ands	r3, r2
 800ec72:	68fa      	ldr	r2, [r7, #12]
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d02c      	beq.n	800ecd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ec78:	4b49      	ldr	r3, [pc, #292]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ec7a:	6a1b      	ldr	r3, [r3, #32]
 800ec7c:	4a4a      	ldr	r2, [pc, #296]	; (800eda8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800ec7e:	4013      	ands	r3, r2
 800ec80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ec82:	4b47      	ldr	r3, [pc, #284]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ec84:	6a1a      	ldr	r2, [r3, #32]
 800ec86:	4b46      	ldr	r3, [pc, #280]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ec88:	2180      	movs	r1, #128	; 0x80
 800ec8a:	0249      	lsls	r1, r1, #9
 800ec8c:	430a      	orrs	r2, r1
 800ec8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ec90:	4b43      	ldr	r3, [pc, #268]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ec92:	6a1a      	ldr	r2, [r3, #32]
 800ec94:	4b42      	ldr	r3, [pc, #264]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ec96:	4945      	ldr	r1, [pc, #276]	; (800edac <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800ec98:	400a      	ands	r2, r1
 800ec9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800ec9c:	4b40      	ldr	r3, [pc, #256]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2201      	movs	r2, #1
 800eca6:	4013      	ands	r3, r2
 800eca8:	d013      	beq.n	800ecd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecaa:	f7fe ff4f 	bl	800db4c <HAL_GetTick>
 800ecae:	0003      	movs	r3, r0
 800ecb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ecb2:	e009      	b.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ecb4:	f7fe ff4a 	bl	800db4c <HAL_GetTick>
 800ecb8:	0002      	movs	r2, r0
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	4a3c      	ldr	r2, [pc, #240]	; (800edb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d901      	bls.n	800ecc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800ecc4:	2303      	movs	r3, #3
 800ecc6:	e067      	b.n	800ed98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ecc8:	4b35      	ldr	r3, [pc, #212]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ecca:	6a1b      	ldr	r3, [r3, #32]
 800eccc:	2202      	movs	r2, #2
 800ecce:	4013      	ands	r3, r2
 800ecd0:	d0f0      	beq.n	800ecb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ecd2:	4b33      	ldr	r3, [pc, #204]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ecd4:	6a1b      	ldr	r3, [r3, #32]
 800ecd6:	4a34      	ldr	r2, [pc, #208]	; (800eda8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800ecd8:	4013      	ands	r3, r2
 800ecda:	0019      	movs	r1, r3
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	685a      	ldr	r2, [r3, #4]
 800ece0:	4b2f      	ldr	r3, [pc, #188]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ece2:	430a      	orrs	r2, r1
 800ece4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ece6:	2317      	movs	r3, #23
 800ece8:	18fb      	adds	r3, r7, r3
 800ecea:	781b      	ldrb	r3, [r3, #0]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d105      	bne.n	800ecfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ecf0:	4b2b      	ldr	r3, [pc, #172]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ecf2:	69da      	ldr	r2, [r3, #28]
 800ecf4:	4b2a      	ldr	r3, [pc, #168]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ecf6:	492f      	ldr	r1, [pc, #188]	; (800edb4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800ecf8:	400a      	ands	r2, r1
 800ecfa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2201      	movs	r2, #1
 800ed02:	4013      	ands	r3, r2
 800ed04:	d009      	beq.n	800ed1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ed06:	4b26      	ldr	r3, [pc, #152]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ed08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed0a:	2203      	movs	r2, #3
 800ed0c:	4393      	bics	r3, r2
 800ed0e:	0019      	movs	r1, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	689a      	ldr	r2, [r3, #8]
 800ed14:	4b22      	ldr	r3, [pc, #136]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ed16:	430a      	orrs	r2, r1
 800ed18:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2202      	movs	r2, #2
 800ed20:	4013      	ands	r3, r2
 800ed22:	d009      	beq.n	800ed38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ed24:	4b1e      	ldr	r3, [pc, #120]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ed26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed28:	4a23      	ldr	r2, [pc, #140]	; (800edb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ed2a:	4013      	ands	r3, r2
 800ed2c:	0019      	movs	r1, r3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	68da      	ldr	r2, [r3, #12]
 800ed32:	4b1b      	ldr	r3, [pc, #108]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ed34:	430a      	orrs	r2, r1
 800ed36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2220      	movs	r2, #32
 800ed3e:	4013      	ands	r3, r2
 800ed40:	d009      	beq.n	800ed56 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ed42:	4b17      	ldr	r3, [pc, #92]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ed44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed46:	2210      	movs	r2, #16
 800ed48:	4393      	bics	r3, r2
 800ed4a:	0019      	movs	r1, r3
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	691a      	ldr	r2, [r3, #16]
 800ed50:	4b13      	ldr	r3, [pc, #76]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ed52:	430a      	orrs	r2, r1
 800ed54:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	2380      	movs	r3, #128	; 0x80
 800ed5c:	029b      	lsls	r3, r3, #10
 800ed5e:	4013      	ands	r3, r2
 800ed60:	d009      	beq.n	800ed76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ed62:	4b0f      	ldr	r3, [pc, #60]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ed64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed66:	2280      	movs	r2, #128	; 0x80
 800ed68:	4393      	bics	r3, r2
 800ed6a:	0019      	movs	r1, r3
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	699a      	ldr	r2, [r3, #24]
 800ed70:	4b0b      	ldr	r3, [pc, #44]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ed72:	430a      	orrs	r2, r1
 800ed74:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	2380      	movs	r3, #128	; 0x80
 800ed7c:	00db      	lsls	r3, r3, #3
 800ed7e:	4013      	ands	r3, r2
 800ed80:	d009      	beq.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ed82:	4b07      	ldr	r3, [pc, #28]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ed84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed86:	2240      	movs	r2, #64	; 0x40
 800ed88:	4393      	bics	r3, r2
 800ed8a:	0019      	movs	r1, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	695a      	ldr	r2, [r3, #20]
 800ed90:	4b03      	ldr	r3, [pc, #12]	; (800eda0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800ed92:	430a      	orrs	r2, r1
 800ed94:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800ed96:	2300      	movs	r3, #0
}
 800ed98:	0018      	movs	r0, r3
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	b006      	add	sp, #24
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	40021000 	.word	0x40021000
 800eda4:	40007000 	.word	0x40007000
 800eda8:	fffffcff 	.word	0xfffffcff
 800edac:	fffeffff 	.word	0xfffeffff
 800edb0:	00001388 	.word	0x00001388
 800edb4:	efffffff 	.word	0xefffffff
 800edb8:	fffcffff 	.word	0xfffcffff

0800edbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e0a8      	b.n	800ef20 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d109      	bne.n	800edea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	685a      	ldr	r2, [r3, #4]
 800edda:	2382      	movs	r3, #130	; 0x82
 800eddc:	005b      	lsls	r3, r3, #1
 800edde:	429a      	cmp	r2, r3
 800ede0:	d009      	beq.n	800edf6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	61da      	str	r2, [r3, #28]
 800ede8:	e005      	b.n	800edf6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	225d      	movs	r2, #93	; 0x5d
 800ee00:	5c9b      	ldrb	r3, [r3, r2]
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d107      	bne.n	800ee18 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	225c      	movs	r2, #92	; 0x5c
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	0018      	movs	r0, r3
 800ee14:	f7fe fca4 	bl	800d760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	225d      	movs	r2, #93	; 0x5d
 800ee1c:	2102      	movs	r1, #2
 800ee1e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2140      	movs	r1, #64	; 0x40
 800ee2c:	438a      	bics	r2, r1
 800ee2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	68da      	ldr	r2, [r3, #12]
 800ee34:	23e0      	movs	r3, #224	; 0xe0
 800ee36:	00db      	lsls	r3, r3, #3
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d902      	bls.n	800ee42 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	60fb      	str	r3, [r7, #12]
 800ee40:	e002      	b.n	800ee48 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ee42:	2380      	movs	r3, #128	; 0x80
 800ee44:	015b      	lsls	r3, r3, #5
 800ee46:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	68da      	ldr	r2, [r3, #12]
 800ee4c:	23f0      	movs	r3, #240	; 0xf0
 800ee4e:	011b      	lsls	r3, r3, #4
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d008      	beq.n	800ee66 <HAL_SPI_Init+0xaa>
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	68da      	ldr	r2, [r3, #12]
 800ee58:	23e0      	movs	r3, #224	; 0xe0
 800ee5a:	00db      	lsls	r3, r3, #3
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d002      	beq.n	800ee66 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	685a      	ldr	r2, [r3, #4]
 800ee6a:	2382      	movs	r3, #130	; 0x82
 800ee6c:	005b      	lsls	r3, r3, #1
 800ee6e:	401a      	ands	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6899      	ldr	r1, [r3, #8]
 800ee74:	2384      	movs	r3, #132	; 0x84
 800ee76:	021b      	lsls	r3, r3, #8
 800ee78:	400b      	ands	r3, r1
 800ee7a:	431a      	orrs	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	691b      	ldr	r3, [r3, #16]
 800ee80:	2102      	movs	r1, #2
 800ee82:	400b      	ands	r3, r1
 800ee84:	431a      	orrs	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	695b      	ldr	r3, [r3, #20]
 800ee8a:	2101      	movs	r1, #1
 800ee8c:	400b      	ands	r3, r1
 800ee8e:	431a      	orrs	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6999      	ldr	r1, [r3, #24]
 800ee94:	2380      	movs	r3, #128	; 0x80
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	400b      	ands	r3, r1
 800ee9a:	431a      	orrs	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	69db      	ldr	r3, [r3, #28]
 800eea0:	2138      	movs	r1, #56	; 0x38
 800eea2:	400b      	ands	r3, r1
 800eea4:	431a      	orrs	r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	2180      	movs	r1, #128	; 0x80
 800eeac:	400b      	ands	r3, r1
 800eeae:	431a      	orrs	r2, r3
 800eeb0:	0011      	movs	r1, r2
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eeb6:	2380      	movs	r3, #128	; 0x80
 800eeb8:	019b      	lsls	r3, r3, #6
 800eeba:	401a      	ands	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	430a      	orrs	r2, r1
 800eec2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	699b      	ldr	r3, [r3, #24]
 800eec8:	0c1b      	lsrs	r3, r3, #16
 800eeca:	2204      	movs	r2, #4
 800eecc:	401a      	ands	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed2:	2110      	movs	r1, #16
 800eed4:	400b      	ands	r3, r1
 800eed6:	431a      	orrs	r2, r3
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eedc:	2108      	movs	r1, #8
 800eede:	400b      	ands	r3, r1
 800eee0:	431a      	orrs	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	68d9      	ldr	r1, [r3, #12]
 800eee6:	23f0      	movs	r3, #240	; 0xf0
 800eee8:	011b      	lsls	r3, r3, #4
 800eeea:	400b      	ands	r3, r1
 800eeec:	431a      	orrs	r2, r3
 800eeee:	0011      	movs	r1, r2
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	2380      	movs	r3, #128	; 0x80
 800eef4:	015b      	lsls	r3, r3, #5
 800eef6:	401a      	ands	r2, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	430a      	orrs	r2, r1
 800eefe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	69da      	ldr	r2, [r3, #28]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4907      	ldr	r1, [pc, #28]	; (800ef28 <HAL_SPI_Init+0x16c>)
 800ef0c:	400a      	ands	r2, r1
 800ef0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2200      	movs	r2, #0
 800ef14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	225d      	movs	r2, #93	; 0x5d
 800ef1a:	2101      	movs	r1, #1
 800ef1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ef1e:	2300      	movs	r3, #0
}
 800ef20:	0018      	movs	r0, r3
 800ef22:	46bd      	mov	sp, r7
 800ef24:	b004      	add	sp, #16
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	fffff7ff 	.word	0xfffff7ff

0800ef2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b088      	sub	sp, #32
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	603b      	str	r3, [r7, #0]
 800ef38:	1dbb      	adds	r3, r7, #6
 800ef3a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef3c:	231f      	movs	r3, #31
 800ef3e:	18fb      	adds	r3, r7, r3
 800ef40:	2200      	movs	r2, #0
 800ef42:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	225c      	movs	r2, #92	; 0x5c
 800ef48:	5c9b      	ldrb	r3, [r3, r2]
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d101      	bne.n	800ef52 <HAL_SPI_Transmit+0x26>
 800ef4e:	2302      	movs	r3, #2
 800ef50:	e140      	b.n	800f1d4 <HAL_SPI_Transmit+0x2a8>
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	225c      	movs	r2, #92	; 0x5c
 800ef56:	2101      	movs	r1, #1
 800ef58:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef5a:	f7fe fdf7 	bl	800db4c <HAL_GetTick>
 800ef5e:	0003      	movs	r3, r0
 800ef60:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ef62:	2316      	movs	r3, #22
 800ef64:	18fb      	adds	r3, r7, r3
 800ef66:	1dba      	adds	r2, r7, #6
 800ef68:	8812      	ldrh	r2, [r2, #0]
 800ef6a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	225d      	movs	r2, #93	; 0x5d
 800ef70:	5c9b      	ldrb	r3, [r3, r2]
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d004      	beq.n	800ef82 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800ef78:	231f      	movs	r3, #31
 800ef7a:	18fb      	adds	r3, r7, r3
 800ef7c:	2202      	movs	r2, #2
 800ef7e:	701a      	strb	r2, [r3, #0]
    goto error;
 800ef80:	e11d      	b.n	800f1be <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d003      	beq.n	800ef90 <HAL_SPI_Transmit+0x64>
 800ef88:	1dbb      	adds	r3, r7, #6
 800ef8a:	881b      	ldrh	r3, [r3, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d104      	bne.n	800ef9a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800ef90:	231f      	movs	r3, #31
 800ef92:	18fb      	adds	r3, r7, r3
 800ef94:	2201      	movs	r2, #1
 800ef96:	701a      	strb	r2, [r3, #0]
    goto error;
 800ef98:	e111      	b.n	800f1be <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	225d      	movs	r2, #93	; 0x5d
 800ef9e:	2103      	movs	r1, #3
 800efa0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2200      	movs	r2, #0
 800efa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	68ba      	ldr	r2, [r7, #8]
 800efac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	1dba      	adds	r2, r7, #6
 800efb2:	8812      	ldrh	r2, [r2, #0]
 800efb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	1dba      	adds	r2, r7, #6
 800efba:	8812      	ldrh	r2, [r2, #0]
 800efbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2200      	movs	r2, #0
 800efc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2244      	movs	r2, #68	; 0x44
 800efc8:	2100      	movs	r1, #0
 800efca:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2246      	movs	r2, #70	; 0x46
 800efd0:	2100      	movs	r1, #0
 800efd2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2200      	movs	r2, #0
 800efde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	689a      	ldr	r2, [r3, #8]
 800efe4:	2380      	movs	r3, #128	; 0x80
 800efe6:	021b      	lsls	r3, r3, #8
 800efe8:	429a      	cmp	r2, r3
 800efea:	d110      	bne.n	800f00e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2140      	movs	r1, #64	; 0x40
 800eff8:	438a      	bics	r2, r1
 800effa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2180      	movs	r1, #128	; 0x80
 800f008:	01c9      	lsls	r1, r1, #7
 800f00a:	430a      	orrs	r2, r1
 800f00c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	2240      	movs	r2, #64	; 0x40
 800f016:	4013      	ands	r3, r2
 800f018:	2b40      	cmp	r3, #64	; 0x40
 800f01a:	d007      	beq.n	800f02c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2140      	movs	r1, #64	; 0x40
 800f028:	430a      	orrs	r2, r1
 800f02a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	68da      	ldr	r2, [r3, #12]
 800f030:	23e0      	movs	r3, #224	; 0xe0
 800f032:	00db      	lsls	r3, r3, #3
 800f034:	429a      	cmp	r2, r3
 800f036:	d94e      	bls.n	800f0d6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d004      	beq.n	800f04a <HAL_SPI_Transmit+0x11e>
 800f040:	2316      	movs	r3, #22
 800f042:	18fb      	adds	r3, r7, r3
 800f044:	881b      	ldrh	r3, [r3, #0]
 800f046:	2b01      	cmp	r3, #1
 800f048:	d13f      	bne.n	800f0ca <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f04e:	881a      	ldrh	r2, [r3, #0]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f05a:	1c9a      	adds	r2, r3, #2
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f064:	b29b      	uxth	r3, r3
 800f066:	3b01      	subs	r3, #1
 800f068:	b29a      	uxth	r2, r3
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f06e:	e02c      	b.n	800f0ca <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	689b      	ldr	r3, [r3, #8]
 800f076:	2202      	movs	r2, #2
 800f078:	4013      	ands	r3, r2
 800f07a:	2b02      	cmp	r3, #2
 800f07c:	d112      	bne.n	800f0a4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f082:	881a      	ldrh	r2, [r3, #0]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f08e:	1c9a      	adds	r2, r3, #2
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f098:	b29b      	uxth	r3, r3
 800f09a:	3b01      	subs	r3, #1
 800f09c:	b29a      	uxth	r2, r3
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f0a2:	e012      	b.n	800f0ca <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0a4:	f7fe fd52 	bl	800db4c <HAL_GetTick>
 800f0a8:	0002      	movs	r2, r0
 800f0aa:	69bb      	ldr	r3, [r7, #24]
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	683a      	ldr	r2, [r7, #0]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d802      	bhi.n	800f0ba <HAL_SPI_Transmit+0x18e>
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	d102      	bne.n	800f0c0 <HAL_SPI_Transmit+0x194>
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d104      	bne.n	800f0ca <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800f0c0:	231f      	movs	r3, #31
 800f0c2:	18fb      	adds	r3, r7, r3
 800f0c4:	2203      	movs	r2, #3
 800f0c6:	701a      	strb	r2, [r3, #0]
          goto error;
 800f0c8:	e079      	b.n	800f1be <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d1cd      	bne.n	800f070 <HAL_SPI_Transmit+0x144>
 800f0d4:	e04f      	b.n	800f176 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d004      	beq.n	800f0e8 <HAL_SPI_Transmit+0x1bc>
 800f0de:	2316      	movs	r3, #22
 800f0e0:	18fb      	adds	r3, r7, r3
 800f0e2:	881b      	ldrh	r3, [r3, #0]
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d141      	bne.n	800f16c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	330c      	adds	r3, #12
 800f0f2:	7812      	ldrb	r2, [r2, #0]
 800f0f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0fa:	1c5a      	adds	r2, r3, #1
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f104:	b29b      	uxth	r3, r3
 800f106:	3b01      	subs	r3, #1
 800f108:	b29a      	uxth	r2, r3
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800f10e:	e02d      	b.n	800f16c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	689b      	ldr	r3, [r3, #8]
 800f116:	2202      	movs	r2, #2
 800f118:	4013      	ands	r3, r2
 800f11a:	2b02      	cmp	r3, #2
 800f11c:	d113      	bne.n	800f146 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	330c      	adds	r3, #12
 800f128:	7812      	ldrb	r2, [r2, #0]
 800f12a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f130:	1c5a      	adds	r2, r3, #1
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	3b01      	subs	r3, #1
 800f13e:	b29a      	uxth	r2, r3
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f144:	e012      	b.n	800f16c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f146:	f7fe fd01 	bl	800db4c <HAL_GetTick>
 800f14a:	0002      	movs	r2, r0
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	683a      	ldr	r2, [r7, #0]
 800f152:	429a      	cmp	r2, r3
 800f154:	d802      	bhi.n	800f15c <HAL_SPI_Transmit+0x230>
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	3301      	adds	r3, #1
 800f15a:	d102      	bne.n	800f162 <HAL_SPI_Transmit+0x236>
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d104      	bne.n	800f16c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800f162:	231f      	movs	r3, #31
 800f164:	18fb      	adds	r3, r7, r3
 800f166:	2203      	movs	r2, #3
 800f168:	701a      	strb	r2, [r3, #0]
          goto error;
 800f16a:	e028      	b.n	800f1be <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f170:	b29b      	uxth	r3, r3
 800f172:	2b00      	cmp	r3, #0
 800f174:	d1cc      	bne.n	800f110 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f176:	69ba      	ldr	r2, [r7, #24]
 800f178:	6839      	ldr	r1, [r7, #0]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	0018      	movs	r0, r3
 800f17e:	f000 fcd9 	bl	800fb34 <SPI_EndRxTxTransaction>
 800f182:	1e03      	subs	r3, r0, #0
 800f184:	d002      	beq.n	800f18c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2220      	movs	r2, #32
 800f18a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d10a      	bne.n	800f1aa <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f194:	2300      	movs	r3, #0
 800f196:	613b      	str	r3, [r7, #16]
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	613b      	str	r3, [r7, #16]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	613b      	str	r3, [r7, #16]
 800f1a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d004      	beq.n	800f1bc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800f1b2:	231f      	movs	r3, #31
 800f1b4:	18fb      	adds	r3, r7, r3
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	701a      	strb	r2, [r3, #0]
 800f1ba:	e000      	b.n	800f1be <HAL_SPI_Transmit+0x292>
  }

error:
 800f1bc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	225d      	movs	r2, #93	; 0x5d
 800f1c2:	2101      	movs	r1, #1
 800f1c4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	225c      	movs	r2, #92	; 0x5c
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800f1ce:	231f      	movs	r3, #31
 800f1d0:	18fb      	adds	r3, r7, r3
 800f1d2:	781b      	ldrb	r3, [r3, #0]
}
 800f1d4:	0018      	movs	r0, r3
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	b008      	add	sp, #32
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f1dc:	b590      	push	{r4, r7, lr}
 800f1de:	b089      	sub	sp, #36	; 0x24
 800f1e0:	af02      	add	r7, sp, #8
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	603b      	str	r3, [r7, #0]
 800f1e8:	1dbb      	adds	r3, r7, #6
 800f1ea:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f1ec:	2317      	movs	r3, #23
 800f1ee:	18fb      	adds	r3, r7, r3
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	685a      	ldr	r2, [r3, #4]
 800f1f8:	2382      	movs	r3, #130	; 0x82
 800f1fa:	005b      	lsls	r3, r3, #1
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d113      	bne.n	800f228 <HAL_SPI_Receive+0x4c>
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d10f      	bne.n	800f228 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	225d      	movs	r2, #93	; 0x5d
 800f20c:	2104      	movs	r1, #4
 800f20e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f210:	1dbb      	adds	r3, r7, #6
 800f212:	881c      	ldrh	r4, [r3, #0]
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	68b9      	ldr	r1, [r7, #8]
 800f218:	68f8      	ldr	r0, [r7, #12]
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	9300      	str	r3, [sp, #0]
 800f21e:	0023      	movs	r3, r4
 800f220:	f000 f928 	bl	800f474 <HAL_SPI_TransmitReceive>
 800f224:	0003      	movs	r3, r0
 800f226:	e11c      	b.n	800f462 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	225c      	movs	r2, #92	; 0x5c
 800f22c:	5c9b      	ldrb	r3, [r3, r2]
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d101      	bne.n	800f236 <HAL_SPI_Receive+0x5a>
 800f232:	2302      	movs	r3, #2
 800f234:	e115      	b.n	800f462 <HAL_SPI_Receive+0x286>
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	225c      	movs	r2, #92	; 0x5c
 800f23a:	2101      	movs	r1, #1
 800f23c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f23e:	f7fe fc85 	bl	800db4c <HAL_GetTick>
 800f242:	0003      	movs	r3, r0
 800f244:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	225d      	movs	r2, #93	; 0x5d
 800f24a:	5c9b      	ldrb	r3, [r3, r2]
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d004      	beq.n	800f25c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800f252:	2317      	movs	r3, #23
 800f254:	18fb      	adds	r3, r7, r3
 800f256:	2202      	movs	r2, #2
 800f258:	701a      	strb	r2, [r3, #0]
    goto error;
 800f25a:	e0f7      	b.n	800f44c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d003      	beq.n	800f26a <HAL_SPI_Receive+0x8e>
 800f262:	1dbb      	adds	r3, r7, #6
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d104      	bne.n	800f274 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800f26a:	2317      	movs	r3, #23
 800f26c:	18fb      	adds	r3, r7, r3
 800f26e:	2201      	movs	r2, #1
 800f270:	701a      	strb	r2, [r3, #0]
    goto error;
 800f272:	e0eb      	b.n	800f44c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	225d      	movs	r2, #93	; 0x5d
 800f278:	2104      	movs	r1, #4
 800f27a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2200      	movs	r2, #0
 800f280:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	1dba      	adds	r2, r7, #6
 800f28c:	2144      	movs	r1, #68	; 0x44
 800f28e:	8812      	ldrh	r2, [r2, #0]
 800f290:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	1dba      	adds	r2, r7, #6
 800f296:	2146      	movs	r1, #70	; 0x46
 800f298:	8812      	ldrh	r2, [r2, #0]
 800f29a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	68da      	ldr	r2, [r3, #12]
 800f2be:	23e0      	movs	r3, #224	; 0xe0
 800f2c0:	00db      	lsls	r3, r3, #3
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d908      	bls.n	800f2d8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	685a      	ldr	r2, [r3, #4]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4966      	ldr	r1, [pc, #408]	; (800f46c <HAL_SPI_Receive+0x290>)
 800f2d2:	400a      	ands	r2, r1
 800f2d4:	605a      	str	r2, [r3, #4]
 800f2d6:	e008      	b.n	800f2ea <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2180      	movs	r1, #128	; 0x80
 800f2e4:	0149      	lsls	r1, r1, #5
 800f2e6:	430a      	orrs	r2, r1
 800f2e8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	689a      	ldr	r2, [r3, #8]
 800f2ee:	2380      	movs	r3, #128	; 0x80
 800f2f0:	021b      	lsls	r3, r3, #8
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d10f      	bne.n	800f316 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2140      	movs	r1, #64	; 0x40
 800f302:	438a      	bics	r2, r1
 800f304:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	681a      	ldr	r2, [r3, #0]
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4957      	ldr	r1, [pc, #348]	; (800f470 <HAL_SPI_Receive+0x294>)
 800f312:	400a      	ands	r2, r1
 800f314:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2240      	movs	r2, #64	; 0x40
 800f31e:	4013      	ands	r3, r2
 800f320:	2b40      	cmp	r3, #64	; 0x40
 800f322:	d007      	beq.n	800f334 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2140      	movs	r1, #64	; 0x40
 800f330:	430a      	orrs	r2, r1
 800f332:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	68da      	ldr	r2, [r3, #12]
 800f338:	23e0      	movs	r3, #224	; 0xe0
 800f33a:	00db      	lsls	r3, r3, #3
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d900      	bls.n	800f342 <HAL_SPI_Receive+0x166>
 800f340:	e069      	b.n	800f416 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f342:	e031      	b.n	800f3a8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	2201      	movs	r2, #1
 800f34c:	4013      	ands	r3, r2
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d117      	bne.n	800f382 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	330c      	adds	r3, #12
 800f358:	001a      	movs	r2, r3
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f35e:	7812      	ldrb	r2, [r2, #0]
 800f360:	b2d2      	uxtb	r2, r2
 800f362:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f368:	1c5a      	adds	r2, r3, #1
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2246      	movs	r2, #70	; 0x46
 800f372:	5a9b      	ldrh	r3, [r3, r2]
 800f374:	b29b      	uxth	r3, r3
 800f376:	3b01      	subs	r3, #1
 800f378:	b299      	uxth	r1, r3
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2246      	movs	r2, #70	; 0x46
 800f37e:	5299      	strh	r1, [r3, r2]
 800f380:	e012      	b.n	800f3a8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f382:	f7fe fbe3 	bl	800db4c <HAL_GetTick>
 800f386:	0002      	movs	r2, r0
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	683a      	ldr	r2, [r7, #0]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d802      	bhi.n	800f398 <HAL_SPI_Receive+0x1bc>
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	3301      	adds	r3, #1
 800f396:	d102      	bne.n	800f39e <HAL_SPI_Receive+0x1c2>
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d104      	bne.n	800f3a8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800f39e:	2317      	movs	r3, #23
 800f3a0:	18fb      	adds	r3, r7, r3
 800f3a2:	2203      	movs	r2, #3
 800f3a4:	701a      	strb	r2, [r3, #0]
          goto error;
 800f3a6:	e051      	b.n	800f44c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2246      	movs	r2, #70	; 0x46
 800f3ac:	5a9b      	ldrh	r3, [r3, r2]
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1c7      	bne.n	800f344 <HAL_SPI_Receive+0x168>
 800f3b4:	e035      	b.n	800f422 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	2201      	movs	r2, #1
 800f3be:	4013      	ands	r3, r2
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d115      	bne.n	800f3f0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68da      	ldr	r2, [r3, #12]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ce:	b292      	uxth	r2, r2
 800f3d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d6:	1c9a      	adds	r2, r3, #2
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2246      	movs	r2, #70	; 0x46
 800f3e0:	5a9b      	ldrh	r3, [r3, r2]
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	b299      	uxth	r1, r3
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2246      	movs	r2, #70	; 0x46
 800f3ec:	5299      	strh	r1, [r3, r2]
 800f3ee:	e012      	b.n	800f416 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3f0:	f7fe fbac 	bl	800db4c <HAL_GetTick>
 800f3f4:	0002      	movs	r2, r0
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	1ad3      	subs	r3, r2, r3
 800f3fa:	683a      	ldr	r2, [r7, #0]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d802      	bhi.n	800f406 <HAL_SPI_Receive+0x22a>
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	3301      	adds	r3, #1
 800f404:	d102      	bne.n	800f40c <HAL_SPI_Receive+0x230>
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d104      	bne.n	800f416 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800f40c:	2317      	movs	r3, #23
 800f40e:	18fb      	adds	r3, r7, r3
 800f410:	2203      	movs	r2, #3
 800f412:	701a      	strb	r2, [r3, #0]
          goto error;
 800f414:	e01a      	b.n	800f44c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2246      	movs	r2, #70	; 0x46
 800f41a:	5a9b      	ldrh	r3, [r3, r2]
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d1c9      	bne.n	800f3b6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f422:	693a      	ldr	r2, [r7, #16]
 800f424:	6839      	ldr	r1, [r7, #0]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	0018      	movs	r0, r3
 800f42a:	f000 fb25 	bl	800fa78 <SPI_EndRxTransaction>
 800f42e:	1e03      	subs	r3, r0, #0
 800f430:	d002      	beq.n	800f438 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2220      	movs	r2, #32
 800f436:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d004      	beq.n	800f44a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800f440:	2317      	movs	r3, #23
 800f442:	18fb      	adds	r3, r7, r3
 800f444:	2201      	movs	r2, #1
 800f446:	701a      	strb	r2, [r3, #0]
 800f448:	e000      	b.n	800f44c <HAL_SPI_Receive+0x270>
  }

error :
 800f44a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	225d      	movs	r2, #93	; 0x5d
 800f450:	2101      	movs	r1, #1
 800f452:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	225c      	movs	r2, #92	; 0x5c
 800f458:	2100      	movs	r1, #0
 800f45a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800f45c:	2317      	movs	r3, #23
 800f45e:	18fb      	adds	r3, r7, r3
 800f460:	781b      	ldrb	r3, [r3, #0]
}
 800f462:	0018      	movs	r0, r3
 800f464:	46bd      	mov	sp, r7
 800f466:	b007      	add	sp, #28
 800f468:	bd90      	pop	{r4, r7, pc}
 800f46a:	46c0      	nop			; (mov r8, r8)
 800f46c:	ffffefff 	.word	0xffffefff
 800f470:	ffffbfff 	.word	0xffffbfff

0800f474 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b08a      	sub	sp, #40	; 0x28
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	607a      	str	r2, [r7, #4]
 800f480:	001a      	movs	r2, r3
 800f482:	1cbb      	adds	r3, r7, #2
 800f484:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f486:	2301      	movs	r3, #1
 800f488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f48a:	2323      	movs	r3, #35	; 0x23
 800f48c:	18fb      	adds	r3, r7, r3
 800f48e:	2200      	movs	r2, #0
 800f490:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	225c      	movs	r2, #92	; 0x5c
 800f496:	5c9b      	ldrb	r3, [r3, r2]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d101      	bne.n	800f4a0 <HAL_SPI_TransmitReceive+0x2c>
 800f49c:	2302      	movs	r3, #2
 800f49e:	e1b5      	b.n	800f80c <HAL_SPI_TransmitReceive+0x398>
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	225c      	movs	r2, #92	; 0x5c
 800f4a4:	2101      	movs	r1, #1
 800f4a6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f4a8:	f7fe fb50 	bl	800db4c <HAL_GetTick>
 800f4ac:	0003      	movs	r3, r0
 800f4ae:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f4b0:	201b      	movs	r0, #27
 800f4b2:	183b      	adds	r3, r7, r0
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	215d      	movs	r1, #93	; 0x5d
 800f4b8:	5c52      	ldrb	r2, [r2, r1]
 800f4ba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f4c2:	2312      	movs	r3, #18
 800f4c4:	18fb      	adds	r3, r7, r3
 800f4c6:	1cba      	adds	r2, r7, #2
 800f4c8:	8812      	ldrh	r2, [r2, #0]
 800f4ca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f4cc:	183b      	adds	r3, r7, r0
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d011      	beq.n	800f4f8 <HAL_SPI_TransmitReceive+0x84>
 800f4d4:	697a      	ldr	r2, [r7, #20]
 800f4d6:	2382      	movs	r3, #130	; 0x82
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d107      	bne.n	800f4ee <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	689b      	ldr	r3, [r3, #8]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d103      	bne.n	800f4ee <HAL_SPI_TransmitReceive+0x7a>
 800f4e6:	183b      	adds	r3, r7, r0
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b04      	cmp	r3, #4
 800f4ec:	d004      	beq.n	800f4f8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800f4ee:	2323      	movs	r3, #35	; 0x23
 800f4f0:	18fb      	adds	r3, r7, r3
 800f4f2:	2202      	movs	r2, #2
 800f4f4:	701a      	strb	r2, [r3, #0]
    goto error;
 800f4f6:	e17e      	b.n	800f7f6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d006      	beq.n	800f50c <HAL_SPI_TransmitReceive+0x98>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d003      	beq.n	800f50c <HAL_SPI_TransmitReceive+0x98>
 800f504:	1cbb      	adds	r3, r7, #2
 800f506:	881b      	ldrh	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d104      	bne.n	800f516 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800f50c:	2323      	movs	r3, #35	; 0x23
 800f50e:	18fb      	adds	r3, r7, r3
 800f510:	2201      	movs	r2, #1
 800f512:	701a      	strb	r2, [r3, #0]
    goto error;
 800f514:	e16f      	b.n	800f7f6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	225d      	movs	r2, #93	; 0x5d
 800f51a:	5c9b      	ldrb	r3, [r3, r2]
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	2b04      	cmp	r3, #4
 800f520:	d003      	beq.n	800f52a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	225d      	movs	r2, #93	; 0x5d
 800f526:	2105      	movs	r1, #5
 800f528:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2200      	movs	r2, #0
 800f52e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	1cba      	adds	r2, r7, #2
 800f53a:	2146      	movs	r1, #70	; 0x46
 800f53c:	8812      	ldrh	r2, [r2, #0]
 800f53e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	1cba      	adds	r2, r7, #2
 800f544:	2144      	movs	r1, #68	; 0x44
 800f546:	8812      	ldrh	r2, [r2, #0]
 800f548:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	68ba      	ldr	r2, [r7, #8]
 800f54e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	1cba      	adds	r2, r7, #2
 800f554:	8812      	ldrh	r2, [r2, #0]
 800f556:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	1cba      	adds	r2, r7, #2
 800f55c:	8812      	ldrh	r2, [r2, #0]
 800f55e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2200      	movs	r2, #0
 800f564:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2200      	movs	r2, #0
 800f56a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	68da      	ldr	r2, [r3, #12]
 800f570:	23e0      	movs	r3, #224	; 0xe0
 800f572:	00db      	lsls	r3, r3, #3
 800f574:	429a      	cmp	r2, r3
 800f576:	d908      	bls.n	800f58a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	49a4      	ldr	r1, [pc, #656]	; (800f814 <HAL_SPI_TransmitReceive+0x3a0>)
 800f584:	400a      	ands	r2, r1
 800f586:	605a      	str	r2, [r3, #4]
 800f588:	e008      	b.n	800f59c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	685a      	ldr	r2, [r3, #4]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	2180      	movs	r1, #128	; 0x80
 800f596:	0149      	lsls	r1, r1, #5
 800f598:	430a      	orrs	r2, r1
 800f59a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2240      	movs	r2, #64	; 0x40
 800f5a4:	4013      	ands	r3, r2
 800f5a6:	2b40      	cmp	r3, #64	; 0x40
 800f5a8:	d007      	beq.n	800f5ba <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2140      	movs	r1, #64	; 0x40
 800f5b6:	430a      	orrs	r2, r1
 800f5b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	68da      	ldr	r2, [r3, #12]
 800f5be:	23e0      	movs	r3, #224	; 0xe0
 800f5c0:	00db      	lsls	r3, r3, #3
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d800      	bhi.n	800f5c8 <HAL_SPI_TransmitReceive+0x154>
 800f5c6:	e07f      	b.n	800f6c8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d005      	beq.n	800f5dc <HAL_SPI_TransmitReceive+0x168>
 800f5d0:	2312      	movs	r3, #18
 800f5d2:	18fb      	adds	r3, r7, r3
 800f5d4:	881b      	ldrh	r3, [r3, #0]
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d000      	beq.n	800f5dc <HAL_SPI_TransmitReceive+0x168>
 800f5da:	e069      	b.n	800f6b0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5e0:	881a      	ldrh	r2, [r3, #0]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5ec:	1c9a      	adds	r2, r3, #2
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f600:	e056      	b.n	800f6b0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	689b      	ldr	r3, [r3, #8]
 800f608:	2202      	movs	r2, #2
 800f60a:	4013      	ands	r3, r2
 800f60c:	2b02      	cmp	r3, #2
 800f60e:	d11b      	bne.n	800f648 <HAL_SPI_TransmitReceive+0x1d4>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f614:	b29b      	uxth	r3, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	d016      	beq.n	800f648 <HAL_SPI_TransmitReceive+0x1d4>
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d113      	bne.n	800f648 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f624:	881a      	ldrh	r2, [r3, #0]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f630:	1c9a      	adds	r2, r3, #2
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	3b01      	subs	r3, #1
 800f63e:	b29a      	uxth	r2, r3
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f644:	2300      	movs	r3, #0
 800f646:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	2201      	movs	r2, #1
 800f650:	4013      	ands	r3, r2
 800f652:	2b01      	cmp	r3, #1
 800f654:	d11c      	bne.n	800f690 <HAL_SPI_TransmitReceive+0x21c>
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2246      	movs	r2, #70	; 0x46
 800f65a:	5a9b      	ldrh	r3, [r3, r2]
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d016      	beq.n	800f690 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	68da      	ldr	r2, [r3, #12]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f66c:	b292      	uxth	r2, r2
 800f66e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f674:	1c9a      	adds	r2, r3, #2
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2246      	movs	r2, #70	; 0x46
 800f67e:	5a9b      	ldrh	r3, [r3, r2]
 800f680:	b29b      	uxth	r3, r3
 800f682:	3b01      	subs	r3, #1
 800f684:	b299      	uxth	r1, r3
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	2246      	movs	r2, #70	; 0x46
 800f68a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f68c:	2301      	movs	r3, #1
 800f68e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f690:	f7fe fa5c 	bl	800db4c <HAL_GetTick>
 800f694:	0002      	movs	r2, r0
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d807      	bhi.n	800f6b0 <HAL_SPI_TransmitReceive+0x23c>
 800f6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	d004      	beq.n	800f6b0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800f6a6:	2323      	movs	r3, #35	; 0x23
 800f6a8:	18fb      	adds	r3, r7, r3
 800f6aa:	2203      	movs	r2, #3
 800f6ac:	701a      	strb	r2, [r3, #0]
        goto error;
 800f6ae:	e0a2      	b.n	800f7f6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d1a3      	bne.n	800f602 <HAL_SPI_TransmitReceive+0x18e>
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2246      	movs	r2, #70	; 0x46
 800f6be:	5a9b      	ldrh	r3, [r3, r2]
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d19d      	bne.n	800f602 <HAL_SPI_TransmitReceive+0x18e>
 800f6c6:	e085      	b.n	800f7d4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d005      	beq.n	800f6dc <HAL_SPI_TransmitReceive+0x268>
 800f6d0:	2312      	movs	r3, #18
 800f6d2:	18fb      	adds	r3, r7, r3
 800f6d4:	881b      	ldrh	r3, [r3, #0]
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d000      	beq.n	800f6dc <HAL_SPI_TransmitReceive+0x268>
 800f6da:	e070      	b.n	800f7be <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	330c      	adds	r3, #12
 800f6e6:	7812      	ldrb	r2, [r2, #0]
 800f6e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ee:	1c5a      	adds	r2, r3, #1
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	b29a      	uxth	r2, r3
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f702:	e05c      	b.n	800f7be <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	689b      	ldr	r3, [r3, #8]
 800f70a:	2202      	movs	r2, #2
 800f70c:	4013      	ands	r3, r2
 800f70e:	2b02      	cmp	r3, #2
 800f710:	d11c      	bne.n	800f74c <HAL_SPI_TransmitReceive+0x2d8>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f716:	b29b      	uxth	r3, r3
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d017      	beq.n	800f74c <HAL_SPI_TransmitReceive+0x2d8>
 800f71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71e:	2b01      	cmp	r3, #1
 800f720:	d114      	bne.n	800f74c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	330c      	adds	r3, #12
 800f72c:	7812      	ldrb	r2, [r2, #0]
 800f72e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f734:	1c5a      	adds	r2, r3, #1
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f73e:	b29b      	uxth	r3, r3
 800f740:	3b01      	subs	r3, #1
 800f742:	b29a      	uxth	r2, r3
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f748:	2300      	movs	r3, #0
 800f74a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	689b      	ldr	r3, [r3, #8]
 800f752:	2201      	movs	r2, #1
 800f754:	4013      	ands	r3, r2
 800f756:	2b01      	cmp	r3, #1
 800f758:	d11e      	bne.n	800f798 <HAL_SPI_TransmitReceive+0x324>
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2246      	movs	r2, #70	; 0x46
 800f75e:	5a9b      	ldrh	r3, [r3, r2]
 800f760:	b29b      	uxth	r3, r3
 800f762:	2b00      	cmp	r3, #0
 800f764:	d018      	beq.n	800f798 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	330c      	adds	r3, #12
 800f76c:	001a      	movs	r2, r3
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f772:	7812      	ldrb	r2, [r2, #0]
 800f774:	b2d2      	uxtb	r2, r2
 800f776:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f77c:	1c5a      	adds	r2, r3, #1
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2246      	movs	r2, #70	; 0x46
 800f786:	5a9b      	ldrh	r3, [r3, r2]
 800f788:	b29b      	uxth	r3, r3
 800f78a:	3b01      	subs	r3, #1
 800f78c:	b299      	uxth	r1, r3
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2246      	movs	r2, #70	; 0x46
 800f792:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f794:	2301      	movs	r3, #1
 800f796:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f798:	f7fe f9d8 	bl	800db4c <HAL_GetTick>
 800f79c:	0002      	movs	r2, r0
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	1ad3      	subs	r3, r2, r3
 800f7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d802      	bhi.n	800f7ae <HAL_SPI_TransmitReceive+0x33a>
 800f7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	d102      	bne.n	800f7b4 <HAL_SPI_TransmitReceive+0x340>
 800f7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d104      	bne.n	800f7be <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800f7b4:	2323      	movs	r3, #35	; 0x23
 800f7b6:	18fb      	adds	r3, r7, r3
 800f7b8:	2203      	movs	r2, #3
 800f7ba:	701a      	strb	r2, [r3, #0]
        goto error;
 800f7bc:	e01b      	b.n	800f7f6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d19d      	bne.n	800f704 <HAL_SPI_TransmitReceive+0x290>
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2246      	movs	r2, #70	; 0x46
 800f7cc:	5a9b      	ldrh	r3, [r3, r2]
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d197      	bne.n	800f704 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f7d4:	69fa      	ldr	r2, [r7, #28]
 800f7d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	0018      	movs	r0, r3
 800f7dc:	f000 f9aa 	bl	800fb34 <SPI_EndRxTxTransaction>
 800f7e0:	1e03      	subs	r3, r0, #0
 800f7e2:	d007      	beq.n	800f7f4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800f7e4:	2323      	movs	r3, #35	; 0x23
 800f7e6:	18fb      	adds	r3, r7, r3
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2220      	movs	r2, #32
 800f7f0:	661a      	str	r2, [r3, #96]	; 0x60
 800f7f2:	e000      	b.n	800f7f6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800f7f4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	225d      	movs	r2, #93	; 0x5d
 800f7fa:	2101      	movs	r1, #1
 800f7fc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	225c      	movs	r2, #92	; 0x5c
 800f802:	2100      	movs	r1, #0
 800f804:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800f806:	2323      	movs	r3, #35	; 0x23
 800f808:	18fb      	adds	r3, r7, r3
 800f80a:	781b      	ldrb	r3, [r3, #0]
}
 800f80c:	0018      	movs	r0, r3
 800f80e:	46bd      	mov	sp, r7
 800f810:	b00a      	add	sp, #40	; 0x28
 800f812:	bd80      	pop	{r7, pc}
 800f814:	ffffefff 	.word	0xffffefff

0800f818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b088      	sub	sp, #32
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	603b      	str	r3, [r7, #0]
 800f824:	1dfb      	adds	r3, r7, #7
 800f826:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f828:	f7fe f990 	bl	800db4c <HAL_GetTick>
 800f82c:	0002      	movs	r2, r0
 800f82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f830:	1a9b      	subs	r3, r3, r2
 800f832:	683a      	ldr	r2, [r7, #0]
 800f834:	18d3      	adds	r3, r2, r3
 800f836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f838:	f7fe f988 	bl	800db4c <HAL_GetTick>
 800f83c:	0003      	movs	r3, r0
 800f83e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f840:	4b3a      	ldr	r3, [pc, #232]	; (800f92c <SPI_WaitFlagStateUntilTimeout+0x114>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	015b      	lsls	r3, r3, #5
 800f846:	0d1b      	lsrs	r3, r3, #20
 800f848:	69fa      	ldr	r2, [r7, #28]
 800f84a:	4353      	muls	r3, r2
 800f84c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f84e:	e058      	b.n	800f902 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	3301      	adds	r3, #1
 800f854:	d055      	beq.n	800f902 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f856:	f7fe f979 	bl	800db4c <HAL_GetTick>
 800f85a:	0002      	movs	r2, r0
 800f85c:	69bb      	ldr	r3, [r7, #24]
 800f85e:	1ad3      	subs	r3, r2, r3
 800f860:	69fa      	ldr	r2, [r7, #28]
 800f862:	429a      	cmp	r2, r3
 800f864:	d902      	bls.n	800f86c <SPI_WaitFlagStateUntilTimeout+0x54>
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d142      	bne.n	800f8f2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	685a      	ldr	r2, [r3, #4]
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	21e0      	movs	r1, #224	; 0xe0
 800f878:	438a      	bics	r2, r1
 800f87a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	685a      	ldr	r2, [r3, #4]
 800f880:	2382      	movs	r3, #130	; 0x82
 800f882:	005b      	lsls	r3, r3, #1
 800f884:	429a      	cmp	r2, r3
 800f886:	d113      	bne.n	800f8b0 <SPI_WaitFlagStateUntilTimeout+0x98>
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	689a      	ldr	r2, [r3, #8]
 800f88c:	2380      	movs	r3, #128	; 0x80
 800f88e:	021b      	lsls	r3, r3, #8
 800f890:	429a      	cmp	r2, r3
 800f892:	d005      	beq.n	800f8a0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	689a      	ldr	r2, [r3, #8]
 800f898:	2380      	movs	r3, #128	; 0x80
 800f89a:	00db      	lsls	r3, r3, #3
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d107      	bne.n	800f8b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	2140      	movs	r1, #64	; 0x40
 800f8ac:	438a      	bics	r2, r1
 800f8ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8b4:	2380      	movs	r3, #128	; 0x80
 800f8b6:	019b      	lsls	r3, r3, #6
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d110      	bne.n	800f8de <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	681a      	ldr	r2, [r3, #0]
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	491a      	ldr	r1, [pc, #104]	; (800f930 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800f8c8:	400a      	ands	r2, r1
 800f8ca:	601a      	str	r2, [r3, #0]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2180      	movs	r1, #128	; 0x80
 800f8d8:	0189      	lsls	r1, r1, #6
 800f8da:	430a      	orrs	r2, r1
 800f8dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	225d      	movs	r2, #93	; 0x5d
 800f8e2:	2101      	movs	r1, #1
 800f8e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	225c      	movs	r2, #92	; 0x5c
 800f8ea:	2100      	movs	r1, #0
 800f8ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f8ee:	2303      	movs	r3, #3
 800f8f0:	e017      	b.n	800f922 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d101      	bne.n	800f8fc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	3b01      	subs	r3, #1
 800f900:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	68ba      	ldr	r2, [r7, #8]
 800f90a:	4013      	ands	r3, r2
 800f90c:	68ba      	ldr	r2, [r7, #8]
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	425a      	negs	r2, r3
 800f912:	4153      	adcs	r3, r2
 800f914:	b2db      	uxtb	r3, r3
 800f916:	001a      	movs	r2, r3
 800f918:	1dfb      	adds	r3, r7, #7
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d197      	bne.n	800f850 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f920:	2300      	movs	r3, #0
}
 800f922:	0018      	movs	r0, r3
 800f924:	46bd      	mov	sp, r7
 800f926:	b008      	add	sp, #32
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	46c0      	nop			; (mov r8, r8)
 800f92c:	200000d4 	.word	0x200000d4
 800f930:	ffffdfff 	.word	0xffffdfff

0800f934 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b08a      	sub	sp, #40	; 0x28
 800f938:	af00      	add	r7, sp, #0
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	60b9      	str	r1, [r7, #8]
 800f93e:	607a      	str	r2, [r7, #4]
 800f940:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f942:	2317      	movs	r3, #23
 800f944:	18fb      	adds	r3, r7, r3
 800f946:	2200      	movs	r2, #0
 800f948:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f94a:	f7fe f8ff 	bl	800db4c <HAL_GetTick>
 800f94e:	0002      	movs	r2, r0
 800f950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f952:	1a9b      	subs	r3, r3, r2
 800f954:	683a      	ldr	r2, [r7, #0]
 800f956:	18d3      	adds	r3, r2, r3
 800f958:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800f95a:	f7fe f8f7 	bl	800db4c <HAL_GetTick>
 800f95e:	0003      	movs	r3, r0
 800f960:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	330c      	adds	r3, #12
 800f968:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f96a:	4b41      	ldr	r3, [pc, #260]	; (800fa70 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	0013      	movs	r3, r2
 800f970:	009b      	lsls	r3, r3, #2
 800f972:	189b      	adds	r3, r3, r2
 800f974:	00da      	lsls	r2, r3, #3
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	0d1b      	lsrs	r3, r3, #20
 800f97a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f97c:	4353      	muls	r3, r2
 800f97e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f980:	e068      	b.n	800fa54 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f982:	68ba      	ldr	r2, [r7, #8]
 800f984:	23c0      	movs	r3, #192	; 0xc0
 800f986:	00db      	lsls	r3, r3, #3
 800f988:	429a      	cmp	r2, r3
 800f98a:	d10a      	bne.n	800f9a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d107      	bne.n	800f9a2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	b2da      	uxtb	r2, r3
 800f998:	2117      	movs	r1, #23
 800f99a:	187b      	adds	r3, r7, r1
 800f99c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f99e:	187b      	adds	r3, r7, r1
 800f9a0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	d055      	beq.n	800fa54 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f9a8:	f7fe f8d0 	bl	800db4c <HAL_GetTick>
 800f9ac:	0002      	movs	r2, r0
 800f9ae:	6a3b      	ldr	r3, [r7, #32]
 800f9b0:	1ad3      	subs	r3, r2, r3
 800f9b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d902      	bls.n	800f9be <SPI_WaitFifoStateUntilTimeout+0x8a>
 800f9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d142      	bne.n	800fa44 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	685a      	ldr	r2, [r3, #4]
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	21e0      	movs	r1, #224	; 0xe0
 800f9ca:	438a      	bics	r2, r1
 800f9cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	685a      	ldr	r2, [r3, #4]
 800f9d2:	2382      	movs	r3, #130	; 0x82
 800f9d4:	005b      	lsls	r3, r3, #1
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d113      	bne.n	800fa02 <SPI_WaitFifoStateUntilTimeout+0xce>
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	689a      	ldr	r2, [r3, #8]
 800f9de:	2380      	movs	r3, #128	; 0x80
 800f9e0:	021b      	lsls	r3, r3, #8
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d005      	beq.n	800f9f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	689a      	ldr	r2, [r3, #8]
 800f9ea:	2380      	movs	r3, #128	; 0x80
 800f9ec:	00db      	lsls	r3, r3, #3
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d107      	bne.n	800fa02 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2140      	movs	r1, #64	; 0x40
 800f9fe:	438a      	bics	r2, r1
 800fa00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa06:	2380      	movs	r3, #128	; 0x80
 800fa08:	019b      	lsls	r3, r3, #6
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d110      	bne.n	800fa30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	681a      	ldr	r2, [r3, #0]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4916      	ldr	r1, [pc, #88]	; (800fa74 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800fa1a:	400a      	ands	r2, r1
 800fa1c:	601a      	str	r2, [r3, #0]
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2180      	movs	r1, #128	; 0x80
 800fa2a:	0189      	lsls	r1, r1, #6
 800fa2c:	430a      	orrs	r2, r1
 800fa2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	225d      	movs	r2, #93	; 0x5d
 800fa34:	2101      	movs	r1, #1
 800fa36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	225c      	movs	r2, #92	; 0x5c
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800fa40:	2303      	movs	r3, #3
 800fa42:	e010      	b.n	800fa66 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d101      	bne.n	800fa4e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	3b01      	subs	r3, #1
 800fa52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	689b      	ldr	r3, [r3, #8]
 800fa5a:	68ba      	ldr	r2, [r7, #8]
 800fa5c:	4013      	ands	r3, r2
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d18e      	bne.n	800f982 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800fa64:	2300      	movs	r3, #0
}
 800fa66:	0018      	movs	r0, r3
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	b00a      	add	sp, #40	; 0x28
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	46c0      	nop			; (mov r8, r8)
 800fa70:	200000d4 	.word	0x200000d4
 800fa74:	ffffdfff 	.word	0xffffdfff

0800fa78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	af02      	add	r7, sp, #8
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	685a      	ldr	r2, [r3, #4]
 800fa88:	2382      	movs	r3, #130	; 0x82
 800fa8a:	005b      	lsls	r3, r3, #1
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d113      	bne.n	800fab8 <SPI_EndRxTransaction+0x40>
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	689a      	ldr	r2, [r3, #8]
 800fa94:	2380      	movs	r3, #128	; 0x80
 800fa96:	021b      	lsls	r3, r3, #8
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d005      	beq.n	800faa8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	689a      	ldr	r2, [r3, #8]
 800faa0:	2380      	movs	r3, #128	; 0x80
 800faa2:	00db      	lsls	r3, r3, #3
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d107      	bne.n	800fab8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2140      	movs	r1, #64	; 0x40
 800fab4:	438a      	bics	r2, r1
 800fab6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fab8:	68ba      	ldr	r2, [r7, #8]
 800faba:	68f8      	ldr	r0, [r7, #12]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	0013      	movs	r3, r2
 800fac2:	2200      	movs	r2, #0
 800fac4:	2180      	movs	r1, #128	; 0x80
 800fac6:	f7ff fea7 	bl	800f818 <SPI_WaitFlagStateUntilTimeout>
 800faca:	1e03      	subs	r3, r0, #0
 800facc:	d007      	beq.n	800fade <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fad2:	2220      	movs	r2, #32
 800fad4:	431a      	orrs	r2, r3
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fada:	2303      	movs	r3, #3
 800fadc:	e026      	b.n	800fb2c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	685a      	ldr	r2, [r3, #4]
 800fae2:	2382      	movs	r3, #130	; 0x82
 800fae4:	005b      	lsls	r3, r3, #1
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d11f      	bne.n	800fb2a <SPI_EndRxTransaction+0xb2>
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	689a      	ldr	r2, [r3, #8]
 800faee:	2380      	movs	r3, #128	; 0x80
 800faf0:	021b      	lsls	r3, r3, #8
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d005      	beq.n	800fb02 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	689a      	ldr	r2, [r3, #8]
 800fafa:	2380      	movs	r3, #128	; 0x80
 800fafc:	00db      	lsls	r3, r3, #3
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d113      	bne.n	800fb2a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb02:	68ba      	ldr	r2, [r7, #8]
 800fb04:	23c0      	movs	r3, #192	; 0xc0
 800fb06:	00d9      	lsls	r1, r3, #3
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	0013      	movs	r3, r2
 800fb10:	2200      	movs	r2, #0
 800fb12:	f7ff ff0f 	bl	800f934 <SPI_WaitFifoStateUntilTimeout>
 800fb16:	1e03      	subs	r3, r0, #0
 800fb18:	d007      	beq.n	800fb2a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb1e:	2220      	movs	r2, #32
 800fb20:	431a      	orrs	r2, r3
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800fb26:	2303      	movs	r3, #3
 800fb28:	e000      	b.n	800fb2c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	0018      	movs	r0, r3
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	b004      	add	sp, #16
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b086      	sub	sp, #24
 800fb38:	af02      	add	r7, sp, #8
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb40:	68ba      	ldr	r2, [r7, #8]
 800fb42:	23c0      	movs	r3, #192	; 0xc0
 800fb44:	0159      	lsls	r1, r3, #5
 800fb46:	68f8      	ldr	r0, [r7, #12]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	9300      	str	r3, [sp, #0]
 800fb4c:	0013      	movs	r3, r2
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f7ff fef0 	bl	800f934 <SPI_WaitFifoStateUntilTimeout>
 800fb54:	1e03      	subs	r3, r0, #0
 800fb56:	d007      	beq.n	800fb68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb5c:	2220      	movs	r2, #32
 800fb5e:	431a      	orrs	r2, r3
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fb64:	2303      	movs	r3, #3
 800fb66:	e027      	b.n	800fbb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fb68:	68ba      	ldr	r2, [r7, #8]
 800fb6a:	68f8      	ldr	r0, [r7, #12]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	9300      	str	r3, [sp, #0]
 800fb70:	0013      	movs	r3, r2
 800fb72:	2200      	movs	r2, #0
 800fb74:	2180      	movs	r1, #128	; 0x80
 800fb76:	f7ff fe4f 	bl	800f818 <SPI_WaitFlagStateUntilTimeout>
 800fb7a:	1e03      	subs	r3, r0, #0
 800fb7c:	d007      	beq.n	800fb8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb82:	2220      	movs	r2, #32
 800fb84:	431a      	orrs	r2, r3
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fb8a:	2303      	movs	r3, #3
 800fb8c:	e014      	b.n	800fbb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb8e:	68ba      	ldr	r2, [r7, #8]
 800fb90:	23c0      	movs	r3, #192	; 0xc0
 800fb92:	00d9      	lsls	r1, r3, #3
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	0013      	movs	r3, r2
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	f7ff fec9 	bl	800f934 <SPI_WaitFifoStateUntilTimeout>
 800fba2:	1e03      	subs	r3, r0, #0
 800fba4:	d007      	beq.n	800fbb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fbaa:	2220      	movs	r2, #32
 800fbac:	431a      	orrs	r2, r3
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fbb2:	2303      	movs	r3, #3
 800fbb4:	e000      	b.n	800fbb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fbb6:	2300      	movs	r3, #0
}
 800fbb8:	0018      	movs	r0, r3
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	b004      	add	sp, #16
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d101      	bne.n	800fbd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	e044      	b.n	800fc5c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d107      	bne.n	800fbea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2274      	movs	r2, #116	; 0x74
 800fbde:	2100      	movs	r1, #0
 800fbe0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	0018      	movs	r0, r3
 800fbe6:	f7fd fe09 	bl	800d7fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2224      	movs	r2, #36	; 0x24
 800fbee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2101      	movs	r1, #1
 800fbfc:	438a      	bics	r2, r1
 800fbfe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	0018      	movs	r0, r3
 800fc04:	f000 fcb8 	bl	8010578 <UART_SetConfig>
 800fc08:	0003      	movs	r3, r0
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d101      	bne.n	800fc12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e024      	b.n	800fc5c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d003      	beq.n	800fc22 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	0018      	movs	r0, r3
 800fc1e:	f000 fe33 	bl	8010888 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	685a      	ldr	r2, [r3, #4]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	490d      	ldr	r1, [pc, #52]	; (800fc64 <HAL_UART_Init+0xa4>)
 800fc2e:	400a      	ands	r2, r1
 800fc30:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	689a      	ldr	r2, [r3, #8]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	212a      	movs	r1, #42	; 0x2a
 800fc3e:	438a      	bics	r2, r1
 800fc40:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2101      	movs	r1, #1
 800fc4e:	430a      	orrs	r2, r1
 800fc50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	0018      	movs	r0, r3
 800fc56:	f000 fecb 	bl	80109f0 <UART_CheckIdleState>
 800fc5a:	0003      	movs	r3, r0
}
 800fc5c:	0018      	movs	r0, r3
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	b002      	add	sp, #8
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	ffffb7ff 	.word	0xffffb7ff

0800fc68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b08a      	sub	sp, #40	; 0x28
 800fc6c:	af02      	add	r7, sp, #8
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	603b      	str	r3, [r7, #0]
 800fc74:	1dbb      	adds	r3, r7, #6
 800fc76:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc7c:	2b20      	cmp	r3, #32
 800fc7e:	d000      	beq.n	800fc82 <HAL_UART_Transmit+0x1a>
 800fc80:	e096      	b.n	800fdb0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d003      	beq.n	800fc90 <HAL_UART_Transmit+0x28>
 800fc88:	1dbb      	adds	r3, r7, #6
 800fc8a:	881b      	ldrh	r3, [r3, #0]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d101      	bne.n	800fc94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fc90:	2301      	movs	r3, #1
 800fc92:	e08e      	b.n	800fdb2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	689a      	ldr	r2, [r3, #8]
 800fc98:	2380      	movs	r3, #128	; 0x80
 800fc9a:	015b      	lsls	r3, r3, #5
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d109      	bne.n	800fcb4 <HAL_UART_Transmit+0x4c>
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d105      	bne.n	800fcb4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	2201      	movs	r2, #1
 800fcac:	4013      	ands	r3, r2
 800fcae:	d001      	beq.n	800fcb4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e07e      	b.n	800fdb2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2274      	movs	r2, #116	; 0x74
 800fcb8:	5c9b      	ldrb	r3, [r3, r2]
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d101      	bne.n	800fcc2 <HAL_UART_Transmit+0x5a>
 800fcbe:	2302      	movs	r3, #2
 800fcc0:	e077      	b.n	800fdb2 <HAL_UART_Transmit+0x14a>
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2274      	movs	r2, #116	; 0x74
 800fcc6:	2101      	movs	r1, #1
 800fcc8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2280      	movs	r2, #128	; 0x80
 800fcce:	2100      	movs	r1, #0
 800fcd0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2221      	movs	r2, #33	; 0x21
 800fcd6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fcd8:	f7fd ff38 	bl	800db4c <HAL_GetTick>
 800fcdc:	0003      	movs	r3, r0
 800fcde:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	1dba      	adds	r2, r7, #6
 800fce4:	2150      	movs	r1, #80	; 0x50
 800fce6:	8812      	ldrh	r2, [r2, #0]
 800fce8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	1dba      	adds	r2, r7, #6
 800fcee:	2152      	movs	r1, #82	; 0x52
 800fcf0:	8812      	ldrh	r2, [r2, #0]
 800fcf2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	689a      	ldr	r2, [r3, #8]
 800fcf8:	2380      	movs	r3, #128	; 0x80
 800fcfa:	015b      	lsls	r3, r3, #5
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d108      	bne.n	800fd12 <HAL_UART_Transmit+0xaa>
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	691b      	ldr	r3, [r3, #16]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d104      	bne.n	800fd12 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	61bb      	str	r3, [r7, #24]
 800fd10:	e003      	b.n	800fd1a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fd16:	2300      	movs	r3, #0
 800fd18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2274      	movs	r2, #116	; 0x74
 800fd1e:	2100      	movs	r1, #0
 800fd20:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800fd22:	e02d      	b.n	800fd80 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fd24:	697a      	ldr	r2, [r7, #20]
 800fd26:	68f8      	ldr	r0, [r7, #12]
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	0013      	movs	r3, r2
 800fd2e:	2200      	movs	r2, #0
 800fd30:	2180      	movs	r1, #128	; 0x80
 800fd32:	f000 fea5 	bl	8010a80 <UART_WaitOnFlagUntilTimeout>
 800fd36:	1e03      	subs	r3, r0, #0
 800fd38:	d001      	beq.n	800fd3e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800fd3a:	2303      	movs	r3, #3
 800fd3c:	e039      	b.n	800fdb2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d10b      	bne.n	800fd5c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fd44:	69bb      	ldr	r3, [r7, #24]
 800fd46:	881a      	ldrh	r2, [r3, #0]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	05d2      	lsls	r2, r2, #23
 800fd4e:	0dd2      	lsrs	r2, r2, #23
 800fd50:	b292      	uxth	r2, r2
 800fd52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	3302      	adds	r3, #2
 800fd58:	61bb      	str	r3, [r7, #24]
 800fd5a:	e008      	b.n	800fd6e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	781a      	ldrb	r2, [r3, #0]
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	b292      	uxth	r2, r2
 800fd66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fd68:	69fb      	ldr	r3, [r7, #28]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2252      	movs	r2, #82	; 0x52
 800fd72:	5a9b      	ldrh	r3, [r3, r2]
 800fd74:	b29b      	uxth	r3, r3
 800fd76:	3b01      	subs	r3, #1
 800fd78:	b299      	uxth	r1, r3
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2252      	movs	r2, #82	; 0x52
 800fd7e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2252      	movs	r2, #82	; 0x52
 800fd84:	5a9b      	ldrh	r3, [r3, r2]
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d1cb      	bne.n	800fd24 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fd8c:	697a      	ldr	r2, [r7, #20]
 800fd8e:	68f8      	ldr	r0, [r7, #12]
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	0013      	movs	r3, r2
 800fd96:	2200      	movs	r2, #0
 800fd98:	2140      	movs	r1, #64	; 0x40
 800fd9a:	f000 fe71 	bl	8010a80 <UART_WaitOnFlagUntilTimeout>
 800fd9e:	1e03      	subs	r3, r0, #0
 800fda0:	d001      	beq.n	800fda6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800fda2:	2303      	movs	r3, #3
 800fda4:	e005      	b.n	800fdb2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2220      	movs	r2, #32
 800fdaa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800fdac:	2300      	movs	r3, #0
 800fdae:	e000      	b.n	800fdb2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800fdb0:	2302      	movs	r3, #2
  }
}
 800fdb2:	0018      	movs	r0, r3
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	b008      	add	sp, #32
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b088      	sub	sp, #32
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	1dbb      	adds	r3, r7, #6
 800fdc8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdce:	2b20      	cmp	r3, #32
 800fdd0:	d000      	beq.n	800fdd4 <HAL_UART_Transmit_IT+0x18>
 800fdd2:	e06a      	b.n	800feaa <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d003      	beq.n	800fde2 <HAL_UART_Transmit_IT+0x26>
 800fdda:	1dbb      	adds	r3, r7, #6
 800fddc:	881b      	ldrh	r3, [r3, #0]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d101      	bne.n	800fde6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800fde2:	2301      	movs	r3, #1
 800fde4:	e062      	b.n	800feac <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	689a      	ldr	r2, [r3, #8]
 800fdea:	2380      	movs	r3, #128	; 0x80
 800fdec:	015b      	lsls	r3, r3, #5
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d109      	bne.n	800fe06 <HAL_UART_Transmit_IT+0x4a>
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	691b      	ldr	r3, [r3, #16]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d105      	bne.n	800fe06 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	4013      	ands	r3, r2
 800fe00:	d001      	beq.n	800fe06 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 800fe02:	2301      	movs	r3, #1
 800fe04:	e052      	b.n	800feac <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2274      	movs	r2, #116	; 0x74
 800fe0a:	5c9b      	ldrb	r3, [r3, r2]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d101      	bne.n	800fe14 <HAL_UART_Transmit_IT+0x58>
 800fe10:	2302      	movs	r3, #2
 800fe12:	e04b      	b.n	800feac <HAL_UART_Transmit_IT+0xf0>
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2274      	movs	r2, #116	; 0x74
 800fe18:	2101      	movs	r1, #1
 800fe1a:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	68ba      	ldr	r2, [r7, #8]
 800fe20:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	1dba      	adds	r2, r7, #6
 800fe26:	2150      	movs	r1, #80	; 0x50
 800fe28:	8812      	ldrh	r2, [r2, #0]
 800fe2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	1dba      	adds	r2, r7, #6
 800fe30:	2152      	movs	r1, #82	; 0x52
 800fe32:	8812      	ldrh	r2, [r2, #0]
 800fe34:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2280      	movs	r2, #128	; 0x80
 800fe40:	2100      	movs	r1, #0
 800fe42:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2221      	movs	r2, #33	; 0x21
 800fe48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	689a      	ldr	r2, [r3, #8]
 800fe4e:	2380      	movs	r3, #128	; 0x80
 800fe50:	015b      	lsls	r3, r3, #5
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d107      	bne.n	800fe66 <HAL_UART_Transmit_IT+0xaa>
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	691b      	ldr	r3, [r3, #16]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d103      	bne.n	800fe66 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	4a14      	ldr	r2, [pc, #80]	; (800feb4 <HAL_UART_Transmit_IT+0xf8>)
 800fe62:	669a      	str	r2, [r3, #104]	; 0x68
 800fe64:	e002      	b.n	800fe6c <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	4a13      	ldr	r2, [pc, #76]	; (800feb8 <HAL_UART_Transmit_IT+0xfc>)
 800fe6a:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2274      	movs	r2, #116	; 0x74
 800fe70:	2100      	movs	r1, #0
 800fe72:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe74:	f3ef 8310 	mrs	r3, PRIMASK
 800fe78:	613b      	str	r3, [r7, #16]
  return(result);
 800fe7a:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800fe7c:	61fb      	str	r3, [r7, #28]
 800fe7e:	2301      	movs	r3, #1
 800fe80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	f383 8810 	msr	PRIMASK, r3
}
 800fe88:	46c0      	nop			; (mov r8, r8)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2180      	movs	r1, #128	; 0x80
 800fe96:	430a      	orrs	r2, r1
 800fe98:	601a      	str	r2, [r3, #0]
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe9e:	69bb      	ldr	r3, [r7, #24]
 800fea0:	f383 8810 	msr	PRIMASK, r3
}
 800fea4:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800fea6:	2300      	movs	r3, #0
 800fea8:	e000      	b.n	800feac <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 800feaa:	2302      	movs	r3, #2
  }
}
 800feac:	0018      	movs	r0, r3
 800feae:	46bd      	mov	sp, r7
 800feb0:	b008      	add	sp, #32
 800feb2:	bd80      	pop	{r7, pc}
 800feb4:	08010f0f 	.word	0x08010f0f
 800feb8:	08010e5b 	.word	0x08010e5b

0800febc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b088      	sub	sp, #32
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	1dbb      	adds	r3, r7, #6
 800fec8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fece:	2b20      	cmp	r3, #32
 800fed0:	d150      	bne.n	800ff74 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d003      	beq.n	800fee0 <HAL_UART_Receive_IT+0x24>
 800fed8:	1dbb      	adds	r3, r7, #6
 800feda:	881b      	ldrh	r3, [r3, #0]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d101      	bne.n	800fee4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fee0:	2301      	movs	r3, #1
 800fee2:	e048      	b.n	800ff76 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	689a      	ldr	r2, [r3, #8]
 800fee8:	2380      	movs	r3, #128	; 0x80
 800feea:	015b      	lsls	r3, r3, #5
 800feec:	429a      	cmp	r2, r3
 800feee:	d109      	bne.n	800ff04 <HAL_UART_Receive_IT+0x48>
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	691b      	ldr	r3, [r3, #16]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d105      	bne.n	800ff04 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	2201      	movs	r2, #1
 800fefc:	4013      	ands	r3, r2
 800fefe:	d001      	beq.n	800ff04 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800ff00:	2301      	movs	r3, #1
 800ff02:	e038      	b.n	800ff76 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2274      	movs	r2, #116	; 0x74
 800ff08:	5c9b      	ldrb	r3, [r3, r2]
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d101      	bne.n	800ff12 <HAL_UART_Receive_IT+0x56>
 800ff0e:	2302      	movs	r3, #2
 800ff10:	e031      	b.n	800ff76 <HAL_UART_Receive_IT+0xba>
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2274      	movs	r2, #116	; 0x74
 800ff16:	2101      	movs	r1, #1
 800ff18:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	685a      	ldr	r2, [r3, #4]
 800ff26:	2380      	movs	r3, #128	; 0x80
 800ff28:	041b      	lsls	r3, r3, #16
 800ff2a:	4013      	ands	r3, r2
 800ff2c:	d019      	beq.n	800ff62 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff2e:	f3ef 8310 	mrs	r3, PRIMASK
 800ff32:	613b      	str	r3, [r7, #16]
  return(result);
 800ff34:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ff36:	61fb      	str	r3, [r7, #28]
 800ff38:	2301      	movs	r3, #1
 800ff3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	f383 8810 	msr	PRIMASK, r3
}
 800ff42:	46c0      	nop			; (mov r8, r8)
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	2180      	movs	r1, #128	; 0x80
 800ff50:	04c9      	lsls	r1, r1, #19
 800ff52:	430a      	orrs	r2, r1
 800ff54:	601a      	str	r2, [r3, #0]
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	f383 8810 	msr	PRIMASK, r3
}
 800ff60:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ff62:	1dbb      	adds	r3, r7, #6
 800ff64:	881a      	ldrh	r2, [r3, #0]
 800ff66:	68b9      	ldr	r1, [r7, #8]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	0018      	movs	r0, r3
 800ff6c:	f000 fe4c 	bl	8010c08 <UART_Start_Receive_IT>
 800ff70:	0003      	movs	r3, r0
 800ff72:	e000      	b.n	800ff76 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800ff74:	2302      	movs	r3, #2
  }
}
 800ff76:	0018      	movs	r0, r3
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	b008      	add	sp, #32
 800ff7c:	bd80      	pop	{r7, pc}
	...

0800ff80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff80:	b590      	push	{r4, r7, lr}
 800ff82:	b0ab      	sub	sp, #172	; 0xac
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	69db      	ldr	r3, [r3, #28]
 800ff8e:	22a4      	movs	r2, #164	; 0xa4
 800ff90:	18b9      	adds	r1, r7, r2
 800ff92:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	20a0      	movs	r0, #160	; 0xa0
 800ff9c:	1839      	adds	r1, r7, r0
 800ff9e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	689b      	ldr	r3, [r3, #8]
 800ffa6:	219c      	movs	r1, #156	; 0x9c
 800ffa8:	1879      	adds	r1, r7, r1
 800ffaa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ffac:	0011      	movs	r1, r2
 800ffae:	18bb      	adds	r3, r7, r2
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a99      	ldr	r2, [pc, #612]	; (8010218 <HAL_UART_IRQHandler+0x298>)
 800ffb4:	4013      	ands	r3, r2
 800ffb6:	2298      	movs	r2, #152	; 0x98
 800ffb8:	18bc      	adds	r4, r7, r2
 800ffba:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800ffbc:	18bb      	adds	r3, r7, r2
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d114      	bne.n	800ffee <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ffc4:	187b      	adds	r3, r7, r1
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2220      	movs	r2, #32
 800ffca:	4013      	ands	r3, r2
 800ffcc:	d00f      	beq.n	800ffee <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ffce:	183b      	adds	r3, r7, r0
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2220      	movs	r2, #32
 800ffd4:	4013      	ands	r3, r2
 800ffd6:	d00a      	beq.n	800ffee <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d100      	bne.n	800ffe2 <HAL_UART_IRQHandler+0x62>
 800ffe0:	e296      	b.n	8010510 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffe6:	687a      	ldr	r2, [r7, #4]
 800ffe8:	0010      	movs	r0, r2
 800ffea:	4798      	blx	r3
      }
      return;
 800ffec:	e290      	b.n	8010510 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ffee:	2398      	movs	r3, #152	; 0x98
 800fff0:	18fb      	adds	r3, r7, r3
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d100      	bne.n	800fffa <HAL_UART_IRQHandler+0x7a>
 800fff8:	e114      	b.n	8010224 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800fffa:	239c      	movs	r3, #156	; 0x9c
 800fffc:	18fb      	adds	r3, r7, r3
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2201      	movs	r2, #1
 8010002:	4013      	ands	r3, r2
 8010004:	d106      	bne.n	8010014 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8010006:	23a0      	movs	r3, #160	; 0xa0
 8010008:	18fb      	adds	r3, r7, r3
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a83      	ldr	r2, [pc, #524]	; (801021c <HAL_UART_IRQHandler+0x29c>)
 801000e:	4013      	ands	r3, r2
 8010010:	d100      	bne.n	8010014 <HAL_UART_IRQHandler+0x94>
 8010012:	e107      	b.n	8010224 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010014:	23a4      	movs	r3, #164	; 0xa4
 8010016:	18fb      	adds	r3, r7, r3
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2201      	movs	r2, #1
 801001c:	4013      	ands	r3, r2
 801001e:	d012      	beq.n	8010046 <HAL_UART_IRQHandler+0xc6>
 8010020:	23a0      	movs	r3, #160	; 0xa0
 8010022:	18fb      	adds	r3, r7, r3
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	2380      	movs	r3, #128	; 0x80
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	4013      	ands	r3, r2
 801002c:	d00b      	beq.n	8010046 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2201      	movs	r2, #1
 8010034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2280      	movs	r2, #128	; 0x80
 801003a:	589b      	ldr	r3, [r3, r2]
 801003c:	2201      	movs	r2, #1
 801003e:	431a      	orrs	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2180      	movs	r1, #128	; 0x80
 8010044:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010046:	23a4      	movs	r3, #164	; 0xa4
 8010048:	18fb      	adds	r3, r7, r3
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2202      	movs	r2, #2
 801004e:	4013      	ands	r3, r2
 8010050:	d011      	beq.n	8010076 <HAL_UART_IRQHandler+0xf6>
 8010052:	239c      	movs	r3, #156	; 0x9c
 8010054:	18fb      	adds	r3, r7, r3
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	2201      	movs	r2, #1
 801005a:	4013      	ands	r3, r2
 801005c:	d00b      	beq.n	8010076 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2202      	movs	r2, #2
 8010064:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2280      	movs	r2, #128	; 0x80
 801006a:	589b      	ldr	r3, [r3, r2]
 801006c:	2204      	movs	r2, #4
 801006e:	431a      	orrs	r2, r3
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2180      	movs	r1, #128	; 0x80
 8010074:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010076:	23a4      	movs	r3, #164	; 0xa4
 8010078:	18fb      	adds	r3, r7, r3
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2204      	movs	r2, #4
 801007e:	4013      	ands	r3, r2
 8010080:	d011      	beq.n	80100a6 <HAL_UART_IRQHandler+0x126>
 8010082:	239c      	movs	r3, #156	; 0x9c
 8010084:	18fb      	adds	r3, r7, r3
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2201      	movs	r2, #1
 801008a:	4013      	ands	r3, r2
 801008c:	d00b      	beq.n	80100a6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	2204      	movs	r2, #4
 8010094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2280      	movs	r2, #128	; 0x80
 801009a:	589b      	ldr	r3, [r3, r2]
 801009c:	2202      	movs	r2, #2
 801009e:	431a      	orrs	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2180      	movs	r1, #128	; 0x80
 80100a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80100a6:	23a4      	movs	r3, #164	; 0xa4
 80100a8:	18fb      	adds	r3, r7, r3
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2208      	movs	r2, #8
 80100ae:	4013      	ands	r3, r2
 80100b0:	d017      	beq.n	80100e2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80100b2:	23a0      	movs	r3, #160	; 0xa0
 80100b4:	18fb      	adds	r3, r7, r3
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2220      	movs	r2, #32
 80100ba:	4013      	ands	r3, r2
 80100bc:	d105      	bne.n	80100ca <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80100be:	239c      	movs	r3, #156	; 0x9c
 80100c0:	18fb      	adds	r3, r7, r3
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2201      	movs	r2, #1
 80100c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80100c8:	d00b      	beq.n	80100e2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2208      	movs	r2, #8
 80100d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2280      	movs	r2, #128	; 0x80
 80100d6:	589b      	ldr	r3, [r3, r2]
 80100d8:	2208      	movs	r2, #8
 80100da:	431a      	orrs	r2, r3
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2180      	movs	r1, #128	; 0x80
 80100e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80100e2:	23a4      	movs	r3, #164	; 0xa4
 80100e4:	18fb      	adds	r3, r7, r3
 80100e6:	681a      	ldr	r2, [r3, #0]
 80100e8:	2380      	movs	r3, #128	; 0x80
 80100ea:	011b      	lsls	r3, r3, #4
 80100ec:	4013      	ands	r3, r2
 80100ee:	d013      	beq.n	8010118 <HAL_UART_IRQHandler+0x198>
 80100f0:	23a0      	movs	r3, #160	; 0xa0
 80100f2:	18fb      	adds	r3, r7, r3
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	2380      	movs	r3, #128	; 0x80
 80100f8:	04db      	lsls	r3, r3, #19
 80100fa:	4013      	ands	r3, r2
 80100fc:	d00c      	beq.n	8010118 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2280      	movs	r2, #128	; 0x80
 8010104:	0112      	lsls	r2, r2, #4
 8010106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2280      	movs	r2, #128	; 0x80
 801010c:	589b      	ldr	r3, [r3, r2]
 801010e:	2220      	movs	r2, #32
 8010110:	431a      	orrs	r2, r3
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2180      	movs	r1, #128	; 0x80
 8010116:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2280      	movs	r2, #128	; 0x80
 801011c:	589b      	ldr	r3, [r3, r2]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d100      	bne.n	8010124 <HAL_UART_IRQHandler+0x1a4>
 8010122:	e1f7      	b.n	8010514 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010124:	23a4      	movs	r3, #164	; 0xa4
 8010126:	18fb      	adds	r3, r7, r3
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2220      	movs	r2, #32
 801012c:	4013      	ands	r3, r2
 801012e:	d00e      	beq.n	801014e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010130:	23a0      	movs	r3, #160	; 0xa0
 8010132:	18fb      	adds	r3, r7, r3
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	2220      	movs	r2, #32
 8010138:	4013      	ands	r3, r2
 801013a:	d008      	beq.n	801014e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010140:	2b00      	cmp	r3, #0
 8010142:	d004      	beq.n	801014e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	0010      	movs	r0, r2
 801014c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2280      	movs	r2, #128	; 0x80
 8010152:	589b      	ldr	r3, [r3, r2]
 8010154:	2194      	movs	r1, #148	; 0x94
 8010156:	187a      	adds	r2, r7, r1
 8010158:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	689b      	ldr	r3, [r3, #8]
 8010160:	2240      	movs	r2, #64	; 0x40
 8010162:	4013      	ands	r3, r2
 8010164:	2b40      	cmp	r3, #64	; 0x40
 8010166:	d004      	beq.n	8010172 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010168:	187b      	adds	r3, r7, r1
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2228      	movs	r2, #40	; 0x28
 801016e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010170:	d047      	beq.n	8010202 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	0018      	movs	r0, r3
 8010176:	f000 fdf7 	bl	8010d68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	2240      	movs	r2, #64	; 0x40
 8010182:	4013      	ands	r3, r2
 8010184:	2b40      	cmp	r3, #64	; 0x40
 8010186:	d137      	bne.n	80101f8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010188:	f3ef 8310 	mrs	r3, PRIMASK
 801018c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 801018e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010190:	2090      	movs	r0, #144	; 0x90
 8010192:	183a      	adds	r2, r7, r0
 8010194:	6013      	str	r3, [r2, #0]
 8010196:	2301      	movs	r3, #1
 8010198:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801019a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801019c:	f383 8810 	msr	PRIMASK, r3
}
 80101a0:	46c0      	nop			; (mov r8, r8)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	689a      	ldr	r2, [r3, #8]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	2140      	movs	r1, #64	; 0x40
 80101ae:	438a      	bics	r2, r1
 80101b0:	609a      	str	r2, [r3, #8]
 80101b2:	183b      	adds	r3, r7, r0
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80101ba:	f383 8810 	msr	PRIMASK, r3
}
 80101be:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d012      	beq.n	80101ee <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101cc:	4a14      	ldr	r2, [pc, #80]	; (8010220 <HAL_UART_IRQHandler+0x2a0>)
 80101ce:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101d4:	0018      	movs	r0, r3
 80101d6:	f7fd fdfd 	bl	800ddd4 <HAL_DMA_Abort_IT>
 80101da:	1e03      	subs	r3, r0, #0
 80101dc:	d01a      	beq.n	8010214 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101e8:	0018      	movs	r0, r3
 80101ea:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101ec:	e012      	b.n	8010214 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	0018      	movs	r0, r3
 80101f2:	f000 f9ad 	bl	8010550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101f6:	e00d      	b.n	8010214 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	0018      	movs	r0, r3
 80101fc:	f000 f9a8 	bl	8010550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010200:	e008      	b.n	8010214 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	0018      	movs	r0, r3
 8010206:	f000 f9a3 	bl	8010550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2280      	movs	r2, #128	; 0x80
 801020e:	2100      	movs	r1, #0
 8010210:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8010212:	e17f      	b.n	8010514 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010214:	46c0      	nop			; (mov r8, r8)
    return;
 8010216:	e17d      	b.n	8010514 <HAL_UART_IRQHandler+0x594>
 8010218:	0000080f 	.word	0x0000080f
 801021c:	04000120 	.word	0x04000120
 8010220:	08010e2d 	.word	0x08010e2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010228:	2b01      	cmp	r3, #1
 801022a:	d000      	beq.n	801022e <HAL_UART_IRQHandler+0x2ae>
 801022c:	e131      	b.n	8010492 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801022e:	23a4      	movs	r3, #164	; 0xa4
 8010230:	18fb      	adds	r3, r7, r3
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2210      	movs	r2, #16
 8010236:	4013      	ands	r3, r2
 8010238:	d100      	bne.n	801023c <HAL_UART_IRQHandler+0x2bc>
 801023a:	e12a      	b.n	8010492 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801023c:	23a0      	movs	r3, #160	; 0xa0
 801023e:	18fb      	adds	r3, r7, r3
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2210      	movs	r2, #16
 8010244:	4013      	ands	r3, r2
 8010246:	d100      	bne.n	801024a <HAL_UART_IRQHandler+0x2ca>
 8010248:	e123      	b.n	8010492 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	2210      	movs	r2, #16
 8010250:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	689b      	ldr	r3, [r3, #8]
 8010258:	2240      	movs	r2, #64	; 0x40
 801025a:	4013      	ands	r3, r2
 801025c:	2b40      	cmp	r3, #64	; 0x40
 801025e:	d000      	beq.n	8010262 <HAL_UART_IRQHandler+0x2e2>
 8010260:	e09b      	b.n	801039a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	685a      	ldr	r2, [r3, #4]
 801026a:	217e      	movs	r1, #126	; 0x7e
 801026c:	187b      	adds	r3, r7, r1
 801026e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8010270:	187b      	adds	r3, r7, r1
 8010272:	881b      	ldrh	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d100      	bne.n	801027a <HAL_UART_IRQHandler+0x2fa>
 8010278:	e14e      	b.n	8010518 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2258      	movs	r2, #88	; 0x58
 801027e:	5a9b      	ldrh	r3, [r3, r2]
 8010280:	187a      	adds	r2, r7, r1
 8010282:	8812      	ldrh	r2, [r2, #0]
 8010284:	429a      	cmp	r2, r3
 8010286:	d300      	bcc.n	801028a <HAL_UART_IRQHandler+0x30a>
 8010288:	e146      	b.n	8010518 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	187a      	adds	r2, r7, r1
 801028e:	215a      	movs	r1, #90	; 0x5a
 8010290:	8812      	ldrh	r2, [r2, #0]
 8010292:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010298:	699b      	ldr	r3, [r3, #24]
 801029a:	2b20      	cmp	r3, #32
 801029c:	d06e      	beq.n	801037c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801029e:	f3ef 8310 	mrs	r3, PRIMASK
 80102a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80102a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80102a8:	2301      	movs	r3, #1
 80102aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ae:	f383 8810 	msr	PRIMASK, r3
}
 80102b2:	46c0      	nop			; (mov r8, r8)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	499a      	ldr	r1, [pc, #616]	; (8010528 <HAL_UART_IRQHandler+0x5a8>)
 80102c0:	400a      	ands	r2, r1
 80102c2:	601a      	str	r2, [r3, #0]
 80102c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ca:	f383 8810 	msr	PRIMASK, r3
}
 80102ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102d0:	f3ef 8310 	mrs	r3, PRIMASK
 80102d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80102d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102d8:	677b      	str	r3, [r7, #116]	; 0x74
 80102da:	2301      	movs	r3, #1
 80102dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e0:	f383 8810 	msr	PRIMASK, r3
}
 80102e4:	46c0      	nop			; (mov r8, r8)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	689a      	ldr	r2, [r3, #8]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2101      	movs	r1, #1
 80102f2:	438a      	bics	r2, r1
 80102f4:	609a      	str	r2, [r3, #8]
 80102f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102fc:	f383 8810 	msr	PRIMASK, r3
}
 8010300:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010302:	f3ef 8310 	mrs	r3, PRIMASK
 8010306:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8010308:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801030a:	673b      	str	r3, [r7, #112]	; 0x70
 801030c:	2301      	movs	r3, #1
 801030e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010312:	f383 8810 	msr	PRIMASK, r3
}
 8010316:	46c0      	nop			; (mov r8, r8)
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	689a      	ldr	r2, [r3, #8]
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2140      	movs	r1, #64	; 0x40
 8010324:	438a      	bics	r2, r1
 8010326:	609a      	str	r2, [r3, #8]
 8010328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801032a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801032c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801032e:	f383 8810 	msr	PRIMASK, r3
}
 8010332:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2220      	movs	r2, #32
 8010338:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010340:	f3ef 8310 	mrs	r3, PRIMASK
 8010344:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8010346:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010348:	66fb      	str	r3, [r7, #108]	; 0x6c
 801034a:	2301      	movs	r3, #1
 801034c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801034e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010350:	f383 8810 	msr	PRIMASK, r3
}
 8010354:	46c0      	nop			; (mov r8, r8)
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2110      	movs	r1, #16
 8010362:	438a      	bics	r2, r1
 8010364:	601a      	str	r2, [r3, #0]
 8010366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010368:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801036a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801036c:	f383 8810 	msr	PRIMASK, r3
}
 8010370:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010376:	0018      	movs	r0, r3
 8010378:	f7fd fcf4 	bl	800dd64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2258      	movs	r2, #88	; 0x58
 8010380:	5a9a      	ldrh	r2, [r3, r2]
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	215a      	movs	r1, #90	; 0x5a
 8010386:	5a5b      	ldrh	r3, [r3, r1]
 8010388:	b29b      	uxth	r3, r3
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	b29a      	uxth	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	0011      	movs	r1, r2
 8010392:	0018      	movs	r0, r3
 8010394:	f000 f8e4 	bl	8010560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010398:	e0be      	b.n	8010518 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2258      	movs	r2, #88	; 0x58
 801039e:	5a99      	ldrh	r1, [r3, r2]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	225a      	movs	r2, #90	; 0x5a
 80103a4:	5a9b      	ldrh	r3, [r3, r2]
 80103a6:	b29a      	uxth	r2, r3
 80103a8:	208e      	movs	r0, #142	; 0x8e
 80103aa:	183b      	adds	r3, r7, r0
 80103ac:	1a8a      	subs	r2, r1, r2
 80103ae:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	225a      	movs	r2, #90	; 0x5a
 80103b4:	5a9b      	ldrh	r3, [r3, r2]
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d100      	bne.n	80103be <HAL_UART_IRQHandler+0x43e>
 80103bc:	e0ae      	b.n	801051c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80103be:	183b      	adds	r3, r7, r0
 80103c0:	881b      	ldrh	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d100      	bne.n	80103c8 <HAL_UART_IRQHandler+0x448>
 80103c6:	e0a9      	b.n	801051c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103c8:	f3ef 8310 	mrs	r3, PRIMASK
 80103cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80103ce:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80103d0:	2488      	movs	r4, #136	; 0x88
 80103d2:	193a      	adds	r2, r7, r4
 80103d4:	6013      	str	r3, [r2, #0]
 80103d6:	2301      	movs	r3, #1
 80103d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	f383 8810 	msr	PRIMASK, r3
}
 80103e0:	46c0      	nop			; (mov r8, r8)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	494f      	ldr	r1, [pc, #316]	; (801052c <HAL_UART_IRQHandler+0x5ac>)
 80103ee:	400a      	ands	r2, r1
 80103f0:	601a      	str	r2, [r3, #0]
 80103f2:	193b      	adds	r3, r7, r4
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	f383 8810 	msr	PRIMASK, r3
}
 80103fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010400:	f3ef 8310 	mrs	r3, PRIMASK
 8010404:	61bb      	str	r3, [r7, #24]
  return(result);
 8010406:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010408:	2484      	movs	r4, #132	; 0x84
 801040a:	193a      	adds	r2, r7, r4
 801040c:	6013      	str	r3, [r2, #0]
 801040e:	2301      	movs	r3, #1
 8010410:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	f383 8810 	msr	PRIMASK, r3
}
 8010418:	46c0      	nop			; (mov r8, r8)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	689a      	ldr	r2, [r3, #8]
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2101      	movs	r1, #1
 8010426:	438a      	bics	r2, r1
 8010428:	609a      	str	r2, [r3, #8]
 801042a:	193b      	adds	r3, r7, r4
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010430:	6a3b      	ldr	r3, [r7, #32]
 8010432:	f383 8810 	msr	PRIMASK, r3
}
 8010436:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2220      	movs	r2, #32
 801043c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2200      	movs	r2, #0
 8010442:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2200      	movs	r2, #0
 8010448:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801044a:	f3ef 8310 	mrs	r3, PRIMASK
 801044e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8010450:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010452:	2480      	movs	r4, #128	; 0x80
 8010454:	193a      	adds	r2, r7, r4
 8010456:	6013      	str	r3, [r2, #0]
 8010458:	2301      	movs	r3, #1
 801045a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801045c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045e:	f383 8810 	msr	PRIMASK, r3
}
 8010462:	46c0      	nop			; (mov r8, r8)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	681a      	ldr	r2, [r3, #0]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2110      	movs	r1, #16
 8010470:	438a      	bics	r2, r1
 8010472:	601a      	str	r2, [r3, #0]
 8010474:	193b      	adds	r3, r7, r4
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047c:	f383 8810 	msr	PRIMASK, r3
}
 8010480:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010482:	183b      	adds	r3, r7, r0
 8010484:	881a      	ldrh	r2, [r3, #0]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	0011      	movs	r1, r2
 801048a:	0018      	movs	r0, r3
 801048c:	f000 f868 	bl	8010560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010490:	e044      	b.n	801051c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010492:	23a4      	movs	r3, #164	; 0xa4
 8010494:	18fb      	adds	r3, r7, r3
 8010496:	681a      	ldr	r2, [r3, #0]
 8010498:	2380      	movs	r3, #128	; 0x80
 801049a:	035b      	lsls	r3, r3, #13
 801049c:	4013      	ands	r3, r2
 801049e:	d010      	beq.n	80104c2 <HAL_UART_IRQHandler+0x542>
 80104a0:	239c      	movs	r3, #156	; 0x9c
 80104a2:	18fb      	adds	r3, r7, r3
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	2380      	movs	r3, #128	; 0x80
 80104a8:	03db      	lsls	r3, r3, #15
 80104aa:	4013      	ands	r3, r2
 80104ac:	d009      	beq.n	80104c2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	2280      	movs	r2, #128	; 0x80
 80104b4:	0352      	lsls	r2, r2, #13
 80104b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	0018      	movs	r0, r3
 80104bc:	f000 ff1c 	bl	80112f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80104c0:	e02f      	b.n	8010522 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80104c2:	23a4      	movs	r3, #164	; 0xa4
 80104c4:	18fb      	adds	r3, r7, r3
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2280      	movs	r2, #128	; 0x80
 80104ca:	4013      	ands	r3, r2
 80104cc:	d00f      	beq.n	80104ee <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80104ce:	23a0      	movs	r3, #160	; 0xa0
 80104d0:	18fb      	adds	r3, r7, r3
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2280      	movs	r2, #128	; 0x80
 80104d6:	4013      	ands	r3, r2
 80104d8:	d009      	beq.n	80104ee <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d01e      	beq.n	8010520 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	0010      	movs	r0, r2
 80104ea:	4798      	blx	r3
    }
    return;
 80104ec:	e018      	b.n	8010520 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80104ee:	23a4      	movs	r3, #164	; 0xa4
 80104f0:	18fb      	adds	r3, r7, r3
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2240      	movs	r2, #64	; 0x40
 80104f6:	4013      	ands	r3, r2
 80104f8:	d013      	beq.n	8010522 <HAL_UART_IRQHandler+0x5a2>
 80104fa:	23a0      	movs	r3, #160	; 0xa0
 80104fc:	18fb      	adds	r3, r7, r3
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2240      	movs	r2, #64	; 0x40
 8010502:	4013      	ands	r3, r2
 8010504:	d00d      	beq.n	8010522 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	0018      	movs	r0, r3
 801050a:	f000 fd5e 	bl	8010fca <UART_EndTransmit_IT>
    return;
 801050e:	e008      	b.n	8010522 <HAL_UART_IRQHandler+0x5a2>
      return;
 8010510:	46c0      	nop			; (mov r8, r8)
 8010512:	e006      	b.n	8010522 <HAL_UART_IRQHandler+0x5a2>
    return;
 8010514:	46c0      	nop			; (mov r8, r8)
 8010516:	e004      	b.n	8010522 <HAL_UART_IRQHandler+0x5a2>
      return;
 8010518:	46c0      	nop			; (mov r8, r8)
 801051a:	e002      	b.n	8010522 <HAL_UART_IRQHandler+0x5a2>
      return;
 801051c:	46c0      	nop			; (mov r8, r8)
 801051e:	e000      	b.n	8010522 <HAL_UART_IRQHandler+0x5a2>
    return;
 8010520:	46c0      	nop			; (mov r8, r8)
  }

}
 8010522:	46bd      	mov	sp, r7
 8010524:	b02b      	add	sp, #172	; 0xac
 8010526:	bd90      	pop	{r4, r7, pc}
 8010528:	fffffeff 	.word	0xfffffeff
 801052c:	fffffedf 	.word	0xfffffedf

08010530 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010538:	46c0      	nop			; (mov r8, r8)
 801053a:	46bd      	mov	sp, r7
 801053c:	b002      	add	sp, #8
 801053e:	bd80      	pop	{r7, pc}

08010540 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b082      	sub	sp, #8
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010548:	46c0      	nop			; (mov r8, r8)
 801054a:	46bd      	mov	sp, r7
 801054c:	b002      	add	sp, #8
 801054e:	bd80      	pop	{r7, pc}

08010550 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010558:	46c0      	nop			; (mov r8, r8)
 801055a:	46bd      	mov	sp, r7
 801055c:	b002      	add	sp, #8
 801055e:	bd80      	pop	{r7, pc}

08010560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	000a      	movs	r2, r1
 801056a:	1cbb      	adds	r3, r7, #2
 801056c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801056e:	46c0      	nop			; (mov r8, r8)
 8010570:	46bd      	mov	sp, r7
 8010572:	b002      	add	sp, #8
 8010574:	bd80      	pop	{r7, pc}
	...

08010578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b088      	sub	sp, #32
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010580:	231e      	movs	r3, #30
 8010582:	18fb      	adds	r3, r7, r3
 8010584:	2200      	movs	r2, #0
 8010586:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	689a      	ldr	r2, [r3, #8]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	691b      	ldr	r3, [r3, #16]
 8010590:	431a      	orrs	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	695b      	ldr	r3, [r3, #20]
 8010596:	431a      	orrs	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	69db      	ldr	r3, [r3, #28]
 801059c:	4313      	orrs	r3, r2
 801059e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4aaf      	ldr	r2, [pc, #700]	; (8010864 <UART_SetConfig+0x2ec>)
 80105a8:	4013      	ands	r3, r2
 80105aa:	0019      	movs	r1, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	697a      	ldr	r2, [r7, #20]
 80105b2:	430a      	orrs	r2, r1
 80105b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	4aaa      	ldr	r2, [pc, #680]	; (8010868 <UART_SetConfig+0x2f0>)
 80105be:	4013      	ands	r3, r2
 80105c0:	0019      	movs	r1, r3
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	68da      	ldr	r2, [r3, #12]
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	430a      	orrs	r2, r1
 80105cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	699b      	ldr	r3, [r3, #24]
 80105d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6a1b      	ldr	r3, [r3, #32]
 80105d8:	697a      	ldr	r2, [r7, #20]
 80105da:	4313      	orrs	r3, r2
 80105dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	689b      	ldr	r3, [r3, #8]
 80105e4:	4aa1      	ldr	r2, [pc, #644]	; (801086c <UART_SetConfig+0x2f4>)
 80105e6:	4013      	ands	r3, r2
 80105e8:	0019      	movs	r1, r3
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	697a      	ldr	r2, [r7, #20]
 80105f0:	430a      	orrs	r2, r1
 80105f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	4a9d      	ldr	r2, [pc, #628]	; (8010870 <UART_SetConfig+0x2f8>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d127      	bne.n	801064e <UART_SetConfig+0xd6>
 80105fe:	4b9d      	ldr	r3, [pc, #628]	; (8010874 <UART_SetConfig+0x2fc>)
 8010600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010602:	2203      	movs	r2, #3
 8010604:	4013      	ands	r3, r2
 8010606:	2b03      	cmp	r3, #3
 8010608:	d00d      	beq.n	8010626 <UART_SetConfig+0xae>
 801060a:	d81b      	bhi.n	8010644 <UART_SetConfig+0xcc>
 801060c:	2b02      	cmp	r3, #2
 801060e:	d014      	beq.n	801063a <UART_SetConfig+0xc2>
 8010610:	d818      	bhi.n	8010644 <UART_SetConfig+0xcc>
 8010612:	2b00      	cmp	r3, #0
 8010614:	d002      	beq.n	801061c <UART_SetConfig+0xa4>
 8010616:	2b01      	cmp	r3, #1
 8010618:	d00a      	beq.n	8010630 <UART_SetConfig+0xb8>
 801061a:	e013      	b.n	8010644 <UART_SetConfig+0xcc>
 801061c:	231f      	movs	r3, #31
 801061e:	18fb      	adds	r3, r7, r3
 8010620:	2200      	movs	r2, #0
 8010622:	701a      	strb	r2, [r3, #0]
 8010624:	e065      	b.n	80106f2 <UART_SetConfig+0x17a>
 8010626:	231f      	movs	r3, #31
 8010628:	18fb      	adds	r3, r7, r3
 801062a:	2202      	movs	r2, #2
 801062c:	701a      	strb	r2, [r3, #0]
 801062e:	e060      	b.n	80106f2 <UART_SetConfig+0x17a>
 8010630:	231f      	movs	r3, #31
 8010632:	18fb      	adds	r3, r7, r3
 8010634:	2204      	movs	r2, #4
 8010636:	701a      	strb	r2, [r3, #0]
 8010638:	e05b      	b.n	80106f2 <UART_SetConfig+0x17a>
 801063a:	231f      	movs	r3, #31
 801063c:	18fb      	adds	r3, r7, r3
 801063e:	2208      	movs	r2, #8
 8010640:	701a      	strb	r2, [r3, #0]
 8010642:	e056      	b.n	80106f2 <UART_SetConfig+0x17a>
 8010644:	231f      	movs	r3, #31
 8010646:	18fb      	adds	r3, r7, r3
 8010648:	2210      	movs	r2, #16
 801064a:	701a      	strb	r2, [r3, #0]
 801064c:	e051      	b.n	80106f2 <UART_SetConfig+0x17a>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	4a89      	ldr	r2, [pc, #548]	; (8010878 <UART_SetConfig+0x300>)
 8010654:	4293      	cmp	r3, r2
 8010656:	d134      	bne.n	80106c2 <UART_SetConfig+0x14a>
 8010658:	4b86      	ldr	r3, [pc, #536]	; (8010874 <UART_SetConfig+0x2fc>)
 801065a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801065c:	23c0      	movs	r3, #192	; 0xc0
 801065e:	029b      	lsls	r3, r3, #10
 8010660:	4013      	ands	r3, r2
 8010662:	22c0      	movs	r2, #192	; 0xc0
 8010664:	0292      	lsls	r2, r2, #10
 8010666:	4293      	cmp	r3, r2
 8010668:	d017      	beq.n	801069a <UART_SetConfig+0x122>
 801066a:	22c0      	movs	r2, #192	; 0xc0
 801066c:	0292      	lsls	r2, r2, #10
 801066e:	4293      	cmp	r3, r2
 8010670:	d822      	bhi.n	80106b8 <UART_SetConfig+0x140>
 8010672:	2280      	movs	r2, #128	; 0x80
 8010674:	0292      	lsls	r2, r2, #10
 8010676:	4293      	cmp	r3, r2
 8010678:	d019      	beq.n	80106ae <UART_SetConfig+0x136>
 801067a:	2280      	movs	r2, #128	; 0x80
 801067c:	0292      	lsls	r2, r2, #10
 801067e:	4293      	cmp	r3, r2
 8010680:	d81a      	bhi.n	80106b8 <UART_SetConfig+0x140>
 8010682:	2b00      	cmp	r3, #0
 8010684:	d004      	beq.n	8010690 <UART_SetConfig+0x118>
 8010686:	2280      	movs	r2, #128	; 0x80
 8010688:	0252      	lsls	r2, r2, #9
 801068a:	4293      	cmp	r3, r2
 801068c:	d00a      	beq.n	80106a4 <UART_SetConfig+0x12c>
 801068e:	e013      	b.n	80106b8 <UART_SetConfig+0x140>
 8010690:	231f      	movs	r3, #31
 8010692:	18fb      	adds	r3, r7, r3
 8010694:	2200      	movs	r2, #0
 8010696:	701a      	strb	r2, [r3, #0]
 8010698:	e02b      	b.n	80106f2 <UART_SetConfig+0x17a>
 801069a:	231f      	movs	r3, #31
 801069c:	18fb      	adds	r3, r7, r3
 801069e:	2202      	movs	r2, #2
 80106a0:	701a      	strb	r2, [r3, #0]
 80106a2:	e026      	b.n	80106f2 <UART_SetConfig+0x17a>
 80106a4:	231f      	movs	r3, #31
 80106a6:	18fb      	adds	r3, r7, r3
 80106a8:	2204      	movs	r2, #4
 80106aa:	701a      	strb	r2, [r3, #0]
 80106ac:	e021      	b.n	80106f2 <UART_SetConfig+0x17a>
 80106ae:	231f      	movs	r3, #31
 80106b0:	18fb      	adds	r3, r7, r3
 80106b2:	2208      	movs	r2, #8
 80106b4:	701a      	strb	r2, [r3, #0]
 80106b6:	e01c      	b.n	80106f2 <UART_SetConfig+0x17a>
 80106b8:	231f      	movs	r3, #31
 80106ba:	18fb      	adds	r3, r7, r3
 80106bc:	2210      	movs	r2, #16
 80106be:	701a      	strb	r2, [r3, #0]
 80106c0:	e017      	b.n	80106f2 <UART_SetConfig+0x17a>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	4a6d      	ldr	r2, [pc, #436]	; (801087c <UART_SetConfig+0x304>)
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d104      	bne.n	80106d6 <UART_SetConfig+0x15e>
 80106cc:	231f      	movs	r3, #31
 80106ce:	18fb      	adds	r3, r7, r3
 80106d0:	2200      	movs	r2, #0
 80106d2:	701a      	strb	r2, [r3, #0]
 80106d4:	e00d      	b.n	80106f2 <UART_SetConfig+0x17a>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4a69      	ldr	r2, [pc, #420]	; (8010880 <UART_SetConfig+0x308>)
 80106dc:	4293      	cmp	r3, r2
 80106de:	d104      	bne.n	80106ea <UART_SetConfig+0x172>
 80106e0:	231f      	movs	r3, #31
 80106e2:	18fb      	adds	r3, r7, r3
 80106e4:	2200      	movs	r2, #0
 80106e6:	701a      	strb	r2, [r3, #0]
 80106e8:	e003      	b.n	80106f2 <UART_SetConfig+0x17a>
 80106ea:	231f      	movs	r3, #31
 80106ec:	18fb      	adds	r3, r7, r3
 80106ee:	2210      	movs	r2, #16
 80106f0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	69da      	ldr	r2, [r3, #28]
 80106f6:	2380      	movs	r3, #128	; 0x80
 80106f8:	021b      	lsls	r3, r3, #8
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d15d      	bne.n	80107ba <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80106fe:	231f      	movs	r3, #31
 8010700:	18fb      	adds	r3, r7, r3
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	2b08      	cmp	r3, #8
 8010706:	d015      	beq.n	8010734 <UART_SetConfig+0x1bc>
 8010708:	dc18      	bgt.n	801073c <UART_SetConfig+0x1c4>
 801070a:	2b04      	cmp	r3, #4
 801070c:	d00d      	beq.n	801072a <UART_SetConfig+0x1b2>
 801070e:	dc15      	bgt.n	801073c <UART_SetConfig+0x1c4>
 8010710:	2b00      	cmp	r3, #0
 8010712:	d002      	beq.n	801071a <UART_SetConfig+0x1a2>
 8010714:	2b02      	cmp	r3, #2
 8010716:	d005      	beq.n	8010724 <UART_SetConfig+0x1ac>
 8010718:	e010      	b.n	801073c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801071a:	f7fe fa3b 	bl	800eb94 <HAL_RCC_GetPCLK1Freq>
 801071e:	0003      	movs	r3, r0
 8010720:	61bb      	str	r3, [r7, #24]
        break;
 8010722:	e012      	b.n	801074a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010724:	4b57      	ldr	r3, [pc, #348]	; (8010884 <UART_SetConfig+0x30c>)
 8010726:	61bb      	str	r3, [r7, #24]
        break;
 8010728:	e00f      	b.n	801074a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801072a:	f7fe f9a9 	bl	800ea80 <HAL_RCC_GetSysClockFreq>
 801072e:	0003      	movs	r3, r0
 8010730:	61bb      	str	r3, [r7, #24]
        break;
 8010732:	e00a      	b.n	801074a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010734:	2380      	movs	r3, #128	; 0x80
 8010736:	021b      	lsls	r3, r3, #8
 8010738:	61bb      	str	r3, [r7, #24]
        break;
 801073a:	e006      	b.n	801074a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 801073c:	2300      	movs	r3, #0
 801073e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8010740:	231e      	movs	r3, #30
 8010742:	18fb      	adds	r3, r7, r3
 8010744:	2201      	movs	r2, #1
 8010746:	701a      	strb	r2, [r3, #0]
        break;
 8010748:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801074a:	69bb      	ldr	r3, [r7, #24]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d100      	bne.n	8010752 <UART_SetConfig+0x1da>
 8010750:	e07b      	b.n	801084a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	005a      	lsls	r2, r3, #1
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	685b      	ldr	r3, [r3, #4]
 801075a:	085b      	lsrs	r3, r3, #1
 801075c:	18d2      	adds	r2, r2, r3
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	0019      	movs	r1, r3
 8010764:	0010      	movs	r0, r2
 8010766:	f7f8 fceb 	bl	8009140 <__udivsi3>
 801076a:	0003      	movs	r3, r0
 801076c:	b29b      	uxth	r3, r3
 801076e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	2b0f      	cmp	r3, #15
 8010774:	d91c      	bls.n	80107b0 <UART_SetConfig+0x238>
 8010776:	693a      	ldr	r2, [r7, #16]
 8010778:	2380      	movs	r3, #128	; 0x80
 801077a:	025b      	lsls	r3, r3, #9
 801077c:	429a      	cmp	r2, r3
 801077e:	d217      	bcs.n	80107b0 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	b29a      	uxth	r2, r3
 8010784:	200e      	movs	r0, #14
 8010786:	183b      	adds	r3, r7, r0
 8010788:	210f      	movs	r1, #15
 801078a:	438a      	bics	r2, r1
 801078c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801078e:	693b      	ldr	r3, [r7, #16]
 8010790:	085b      	lsrs	r3, r3, #1
 8010792:	b29b      	uxth	r3, r3
 8010794:	2207      	movs	r2, #7
 8010796:	4013      	ands	r3, r2
 8010798:	b299      	uxth	r1, r3
 801079a:	183b      	adds	r3, r7, r0
 801079c:	183a      	adds	r2, r7, r0
 801079e:	8812      	ldrh	r2, [r2, #0]
 80107a0:	430a      	orrs	r2, r1
 80107a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	183a      	adds	r2, r7, r0
 80107aa:	8812      	ldrh	r2, [r2, #0]
 80107ac:	60da      	str	r2, [r3, #12]
 80107ae:	e04c      	b.n	801084a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80107b0:	231e      	movs	r3, #30
 80107b2:	18fb      	adds	r3, r7, r3
 80107b4:	2201      	movs	r2, #1
 80107b6:	701a      	strb	r2, [r3, #0]
 80107b8:	e047      	b.n	801084a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80107ba:	231f      	movs	r3, #31
 80107bc:	18fb      	adds	r3, r7, r3
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	2b08      	cmp	r3, #8
 80107c2:	d015      	beq.n	80107f0 <UART_SetConfig+0x278>
 80107c4:	dc18      	bgt.n	80107f8 <UART_SetConfig+0x280>
 80107c6:	2b04      	cmp	r3, #4
 80107c8:	d00d      	beq.n	80107e6 <UART_SetConfig+0x26e>
 80107ca:	dc15      	bgt.n	80107f8 <UART_SetConfig+0x280>
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d002      	beq.n	80107d6 <UART_SetConfig+0x25e>
 80107d0:	2b02      	cmp	r3, #2
 80107d2:	d005      	beq.n	80107e0 <UART_SetConfig+0x268>
 80107d4:	e010      	b.n	80107f8 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80107d6:	f7fe f9dd 	bl	800eb94 <HAL_RCC_GetPCLK1Freq>
 80107da:	0003      	movs	r3, r0
 80107dc:	61bb      	str	r3, [r7, #24]
        break;
 80107de:	e012      	b.n	8010806 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80107e0:	4b28      	ldr	r3, [pc, #160]	; (8010884 <UART_SetConfig+0x30c>)
 80107e2:	61bb      	str	r3, [r7, #24]
        break;
 80107e4:	e00f      	b.n	8010806 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80107e6:	f7fe f94b 	bl	800ea80 <HAL_RCC_GetSysClockFreq>
 80107ea:	0003      	movs	r3, r0
 80107ec:	61bb      	str	r3, [r7, #24]
        break;
 80107ee:	e00a      	b.n	8010806 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80107f0:	2380      	movs	r3, #128	; 0x80
 80107f2:	021b      	lsls	r3, r3, #8
 80107f4:	61bb      	str	r3, [r7, #24]
        break;
 80107f6:	e006      	b.n	8010806 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80107f8:	2300      	movs	r3, #0
 80107fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80107fc:	231e      	movs	r3, #30
 80107fe:	18fb      	adds	r3, r7, r3
 8010800:	2201      	movs	r2, #1
 8010802:	701a      	strb	r2, [r3, #0]
        break;
 8010804:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8010806:	69bb      	ldr	r3, [r7, #24]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d01e      	beq.n	801084a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	085a      	lsrs	r2, r3, #1
 8010812:	69bb      	ldr	r3, [r7, #24]
 8010814:	18d2      	adds	r2, r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	0019      	movs	r1, r3
 801081c:	0010      	movs	r0, r2
 801081e:	f7f8 fc8f 	bl	8009140 <__udivsi3>
 8010822:	0003      	movs	r3, r0
 8010824:	b29b      	uxth	r3, r3
 8010826:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	2b0f      	cmp	r3, #15
 801082c:	d909      	bls.n	8010842 <UART_SetConfig+0x2ca>
 801082e:	693a      	ldr	r2, [r7, #16]
 8010830:	2380      	movs	r3, #128	; 0x80
 8010832:	025b      	lsls	r3, r3, #9
 8010834:	429a      	cmp	r2, r3
 8010836:	d204      	bcs.n	8010842 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	693a      	ldr	r2, [r7, #16]
 801083e:	60da      	str	r2, [r3, #12]
 8010840:	e003      	b.n	801084a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8010842:	231e      	movs	r3, #30
 8010844:	18fb      	adds	r3, r7, r3
 8010846:	2201      	movs	r2, #1
 8010848:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2200      	movs	r2, #0
 801084e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8010856:	231e      	movs	r3, #30
 8010858:	18fb      	adds	r3, r7, r3
 801085a:	781b      	ldrb	r3, [r3, #0]
}
 801085c:	0018      	movs	r0, r3
 801085e:	46bd      	mov	sp, r7
 8010860:	b008      	add	sp, #32
 8010862:	bd80      	pop	{r7, pc}
 8010864:	efff69f3 	.word	0xefff69f3
 8010868:	ffffcfff 	.word	0xffffcfff
 801086c:	fffff4ff 	.word	0xfffff4ff
 8010870:	40013800 	.word	0x40013800
 8010874:	40021000 	.word	0x40021000
 8010878:	40004400 	.word	0x40004400
 801087c:	40004800 	.word	0x40004800
 8010880:	40004c00 	.word	0x40004c00
 8010884:	007a1200 	.word	0x007a1200

08010888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010894:	2201      	movs	r2, #1
 8010896:	4013      	ands	r3, r2
 8010898:	d00b      	beq.n	80108b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	685b      	ldr	r3, [r3, #4]
 80108a0:	4a4a      	ldr	r2, [pc, #296]	; (80109cc <UART_AdvFeatureConfig+0x144>)
 80108a2:	4013      	ands	r3, r2
 80108a4:	0019      	movs	r1, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	430a      	orrs	r2, r1
 80108b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b6:	2202      	movs	r2, #2
 80108b8:	4013      	ands	r3, r2
 80108ba:	d00b      	beq.n	80108d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	4a43      	ldr	r2, [pc, #268]	; (80109d0 <UART_AdvFeatureConfig+0x148>)
 80108c4:	4013      	ands	r3, r2
 80108c6:	0019      	movs	r1, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	430a      	orrs	r2, r1
 80108d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d8:	2204      	movs	r2, #4
 80108da:	4013      	ands	r3, r2
 80108dc:	d00b      	beq.n	80108f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	4a3b      	ldr	r2, [pc, #236]	; (80109d4 <UART_AdvFeatureConfig+0x14c>)
 80108e6:	4013      	ands	r3, r2
 80108e8:	0019      	movs	r1, r3
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	430a      	orrs	r2, r1
 80108f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108fa:	2208      	movs	r2, #8
 80108fc:	4013      	ands	r3, r2
 80108fe:	d00b      	beq.n	8010918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	4a34      	ldr	r2, [pc, #208]	; (80109d8 <UART_AdvFeatureConfig+0x150>)
 8010908:	4013      	ands	r3, r2
 801090a:	0019      	movs	r1, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	430a      	orrs	r2, r1
 8010916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091c:	2210      	movs	r2, #16
 801091e:	4013      	ands	r3, r2
 8010920:	d00b      	beq.n	801093a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	689b      	ldr	r3, [r3, #8]
 8010928:	4a2c      	ldr	r2, [pc, #176]	; (80109dc <UART_AdvFeatureConfig+0x154>)
 801092a:	4013      	ands	r3, r2
 801092c:	0019      	movs	r1, r3
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	430a      	orrs	r2, r1
 8010938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801093e:	2220      	movs	r2, #32
 8010940:	4013      	ands	r3, r2
 8010942:	d00b      	beq.n	801095c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	689b      	ldr	r3, [r3, #8]
 801094a:	4a25      	ldr	r2, [pc, #148]	; (80109e0 <UART_AdvFeatureConfig+0x158>)
 801094c:	4013      	ands	r3, r2
 801094e:	0019      	movs	r1, r3
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	430a      	orrs	r2, r1
 801095a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010960:	2240      	movs	r2, #64	; 0x40
 8010962:	4013      	ands	r3, r2
 8010964:	d01d      	beq.n	80109a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	4a1d      	ldr	r2, [pc, #116]	; (80109e4 <UART_AdvFeatureConfig+0x15c>)
 801096e:	4013      	ands	r3, r2
 8010970:	0019      	movs	r1, r3
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	430a      	orrs	r2, r1
 801097c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010982:	2380      	movs	r3, #128	; 0x80
 8010984:	035b      	lsls	r3, r3, #13
 8010986:	429a      	cmp	r2, r3
 8010988:	d10b      	bne.n	80109a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	4a15      	ldr	r2, [pc, #84]	; (80109e8 <UART_AdvFeatureConfig+0x160>)
 8010992:	4013      	ands	r3, r2
 8010994:	0019      	movs	r1, r3
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	430a      	orrs	r2, r1
 80109a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109a6:	2280      	movs	r2, #128	; 0x80
 80109a8:	4013      	ands	r3, r2
 80109aa:	d00b      	beq.n	80109c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	4a0e      	ldr	r2, [pc, #56]	; (80109ec <UART_AdvFeatureConfig+0x164>)
 80109b4:	4013      	ands	r3, r2
 80109b6:	0019      	movs	r1, r3
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	430a      	orrs	r2, r1
 80109c2:	605a      	str	r2, [r3, #4]
  }
}
 80109c4:	46c0      	nop			; (mov r8, r8)
 80109c6:	46bd      	mov	sp, r7
 80109c8:	b002      	add	sp, #8
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	fffdffff 	.word	0xfffdffff
 80109d0:	fffeffff 	.word	0xfffeffff
 80109d4:	fffbffff 	.word	0xfffbffff
 80109d8:	ffff7fff 	.word	0xffff7fff
 80109dc:	ffffefff 	.word	0xffffefff
 80109e0:	ffffdfff 	.word	0xffffdfff
 80109e4:	ffefffff 	.word	0xffefffff
 80109e8:	ff9fffff 	.word	0xff9fffff
 80109ec:	fff7ffff 	.word	0xfff7ffff

080109f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b086      	sub	sp, #24
 80109f4:	af02      	add	r7, sp, #8
 80109f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2280      	movs	r2, #128	; 0x80
 80109fc:	2100      	movs	r1, #0
 80109fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010a00:	f7fd f8a4 	bl	800db4c <HAL_GetTick>
 8010a04:	0003      	movs	r3, r0
 8010a06:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	2208      	movs	r2, #8
 8010a10:	4013      	ands	r3, r2
 8010a12:	2b08      	cmp	r3, #8
 8010a14:	d10c      	bne.n	8010a30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2280      	movs	r2, #128	; 0x80
 8010a1a:	0391      	lsls	r1, r2, #14
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	4a17      	ldr	r2, [pc, #92]	; (8010a7c <UART_CheckIdleState+0x8c>)
 8010a20:	9200      	str	r2, [sp, #0]
 8010a22:	2200      	movs	r2, #0
 8010a24:	f000 f82c 	bl	8010a80 <UART_WaitOnFlagUntilTimeout>
 8010a28:	1e03      	subs	r3, r0, #0
 8010a2a:	d001      	beq.n	8010a30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a2c:	2303      	movs	r3, #3
 8010a2e:	e021      	b.n	8010a74 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2204      	movs	r2, #4
 8010a38:	4013      	ands	r3, r2
 8010a3a:	2b04      	cmp	r3, #4
 8010a3c:	d10c      	bne.n	8010a58 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	2280      	movs	r2, #128	; 0x80
 8010a42:	03d1      	lsls	r1, r2, #15
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	4a0d      	ldr	r2, [pc, #52]	; (8010a7c <UART_CheckIdleState+0x8c>)
 8010a48:	9200      	str	r2, [sp, #0]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f000 f818 	bl	8010a80 <UART_WaitOnFlagUntilTimeout>
 8010a50:	1e03      	subs	r3, r0, #0
 8010a52:	d001      	beq.n	8010a58 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a54:	2303      	movs	r3, #3
 8010a56:	e00d      	b.n	8010a74 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2220      	movs	r2, #32
 8010a5c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2220      	movs	r2, #32
 8010a62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2200      	movs	r2, #0
 8010a68:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2274      	movs	r2, #116	; 0x74
 8010a6e:	2100      	movs	r1, #0
 8010a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010a72:	2300      	movs	r3, #0
}
 8010a74:	0018      	movs	r0, r3
 8010a76:	46bd      	mov	sp, r7
 8010a78:	b004      	add	sp, #16
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	01ffffff 	.word	0x01ffffff

08010a80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b094      	sub	sp, #80	; 0x50
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	603b      	str	r3, [r7, #0]
 8010a8c:	1dfb      	adds	r3, r7, #7
 8010a8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a90:	e0a3      	b.n	8010bda <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a94:	3301      	adds	r3, #1
 8010a96:	d100      	bne.n	8010a9a <UART_WaitOnFlagUntilTimeout+0x1a>
 8010a98:	e09f      	b.n	8010bda <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a9a:	f7fd f857 	bl	800db4c <HAL_GetTick>
 8010a9e:	0002      	movs	r2, r0
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	1ad3      	subs	r3, r2, r3
 8010aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d302      	bcc.n	8010ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8010aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d13d      	bne.n	8010b2c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8010ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8010ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8010aba:	2301      	movs	r3, #1
 8010abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac0:	f383 8810 	msr	PRIMASK, r3
}
 8010ac4:	46c0      	nop			; (mov r8, r8)
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	681a      	ldr	r2, [r3, #0]
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	494c      	ldr	r1, [pc, #304]	; (8010c04 <UART_WaitOnFlagUntilTimeout+0x184>)
 8010ad2:	400a      	ands	r2, r1
 8010ad4:	601a      	str	r2, [r3, #0]
 8010ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ad8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010adc:	f383 8810 	msr	PRIMASK, r3
}
 8010ae0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ae6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8010ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aea:	643b      	str	r3, [r7, #64]	; 0x40
 8010aec:	2301      	movs	r3, #1
 8010aee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af2:	f383 8810 	msr	PRIMASK, r3
}
 8010af6:	46c0      	nop			; (mov r8, r8)
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	689a      	ldr	r2, [r3, #8]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2101      	movs	r1, #1
 8010b04:	438a      	bics	r2, r1
 8010b06:	609a      	str	r2, [r3, #8]
 8010b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b0e:	f383 8810 	msr	PRIMASK, r3
}
 8010b12:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2220      	movs	r2, #32
 8010b18:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2220      	movs	r2, #32
 8010b1e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2274      	movs	r2, #116	; 0x74
 8010b24:	2100      	movs	r1, #0
 8010b26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8010b28:	2303      	movs	r3, #3
 8010b2a:	e067      	b.n	8010bfc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2204      	movs	r2, #4
 8010b34:	4013      	ands	r3, r2
 8010b36:	d050      	beq.n	8010bda <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	69da      	ldr	r2, [r3, #28]
 8010b3e:	2380      	movs	r3, #128	; 0x80
 8010b40:	011b      	lsls	r3, r3, #4
 8010b42:	401a      	ands	r2, r3
 8010b44:	2380      	movs	r3, #128	; 0x80
 8010b46:	011b      	lsls	r3, r3, #4
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d146      	bne.n	8010bda <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2280      	movs	r2, #128	; 0x80
 8010b52:	0112      	lsls	r2, r2, #4
 8010b54:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b56:	f3ef 8310 	mrs	r3, PRIMASK
 8010b5a:	613b      	str	r3, [r7, #16]
  return(result);
 8010b5c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b60:	2301      	movs	r3, #1
 8010b62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	f383 8810 	msr	PRIMASK, r3
}
 8010b6a:	46c0      	nop			; (mov r8, r8)
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4923      	ldr	r1, [pc, #140]	; (8010c04 <UART_WaitOnFlagUntilTimeout+0x184>)
 8010b78:	400a      	ands	r2, r1
 8010b7a:	601a      	str	r2, [r3, #0]
 8010b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	f383 8810 	msr	PRIMASK, r3
}
 8010b86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b88:	f3ef 8310 	mrs	r3, PRIMASK
 8010b8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8010b8e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b92:	2301      	movs	r3, #1
 8010b94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b96:	6a3b      	ldr	r3, [r7, #32]
 8010b98:	f383 8810 	msr	PRIMASK, r3
}
 8010b9c:	46c0      	nop			; (mov r8, r8)
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	689a      	ldr	r2, [r3, #8]
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	2101      	movs	r1, #1
 8010baa:	438a      	bics	r2, r1
 8010bac:	609a      	str	r2, [r3, #8]
 8010bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bb0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb4:	f383 8810 	msr	PRIMASK, r3
}
 8010bb8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2220      	movs	r2, #32
 8010bbe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	2220      	movs	r2, #32
 8010bc4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	2280      	movs	r2, #128	; 0x80
 8010bca:	2120      	movs	r1, #32
 8010bcc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	2274      	movs	r2, #116	; 0x74
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8010bd6:	2303      	movs	r3, #3
 8010bd8:	e010      	b.n	8010bfc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	69db      	ldr	r3, [r3, #28]
 8010be0:	68ba      	ldr	r2, [r7, #8]
 8010be2:	4013      	ands	r3, r2
 8010be4:	68ba      	ldr	r2, [r7, #8]
 8010be6:	1ad3      	subs	r3, r2, r3
 8010be8:	425a      	negs	r2, r3
 8010bea:	4153      	adcs	r3, r2
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	001a      	movs	r2, r3
 8010bf0:	1dfb      	adds	r3, r7, #7
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d100      	bne.n	8010bfa <UART_WaitOnFlagUntilTimeout+0x17a>
 8010bf8:	e74b      	b.n	8010a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010bfa:	2300      	movs	r3, #0
}
 8010bfc:	0018      	movs	r0, r3
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	b014      	add	sp, #80	; 0x50
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	fffffe5f 	.word	0xfffffe5f

08010c08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b08c      	sub	sp, #48	; 0x30
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	1dbb      	adds	r3, r7, #6
 8010c14:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	68ba      	ldr	r2, [r7, #8]
 8010c1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	1dba      	adds	r2, r7, #6
 8010c20:	2158      	movs	r1, #88	; 0x58
 8010c22:	8812      	ldrh	r2, [r2, #0]
 8010c24:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	1dba      	adds	r2, r7, #6
 8010c2a:	215a      	movs	r1, #90	; 0x5a
 8010c2c:	8812      	ldrh	r2, [r2, #0]
 8010c2e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	2200      	movs	r2, #0
 8010c34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	689a      	ldr	r2, [r3, #8]
 8010c3a:	2380      	movs	r3, #128	; 0x80
 8010c3c:	015b      	lsls	r3, r3, #5
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d10d      	bne.n	8010c5e <UART_Start_Receive_IT+0x56>
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	691b      	ldr	r3, [r3, #16]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d104      	bne.n	8010c54 <UART_Start_Receive_IT+0x4c>
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	225c      	movs	r2, #92	; 0x5c
 8010c4e:	4943      	ldr	r1, [pc, #268]	; (8010d5c <UART_Start_Receive_IT+0x154>)
 8010c50:	5299      	strh	r1, [r3, r2]
 8010c52:	e02e      	b.n	8010cb2 <UART_Start_Receive_IT+0xaa>
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	225c      	movs	r2, #92	; 0x5c
 8010c58:	21ff      	movs	r1, #255	; 0xff
 8010c5a:	5299      	strh	r1, [r3, r2]
 8010c5c:	e029      	b.n	8010cb2 <UART_Start_Receive_IT+0xaa>
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	689b      	ldr	r3, [r3, #8]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d10d      	bne.n	8010c82 <UART_Start_Receive_IT+0x7a>
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	691b      	ldr	r3, [r3, #16]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d104      	bne.n	8010c78 <UART_Start_Receive_IT+0x70>
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	225c      	movs	r2, #92	; 0x5c
 8010c72:	21ff      	movs	r1, #255	; 0xff
 8010c74:	5299      	strh	r1, [r3, r2]
 8010c76:	e01c      	b.n	8010cb2 <UART_Start_Receive_IT+0xaa>
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	225c      	movs	r2, #92	; 0x5c
 8010c7c:	217f      	movs	r1, #127	; 0x7f
 8010c7e:	5299      	strh	r1, [r3, r2]
 8010c80:	e017      	b.n	8010cb2 <UART_Start_Receive_IT+0xaa>
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	689a      	ldr	r2, [r3, #8]
 8010c86:	2380      	movs	r3, #128	; 0x80
 8010c88:	055b      	lsls	r3, r3, #21
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d10d      	bne.n	8010caa <UART_Start_Receive_IT+0xa2>
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	691b      	ldr	r3, [r3, #16]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d104      	bne.n	8010ca0 <UART_Start_Receive_IT+0x98>
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	225c      	movs	r2, #92	; 0x5c
 8010c9a:	217f      	movs	r1, #127	; 0x7f
 8010c9c:	5299      	strh	r1, [r3, r2]
 8010c9e:	e008      	b.n	8010cb2 <UART_Start_Receive_IT+0xaa>
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	225c      	movs	r2, #92	; 0x5c
 8010ca4:	213f      	movs	r1, #63	; 0x3f
 8010ca6:	5299      	strh	r1, [r3, r2]
 8010ca8:	e003      	b.n	8010cb2 <UART_Start_Receive_IT+0xaa>
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	225c      	movs	r2, #92	; 0x5c
 8010cae:	2100      	movs	r1, #0
 8010cb0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	2280      	movs	r2, #128	; 0x80
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	2222      	movs	r2, #34	; 0x22
 8010cbe:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8010cc4:	61fb      	str	r3, [r7, #28]
  return(result);
 8010cc6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cca:	2301      	movs	r3, #1
 8010ccc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010cce:	6a3b      	ldr	r3, [r7, #32]
 8010cd0:	f383 8810 	msr	PRIMASK, r3
}
 8010cd4:	46c0      	nop			; (mov r8, r8)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	689a      	ldr	r2, [r3, #8]
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2101      	movs	r1, #1
 8010ce2:	430a      	orrs	r2, r1
 8010ce4:	609a      	str	r2, [r3, #8]
 8010ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cec:	f383 8810 	msr	PRIMASK, r3
}
 8010cf0:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	689a      	ldr	r2, [r3, #8]
 8010cf6:	2380      	movs	r3, #128	; 0x80
 8010cf8:	015b      	lsls	r3, r3, #5
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d107      	bne.n	8010d0e <UART_Start_Receive_IT+0x106>
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	691b      	ldr	r3, [r3, #16]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d103      	bne.n	8010d0e <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	4a15      	ldr	r2, [pc, #84]	; (8010d60 <UART_Start_Receive_IT+0x158>)
 8010d0a:	665a      	str	r2, [r3, #100]	; 0x64
 8010d0c:	e002      	b.n	8010d14 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	4a14      	ldr	r2, [pc, #80]	; (8010d64 <UART_Start_Receive_IT+0x15c>)
 8010d12:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	2274      	movs	r2, #116	; 0x74
 8010d18:	2100      	movs	r1, #0
 8010d1a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8010d20:	613b      	str	r3, [r7, #16]
  return(result);
 8010d22:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8010d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d26:	2301      	movs	r3, #1
 8010d28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	f383 8810 	msr	PRIMASK, r3
}
 8010d30:	46c0      	nop			; (mov r8, r8)
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2190      	movs	r1, #144	; 0x90
 8010d3e:	0049      	lsls	r1, r1, #1
 8010d40:	430a      	orrs	r2, r1
 8010d42:	601a      	str	r2, [r3, #0]
 8010d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d46:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d48:	69bb      	ldr	r3, [r7, #24]
 8010d4a:	f383 8810 	msr	PRIMASK, r3
}
 8010d4e:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8010d50:	2300      	movs	r3, #0
}
 8010d52:	0018      	movs	r0, r3
 8010d54:	46bd      	mov	sp, r7
 8010d56:	b00c      	add	sp, #48	; 0x30
 8010d58:	bd80      	pop	{r7, pc}
 8010d5a:	46c0      	nop			; (mov r8, r8)
 8010d5c:	000001ff 	.word	0x000001ff
 8010d60:	08011191 	.word	0x08011191
 8010d64:	08011021 	.word	0x08011021

08010d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b08e      	sub	sp, #56	; 0x38
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d70:	f3ef 8310 	mrs	r3, PRIMASK
 8010d74:	617b      	str	r3, [r7, #20]
  return(result);
 8010d76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010d78:	637b      	str	r3, [r7, #52]	; 0x34
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	f383 8810 	msr	PRIMASK, r3
}
 8010d84:	46c0      	nop			; (mov r8, r8)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	681a      	ldr	r2, [r3, #0]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4925      	ldr	r1, [pc, #148]	; (8010e28 <UART_EndRxTransfer+0xc0>)
 8010d92:	400a      	ands	r2, r1
 8010d94:	601a      	str	r2, [r3, #0]
 8010d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	f383 8810 	msr	PRIMASK, r3
}
 8010da0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010da2:	f3ef 8310 	mrs	r3, PRIMASK
 8010da6:	623b      	str	r3, [r7, #32]
  return(result);
 8010da8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010daa:	633b      	str	r3, [r7, #48]	; 0x30
 8010dac:	2301      	movs	r3, #1
 8010dae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db2:	f383 8810 	msr	PRIMASK, r3
}
 8010db6:	46c0      	nop			; (mov r8, r8)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	689a      	ldr	r2, [r3, #8]
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	2101      	movs	r1, #1
 8010dc4:	438a      	bics	r2, r1
 8010dc6:	609a      	str	r2, [r3, #8]
 8010dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dce:	f383 8810 	msr	PRIMASK, r3
}
 8010dd2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010dd8:	2b01      	cmp	r3, #1
 8010dda:	d118      	bne.n	8010e0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8010de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8010de2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010de6:	2301      	movs	r3, #1
 8010de8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	f383 8810 	msr	PRIMASK, r3
}
 8010df0:	46c0      	nop			; (mov r8, r8)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	2110      	movs	r1, #16
 8010dfe:	438a      	bics	r2, r1
 8010e00:	601a      	str	r2, [r3, #0]
 8010e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	f383 8810 	msr	PRIMASK, r3
}
 8010e0c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2220      	movs	r2, #32
 8010e12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2200      	movs	r2, #0
 8010e18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8010e20:	46c0      	nop			; (mov r8, r8)
 8010e22:	46bd      	mov	sp, r7
 8010e24:	b00e      	add	sp, #56	; 0x38
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	fffffedf 	.word	0xfffffedf

08010e2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b084      	sub	sp, #16
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	225a      	movs	r2, #90	; 0x5a
 8010e3e:	2100      	movs	r1, #0
 8010e40:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2252      	movs	r2, #82	; 0x52
 8010e46:	2100      	movs	r1, #0
 8010e48:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	0018      	movs	r0, r3
 8010e4e:	f7ff fb7f 	bl	8010550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e52:	46c0      	nop			; (mov r8, r8)
 8010e54:	46bd      	mov	sp, r7
 8010e56:	b004      	add	sp, #16
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b08a      	sub	sp, #40	; 0x28
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e66:	2b21      	cmp	r3, #33	; 0x21
 8010e68:	d14d      	bne.n	8010f06 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2252      	movs	r2, #82	; 0x52
 8010e6e:	5a9b      	ldrh	r3, [r3, r2]
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d132      	bne.n	8010edc <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e76:	f3ef 8310 	mrs	r3, PRIMASK
 8010e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8010e7c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8010e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8010e80:	2301      	movs	r3, #1
 8010e82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f383 8810 	msr	PRIMASK, r3
}
 8010e8a:	46c0      	nop			; (mov r8, r8)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	681a      	ldr	r2, [r3, #0]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2180      	movs	r1, #128	; 0x80
 8010e98:	438a      	bics	r2, r1
 8010e9a:	601a      	str	r2, [r3, #0]
 8010e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	f383 8810 	msr	PRIMASK, r3
}
 8010ea6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8010eac:	617b      	str	r3, [r7, #20]
  return(result);
 8010eae:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010eb0:	623b      	str	r3, [r7, #32]
 8010eb2:	2301      	movs	r3, #1
 8010eb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	f383 8810 	msr	PRIMASK, r3
}
 8010ebc:	46c0      	nop			; (mov r8, r8)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	2140      	movs	r1, #64	; 0x40
 8010eca:	430a      	orrs	r2, r1
 8010ecc:	601a      	str	r2, [r3, #0]
 8010ece:	6a3b      	ldr	r3, [r7, #32]
 8010ed0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ed2:	69fb      	ldr	r3, [r7, #28]
 8010ed4:	f383 8810 	msr	PRIMASK, r3
}
 8010ed8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010eda:	e014      	b.n	8010f06 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ee0:	781a      	ldrb	r2, [r3, #0]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	b292      	uxth	r2, r2
 8010ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010eee:	1c5a      	adds	r2, r3, #1
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2252      	movs	r2, #82	; 0x52
 8010ef8:	5a9b      	ldrh	r3, [r3, r2]
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	3b01      	subs	r3, #1
 8010efe:	b299      	uxth	r1, r3
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2252      	movs	r2, #82	; 0x52
 8010f04:	5299      	strh	r1, [r3, r2]
}
 8010f06:	46c0      	nop			; (mov r8, r8)
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	b00a      	add	sp, #40	; 0x28
 8010f0c:	bd80      	pop	{r7, pc}

08010f0e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010f0e:	b580      	push	{r7, lr}
 8010f10:	b08c      	sub	sp, #48	; 0x30
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f1a:	2b21      	cmp	r3, #33	; 0x21
 8010f1c:	d151      	bne.n	8010fc2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2252      	movs	r2, #82	; 0x52
 8010f22:	5a9b      	ldrh	r3, [r3, r2]
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d132      	bne.n	8010f90 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8010f2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f30:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8010f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f34:	2301      	movs	r3, #1
 8010f36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	f383 8810 	msr	PRIMASK, r3
}
 8010f3e:	46c0      	nop			; (mov r8, r8)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	2180      	movs	r1, #128	; 0x80
 8010f4c:	438a      	bics	r2, r1
 8010f4e:	601a      	str	r2, [r3, #0]
 8010f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	f383 8810 	msr	PRIMASK, r3
}
 8010f5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8010f60:	61bb      	str	r3, [r7, #24]
  return(result);
 8010f62:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f64:	627b      	str	r3, [r7, #36]	; 0x24
 8010f66:	2301      	movs	r3, #1
 8010f68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f6a:	69fb      	ldr	r3, [r7, #28]
 8010f6c:	f383 8810 	msr	PRIMASK, r3
}
 8010f70:	46c0      	nop			; (mov r8, r8)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2140      	movs	r1, #64	; 0x40
 8010f7e:	430a      	orrs	r2, r1
 8010f80:	601a      	str	r2, [r3, #0]
 8010f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f86:	6a3b      	ldr	r3, [r7, #32]
 8010f88:	f383 8810 	msr	PRIMASK, r3
}
 8010f8c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010f8e:	e018      	b.n	8010fc2 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f94:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f98:	881a      	ldrh	r2, [r3, #0]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	05d2      	lsls	r2, r2, #23
 8010fa0:	0dd2      	lsrs	r2, r2, #23
 8010fa2:	b292      	uxth	r2, r2
 8010fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010faa:	1c9a      	adds	r2, r3, #2
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2252      	movs	r2, #82	; 0x52
 8010fb4:	5a9b      	ldrh	r3, [r3, r2]
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	b299      	uxth	r1, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2252      	movs	r2, #82	; 0x52
 8010fc0:	5299      	strh	r1, [r3, r2]
}
 8010fc2:	46c0      	nop			; (mov r8, r8)
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	b00c      	add	sp, #48	; 0x30
 8010fc8:	bd80      	pop	{r7, pc}

08010fca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010fca:	b580      	push	{r7, lr}
 8010fcc:	b086      	sub	sp, #24
 8010fce:	af00      	add	r7, sp, #0
 8010fd0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8010fd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8010fd8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010fda:	617b      	str	r3, [r7, #20]
 8010fdc:	2301      	movs	r3, #1
 8010fde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f383 8810 	msr	PRIMASK, r3
}
 8010fe6:	46c0      	nop			; (mov r8, r8)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	681a      	ldr	r2, [r3, #0]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	2140      	movs	r1, #64	; 0x40
 8010ff4:	438a      	bics	r2, r1
 8010ff6:	601a      	str	r2, [r3, #0]
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	f383 8810 	msr	PRIMASK, r3
}
 8011002:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2220      	movs	r2, #32
 8011008:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2200      	movs	r2, #0
 801100e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	0018      	movs	r0, r3
 8011014:	f7ff fa8c 	bl	8010530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011018:	46c0      	nop			; (mov r8, r8)
 801101a:	46bd      	mov	sp, r7
 801101c:	b006      	add	sp, #24
 801101e:	bd80      	pop	{r7, pc}

08011020 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011020:	b590      	push	{r4, r7, lr}
 8011022:	b091      	sub	sp, #68	; 0x44
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011028:	203e      	movs	r0, #62	; 0x3e
 801102a:	183b      	adds	r3, r7, r0
 801102c:	687a      	ldr	r2, [r7, #4]
 801102e:	215c      	movs	r1, #92	; 0x5c
 8011030:	5a52      	ldrh	r2, [r2, r1]
 8011032:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011038:	2b22      	cmp	r3, #34	; 0x22
 801103a:	d000      	beq.n	801103e <UART_RxISR_8BIT+0x1e>
 801103c:	e097      	b.n	801116e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	243c      	movs	r4, #60	; 0x3c
 8011044:	193b      	adds	r3, r7, r4
 8011046:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8011048:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801104a:	193b      	adds	r3, r7, r4
 801104c:	881b      	ldrh	r3, [r3, #0]
 801104e:	b2da      	uxtb	r2, r3
 8011050:	183b      	adds	r3, r7, r0
 8011052:	881b      	ldrh	r3, [r3, #0]
 8011054:	b2d9      	uxtb	r1, r3
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801105a:	400a      	ands	r2, r1
 801105c:	b2d2      	uxtb	r2, r2
 801105e:	701a      	strb	r2, [r3, #0]
	if (huart->Instance == USART2) GSM_Receive((uint8_t)(uhdata & (uint8_t)uhMask));
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	4a48      	ldr	r2, [pc, #288]	; (8011188 <UART_RxISR_8BIT+0x168>)
 8011066:	4293      	cmp	r3, r2
 8011068:	d10a      	bne.n	8011080 <UART_RxISR_8BIT+0x60>
 801106a:	193b      	adds	r3, r7, r4
 801106c:	881b      	ldrh	r3, [r3, #0]
 801106e:	b2db      	uxtb	r3, r3
 8011070:	183a      	adds	r2, r7, r0
 8011072:	8812      	ldrh	r2, [r2, #0]
 8011074:	b2d2      	uxtb	r2, r2
 8011076:	4013      	ands	r3, r2
 8011078:	b2db      	uxtb	r3, r3
 801107a:	0018      	movs	r0, r3
 801107c:	f7fa ff8e 	bl	800bf9c <GSM_Receive>
	//if (huart->Instance == USART1) Debug_Receive((uint8_t)(uhdata & (uint8_t)uhMask));

    if (huart->RxXferCount == 0U)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	225a      	movs	r2, #90	; 0x5a
 8011084:	5a9b      	ldrh	r3, [r3, r2]
 8011086:	b29b      	uxth	r3, r3
 8011088:	2b00      	cmp	r3, #0
 801108a:	d178      	bne.n	801117e <UART_RxISR_8BIT+0x15e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801108c:	f3ef 8310 	mrs	r3, PRIMASK
 8011090:	61bb      	str	r3, [r7, #24]
  return(result);
 8011092:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011094:	63bb      	str	r3, [r7, #56]	; 0x38
 8011096:	2301      	movs	r3, #1
 8011098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801109a:	69fb      	ldr	r3, [r7, #28]
 801109c:	f383 8810 	msr	PRIMASK, r3
}
 80110a0:	46c0      	nop			; (mov r8, r8)
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4937      	ldr	r1, [pc, #220]	; (801118c <UART_RxISR_8BIT+0x16c>)
 80110ae:	400a      	ands	r2, r1
 80110b0:	601a      	str	r2, [r3, #0]
 80110b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110b6:	6a3b      	ldr	r3, [r7, #32]
 80110b8:	f383 8810 	msr	PRIMASK, r3
}
 80110bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110be:	f3ef 8310 	mrs	r3, PRIMASK
 80110c2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80110c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110c6:	637b      	str	r3, [r7, #52]	; 0x34
 80110c8:	2301      	movs	r3, #1
 80110ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ce:	f383 8810 	msr	PRIMASK, r3
}
 80110d2:	46c0      	nop			; (mov r8, r8)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	689a      	ldr	r2, [r3, #8]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	2101      	movs	r1, #1
 80110e0:	438a      	bics	r2, r1
 80110e2:	609a      	str	r2, [r3, #8]
 80110e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ea:	f383 8810 	msr	PRIMASK, r3
}
 80110ee:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2220      	movs	r2, #32
 80110f4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2200      	movs	r2, #0
 80110fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011100:	2b01      	cmp	r3, #1
 8011102:	d12f      	bne.n	8011164 <UART_RxISR_8BIT+0x144>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2200      	movs	r2, #0
 8011108:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801110a:	f3ef 8310 	mrs	r3, PRIMASK
 801110e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011110:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011112:	633b      	str	r3, [r7, #48]	; 0x30
 8011114:	2301      	movs	r3, #1
 8011116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	f383 8810 	msr	PRIMASK, r3
}
 801111e:	46c0      	nop			; (mov r8, r8)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2110      	movs	r1, #16
 801112c:	438a      	bics	r2, r1
 801112e:	601a      	str	r2, [r3, #0]
 8011130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011132:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	f383 8810 	msr	PRIMASK, r3
}
 801113a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	69db      	ldr	r3, [r3, #28]
 8011142:	2210      	movs	r2, #16
 8011144:	4013      	ands	r3, r2
 8011146:	2b10      	cmp	r3, #16
 8011148:	d103      	bne.n	8011152 <UART_RxISR_8BIT+0x132>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2210      	movs	r2, #16
 8011150:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2258      	movs	r2, #88	; 0x58
 8011156:	5a9a      	ldrh	r2, [r3, r2]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	0011      	movs	r1, r2
 801115c:	0018      	movs	r0, r3
 801115e:	f7ff f9ff 	bl	8010560 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011162:	e00c      	b.n	801117e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	0018      	movs	r0, r3
 8011168:	f7ff f9ea 	bl	8010540 <HAL_UART_RxCpltCallback>
}
 801116c:	e007      	b.n	801117e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	699a      	ldr	r2, [r3, #24]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2108      	movs	r1, #8
 801117a:	430a      	orrs	r2, r1
 801117c:	619a      	str	r2, [r3, #24]
}
 801117e:	46c0      	nop			; (mov r8, r8)
 8011180:	46bd      	mov	sp, r7
 8011182:	b011      	add	sp, #68	; 0x44
 8011184:	bd90      	pop	{r4, r7, pc}
 8011186:	46c0      	nop			; (mov r8, r8)
 8011188:	40004400 	.word	0x40004400
 801118c:	fffffedf 	.word	0xfffffedf

08011190 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b090      	sub	sp, #64	; 0x40
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011198:	203e      	movs	r0, #62	; 0x3e
 801119a:	183b      	adds	r3, r7, r0
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	215c      	movs	r1, #92	; 0x5c
 80111a0:	5a52      	ldrh	r2, [r2, r1]
 80111a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111a8:	2b22      	cmp	r3, #34	; 0x22
 80111aa:	d000      	beq.n	80111ae <UART_RxISR_16BIT+0x1e>
 80111ac:	e095      	b.n	80112da <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	213c      	movs	r1, #60	; 0x3c
 80111b4:	187b      	adds	r3, r7, r1
 80111b6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80111b8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111be:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80111c0:	187b      	adds	r3, r7, r1
 80111c2:	183a      	adds	r2, r7, r0
 80111c4:	881b      	ldrh	r3, [r3, #0]
 80111c6:	8812      	ldrh	r2, [r2, #0]
 80111c8:	4013      	ands	r3, r2
 80111ca:	b29a      	uxth	r2, r3
 80111cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111d4:	1c9a      	adds	r2, r3, #2
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	225a      	movs	r2, #90	; 0x5a
 80111de:	5a9b      	ldrh	r3, [r3, r2]
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	3b01      	subs	r3, #1
 80111e4:	b299      	uxth	r1, r3
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	225a      	movs	r2, #90	; 0x5a
 80111ea:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	225a      	movs	r2, #90	; 0x5a
 80111f0:	5a9b      	ldrh	r3, [r3, r2]
 80111f2:	b29b      	uxth	r3, r3
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d178      	bne.n	80112ea <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111f8:	f3ef 8310 	mrs	r3, PRIMASK
 80111fc:	617b      	str	r3, [r7, #20]
  return(result);
 80111fe:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011200:	637b      	str	r3, [r7, #52]	; 0x34
 8011202:	2301      	movs	r3, #1
 8011204:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011206:	69bb      	ldr	r3, [r7, #24]
 8011208:	f383 8810 	msr	PRIMASK, r3
}
 801120c:	46c0      	nop			; (mov r8, r8)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	681a      	ldr	r2, [r3, #0]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	4936      	ldr	r1, [pc, #216]	; (80112f4 <UART_RxISR_16BIT+0x164>)
 801121a:	400a      	ands	r2, r1
 801121c:	601a      	str	r2, [r3, #0]
 801121e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011220:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	f383 8810 	msr	PRIMASK, r3
}
 8011228:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801122a:	f3ef 8310 	mrs	r3, PRIMASK
 801122e:	623b      	str	r3, [r7, #32]
  return(result);
 8011230:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011232:	633b      	str	r3, [r7, #48]	; 0x30
 8011234:	2301      	movs	r3, #1
 8011236:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123a:	f383 8810 	msr	PRIMASK, r3
}
 801123e:	46c0      	nop			; (mov r8, r8)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	689a      	ldr	r2, [r3, #8]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	2101      	movs	r1, #1
 801124c:	438a      	bics	r2, r1
 801124e:	609a      	str	r2, [r3, #8]
 8011250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011252:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011256:	f383 8810 	msr	PRIMASK, r3
}
 801125a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2220      	movs	r2, #32
 8011260:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2200      	movs	r2, #0
 8011266:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801126c:	2b01      	cmp	r3, #1
 801126e:	d12f      	bne.n	80112d0 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2200      	movs	r2, #0
 8011274:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011276:	f3ef 8310 	mrs	r3, PRIMASK
 801127a:	60bb      	str	r3, [r7, #8]
  return(result);
 801127c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801127e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011280:	2301      	movs	r3, #1
 8011282:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f383 8810 	msr	PRIMASK, r3
}
 801128a:	46c0      	nop			; (mov r8, r8)
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2110      	movs	r1, #16
 8011298:	438a      	bics	r2, r1
 801129a:	601a      	str	r2, [r3, #0]
 801129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	f383 8810 	msr	PRIMASK, r3
}
 80112a6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	69db      	ldr	r3, [r3, #28]
 80112ae:	2210      	movs	r2, #16
 80112b0:	4013      	ands	r3, r2
 80112b2:	2b10      	cmp	r3, #16
 80112b4:	d103      	bne.n	80112be <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	2210      	movs	r2, #16
 80112bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2258      	movs	r2, #88	; 0x58
 80112c2:	5a9a      	ldrh	r2, [r3, r2]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	0011      	movs	r1, r2
 80112c8:	0018      	movs	r0, r3
 80112ca:	f7ff f949 	bl	8010560 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80112ce:	e00c      	b.n	80112ea <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	0018      	movs	r0, r3
 80112d4:	f7ff f934 	bl	8010540 <HAL_UART_RxCpltCallback>
}
 80112d8:	e007      	b.n	80112ea <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	699a      	ldr	r2, [r3, #24]
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2108      	movs	r1, #8
 80112e6:	430a      	orrs	r2, r1
 80112e8:	619a      	str	r2, [r3, #24]
}
 80112ea:	46c0      	nop			; (mov r8, r8)
 80112ec:	46bd      	mov	sp, r7
 80112ee:	b010      	add	sp, #64	; 0x40
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	46c0      	nop			; (mov r8, r8)
 80112f4:	fffffedf 	.word	0xfffffedf

080112f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011300:	46c0      	nop			; (mov r8, r8)
 8011302:	46bd      	mov	sp, r7
 8011304:	b002      	add	sp, #8
 8011306:	bd80      	pop	{r7, pc}

08011308 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d101      	bne.n	801131a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8011316:	2301      	movs	r3, #1
 8011318:	e017      	b.n	801134a <HAL_WWDG_Init+0x42>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	0018      	movs	r0, r3
 801131e:	f7fc fb15 	bl	800d94c <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	68da      	ldr	r2, [r3, #12]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2180      	movs	r1, #128	; 0x80
 801132c:	430a      	orrs	r2, r1
 801132e:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	691a      	ldr	r2, [r3, #16]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	431a      	orrs	r2, r3
 801133a:	0011      	movs	r1, r2
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	689a      	ldr	r2, [r3, #8]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	430a      	orrs	r2, r1
 8011346:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8011348:	2300      	movs	r3, #0
}
 801134a:	0018      	movs	r0, r3
 801134c:	46bd      	mov	sp, r7
 801134e:	b002      	add	sp, #8
 8011350:	bd80      	pop	{r7, pc}

08011352 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8011352:	b580      	push	{r7, lr}
 8011354:	b082      	sub	sp, #8
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	68d2      	ldr	r2, [r2, #12]
 8011362:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011364:	2300      	movs	r3, #0
}
 8011366:	0018      	movs	r0, r3
 8011368:	46bd      	mov	sp, r7
 801136a:	b002      	add	sp, #8
 801136c:	bd80      	pop	{r7, pc}

0801136e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b084      	sub	sp, #16
 8011372:	af00      	add	r7, sp, #0
 8011374:	0002      	movs	r2, r0
 8011376:	1dbb      	adds	r3, r7, #6
 8011378:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801137a:	2300      	movs	r3, #0
 801137c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801137e:	1dbb      	adds	r3, r7, #6
 8011380:	2200      	movs	r2, #0
 8011382:	5e9b      	ldrsh	r3, [r3, r2]
 8011384:	2b84      	cmp	r3, #132	; 0x84
 8011386:	d006      	beq.n	8011396 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8011388:	1dbb      	adds	r3, r7, #6
 801138a:	2200      	movs	r2, #0
 801138c:	5e9a      	ldrsh	r2, [r3, r2]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	18d3      	adds	r3, r2, r3
 8011392:	3303      	adds	r3, #3
 8011394:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011396:	68fb      	ldr	r3, [r7, #12]
}
 8011398:	0018      	movs	r0, r3
 801139a:	46bd      	mov	sp, r7
 801139c:	b004      	add	sp, #16
 801139e:	bd80      	pop	{r7, pc}

080113a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80113a4:	f000 faa2 	bl	80118ec <vTaskStartScheduler>
  
  return osOK;
 80113a8:	2300      	movs	r3, #0
}
 80113aa:	0018      	movs	r0, r3
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80113b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113b2:	b089      	sub	sp, #36	; 0x24
 80113b4:	af04      	add	r7, sp, #16
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	695b      	ldr	r3, [r3, #20]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d020      	beq.n	8011404 <osThreadCreate+0x54>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	699b      	ldr	r3, [r3, #24]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d01c      	beq.n	8011404 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	685c      	ldr	r4, [r3, #4]
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681d      	ldr	r5, [r3, #0]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	691e      	ldr	r6, [r3, #16]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2208      	movs	r2, #8
 80113da:	5e9b      	ldrsh	r3, [r3, r2]
 80113dc:	0018      	movs	r0, r3
 80113de:	f7ff ffc6 	bl	801136e <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	695a      	ldr	r2, [r3, #20]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80113ea:	6839      	ldr	r1, [r7, #0]
 80113ec:	9302      	str	r3, [sp, #8]
 80113ee:	9201      	str	r2, [sp, #4]
 80113f0:	9000      	str	r0, [sp, #0]
 80113f2:	000b      	movs	r3, r1
 80113f4:	0032      	movs	r2, r6
 80113f6:	0029      	movs	r1, r5
 80113f8:	0020      	movs	r0, r4
 80113fa:	f000 f8e3 	bl	80115c4 <xTaskCreateStatic>
 80113fe:	0003      	movs	r3, r0
 8011400:	60fb      	str	r3, [r7, #12]
 8011402:	e01d      	b.n	8011440 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	685c      	ldr	r4, [r3, #4]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011410:	b29e      	uxth	r6, r3
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2208      	movs	r2, #8
 8011416:	5e9b      	ldrsh	r3, [r3, r2]
 8011418:	0018      	movs	r0, r3
 801141a:	f7ff ffa8 	bl	801136e <makeFreeRtosPriority>
 801141e:	0001      	movs	r1, r0
 8011420:	683a      	ldr	r2, [r7, #0]
 8011422:	230c      	movs	r3, #12
 8011424:	18fb      	adds	r3, r7, r3
 8011426:	9301      	str	r3, [sp, #4]
 8011428:	9100      	str	r1, [sp, #0]
 801142a:	0013      	movs	r3, r2
 801142c:	0032      	movs	r2, r6
 801142e:	0029      	movs	r1, r5
 8011430:	0020      	movs	r0, r4
 8011432:	f000 f90a 	bl	801164a <xTaskCreate>
 8011436:	0003      	movs	r3, r0
 8011438:	2b01      	cmp	r3, #1
 801143a:	d001      	beq.n	8011440 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 801143c:	2300      	movs	r3, #0
 801143e:	e000      	b.n	8011442 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011440:	68fb      	ldr	r3, [r7, #12]
}
 8011442:	0018      	movs	r0, r3
 8011444:	46bd      	mov	sp, r7
 8011446:	b005      	add	sp, #20
 8011448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801144a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801144a:	b580      	push	{r7, lr}
 801144c:	b084      	sub	sp, #16
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d001      	beq.n	8011460 <osDelay+0x16>
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	e000      	b.n	8011462 <osDelay+0x18>
 8011460:	2301      	movs	r3, #1
 8011462:	0018      	movs	r0, r3
 8011464:	f000 fa1c 	bl	80118a0 <vTaskDelay>
  
  return osOK;
 8011468:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801146a:	0018      	movs	r0, r3
 801146c:	46bd      	mov	sp, r7
 801146e:	b004      	add	sp, #16
 8011470:	bd80      	pop	{r7, pc}

08011472 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b082      	sub	sp, #8
 8011476:	af00      	add	r7, sp, #0
 8011478:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	3308      	adds	r3, #8
 801147e:	001a      	movs	r2, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2201      	movs	r2, #1
 8011488:	4252      	negs	r2, r2
 801148a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	3308      	adds	r3, #8
 8011490:	001a      	movs	r2, r3
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	3308      	adds	r3, #8
 801149a:	001a      	movs	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2200      	movs	r2, #0
 80114a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80114a6:	46c0      	nop			; (mov r8, r8)
 80114a8:	46bd      	mov	sp, r7
 80114aa:	b002      	add	sp, #8
 80114ac:	bd80      	pop	{r7, pc}

080114ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b082      	sub	sp, #8
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2200      	movs	r2, #0
 80114ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80114bc:	46c0      	nop			; (mov r8, r8)
 80114be:	46bd      	mov	sp, r7
 80114c0:	b002      	add	sp, #8
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	68fa      	ldr	r2, [r7, #12]
 80114d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	689a      	ldr	r2, [r3, #8]
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	689b      	ldr	r3, [r3, #8]
 80114e6:	683a      	ldr	r2, [r7, #0]
 80114e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	683a      	ldr	r2, [r7, #0]
 80114ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	1c5a      	adds	r2, r3, #1
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	601a      	str	r2, [r3, #0]
}
 8011500:	46c0      	nop			; (mov r8, r8)
 8011502:	46bd      	mov	sp, r7
 8011504:	b004      	add	sp, #16
 8011506:	bd80      	pop	{r7, pc}

08011508 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
 8011510:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	3301      	adds	r3, #1
 801151c:	d103      	bne.n	8011526 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	691b      	ldr	r3, [r3, #16]
 8011522:	60fb      	str	r3, [r7, #12]
 8011524:	e00c      	b.n	8011540 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	3308      	adds	r3, #8
 801152a:	60fb      	str	r3, [r7, #12]
 801152c:	e002      	b.n	8011534 <vListInsert+0x2c>
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	60fb      	str	r3, [r7, #12]
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	68ba      	ldr	r2, [r7, #8]
 801153c:	429a      	cmp	r2, r3
 801153e:	d2f6      	bcs.n	801152e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	685a      	ldr	r2, [r3, #4]
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	683a      	ldr	r2, [r7, #0]
 801154e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	68fa      	ldr	r2, [r7, #12]
 8011554:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	683a      	ldr	r2, [r7, #0]
 801155a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	687a      	ldr	r2, [r7, #4]
 8011560:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	1c5a      	adds	r2, r3, #1
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	601a      	str	r2, [r3, #0]
}
 801156c:	46c0      	nop			; (mov r8, r8)
 801156e:	46bd      	mov	sp, r7
 8011570:	b004      	add	sp, #16
 8011572:	bd80      	pop	{r7, pc}

08011574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	691b      	ldr	r3, [r3, #16]
 8011580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	687a      	ldr	r2, [r7, #4]
 8011588:	6892      	ldr	r2, [r2, #8]
 801158a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	689b      	ldr	r3, [r3, #8]
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	6852      	ldr	r2, [r2, #4]
 8011594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	429a      	cmp	r2, r3
 801159e:	d103      	bne.n	80115a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	689a      	ldr	r2, [r3, #8]
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2200      	movs	r2, #0
 80115ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	1e5a      	subs	r2, r3, #1
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681b      	ldr	r3, [r3, #0]
}
 80115bc:	0018      	movs	r0, r3
 80115be:	46bd      	mov	sp, r7
 80115c0:	b004      	add	sp, #16
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80115c4:	b590      	push	{r4, r7, lr}
 80115c6:	b08d      	sub	sp, #52	; 0x34
 80115c8:	af04      	add	r7, sp, #16
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	607a      	str	r2, [r7, #4]
 80115d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80115d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d101      	bne.n	80115dc <xTaskCreateStatic+0x18>
 80115d8:	b672      	cpsid	i
 80115da:	e7fe      	b.n	80115da <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80115dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d101      	bne.n	80115e6 <xTaskCreateStatic+0x22>
 80115e2:	b672      	cpsid	i
 80115e4:	e7fe      	b.n	80115e4 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80115e6:	2354      	movs	r3, #84	; 0x54
 80115e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	2b54      	cmp	r3, #84	; 0x54
 80115ee:	d001      	beq.n	80115f4 <xTaskCreateStatic+0x30>
 80115f0:	b672      	cpsid	i
 80115f2:	e7fe      	b.n	80115f2 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80115f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d020      	beq.n	801163c <xTaskCreateStatic+0x78>
 80115fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d01d      	beq.n	801163c <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011602:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011604:	69fb      	ldr	r3, [r7, #28]
 8011606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011608:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801160a:	69fb      	ldr	r3, [r7, #28]
 801160c:	2251      	movs	r2, #81	; 0x51
 801160e:	2102      	movs	r1, #2
 8011610:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011612:	683c      	ldr	r4, [r7, #0]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	68b9      	ldr	r1, [r7, #8]
 8011618:	68f8      	ldr	r0, [r7, #12]
 801161a:	2300      	movs	r3, #0
 801161c:	9303      	str	r3, [sp, #12]
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	9302      	str	r3, [sp, #8]
 8011622:	2318      	movs	r3, #24
 8011624:	18fb      	adds	r3, r7, r3
 8011626:	9301      	str	r3, [sp, #4]
 8011628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801162a:	9300      	str	r3, [sp, #0]
 801162c:	0023      	movs	r3, r4
 801162e:	f000 f859 	bl	80116e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011632:	69fb      	ldr	r3, [r7, #28]
 8011634:	0018      	movs	r0, r3
 8011636:	f000 f8cf 	bl	80117d8 <prvAddNewTaskToReadyList>
 801163a:	e001      	b.n	8011640 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 801163c:	2300      	movs	r3, #0
 801163e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011640:	69bb      	ldr	r3, [r7, #24]
	}
 8011642:	0018      	movs	r0, r3
 8011644:	46bd      	mov	sp, r7
 8011646:	b009      	add	sp, #36	; 0x24
 8011648:	bd90      	pop	{r4, r7, pc}

0801164a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801164a:	b590      	push	{r4, r7, lr}
 801164c:	b08d      	sub	sp, #52	; 0x34
 801164e:	af04      	add	r7, sp, #16
 8011650:	60f8      	str	r0, [r7, #12]
 8011652:	60b9      	str	r1, [r7, #8]
 8011654:	603b      	str	r3, [r7, #0]
 8011656:	1dbb      	adds	r3, r7, #6
 8011658:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801165a:	1dbb      	adds	r3, r7, #6
 801165c:	881b      	ldrh	r3, [r3, #0]
 801165e:	009b      	lsls	r3, r3, #2
 8011660:	0018      	movs	r0, r3
 8011662:	f000 fd9d 	bl	80121a0 <pvPortMalloc>
 8011666:	0003      	movs	r3, r0
 8011668:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d010      	beq.n	8011692 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8011670:	2054      	movs	r0, #84	; 0x54
 8011672:	f000 fd95 	bl	80121a0 <pvPortMalloc>
 8011676:	0003      	movs	r3, r0
 8011678:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d003      	beq.n	8011688 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	697a      	ldr	r2, [r7, #20]
 8011684:	631a      	str	r2, [r3, #48]	; 0x30
 8011686:	e006      	b.n	8011696 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	0018      	movs	r0, r3
 801168c:	f000 fe2e 	bl	80122ec <vPortFree>
 8011690:	e001      	b.n	8011696 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011692:	2300      	movs	r3, #0
 8011694:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011696:	69fb      	ldr	r3, [r7, #28]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d01a      	beq.n	80116d2 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801169c:	69fb      	ldr	r3, [r7, #28]
 801169e:	2251      	movs	r2, #81	; 0x51
 80116a0:	2100      	movs	r1, #0
 80116a2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80116a4:	1dbb      	adds	r3, r7, #6
 80116a6:	881a      	ldrh	r2, [r3, #0]
 80116a8:	683c      	ldr	r4, [r7, #0]
 80116aa:	68b9      	ldr	r1, [r7, #8]
 80116ac:	68f8      	ldr	r0, [r7, #12]
 80116ae:	2300      	movs	r3, #0
 80116b0:	9303      	str	r3, [sp, #12]
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	9302      	str	r3, [sp, #8]
 80116b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b8:	9301      	str	r3, [sp, #4]
 80116ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116bc:	9300      	str	r3, [sp, #0]
 80116be:	0023      	movs	r3, r4
 80116c0:	f000 f810 	bl	80116e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	0018      	movs	r0, r3
 80116c8:	f000 f886 	bl	80117d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80116cc:	2301      	movs	r3, #1
 80116ce:	61bb      	str	r3, [r7, #24]
 80116d0:	e002      	b.n	80116d8 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80116d2:	2301      	movs	r3, #1
 80116d4:	425b      	negs	r3, r3
 80116d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80116d8:	69bb      	ldr	r3, [r7, #24]
	}
 80116da:	0018      	movs	r0, r3
 80116dc:	46bd      	mov	sp, r7
 80116de:	b009      	add	sp, #36	; 0x24
 80116e0:	bd90      	pop	{r4, r7, pc}
	...

080116e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b086      	sub	sp, #24
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	60f8      	str	r0, [r7, #12]
 80116ec:	60b9      	str	r1, [r7, #8]
 80116ee:	607a      	str	r2, [r7, #4]
 80116f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80116f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	4936      	ldr	r1, [pc, #216]	; (80117d4 <prvInitialiseNewTask+0xf0>)
 80116fa:	468c      	mov	ip, r1
 80116fc:	4463      	add	r3, ip
 80116fe:	009b      	lsls	r3, r3, #2
 8011700:	18d3      	adds	r3, r2, r3
 8011702:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011704:	693b      	ldr	r3, [r7, #16]
 8011706:	2207      	movs	r2, #7
 8011708:	4393      	bics	r3, r2
 801170a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	2207      	movs	r2, #7
 8011710:	4013      	ands	r3, r2
 8011712:	d001      	beq.n	8011718 <prvInitialiseNewTask+0x34>
 8011714:	b672      	cpsid	i
 8011716:	e7fe      	b.n	8011716 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011718:	2300      	movs	r3, #0
 801171a:	617b      	str	r3, [r7, #20]
 801171c:	e013      	b.n	8011746 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801171e:	68ba      	ldr	r2, [r7, #8]
 8011720:	697b      	ldr	r3, [r7, #20]
 8011722:	18d3      	adds	r3, r2, r3
 8011724:	7818      	ldrb	r0, [r3, #0]
 8011726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011728:	2134      	movs	r1, #52	; 0x34
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	18d3      	adds	r3, r2, r3
 801172e:	185b      	adds	r3, r3, r1
 8011730:	1c02      	adds	r2, r0, #0
 8011732:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8011734:	68ba      	ldr	r2, [r7, #8]
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	18d3      	adds	r3, r2, r3
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d006      	beq.n	801174e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	3301      	adds	r3, #1
 8011744:	617b      	str	r3, [r7, #20]
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	2b0f      	cmp	r3, #15
 801174a:	d9e8      	bls.n	801171e <prvInitialiseNewTask+0x3a>
 801174c:	e000      	b.n	8011750 <prvInitialiseNewTask+0x6c>
		{
			break;
 801174e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011752:	2243      	movs	r2, #67	; 0x43
 8011754:	2100      	movs	r1, #0
 8011756:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011758:	6a3b      	ldr	r3, [r7, #32]
 801175a:	2b06      	cmp	r3, #6
 801175c:	d901      	bls.n	8011762 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801175e:	2306      	movs	r3, #6
 8011760:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011764:	6a3a      	ldr	r2, [r7, #32]
 8011766:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176a:	6a3a      	ldr	r2, [r7, #32]
 801176c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011770:	2200      	movs	r2, #0
 8011772:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011776:	3304      	adds	r3, #4
 8011778:	0018      	movs	r0, r3
 801177a:	f7ff fe98 	bl	80114ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011780:	3318      	adds	r3, #24
 8011782:	0018      	movs	r0, r3
 8011784:	f7ff fe93 	bl	80114ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801178c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801178e:	6a3b      	ldr	r3, [r7, #32]
 8011790:	2207      	movs	r2, #7
 8011792:	1ad2      	subs	r2, r2, r3
 8011794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011796:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801179a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801179c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a0:	2200      	movs	r2, #0
 80117a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80117a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a6:	2250      	movs	r2, #80	; 0x50
 80117a8:	2100      	movs	r1, #0
 80117aa:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80117ac:	683a      	ldr	r2, [r7, #0]
 80117ae:	68f9      	ldr	r1, [r7, #12]
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	0018      	movs	r0, r3
 80117b4:	f000 fbc4 	bl	8011f40 <pxPortInitialiseStack>
 80117b8:	0002      	movs	r2, r0
 80117ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80117be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d002      	beq.n	80117ca <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80117c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117ca:	46c0      	nop			; (mov r8, r8)
 80117cc:	46bd      	mov	sp, r7
 80117ce:	b006      	add	sp, #24
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	46c0      	nop			; (mov r8, r8)
 80117d4:	3fffffff 	.word	0x3fffffff

080117d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80117e0:	f000 fc46 	bl	8012070 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80117e4:	4b28      	ldr	r3, [pc, #160]	; (8011888 <prvAddNewTaskToReadyList+0xb0>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	1c5a      	adds	r2, r3, #1
 80117ea:	4b27      	ldr	r3, [pc, #156]	; (8011888 <prvAddNewTaskToReadyList+0xb0>)
 80117ec:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80117ee:	4b27      	ldr	r3, [pc, #156]	; (801188c <prvAddNewTaskToReadyList+0xb4>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d109      	bne.n	801180a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80117f6:	4b25      	ldr	r3, [pc, #148]	; (801188c <prvAddNewTaskToReadyList+0xb4>)
 80117f8:	687a      	ldr	r2, [r7, #4]
 80117fa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80117fc:	4b22      	ldr	r3, [pc, #136]	; (8011888 <prvAddNewTaskToReadyList+0xb0>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b01      	cmp	r3, #1
 8011802:	d110      	bne.n	8011826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011804:	f000 fa6e 	bl	8011ce4 <prvInitialiseTaskLists>
 8011808:	e00d      	b.n	8011826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801180a:	4b21      	ldr	r3, [pc, #132]	; (8011890 <prvAddNewTaskToReadyList+0xb8>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d109      	bne.n	8011826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011812:	4b1e      	ldr	r3, [pc, #120]	; (801188c <prvAddNewTaskToReadyList+0xb4>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801181c:	429a      	cmp	r2, r3
 801181e:	d802      	bhi.n	8011826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011820:	4b1a      	ldr	r3, [pc, #104]	; (801188c <prvAddNewTaskToReadyList+0xb4>)
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011826:	4b1b      	ldr	r3, [pc, #108]	; (8011894 <prvAddNewTaskToReadyList+0xbc>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	1c5a      	adds	r2, r3, #1
 801182c:	4b19      	ldr	r3, [pc, #100]	; (8011894 <prvAddNewTaskToReadyList+0xbc>)
 801182e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011834:	4b18      	ldr	r3, [pc, #96]	; (8011898 <prvAddNewTaskToReadyList+0xc0>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	429a      	cmp	r2, r3
 801183a:	d903      	bls.n	8011844 <prvAddNewTaskToReadyList+0x6c>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011840:	4b15      	ldr	r3, [pc, #84]	; (8011898 <prvAddNewTaskToReadyList+0xc0>)
 8011842:	601a      	str	r2, [r3, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011848:	0013      	movs	r3, r2
 801184a:	009b      	lsls	r3, r3, #2
 801184c:	189b      	adds	r3, r3, r2
 801184e:	009b      	lsls	r3, r3, #2
 8011850:	4a12      	ldr	r2, [pc, #72]	; (801189c <prvAddNewTaskToReadyList+0xc4>)
 8011852:	189a      	adds	r2, r3, r2
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	3304      	adds	r3, #4
 8011858:	0019      	movs	r1, r3
 801185a:	0010      	movs	r0, r2
 801185c:	f7ff fe32 	bl	80114c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011860:	f000 fc18 	bl	8012094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011864:	4b0a      	ldr	r3, [pc, #40]	; (8011890 <prvAddNewTaskToReadyList+0xb8>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d008      	beq.n	801187e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801186c:	4b07      	ldr	r3, [pc, #28]	; (801188c <prvAddNewTaskToReadyList+0xb4>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011876:	429a      	cmp	r2, r3
 8011878:	d201      	bcs.n	801187e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801187a:	f000 fbe9 	bl	8012050 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801187e:	46c0      	nop			; (mov r8, r8)
 8011880:	46bd      	mov	sp, r7
 8011882:	b002      	add	sp, #8
 8011884:	bd80      	pop	{r7, pc}
 8011886:	46c0      	nop			; (mov r8, r8)
 8011888:	200004e0 	.word	0x200004e0
 801188c:	200003e0 	.word	0x200003e0
 8011890:	200004ec 	.word	0x200004ec
 8011894:	200004fc 	.word	0x200004fc
 8011898:	200004e8 	.word	0x200004e8
 801189c:	200003e4 	.word	0x200003e4

080118a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b084      	sub	sp, #16
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80118a8:	2300      	movs	r3, #0
 80118aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d010      	beq.n	80118d4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80118b2:	4b0d      	ldr	r3, [pc, #52]	; (80118e8 <vTaskDelay+0x48>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d001      	beq.n	80118be <vTaskDelay+0x1e>
 80118ba:	b672      	cpsid	i
 80118bc:	e7fe      	b.n	80118bc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80118be:	f000 f863 	bl	8011988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2100      	movs	r1, #0
 80118c6:	0018      	movs	r0, r3
 80118c8:	f000 fae6 	bl	8011e98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80118cc:	f000 f868 	bl	80119a0 <xTaskResumeAll>
 80118d0:	0003      	movs	r3, r0
 80118d2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d101      	bne.n	80118de <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80118da:	f000 fbb9 	bl	8012050 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80118de:	46c0      	nop			; (mov r8, r8)
 80118e0:	46bd      	mov	sp, r7
 80118e2:	b004      	add	sp, #16
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	46c0      	nop			; (mov r8, r8)
 80118e8:	20000508 	.word	0x20000508

080118ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80118ec:	b590      	push	{r4, r7, lr}
 80118ee:	b089      	sub	sp, #36	; 0x24
 80118f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80118f2:	2300      	movs	r3, #0
 80118f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80118f6:	2300      	movs	r3, #0
 80118f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80118fa:	003a      	movs	r2, r7
 80118fc:	1d39      	adds	r1, r7, #4
 80118fe:	2308      	movs	r3, #8
 8011900:	18fb      	adds	r3, r7, r3
 8011902:	0018      	movs	r0, r3
 8011904:	f7fb f91a 	bl	800cb3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011908:	683c      	ldr	r4, [r7, #0]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	4918      	ldr	r1, [pc, #96]	; (8011970 <vTaskStartScheduler+0x84>)
 8011910:	4818      	ldr	r0, [pc, #96]	; (8011974 <vTaskStartScheduler+0x88>)
 8011912:	9202      	str	r2, [sp, #8]
 8011914:	9301      	str	r3, [sp, #4]
 8011916:	2300      	movs	r3, #0
 8011918:	9300      	str	r3, [sp, #0]
 801191a:	2300      	movs	r3, #0
 801191c:	0022      	movs	r2, r4
 801191e:	f7ff fe51 	bl	80115c4 <xTaskCreateStatic>
 8011922:	0002      	movs	r2, r0
 8011924:	4b14      	ldr	r3, [pc, #80]	; (8011978 <vTaskStartScheduler+0x8c>)
 8011926:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011928:	4b13      	ldr	r3, [pc, #76]	; (8011978 <vTaskStartScheduler+0x8c>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d002      	beq.n	8011936 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011930:	2301      	movs	r3, #1
 8011932:	60fb      	str	r3, [r7, #12]
 8011934:	e001      	b.n	801193a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011936:	2300      	movs	r3, #0
 8011938:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2b01      	cmp	r3, #1
 801193e:	d10d      	bne.n	801195c <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8011940:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011942:	4b0e      	ldr	r3, [pc, #56]	; (801197c <vTaskStartScheduler+0x90>)
 8011944:	2201      	movs	r2, #1
 8011946:	4252      	negs	r2, r2
 8011948:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801194a:	4b0d      	ldr	r3, [pc, #52]	; (8011980 <vTaskStartScheduler+0x94>)
 801194c:	2201      	movs	r2, #1
 801194e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011950:	4b0c      	ldr	r3, [pc, #48]	; (8011984 <vTaskStartScheduler+0x98>)
 8011952:	2200      	movs	r2, #0
 8011954:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011956:	f000 fb57 	bl	8012008 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801195a:	e004      	b.n	8011966 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	3301      	adds	r3, #1
 8011960:	d101      	bne.n	8011966 <vTaskStartScheduler+0x7a>
 8011962:	b672      	cpsid	i
 8011964:	e7fe      	b.n	8011964 <vTaskStartScheduler+0x78>
}
 8011966:	46c0      	nop			; (mov r8, r8)
 8011968:	46bd      	mov	sp, r7
 801196a:	b005      	add	sp, #20
 801196c:	bd90      	pop	{r4, r7, pc}
 801196e:	46c0      	nop			; (mov r8, r8)
 8011970:	080141d0 	.word	0x080141d0
 8011974:	08011cc5 	.word	0x08011cc5
 8011978:	20000504 	.word	0x20000504
 801197c:	20000500 	.word	0x20000500
 8011980:	200004ec 	.word	0x200004ec
 8011984:	200004e4 	.word	0x200004e4

08011988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011988:	b580      	push	{r7, lr}
 801198a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801198c:	4b03      	ldr	r3, [pc, #12]	; (801199c <vTaskSuspendAll+0x14>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	1c5a      	adds	r2, r3, #1
 8011992:	4b02      	ldr	r3, [pc, #8]	; (801199c <vTaskSuspendAll+0x14>)
 8011994:	601a      	str	r2, [r3, #0]
}
 8011996:	46c0      	nop			; (mov r8, r8)
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}
 801199c:	20000508 	.word	0x20000508

080119a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80119a6:	2300      	movs	r3, #0
 80119a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80119aa:	2300      	movs	r3, #0
 80119ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80119ae:	4b3a      	ldr	r3, [pc, #232]	; (8011a98 <xTaskResumeAll+0xf8>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d101      	bne.n	80119ba <xTaskResumeAll+0x1a>
 80119b6:	b672      	cpsid	i
 80119b8:	e7fe      	b.n	80119b8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80119ba:	f000 fb59 	bl	8012070 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80119be:	4b36      	ldr	r3, [pc, #216]	; (8011a98 <xTaskResumeAll+0xf8>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	1e5a      	subs	r2, r3, #1
 80119c4:	4b34      	ldr	r3, [pc, #208]	; (8011a98 <xTaskResumeAll+0xf8>)
 80119c6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119c8:	4b33      	ldr	r3, [pc, #204]	; (8011a98 <xTaskResumeAll+0xf8>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d15b      	bne.n	8011a88 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80119d0:	4b32      	ldr	r3, [pc, #200]	; (8011a9c <xTaskResumeAll+0xfc>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d057      	beq.n	8011a88 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80119d8:	e02f      	b.n	8011a3a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80119da:	4b31      	ldr	r3, [pc, #196]	; (8011aa0 <xTaskResumeAll+0x100>)
 80119dc:	68db      	ldr	r3, [r3, #12]
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	3318      	adds	r3, #24
 80119e6:	0018      	movs	r0, r3
 80119e8:	f7ff fdc4 	bl	8011574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	3304      	adds	r3, #4
 80119f0:	0018      	movs	r0, r3
 80119f2:	f7ff fdbf 	bl	8011574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119fa:	4b2a      	ldr	r3, [pc, #168]	; (8011aa4 <xTaskResumeAll+0x104>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d903      	bls.n	8011a0a <xTaskResumeAll+0x6a>
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a06:	4b27      	ldr	r3, [pc, #156]	; (8011aa4 <xTaskResumeAll+0x104>)
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a0e:	0013      	movs	r3, r2
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	189b      	adds	r3, r3, r2
 8011a14:	009b      	lsls	r3, r3, #2
 8011a16:	4a24      	ldr	r2, [pc, #144]	; (8011aa8 <xTaskResumeAll+0x108>)
 8011a18:	189a      	adds	r2, r3, r2
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	3304      	adds	r3, #4
 8011a1e:	0019      	movs	r1, r3
 8011a20:	0010      	movs	r0, r2
 8011a22:	f7ff fd4f 	bl	80114c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a2a:	4b20      	ldr	r3, [pc, #128]	; (8011aac <xTaskResumeAll+0x10c>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d302      	bcc.n	8011a3a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8011a34:	4b1e      	ldr	r3, [pc, #120]	; (8011ab0 <xTaskResumeAll+0x110>)
 8011a36:	2201      	movs	r2, #1
 8011a38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a3a:	4b19      	ldr	r3, [pc, #100]	; (8011aa0 <xTaskResumeAll+0x100>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d1cb      	bne.n	80119da <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d001      	beq.n	8011a4c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011a48:	f000 f9e6 	bl	8011e18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011a4c:	4b19      	ldr	r3, [pc, #100]	; (8011ab4 <xTaskResumeAll+0x114>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00f      	beq.n	8011a78 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011a58:	f000 f82e 	bl	8011ab8 <xTaskIncrementTick>
 8011a5c:	1e03      	subs	r3, r0, #0
 8011a5e:	d002      	beq.n	8011a66 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8011a60:	4b13      	ldr	r3, [pc, #76]	; (8011ab0 <xTaskResumeAll+0x110>)
 8011a62:	2201      	movs	r2, #1
 8011a64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	3b01      	subs	r3, #1
 8011a6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d1f2      	bne.n	8011a58 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8011a72:	4b10      	ldr	r3, [pc, #64]	; (8011ab4 <xTaskResumeAll+0x114>)
 8011a74:	2200      	movs	r2, #0
 8011a76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011a78:	4b0d      	ldr	r3, [pc, #52]	; (8011ab0 <xTaskResumeAll+0x110>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d003      	beq.n	8011a88 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011a80:	2301      	movs	r3, #1
 8011a82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011a84:	f000 fae4 	bl	8012050 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011a88:	f000 fb04 	bl	8012094 <vPortExitCritical>

	return xAlreadyYielded;
 8011a8c:	68bb      	ldr	r3, [r7, #8]
}
 8011a8e:	0018      	movs	r0, r3
 8011a90:	46bd      	mov	sp, r7
 8011a92:	b004      	add	sp, #16
 8011a94:	bd80      	pop	{r7, pc}
 8011a96:	46c0      	nop			; (mov r8, r8)
 8011a98:	20000508 	.word	0x20000508
 8011a9c:	200004e0 	.word	0x200004e0
 8011aa0:	200004a0 	.word	0x200004a0
 8011aa4:	200004e8 	.word	0x200004e8
 8011aa8:	200003e4 	.word	0x200003e4
 8011aac:	200003e0 	.word	0x200003e0
 8011ab0:	200004f4 	.word	0x200004f4
 8011ab4:	200004f0 	.word	0x200004f0

08011ab8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b086      	sub	sp, #24
 8011abc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ac2:	4b4c      	ldr	r3, [pc, #304]	; (8011bf4 <xTaskIncrementTick+0x13c>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d000      	beq.n	8011acc <xTaskIncrementTick+0x14>
 8011aca:	e083      	b.n	8011bd4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011acc:	4b4a      	ldr	r3, [pc, #296]	; (8011bf8 <xTaskIncrementTick+0x140>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011ad4:	4b48      	ldr	r3, [pc, #288]	; (8011bf8 <xTaskIncrementTick+0x140>)
 8011ad6:	693a      	ldr	r2, [r7, #16]
 8011ad8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d117      	bne.n	8011b10 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8011ae0:	4b46      	ldr	r3, [pc, #280]	; (8011bfc <xTaskIncrementTick+0x144>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d001      	beq.n	8011aee <xTaskIncrementTick+0x36>
 8011aea:	b672      	cpsid	i
 8011aec:	e7fe      	b.n	8011aec <xTaskIncrementTick+0x34>
 8011aee:	4b43      	ldr	r3, [pc, #268]	; (8011bfc <xTaskIncrementTick+0x144>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	60fb      	str	r3, [r7, #12]
 8011af4:	4b42      	ldr	r3, [pc, #264]	; (8011c00 <xTaskIncrementTick+0x148>)
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	4b40      	ldr	r3, [pc, #256]	; (8011bfc <xTaskIncrementTick+0x144>)
 8011afa:	601a      	str	r2, [r3, #0]
 8011afc:	4b40      	ldr	r3, [pc, #256]	; (8011c00 <xTaskIncrementTick+0x148>)
 8011afe:	68fa      	ldr	r2, [r7, #12]
 8011b00:	601a      	str	r2, [r3, #0]
 8011b02:	4b40      	ldr	r3, [pc, #256]	; (8011c04 <xTaskIncrementTick+0x14c>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	1c5a      	adds	r2, r3, #1
 8011b08:	4b3e      	ldr	r3, [pc, #248]	; (8011c04 <xTaskIncrementTick+0x14c>)
 8011b0a:	601a      	str	r2, [r3, #0]
 8011b0c:	f000 f984 	bl	8011e18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011b10:	4b3d      	ldr	r3, [pc, #244]	; (8011c08 <xTaskIncrementTick+0x150>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	693a      	ldr	r2, [r7, #16]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d34e      	bcc.n	8011bb8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b1a:	4b38      	ldr	r3, [pc, #224]	; (8011bfc <xTaskIncrementTick+0x144>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d101      	bne.n	8011b28 <xTaskIncrementTick+0x70>
 8011b24:	2301      	movs	r3, #1
 8011b26:	e000      	b.n	8011b2a <xTaskIncrementTick+0x72>
 8011b28:	2300      	movs	r3, #0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d004      	beq.n	8011b38 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b2e:	4b36      	ldr	r3, [pc, #216]	; (8011c08 <xTaskIncrementTick+0x150>)
 8011b30:	2201      	movs	r2, #1
 8011b32:	4252      	negs	r2, r2
 8011b34:	601a      	str	r2, [r3, #0]
					break;
 8011b36:	e03f      	b.n	8011bb8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011b38:	4b30      	ldr	r3, [pc, #192]	; (8011bfc <xTaskIncrementTick+0x144>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	68db      	ldr	r3, [r3, #12]
 8011b3e:	68db      	ldr	r3, [r3, #12]
 8011b40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	685b      	ldr	r3, [r3, #4]
 8011b46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011b48:	693a      	ldr	r2, [r7, #16]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d203      	bcs.n	8011b58 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011b50:	4b2d      	ldr	r3, [pc, #180]	; (8011c08 <xTaskIncrementTick+0x150>)
 8011b52:	687a      	ldr	r2, [r7, #4]
 8011b54:	601a      	str	r2, [r3, #0]
						break;
 8011b56:	e02f      	b.n	8011bb8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	3304      	adds	r3, #4
 8011b5c:	0018      	movs	r0, r3
 8011b5e:	f7ff fd09 	bl	8011574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d004      	beq.n	8011b74 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	3318      	adds	r3, #24
 8011b6e:	0018      	movs	r0, r3
 8011b70:	f7ff fd00 	bl	8011574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b78:	4b24      	ldr	r3, [pc, #144]	; (8011c0c <xTaskIncrementTick+0x154>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d903      	bls.n	8011b88 <xTaskIncrementTick+0xd0>
 8011b80:	68bb      	ldr	r3, [r7, #8]
 8011b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b84:	4b21      	ldr	r3, [pc, #132]	; (8011c0c <xTaskIncrementTick+0x154>)
 8011b86:	601a      	str	r2, [r3, #0]
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b8c:	0013      	movs	r3, r2
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	189b      	adds	r3, r3, r2
 8011b92:	009b      	lsls	r3, r3, #2
 8011b94:	4a1e      	ldr	r2, [pc, #120]	; (8011c10 <xTaskIncrementTick+0x158>)
 8011b96:	189a      	adds	r2, r3, r2
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	0019      	movs	r1, r3
 8011b9e:	0010      	movs	r0, r2
 8011ba0:	f7ff fc90 	bl	80114c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ba8:	4b1a      	ldr	r3, [pc, #104]	; (8011c14 <xTaskIncrementTick+0x15c>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d3b3      	bcc.n	8011b1a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bb6:	e7b0      	b.n	8011b1a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011bb8:	4b16      	ldr	r3, [pc, #88]	; (8011c14 <xTaskIncrementTick+0x15c>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bbe:	4914      	ldr	r1, [pc, #80]	; (8011c10 <xTaskIncrementTick+0x158>)
 8011bc0:	0013      	movs	r3, r2
 8011bc2:	009b      	lsls	r3, r3, #2
 8011bc4:	189b      	adds	r3, r3, r2
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	585b      	ldr	r3, [r3, r1]
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d907      	bls.n	8011bde <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8011bce:	2301      	movs	r3, #1
 8011bd0:	617b      	str	r3, [r7, #20]
 8011bd2:	e004      	b.n	8011bde <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011bd4:	4b10      	ldr	r3, [pc, #64]	; (8011c18 <xTaskIncrementTick+0x160>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	1c5a      	adds	r2, r3, #1
 8011bda:	4b0f      	ldr	r3, [pc, #60]	; (8011c18 <xTaskIncrementTick+0x160>)
 8011bdc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011bde:	4b0f      	ldr	r3, [pc, #60]	; (8011c1c <xTaskIncrementTick+0x164>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d001      	beq.n	8011bea <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8011be6:	2301      	movs	r3, #1
 8011be8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011bea:	697b      	ldr	r3, [r7, #20]
}
 8011bec:	0018      	movs	r0, r3
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	b006      	add	sp, #24
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	20000508 	.word	0x20000508
 8011bf8:	200004e4 	.word	0x200004e4
 8011bfc:	20000498 	.word	0x20000498
 8011c00:	2000049c 	.word	0x2000049c
 8011c04:	200004f8 	.word	0x200004f8
 8011c08:	20000500 	.word	0x20000500
 8011c0c:	200004e8 	.word	0x200004e8
 8011c10:	200003e4 	.word	0x200003e4
 8011c14:	200003e0 	.word	0x200003e0
 8011c18:	200004f0 	.word	0x200004f0
 8011c1c:	200004f4 	.word	0x200004f4

08011c20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011c26:	4b22      	ldr	r3, [pc, #136]	; (8011cb0 <vTaskSwitchContext+0x90>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011c2e:	4b21      	ldr	r3, [pc, #132]	; (8011cb4 <vTaskSwitchContext+0x94>)
 8011c30:	2201      	movs	r2, #1
 8011c32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011c34:	e037      	b.n	8011ca6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8011c36:	4b1f      	ldr	r3, [pc, #124]	; (8011cb4 <vTaskSwitchContext+0x94>)
 8011c38:	2200      	movs	r2, #0
 8011c3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011c3c:	4b1e      	ldr	r3, [pc, #120]	; (8011cb8 <vTaskSwitchContext+0x98>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	607b      	str	r3, [r7, #4]
 8011c42:	e007      	b.n	8011c54 <vTaskSwitchContext+0x34>
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d101      	bne.n	8011c4e <vTaskSwitchContext+0x2e>
 8011c4a:	b672      	cpsid	i
 8011c4c:	e7fe      	b.n	8011c4c <vTaskSwitchContext+0x2c>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	3b01      	subs	r3, #1
 8011c52:	607b      	str	r3, [r7, #4]
 8011c54:	4919      	ldr	r1, [pc, #100]	; (8011cbc <vTaskSwitchContext+0x9c>)
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	0013      	movs	r3, r2
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	189b      	adds	r3, r3, r2
 8011c5e:	009b      	lsls	r3, r3, #2
 8011c60:	585b      	ldr	r3, [r3, r1]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d0ee      	beq.n	8011c44 <vTaskSwitchContext+0x24>
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	0013      	movs	r3, r2
 8011c6a:	009b      	lsls	r3, r3, #2
 8011c6c:	189b      	adds	r3, r3, r2
 8011c6e:	009b      	lsls	r3, r3, #2
 8011c70:	4a12      	ldr	r2, [pc, #72]	; (8011cbc <vTaskSwitchContext+0x9c>)
 8011c72:	189b      	adds	r3, r3, r2
 8011c74:	603b      	str	r3, [r7, #0]
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	685a      	ldr	r2, [r3, #4]
 8011c7c:	683b      	ldr	r3, [r7, #0]
 8011c7e:	605a      	str	r2, [r3, #4]
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	685a      	ldr	r2, [r3, #4]
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	3308      	adds	r3, #8
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d104      	bne.n	8011c96 <vTaskSwitchContext+0x76>
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	685a      	ldr	r2, [r3, #4]
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	605a      	str	r2, [r3, #4]
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	68da      	ldr	r2, [r3, #12]
 8011c9c:	4b08      	ldr	r3, [pc, #32]	; (8011cc0 <vTaskSwitchContext+0xa0>)
 8011c9e:	601a      	str	r2, [r3, #0]
 8011ca0:	4b05      	ldr	r3, [pc, #20]	; (8011cb8 <vTaskSwitchContext+0x98>)
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	601a      	str	r2, [r3, #0]
}
 8011ca6:	46c0      	nop			; (mov r8, r8)
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	b002      	add	sp, #8
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	46c0      	nop			; (mov r8, r8)
 8011cb0:	20000508 	.word	0x20000508
 8011cb4:	200004f4 	.word	0x200004f4
 8011cb8:	200004e8 	.word	0x200004e8
 8011cbc:	200003e4 	.word	0x200003e4
 8011cc0:	200003e0 	.word	0x200003e0

08011cc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011ccc:	f000 f84e 	bl	8011d6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011cd0:	4b03      	ldr	r3, [pc, #12]	; (8011ce0 <prvIdleTask+0x1c>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d9f9      	bls.n	8011ccc <prvIdleTask+0x8>
			{
				taskYIELD();
 8011cd8:	f000 f9ba 	bl	8012050 <vPortYield>
		prvCheckTasksWaitingTermination();
 8011cdc:	e7f6      	b.n	8011ccc <prvIdleTask+0x8>
 8011cde:	46c0      	nop			; (mov r8, r8)
 8011ce0:	200003e4 	.word	0x200003e4

08011ce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011cea:	2300      	movs	r3, #0
 8011cec:	607b      	str	r3, [r7, #4]
 8011cee:	e00c      	b.n	8011d0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	0013      	movs	r3, r2
 8011cf4:	009b      	lsls	r3, r3, #2
 8011cf6:	189b      	adds	r3, r3, r2
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4a14      	ldr	r2, [pc, #80]	; (8011d4c <prvInitialiseTaskLists+0x68>)
 8011cfc:	189b      	adds	r3, r3, r2
 8011cfe:	0018      	movs	r0, r3
 8011d00:	f7ff fbb7 	bl	8011472 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	3301      	adds	r3, #1
 8011d08:	607b      	str	r3, [r7, #4]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2b06      	cmp	r3, #6
 8011d0e:	d9ef      	bls.n	8011cf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011d10:	4b0f      	ldr	r3, [pc, #60]	; (8011d50 <prvInitialiseTaskLists+0x6c>)
 8011d12:	0018      	movs	r0, r3
 8011d14:	f7ff fbad 	bl	8011472 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011d18:	4b0e      	ldr	r3, [pc, #56]	; (8011d54 <prvInitialiseTaskLists+0x70>)
 8011d1a:	0018      	movs	r0, r3
 8011d1c:	f7ff fba9 	bl	8011472 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011d20:	4b0d      	ldr	r3, [pc, #52]	; (8011d58 <prvInitialiseTaskLists+0x74>)
 8011d22:	0018      	movs	r0, r3
 8011d24:	f7ff fba5 	bl	8011472 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011d28:	4b0c      	ldr	r3, [pc, #48]	; (8011d5c <prvInitialiseTaskLists+0x78>)
 8011d2a:	0018      	movs	r0, r3
 8011d2c:	f7ff fba1 	bl	8011472 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011d30:	4b0b      	ldr	r3, [pc, #44]	; (8011d60 <prvInitialiseTaskLists+0x7c>)
 8011d32:	0018      	movs	r0, r3
 8011d34:	f7ff fb9d 	bl	8011472 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011d38:	4b0a      	ldr	r3, [pc, #40]	; (8011d64 <prvInitialiseTaskLists+0x80>)
 8011d3a:	4a05      	ldr	r2, [pc, #20]	; (8011d50 <prvInitialiseTaskLists+0x6c>)
 8011d3c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011d3e:	4b0a      	ldr	r3, [pc, #40]	; (8011d68 <prvInitialiseTaskLists+0x84>)
 8011d40:	4a04      	ldr	r2, [pc, #16]	; (8011d54 <prvInitialiseTaskLists+0x70>)
 8011d42:	601a      	str	r2, [r3, #0]
}
 8011d44:	46c0      	nop			; (mov r8, r8)
 8011d46:	46bd      	mov	sp, r7
 8011d48:	b002      	add	sp, #8
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	200003e4 	.word	0x200003e4
 8011d50:	20000470 	.word	0x20000470
 8011d54:	20000484 	.word	0x20000484
 8011d58:	200004a0 	.word	0x200004a0
 8011d5c:	200004b4 	.word	0x200004b4
 8011d60:	200004cc 	.word	0x200004cc
 8011d64:	20000498 	.word	0x20000498
 8011d68:	2000049c 	.word	0x2000049c

08011d6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d72:	e01a      	b.n	8011daa <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8011d74:	f000 f97c 	bl	8012070 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011d78:	4b10      	ldr	r3, [pc, #64]	; (8011dbc <prvCheckTasksWaitingTermination+0x50>)
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	3304      	adds	r3, #4
 8011d84:	0018      	movs	r0, r3
 8011d86:	f7ff fbf5 	bl	8011574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011d8a:	4b0d      	ldr	r3, [pc, #52]	; (8011dc0 <prvCheckTasksWaitingTermination+0x54>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	1e5a      	subs	r2, r3, #1
 8011d90:	4b0b      	ldr	r3, [pc, #44]	; (8011dc0 <prvCheckTasksWaitingTermination+0x54>)
 8011d92:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011d94:	4b0b      	ldr	r3, [pc, #44]	; (8011dc4 <prvCheckTasksWaitingTermination+0x58>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	1e5a      	subs	r2, r3, #1
 8011d9a:	4b0a      	ldr	r3, [pc, #40]	; (8011dc4 <prvCheckTasksWaitingTermination+0x58>)
 8011d9c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8011d9e:	f000 f979 	bl	8012094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	0018      	movs	r0, r3
 8011da6:	f000 f80f 	bl	8011dc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011daa:	4b06      	ldr	r3, [pc, #24]	; (8011dc4 <prvCheckTasksWaitingTermination+0x58>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d1e0      	bne.n	8011d74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011db2:	46c0      	nop			; (mov r8, r8)
 8011db4:	46c0      	nop			; (mov r8, r8)
 8011db6:	46bd      	mov	sp, r7
 8011db8:	b002      	add	sp, #8
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	200004b4 	.word	0x200004b4
 8011dc0:	200004e0 	.word	0x200004e0
 8011dc4:	200004c8 	.word	0x200004c8

08011dc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2251      	movs	r2, #81	; 0x51
 8011dd4:	5c9b      	ldrb	r3, [r3, r2]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d109      	bne.n	8011dee <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dde:	0018      	movs	r0, r3
 8011de0:	f000 fa84 	bl	80122ec <vPortFree>
				vPortFree( pxTCB );
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	0018      	movs	r0, r3
 8011de8:	f000 fa80 	bl	80122ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011dec:	e010      	b.n	8011e10 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2251      	movs	r2, #81	; 0x51
 8011df2:	5c9b      	ldrb	r3, [r3, r2]
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d104      	bne.n	8011e02 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	0018      	movs	r0, r3
 8011dfc:	f000 fa76 	bl	80122ec <vPortFree>
	}
 8011e00:	e006      	b.n	8011e10 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2251      	movs	r2, #81	; 0x51
 8011e06:	5c9b      	ldrb	r3, [r3, r2]
 8011e08:	2b02      	cmp	r3, #2
 8011e0a:	d001      	beq.n	8011e10 <prvDeleteTCB+0x48>
 8011e0c:	b672      	cpsid	i
 8011e0e:	e7fe      	b.n	8011e0e <prvDeleteTCB+0x46>
	}
 8011e10:	46c0      	nop			; (mov r8, r8)
 8011e12:	46bd      	mov	sp, r7
 8011e14:	b002      	add	sp, #8
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e1e:	4b0e      	ldr	r3, [pc, #56]	; (8011e58 <prvResetNextTaskUnblockTime+0x40>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d101      	bne.n	8011e2c <prvResetNextTaskUnblockTime+0x14>
 8011e28:	2301      	movs	r3, #1
 8011e2a:	e000      	b.n	8011e2e <prvResetNextTaskUnblockTime+0x16>
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d004      	beq.n	8011e3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011e32:	4b0a      	ldr	r3, [pc, #40]	; (8011e5c <prvResetNextTaskUnblockTime+0x44>)
 8011e34:	2201      	movs	r2, #1
 8011e36:	4252      	negs	r2, r2
 8011e38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011e3a:	e008      	b.n	8011e4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011e3c:	4b06      	ldr	r3, [pc, #24]	; (8011e58 <prvResetNextTaskUnblockTime+0x40>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	68db      	ldr	r3, [r3, #12]
 8011e44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	685a      	ldr	r2, [r3, #4]
 8011e4a:	4b04      	ldr	r3, [pc, #16]	; (8011e5c <prvResetNextTaskUnblockTime+0x44>)
 8011e4c:	601a      	str	r2, [r3, #0]
}
 8011e4e:	46c0      	nop			; (mov r8, r8)
 8011e50:	46bd      	mov	sp, r7
 8011e52:	b002      	add	sp, #8
 8011e54:	bd80      	pop	{r7, pc}
 8011e56:	46c0      	nop			; (mov r8, r8)
 8011e58:	20000498 	.word	0x20000498
 8011e5c:	20000500 	.word	0x20000500

08011e60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011e66:	4b0a      	ldr	r3, [pc, #40]	; (8011e90 <xTaskGetSchedulerState+0x30>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d102      	bne.n	8011e74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e6e:	2301      	movs	r3, #1
 8011e70:	607b      	str	r3, [r7, #4]
 8011e72:	e008      	b.n	8011e86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e74:	4b07      	ldr	r3, [pc, #28]	; (8011e94 <xTaskGetSchedulerState+0x34>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d102      	bne.n	8011e82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011e7c:	2302      	movs	r3, #2
 8011e7e:	607b      	str	r3, [r7, #4]
 8011e80:	e001      	b.n	8011e86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011e82:	2300      	movs	r3, #0
 8011e84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011e86:	687b      	ldr	r3, [r7, #4]
	}
 8011e88:	0018      	movs	r0, r3
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	b002      	add	sp, #8
 8011e8e:	bd80      	pop	{r7, pc}
 8011e90:	200004ec 	.word	0x200004ec
 8011e94:	20000508 	.word	0x20000508

08011e98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011ea2:	4b21      	ldr	r3, [pc, #132]	; (8011f28 <prvAddCurrentTaskToDelayedList+0x90>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ea8:	4b20      	ldr	r3, [pc, #128]	; (8011f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	3304      	adds	r3, #4
 8011eae:	0018      	movs	r0, r3
 8011eb0:	f7ff fb60 	bl	8011574 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	d10b      	bne.n	8011ed2 <prvAddCurrentTaskToDelayedList+0x3a>
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d008      	beq.n	8011ed2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ec0:	4b1a      	ldr	r3, [pc, #104]	; (8011f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	1d1a      	adds	r2, r3, #4
 8011ec6:	4b1a      	ldr	r3, [pc, #104]	; (8011f30 <prvAddCurrentTaskToDelayedList+0x98>)
 8011ec8:	0011      	movs	r1, r2
 8011eca:	0018      	movs	r0, r3
 8011ecc:	f7ff fafa 	bl	80114c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011ed0:	e026      	b.n	8011f20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011ed2:	68fa      	ldr	r2, [r7, #12]
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	18d3      	adds	r3, r2, r3
 8011ed8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011eda:	4b14      	ldr	r3, [pc, #80]	; (8011f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	68ba      	ldr	r2, [r7, #8]
 8011ee0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011ee2:	68ba      	ldr	r2, [r7, #8]
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d209      	bcs.n	8011efe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011eea:	4b12      	ldr	r3, [pc, #72]	; (8011f34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	4b0f      	ldr	r3, [pc, #60]	; (8011f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	3304      	adds	r3, #4
 8011ef4:	0019      	movs	r1, r3
 8011ef6:	0010      	movs	r0, r2
 8011ef8:	f7ff fb06 	bl	8011508 <vListInsert>
}
 8011efc:	e010      	b.n	8011f20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011efe:	4b0e      	ldr	r3, [pc, #56]	; (8011f38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011f00:	681a      	ldr	r2, [r3, #0]
 8011f02:	4b0a      	ldr	r3, [pc, #40]	; (8011f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	3304      	adds	r3, #4
 8011f08:	0019      	movs	r1, r3
 8011f0a:	0010      	movs	r0, r2
 8011f0c:	f7ff fafc 	bl	8011508 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011f10:	4b0a      	ldr	r3, [pc, #40]	; (8011f3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	68ba      	ldr	r2, [r7, #8]
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d202      	bcs.n	8011f20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011f1a:	4b08      	ldr	r3, [pc, #32]	; (8011f3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f1c:	68ba      	ldr	r2, [r7, #8]
 8011f1e:	601a      	str	r2, [r3, #0]
}
 8011f20:	46c0      	nop			; (mov r8, r8)
 8011f22:	46bd      	mov	sp, r7
 8011f24:	b004      	add	sp, #16
 8011f26:	bd80      	pop	{r7, pc}
 8011f28:	200004e4 	.word	0x200004e4
 8011f2c:	200003e0 	.word	0x200003e0
 8011f30:	200004cc 	.word	0x200004cc
 8011f34:	2000049c 	.word	0x2000049c
 8011f38:	20000498 	.word	0x20000498
 8011f3c:	20000500 	.word	0x20000500

08011f40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b084      	sub	sp, #16
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	3b04      	subs	r3, #4
 8011f50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2280      	movs	r2, #128	; 0x80
 8011f56:	0452      	lsls	r2, r2, #17
 8011f58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	3b04      	subs	r3, #4
 8011f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	3b04      	subs	r3, #4
 8011f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011f6c:	4a08      	ldr	r2, [pc, #32]	; (8011f90 <pxPortInitialiseStack+0x50>)
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	3b14      	subs	r3, #20
 8011f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	3b20      	subs	r3, #32
 8011f82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011f84:	68fb      	ldr	r3, [r7, #12]
}
 8011f86:	0018      	movs	r0, r3
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	b004      	add	sp, #16
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	46c0      	nop			; (mov r8, r8)
 8011f90:	08011f95 	.word	0x08011f95

08011f94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f9e:	4b08      	ldr	r3, [pc, #32]	; (8011fc0 <prvTaskExitError+0x2c>)
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	d001      	beq.n	8011faa <prvTaskExitError+0x16>
 8011fa6:	b672      	cpsid	i
 8011fa8:	e7fe      	b.n	8011fa8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8011faa:	b672      	cpsid	i
	while( ulDummy == 0 )
 8011fac:	46c0      	nop			; (mov r8, r8)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d0fc      	beq.n	8011fae <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011fb4:	46c0      	nop			; (mov r8, r8)
 8011fb6:	46c0      	nop			; (mov r8, r8)
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	b002      	add	sp, #8
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	46c0      	nop			; (mov r8, r8)
 8011fc0:	200000e0 	.word	0x200000e0

08011fc4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8011fc8:	46c0      	nop			; (mov r8, r8)
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
	...

08011fd0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8011fd0:	4a0b      	ldr	r2, [pc, #44]	; (8012000 <pxCurrentTCBConst2>)
 8011fd2:	6813      	ldr	r3, [r2, #0]
 8011fd4:	6818      	ldr	r0, [r3, #0]
 8011fd6:	3020      	adds	r0, #32
 8011fd8:	f380 8809 	msr	PSP, r0
 8011fdc:	2002      	movs	r0, #2
 8011fde:	f380 8814 	msr	CONTROL, r0
 8011fe2:	f3bf 8f6f 	isb	sy
 8011fe6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8011fe8:	46ae      	mov	lr, r5
 8011fea:	bc08      	pop	{r3}
 8011fec:	bc04      	pop	{r2}
 8011fee:	b662      	cpsie	i
 8011ff0:	4718      	bx	r3
 8011ff2:	46c0      	nop			; (mov r8, r8)
 8011ff4:	46c0      	nop			; (mov r8, r8)
 8011ff6:	46c0      	nop			; (mov r8, r8)
 8011ff8:	46c0      	nop			; (mov r8, r8)
 8011ffa:	46c0      	nop			; (mov r8, r8)
 8011ffc:	46c0      	nop			; (mov r8, r8)
 8011ffe:	46c0      	nop			; (mov r8, r8)

08012000 <pxCurrentTCBConst2>:
 8012000:	200003e0 	.word	0x200003e0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8012004:	46c0      	nop			; (mov r8, r8)
 8012006:	46c0      	nop			; (mov r8, r8)

08012008 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012008:	b580      	push	{r7, lr}
 801200a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 801200c:	4b0e      	ldr	r3, [pc, #56]	; (8012048 <xPortStartScheduler+0x40>)
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	4b0d      	ldr	r3, [pc, #52]	; (8012048 <xPortStartScheduler+0x40>)
 8012012:	21ff      	movs	r1, #255	; 0xff
 8012014:	0409      	lsls	r1, r1, #16
 8012016:	430a      	orrs	r2, r1
 8012018:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 801201a:	4b0b      	ldr	r3, [pc, #44]	; (8012048 <xPortStartScheduler+0x40>)
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	4b0a      	ldr	r3, [pc, #40]	; (8012048 <xPortStartScheduler+0x40>)
 8012020:	21ff      	movs	r1, #255	; 0xff
 8012022:	0609      	lsls	r1, r1, #24
 8012024:	430a      	orrs	r2, r1
 8012026:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8012028:	f000 f898 	bl	801215c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801202c:	4b07      	ldr	r3, [pc, #28]	; (801204c <xPortStartScheduler+0x44>)
 801202e:	2200      	movs	r2, #0
 8012030:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8012032:	f7ff ffcd 	bl	8011fd0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012036:	f7ff fdf3 	bl	8011c20 <vTaskSwitchContext>
	prvTaskExitError();
 801203a:	f7ff ffab 	bl	8011f94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801203e:	2300      	movs	r3, #0
}
 8012040:	0018      	movs	r0, r3
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	46c0      	nop			; (mov r8, r8)
 8012048:	e000ed20 	.word	0xe000ed20
 801204c:	200000e0 	.word	0x200000e0

08012050 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8012050:	b580      	push	{r7, lr}
 8012052:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8012054:	4b05      	ldr	r3, [pc, #20]	; (801206c <vPortYield+0x1c>)
 8012056:	2280      	movs	r2, #128	; 0x80
 8012058:	0552      	lsls	r2, r2, #21
 801205a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801205c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8012060:	f3bf 8f6f 	isb	sy
}
 8012064:	46c0      	nop			; (mov r8, r8)
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}
 801206a:	46c0      	nop			; (mov r8, r8)
 801206c:	e000ed04 	.word	0xe000ed04

08012070 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012070:	b580      	push	{r7, lr}
 8012072:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8012074:	b672      	cpsid	i
    uxCriticalNesting++;
 8012076:	4b06      	ldr	r3, [pc, #24]	; (8012090 <vPortEnterCritical+0x20>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	1c5a      	adds	r2, r3, #1
 801207c:	4b04      	ldr	r3, [pc, #16]	; (8012090 <vPortEnterCritical+0x20>)
 801207e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8012080:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8012084:	f3bf 8f6f 	isb	sy
}
 8012088:	46c0      	nop			; (mov r8, r8)
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	46c0      	nop			; (mov r8, r8)
 8012090:	200000e0 	.word	0x200000e0

08012094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012094:	b580      	push	{r7, lr}
 8012096:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012098:	4b09      	ldr	r3, [pc, #36]	; (80120c0 <vPortExitCritical+0x2c>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d101      	bne.n	80120a4 <vPortExitCritical+0x10>
 80120a0:	b672      	cpsid	i
 80120a2:	e7fe      	b.n	80120a2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80120a4:	4b06      	ldr	r3, [pc, #24]	; (80120c0 <vPortExitCritical+0x2c>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	1e5a      	subs	r2, r3, #1
 80120aa:	4b05      	ldr	r3, [pc, #20]	; (80120c0 <vPortExitCritical+0x2c>)
 80120ac:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80120ae:	4b04      	ldr	r3, [pc, #16]	; (80120c0 <vPortExitCritical+0x2c>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d100      	bne.n	80120b8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80120b6:	b662      	cpsie	i
    }
}
 80120b8:	46c0      	nop			; (mov r8, r8)
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	46c0      	nop			; (mov r8, r8)
 80120c0:	200000e0 	.word	0x200000e0

080120c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80120c4:	f3ef 8010 	mrs	r0, PRIMASK
 80120c8:	b672      	cpsid	i
 80120ca:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80120cc:	46c0      	nop			; (mov r8, r8)
 80120ce:	0018      	movs	r0, r3

080120d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80120d0:	f380 8810 	msr	PRIMASK, r0
 80120d4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80120d6:	46c0      	nop			; (mov r8, r8)
	...

080120e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80120e0:	f3ef 8009 	mrs	r0, PSP
 80120e4:	4b0e      	ldr	r3, [pc, #56]	; (8012120 <pxCurrentTCBConst>)
 80120e6:	681a      	ldr	r2, [r3, #0]
 80120e8:	3820      	subs	r0, #32
 80120ea:	6010      	str	r0, [r2, #0]
 80120ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80120ee:	4644      	mov	r4, r8
 80120f0:	464d      	mov	r5, r9
 80120f2:	4656      	mov	r6, sl
 80120f4:	465f      	mov	r7, fp
 80120f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80120f8:	b508      	push	{r3, lr}
 80120fa:	b672      	cpsid	i
 80120fc:	f7ff fd90 	bl	8011c20 <vTaskSwitchContext>
 8012100:	b662      	cpsie	i
 8012102:	bc0c      	pop	{r2, r3}
 8012104:	6811      	ldr	r1, [r2, #0]
 8012106:	6808      	ldr	r0, [r1, #0]
 8012108:	3010      	adds	r0, #16
 801210a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801210c:	46a0      	mov	r8, r4
 801210e:	46a9      	mov	r9, r5
 8012110:	46b2      	mov	sl, r6
 8012112:	46bb      	mov	fp, r7
 8012114:	f380 8809 	msr	PSP, r0
 8012118:	3820      	subs	r0, #32
 801211a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801211c:	4718      	bx	r3
 801211e:	46c0      	nop			; (mov r8, r8)

08012120 <pxCurrentTCBConst>:
 8012120:	200003e0 	.word	0x200003e0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8012124:	46c0      	nop			; (mov r8, r8)
 8012126:	46c0      	nop			; (mov r8, r8)

08012128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801212e:	f7ff ffc9 	bl	80120c4 <ulSetInterruptMaskFromISR>
 8012132:	0003      	movs	r3, r0
 8012134:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012136:	f7ff fcbf 	bl	8011ab8 <xTaskIncrementTick>
 801213a:	1e03      	subs	r3, r0, #0
 801213c:	d003      	beq.n	8012146 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801213e:	4b06      	ldr	r3, [pc, #24]	; (8012158 <xPortSysTickHandler+0x30>)
 8012140:	2280      	movs	r2, #128	; 0x80
 8012142:	0552      	lsls	r2, r2, #21
 8012144:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	0018      	movs	r0, r3
 801214a:	f7ff ffc1 	bl	80120d0 <vClearInterruptMaskFromISR>
}
 801214e:	46c0      	nop			; (mov r8, r8)
 8012150:	46bd      	mov	sp, r7
 8012152:	b002      	add	sp, #8
 8012154:	bd80      	pop	{r7, pc}
 8012156:	46c0      	nop			; (mov r8, r8)
 8012158:	e000ed04 	.word	0xe000ed04

0801215c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 801215c:	b580      	push	{r7, lr}
 801215e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8012160:	4b0b      	ldr	r3, [pc, #44]	; (8012190 <prvSetupTimerInterrupt+0x34>)
 8012162:	2200      	movs	r2, #0
 8012164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8012166:	4b0b      	ldr	r3, [pc, #44]	; (8012194 <prvSetupTimerInterrupt+0x38>)
 8012168:	2200      	movs	r2, #0
 801216a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801216c:	4b0a      	ldr	r3, [pc, #40]	; (8012198 <prvSetupTimerInterrupt+0x3c>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	22fa      	movs	r2, #250	; 0xfa
 8012172:	0091      	lsls	r1, r2, #2
 8012174:	0018      	movs	r0, r3
 8012176:	f7f6 ffe3 	bl	8009140 <__udivsi3>
 801217a:	0003      	movs	r3, r0
 801217c:	001a      	movs	r2, r3
 801217e:	4b07      	ldr	r3, [pc, #28]	; (801219c <prvSetupTimerInterrupt+0x40>)
 8012180:	3a01      	subs	r2, #1
 8012182:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8012184:	4b02      	ldr	r3, [pc, #8]	; (8012190 <prvSetupTimerInterrupt+0x34>)
 8012186:	2207      	movs	r2, #7
 8012188:	601a      	str	r2, [r3, #0]
}
 801218a:	46c0      	nop			; (mov r8, r8)
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	e000e010 	.word	0xe000e010
 8012194:	e000e018 	.word	0xe000e018
 8012198:	200000d4 	.word	0x200000d4
 801219c:	e000e014 	.word	0xe000e014

080121a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b086      	sub	sp, #24
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80121a8:	2300      	movs	r3, #0
 80121aa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80121ac:	f7ff fbec 	bl	8011988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80121b0:	4b49      	ldr	r3, [pc, #292]	; (80122d8 <pvPortMalloc+0x138>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d101      	bne.n	80121bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80121b8:	f000 f8e0 	bl	801237c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80121bc:	4b47      	ldr	r3, [pc, #284]	; (80122dc <pvPortMalloc+0x13c>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	687a      	ldr	r2, [r7, #4]
 80121c2:	4013      	ands	r3, r2
 80121c4:	d000      	beq.n	80121c8 <pvPortMalloc+0x28>
 80121c6:	e079      	b.n	80122bc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d012      	beq.n	80121f4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80121ce:	2208      	movs	r2, #8
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	189b      	adds	r3, r3, r2
 80121d4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2207      	movs	r2, #7
 80121da:	4013      	ands	r3, r2
 80121dc:	d00a      	beq.n	80121f4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2207      	movs	r2, #7
 80121e2:	4393      	bics	r3, r2
 80121e4:	3308      	adds	r3, #8
 80121e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2207      	movs	r2, #7
 80121ec:	4013      	ands	r3, r2
 80121ee:	d001      	beq.n	80121f4 <pvPortMalloc+0x54>
 80121f0:	b672      	cpsid	i
 80121f2:	e7fe      	b.n	80121f2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d060      	beq.n	80122bc <pvPortMalloc+0x11c>
 80121fa:	4b39      	ldr	r3, [pc, #228]	; (80122e0 <pvPortMalloc+0x140>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	687a      	ldr	r2, [r7, #4]
 8012200:	429a      	cmp	r2, r3
 8012202:	d85b      	bhi.n	80122bc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012204:	4b37      	ldr	r3, [pc, #220]	; (80122e4 <pvPortMalloc+0x144>)
 8012206:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8012208:	4b36      	ldr	r3, [pc, #216]	; (80122e4 <pvPortMalloc+0x144>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801220e:	e004      	b.n	801221a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	685b      	ldr	r3, [r3, #4]
 801221e:	687a      	ldr	r2, [r7, #4]
 8012220:	429a      	cmp	r2, r3
 8012222:	d903      	bls.n	801222c <pvPortMalloc+0x8c>
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d1f1      	bne.n	8012210 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801222c:	4b2a      	ldr	r3, [pc, #168]	; (80122d8 <pvPortMalloc+0x138>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	697a      	ldr	r2, [r7, #20]
 8012232:	429a      	cmp	r2, r3
 8012234:	d042      	beq.n	80122bc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	2208      	movs	r2, #8
 801223c:	189b      	adds	r3, r3, r2
 801223e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	681a      	ldr	r2, [r3, #0]
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	685a      	ldr	r2, [r3, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	1ad2      	subs	r2, r2, r3
 8012250:	2308      	movs	r3, #8
 8012252:	005b      	lsls	r3, r3, #1
 8012254:	429a      	cmp	r2, r3
 8012256:	d916      	bls.n	8012286 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012258:	697a      	ldr	r2, [r7, #20]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	18d3      	adds	r3, r2, r3
 801225e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	2207      	movs	r2, #7
 8012264:	4013      	ands	r3, r2
 8012266:	d001      	beq.n	801226c <pvPortMalloc+0xcc>
 8012268:	b672      	cpsid	i
 801226a:	e7fe      	b.n	801226a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	685a      	ldr	r2, [r3, #4]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	1ad2      	subs	r2, r2, r3
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	687a      	ldr	r2, [r7, #4]
 801227c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	0018      	movs	r0, r3
 8012282:	f000 f8db 	bl	801243c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012286:	4b16      	ldr	r3, [pc, #88]	; (80122e0 <pvPortMalloc+0x140>)
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	685b      	ldr	r3, [r3, #4]
 801228e:	1ad2      	subs	r2, r2, r3
 8012290:	4b13      	ldr	r3, [pc, #76]	; (80122e0 <pvPortMalloc+0x140>)
 8012292:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012294:	4b12      	ldr	r3, [pc, #72]	; (80122e0 <pvPortMalloc+0x140>)
 8012296:	681a      	ldr	r2, [r3, #0]
 8012298:	4b13      	ldr	r3, [pc, #76]	; (80122e8 <pvPortMalloc+0x148>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	429a      	cmp	r2, r3
 801229e:	d203      	bcs.n	80122a8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80122a0:	4b0f      	ldr	r3, [pc, #60]	; (80122e0 <pvPortMalloc+0x140>)
 80122a2:	681a      	ldr	r2, [r3, #0]
 80122a4:	4b10      	ldr	r3, [pc, #64]	; (80122e8 <pvPortMalloc+0x148>)
 80122a6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	685a      	ldr	r2, [r3, #4]
 80122ac:	4b0b      	ldr	r3, [pc, #44]	; (80122dc <pvPortMalloc+0x13c>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	431a      	orrs	r2, r3
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	2200      	movs	r2, #0
 80122ba:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80122bc:	f7ff fb70 	bl	80119a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2207      	movs	r2, #7
 80122c4:	4013      	ands	r3, r2
 80122c6:	d001      	beq.n	80122cc <pvPortMalloc+0x12c>
 80122c8:	b672      	cpsid	i
 80122ca:	e7fe      	b.n	80122ca <pvPortMalloc+0x12a>
	return pvReturn;
 80122cc:	68fb      	ldr	r3, [r7, #12]
}
 80122ce:	0018      	movs	r0, r3
 80122d0:	46bd      	mov	sp, r7
 80122d2:	b006      	add	sp, #24
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	46c0      	nop			; (mov r8, r8)
 80122d8:	20001114 	.word	0x20001114
 80122dc:	20001120 	.word	0x20001120
 80122e0:	20001118 	.word	0x20001118
 80122e4:	2000110c 	.word	0x2000110c
 80122e8:	2000111c 	.word	0x2000111c

080122ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d035      	beq.n	801236a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80122fe:	2308      	movs	r3, #8
 8012300:	425b      	negs	r3, r3
 8012302:	68fa      	ldr	r2, [r7, #12]
 8012304:	18d3      	adds	r3, r2, r3
 8012306:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	685a      	ldr	r2, [r3, #4]
 8012310:	4b18      	ldr	r3, [pc, #96]	; (8012374 <vPortFree+0x88>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	4013      	ands	r3, r2
 8012316:	d101      	bne.n	801231c <vPortFree+0x30>
 8012318:	b672      	cpsid	i
 801231a:	e7fe      	b.n	801231a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d001      	beq.n	8012328 <vPortFree+0x3c>
 8012324:	b672      	cpsid	i
 8012326:	e7fe      	b.n	8012326 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	685a      	ldr	r2, [r3, #4]
 801232c:	4b11      	ldr	r3, [pc, #68]	; (8012374 <vPortFree+0x88>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	4013      	ands	r3, r2
 8012332:	d01a      	beq.n	801236a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d116      	bne.n	801236a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	685a      	ldr	r2, [r3, #4]
 8012340:	4b0c      	ldr	r3, [pc, #48]	; (8012374 <vPortFree+0x88>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	43db      	mvns	r3, r3
 8012346:	401a      	ands	r2, r3
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801234c:	f7ff fb1c 	bl	8011988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	685a      	ldr	r2, [r3, #4]
 8012354:	4b08      	ldr	r3, [pc, #32]	; (8012378 <vPortFree+0x8c>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	18d2      	adds	r2, r2, r3
 801235a:	4b07      	ldr	r3, [pc, #28]	; (8012378 <vPortFree+0x8c>)
 801235c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	0018      	movs	r0, r3
 8012362:	f000 f86b 	bl	801243c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012366:	f7ff fb1b 	bl	80119a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801236a:	46c0      	nop			; (mov r8, r8)
 801236c:	46bd      	mov	sp, r7
 801236e:	b004      	add	sp, #16
 8012370:	bd80      	pop	{r7, pc}
 8012372:	46c0      	nop			; (mov r8, r8)
 8012374:	20001120 	.word	0x20001120
 8012378:	20001118 	.word	0x20001118

0801237c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012382:	23c0      	movs	r3, #192	; 0xc0
 8012384:	011b      	lsls	r3, r3, #4
 8012386:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012388:	4b26      	ldr	r3, [pc, #152]	; (8012424 <prvHeapInit+0xa8>)
 801238a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2207      	movs	r2, #7
 8012390:	4013      	ands	r3, r2
 8012392:	d00c      	beq.n	80123ae <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	3307      	adds	r3, #7
 8012398:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	2207      	movs	r2, #7
 801239e:	4393      	bics	r3, r2
 80123a0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80123a2:	68ba      	ldr	r2, [r7, #8]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	1ad2      	subs	r2, r2, r3
 80123a8:	4b1e      	ldr	r3, [pc, #120]	; (8012424 <prvHeapInit+0xa8>)
 80123aa:	18d3      	adds	r3, r2, r3
 80123ac:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80123b2:	4b1d      	ldr	r3, [pc, #116]	; (8012428 <prvHeapInit+0xac>)
 80123b4:	687a      	ldr	r2, [r7, #4]
 80123b6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80123b8:	4b1b      	ldr	r3, [pc, #108]	; (8012428 <prvHeapInit+0xac>)
 80123ba:	2200      	movs	r2, #0
 80123bc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	68ba      	ldr	r2, [r7, #8]
 80123c2:	18d3      	adds	r3, r2, r3
 80123c4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80123c6:	2208      	movs	r2, #8
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	1a9b      	subs	r3, r3, r2
 80123cc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2207      	movs	r2, #7
 80123d2:	4393      	bics	r3, r2
 80123d4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80123d6:	68fa      	ldr	r2, [r7, #12]
 80123d8:	4b14      	ldr	r3, [pc, #80]	; (801242c <prvHeapInit+0xb0>)
 80123da:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80123dc:	4b13      	ldr	r3, [pc, #76]	; (801242c <prvHeapInit+0xb0>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	2200      	movs	r2, #0
 80123e2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80123e4:	4b11      	ldr	r3, [pc, #68]	; (801242c <prvHeapInit+0xb0>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	2200      	movs	r2, #0
 80123ea:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	68fa      	ldr	r2, [r7, #12]
 80123f4:	1ad2      	subs	r2, r2, r3
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80123fa:	4b0c      	ldr	r3, [pc, #48]	; (801242c <prvHeapInit+0xb0>)
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	685a      	ldr	r2, [r3, #4]
 8012406:	4b0a      	ldr	r3, [pc, #40]	; (8012430 <prvHeapInit+0xb4>)
 8012408:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	685a      	ldr	r2, [r3, #4]
 801240e:	4b09      	ldr	r3, [pc, #36]	; (8012434 <prvHeapInit+0xb8>)
 8012410:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012412:	4b09      	ldr	r3, [pc, #36]	; (8012438 <prvHeapInit+0xbc>)
 8012414:	2280      	movs	r2, #128	; 0x80
 8012416:	0612      	lsls	r2, r2, #24
 8012418:	601a      	str	r2, [r3, #0]
}
 801241a:	46c0      	nop			; (mov r8, r8)
 801241c:	46bd      	mov	sp, r7
 801241e:	b004      	add	sp, #16
 8012420:	bd80      	pop	{r7, pc}
 8012422:	46c0      	nop			; (mov r8, r8)
 8012424:	2000050c 	.word	0x2000050c
 8012428:	2000110c 	.word	0x2000110c
 801242c:	20001114 	.word	0x20001114
 8012430:	2000111c 	.word	0x2000111c
 8012434:	20001118 	.word	0x20001118
 8012438:	20001120 	.word	0x20001120

0801243c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b084      	sub	sp, #16
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012444:	4b27      	ldr	r3, [pc, #156]	; (80124e4 <prvInsertBlockIntoFreeList+0xa8>)
 8012446:	60fb      	str	r3, [r7, #12]
 8012448:	e002      	b.n	8012450 <prvInsertBlockIntoFreeList+0x14>
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	60fb      	str	r3, [r7, #12]
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	429a      	cmp	r2, r3
 8012458:	d8f7      	bhi.n	801244a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	685b      	ldr	r3, [r3, #4]
 8012462:	68ba      	ldr	r2, [r7, #8]
 8012464:	18d3      	adds	r3, r2, r3
 8012466:	687a      	ldr	r2, [r7, #4]
 8012468:	429a      	cmp	r2, r3
 801246a:	d108      	bne.n	801247e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	685a      	ldr	r2, [r3, #4]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	18d2      	adds	r2, r2, r3
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	68ba      	ldr	r2, [r7, #8]
 8012488:	18d2      	adds	r2, r2, r3
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	429a      	cmp	r2, r3
 8012490:	d118      	bne.n	80124c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	4b14      	ldr	r3, [pc, #80]	; (80124e8 <prvInsertBlockIntoFreeList+0xac>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	429a      	cmp	r2, r3
 801249c:	d00d      	beq.n	80124ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	685a      	ldr	r2, [r3, #4]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	18d2      	adds	r2, r2, r3
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	681a      	ldr	r2, [r3, #0]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	601a      	str	r2, [r3, #0]
 80124b8:	e008      	b.n	80124cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80124ba:	4b0b      	ldr	r3, [pc, #44]	; (80124e8 <prvInsertBlockIntoFreeList+0xac>)
 80124bc:	681a      	ldr	r2, [r3, #0]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	601a      	str	r2, [r3, #0]
 80124c2:	e003      	b.n	80124cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681a      	ldr	r2, [r3, #0]
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80124cc:	68fa      	ldr	r2, [r7, #12]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d002      	beq.n	80124da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	687a      	ldr	r2, [r7, #4]
 80124d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124da:	46c0      	nop			; (mov r8, r8)
 80124dc:	46bd      	mov	sp, r7
 80124de:	b004      	add	sp, #16
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	46c0      	nop			; (mov r8, r8)
 80124e4:	2000110c 	.word	0x2000110c
 80124e8:	20001114 	.word	0x20001114

080124ec <atoi>:
 80124ec:	b510      	push	{r4, lr}
 80124ee:	220a      	movs	r2, #10
 80124f0:	2100      	movs	r1, #0
 80124f2:	f000 f925 	bl	8012740 <strtol>
 80124f6:	bd10      	pop	{r4, pc}

080124f8 <__errno>:
 80124f8:	4b01      	ldr	r3, [pc, #4]	; (8012500 <__errno+0x8>)
 80124fa:	6818      	ldr	r0, [r3, #0]
 80124fc:	4770      	bx	lr
 80124fe:	46c0      	nop			; (mov r8, r8)
 8012500:	200000e4 	.word	0x200000e4

08012504 <__libc_init_array>:
 8012504:	b570      	push	{r4, r5, r6, lr}
 8012506:	2600      	movs	r6, #0
 8012508:	4d0c      	ldr	r5, [pc, #48]	; (801253c <__libc_init_array+0x38>)
 801250a:	4c0d      	ldr	r4, [pc, #52]	; (8012540 <__libc_init_array+0x3c>)
 801250c:	1b64      	subs	r4, r4, r5
 801250e:	10a4      	asrs	r4, r4, #2
 8012510:	42a6      	cmp	r6, r4
 8012512:	d109      	bne.n	8012528 <__libc_init_array+0x24>
 8012514:	2600      	movs	r6, #0
 8012516:	f000 fd1b 	bl	8012f50 <_init>
 801251a:	4d0a      	ldr	r5, [pc, #40]	; (8012544 <__libc_init_array+0x40>)
 801251c:	4c0a      	ldr	r4, [pc, #40]	; (8012548 <__libc_init_array+0x44>)
 801251e:	1b64      	subs	r4, r4, r5
 8012520:	10a4      	asrs	r4, r4, #2
 8012522:	42a6      	cmp	r6, r4
 8012524:	d105      	bne.n	8012532 <__libc_init_array+0x2e>
 8012526:	bd70      	pop	{r4, r5, r6, pc}
 8012528:	00b3      	lsls	r3, r6, #2
 801252a:	58eb      	ldr	r3, [r5, r3]
 801252c:	4798      	blx	r3
 801252e:	3601      	adds	r6, #1
 8012530:	e7ee      	b.n	8012510 <__libc_init_array+0xc>
 8012532:	00b3      	lsls	r3, r6, #2
 8012534:	58eb      	ldr	r3, [r5, r3]
 8012536:	4798      	blx	r3
 8012538:	3601      	adds	r6, #1
 801253a:	e7f2      	b.n	8012522 <__libc_init_array+0x1e>
 801253c:	0801441c 	.word	0x0801441c
 8012540:	0801441c 	.word	0x0801441c
 8012544:	0801441c 	.word	0x0801441c
 8012548:	08014420 	.word	0x08014420

0801254c <memcpy>:
 801254c:	2300      	movs	r3, #0
 801254e:	b510      	push	{r4, lr}
 8012550:	429a      	cmp	r2, r3
 8012552:	d100      	bne.n	8012556 <memcpy+0xa>
 8012554:	bd10      	pop	{r4, pc}
 8012556:	5ccc      	ldrb	r4, [r1, r3]
 8012558:	54c4      	strb	r4, [r0, r3]
 801255a:	3301      	adds	r3, #1
 801255c:	e7f8      	b.n	8012550 <memcpy+0x4>

0801255e <memset>:
 801255e:	0003      	movs	r3, r0
 8012560:	1882      	adds	r2, r0, r2
 8012562:	4293      	cmp	r3, r2
 8012564:	d100      	bne.n	8012568 <memset+0xa>
 8012566:	4770      	bx	lr
 8012568:	7019      	strb	r1, [r3, #0]
 801256a:	3301      	adds	r3, #1
 801256c:	e7f9      	b.n	8012562 <memset+0x4>
	...

08012570 <siprintf>:
 8012570:	b40e      	push	{r1, r2, r3}
 8012572:	b500      	push	{lr}
 8012574:	490b      	ldr	r1, [pc, #44]	; (80125a4 <siprintf+0x34>)
 8012576:	b09c      	sub	sp, #112	; 0x70
 8012578:	ab1d      	add	r3, sp, #116	; 0x74
 801257a:	9002      	str	r0, [sp, #8]
 801257c:	9006      	str	r0, [sp, #24]
 801257e:	9107      	str	r1, [sp, #28]
 8012580:	9104      	str	r1, [sp, #16]
 8012582:	4809      	ldr	r0, [pc, #36]	; (80125a8 <siprintf+0x38>)
 8012584:	4909      	ldr	r1, [pc, #36]	; (80125ac <siprintf+0x3c>)
 8012586:	cb04      	ldmia	r3!, {r2}
 8012588:	9105      	str	r1, [sp, #20]
 801258a:	6800      	ldr	r0, [r0, #0]
 801258c:	a902      	add	r1, sp, #8
 801258e:	9301      	str	r3, [sp, #4]
 8012590:	f000 f944 	bl	801281c <_svfiprintf_r>
 8012594:	2300      	movs	r3, #0
 8012596:	9a02      	ldr	r2, [sp, #8]
 8012598:	7013      	strb	r3, [r2, #0]
 801259a:	b01c      	add	sp, #112	; 0x70
 801259c:	bc08      	pop	{r3}
 801259e:	b003      	add	sp, #12
 80125a0:	4718      	bx	r3
 80125a2:	46c0      	nop			; (mov r8, r8)
 80125a4:	7fffffff 	.word	0x7fffffff
 80125a8:	200000e4 	.word	0x200000e4
 80125ac:	ffff0208 	.word	0xffff0208

080125b0 <strcat>:
 80125b0:	0002      	movs	r2, r0
 80125b2:	b510      	push	{r4, lr}
 80125b4:	7813      	ldrb	r3, [r2, #0]
 80125b6:	0014      	movs	r4, r2
 80125b8:	3201      	adds	r2, #1
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d1fa      	bne.n	80125b4 <strcat+0x4>
 80125be:	5cca      	ldrb	r2, [r1, r3]
 80125c0:	54e2      	strb	r2, [r4, r3]
 80125c2:	3301      	adds	r3, #1
 80125c4:	2a00      	cmp	r2, #0
 80125c6:	d1fa      	bne.n	80125be <strcat+0xe>
 80125c8:	bd10      	pop	{r4, pc}

080125ca <strcpy>:
 80125ca:	0003      	movs	r3, r0
 80125cc:	780a      	ldrb	r2, [r1, #0]
 80125ce:	3101      	adds	r1, #1
 80125d0:	701a      	strb	r2, [r3, #0]
 80125d2:	3301      	adds	r3, #1
 80125d4:	2a00      	cmp	r2, #0
 80125d6:	d1f9      	bne.n	80125cc <strcpy+0x2>
 80125d8:	4770      	bx	lr

080125da <strncmp>:
 80125da:	b530      	push	{r4, r5, lr}
 80125dc:	0005      	movs	r5, r0
 80125de:	1e10      	subs	r0, r2, #0
 80125e0:	d00b      	beq.n	80125fa <strncmp+0x20>
 80125e2:	2400      	movs	r4, #0
 80125e4:	3a01      	subs	r2, #1
 80125e6:	5d2b      	ldrb	r3, [r5, r4]
 80125e8:	5d08      	ldrb	r0, [r1, r4]
 80125ea:	4283      	cmp	r3, r0
 80125ec:	d104      	bne.n	80125f8 <strncmp+0x1e>
 80125ee:	4294      	cmp	r4, r2
 80125f0:	d002      	beq.n	80125f8 <strncmp+0x1e>
 80125f2:	3401      	adds	r4, #1
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d1f6      	bne.n	80125e6 <strncmp+0xc>
 80125f8:	1a18      	subs	r0, r3, r0
 80125fa:	bd30      	pop	{r4, r5, pc}

080125fc <strncpy>:
 80125fc:	0003      	movs	r3, r0
 80125fe:	b530      	push	{r4, r5, lr}
 8012600:	001d      	movs	r5, r3
 8012602:	2a00      	cmp	r2, #0
 8012604:	d006      	beq.n	8012614 <strncpy+0x18>
 8012606:	780c      	ldrb	r4, [r1, #0]
 8012608:	3a01      	subs	r2, #1
 801260a:	3301      	adds	r3, #1
 801260c:	702c      	strb	r4, [r5, #0]
 801260e:	3101      	adds	r1, #1
 8012610:	2c00      	cmp	r4, #0
 8012612:	d1f5      	bne.n	8012600 <strncpy+0x4>
 8012614:	2100      	movs	r1, #0
 8012616:	189a      	adds	r2, r3, r2
 8012618:	4293      	cmp	r3, r2
 801261a:	d100      	bne.n	801261e <strncpy+0x22>
 801261c:	bd30      	pop	{r4, r5, pc}
 801261e:	7019      	strb	r1, [r3, #0]
 8012620:	3301      	adds	r3, #1
 8012622:	e7f9      	b.n	8012618 <strncpy+0x1c>

08012624 <_strtol_l.isra.0>:
 8012624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012626:	b087      	sub	sp, #28
 8012628:	001e      	movs	r6, r3
 801262a:	9005      	str	r0, [sp, #20]
 801262c:	9101      	str	r1, [sp, #4]
 801262e:	9202      	str	r2, [sp, #8]
 8012630:	2b01      	cmp	r3, #1
 8012632:	d045      	beq.n	80126c0 <_strtol_l.isra.0+0x9c>
 8012634:	0008      	movs	r0, r1
 8012636:	2b24      	cmp	r3, #36	; 0x24
 8012638:	d842      	bhi.n	80126c0 <_strtol_l.isra.0+0x9c>
 801263a:	4b3f      	ldr	r3, [pc, #252]	; (8012738 <_strtol_l.isra.0+0x114>)
 801263c:	2208      	movs	r2, #8
 801263e:	469c      	mov	ip, r3
 8012640:	0003      	movs	r3, r0
 8012642:	4661      	mov	r1, ip
 8012644:	781c      	ldrb	r4, [r3, #0]
 8012646:	1c45      	adds	r5, r0, #1
 8012648:	5d09      	ldrb	r1, [r1, r4]
 801264a:	0028      	movs	r0, r5
 801264c:	000f      	movs	r7, r1
 801264e:	4017      	ands	r7, r2
 8012650:	4211      	tst	r1, r2
 8012652:	d1f5      	bne.n	8012640 <_strtol_l.isra.0+0x1c>
 8012654:	2c2d      	cmp	r4, #45	; 0x2d
 8012656:	d13a      	bne.n	80126ce <_strtol_l.isra.0+0xaa>
 8012658:	2701      	movs	r7, #1
 801265a:	782c      	ldrb	r4, [r5, #0]
 801265c:	1c9d      	adds	r5, r3, #2
 801265e:	2e00      	cmp	r6, #0
 8012660:	d065      	beq.n	801272e <_strtol_l.isra.0+0x10a>
 8012662:	2e10      	cmp	r6, #16
 8012664:	d109      	bne.n	801267a <_strtol_l.isra.0+0x56>
 8012666:	2c30      	cmp	r4, #48	; 0x30
 8012668:	d107      	bne.n	801267a <_strtol_l.isra.0+0x56>
 801266a:	2220      	movs	r2, #32
 801266c:	782b      	ldrb	r3, [r5, #0]
 801266e:	4393      	bics	r3, r2
 8012670:	2b58      	cmp	r3, #88	; 0x58
 8012672:	d157      	bne.n	8012724 <_strtol_l.isra.0+0x100>
 8012674:	2610      	movs	r6, #16
 8012676:	786c      	ldrb	r4, [r5, #1]
 8012678:	3502      	adds	r5, #2
 801267a:	4b30      	ldr	r3, [pc, #192]	; (801273c <_strtol_l.isra.0+0x118>)
 801267c:	0031      	movs	r1, r6
 801267e:	18fb      	adds	r3, r7, r3
 8012680:	0018      	movs	r0, r3
 8012682:	9303      	str	r3, [sp, #12]
 8012684:	f7f6 fde2 	bl	800924c <__aeabi_uidivmod>
 8012688:	2300      	movs	r3, #0
 801268a:	2201      	movs	r2, #1
 801268c:	4684      	mov	ip, r0
 801268e:	0018      	movs	r0, r3
 8012690:	9104      	str	r1, [sp, #16]
 8012692:	4252      	negs	r2, r2
 8012694:	0021      	movs	r1, r4
 8012696:	3930      	subs	r1, #48	; 0x30
 8012698:	2909      	cmp	r1, #9
 801269a:	d81d      	bhi.n	80126d8 <_strtol_l.isra.0+0xb4>
 801269c:	000c      	movs	r4, r1
 801269e:	42a6      	cmp	r6, r4
 80126a0:	dd28      	ble.n	80126f4 <_strtol_l.isra.0+0xd0>
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	db24      	blt.n	80126f0 <_strtol_l.isra.0+0xcc>
 80126a6:	0013      	movs	r3, r2
 80126a8:	4584      	cmp	ip, r0
 80126aa:	d306      	bcc.n	80126ba <_strtol_l.isra.0+0x96>
 80126ac:	d102      	bne.n	80126b4 <_strtol_l.isra.0+0x90>
 80126ae:	9904      	ldr	r1, [sp, #16]
 80126b0:	42a1      	cmp	r1, r4
 80126b2:	db02      	blt.n	80126ba <_strtol_l.isra.0+0x96>
 80126b4:	2301      	movs	r3, #1
 80126b6:	4370      	muls	r0, r6
 80126b8:	1820      	adds	r0, r4, r0
 80126ba:	782c      	ldrb	r4, [r5, #0]
 80126bc:	3501      	adds	r5, #1
 80126be:	e7e9      	b.n	8012694 <_strtol_l.isra.0+0x70>
 80126c0:	f7ff ff1a 	bl	80124f8 <__errno>
 80126c4:	2316      	movs	r3, #22
 80126c6:	6003      	str	r3, [r0, #0]
 80126c8:	2000      	movs	r0, #0
 80126ca:	b007      	add	sp, #28
 80126cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126ce:	2c2b      	cmp	r4, #43	; 0x2b
 80126d0:	d1c5      	bne.n	801265e <_strtol_l.isra.0+0x3a>
 80126d2:	782c      	ldrb	r4, [r5, #0]
 80126d4:	1c9d      	adds	r5, r3, #2
 80126d6:	e7c2      	b.n	801265e <_strtol_l.isra.0+0x3a>
 80126d8:	0021      	movs	r1, r4
 80126da:	3941      	subs	r1, #65	; 0x41
 80126dc:	2919      	cmp	r1, #25
 80126de:	d801      	bhi.n	80126e4 <_strtol_l.isra.0+0xc0>
 80126e0:	3c37      	subs	r4, #55	; 0x37
 80126e2:	e7dc      	b.n	801269e <_strtol_l.isra.0+0x7a>
 80126e4:	0021      	movs	r1, r4
 80126e6:	3961      	subs	r1, #97	; 0x61
 80126e8:	2919      	cmp	r1, #25
 80126ea:	d803      	bhi.n	80126f4 <_strtol_l.isra.0+0xd0>
 80126ec:	3c57      	subs	r4, #87	; 0x57
 80126ee:	e7d6      	b.n	801269e <_strtol_l.isra.0+0x7a>
 80126f0:	0013      	movs	r3, r2
 80126f2:	e7e2      	b.n	80126ba <_strtol_l.isra.0+0x96>
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	da09      	bge.n	801270c <_strtol_l.isra.0+0xe8>
 80126f8:	2322      	movs	r3, #34	; 0x22
 80126fa:	9a05      	ldr	r2, [sp, #20]
 80126fc:	9803      	ldr	r0, [sp, #12]
 80126fe:	6013      	str	r3, [r2, #0]
 8012700:	9b02      	ldr	r3, [sp, #8]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d0e1      	beq.n	80126ca <_strtol_l.isra.0+0xa6>
 8012706:	1e6b      	subs	r3, r5, #1
 8012708:	9301      	str	r3, [sp, #4]
 801270a:	e007      	b.n	801271c <_strtol_l.isra.0+0xf8>
 801270c:	2f00      	cmp	r7, #0
 801270e:	d000      	beq.n	8012712 <_strtol_l.isra.0+0xee>
 8012710:	4240      	negs	r0, r0
 8012712:	9a02      	ldr	r2, [sp, #8]
 8012714:	2a00      	cmp	r2, #0
 8012716:	d0d8      	beq.n	80126ca <_strtol_l.isra.0+0xa6>
 8012718:	2b00      	cmp	r3, #0
 801271a:	d1f4      	bne.n	8012706 <_strtol_l.isra.0+0xe2>
 801271c:	9b02      	ldr	r3, [sp, #8]
 801271e:	9a01      	ldr	r2, [sp, #4]
 8012720:	601a      	str	r2, [r3, #0]
 8012722:	e7d2      	b.n	80126ca <_strtol_l.isra.0+0xa6>
 8012724:	2430      	movs	r4, #48	; 0x30
 8012726:	2e00      	cmp	r6, #0
 8012728:	d1a7      	bne.n	801267a <_strtol_l.isra.0+0x56>
 801272a:	3608      	adds	r6, #8
 801272c:	e7a5      	b.n	801267a <_strtol_l.isra.0+0x56>
 801272e:	2c30      	cmp	r4, #48	; 0x30
 8012730:	d09b      	beq.n	801266a <_strtol_l.isra.0+0x46>
 8012732:	260a      	movs	r6, #10
 8012734:	e7a1      	b.n	801267a <_strtol_l.isra.0+0x56>
 8012736:	46c0      	nop			; (mov r8, r8)
 8012738:	080142e9 	.word	0x080142e9
 801273c:	7fffffff 	.word	0x7fffffff

08012740 <strtol>:
 8012740:	b510      	push	{r4, lr}
 8012742:	0013      	movs	r3, r2
 8012744:	000a      	movs	r2, r1
 8012746:	0001      	movs	r1, r0
 8012748:	4802      	ldr	r0, [pc, #8]	; (8012754 <strtol+0x14>)
 801274a:	6800      	ldr	r0, [r0, #0]
 801274c:	f7ff ff6a 	bl	8012624 <_strtol_l.isra.0>
 8012750:	bd10      	pop	{r4, pc}
 8012752:	46c0      	nop			; (mov r8, r8)
 8012754:	200000e4 	.word	0x200000e4

08012758 <__ssputs_r>:
 8012758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801275a:	688e      	ldr	r6, [r1, #8]
 801275c:	b085      	sub	sp, #20
 801275e:	0007      	movs	r7, r0
 8012760:	000c      	movs	r4, r1
 8012762:	9203      	str	r2, [sp, #12]
 8012764:	9301      	str	r3, [sp, #4]
 8012766:	429e      	cmp	r6, r3
 8012768:	d83c      	bhi.n	80127e4 <__ssputs_r+0x8c>
 801276a:	2390      	movs	r3, #144	; 0x90
 801276c:	898a      	ldrh	r2, [r1, #12]
 801276e:	00db      	lsls	r3, r3, #3
 8012770:	421a      	tst	r2, r3
 8012772:	d034      	beq.n	80127de <__ssputs_r+0x86>
 8012774:	2503      	movs	r5, #3
 8012776:	6909      	ldr	r1, [r1, #16]
 8012778:	6823      	ldr	r3, [r4, #0]
 801277a:	1a5b      	subs	r3, r3, r1
 801277c:	9302      	str	r3, [sp, #8]
 801277e:	6963      	ldr	r3, [r4, #20]
 8012780:	9802      	ldr	r0, [sp, #8]
 8012782:	435d      	muls	r5, r3
 8012784:	0feb      	lsrs	r3, r5, #31
 8012786:	195d      	adds	r5, r3, r5
 8012788:	9b01      	ldr	r3, [sp, #4]
 801278a:	106d      	asrs	r5, r5, #1
 801278c:	3301      	adds	r3, #1
 801278e:	181b      	adds	r3, r3, r0
 8012790:	42ab      	cmp	r3, r5
 8012792:	d900      	bls.n	8012796 <__ssputs_r+0x3e>
 8012794:	001d      	movs	r5, r3
 8012796:	0553      	lsls	r3, r2, #21
 8012798:	d532      	bpl.n	8012800 <__ssputs_r+0xa8>
 801279a:	0029      	movs	r1, r5
 801279c:	0038      	movs	r0, r7
 801279e:	f000 fb27 	bl	8012df0 <_malloc_r>
 80127a2:	1e06      	subs	r6, r0, #0
 80127a4:	d109      	bne.n	80127ba <__ssputs_r+0x62>
 80127a6:	230c      	movs	r3, #12
 80127a8:	603b      	str	r3, [r7, #0]
 80127aa:	2340      	movs	r3, #64	; 0x40
 80127ac:	2001      	movs	r0, #1
 80127ae:	89a2      	ldrh	r2, [r4, #12]
 80127b0:	4240      	negs	r0, r0
 80127b2:	4313      	orrs	r3, r2
 80127b4:	81a3      	strh	r3, [r4, #12]
 80127b6:	b005      	add	sp, #20
 80127b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127ba:	9a02      	ldr	r2, [sp, #8]
 80127bc:	6921      	ldr	r1, [r4, #16]
 80127be:	f7ff fec5 	bl	801254c <memcpy>
 80127c2:	89a3      	ldrh	r3, [r4, #12]
 80127c4:	4a14      	ldr	r2, [pc, #80]	; (8012818 <__ssputs_r+0xc0>)
 80127c6:	401a      	ands	r2, r3
 80127c8:	2380      	movs	r3, #128	; 0x80
 80127ca:	4313      	orrs	r3, r2
 80127cc:	81a3      	strh	r3, [r4, #12]
 80127ce:	9b02      	ldr	r3, [sp, #8]
 80127d0:	6126      	str	r6, [r4, #16]
 80127d2:	18f6      	adds	r6, r6, r3
 80127d4:	6026      	str	r6, [r4, #0]
 80127d6:	6165      	str	r5, [r4, #20]
 80127d8:	9e01      	ldr	r6, [sp, #4]
 80127da:	1aed      	subs	r5, r5, r3
 80127dc:	60a5      	str	r5, [r4, #8]
 80127de:	9b01      	ldr	r3, [sp, #4]
 80127e0:	429e      	cmp	r6, r3
 80127e2:	d900      	bls.n	80127e6 <__ssputs_r+0x8e>
 80127e4:	9e01      	ldr	r6, [sp, #4]
 80127e6:	0032      	movs	r2, r6
 80127e8:	9903      	ldr	r1, [sp, #12]
 80127ea:	6820      	ldr	r0, [r4, #0]
 80127ec:	f000 faa3 	bl	8012d36 <memmove>
 80127f0:	68a3      	ldr	r3, [r4, #8]
 80127f2:	2000      	movs	r0, #0
 80127f4:	1b9b      	subs	r3, r3, r6
 80127f6:	60a3      	str	r3, [r4, #8]
 80127f8:	6823      	ldr	r3, [r4, #0]
 80127fa:	199e      	adds	r6, r3, r6
 80127fc:	6026      	str	r6, [r4, #0]
 80127fe:	e7da      	b.n	80127b6 <__ssputs_r+0x5e>
 8012800:	002a      	movs	r2, r5
 8012802:	0038      	movs	r0, r7
 8012804:	f000 fb52 	bl	8012eac <_realloc_r>
 8012808:	1e06      	subs	r6, r0, #0
 801280a:	d1e0      	bne.n	80127ce <__ssputs_r+0x76>
 801280c:	0038      	movs	r0, r7
 801280e:	6921      	ldr	r1, [r4, #16]
 8012810:	f000 faa4 	bl	8012d5c <_free_r>
 8012814:	e7c7      	b.n	80127a6 <__ssputs_r+0x4e>
 8012816:	46c0      	nop			; (mov r8, r8)
 8012818:	fffffb7f 	.word	0xfffffb7f

0801281c <_svfiprintf_r>:
 801281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801281e:	b0a1      	sub	sp, #132	; 0x84
 8012820:	9003      	str	r0, [sp, #12]
 8012822:	001d      	movs	r5, r3
 8012824:	898b      	ldrh	r3, [r1, #12]
 8012826:	000f      	movs	r7, r1
 8012828:	0016      	movs	r6, r2
 801282a:	061b      	lsls	r3, r3, #24
 801282c:	d511      	bpl.n	8012852 <_svfiprintf_r+0x36>
 801282e:	690b      	ldr	r3, [r1, #16]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d10e      	bne.n	8012852 <_svfiprintf_r+0x36>
 8012834:	2140      	movs	r1, #64	; 0x40
 8012836:	f000 fadb 	bl	8012df0 <_malloc_r>
 801283a:	6038      	str	r0, [r7, #0]
 801283c:	6138      	str	r0, [r7, #16]
 801283e:	2800      	cmp	r0, #0
 8012840:	d105      	bne.n	801284e <_svfiprintf_r+0x32>
 8012842:	230c      	movs	r3, #12
 8012844:	9a03      	ldr	r2, [sp, #12]
 8012846:	3801      	subs	r0, #1
 8012848:	6013      	str	r3, [r2, #0]
 801284a:	b021      	add	sp, #132	; 0x84
 801284c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801284e:	2340      	movs	r3, #64	; 0x40
 8012850:	617b      	str	r3, [r7, #20]
 8012852:	2300      	movs	r3, #0
 8012854:	ac08      	add	r4, sp, #32
 8012856:	6163      	str	r3, [r4, #20]
 8012858:	3320      	adds	r3, #32
 801285a:	7663      	strb	r3, [r4, #25]
 801285c:	3310      	adds	r3, #16
 801285e:	76a3      	strb	r3, [r4, #26]
 8012860:	9507      	str	r5, [sp, #28]
 8012862:	0035      	movs	r5, r6
 8012864:	782b      	ldrb	r3, [r5, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d001      	beq.n	801286e <_svfiprintf_r+0x52>
 801286a:	2b25      	cmp	r3, #37	; 0x25
 801286c:	d147      	bne.n	80128fe <_svfiprintf_r+0xe2>
 801286e:	1bab      	subs	r3, r5, r6
 8012870:	9305      	str	r3, [sp, #20]
 8012872:	42b5      	cmp	r5, r6
 8012874:	d00c      	beq.n	8012890 <_svfiprintf_r+0x74>
 8012876:	0032      	movs	r2, r6
 8012878:	0039      	movs	r1, r7
 801287a:	9803      	ldr	r0, [sp, #12]
 801287c:	f7ff ff6c 	bl	8012758 <__ssputs_r>
 8012880:	1c43      	adds	r3, r0, #1
 8012882:	d100      	bne.n	8012886 <_svfiprintf_r+0x6a>
 8012884:	e0ae      	b.n	80129e4 <_svfiprintf_r+0x1c8>
 8012886:	6962      	ldr	r2, [r4, #20]
 8012888:	9b05      	ldr	r3, [sp, #20]
 801288a:	4694      	mov	ip, r2
 801288c:	4463      	add	r3, ip
 801288e:	6163      	str	r3, [r4, #20]
 8012890:	782b      	ldrb	r3, [r5, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d100      	bne.n	8012898 <_svfiprintf_r+0x7c>
 8012896:	e0a5      	b.n	80129e4 <_svfiprintf_r+0x1c8>
 8012898:	2201      	movs	r2, #1
 801289a:	2300      	movs	r3, #0
 801289c:	4252      	negs	r2, r2
 801289e:	6062      	str	r2, [r4, #4]
 80128a0:	a904      	add	r1, sp, #16
 80128a2:	3254      	adds	r2, #84	; 0x54
 80128a4:	1852      	adds	r2, r2, r1
 80128a6:	1c6e      	adds	r6, r5, #1
 80128a8:	6023      	str	r3, [r4, #0]
 80128aa:	60e3      	str	r3, [r4, #12]
 80128ac:	60a3      	str	r3, [r4, #8]
 80128ae:	7013      	strb	r3, [r2, #0]
 80128b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80128b2:	2205      	movs	r2, #5
 80128b4:	7831      	ldrb	r1, [r6, #0]
 80128b6:	4854      	ldr	r0, [pc, #336]	; (8012a08 <_svfiprintf_r+0x1ec>)
 80128b8:	f000 fa32 	bl	8012d20 <memchr>
 80128bc:	1c75      	adds	r5, r6, #1
 80128be:	2800      	cmp	r0, #0
 80128c0:	d11f      	bne.n	8012902 <_svfiprintf_r+0xe6>
 80128c2:	6822      	ldr	r2, [r4, #0]
 80128c4:	06d3      	lsls	r3, r2, #27
 80128c6:	d504      	bpl.n	80128d2 <_svfiprintf_r+0xb6>
 80128c8:	2353      	movs	r3, #83	; 0x53
 80128ca:	a904      	add	r1, sp, #16
 80128cc:	185b      	adds	r3, r3, r1
 80128ce:	2120      	movs	r1, #32
 80128d0:	7019      	strb	r1, [r3, #0]
 80128d2:	0713      	lsls	r3, r2, #28
 80128d4:	d504      	bpl.n	80128e0 <_svfiprintf_r+0xc4>
 80128d6:	2353      	movs	r3, #83	; 0x53
 80128d8:	a904      	add	r1, sp, #16
 80128da:	185b      	adds	r3, r3, r1
 80128dc:	212b      	movs	r1, #43	; 0x2b
 80128de:	7019      	strb	r1, [r3, #0]
 80128e0:	7833      	ldrb	r3, [r6, #0]
 80128e2:	2b2a      	cmp	r3, #42	; 0x2a
 80128e4:	d016      	beq.n	8012914 <_svfiprintf_r+0xf8>
 80128e6:	0035      	movs	r5, r6
 80128e8:	2100      	movs	r1, #0
 80128ea:	200a      	movs	r0, #10
 80128ec:	68e3      	ldr	r3, [r4, #12]
 80128ee:	782a      	ldrb	r2, [r5, #0]
 80128f0:	1c6e      	adds	r6, r5, #1
 80128f2:	3a30      	subs	r2, #48	; 0x30
 80128f4:	2a09      	cmp	r2, #9
 80128f6:	d94e      	bls.n	8012996 <_svfiprintf_r+0x17a>
 80128f8:	2900      	cmp	r1, #0
 80128fa:	d111      	bne.n	8012920 <_svfiprintf_r+0x104>
 80128fc:	e017      	b.n	801292e <_svfiprintf_r+0x112>
 80128fe:	3501      	adds	r5, #1
 8012900:	e7b0      	b.n	8012864 <_svfiprintf_r+0x48>
 8012902:	4b41      	ldr	r3, [pc, #260]	; (8012a08 <_svfiprintf_r+0x1ec>)
 8012904:	6822      	ldr	r2, [r4, #0]
 8012906:	1ac0      	subs	r0, r0, r3
 8012908:	2301      	movs	r3, #1
 801290a:	4083      	lsls	r3, r0
 801290c:	4313      	orrs	r3, r2
 801290e:	002e      	movs	r6, r5
 8012910:	6023      	str	r3, [r4, #0]
 8012912:	e7ce      	b.n	80128b2 <_svfiprintf_r+0x96>
 8012914:	9b07      	ldr	r3, [sp, #28]
 8012916:	1d19      	adds	r1, r3, #4
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	9107      	str	r1, [sp, #28]
 801291c:	2b00      	cmp	r3, #0
 801291e:	db01      	blt.n	8012924 <_svfiprintf_r+0x108>
 8012920:	930b      	str	r3, [sp, #44]	; 0x2c
 8012922:	e004      	b.n	801292e <_svfiprintf_r+0x112>
 8012924:	425b      	negs	r3, r3
 8012926:	60e3      	str	r3, [r4, #12]
 8012928:	2302      	movs	r3, #2
 801292a:	4313      	orrs	r3, r2
 801292c:	6023      	str	r3, [r4, #0]
 801292e:	782b      	ldrb	r3, [r5, #0]
 8012930:	2b2e      	cmp	r3, #46	; 0x2e
 8012932:	d10a      	bne.n	801294a <_svfiprintf_r+0x12e>
 8012934:	786b      	ldrb	r3, [r5, #1]
 8012936:	2b2a      	cmp	r3, #42	; 0x2a
 8012938:	d135      	bne.n	80129a6 <_svfiprintf_r+0x18a>
 801293a:	9b07      	ldr	r3, [sp, #28]
 801293c:	3502      	adds	r5, #2
 801293e:	1d1a      	adds	r2, r3, #4
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	9207      	str	r2, [sp, #28]
 8012944:	2b00      	cmp	r3, #0
 8012946:	db2b      	blt.n	80129a0 <_svfiprintf_r+0x184>
 8012948:	9309      	str	r3, [sp, #36]	; 0x24
 801294a:	4e30      	ldr	r6, [pc, #192]	; (8012a0c <_svfiprintf_r+0x1f0>)
 801294c:	2203      	movs	r2, #3
 801294e:	0030      	movs	r0, r6
 8012950:	7829      	ldrb	r1, [r5, #0]
 8012952:	f000 f9e5 	bl	8012d20 <memchr>
 8012956:	2800      	cmp	r0, #0
 8012958:	d006      	beq.n	8012968 <_svfiprintf_r+0x14c>
 801295a:	2340      	movs	r3, #64	; 0x40
 801295c:	1b80      	subs	r0, r0, r6
 801295e:	4083      	lsls	r3, r0
 8012960:	6822      	ldr	r2, [r4, #0]
 8012962:	3501      	adds	r5, #1
 8012964:	4313      	orrs	r3, r2
 8012966:	6023      	str	r3, [r4, #0]
 8012968:	7829      	ldrb	r1, [r5, #0]
 801296a:	2206      	movs	r2, #6
 801296c:	4828      	ldr	r0, [pc, #160]	; (8012a10 <_svfiprintf_r+0x1f4>)
 801296e:	1c6e      	adds	r6, r5, #1
 8012970:	7621      	strb	r1, [r4, #24]
 8012972:	f000 f9d5 	bl	8012d20 <memchr>
 8012976:	2800      	cmp	r0, #0
 8012978:	d03c      	beq.n	80129f4 <_svfiprintf_r+0x1d8>
 801297a:	4b26      	ldr	r3, [pc, #152]	; (8012a14 <_svfiprintf_r+0x1f8>)
 801297c:	2b00      	cmp	r3, #0
 801297e:	d125      	bne.n	80129cc <_svfiprintf_r+0x1b0>
 8012980:	2207      	movs	r2, #7
 8012982:	9b07      	ldr	r3, [sp, #28]
 8012984:	3307      	adds	r3, #7
 8012986:	4393      	bics	r3, r2
 8012988:	3308      	adds	r3, #8
 801298a:	9307      	str	r3, [sp, #28]
 801298c:	6963      	ldr	r3, [r4, #20]
 801298e:	9a04      	ldr	r2, [sp, #16]
 8012990:	189b      	adds	r3, r3, r2
 8012992:	6163      	str	r3, [r4, #20]
 8012994:	e765      	b.n	8012862 <_svfiprintf_r+0x46>
 8012996:	4343      	muls	r3, r0
 8012998:	0035      	movs	r5, r6
 801299a:	2101      	movs	r1, #1
 801299c:	189b      	adds	r3, r3, r2
 801299e:	e7a6      	b.n	80128ee <_svfiprintf_r+0xd2>
 80129a0:	2301      	movs	r3, #1
 80129a2:	425b      	negs	r3, r3
 80129a4:	e7d0      	b.n	8012948 <_svfiprintf_r+0x12c>
 80129a6:	2300      	movs	r3, #0
 80129a8:	200a      	movs	r0, #10
 80129aa:	001a      	movs	r2, r3
 80129ac:	3501      	adds	r5, #1
 80129ae:	6063      	str	r3, [r4, #4]
 80129b0:	7829      	ldrb	r1, [r5, #0]
 80129b2:	1c6e      	adds	r6, r5, #1
 80129b4:	3930      	subs	r1, #48	; 0x30
 80129b6:	2909      	cmp	r1, #9
 80129b8:	d903      	bls.n	80129c2 <_svfiprintf_r+0x1a6>
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d0c5      	beq.n	801294a <_svfiprintf_r+0x12e>
 80129be:	9209      	str	r2, [sp, #36]	; 0x24
 80129c0:	e7c3      	b.n	801294a <_svfiprintf_r+0x12e>
 80129c2:	4342      	muls	r2, r0
 80129c4:	0035      	movs	r5, r6
 80129c6:	2301      	movs	r3, #1
 80129c8:	1852      	adds	r2, r2, r1
 80129ca:	e7f1      	b.n	80129b0 <_svfiprintf_r+0x194>
 80129cc:	ab07      	add	r3, sp, #28
 80129ce:	9300      	str	r3, [sp, #0]
 80129d0:	003a      	movs	r2, r7
 80129d2:	0021      	movs	r1, r4
 80129d4:	4b10      	ldr	r3, [pc, #64]	; (8012a18 <_svfiprintf_r+0x1fc>)
 80129d6:	9803      	ldr	r0, [sp, #12]
 80129d8:	e000      	b.n	80129dc <_svfiprintf_r+0x1c0>
 80129da:	bf00      	nop
 80129dc:	9004      	str	r0, [sp, #16]
 80129de:	9b04      	ldr	r3, [sp, #16]
 80129e0:	3301      	adds	r3, #1
 80129e2:	d1d3      	bne.n	801298c <_svfiprintf_r+0x170>
 80129e4:	89bb      	ldrh	r3, [r7, #12]
 80129e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80129e8:	065b      	lsls	r3, r3, #25
 80129ea:	d400      	bmi.n	80129ee <_svfiprintf_r+0x1d2>
 80129ec:	e72d      	b.n	801284a <_svfiprintf_r+0x2e>
 80129ee:	2001      	movs	r0, #1
 80129f0:	4240      	negs	r0, r0
 80129f2:	e72a      	b.n	801284a <_svfiprintf_r+0x2e>
 80129f4:	ab07      	add	r3, sp, #28
 80129f6:	9300      	str	r3, [sp, #0]
 80129f8:	003a      	movs	r2, r7
 80129fa:	0021      	movs	r1, r4
 80129fc:	4b06      	ldr	r3, [pc, #24]	; (8012a18 <_svfiprintf_r+0x1fc>)
 80129fe:	9803      	ldr	r0, [sp, #12]
 8012a00:	f000 f87c 	bl	8012afc <_printf_i>
 8012a04:	e7ea      	b.n	80129dc <_svfiprintf_r+0x1c0>
 8012a06:	46c0      	nop			; (mov r8, r8)
 8012a08:	080143e9 	.word	0x080143e9
 8012a0c:	080143ef 	.word	0x080143ef
 8012a10:	080143f3 	.word	0x080143f3
 8012a14:	00000000 	.word	0x00000000
 8012a18:	08012759 	.word	0x08012759

08012a1c <_printf_common>:
 8012a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a1e:	0015      	movs	r5, r2
 8012a20:	9301      	str	r3, [sp, #4]
 8012a22:	688a      	ldr	r2, [r1, #8]
 8012a24:	690b      	ldr	r3, [r1, #16]
 8012a26:	000c      	movs	r4, r1
 8012a28:	9000      	str	r0, [sp, #0]
 8012a2a:	4293      	cmp	r3, r2
 8012a2c:	da00      	bge.n	8012a30 <_printf_common+0x14>
 8012a2e:	0013      	movs	r3, r2
 8012a30:	0022      	movs	r2, r4
 8012a32:	602b      	str	r3, [r5, #0]
 8012a34:	3243      	adds	r2, #67	; 0x43
 8012a36:	7812      	ldrb	r2, [r2, #0]
 8012a38:	2a00      	cmp	r2, #0
 8012a3a:	d001      	beq.n	8012a40 <_printf_common+0x24>
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	602b      	str	r3, [r5, #0]
 8012a40:	6823      	ldr	r3, [r4, #0]
 8012a42:	069b      	lsls	r3, r3, #26
 8012a44:	d502      	bpl.n	8012a4c <_printf_common+0x30>
 8012a46:	682b      	ldr	r3, [r5, #0]
 8012a48:	3302      	adds	r3, #2
 8012a4a:	602b      	str	r3, [r5, #0]
 8012a4c:	6822      	ldr	r2, [r4, #0]
 8012a4e:	2306      	movs	r3, #6
 8012a50:	0017      	movs	r7, r2
 8012a52:	401f      	ands	r7, r3
 8012a54:	421a      	tst	r2, r3
 8012a56:	d027      	beq.n	8012aa8 <_printf_common+0x8c>
 8012a58:	0023      	movs	r3, r4
 8012a5a:	3343      	adds	r3, #67	; 0x43
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	1e5a      	subs	r2, r3, #1
 8012a60:	4193      	sbcs	r3, r2
 8012a62:	6822      	ldr	r2, [r4, #0]
 8012a64:	0692      	lsls	r2, r2, #26
 8012a66:	d430      	bmi.n	8012aca <_printf_common+0xae>
 8012a68:	0022      	movs	r2, r4
 8012a6a:	9901      	ldr	r1, [sp, #4]
 8012a6c:	9800      	ldr	r0, [sp, #0]
 8012a6e:	9e08      	ldr	r6, [sp, #32]
 8012a70:	3243      	adds	r2, #67	; 0x43
 8012a72:	47b0      	blx	r6
 8012a74:	1c43      	adds	r3, r0, #1
 8012a76:	d025      	beq.n	8012ac4 <_printf_common+0xa8>
 8012a78:	2306      	movs	r3, #6
 8012a7a:	6820      	ldr	r0, [r4, #0]
 8012a7c:	682a      	ldr	r2, [r5, #0]
 8012a7e:	68e1      	ldr	r1, [r4, #12]
 8012a80:	2500      	movs	r5, #0
 8012a82:	4003      	ands	r3, r0
 8012a84:	2b04      	cmp	r3, #4
 8012a86:	d103      	bne.n	8012a90 <_printf_common+0x74>
 8012a88:	1a8d      	subs	r5, r1, r2
 8012a8a:	43eb      	mvns	r3, r5
 8012a8c:	17db      	asrs	r3, r3, #31
 8012a8e:	401d      	ands	r5, r3
 8012a90:	68a3      	ldr	r3, [r4, #8]
 8012a92:	6922      	ldr	r2, [r4, #16]
 8012a94:	4293      	cmp	r3, r2
 8012a96:	dd01      	ble.n	8012a9c <_printf_common+0x80>
 8012a98:	1a9b      	subs	r3, r3, r2
 8012a9a:	18ed      	adds	r5, r5, r3
 8012a9c:	2700      	movs	r7, #0
 8012a9e:	42bd      	cmp	r5, r7
 8012aa0:	d120      	bne.n	8012ae4 <_printf_common+0xc8>
 8012aa2:	2000      	movs	r0, #0
 8012aa4:	e010      	b.n	8012ac8 <_printf_common+0xac>
 8012aa6:	3701      	adds	r7, #1
 8012aa8:	68e3      	ldr	r3, [r4, #12]
 8012aaa:	682a      	ldr	r2, [r5, #0]
 8012aac:	1a9b      	subs	r3, r3, r2
 8012aae:	42bb      	cmp	r3, r7
 8012ab0:	ddd2      	ble.n	8012a58 <_printf_common+0x3c>
 8012ab2:	0022      	movs	r2, r4
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	9901      	ldr	r1, [sp, #4]
 8012ab8:	9800      	ldr	r0, [sp, #0]
 8012aba:	9e08      	ldr	r6, [sp, #32]
 8012abc:	3219      	adds	r2, #25
 8012abe:	47b0      	blx	r6
 8012ac0:	1c43      	adds	r3, r0, #1
 8012ac2:	d1f0      	bne.n	8012aa6 <_printf_common+0x8a>
 8012ac4:	2001      	movs	r0, #1
 8012ac6:	4240      	negs	r0, r0
 8012ac8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012aca:	2030      	movs	r0, #48	; 0x30
 8012acc:	18e1      	adds	r1, r4, r3
 8012ace:	3143      	adds	r1, #67	; 0x43
 8012ad0:	7008      	strb	r0, [r1, #0]
 8012ad2:	0021      	movs	r1, r4
 8012ad4:	1c5a      	adds	r2, r3, #1
 8012ad6:	3145      	adds	r1, #69	; 0x45
 8012ad8:	7809      	ldrb	r1, [r1, #0]
 8012ada:	18a2      	adds	r2, r4, r2
 8012adc:	3243      	adds	r2, #67	; 0x43
 8012ade:	3302      	adds	r3, #2
 8012ae0:	7011      	strb	r1, [r2, #0]
 8012ae2:	e7c1      	b.n	8012a68 <_printf_common+0x4c>
 8012ae4:	0022      	movs	r2, r4
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	9901      	ldr	r1, [sp, #4]
 8012aea:	9800      	ldr	r0, [sp, #0]
 8012aec:	9e08      	ldr	r6, [sp, #32]
 8012aee:	321a      	adds	r2, #26
 8012af0:	47b0      	blx	r6
 8012af2:	1c43      	adds	r3, r0, #1
 8012af4:	d0e6      	beq.n	8012ac4 <_printf_common+0xa8>
 8012af6:	3701      	adds	r7, #1
 8012af8:	e7d1      	b.n	8012a9e <_printf_common+0x82>
	...

08012afc <_printf_i>:
 8012afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012afe:	b08b      	sub	sp, #44	; 0x2c
 8012b00:	9206      	str	r2, [sp, #24]
 8012b02:	000a      	movs	r2, r1
 8012b04:	3243      	adds	r2, #67	; 0x43
 8012b06:	9307      	str	r3, [sp, #28]
 8012b08:	9005      	str	r0, [sp, #20]
 8012b0a:	9204      	str	r2, [sp, #16]
 8012b0c:	7e0a      	ldrb	r2, [r1, #24]
 8012b0e:	000c      	movs	r4, r1
 8012b10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b12:	2a78      	cmp	r2, #120	; 0x78
 8012b14:	d806      	bhi.n	8012b24 <_printf_i+0x28>
 8012b16:	2a62      	cmp	r2, #98	; 0x62
 8012b18:	d808      	bhi.n	8012b2c <_printf_i+0x30>
 8012b1a:	2a00      	cmp	r2, #0
 8012b1c:	d100      	bne.n	8012b20 <_printf_i+0x24>
 8012b1e:	e0c0      	b.n	8012ca2 <_printf_i+0x1a6>
 8012b20:	2a58      	cmp	r2, #88	; 0x58
 8012b22:	d052      	beq.n	8012bca <_printf_i+0xce>
 8012b24:	0026      	movs	r6, r4
 8012b26:	3642      	adds	r6, #66	; 0x42
 8012b28:	7032      	strb	r2, [r6, #0]
 8012b2a:	e022      	b.n	8012b72 <_printf_i+0x76>
 8012b2c:	0010      	movs	r0, r2
 8012b2e:	3863      	subs	r0, #99	; 0x63
 8012b30:	2815      	cmp	r0, #21
 8012b32:	d8f7      	bhi.n	8012b24 <_printf_i+0x28>
 8012b34:	f7f6 fafa 	bl	800912c <__gnu_thumb1_case_shi>
 8012b38:	001f0016 	.word	0x001f0016
 8012b3c:	fff6fff6 	.word	0xfff6fff6
 8012b40:	fff6fff6 	.word	0xfff6fff6
 8012b44:	fff6001f 	.word	0xfff6001f
 8012b48:	fff6fff6 	.word	0xfff6fff6
 8012b4c:	00a8fff6 	.word	0x00a8fff6
 8012b50:	009a0036 	.word	0x009a0036
 8012b54:	fff6fff6 	.word	0xfff6fff6
 8012b58:	fff600b9 	.word	0xfff600b9
 8012b5c:	fff60036 	.word	0xfff60036
 8012b60:	009efff6 	.word	0x009efff6
 8012b64:	0026      	movs	r6, r4
 8012b66:	681a      	ldr	r2, [r3, #0]
 8012b68:	3642      	adds	r6, #66	; 0x42
 8012b6a:	1d11      	adds	r1, r2, #4
 8012b6c:	6019      	str	r1, [r3, #0]
 8012b6e:	6813      	ldr	r3, [r2, #0]
 8012b70:	7033      	strb	r3, [r6, #0]
 8012b72:	2301      	movs	r3, #1
 8012b74:	e0a7      	b.n	8012cc6 <_printf_i+0x1ca>
 8012b76:	6808      	ldr	r0, [r1, #0]
 8012b78:	6819      	ldr	r1, [r3, #0]
 8012b7a:	1d0a      	adds	r2, r1, #4
 8012b7c:	0605      	lsls	r5, r0, #24
 8012b7e:	d50b      	bpl.n	8012b98 <_printf_i+0x9c>
 8012b80:	680d      	ldr	r5, [r1, #0]
 8012b82:	601a      	str	r2, [r3, #0]
 8012b84:	2d00      	cmp	r5, #0
 8012b86:	da03      	bge.n	8012b90 <_printf_i+0x94>
 8012b88:	232d      	movs	r3, #45	; 0x2d
 8012b8a:	9a04      	ldr	r2, [sp, #16]
 8012b8c:	426d      	negs	r5, r5
 8012b8e:	7013      	strb	r3, [r2, #0]
 8012b90:	4b61      	ldr	r3, [pc, #388]	; (8012d18 <_printf_i+0x21c>)
 8012b92:	270a      	movs	r7, #10
 8012b94:	9303      	str	r3, [sp, #12]
 8012b96:	e032      	b.n	8012bfe <_printf_i+0x102>
 8012b98:	680d      	ldr	r5, [r1, #0]
 8012b9a:	601a      	str	r2, [r3, #0]
 8012b9c:	0641      	lsls	r1, r0, #25
 8012b9e:	d5f1      	bpl.n	8012b84 <_printf_i+0x88>
 8012ba0:	b22d      	sxth	r5, r5
 8012ba2:	e7ef      	b.n	8012b84 <_printf_i+0x88>
 8012ba4:	680d      	ldr	r5, [r1, #0]
 8012ba6:	6819      	ldr	r1, [r3, #0]
 8012ba8:	1d08      	adds	r0, r1, #4
 8012baa:	6018      	str	r0, [r3, #0]
 8012bac:	062e      	lsls	r6, r5, #24
 8012bae:	d501      	bpl.n	8012bb4 <_printf_i+0xb8>
 8012bb0:	680d      	ldr	r5, [r1, #0]
 8012bb2:	e003      	b.n	8012bbc <_printf_i+0xc0>
 8012bb4:	066d      	lsls	r5, r5, #25
 8012bb6:	d5fb      	bpl.n	8012bb0 <_printf_i+0xb4>
 8012bb8:	680d      	ldr	r5, [r1, #0]
 8012bba:	b2ad      	uxth	r5, r5
 8012bbc:	4b56      	ldr	r3, [pc, #344]	; (8012d18 <_printf_i+0x21c>)
 8012bbe:	270a      	movs	r7, #10
 8012bc0:	9303      	str	r3, [sp, #12]
 8012bc2:	2a6f      	cmp	r2, #111	; 0x6f
 8012bc4:	d117      	bne.n	8012bf6 <_printf_i+0xfa>
 8012bc6:	2708      	movs	r7, #8
 8012bc8:	e015      	b.n	8012bf6 <_printf_i+0xfa>
 8012bca:	3145      	adds	r1, #69	; 0x45
 8012bcc:	700a      	strb	r2, [r1, #0]
 8012bce:	4a52      	ldr	r2, [pc, #328]	; (8012d18 <_printf_i+0x21c>)
 8012bd0:	9203      	str	r2, [sp, #12]
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	6821      	ldr	r1, [r4, #0]
 8012bd6:	ca20      	ldmia	r2!, {r5}
 8012bd8:	601a      	str	r2, [r3, #0]
 8012bda:	0608      	lsls	r0, r1, #24
 8012bdc:	d550      	bpl.n	8012c80 <_printf_i+0x184>
 8012bde:	07cb      	lsls	r3, r1, #31
 8012be0:	d502      	bpl.n	8012be8 <_printf_i+0xec>
 8012be2:	2320      	movs	r3, #32
 8012be4:	4319      	orrs	r1, r3
 8012be6:	6021      	str	r1, [r4, #0]
 8012be8:	2710      	movs	r7, #16
 8012bea:	2d00      	cmp	r5, #0
 8012bec:	d103      	bne.n	8012bf6 <_printf_i+0xfa>
 8012bee:	2320      	movs	r3, #32
 8012bf0:	6822      	ldr	r2, [r4, #0]
 8012bf2:	439a      	bics	r2, r3
 8012bf4:	6022      	str	r2, [r4, #0]
 8012bf6:	0023      	movs	r3, r4
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	3343      	adds	r3, #67	; 0x43
 8012bfc:	701a      	strb	r2, [r3, #0]
 8012bfe:	6863      	ldr	r3, [r4, #4]
 8012c00:	60a3      	str	r3, [r4, #8]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	db03      	blt.n	8012c0e <_printf_i+0x112>
 8012c06:	2204      	movs	r2, #4
 8012c08:	6821      	ldr	r1, [r4, #0]
 8012c0a:	4391      	bics	r1, r2
 8012c0c:	6021      	str	r1, [r4, #0]
 8012c0e:	2d00      	cmp	r5, #0
 8012c10:	d102      	bne.n	8012c18 <_printf_i+0x11c>
 8012c12:	9e04      	ldr	r6, [sp, #16]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d00c      	beq.n	8012c32 <_printf_i+0x136>
 8012c18:	9e04      	ldr	r6, [sp, #16]
 8012c1a:	0028      	movs	r0, r5
 8012c1c:	0039      	movs	r1, r7
 8012c1e:	f7f6 fb15 	bl	800924c <__aeabi_uidivmod>
 8012c22:	9b03      	ldr	r3, [sp, #12]
 8012c24:	3e01      	subs	r6, #1
 8012c26:	5c5b      	ldrb	r3, [r3, r1]
 8012c28:	7033      	strb	r3, [r6, #0]
 8012c2a:	002b      	movs	r3, r5
 8012c2c:	0005      	movs	r5, r0
 8012c2e:	429f      	cmp	r7, r3
 8012c30:	d9f3      	bls.n	8012c1a <_printf_i+0x11e>
 8012c32:	2f08      	cmp	r7, #8
 8012c34:	d109      	bne.n	8012c4a <_printf_i+0x14e>
 8012c36:	6823      	ldr	r3, [r4, #0]
 8012c38:	07db      	lsls	r3, r3, #31
 8012c3a:	d506      	bpl.n	8012c4a <_printf_i+0x14e>
 8012c3c:	6863      	ldr	r3, [r4, #4]
 8012c3e:	6922      	ldr	r2, [r4, #16]
 8012c40:	4293      	cmp	r3, r2
 8012c42:	dc02      	bgt.n	8012c4a <_printf_i+0x14e>
 8012c44:	2330      	movs	r3, #48	; 0x30
 8012c46:	3e01      	subs	r6, #1
 8012c48:	7033      	strb	r3, [r6, #0]
 8012c4a:	9b04      	ldr	r3, [sp, #16]
 8012c4c:	1b9b      	subs	r3, r3, r6
 8012c4e:	6123      	str	r3, [r4, #16]
 8012c50:	9b07      	ldr	r3, [sp, #28]
 8012c52:	0021      	movs	r1, r4
 8012c54:	9300      	str	r3, [sp, #0]
 8012c56:	9805      	ldr	r0, [sp, #20]
 8012c58:	9b06      	ldr	r3, [sp, #24]
 8012c5a:	aa09      	add	r2, sp, #36	; 0x24
 8012c5c:	f7ff fede 	bl	8012a1c <_printf_common>
 8012c60:	1c43      	adds	r3, r0, #1
 8012c62:	d135      	bne.n	8012cd0 <_printf_i+0x1d4>
 8012c64:	2001      	movs	r0, #1
 8012c66:	4240      	negs	r0, r0
 8012c68:	b00b      	add	sp, #44	; 0x2c
 8012c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c6c:	2220      	movs	r2, #32
 8012c6e:	6809      	ldr	r1, [r1, #0]
 8012c70:	430a      	orrs	r2, r1
 8012c72:	6022      	str	r2, [r4, #0]
 8012c74:	0022      	movs	r2, r4
 8012c76:	2178      	movs	r1, #120	; 0x78
 8012c78:	3245      	adds	r2, #69	; 0x45
 8012c7a:	7011      	strb	r1, [r2, #0]
 8012c7c:	4a27      	ldr	r2, [pc, #156]	; (8012d1c <_printf_i+0x220>)
 8012c7e:	e7a7      	b.n	8012bd0 <_printf_i+0xd4>
 8012c80:	0648      	lsls	r0, r1, #25
 8012c82:	d5ac      	bpl.n	8012bde <_printf_i+0xe2>
 8012c84:	b2ad      	uxth	r5, r5
 8012c86:	e7aa      	b.n	8012bde <_printf_i+0xe2>
 8012c88:	681a      	ldr	r2, [r3, #0]
 8012c8a:	680d      	ldr	r5, [r1, #0]
 8012c8c:	1d10      	adds	r0, r2, #4
 8012c8e:	6949      	ldr	r1, [r1, #20]
 8012c90:	6018      	str	r0, [r3, #0]
 8012c92:	6813      	ldr	r3, [r2, #0]
 8012c94:	062e      	lsls	r6, r5, #24
 8012c96:	d501      	bpl.n	8012c9c <_printf_i+0x1a0>
 8012c98:	6019      	str	r1, [r3, #0]
 8012c9a:	e002      	b.n	8012ca2 <_printf_i+0x1a6>
 8012c9c:	066d      	lsls	r5, r5, #25
 8012c9e:	d5fb      	bpl.n	8012c98 <_printf_i+0x19c>
 8012ca0:	8019      	strh	r1, [r3, #0]
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	9e04      	ldr	r6, [sp, #16]
 8012ca6:	6123      	str	r3, [r4, #16]
 8012ca8:	e7d2      	b.n	8012c50 <_printf_i+0x154>
 8012caa:	681a      	ldr	r2, [r3, #0]
 8012cac:	1d11      	adds	r1, r2, #4
 8012cae:	6019      	str	r1, [r3, #0]
 8012cb0:	6816      	ldr	r6, [r2, #0]
 8012cb2:	2100      	movs	r1, #0
 8012cb4:	0030      	movs	r0, r6
 8012cb6:	6862      	ldr	r2, [r4, #4]
 8012cb8:	f000 f832 	bl	8012d20 <memchr>
 8012cbc:	2800      	cmp	r0, #0
 8012cbe:	d001      	beq.n	8012cc4 <_printf_i+0x1c8>
 8012cc0:	1b80      	subs	r0, r0, r6
 8012cc2:	6060      	str	r0, [r4, #4]
 8012cc4:	6863      	ldr	r3, [r4, #4]
 8012cc6:	6123      	str	r3, [r4, #16]
 8012cc8:	2300      	movs	r3, #0
 8012cca:	9a04      	ldr	r2, [sp, #16]
 8012ccc:	7013      	strb	r3, [r2, #0]
 8012cce:	e7bf      	b.n	8012c50 <_printf_i+0x154>
 8012cd0:	6923      	ldr	r3, [r4, #16]
 8012cd2:	0032      	movs	r2, r6
 8012cd4:	9906      	ldr	r1, [sp, #24]
 8012cd6:	9805      	ldr	r0, [sp, #20]
 8012cd8:	9d07      	ldr	r5, [sp, #28]
 8012cda:	47a8      	blx	r5
 8012cdc:	1c43      	adds	r3, r0, #1
 8012cde:	d0c1      	beq.n	8012c64 <_printf_i+0x168>
 8012ce0:	6823      	ldr	r3, [r4, #0]
 8012ce2:	079b      	lsls	r3, r3, #30
 8012ce4:	d415      	bmi.n	8012d12 <_printf_i+0x216>
 8012ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ce8:	68e0      	ldr	r0, [r4, #12]
 8012cea:	4298      	cmp	r0, r3
 8012cec:	dabc      	bge.n	8012c68 <_printf_i+0x16c>
 8012cee:	0018      	movs	r0, r3
 8012cf0:	e7ba      	b.n	8012c68 <_printf_i+0x16c>
 8012cf2:	0022      	movs	r2, r4
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	9906      	ldr	r1, [sp, #24]
 8012cf8:	9805      	ldr	r0, [sp, #20]
 8012cfa:	9e07      	ldr	r6, [sp, #28]
 8012cfc:	3219      	adds	r2, #25
 8012cfe:	47b0      	blx	r6
 8012d00:	1c43      	adds	r3, r0, #1
 8012d02:	d0af      	beq.n	8012c64 <_printf_i+0x168>
 8012d04:	3501      	adds	r5, #1
 8012d06:	68e3      	ldr	r3, [r4, #12]
 8012d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d0a:	1a9b      	subs	r3, r3, r2
 8012d0c:	42ab      	cmp	r3, r5
 8012d0e:	dcf0      	bgt.n	8012cf2 <_printf_i+0x1f6>
 8012d10:	e7e9      	b.n	8012ce6 <_printf_i+0x1ea>
 8012d12:	2500      	movs	r5, #0
 8012d14:	e7f7      	b.n	8012d06 <_printf_i+0x20a>
 8012d16:	46c0      	nop			; (mov r8, r8)
 8012d18:	080143fa 	.word	0x080143fa
 8012d1c:	0801440b 	.word	0x0801440b

08012d20 <memchr>:
 8012d20:	b2c9      	uxtb	r1, r1
 8012d22:	1882      	adds	r2, r0, r2
 8012d24:	4290      	cmp	r0, r2
 8012d26:	d101      	bne.n	8012d2c <memchr+0xc>
 8012d28:	2000      	movs	r0, #0
 8012d2a:	4770      	bx	lr
 8012d2c:	7803      	ldrb	r3, [r0, #0]
 8012d2e:	428b      	cmp	r3, r1
 8012d30:	d0fb      	beq.n	8012d2a <memchr+0xa>
 8012d32:	3001      	adds	r0, #1
 8012d34:	e7f6      	b.n	8012d24 <memchr+0x4>

08012d36 <memmove>:
 8012d36:	b510      	push	{r4, lr}
 8012d38:	4288      	cmp	r0, r1
 8012d3a:	d902      	bls.n	8012d42 <memmove+0xc>
 8012d3c:	188b      	adds	r3, r1, r2
 8012d3e:	4298      	cmp	r0, r3
 8012d40:	d303      	bcc.n	8012d4a <memmove+0x14>
 8012d42:	2300      	movs	r3, #0
 8012d44:	e007      	b.n	8012d56 <memmove+0x20>
 8012d46:	5c8b      	ldrb	r3, [r1, r2]
 8012d48:	5483      	strb	r3, [r0, r2]
 8012d4a:	3a01      	subs	r2, #1
 8012d4c:	d2fb      	bcs.n	8012d46 <memmove+0x10>
 8012d4e:	bd10      	pop	{r4, pc}
 8012d50:	5ccc      	ldrb	r4, [r1, r3]
 8012d52:	54c4      	strb	r4, [r0, r3]
 8012d54:	3301      	adds	r3, #1
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d1fa      	bne.n	8012d50 <memmove+0x1a>
 8012d5a:	e7f8      	b.n	8012d4e <memmove+0x18>

08012d5c <_free_r>:
 8012d5c:	b570      	push	{r4, r5, r6, lr}
 8012d5e:	0005      	movs	r5, r0
 8012d60:	2900      	cmp	r1, #0
 8012d62:	d010      	beq.n	8012d86 <_free_r+0x2a>
 8012d64:	1f0c      	subs	r4, r1, #4
 8012d66:	6823      	ldr	r3, [r4, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	da00      	bge.n	8012d6e <_free_r+0x12>
 8012d6c:	18e4      	adds	r4, r4, r3
 8012d6e:	0028      	movs	r0, r5
 8012d70:	f000 f8d4 	bl	8012f1c <__malloc_lock>
 8012d74:	4a1d      	ldr	r2, [pc, #116]	; (8012dec <_free_r+0x90>)
 8012d76:	6813      	ldr	r3, [r2, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d105      	bne.n	8012d88 <_free_r+0x2c>
 8012d7c:	6063      	str	r3, [r4, #4]
 8012d7e:	6014      	str	r4, [r2, #0]
 8012d80:	0028      	movs	r0, r5
 8012d82:	f000 f8d3 	bl	8012f2c <__malloc_unlock>
 8012d86:	bd70      	pop	{r4, r5, r6, pc}
 8012d88:	42a3      	cmp	r3, r4
 8012d8a:	d908      	bls.n	8012d9e <_free_r+0x42>
 8012d8c:	6821      	ldr	r1, [r4, #0]
 8012d8e:	1860      	adds	r0, r4, r1
 8012d90:	4283      	cmp	r3, r0
 8012d92:	d1f3      	bne.n	8012d7c <_free_r+0x20>
 8012d94:	6818      	ldr	r0, [r3, #0]
 8012d96:	685b      	ldr	r3, [r3, #4]
 8012d98:	1841      	adds	r1, r0, r1
 8012d9a:	6021      	str	r1, [r4, #0]
 8012d9c:	e7ee      	b.n	8012d7c <_free_r+0x20>
 8012d9e:	001a      	movs	r2, r3
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d001      	beq.n	8012daa <_free_r+0x4e>
 8012da6:	42a3      	cmp	r3, r4
 8012da8:	d9f9      	bls.n	8012d9e <_free_r+0x42>
 8012daa:	6811      	ldr	r1, [r2, #0]
 8012dac:	1850      	adds	r0, r2, r1
 8012dae:	42a0      	cmp	r0, r4
 8012db0:	d10b      	bne.n	8012dca <_free_r+0x6e>
 8012db2:	6820      	ldr	r0, [r4, #0]
 8012db4:	1809      	adds	r1, r1, r0
 8012db6:	1850      	adds	r0, r2, r1
 8012db8:	6011      	str	r1, [r2, #0]
 8012dba:	4283      	cmp	r3, r0
 8012dbc:	d1e0      	bne.n	8012d80 <_free_r+0x24>
 8012dbe:	6818      	ldr	r0, [r3, #0]
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	1841      	adds	r1, r0, r1
 8012dc4:	6011      	str	r1, [r2, #0]
 8012dc6:	6053      	str	r3, [r2, #4]
 8012dc8:	e7da      	b.n	8012d80 <_free_r+0x24>
 8012dca:	42a0      	cmp	r0, r4
 8012dcc:	d902      	bls.n	8012dd4 <_free_r+0x78>
 8012dce:	230c      	movs	r3, #12
 8012dd0:	602b      	str	r3, [r5, #0]
 8012dd2:	e7d5      	b.n	8012d80 <_free_r+0x24>
 8012dd4:	6821      	ldr	r1, [r4, #0]
 8012dd6:	1860      	adds	r0, r4, r1
 8012dd8:	4283      	cmp	r3, r0
 8012dda:	d103      	bne.n	8012de4 <_free_r+0x88>
 8012ddc:	6818      	ldr	r0, [r3, #0]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	1841      	adds	r1, r0, r1
 8012de2:	6021      	str	r1, [r4, #0]
 8012de4:	6063      	str	r3, [r4, #4]
 8012de6:	6054      	str	r4, [r2, #4]
 8012de8:	e7ca      	b.n	8012d80 <_free_r+0x24>
 8012dea:	46c0      	nop			; (mov r8, r8)
 8012dec:	20001124 	.word	0x20001124

08012df0 <_malloc_r>:
 8012df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012df2:	2303      	movs	r3, #3
 8012df4:	1ccd      	adds	r5, r1, #3
 8012df6:	439d      	bics	r5, r3
 8012df8:	3508      	adds	r5, #8
 8012dfa:	0006      	movs	r6, r0
 8012dfc:	2d0c      	cmp	r5, #12
 8012dfe:	d21f      	bcs.n	8012e40 <_malloc_r+0x50>
 8012e00:	250c      	movs	r5, #12
 8012e02:	42a9      	cmp	r1, r5
 8012e04:	d81e      	bhi.n	8012e44 <_malloc_r+0x54>
 8012e06:	0030      	movs	r0, r6
 8012e08:	f000 f888 	bl	8012f1c <__malloc_lock>
 8012e0c:	4925      	ldr	r1, [pc, #148]	; (8012ea4 <_malloc_r+0xb4>)
 8012e0e:	680a      	ldr	r2, [r1, #0]
 8012e10:	0014      	movs	r4, r2
 8012e12:	2c00      	cmp	r4, #0
 8012e14:	d11a      	bne.n	8012e4c <_malloc_r+0x5c>
 8012e16:	4f24      	ldr	r7, [pc, #144]	; (8012ea8 <_malloc_r+0xb8>)
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d104      	bne.n	8012e28 <_malloc_r+0x38>
 8012e1e:	0021      	movs	r1, r4
 8012e20:	0030      	movs	r0, r6
 8012e22:	f000 f869 	bl	8012ef8 <_sbrk_r>
 8012e26:	6038      	str	r0, [r7, #0]
 8012e28:	0029      	movs	r1, r5
 8012e2a:	0030      	movs	r0, r6
 8012e2c:	f000 f864 	bl	8012ef8 <_sbrk_r>
 8012e30:	1c43      	adds	r3, r0, #1
 8012e32:	d12b      	bne.n	8012e8c <_malloc_r+0x9c>
 8012e34:	230c      	movs	r3, #12
 8012e36:	0030      	movs	r0, r6
 8012e38:	6033      	str	r3, [r6, #0]
 8012e3a:	f000 f877 	bl	8012f2c <__malloc_unlock>
 8012e3e:	e003      	b.n	8012e48 <_malloc_r+0x58>
 8012e40:	2d00      	cmp	r5, #0
 8012e42:	dade      	bge.n	8012e02 <_malloc_r+0x12>
 8012e44:	230c      	movs	r3, #12
 8012e46:	6033      	str	r3, [r6, #0]
 8012e48:	2000      	movs	r0, #0
 8012e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e4c:	6823      	ldr	r3, [r4, #0]
 8012e4e:	1b5b      	subs	r3, r3, r5
 8012e50:	d419      	bmi.n	8012e86 <_malloc_r+0x96>
 8012e52:	2b0b      	cmp	r3, #11
 8012e54:	d903      	bls.n	8012e5e <_malloc_r+0x6e>
 8012e56:	6023      	str	r3, [r4, #0]
 8012e58:	18e4      	adds	r4, r4, r3
 8012e5a:	6025      	str	r5, [r4, #0]
 8012e5c:	e003      	b.n	8012e66 <_malloc_r+0x76>
 8012e5e:	6863      	ldr	r3, [r4, #4]
 8012e60:	42a2      	cmp	r2, r4
 8012e62:	d10e      	bne.n	8012e82 <_malloc_r+0x92>
 8012e64:	600b      	str	r3, [r1, #0]
 8012e66:	0030      	movs	r0, r6
 8012e68:	f000 f860 	bl	8012f2c <__malloc_unlock>
 8012e6c:	0020      	movs	r0, r4
 8012e6e:	2207      	movs	r2, #7
 8012e70:	300b      	adds	r0, #11
 8012e72:	1d23      	adds	r3, r4, #4
 8012e74:	4390      	bics	r0, r2
 8012e76:	1ac2      	subs	r2, r0, r3
 8012e78:	4298      	cmp	r0, r3
 8012e7a:	d0e6      	beq.n	8012e4a <_malloc_r+0x5a>
 8012e7c:	1a1b      	subs	r3, r3, r0
 8012e7e:	50a3      	str	r3, [r4, r2]
 8012e80:	e7e3      	b.n	8012e4a <_malloc_r+0x5a>
 8012e82:	6053      	str	r3, [r2, #4]
 8012e84:	e7ef      	b.n	8012e66 <_malloc_r+0x76>
 8012e86:	0022      	movs	r2, r4
 8012e88:	6864      	ldr	r4, [r4, #4]
 8012e8a:	e7c2      	b.n	8012e12 <_malloc_r+0x22>
 8012e8c:	2303      	movs	r3, #3
 8012e8e:	1cc4      	adds	r4, r0, #3
 8012e90:	439c      	bics	r4, r3
 8012e92:	42a0      	cmp	r0, r4
 8012e94:	d0e1      	beq.n	8012e5a <_malloc_r+0x6a>
 8012e96:	1a21      	subs	r1, r4, r0
 8012e98:	0030      	movs	r0, r6
 8012e9a:	f000 f82d 	bl	8012ef8 <_sbrk_r>
 8012e9e:	1c43      	adds	r3, r0, #1
 8012ea0:	d1db      	bne.n	8012e5a <_malloc_r+0x6a>
 8012ea2:	e7c7      	b.n	8012e34 <_malloc_r+0x44>
 8012ea4:	20001124 	.word	0x20001124
 8012ea8:	20001128 	.word	0x20001128

08012eac <_realloc_r>:
 8012eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eae:	0007      	movs	r7, r0
 8012eb0:	000d      	movs	r5, r1
 8012eb2:	0016      	movs	r6, r2
 8012eb4:	2900      	cmp	r1, #0
 8012eb6:	d105      	bne.n	8012ec4 <_realloc_r+0x18>
 8012eb8:	0011      	movs	r1, r2
 8012eba:	f7ff ff99 	bl	8012df0 <_malloc_r>
 8012ebe:	0004      	movs	r4, r0
 8012ec0:	0020      	movs	r0, r4
 8012ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ec4:	2a00      	cmp	r2, #0
 8012ec6:	d103      	bne.n	8012ed0 <_realloc_r+0x24>
 8012ec8:	f7ff ff48 	bl	8012d5c <_free_r>
 8012ecc:	0034      	movs	r4, r6
 8012ece:	e7f7      	b.n	8012ec0 <_realloc_r+0x14>
 8012ed0:	f000 f834 	bl	8012f3c <_malloc_usable_size_r>
 8012ed4:	002c      	movs	r4, r5
 8012ed6:	42b0      	cmp	r0, r6
 8012ed8:	d2f2      	bcs.n	8012ec0 <_realloc_r+0x14>
 8012eda:	0031      	movs	r1, r6
 8012edc:	0038      	movs	r0, r7
 8012ede:	f7ff ff87 	bl	8012df0 <_malloc_r>
 8012ee2:	1e04      	subs	r4, r0, #0
 8012ee4:	d0ec      	beq.n	8012ec0 <_realloc_r+0x14>
 8012ee6:	0029      	movs	r1, r5
 8012ee8:	0032      	movs	r2, r6
 8012eea:	f7ff fb2f 	bl	801254c <memcpy>
 8012eee:	0029      	movs	r1, r5
 8012ef0:	0038      	movs	r0, r7
 8012ef2:	f7ff ff33 	bl	8012d5c <_free_r>
 8012ef6:	e7e3      	b.n	8012ec0 <_realloc_r+0x14>

08012ef8 <_sbrk_r>:
 8012ef8:	2300      	movs	r3, #0
 8012efa:	b570      	push	{r4, r5, r6, lr}
 8012efc:	4d06      	ldr	r5, [pc, #24]	; (8012f18 <_sbrk_r+0x20>)
 8012efe:	0004      	movs	r4, r0
 8012f00:	0008      	movs	r0, r1
 8012f02:	602b      	str	r3, [r5, #0]
 8012f04:	f7fa fd62 	bl	800d9cc <_sbrk>
 8012f08:	1c43      	adds	r3, r0, #1
 8012f0a:	d103      	bne.n	8012f14 <_sbrk_r+0x1c>
 8012f0c:	682b      	ldr	r3, [r5, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d000      	beq.n	8012f14 <_sbrk_r+0x1c>
 8012f12:	6023      	str	r3, [r4, #0]
 8012f14:	bd70      	pop	{r4, r5, r6, pc}
 8012f16:	46c0      	nop			; (mov r8, r8)
 8012f18:	20002304 	.word	0x20002304

08012f1c <__malloc_lock>:
 8012f1c:	b510      	push	{r4, lr}
 8012f1e:	4802      	ldr	r0, [pc, #8]	; (8012f28 <__malloc_lock+0xc>)
 8012f20:	f000 f814 	bl	8012f4c <__retarget_lock_acquire_recursive>
 8012f24:	bd10      	pop	{r4, pc}
 8012f26:	46c0      	nop			; (mov r8, r8)
 8012f28:	2000230c 	.word	0x2000230c

08012f2c <__malloc_unlock>:
 8012f2c:	b510      	push	{r4, lr}
 8012f2e:	4802      	ldr	r0, [pc, #8]	; (8012f38 <__malloc_unlock+0xc>)
 8012f30:	f000 f80d 	bl	8012f4e <__retarget_lock_release_recursive>
 8012f34:	bd10      	pop	{r4, pc}
 8012f36:	46c0      	nop			; (mov r8, r8)
 8012f38:	2000230c 	.word	0x2000230c

08012f3c <_malloc_usable_size_r>:
 8012f3c:	1f0b      	subs	r3, r1, #4
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	1f18      	subs	r0, r3, #4
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	da01      	bge.n	8012f4a <_malloc_usable_size_r+0xe>
 8012f46:	580b      	ldr	r3, [r1, r0]
 8012f48:	18c0      	adds	r0, r0, r3
 8012f4a:	4770      	bx	lr

08012f4c <__retarget_lock_acquire_recursive>:
 8012f4c:	4770      	bx	lr

08012f4e <__retarget_lock_release_recursive>:
 8012f4e:	4770      	bx	lr

08012f50 <_init>:
 8012f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f52:	46c0      	nop			; (mov r8, r8)
 8012f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f56:	bc08      	pop	{r3}
 8012f58:	469e      	mov	lr, r3
 8012f5a:	4770      	bx	lr

08012f5c <_fini>:
 8012f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f5e:	46c0      	nop			; (mov r8, r8)
 8012f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f62:	bc08      	pop	{r3}
 8012f64:	469e      	mov	lr, r3
 8012f66:	4770      	bx	lr
